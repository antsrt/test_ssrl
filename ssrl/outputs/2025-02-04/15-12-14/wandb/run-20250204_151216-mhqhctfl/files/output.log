run_name: null
sweep_name: null
env: Go1GoFast
algo: ssrl
gpus: '0'
num_seeds: 1
ssrl_dynamics_fn: contact_integrate_only
render_during_training: true
render_epoch_interval: 1
render_seed: 0
common:
  action_repeat: 1
  obs_history_length: 5
  normalize_observations: false
  forces_in_q_coords: true
actor_network:
  hidden_layers: 2
  hidden_size: 512
  activation: swish
  max_std: null
critic_network:
  hidden_layers: 5
  hidden_size: 256
env_common:
  policy_repeat: 4
  forward_vel_rew_weight: 2.0
  turn_rew_weight: 0.5
  pitch_rew_weight: 0.25
  roll_rew_weight: 0.25
  yaw_rew_weight: 0.5
  side_motion_rew_weight: 0.5
  z_vel_change_rew_weight: 0.15
  ang_vel_rew_weight: 0.0
  ang_change_rew_weight: 0.25
  joint_lim_rew_weight: 0.0
  torque_lim_rew_weight: 0.0
  joint_acc_rew_weight: 0.0
  action_rew_weight: 0.0
  cosmetic_rew_weight: 0.0
  energy_rew_weight: 0.25
  foot_z_rew_weight: 0.0
  torque_lim_penalty_weight: 0.1
  fallen_roll: 0.785
  fallen_pitch: 0.785
  include_height_in_obs: false
  gains_in_action_space: false
  reward_type: normalized
env_sac:
  policy_repeat: ${env_common.policy_repeat}
  forward_cmd_vel_type: constant
  forward_cmd_vel_range: 0.0
  forward_cmd_vel_period_range:
  - 40.0
  - 40.0
  turn_cmd_rate_range:
  - -0.0
  - 0.0
  initial_yaw_range:
  - -0.0
  - 0.0
  contact_time_const: 0.02
  contact_damping_ratio: 1.0
  friction_range:
  - 0.6
  - 0.6
  ground_roll_range:
  - 0.0
  - 0.0
  ground_pitch_range:
  - 0.0
  - 0.0
  joint_damping_perc_range:
  - 1.0
  - 1.0
  joint_gain_range:
  - 1.0
  - 1.0
  link_mass_perc_range:
  - 1.0
  - 1.0
  forward_vel_rew_weight: ${env_common.forward_vel_rew_weight}
  turn_rew_weight: ${env_common.turn_rew_weight}
  pitch_rew_weight: ${env_common.pitch_rew_weight}
  roll_rew_weight: ${env_common.roll_rew_weight}
  yaw_rew_weight: ${env_common.yaw_rew_weight}
  side_motion_rew_weight: ${env_common.side_motion_rew_weight}
  z_vel_change_rew_weight: ${env_common.z_vel_change_rew_weight}
  ang_vel_rew_weight: ${env_common.ang_vel_rew_weight}
  ang_change_rew_weight: ${env_common.ang_change_rew_weight}
  joint_lim_rew_weight: ${env_common.joint_lim_rew_weight}
  torque_lim_rew_weight: ${env_common.torque_lim_rew_weight}
  joint_acc_rew_weight: ${env_common.joint_acc_rew_weight}
  action_rew_weight: ${env_common.action_rew_weight}
  cosmetic_rew_weight: ${env_common.cosmetic_rew_weight}
  energy_rew_weight: ${env_common.energy_rew_weight}
  foot_z_rew_weight: ${env_common.foot_z_rew_weight}
  torque_lim_penalty_weight: ${env_common.torque_lim_penalty_weight}
  fallen_roll: ${env_common.fallen_roll}
  fallen_pitch: ${env_common.fallen_pitch}
  forces_in_q_coords: ${common.forces_in_q_coords}
  include_height_in_obs: ${env_common.include_height_in_obs}
  gains_in_action_space: ${env_common.gains_in_action_space}
  reward_type: ${env_common.reward_type}
sac:
  num_timesteps: 10000000
  episode_length: 1000
  action_repeat: ${common.action_repeat}
  obs_history_length: ${common.obs_history_length}
  num_envs: 1
  num_eval_envs: 500
  learning_rate: 0.0001
  discounting: 0.99
  seed: 0
  batch_size: 200
  num_evals: 10
  normalize_observations: ${common.normalize_observations}
  reward_scaling: 1
  tau: 0.001
  min_replay_size: 10000
  max_replay_size: 200000
  grad_updates_per_step: 20
  deterministic_eval: true
env_ssrl:
  policy_repeat: ${env_common.policy_repeat}
  forward_cmd_vel_type: constant
  forward_cmd_vel_range: 0.0
  forward_cmd_vel_period_range:
  - 40.0
  - 40.0
  turn_cmd_rate_range:
  - -0.0
  - 0.0
  initial_yaw_range:
  - -0.0
  - 0.0
  contact_time_const: 0.02
  contact_damping_ratio: 1.0
  friction_range:
  - 0.6
  - 0.6
  ground_roll_range:
  - 0.0
  - 0.0
  ground_pitch_range:
  - 0.0
  - 0.0
  joint_damping_perc_range:
  - 1.0
  - 1.0
  joint_gain_range:
  - 1.0
  - 1.0
  link_mass_perc_range:
  - 1.0
  - 1.0
  forward_vel_rew_weight: ${env_common.forward_vel_rew_weight}
  turn_rew_weight: ${env_common.turn_rew_weight}
  pitch_rew_weight: ${env_common.pitch_rew_weight}
  roll_rew_weight: ${env_common.roll_rew_weight}
  yaw_rew_weight: ${env_common.yaw_rew_weight}
  side_motion_rew_weight: ${env_common.side_motion_rew_weight}
  z_vel_change_rew_weight: ${env_common.z_vel_change_rew_weight}
  ang_vel_rew_weight: ${env_common.ang_vel_rew_weight}
  ang_change_rew_weight: ${env_common.ang_change_rew_weight}
  joint_lim_rew_weight: ${env_common.joint_lim_rew_weight}
  torque_lim_rew_weight: ${env_common.torque_lim_rew_weight}
  joint_acc_rew_weight: ${env_common.joint_acc_rew_weight}
  action_rew_weight: ${env_common.action_rew_weight}
  cosmetic_rew_weight: ${env_common.cosmetic_rew_weight}
  energy_rew_weight: ${env_common.energy_rew_weight}
  foot_z_rew_weight: ${env_common.foot_z_rew_weight}
  torque_lim_penalty_weight: ${env_common.torque_lim_penalty_weight}
  fallen_roll: ${env_common.fallen_roll}
  fallen_pitch: ${env_common.fallen_pitch}
  forces_in_q_coords: ${common.forces_in_q_coords}
  include_height_in_obs: ${env_common.include_height_in_obs}
  body_height_in_action_space: true
  gains_in_action_space: ${env_common.gains_in_action_space}
  reward_type: ${env_common.reward_type}
  healthy_delta_radius: 2.0
  healthy_delta_yaw: 1.57
ssrl_start_with_sac: false
ssrl:
  episode_length: 1000
  policy_repeat: 1
  num_epochs: 40
  model_trains_per_epoch: 1
  training_steps_per_model_train: 1
  env_steps_per_training_step: 1000
  model_rollouts_per_hallucination_update: 400
  sac_grad_updates_per_hallucination_update: 60
  init_exploration_steps: 1000
  clear_model_buffer_after_model_train: false
  action_repeat: ${common.action_repeat}
  obs_history_length: ${common.obs_history_length}
  num_envs: 1
  num_evals: 41
  num_eval_envs: 1
  policy_normalize_observations: ${common.normalize_observations}
  model_learning_rate: 0.001
  model_training_batch_size: 200
  model_training_max_sgd_steps_per_epoch: null
  model_training_max_epochs: 1000
  model_training_convergence_criteria: 0.01
  model_training_consec_converged_epochs: 6
  model_training_abs_criteria: null
  model_training_test_ratio: 0.2
  model_training_weight_decay: true
  model_training_stop_gradient: false
  model_loss_horizon: 4
  model_check_done_condition: true
  max_env_buffer_size: 15000
  max_model_buffer_size: 400000
  sac_learning_rate: 0.0002
  sac_discounting: 0.99
  sac_batch_size: 256
  real_ratio: 0.06
  sac_reward_scaling: 1.0
  sac_tau: 0.001
  sac_fixed_alpha: None
  seed: 2
  deterministic_in_env: true
  deterministic_eval: true
  hallucination_max_std: -1.0
  zero_final_layer_of_policy: false
ssrl_model:
  hidden_size: 400
  ensemble_size: 7
  num_elites: 5
  probabilistic: true
ssrl_linear_threshold_fn:
  start_epoch: 0
  end_epoch: 10
  start_model_horizon: 1
  end_model_horizon: 20
ssrl_hupts_fn:
  start_epoch: 0
  end_epoch: 4
  start_hupts: 10
  end_hupts: 1000
render:
  policy: ssrl
wandb:
  entity: an-tsaritsin-itmo-university
  log_sac: true
  log_ssrl: true
save_policy:
  sac: true
  sac_all: true
  ssrl: true
  ssrl_all: true
torque_validate:
  hardware_data: true
Running on GPU 0
[2025-02-04 15:12:19,568][root][INFO] - Converting mesh (1993126006265216142, -3439418937190661993) into convex hull.
[2025-02-04 15:12:23,046][root][INFO] - Converting mesh (5748406913161720956, -2986269374581729793) into convex hull.
[2025-02-04 15:12:23,429][root][INFO] - Converting mesh (-4415551285238536375, 7770371435301569394) into convex hull.
[2025-02-04 15:12:24,613][root][INFO] - Converting mesh (810937987662625682, -5470270191830132291) into convex hull.
[2025-02-04 15:12:25,586][root][INFO] - Converting mesh (-5050230898173774401, 3210826395626840498) into convex hull.
[2025-02-04 15:13:26,851][absl][INFO] - {'eval/walltime': 54.419299364089966, 'eval/episode_forward_vel': Array(2.10543359, dtype=float64), 'eval/episode_penalty_torque_lim': Array(-5.11592492, dtype=float64), 'eval/episode_rew_action': Array(0., dtype=float64), 'eval/episode_rew_ang_change': Array(3.7233897, dtype=float64), 'eval/episode_rew_ang_vel': Array(0., dtype=float64), 'eval/episode_rew_cosmetic': Array(0., dtype=float64), 'eval/episode_rew_energy': Array(0.06986831, dtype=float64), 'eval/episode_rew_foot_z': Array(0., dtype=float64), 'eval/episode_rew_forward_vel': Array(0.90556283, dtype=float64), 'eval/episode_rew_joint_acc': Array(0., dtype=float64), 'eval/episode_rew_joint_limits': Array(0., dtype=float64), 'eval/episode_rew_pitch': Array(3.96368671, dtype=float64), 'eval/episode_rew_roll': Array(2.90280313, dtype=float64), 'eval/episode_rew_side_motion': Array(1.89342685, dtype=float64), 'eval/episode_rew_torque_limits': Array(0., dtype=float64), 'eval/episode_rew_turn': Array(3.91322867, dtype=float64), 'eval/episode_rew_yaw': Array(6.00304473, dtype=float64), 'eval/episode_rew_z_vel_change': Array(1.84301141, dtype=float64), 'eval/episode_reward': Array(19.30914456, dtype=float64), 'eval/episode_step_count': Array(2850., dtype=float64), 'eval/avg_episode_length': Array(76., dtype=float64), 'eval/epoch_eval_time': 54.419299364089966, 'eval/sps': 18.375833788479035}
Steps / Eval:  0
Reward is  19.309144559042256
Total reward is  251.0970937014885
[2025-02-04 15:15:49,972][absl][INFO] - env buffer size after init exploration 1000
Traceback (most recent call last):
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/mlir.py", line 1810, in _lower_jaxpr_to_fun_cached
    func_op = ctx.cached_primitive_lowerings[key]
KeyError: (None, let softplus = { lambda ; . let
    a:f64[7,36] = broadcast_in_dim[broadcast_dimensions=() shape=(7, 36)] 0.0
    b:f64[200,7,36] = broadcast_in_dim[
      broadcast_dimensions=(1, 2)
      shape=(200, 7, 36)
    ] a
    c:f64[7,36] = broadcast_in_dim[broadcast_dimensions=() shape=(7, 36)] 0.0
    d:f64[200,7,36] = broadcast_in_dim[
      broadcast_dimensions=(1, 2)
      shape=(200, 7, 36)
    ] c
  in (b, 0.0, d) } in
let cross = { lambda ; . let
    e:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    f:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    g:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    h:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    i:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    j:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
  in (f, j, g, i, h, e) } in
let _take = { lambda ; k:i64[]. let
    l:i64[] = pjit[
      name=remainder
      jaxpr={ lambda ; m:i64[] n:i64[]. let
          o:bool[] = eq n 0
          p:i64[] = pjit[
            name=_where
            jaxpr={ lambda ; q:bool[] r:i64[] s:i64[]. let
                t:i64[] = select_n q s r
              in (t,) }
          ] o 1 n
          u:i64[] = rem m p
          v:bool[] = ne u 0
          w:bool[] = lt u 0
          x:bool[] = lt p 0
          y:bool[] = ne w x
          z:bool[] = and y v
          ba:i64[] = add u p
          bb:i64[] = select_n z u ba
        in (bb,) }
    ] k 1
    bc:i64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] l
  in (bc,) } in
let cross1 = { lambda ; bd:f64[13,3]. let
    be:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    bf:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    bg:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    bh:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    bi:f64[13] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(13, 1)
      unique_indices=True
    ] bd bh
    bj:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    bk:f64[13] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(13, 1)
      unique_indices=True
    ] bd bj
    bl:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    bm:f64[13] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(13, 1)
      unique_indices=True
    ] bd bl
    bn:f64[1,13] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 13)] bm
    bo:f64[1,1,13] = broadcast_in_dim[
      broadcast_dimensions=(1, 2)
      shape=(1, 1, 13)
    ] bn
    bp:f64[1,13] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 13)] bk
    bq:f64[1,1,13] = broadcast_in_dim[
      broadcast_dimensions=(1, 2)
      shape=(1, 1, 13)
    ] bp
    br:f64[1,13] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 13)] bi
    bs:f64[1,1,13] = broadcast_in_dim[
      broadcast_dimensions=(1, 2)
      shape=(1, 1, 13)
    ] br
    bt:f64[1,13] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 13)] bm
    bu:f64[1,1,13] = broadcast_in_dim[
      broadcast_dimensions=(1, 2)
      shape=(1, 1, 13)
    ] bt
    bv:f64[1,13] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 13)] bk
    bw:f64[1,1,13] = broadcast_in_dim[
      broadcast_dimensions=(1, 2)
      shape=(1, 1, 13)
    ] bv
    bx:f64[1,13] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 13)] bi
    by:f64[1,1,13] = broadcast_in_dim[
      broadcast_dimensions=(1, 2)
      shape=(1, 1, 13)
    ] bx
  in (bf, bo, bg, bq, bs, be, bu, bw, by) } in
let _take1 = { lambda ; bz:i64[4]. let
    ca:i64[4] = pjit[
      name=remainder
      jaxpr={ lambda ; cb:i64[4] cc:i64[]. let
          cd:bool[] = eq cc 0
          ce:i64[] = pjit[
            name=_where
            jaxpr={ lambda ; cf:bool[] cg:i64[] ch:i64[]. let
                ci:i64[] = select_n cf ch cg
              in (ci,) }
          ] cd 1 cc
          cj:i64[4] = rem cb ce
          ck:bool[4] = ne cj 0
          cl:bool[4] = lt cj 0
          cm:bool[] = lt ce 0
          cn:bool[4] = ne cl cm
          co:bool[4] = and cn ck
          cp:i64[4] = add cj ce
          cq:i64[4] = select_n co cj cp
        in (cq,) }
    ] bz 13
    cr:i64[4,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(4, 1)] ca
  in (cr,) } in
let _take2 = { lambda ; cs:i64[4]. let
    ct:i64[4] = pjit[
      name=remainder
      jaxpr={ lambda ; cb:i64[4] cc:i64[]. let
          cd:bool[] = eq cc 0
          ce:i64[] = pjit[
            name=_where
            jaxpr={ lambda ; cf:bool[] cg:i64[] ch:i64[]. let
                ci:i64[] = select_n cf ch cg
              in (ci,) }
          ] cd 1 cc
          cj:i64[4] = rem cb ce
          ck:bool[4] = ne cj 0
          cl:bool[4] = lt cj 0
          cm:bool[] = lt ce 0
          cn:bool[4] = ne cl cm
          co:bool[4] = and cn ck
          cp:i64[4] = add cj ce
          cq:i64[4] = select_n co cj cp
        in (cq,) }
    ] cs 13
    cu:i64[4,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(4, 1)] ct
  in (cu,) } in
let _take3 = { lambda ; cv:i64[4]. let
    cw:i64[4] = pjit[
      name=remainder
      jaxpr={ lambda ; cb:i64[4] cc:i64[]. let
          cd:bool[] = eq cc 0
          ce:i64[] = pjit[
            name=_where
            jaxpr={ lambda ; cf:bool[] cg:i64[] ch:i64[]. let
                ci:i64[] = select_n cf ch cg
              in (ci,) }
          ] cd 1 cc
          cj:i64[4] = rem cb ce
          ck:bool[4] = ne cj 0
          cl:bool[4] = lt cj 0
          cm:bool[] = lt ce 0
          cn:bool[4] = ne cl cm
          co:bool[4] = and cn ck
          cp:i64[4] = add cj ce
          cq:i64[4] = select_n co cj cp
        in (cq,) }
    ] cv 1
    cx:i64[4,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(4, 1)] cw
  in (cx,) } in
let cross2 = { lambda ; . let
    cy:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    cz:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    da:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    db:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    dc:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    dd:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
  in (cz, dd, da, dc, db, cy) } in
let _take4 = { lambda ; de:i64[13]. let
    df:i64[13] = pjit[
      name=remainder
      jaxpr={ lambda ; dg:i64[13] dh:i64[]. let
          di:bool[] = eq dh 0
          dj:i64[] = pjit[
            name=_where
            jaxpr={ lambda ; cf:bool[] cg:i64[] ch:i64[]. let
                ci:i64[] = select_n cf ch cg
              in (ci,) }
          ] di 1 dh
          dk:i64[13] = rem dg dj
          dl:bool[13] = ne dk 0
          dm:bool[13] = lt dk 0
          dn:bool[] = lt dj 0
          do:bool[13] = ne dm dn
          dp:bool[13] = and do dl
          dq:i64[13] = add dk dj
          dr:i64[13] = select_n dp dk dq
        in (dr,) }
    ] de 13
    ds:i64[13,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(13, 1)] df
  in (ds,) } in
let jaxpr = { lambda ; dt:f64[] du:f64[]. let dv:f64[] = add dt du in (dv,) } in
let _take5 = { lambda ; dw:i32[13]. let
    dx:i32[13] = pjit[
      name=remainder
      jaxpr={ lambda ; dy:i32[13] dz:i32[]. let
          ea:bool[] = eq dz 0
          eb:i32[] = pjit[
            name=_where
            jaxpr={ lambda ; ec:bool[] ed:i32[] ee:i32[]. let
                ef:i32[] = select_n ec ee ed
              in (ef,) }
          ] ea 1 dz
          eg:i32[13] = rem dy eb
          eh:bool[13] = ne eg 0
          ei:bool[13] = lt eg 0
          ej:bool[] = lt eb 0
          ek:bool[13] = ne ei ej
          el:bool[13] = and ek eh
          em:i32[13] = add eg eb
          en:i32[13] = select_n el eg em
        in (en,) }
    ] dw 14
    eo:i32[13,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(13, 1)] dx
  in (eo,) } in
let _take6 = { lambda ; ep:f64[12,1,3] eq:i64[]. let
    er:i64[] = pjit[
      name=remainder
      jaxpr={ lambda ; m:i64[] n:i64[]. let
          o:bool[] = eq n 0
          p:i64[] = pjit[
            name=_where
            jaxpr={ lambda ; q:bool[] r:i64[] s:i64[]. let
                t:i64[] = select_n q s r
              in (t,) }
          ] o 1 n
          u:i64[] = rem m p
          v:bool[] = ne u 0
          w:bool[] = lt u 0
          x:bool[] = lt p 0
          y:bool[] = ne w x
          z:bool[] = and y v
          ba:i64[] = add u p
          bb:i64[] = select_n z u ba
        in (bb,) }
    ] eq 1
    es:i64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] er
    et:f64[12,3] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(12, 1, 3)
      unique_indices=False
    ] ep es
  in (et,) } in
let cross3 = { lambda ; eu:f64[12,3] ev:f64[12,3]. let
    ew:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    ex:f64[12] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(12, 1)
      unique_indices=True
    ] eu ew
    ey:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    ez:f64[12] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(12, 1)
      unique_indices=True
    ] eu ey
    fa:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    fb:f64[12] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(12, 1)
      unique_indices=True
    ] eu fa
    fc:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    fd:f64[12] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(12, 1)
      unique_indices=True
    ] ev fc
    fe:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    ff:f64[12] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(12, 1)
      unique_indices=True
    ] ev fe
    fg:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    fh:f64[12] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(12, 1)
      unique_indices=True
    ] ev fg
    fi:f64[12] = mul ez fh
    fj:f64[12] = mul fb ff
    fk:f64[12] = sub fi fj
    fl:f64[12] = mul fb fd
    fm:f64[12] = mul ex fh
    fn:f64[12] = sub fl fm
    fo:f64[12] = mul ex ff
    fp:f64[12] = mul ez fd
    fq:f64[12] = sub fo fp
    fr:f64[12,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(12, 1)] fk
    fs:f64[12,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(12, 1)] fn
    ft:f64[12,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(12, 1)] fq
    fu:f64[12,3] = concatenate[dimension=1] fr fs ft
  in (fu,) } in
let _take7 = { lambda ; fv:i64[18]. let
    fw:i64[18] = pjit[
      name=remainder
      jaxpr={ lambda ; fx:i64[18] fy:i64[]. let
          fz:bool[] = eq fy 0
          ga:i64[] = pjit[
            name=_where
            jaxpr={ lambda ; cf:bool[] cg:i64[] ch:i64[]. let
                ci:i64[] = select_n cf ch cg
              in (ci,) }
          ] fz 1 fy
          gb:i64[18] = rem fx ga
          gc:bool[18] = ne gb 0
          gd:bool[18] = lt gb 0
          ge:bool[] = lt ga 0
          gf:bool[18] = ne gd ge
          gg:bool[18] = and gf gc
          gh:i64[18] = add gb ga
          gi:i64[18] = select_n gg gb gh
        in (gi,) }
    ] fv 13
    gj:i64[18,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(18, 1)] fw
  in (gj,) } in
let cross4 = { lambda ; gk:f64[18,3]. let
    gl:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    gm:f64[18] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(18, 1)
      unique_indices=True
    ] gk gl
    gn:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    go:f64[18] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(18, 1)
      unique_indices=True
    ] gk gn
    gp:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    gq:f64[18] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(18, 1)
      unique_indices=True
    ] gk gp
    gr:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    gs:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    gt:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    gu:f64[1,18] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 18)] go
    gv:f64[1,1,18] = broadcast_in_dim[
      broadcast_dimensions=(1, 2)
      shape=(1, 1, 18)
    ] gu
    gw:f64[1,18] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 18)] gq
    gx:f64[1,1,18] = broadcast_in_dim[
      broadcast_dimensions=(1, 2)
      shape=(1, 1, 18)
    ] gw
    gy:f64[1,18] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 18)] gq
    gz:f64[1,1,18] = broadcast_in_dim[
      broadcast_dimensions=(1, 2)
      shape=(1, 1, 18)
    ] gy
    ha:f64[1,18] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 18)] gm
    hb:f64[1,1,18] = broadcast_in_dim[
      broadcast_dimensions=(1, 2)
      shape=(1, 1, 18)
    ] ha
    hc:f64[1,18] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 18)] gm
    hd:f64[1,1,18] = broadcast_in_dim[
      broadcast_dimensions=(1, 2)
      shape=(1, 1, 18)
    ] hc
    he:f64[1,18] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 18)] go
    hf:f64[1,1,18] = broadcast_in_dim[
      broadcast_dimensions=(1, 2)
      shape=(1, 1, 18)
    ] he
  in (gv, gt, gx, gs, gz, gr, hb, hd, hf) } in
let cross5 = { lambda ; . let
    hg:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    hh:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    hi:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    hj:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    hk:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    hl:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
  in (hh, hl, hi, hk, hj, hg) } in
let _take8 = { lambda ; hm:i64[4]. let
    hn:i64[4] = pjit[
      name=remainder
      jaxpr={ lambda ; cb:i64[4] cc:i64[]. let
          cd:bool[] = eq cc 0
          ce:i64[] = pjit[
            name=_where
            jaxpr={ lambda ; cf:bool[] cg:i64[] ch:i64[]. let
                ci:i64[] = select_n cf ch cg
              in (ci,) }
          ] cd 1 cc
          cj:i64[4] = rem cb ce
          ck:bool[4] = ne cj 0
          cl:bool[4] = lt cj 0
          cm:bool[] = lt ce 0
          cn:bool[4] = ne cl cm
          co:bool[4] = and cn ck
          cp:i64[4] = add cj ce
          cq:i64[4] = select_n co cj cp
        in (cq,) }
    ] hm 18
    ho:i64[4,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(4, 1)] hn
  in (ho,) } in
let _take9 = { lambda ; hp:i64[18] hq:i64[4]. let
    hr:i64[4] = pjit[
      name=remainder
      jaxpr={ lambda ; cb:i64[4] cc:i64[]. let
          cd:bool[] = eq cc 0
          ce:i64[] = pjit[
            name=_where
            jaxpr={ lambda ; cf:bool[] cg:i64[] ch:i64[]. let
                ci:i64[] = select_n cf ch cg
              in (ci,) }
          ] cd 1 cc
          cj:i64[4] = rem cb ce
          ck:bool[4] = ne cj 0
          cl:bool[4] = lt cj 0
          cm:bool[] = lt ce 0
          cn:bool[4] = ne cl cm
          co:bool[4] = and cn ck
          cp:i64[4] = add cj ce
          cq:i64[4] = select_n co cj cp
        in (cq,) }
    ] hq 18
    hs:i64[4,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(4, 1)] hr
    ht:i64[4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(), collapsed_slice_dims=(0,), start_index_map=(0,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(1,)
      unique_indices=False
    ] hp hs
  in (ht,) } in
let cross6 = { lambda ; . let
    hu:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    hv:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    hw:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    hx:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    hy:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    hz:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
  in (hv, hz, hw, hy, hx, hu) } in
let cross7 = { lambda ; . let
    ia:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    ib:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    ic:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    id:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    ie:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    if:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
  in (ib, if, ic, ie, id, ia) } in
let _take10 = { lambda ; ig:i64[4]. let
    ih:i64[4] = pjit[
      name=remainder
      jaxpr={ lambda ; cb:i64[4] cc:i64[]. let
          cd:bool[] = eq cc 0
          ce:i64[] = pjit[
            name=_where
            jaxpr={ lambda ; cf:bool[] cg:i64[] ch:i64[]. let
                ci:i64[] = select_n cf ch cg
              in (ci,) }
          ] cd 1 cc
          cj:i64[4] = rem cb ce
          ck:bool[4] = ne cj 0
          cl:bool[4] = lt cj 0
          cm:bool[] = lt ce 0
          cn:bool[4] = ne cl cm
          co:bool[4] = and cn ck
          cp:i64[4] = add cj ce
          cq:i64[4] = select_n co cj cp
        in (cq,) }
    ] ig 13
    ii:i64[4,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(4, 1)] ih
  in (ii,) } in
let _take11 = { lambda ; ij:f64[13] ik:i64[4]. let
    il:i64[4] = pjit[
      name=remainder
      jaxpr={ lambda ; cb:i64[4] cc:i64[]. let
          cd:bool[] = eq cc 0
          ce:i64[] = pjit[
            name=_where
            jaxpr={ lambda ; cf:bool[] cg:i64[] ch:i64[]. let
                ci:i64[] = select_n cf ch cg
              in (ci,) }
          ] cd 1 cc
          cj:i64[4] = rem cb ce
          ck:bool[4] = ne cj 0
          cl:bool[4] = lt cj 0
          cm:bool[] = lt ce 0
          cn:bool[4] = ne cl cm
          co:bool[4] = and cn ck
          cp:i64[4] = add cj ce
          cq:i64[4] = select_n co cj cp
        in (cq,) }
    ] ik 13
    im:i64[4,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(4, 1)] il
    in:f64[4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(), collapsed_slice_dims=(0,), start_index_map=(0,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(1,)
      unique_indices=False
    ] ij im
  in (in,) } in
let _take12 = { lambda ; io:i64[4]. let
    ip:i64[4] = pjit[
      name=remainder
      jaxpr={ lambda ; cb:i64[4] cc:i64[]. let
          cd:bool[] = eq cc 0
          ce:i64[] = pjit[
            name=_where
            jaxpr={ lambda ; cf:bool[] cg:i64[] ch:i64[]. let
                ci:i64[] = select_n cf ch cg
              in (ci,) }
          ] cd 1 cc
          cj:i64[4] = rem cb ce
          ck:bool[4] = ne cj 0
          cl:bool[4] = lt cj 0
          cm:bool[] = lt ce 0
          cn:bool[4] = ne cl cm
          co:bool[4] = and cn ck
          cp:i64[4] = add cj ce
          cq:i64[4] = select_n co cj cp
        in (cq,) }
    ] io 18
    iq:i64[4,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(4, 1)] ip
  in (iq,) } in
let cross8 = { lambda ; . let
    ir:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    is:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    it:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    iu:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    iv:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    iw:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
  in (is, iw, it, iv, iu, ir) } in
let cross9 = { lambda ; . let
    ix:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    iy:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    iz:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    ja:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    jb:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    jc:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
  in (iy, jc, iz, jb, ja, ix) } in
let remainder = { lambda ; jd:i64[]. let
    je:f64[] = convert_element_type[new_dtype=float64 weak_type=False] jd
    jf:bool[] = lt je 0.0
  in (je, jf) } in
let clip = { lambda ; . let
    jg:f64[200,7] = broadcast_in_dim[broadcast_dimensions=() shape=(200, 7)] 1.0
    jh:f64[200,7] = broadcast_in_dim[broadcast_dimensions=() shape=(200, 7)] 0.0
    ji:f64[200,7] = broadcast_in_dim[broadcast_dimensions=() shape=(200, 7)] 2.0
    jj:f64[200,7] = broadcast_in_dim[broadcast_dimensions=() shape=(200, 7)] 1.0
    jk:f64[200,7] = broadcast_in_dim[broadcast_dimensions=() shape=(200, 7)] 1.0
    jl:f64[200,7] = broadcast_in_dim[broadcast_dimensions=() shape=(200, 7)] 0.0
    jm:f64[200,7] = broadcast_in_dim[broadcast_dimensions=() shape=(200, 7)] 2.0
    jn:f64[200,7] = broadcast_in_dim[broadcast_dimensions=() shape=(200, 7)] 1.0
  in (jh, jg, jj, ji, jl, jk, jn, jm) } in
let clip1 = { lambda ; jo:f64[12] jp:f64[12]. let
    jq:f64[1,12] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 12)] jo
    jr:f64[1,1,12] = broadcast_in_dim[
      broadcast_dimensions=(1, 2)
      shape=(1, 1, 12)
    ] jq
    js:f64[200,7,12] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 12)
    ] 1.0
    jt:f64[200,7,12] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 12)
    ] 0.0
    ju:f64[200,7,12] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 12)
    ] 2.0
    jv:f64[200,7,12] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 12)
    ] 1.0
    jw:f64[1,12] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 12)] jp
    jx:f64[1,1,12] = broadcast_in_dim[
      broadcast_dimensions=(1, 2)
      shape=(1, 1, 12)
    ] jw
    jy:f64[200,7,12] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 12)
    ] 1.0
    jz:f64[200,7,12] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 12)
    ] 0.0
    ka:f64[200,7,12] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 12)
    ] 2.0
    kb:f64[200,7,12] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 12)
    ] 1.0
  in (jr, jt, js, jv, ju, jx, jz, jy, kb, ka) } in
let remainder1 = { lambda ; m:i64[] n:i64[]. let
    o:bool[] = eq n 0
    p:i64[] = pjit[
      name=_where
      jaxpr={ lambda ; q:bool[] r:i64[] s:i64[]. let
          t:i64[] = select_n q s r
        in (t,) }
    ] o 1 n
    u:i64[] = rem m p
    v:bool[] = ne u 0
    w:bool[] = lt u 0
    x:bool[] = lt p 0
    y:bool[] = ne w x
    z:bool[] = and y v
    ba:i64[] = add u p
    bb:i64[] = select_n z u ba
  in (bb,) } in
let remainder2 = { lambda ; cb:i64[4] cc:i64[]. let
    cd:bool[] = eq cc 0
    ce:i64[] = pjit[
      name=_where
      jaxpr={ lambda ; cf:bool[] cg:i64[] ch:i64[]. let
          ci:i64[] = select_n cf ch cg
        in (ci,) }
    ] cd 1 cc
    cj:i64[4] = rem cb ce
    ck:bool[4] = ne cj 0
    cl:bool[4] = lt cj 0
    cm:bool[] = lt ce 0
    cn:bool[4] = ne cl cm
    co:bool[4] = and cn ck
    cp:i64[4] = add cj ce
    cq:i64[4] = select_n co cj cp
  in (cq,) } in
let remainder3 = { lambda ; dg:i64[13] dh:i64[]. let
    di:bool[] = eq dh 0
    dj:i64[] = pjit[
      name=_where
      jaxpr={ lambda ; cf:bool[] cg:i64[] ch:i64[]. let
          ci:i64[] = select_n cf ch cg
        in (ci,) }
    ] di 1 dh
    dk:i64[13] = rem dg dj
    dl:bool[13] = ne dk 0
    dm:bool[13] = lt dk 0
    dn:bool[] = lt dj 0
    do:bool[13] = ne dm dn
    dp:bool[13] = and do dl
    dq:i64[13] = add dk dj
    dr:i64[13] = select_n dp dk dq
  in (dr,) } in
let remainder4 = { lambda ; dy:i32[13] dz:i32[]. let
    ea:bool[] = eq dz 0
    eb:i32[] = pjit[
      name=_where
      jaxpr={ lambda ; ec:bool[] ed:i32[] ee:i32[]. let
          ef:i32[] = select_n ec ee ed
        in (ef,) }
    ] ea 1 dz
    eg:i32[13] = rem dy eb
    eh:bool[13] = ne eg 0
    ei:bool[13] = lt eg 0
    ej:bool[] = lt eb 0
    ek:bool[13] = ne ei ej
    el:bool[13] = and ek eh
    em:i32[13] = add eg eb
    en:i32[13] = select_n el eg em
  in (en,) } in
let remainder5 = { lambda ; m:i64[] n:i64[]. let
    o:bool[] = eq n 0
    p:i64[] = pjit[
      name=_where
      jaxpr={ lambda ; q:bool[] r:i64[] s:i64[]. let
          t:i64[] = select_n q s r
        in (t,) }
    ] o 1 n
    u:i64[] = rem m p
    v:bool[] = ne u 0
    w:bool[] = lt u 0
    x:bool[] = lt p 0
    y:bool[] = ne w x
    z:bool[] = and y v
    ba:i64[] = add u p
    bb:i64[] = select_n z u ba
  in (bb,) } in
let remainder6 = { lambda ; fx:i64[18] fy:i64[]. let
    fz:bool[] = eq fy 0
    ga:i64[] = pjit[
      name=_where
      jaxpr={ lambda ; cf:bool[] cg:i64[] ch:i64[]. let
          ci:i64[] = select_n cf ch cg
        in (ci,) }
    ] fz 1 fy
    gb:i64[18] = rem fx ga
    gc:bool[18] = ne gb 0
    gd:bool[18] = lt gb 0
    ge:bool[] = lt ga 0
    gf:bool[18] = ne gd ge
    gg:bool[18] = and gf gc
    gh:i64[18] = add gb ga
    gi:i64[18] = select_n gg gb gh
  in (gi,) } in
let remainder7 = { lambda ; cb:i64[4] cc:i64[]. let
    cd:bool[] = eq cc 0
    ce:i64[] = pjit[
      name=_where
      jaxpr={ lambda ; cf:bool[] cg:i64[] ch:i64[]. let
          ci:i64[] = select_n cf ch cg
        in (ci,) }
    ] cd 1 cc
    cj:i64[4] = rem cb ce
    ck:bool[4] = ne cj 0
    cl:bool[4] = lt cj 0
    cm:bool[] = lt ce 0
    cn:bool[4] = ne cl cm
    co:bool[4] = and cn ck
    cp:i64[4] = add cj ce
    cq:i64[4] = select_n co cj cp
  in (cq,) } in
let remainder8 = { lambda ; kc:i64[18] kd:i64[]. let
    ke:bool[] = eq kd 0
    kf:i64[] = pjit[
      name=_where
      jaxpr={ lambda ; cf:bool[] cg:i64[] ch:i64[]. let
          ci:i64[] = select_n cf ch cg
        in (ci,) }
    ] ke 1 kd
    kg:i64[18] = rem kc kf
    kh:bool[18] = ne kg 0
    ki:bool[18] = lt kg 0
    kj:bool[] = lt kf 0
    kk:bool[18] = ne ki kj
    kl:bool[18] = and kk kh
    km:i64[18] = add kg kf
    kn:i64[18] = select_n kl kg km
  in (kn,) } in
let _where = { lambda ; ko:bool[18,18] kp:f64[18] kq:f64[18]. let
    kr:f64[18,18] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(18, 18)] kp
    ks:f64[18,18] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(18, 18)] kq
    kt:f64[18,18] = select_n ko ks kr
  in (kt,) } in
let _cholesky = { lambda ; . let
    ku:bool[200,7,18,18] kv:f64[200,7,18,18] = pjit[
      name=tril
      jaxpr={ lambda ; . let
          kw:i32[18,18] = iota[dimension=0 dtype=int32 shape=(18, 18)]
          kx:i32[18,18] = add kw 0
          ky:i32[18,18] = iota[dimension=1 dtype=int32 shape=(18, 18)]
          kz:bool[18,18] = ge kx ky
          la:bool[200,7,18,18] = broadcast_in_dim[
            broadcast_dimensions=(2, 3)
            shape=(200, 7, 18, 18)
          ] kz
          lb:f64[200,7,18,18] = broadcast_in_dim[
            broadcast_dimensions=()
            shape=(200, 7, 18, 18)
          ] 0.0
        in (la, lb) }
    ]
    lc:bool[200,7,18,18] ld:f64[200,7,18,18] = pjit[
      name=tril
      jaxpr={ lambda ; . let
          le:i32[18,18] = iota[dimension=0 dtype=int32 shape=(18, 18)]
          lf:i32[18,18] = add le 0
          lg:i32[18,18] = iota[dimension=1 dtype=int32 shape=(18, 18)]
          lh:bool[18,18] = ge lf lg
          li:bool[7,18,18] = broadcast_in_dim[
            broadcast_dimensions=(1, 2)
            shape=(7, 18, 18)
          ] lh
          lj:f64[7,18,18] = broadcast_in_dim[
            broadcast_dimensions=()
            shape=(7, 18, 18)
          ] 0.0
          lk:bool[200,7,18,18] = broadcast_in_dim[
            broadcast_dimensions=(1, 2, 3)
            shape=(200, 7, 18, 18)
          ] li
          ll:f64[200,7,18,18] = broadcast_in_dim[
            broadcast_dimensions=(1, 2, 3)
            shape=(200, 7, 18, 18)
          ] lj
        in (lk, ll) }
    ]
    lm:bool[200,7,18,18] ln:f64[200,7,18,18] = pjit[
      name=tril
      jaxpr={ lambda ; . let
          lo:i32[18,18] = iota[dimension=0 dtype=int32 shape=(18, 18)]
          lp:i32[18,18] = add lo 0
          lq:i32[18,18] = iota[dimension=1 dtype=int32 shape=(18, 18)]
          lr:bool[18,18] = ge lp lq
          ls:f64[18,18] = broadcast_in_dim[
            broadcast_dimensions=()
            shape=(18, 18)
          ] 0.0
          lt:bool[7,18,18] = broadcast_in_dim[
            broadcast_dimensions=(1, 2)
            shape=(7, 18, 18)
          ] lr
          lu:f64[7,18,18] = broadcast_in_dim[
            broadcast_dimensions=(1, 2)
            shape=(7, 18, 18)
          ] ls
          lv:bool[200,7,18,18] = broadcast_in_dim[
            broadcast_dimensions=(1, 2, 3)
            shape=(200, 7, 18, 18)
          ] lt
          lw:f64[200,7,18,18] = broadcast_in_dim[
            broadcast_dimensions=(1, 2, 3)
            shape=(200, 7, 18, 18)
          ] lu
        in (lv, lw) }
    ]
  in (ku, kv, lc, ld, lm, ln) } in
let silu = { lambda ; lx:f64[200,7,400]. let
    ly:f64[200,7,400] = logistic lx
    lz:f64[200,7,400] = mul lx ly
    ma:f64[200,7,400] = sub 1.0 ly
    mb:f64[200,7,400] = mul ly ma
  in (lz, ly, mb) } in
let softplus1 = { lambda ; mc:f64[200,7,36] md:f64[200,7,36] me:f64[] mf:f64[200,7,36]. let
    mg:bool[200,7,36] = eq mc inf
    mh:f64[200,7,36] = select_n mg mc md
    mi:f64[200,7,36] = pjit[
      name=logaddexp
      jaxpr={ lambda ; mj:f64[200,7,36] mk:f64[]. let
          ml:f64[200,7,36] = sub mj mk
          mm:bool[200,7,36] = ne ml ml
          mn:f64[200,7,36] = max mj mk
          mo:f64[200,7,36] = abs ml
          mp:f64[200,7,36] = neg mo
          mq:f64[200,7,36] = exp mp
          mr:f64[200,7,36] = log1p mq
          ms:f64[200,7,36] = add mn mr
          mt:f64[200,7,36] = add mj mk
          mu:f64[200,7,36] = select_n mm ms mt
        in (mu,) }
    ] mc me
    mv:bool[200,7,36] = eq mi inf
    mw:f64[200,7,36] = select_n mv mi mf
    mx:f64[200,7,36] = sub mh mw
    my:f64[200,7,36] = exp mx
  in (mi, my) } in
let softplus2 = { lambda ; mz:f64[200,7,36] na:f64[200,7,36]. let
    nb:f64[200,7,36] = mul na mz
  in (nb,) } in
let silu1 = { lambda ; nc:f64[200,7,400] nd:f64[200,7,400] ne:f64[200,7,400] nf:f64[200,7,400]. let
    ng:f64[200,7,400] = mul nd nf
    nh:f64[200,7,400] = mul ng ne
    ni:f64[200,7,400] = mul nf nc
    nj:f64[200,7,400] = add_any nh ni
  in (nj,) } in
let isinf = { lambda ; nk:f64[]. let
    nl:f64[] = abs nk
    nm:bool[] = eq nl inf
  in (nm,) } in
let _where1 = { lambda ; q:bool[] r:i64[] s:i64[]. let
    t:i64[] = select_n q s r
  in (t,) } in
let _where2 = { lambda ; cf:bool[] cg:i64[] ch:i64[]. let
    ci:i64[] = select_n cf ch cg
  in (ci,) } in
let _where3 = { lambda ; ec:bool[] ed:i32[] ee:i32[]. let
    ef:i32[] = select_n ec ee ed
  in (ef,) } in
let _where4 = { lambda ; cf:bool[] cg:i64[] ch:i64[]. let
    ci:i64[] = select_n cf ch cg
  in (ci,) } in
let tril = { lambda ; . let
    kw:i32[18,18] = iota[dimension=0 dtype=int32 shape=(18, 18)]
    kx:i32[18,18] = add kw 0
    ky:i32[18,18] = iota[dimension=1 dtype=int32 shape=(18, 18)]
    kz:bool[18,18] = ge kx ky
    la:bool[200,7,18,18] = broadcast_in_dim[
      broadcast_dimensions=(2, 3)
      shape=(200, 7, 18, 18)
    ] kz
    lb:f64[200,7,18,18] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 18, 18)
    ] 0.0
  in (la, lb) } in
let tril1 = { lambda ; . let
    le:i32[18,18] = iota[dimension=0 dtype=int32 shape=(18, 18)]
    lf:i32[18,18] = add le 0
    lg:i32[18,18] = iota[dimension=1 dtype=int32 shape=(18, 18)]
    lh:bool[18,18] = ge lf lg
    li:bool[7,18,18] = broadcast_in_dim[
      broadcast_dimensions=(1, 2)
      shape=(7, 18, 18)
    ] lh
    lj:f64[7,18,18] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(7, 18, 18)
    ] 0.0
    lk:bool[200,7,18,18] = broadcast_in_dim[
      broadcast_dimensions=(1, 2, 3)
      shape=(200, 7, 18, 18)
    ] li
    ll:f64[200,7,18,18] = broadcast_in_dim[
      broadcast_dimensions=(1, 2, 3)
      shape=(200, 7, 18, 18)
    ] lj
  in (lk, ll) } in
let tril2 = { lambda ; . let
    lo:i32[18,18] = iota[dimension=0 dtype=int32 shape=(18, 18)]
    lp:i32[18,18] = add lo 0
    lq:i32[18,18] = iota[dimension=1 dtype=int32 shape=(18, 18)]
    lr:bool[18,18] = ge lp lq
    ls:f64[18,18] = broadcast_in_dim[broadcast_dimensions=() shape=(18, 18)] 0.0
    lt:bool[7,18,18] = broadcast_in_dim[
      broadcast_dimensions=(1, 2)
      shape=(7, 18, 18)
    ] lr
    lu:f64[7,18,18] = broadcast_in_dim[
      broadcast_dimensions=(1, 2)
      shape=(7, 18, 18)
    ] ls
    lv:bool[200,7,18,18] = broadcast_in_dim[
      broadcast_dimensions=(1, 2, 3)
      shape=(200, 7, 18, 18)
    ] lt
    lw:f64[200,7,18,18] = broadcast_in_dim[
      broadcast_dimensions=(1, 2, 3)
      shape=(200, 7, 18, 18)
    ] lu
  in (lv, lw) } in
let cross10 = { lambda ; nn:f64[200,7,3] no:f64[200,7,3] np:i32[1] nq:i32[1] nr:i32[1]
    ns:i32[1] nt:i32[1] nu:i32[1]. let
    nv:f64[200,7] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 1)
      unique_indices=True
    ] nn np
    nw:f64[200,7] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 1)
      unique_indices=True
    ] no nq
    nx:f64[200,7] = mul nv nw
    ny:f64[200,7] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 1)
      unique_indices=True
    ] nn nr
    nz:f64[200,7] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 1)
      unique_indices=True
    ] no ns
    oa:f64[200,7] = mul ny nz
    ob:f64[200,7] = sub nx oa
    oc:f64[200,7,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(200, 7, 1)
    ] ob
    od:f64[200,7] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 1)
      unique_indices=True
    ] no nt
    oe:f64[200,7] = mul ny od
    of:f64[200,7] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 1)
      unique_indices=True
    ] nn nu
    og:f64[200,7] = mul of nw
    oh:f64[200,7] = sub oe og
    oi:f64[200,7,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(200, 7, 1)
    ] oh
    oj:f64[200,7] = mul of nz
    ok:f64[200,7] = mul nv od
    ol:f64[200,7] = sub oj ok
    om:f64[200,7,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(200, 7, 1)
    ] ol
    on:f64[200,7,3] = concatenate[dimension=2] oc oi om
  in (on, nw, nv, nz, ny, od, of) } in
let _take13 = { lambda ; oo:f64[200,7,13,4] op:i64[4,1]. let
    oq:f64[200,7,4,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 3), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 1, 4)
      unique_indices=False
    ] oo op
  in (oq,) } in
let cross11 = { lambda ; or:f64[200,7,18,3] os:f64[1,1,18] ot:i32[1] ou:f64[1,1,18]
    ov:i32[1] ow:f64[1,1,18] ox:i32[1] oy:f64[1,1,18] oz:f64[1,1,18] pa:f64[1,1,18]. let
    pb:f64[200,7,18] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 18, 1)
      unique_indices=True
    ] or ot
    pc:f64[200,7,18] = mul os pb
    pd:f64[200,7,18] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 18, 1)
      unique_indices=True
    ] or ov
    pe:f64[200,7,18] = mul ou pd
    pf:f64[200,7,18] = sub pc pe
    pg:f64[200,7,18,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(200, 7, 18, 1)
    ] pf
    ph:f64[200,7,18] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 18, 1)
      unique_indices=True
    ] or ox
    pi:f64[200,7,18] = mul ow ph
    pj:f64[200,7,18] = mul oy pb
    pk:f64[200,7,18] = sub pi pj
    pl:f64[200,7,18,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(200, 7, 18, 1)
    ] pk
    pm:f64[200,7,18] = mul oz pd
    pn:f64[200,7,18] = mul pa ph
    po:f64[200,7,18] = sub pm pn
    pp:f64[200,7,18,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(200, 7, 18, 1)
    ] po
    pq:f64[200,7,18,3] = concatenate[dimension=3] pg pl pp
  in (pq,) } in
let _take14 = { lambda ; pr:f64[200,7,12,1,3] ps:i64[1]. let
    pt:f64[200,7,12,3] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2, 3), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 12, 1, 3)
      unique_indices=False
    ] pr ps
  in (pt,) } in
let cross12 = { lambda ; pu:f64[200,7,13,3] pv:i32[1] pw:f64[1,1,13] px:i32[1] py:f64[1,1,13]
    pz:f64[1,1,13] qa:i32[1] qb:f64[1,1,13] qc:f64[1,1,13] qd:f64[1,1,13]. let
    qe:f64[200,7,13] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 13, 1)
      unique_indices=True
    ] pu pv
    qf:f64[200,7,13] = mul qe pw
    qg:f64[200,7,13] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 13, 1)
      unique_indices=True
    ] pu px
    qh:f64[200,7,13] = mul qg py
    qi:f64[200,7,13] = sub qf qh
    qj:f64[200,7,13,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(200, 7, 13, 1)
    ] qi
    qk:f64[200,7,13] = mul qg pz
    ql:f64[200,7,13] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 13, 1)
      unique_indices=True
    ] pu qa
    qm:f64[200,7,13] = mul ql qb
    qn:f64[200,7,13] = sub qk qm
    qo:f64[200,7,13,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(200, 7, 13, 1)
    ] qn
    qp:f64[200,7,13] = mul ql qc
    qq:f64[200,7,13] = mul qe qd
    qr:f64[200,7,13] = sub qp qq
    qs:f64[200,7,13,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(200, 7, 13, 1)
    ] qr
    qt:f64[200,7,13,3] = concatenate[dimension=3] qj qo qs
  in (qt,) } in
let _take15 = { lambda ; qu:f64[200,7,1,3] qv:i64[4,1]. let
    qw:f64[200,7,4,3] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 3), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 1, 3)
      unique_indices=False
    ] qu qv
  in (qw,) } in
let _take16 = { lambda ; qx:f64[200,7,13,3] qy:i64[4,1]. let
    qz:f64[200,7,4,3] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 3), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 1, 3)
      unique_indices=False
    ] qx qy
  in (qz,) } in
let cross13 = { lambda ; ra:f64[200,7,4,3] rb:f64[200,7,4,3] rc:i32[1] rd:i32[1]
    re:i32[1] rf:i32[1] rg:i32[1] rh:i32[1]. let
    ri:f64[200,7,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 4, 1)
      unique_indices=True
    ] ra rc
    rj:f64[200,7,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 4, 1)
      unique_indices=True
    ] rb rd
    rk:f64[200,7,4] = mul ri rj
    rl:f64[200,7,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 4, 1)
      unique_indices=True
    ] ra re
    rm:f64[200,7,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 4, 1)
      unique_indices=True
    ] rb rf
    rn:f64[200,7,4] = mul rl rm
    ro:f64[200,7,4] = sub rk rn
    rp:f64[200,7,4,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(200, 7, 4, 1)
    ] ro
    rq:f64[200,7,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 4, 1)
      unique_indices=True
    ] rb rg
    rr:f64[200,7,4] = mul rl rq
    rs:f64[200,7,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 4, 1)
      unique_indices=True
    ] ra rh
    rt:f64[200,7,4] = mul rs rj
    ru:f64[200,7,4] = sub rr rt
    rv:f64[200,7,4,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(200, 7, 4, 1)
    ] ru
    rw:f64[200,7,4] = mul rs rm
    rx:f64[200,7,4] = mul ri rq
    ry:f64[200,7,4] = sub rw rx
    rz:f64[200,7,4,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(200, 7, 4, 1)
    ] ry
    sa:f64[200,7,4,3] = concatenate[dimension=3] rp rv rz
  in (sa, rj, ri, rm, rl, rq, rs) } in
let _take17 = { lambda ; sb:f64[200,7,13,3] sc:i64[13,1]. let
    sd:f64[200,7,13,3] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 3), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 1, 3)
      unique_indices=False
    ] sb sc
  in (sd,) } in
let _take18 = { lambda ; se:f64[200,7,14,3] sf:i32[13,1]. let
    sg:f64[200,7,13,3] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 3), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 1, 3)
      unique_indices=False
    ] se sf
  in (sg,) } in
let _take19 = { lambda ; sh:f64[200,7,13,3] si:i64[18,1]. let
    sj:f64[200,7,18,3] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 3), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 1, 3)
      unique_indices=False
    ] sh si
  in (sj,) } in
let cross14 = { lambda ; sk:f64[200,7,18,3] sl:f64[200,7,18,3] sm:i32[1] sn:i32[1]
    so:i32[1] sp:i32[1] sq:i32[1] sr:i32[1]. let
    ss:f64[200,7,18] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 18, 1)
      unique_indices=True
    ] sk sm
    st:f64[200,7,18] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 18, 1)
      unique_indices=True
    ] sl sn
    su:f64[200,7,18] = mul ss st
    sv:f64[200,7,18] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 18, 1)
      unique_indices=True
    ] sk so
    sw:f64[200,7,18] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 18, 1)
      unique_indices=True
    ] sl sp
    sx:f64[200,7,18] = mul sv sw
    sy:f64[200,7,18] = sub su sx
    sz:f64[200,7,18,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(200, 7, 18, 1)
    ] sy
    ta:f64[200,7,18] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 18, 1)
      unique_indices=True
    ] sl sq
    tb:f64[200,7,18] = mul sv ta
    tc:f64[200,7,18] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 18, 1)
      unique_indices=True
    ] sk sr
    td:f64[200,7,18] = mul tc st
    te:f64[200,7,18] = sub tb td
    tf:f64[200,7,18,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(200, 7, 18, 1)
    ] te
    tg:f64[200,7,18] = mul tc sw
    th:f64[200,7,18] = mul ss ta
    ti:f64[200,7,18] = sub tg th
    tj:f64[200,7,18,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(200, 7, 18, 1)
    ] ti
    tk:f64[200,7,18,3] = concatenate[dimension=3] sz tf tj
  in (tk, st, ss, sw, sv, ta, tc) } in
let cross15 = { lambda ; tl:f64[200,7,1,3] tm:f64[200,7,1,6,3] tn:i32[1] to:i32[1]
    tp:i32[1] tq:i32[1] tr:i32[1] ts:i32[1]. let
    tt:f64[200,7,1] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 1, 1)
      unique_indices=True
    ] tl tn
    tu:f64[200,7,1,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(200, 7, 1, 1)
    ] tt
    tv:f64[200,7,1,6] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2, 3), collapsed_slice_dims=(4,), start_index_map=(4,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 1, 6, 1)
      unique_indices=True
    ] tm to
    tw:f64[200,7,1,6] = mul tu tv
    tx:f64[200,7,1] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 1, 1)
      unique_indices=True
    ] tl tp
    ty:f64[200,7,1,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(200, 7, 1, 1)
    ] tx
    tz:f64[200,7,1,6] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2, 3), collapsed_slice_dims=(4,), start_index_map=(4,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 1, 6, 1)
      unique_indices=True
    ] tm tq
    ua:f64[200,7,1,6] = mul ty tz
    ub:f64[200,7,1,6] = sub tw ua
    uc:f64[200,7,1,6,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2, 3)
      shape=(200, 7, 1, 6, 1)
    ] ub
    ud:f64[200,7,1,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(200, 7, 1, 1)
    ] tx
    ue:f64[200,7,1,6] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2, 3), collapsed_slice_dims=(4,), start_index_map=(4,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 1, 6, 1)
      unique_indices=True
    ] tm tr
    uf:f64[200,7,1,6] = mul ud ue
    ug:f64[200,7,1] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 1, 1)
      unique_indices=True
    ] tl ts
    uh:f64[200,7,1,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(200, 7, 1, 1)
    ] ug
    ui:f64[200,7,1,6] = mul uh tv
    uj:f64[200,7,1,6] = sub uf ui
    uk:f64[200,7,1,6,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2, 3)
      shape=(200, 7, 1, 6, 1)
    ] uj
    ul:f64[200,7,1,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(200, 7, 1, 1)
    ] ug
    um:f64[200,7,1,6] = mul ul tz
    un:f64[200,7,1,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(200, 7, 1, 1)
    ] tt
    uo:f64[200,7,1,6] = mul un ue
    up:f64[200,7,1,6] = sub um uo
    uq:f64[200,7,1,6,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2, 3)
      shape=(200, 7, 1, 6, 1)
    ] up
    ur:f64[200,7,1,6,3] = concatenate[dimension=4] uc uk uq
  in (ur, tv, tu, tz, ty, ue, ud, uh, ul, un) } in
let _take20 = { lambda ; us:f64[200,7,18,3] ut:i64[4,1]. let
    uu:f64[200,7,4,3] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 3), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 1, 3)
      unique_indices=False
    ] us ut
  in (uu,) } in
let cross16 = { lambda ; uv:f64[200,7,12,3] uw:f64[200,7,12,3] ux:i32[1] uy:i32[1]
    uz:i32[1] va:i32[1] vb:i32[1] vc:i32[1]. let
    vd:f64[200,7,12] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 12, 1)
      unique_indices=True
    ] uv ux
    ve:f64[200,7,12] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 12, 1)
      unique_indices=True
    ] uw uy
    vf:f64[200,7,12] = mul vd ve
    vg:f64[200,7,12] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 12, 1)
      unique_indices=True
    ] uv uz
    vh:f64[200,7,12] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 12, 1)
      unique_indices=True
    ] uw va
    vi:f64[200,7,12] = mul vg vh
    vj:f64[200,7,12] = sub vf vi
    vk:f64[200,7,12,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(200, 7, 12, 1)
    ] vj
    vl:f64[200,7,12] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 12, 1)
      unique_indices=True
    ] uw vb
    vm:f64[200,7,12] = mul vg vl
    vn:f64[200,7,12] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 12, 1)
      unique_indices=True
    ] uv vc
    vo:f64[200,7,12] = mul vn ve
    vp:f64[200,7,12] = sub vm vo
    vq:f64[200,7,12,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(200, 7, 12, 1)
    ] vp
    vr:f64[200,7,12] = mul vn vh
    vs:f64[200,7,12] = mul vd vl
    vt:f64[200,7,12] = sub vr vs
    vu:f64[200,7,12,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(200, 7, 12, 1)
    ] vt
    vv:f64[200,7,12,3] = concatenate[dimension=3] vk vq vu
  in (vv, ve, vd, vh, vg, vl, vn) } in
let _take21 = { lambda ; vw:f64[200,7,18] vx:i64[4,1]. let
    vy:f64[200,7,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 1)
      unique_indices=False
    ] vw vx
  in (vy,) } in
let cross17 = { lambda ; vz:f64[200,7,13,3] wa:f64[200,7,13,3] wb:i32[1] wc:i32[1]
    wd:i32[1] we:i32[1] wf:i32[1] wg:i32[1]. let
    wh:f64[200,7,13] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 13, 1)
      unique_indices=True
    ] vz wb
    wi:f64[200,7,13] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 13, 1)
      unique_indices=True
    ] wa wc
    wj:f64[200,7,13] = mul wh wi
    wk:f64[200,7,13] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 13, 1)
      unique_indices=True
    ] vz wd
    wl:f64[200,7,13] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 13, 1)
      unique_indices=True
    ] wa we
    wm:f64[200,7,13] = mul wk wl
    wn:f64[200,7,13] = sub wj wm
    wo:f64[200,7,13,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(200, 7, 13, 1)
    ] wn
    wp:f64[200,7,13] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 13, 1)
      unique_indices=True
    ] wa wf
    wq:f64[200,7,13] = mul wk wp
    wr:f64[200,7,13] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 13, 1)
      unique_indices=True
    ] vz wg
    ws:f64[200,7,13] = mul wr wi
    wt:f64[200,7,13] = sub wq ws
    wu:f64[200,7,13,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(200, 7, 13, 1)
    ] wt
    wv:f64[200,7,13] = mul wr wl
    ww:f64[200,7,13] = mul wh wp
    wx:f64[200,7,13] = sub wv ww
    wy:f64[200,7,13,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(200, 7, 13, 1)
    ] wx
    wz:f64[200,7,13,3] = concatenate[dimension=3] wo wu wy
  in (wz, wi, wh, wl, wk, wp, wr) } in
let cross18 = { lambda ; ra:f64[200,7,4,3] rb:f64[200,7,4,3] rc:i32[1] rd:i32[1]
    re:i32[1] rf:i32[1] rg:i32[1] rh:i32[1]. let
    ri:f64[200,7,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 4, 1)
      unique_indices=True
    ] ra rc
    rj:f64[200,7,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 4, 1)
      unique_indices=True
    ] rb rd
    rl:f64[200,7,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 4, 1)
      unique_indices=True
    ] ra re
    rm:f64[200,7,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 4, 1)
      unique_indices=True
    ] rb rf
    rq:f64[200,7,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 4, 1)
      unique_indices=True
    ] rb rg
    rs:f64[200,7,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 4, 1)
      unique_indices=True
    ] ra rh
  in (rj, ri, rm, rl, rq, rs) } in
let _take22 = { lambda ; xa:f64[200,7,13,3,3] xb:i64[4,1]. let
    xc:f64[200,7,4,3,3] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 3, 4), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 1, 3, 3)
      unique_indices=False
    ] xa xb
  in (xc,) } in
let logaddexp = { lambda ; mj:f64[200,7,36] mk:f64[]. let
    ml:f64[200,7,36] = sub mj mk
    mm:bool[200,7,36] = ne ml ml
    mn:f64[200,7,36] = max mj mk
    mo:f64[200,7,36] = abs ml
    mp:f64[200,7,36] = neg mo
    mq:f64[200,7,36] = exp mp
    mr:f64[200,7,36] = log1p mq
    ms:f64[200,7,36] = add mn mr
    mt:f64[200,7,36] = add mj mk
    mu:f64[200,7,36] = select_n mm ms mt
  in (mu,) } in
let cross19 = { lambda ; xd:i32[1] xe:f64[200,7] xf:f64[200,7] xg:i32[1] xh:i32[1]
    xi:f64[200,7] xj:f64[200,7] xk:i32[1] xl:f64[200,7] xm:i32[1] xn:i32[1] xo:f64[200,7]
    xp:f64[200,7,3]. let
    xq:f64[200,7,1] = slice[
      limit_indices=(200, 7, 1)
      start_indices=(0, 0, 0)
      strides=None
    ] xp
    xr:f64[200,7,1] = slice[
      limit_indices=(200, 7, 2)
      start_indices=(0, 0, 1)
      strides=None
    ] xp
    xs:f64[200,7,1] = slice[
      limit_indices=(200, 7, 3)
      start_indices=(0, 0, 2)
      strides=None
    ] xp
    xt:f64[200,7] = reduce_sum[axes=(2,)] xs
    xu:f64[200,7] = neg xt
    xv:f64[200,7] = mul xf xu
    xw:f64[200,7] = mul xu xl
    xx:f64[200,7] = mul xo xt
    xy:f64[200,7] = mul xt xi
    xz:f64[200,7] = reduce_sum[axes=(2,)] xr
    ya:f64[200,7] = neg xz
    yb:f64[200,7] = mul xo ya
    yc:f64[200,7] = mul ya xe
    yd:f64[200,7] = add_any xy yc
    ye:f64[200,7,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 3)
    ] 0.0
    yf:f64[200,7,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] ye xn yd
    yg:f64[200,7] = mul xj xz
    yh:f64[200,7] = add_any xv yg
    yi:f64[200,7,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 3)
    ] 0.0
    yj:f64[200,7,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] yi xm yh
    yk:f64[200,7] = mul xz xl
    yl:f64[200,7] = reduce_sum[axes=(2,)] xq
    ym:f64[200,7] = neg yl
    yn:f64[200,7] = mul xj ym
    yo:f64[200,7] = add_any xx yn
    yp:f64[200,7,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 3)
    ] 0.0
    yq:f64[200,7,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] yp xk yo
    yr:f64[200,7,3] = add_any yj yq
    ys:f64[200,7] = mul ym xi
    yt:f64[200,7] = add_any yk ys
    yu:f64[200,7,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 3)
    ] 0.0
    yv:f64[200,7,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] yu xh yt
    yw:f64[200,7,3] = add_any yf yv
    yx:f64[200,7] = mul xf yl
    yy:f64[200,7] = add_any yb yx
    yz:f64[200,7,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 3)
    ] 0.0
    za:f64[200,7,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] yz xg yy
    zb:f64[200,7,3] = add_any yr za
    zc:f64[200,7] = mul yl xe
    zd:f64[200,7] = add_any xw zc
    ze:f64[200,7,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 3)
    ] 0.0
    zf:f64[200,7,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] ze xd zd
    zg:f64[200,7,3] = add_any yw zf
  in (zg, zb) } in
let cross20 = { lambda ; zh:i32[1] zi:f64[200,7,18] zj:f64[200,7,18] zk:i32[1] zl:i32[1]
    zm:f64[200,7,18] zn:f64[200,7,18] zo:i32[1] zp:f64[200,7,18] zq:i32[1] zr:i32[1]
    zs:f64[200,7,18] zt:f64[200,7,18,3]. let
    zu:f64[200,7,18,1] = slice[
      limit_indices=(200, 7, 18, 1)
      start_indices=(0, 0, 0, 0)
      strides=None
    ] zt
    zv:f64[200,7,18,1] = slice[
      limit_indices=(200, 7, 18, 2)
      start_indices=(0, 0, 0, 1)
      strides=None
    ] zt
    zw:f64[200,7,18,1] = slice[
      limit_indices=(200, 7, 18, 3)
      start_indices=(0, 0, 0, 2)
      strides=None
    ] zt
    zx:f64[200,7,18] = reduce_sum[axes=(3,)] zw
    zy:f64[200,7,18] = neg zx
    zz:f64[200,7,18] = mul zj zy
    baa:f64[200,7,18] = mul zy zp
    bab:f64[200,7,18] = mul zs zx
    bac:f64[200,7,18] = mul zx zm
    bad:f64[200,7,18] = reduce_sum[axes=(3,)] zv
    bae:f64[200,7,18] = neg bad
    baf:f64[200,7,18] = mul zs bae
    bag:f64[200,7,18] = mul bae zi
    bah:f64[200,7,18] = add_any bac bag
    bai:f64[200,7,18,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 18, 3)
    ] 0.0
    baj:f64[200,7,18,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(3,), scatter_dims_to_operand_dims=(3,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] bai zr bah
    bak:f64[200,7,18] = mul zn bad
    bal:f64[200,7,18] = add_any zz bak
    bam:f64[200,7,18,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 18, 3)
    ] 0.0
    ban:f64[200,7,18,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(3,), scatter_dims_to_operand_dims=(3,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] bam zq bal
    bao:f64[200,7,18] = mul bad zp
    bap:f64[200,7,18] = reduce_sum[axes=(3,)] zu
    baq:f64[200,7,18] = neg bap
    bar:f64[200,7,18] = mul zn baq
    bas:f64[200,7,18] = add_any bab bar
    bat:f64[200,7,18,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 18, 3)
    ] 0.0
    bau:f64[200,7,18,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(3,), scatter_dims_to_operand_dims=(3,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] bat zo bas
    bav:f64[200,7,18,3] = add_any ban bau
    baw:f64[200,7,18] = mul baq zm
    bax:f64[200,7,18] = add_any bao baw
    bay:f64[200,7,18,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 18, 3)
    ] 0.0
    baz:f64[200,7,18,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(3,), scatter_dims_to_operand_dims=(3,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] bay zl bax
    bba:f64[200,7,18,3] = add_any baj baz
    bbb:f64[200,7,18] = mul zj bap
    bbc:f64[200,7,18] = add_any baf bbb
    bbd:f64[200,7,18,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 18, 3)
    ] 0.0
    bbe:f64[200,7,18,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(3,), scatter_dims_to_operand_dims=(3,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] bbd zk bbc
    bbf:f64[200,7,18,3] = add_any bav bbe
    bbg:f64[200,7,18] = mul bap zi
    bbh:f64[200,7,18] = add_any baa bbg
    bbi:f64[200,7,18,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 18, 3)
    ] 0.0
    bbj:f64[200,7,18,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(3,), scatter_dims_to_operand_dims=(3,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] bbi zh bbh
    bbk:f64[200,7,18,3] = add_any bba bbj
  in (bbk, bbf) } in
let _take23 = { lambda ; bbl:i64[4,1] bbm:f64[200,7,4,3,3]. let
    bbn:f64[200,7,13,3,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 13, 3, 3)
    ] 0.0
    bbo:f64[200,7,13,3,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3, 4), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=False
      update_consts=()
      update_jaxpr=jaxpr
    ] bbn bbl bbm
  in (bbo,) } in
let _take24 = { lambda ; bbp:i64[13,1] bbq:f64[200,7,13,3]. let
    bbr:f64[200,7,13,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 13, 3)
    ] 0.0
    bbs:f64[200,7,13,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=False
      update_consts=()
      update_jaxpr=jaxpr
    ] bbr bbp bbq
  in (bbs,) } in
let _take25 = { lambda ; bbt:i64[4,1] bbu:f64[200,7,4,3]. let
    bbv:f64[200,7,13,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 13, 3)
    ] 0.0
    bbw:f64[200,7,13,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=False
      update_consts=()
      update_jaxpr=jaxpr
    ] bbv bbt bbu
  in (bbw,) } in
let cross21 = { lambda ; bbx:i32[1] bby:f64[200,7,4] bbz:f64[200,7,4] bca:i32[1]
    bcb:i32[1] bcc:f64[200,7,4] bcd:f64[200,7,4] bce:i32[1] bcf:f64[200,7,4] bcg:i32[1]
    bch:i32[1] bci:f64[200,7,4] bcj:f64[200,7,4,3]. let
    bck:f64[200,7,4,1] = slice[
      limit_indices=(200, 7, 4, 1)
      start_indices=(0, 0, 0, 0)
      strides=None
    ] bcj
    bcl:f64[200,7,4,1] = slice[
      limit_indices=(200, 7, 4, 2)
      start_indices=(0, 0, 0, 1)
      strides=None
    ] bcj
    bcm:f64[200,7,4,1] = slice[
      limit_indices=(200, 7, 4, 3)
      start_indices=(0, 0, 0, 2)
      strides=None
    ] bcj
    bcn:f64[200,7,4] = reduce_sum[axes=(3,)] bcm
    bco:f64[200,7,4] = neg bcn
    bcp:f64[200,7,4] = mul bbz bco
    bcq:f64[200,7,4] = mul bco bcf
    bcr:f64[200,7,4] = mul bci bcn
    bcs:f64[200,7,4] = mul bcn bcc
    bct:f64[200,7,4] = reduce_sum[axes=(3,)] bcl
    bcu:f64[200,7,4] = neg bct
    bcv:f64[200,7,4] = mul bci bcu
    bcw:f64[200,7,4] = mul bcu bby
    bcx:f64[200,7,4] = add_any bcs bcw
    bcy:f64[200,7,4,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 4, 3)
    ] 0.0
    bcz:f64[200,7,4,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(3,), scatter_dims_to_operand_dims=(3,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] bcy bch bcx
    bda:f64[200,7,4] = mul bcd bct
    bdb:f64[200,7,4] = add_any bcp bda
    bdc:f64[200,7,4,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 4, 3)
    ] 0.0
    bdd:f64[200,7,4,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(3,), scatter_dims_to_operand_dims=(3,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] bdc bcg bdb
    bde:f64[200,7,4] = mul bct bcf
    bdf:f64[200,7,4] = reduce_sum[axes=(3,)] bck
    bdg:f64[200,7,4] = neg bdf
    bdh:f64[200,7,4] = mul bcd bdg
    bdi:f64[200,7,4] = add_any bcr bdh
    bdj:f64[200,7,4,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 4, 3)
    ] 0.0
    bdk:f64[200,7,4,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(3,), scatter_dims_to_operand_dims=(3,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] bdj bce bdi
    bdl:f64[200,7,4,3] = add_any bdd bdk
    bdm:f64[200,7,4] = mul bdg bcc
    bdn:f64[200,7,4] = add_any bde bdm
    bdo:f64[200,7,4,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 4, 3)
    ] 0.0
    bdp:f64[200,7,4,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(3,), scatter_dims_to_operand_dims=(3,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] bdo bcb bdn
    bdq:f64[200,7,4,3] = add_any bcz bdp
    bdr:f64[200,7,4] = mul bbz bdf
    bds:f64[200,7,4] = add_any bcv bdr
    bdt:f64[200,7,4,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 4, 3)
    ] 0.0
    bdu:f64[200,7,4,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(3,), scatter_dims_to_operand_dims=(3,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] bdt bca bds
    bdv:f64[200,7,4,3] = add_any bdl bdu
    bdw:f64[200,7,4] = mul bdf bby
    bdx:f64[200,7,4] = add_any bcq bdw
    bdy:f64[200,7,4,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 4, 3)
    ] 0.0
    bdz:f64[200,7,4,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(3,), scatter_dims_to_operand_dims=(3,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] bdy bbx bdx
    bea:f64[200,7,4,3] = add_any bdq bdz
  in (bea, bdv) } in
let _take26 = { lambda ; beb:i64[4,1] bec:f64[200,7,4,3]. let
    bed:f64[200,7,1,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 1, 3)
    ] 0.0
    bee:f64[200,7,1,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=False
      update_consts=()
      update_jaxpr=jaxpr
    ] bed beb bec
  in (bee,) } in
let _take27 = { lambda ; bef:i64[1] beg:f64[200,7,12,3]. let
    beh:f64[200,7,12,1,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 12, 1, 3)
    ] 0.0
    bei:f64[200,7,12,1,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2, 3), inserted_window_dims=(3,), scatter_dims_to_operand_dims=(3,))
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=False
      update_consts=()
      update_jaxpr=jaxpr
    ] beh bef beg
  in (bei,) } in
let _take28 = { lambda ; bej:i64[18,1] bek:f64[200,7,18,3]. let
    bel:f64[200,7,13,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 13, 3)
    ] 0.0
    bem:f64[200,7,13,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=False
      update_consts=()
      update_jaxpr=jaxpr
    ] bel bej bek
  in (bem,) } in
let cross22 = { lambda ; ben:i32[1] beo:f64[200,7,13] bep:f64[200,7,13] beq:i32[1]
    ber:i32[1] bes:f64[200,7,13] bet:f64[200,7,13] beu:i32[1] bev:f64[200,7,13] bew:i32[1]
    bex:i32[1] bey:f64[200,7,13] bez:f64[200,7,13,3]. let
    bfa:f64[200,7,13,1] = slice[
      limit_indices=(200, 7, 13, 1)
      start_indices=(0, 0, 0, 0)
      strides=None
    ] bez
    bfb:f64[200,7,13,1] = slice[
      limit_indices=(200, 7, 13, 2)
      start_indices=(0, 0, 0, 1)
      strides=None
    ] bez
    bfc:f64[200,7,13,1] = slice[
      limit_indices=(200, 7, 13, 3)
      start_indices=(0, 0, 0, 2)
      strides=None
    ] bez
    bfd:f64[200,7,13] = reduce_sum[axes=(3,)] bfc
    bfe:f64[200,7,13] = neg bfd
    bff:f64[200,7,13] = mul bep bfe
    bfg:f64[200,7,13] = mul bfe bev
    bfh:f64[200,7,13] = mul bey bfd
    bfi:f64[200,7,13] = mul bfd bes
    bfj:f64[200,7,13] = reduce_sum[axes=(3,)] bfb
    bfk:f64[200,7,13] = neg bfj
    bfl:f64[200,7,13] = mul bey bfk
    bfm:f64[200,7,13] = mul bfk beo
    bfn:f64[200,7,13] = add_any bfi bfm
    bfo:f64[200,7,13,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 13, 3)
    ] 0.0
    bfp:f64[200,7,13,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(3,), scatter_dims_to_operand_dims=(3,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] bfo bex bfn
    bfq:f64[200,7,13] = mul bet bfj
    bfr:f64[200,7,13] = add_any bff bfq
    bfs:f64[200,7,13,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 13, 3)
    ] 0.0
    bft:f64[200,7,13,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(3,), scatter_dims_to_operand_dims=(3,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] bfs bew bfr
    bfu:f64[200,7,13] = mul bfj bev
    bfv:f64[200,7,13] = reduce_sum[axes=(3,)] bfa
    bfw:f64[200,7,13] = neg bfv
    bfx:f64[200,7,13] = mul bet bfw
    bfy:f64[200,7,13] = add_any bfh bfx
    bfz:f64[200,7,13,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 13, 3)
    ] 0.0
    bga:f64[200,7,13,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(3,), scatter_dims_to_operand_dims=(3,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] bfz beu bfy
    bgb:f64[200,7,13,3] = add_any bft bga
    bgc:f64[200,7,13] = mul bfw bes
    bgd:f64[200,7,13] = add_any bfu bgc
    bge:f64[200,7,13,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 13, 3)
    ] 0.0
    bgf:f64[200,7,13,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(3,), scatter_dims_to_operand_dims=(3,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] bge ber bgd
    bgg:f64[200,7,13,3] = add_any bfp bgf
    bgh:f64[200,7,13] = mul bep bfv
    bgi:f64[200,7,13] = add_any bfl bgh
    bgj:f64[200,7,13,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 13, 3)
    ] 0.0
    bgk:f64[200,7,13,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(3,), scatter_dims_to_operand_dims=(3,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] bgj beq bgi
    bgl:f64[200,7,13,3] = add_any bgb bgk
    bgm:f64[200,7,13] = mul bfv beo
    bgn:f64[200,7,13] = add_any bfg bgm
    bgo:f64[200,7,13,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 13, 3)
    ] 0.0
    bgp:f64[200,7,13,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(3,), scatter_dims_to_operand_dims=(3,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] bgo ben bgn
    bgq:f64[200,7,13,3] = add_any bgg bgp
  in (bgq, bgl) } in
let _take29 = { lambda ; bgr:i64[4,1] bgs:f64[200,7,4,3]. let
    bgt:f64[200,7,18,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 18, 3)
    ] 0.0
    bgu:f64[200,7,18,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=False
      update_consts=()
      update_jaxpr=jaxpr
    ] bgt bgr bgs
  in (bgu,) } in
let cross23 = { lambda ; bgv:i32[1] bgw:f64[200,7,12] bgx:f64[200,7,12] bgy:i32[1]
    bgz:i32[1] bha:f64[200,7,12] bhb:f64[200,7,12] bhc:i32[1] bhd:f64[200,7,12] bhe:i32[1]
    bhf:i32[1] bhg:f64[200,7,12] bhh:f64[200,7,12,3]. let
    bhi:f64[200,7,12,1] = slice[
      limit_indices=(200, 7, 12, 1)
      start_indices=(0, 0, 0, 0)
      strides=None
    ] bhh
    bhj:f64[200,7,12,1] = slice[
      limit_indices=(200, 7, 12, 2)
      start_indices=(0, 0, 0, 1)
      strides=None
    ] bhh
    bhk:f64[200,7,12,1] = slice[
      limit_indices=(200, 7, 12, 3)
      start_indices=(0, 0, 0, 2)
      strides=None
    ] bhh
    bhl:f64[200,7,12] = reduce_sum[axes=(3,)] bhk
    bhm:f64[200,7,12] = neg bhl
    bhn:f64[200,7,12] = mul bgx bhm
    bho:f64[200,7,12] = mul bhm bhd
    bhp:f64[200,7,12] = mul bhg bhl
    bhq:f64[200,7,12] = mul bhl bha
    bhr:f64[200,7,12] = reduce_sum[axes=(3,)] bhj
    bhs:f64[200,7,12] = neg bhr
    bht:f64[200,7,12] = mul bhg bhs
    bhu:f64[200,7,12] = mul bhs bgw
    bhv:f64[200,7,12] = add_any bhq bhu
    bhw:f64[200,7,12,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 12, 3)
    ] 0.0
    bhx:f64[200,7,12,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(3,), scatter_dims_to_operand_dims=(3,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] bhw bhf bhv
    bhy:f64[200,7,12] = mul bhb bhr
    bhz:f64[200,7,12] = add_any bhn bhy
    bia:f64[200,7,12,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 12, 3)
    ] 0.0
    bib:f64[200,7,12,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(3,), scatter_dims_to_operand_dims=(3,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] bia bhe bhz
    bic:f64[200,7,12] = mul bhr bhd
    bid:f64[200,7,12] = reduce_sum[axes=(3,)] bhi
    bie:f64[200,7,12] = neg bid
    bif:f64[200,7,12] = mul bhb bie
    big:f64[200,7,12] = add_any bhp bif
    bih:f64[200,7,12,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 12, 3)
    ] 0.0
    bii:f64[200,7,12,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(3,), scatter_dims_to_operand_dims=(3,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] bih bhc big
    bij:f64[200,7,12,3] = add_any bib bii
    bik:f64[200,7,12] = mul bie bha
    bil:f64[200,7,12] = add_any bic bik
    bim:f64[200,7,12,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 12, 3)
    ] 0.0
    bin:f64[200,7,12,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(3,), scatter_dims_to_operand_dims=(3,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] bim bgz bil
    bio:f64[200,7,12,3] = add_any bhx bin
    bip:f64[200,7,12] = mul bgx bid
    biq:f64[200,7,12] = add_any bht bip
    bir:f64[200,7,12,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 12, 3)
    ] 0.0
    bis:f64[200,7,12,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(3,), scatter_dims_to_operand_dims=(3,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] bir bgy biq
    bit:f64[200,7,12,3] = add_any bij bis
    biu:f64[200,7,12] = mul bid bgw
    biv:f64[200,7,12] = add_any bho biu
    biw:f64[200,7,12,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 12, 3)
    ] 0.0
    bix:f64[200,7,12,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(3,), scatter_dims_to_operand_dims=(3,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] biw bgv biv
    biy:f64[200,7,12,3] = add_any bio bix
  in (biy, bit) } in
let cross24 = { lambda ; biz:i32[1] bja:f64[200,7,1,6] bjb:f64[200,7,1,1] bjc:i32[1]
    bjd:i32[1] bje:f64[200,7,1,6] bjf:f64[200,7,1,1] bjg:i32[1] bjh:f64[200,7,1,6]
    bji:f64[200,7,1,1] bjj:i32[1] bjk:i32[1] bjl:f64[200,7,1,1] bjm:f64[200,7,1,1]
    bjn:f64[200,7,1,1] bjo:f64[200,7,1,6,3]. let
    bjp:f64[200,7,1,6,1] = slice[
      limit_indices=(200, 7, 1, 6, 1)
      start_indices=(0, 0, 0, 0, 0)
      strides=None
    ] bjo
    bjq:f64[200,7,1,6,1] = slice[
      limit_indices=(200, 7, 1, 6, 2)
      start_indices=(0, 0, 0, 0, 1)
      strides=None
    ] bjo
    bjr:f64[200,7,1,6,1] = slice[
      limit_indices=(200, 7, 1, 6, 3)
      start_indices=(0, 0, 0, 0, 2)
      strides=None
    ] bjo
    bjs:f64[200,7,6] = reduce_sum[axes=(2, 4)] bjr
    bjt:f64[200,7,1,6] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 3)
      shape=(200, 7, 1, 6)
    ] bjs
    bju:f64[200,7,1,6] = neg bjt
    bjv:f64[200,7,1,6] = mul bjn bju
    bjw:f64[200,7,1,6] = mul bju bjh
    bjx:f64[200,7,1] = reduce_sum[axes=(3,)] bjw
    bjy:f64[200,7,1,1] = reshape[dimensions=None new_sizes=(200, 7, 1, 1)] bjx
    bjz:f64[200,7] = reduce_sum[axes=(2, 3)] bjy
    bka:f64[200,7,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(200, 7, 1)
    ] bjz
    bkb:f64[200,7,1,6] = mul bjm bjt
    bkc:f64[200,7,1,6] = mul bjt bje
    bkd:f64[200,7,1] = reduce_sum[axes=(3,)] bkc
    bke:f64[200,7,1,1] = reshape[dimensions=None new_sizes=(200, 7, 1, 1)] bkd
    bkf:f64[200,7] = reduce_sum[axes=(2, 3)] bke
    bkg:f64[200,7,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(200, 7, 1)
    ] bkf
    bkh:f64[200,7,6] = reduce_sum[axes=(2, 4)] bjq
    bki:f64[200,7,1,6] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 3)
      shape=(200, 7, 1, 6)
    ] bkh
    bkj:f64[200,7,1,6] = neg bki
    bkk:f64[200,7,1,6] = mul bjl bkj
    bkl:f64[200,7,1,6] = mul bkj bja
    bkm:f64[200,7,1] = reduce_sum[axes=(3,)] bkl
    bkn:f64[200,7,1,1] = reshape[dimensions=None new_sizes=(200, 7, 1, 1)] bkm
    bko:f64[200,7] = reduce_sum[axes=(2, 3)] bkn
    bkp:f64[200,7,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(200, 7, 1)
    ] bko
    bkq:f64[200,7,1] = add_any bkg bkp
    bkr:f64[200,7,1,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 1, 3)
    ] 0.0
    bks:f64[200,7,1,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(3,), scatter_dims_to_operand_dims=(3,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] bkr bjk bkq
    bkt:f64[200,7,1,6] = mul bji bki
    bku:f64[200,7,1,6] = add_any bjv bkt
    bkv:f64[200,7,1,6,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 1, 6, 3)
    ] 0.0
    bkw:f64[200,7,1,6,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2, 3), inserted_window_dims=(4,), scatter_dims_to_operand_dims=(4,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] bkv bjj bku
    bkx:f64[200,7,1,6] = mul bki bjh
    bky:f64[200,7,1] = reduce_sum[axes=(3,)] bkx
    bkz:f64[200,7,1,1] = reshape[dimensions=None new_sizes=(200, 7, 1, 1)] bky
    bla:f64[200,7] = reduce_sum[axes=(2, 3)] bkz
    blb:f64[200,7,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(200, 7, 1)
    ] bla
    blc:f64[200,7,6] = reduce_sum[axes=(2, 4)] bjp
    bld:f64[200,7,1,6] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 3)
      shape=(200, 7, 1, 6)
    ] blc
    ble:f64[200,7,1,6] = neg bld
    blf:f64[200,7,1,6] = mul bjf ble
    blg:f64[200,7,1,6] = add_any bkb blf
    blh:f64[200,7,1,6,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 1, 6, 3)
    ] 0.0
    bli:f64[200,7,1,6,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2, 3), inserted_window_dims=(4,), scatter_dims_to_operand_dims=(4,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] blh bjg blg
    blj:f64[200,7,1,6,3] = add_any bkw bli
    blk:f64[200,7,1,6] = mul ble bje
    bll:f64[200,7,1] = reduce_sum[axes=(3,)] blk
    blm:f64[200,7,1,1] = reshape[dimensions=None new_sizes=(200, 7, 1, 1)] bll
    bln:f64[200,7] = reduce_sum[axes=(2, 3)] blm
    blo:f64[200,7,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(200, 7, 1)
    ] bln
    blp:f64[200,7,1] = add_any blb blo
    blq:f64[200,7,1,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 1, 3)
    ] 0.0
    blr:f64[200,7,1,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(3,), scatter_dims_to_operand_dims=(3,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] blq bjd blp
    bls:f64[200,7,1,3] = add_any bks blr
    blt:f64[200,7,1,6] = mul bjb bld
    blu:f64[200,7,1,6] = add_any bkk blt
    blv:f64[200,7,1,6,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 1, 6, 3)
    ] 0.0
    blw:f64[200,7,1,6,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2, 3), inserted_window_dims=(4,), scatter_dims_to_operand_dims=(4,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] blv bjc blu
    blx:f64[200,7,1,6,3] = add_any blj blw
    bly:f64[200,7,1,6] = mul bld bja
    blz:f64[200,7,1] = reduce_sum[axes=(3,)] bly
    bma:f64[200,7,1,1] = reshape[dimensions=None new_sizes=(200, 7, 1, 1)] blz
    bmb:f64[200,7] = reduce_sum[axes=(2, 3)] bma
    bmc:f64[200,7,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(200, 7, 1)
    ] bmb
    bmd:f64[200,7,1] = add_any bka bmc
    bme:f64[200,7,1,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 1, 3)
    ] 0.0
    bmf:f64[200,7,1,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(3,), scatter_dims_to_operand_dims=(3,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] bme biz bmd
    bmg:f64[200,7,1,3] = add_any bls bmf
  in (bmg, blx) } in
let _take30 = { lambda ; bmh:i64[4,1] bmi:f64[200,7,4]. let
    bmj:f64[200,7,18] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 18)
    ] 0.0
    bmk:f64[200,7,18] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=False
      update_consts=()
      update_jaxpr=jaxpr
    ] bmj bmh bmi
  in (bmk,) } in
let _take31 = { lambda ; bml:i32[13,1] bmm:f64[200,7,13,3]. let
    bmn:f64[200,7,14,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 14, 3)
    ] 0.0
    bmo:f64[200,7,14,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=False
      update_consts=()
      update_jaxpr=jaxpr
    ] bmn bml bmm
  in (bmo,) } in
let cross25 = { lambda ; bmp:f64[1,1,18] bmq:i32[1] bmr:f64[1,1,18] bms:i32[1] bmt:f64[1,1,18]
    bmu:i32[1] bmv:f64[1,1,18] bmw:f64[1,1,18] bmx:f64[1,1,18] bmy:f64[200,7,18,3]. let
    bmz:f64[200,7,18,1] = slice[
      limit_indices=(200, 7, 18, 1)
      start_indices=(0, 0, 0, 0)
      strides=None
    ] bmy
    bna:f64[200,7,18,1] = slice[
      limit_indices=(200, 7, 18, 2)
      start_indices=(0, 0, 0, 1)
      strides=None
    ] bmy
    bnb:f64[200,7,18,1] = slice[
      limit_indices=(200, 7, 18, 3)
      start_indices=(0, 0, 0, 2)
      strides=None
    ] bmy
    bnc:f64[200,7,18] = reduce_sum[axes=(3,)] bnb
    bnd:f64[200,7,18] = neg bnc
    bne:f64[200,7,18] = mul bmx bnd
    bnf:f64[200,7,18] = mul bmw bnc
    bng:f64[200,7,18] = reduce_sum[axes=(3,)] bna
    bnh:f64[200,7,18] = neg bng
    bni:f64[200,7,18] = mul bmv bnh
    bnj:f64[200,7,18] = mul bmt bng
    bnk:f64[200,7,18] = add_any bne bnj
    bnl:f64[200,7,18,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 18, 3)
    ] 0.0
    bnm:f64[200,7,18,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(3,), scatter_dims_to_operand_dims=(3,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] bnl bmu bnk
    bnn:f64[200,7,18] = reduce_sum[axes=(3,)] bmz
    bno:f64[200,7,18] = neg bnn
    bnp:f64[200,7,18] = mul bmr bno
    bnq:f64[200,7,18] = add_any bnf bnp
    bnr:f64[200,7,18,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 18, 3)
    ] 0.0
    bns:f64[200,7,18,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(3,), scatter_dims_to_operand_dims=(3,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] bnr bms bnq
    bnt:f64[200,7,18,3] = add_any bnm bns
    bnu:f64[200,7,18] = mul bmp bnn
    bnv:f64[200,7,18] = add_any bni bnu
    bnw:f64[200,7,18,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 18, 3)
    ] 0.0
    bnx:f64[200,7,18,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(3,), scatter_dims_to_operand_dims=(3,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] bnw bmq bnv
    bny:f64[200,7,18,3] = add_any bnt bnx
  in (bny,) } in
let cross26 = { lambda ; bnz:i32[1] boa:f64[1,1,13] bob:i32[1] boc:f64[1,1,13] bod:f64[1,1,13]
    boe:i32[1] bof:f64[1,1,13] bog:f64[1,1,13] boh:f64[1,1,13] boi:f64[200,7,13,3]. let
    boj:f64[200,7,13,1] = slice[
      limit_indices=(200, 7, 13, 1)
      start_indices=(0, 0, 0, 0)
      strides=None
    ] boi
    bok:f64[200,7,13,1] = slice[
      limit_indices=(200, 7, 13, 2)
      start_indices=(0, 0, 0, 1)
      strides=None
    ] boi
    bol:f64[200,7,13,1] = slice[
      limit_indices=(200, 7, 13, 3)
      start_indices=(0, 0, 0, 2)
      strides=None
    ] boi
    bom:f64[200,7,13] = reduce_sum[axes=(3,)] bol
    bon:f64[200,7,13] = neg bom
    boo:f64[200,7,13] = mul bon boh
    bop:f64[200,7,13] = mul bom bog
    boq:f64[200,7,13] = reduce_sum[axes=(3,)] bok
    bor:f64[200,7,13] = neg boq
    bos:f64[200,7,13] = mul bor bof
    bot:f64[200,7,13] = add_any bop bos
    bou:f64[200,7,13,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 13, 3)
    ] 0.0
    bov:f64[200,7,13,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(3,), scatter_dims_to_operand_dims=(3,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] bou boe bot
    bow:f64[200,7,13] = mul boq bod
    box:f64[200,7,13] = reduce_sum[axes=(3,)] boj
    boy:f64[200,7,13] = neg box
    boz:f64[200,7,13] = mul boy boc
    bpa:f64[200,7,13] = add_any bow boz
    bpb:f64[200,7,13,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 13, 3)
    ] 0.0
    bpc:f64[200,7,13,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(3,), scatter_dims_to_operand_dims=(3,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] bpb bob bpa
    bpd:f64[200,7,13,3] = add_any bov bpc
    bpe:f64[200,7,13] = mul box boa
    bpf:f64[200,7,13] = add_any boo bpe
    bpg:f64[200,7,13,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 13, 3)
    ] 0.0
    bph:f64[200,7,13,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(3,), scatter_dims_to_operand_dims=(3,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] bpg bnz bpf
    bpi:f64[200,7,13,3] = add_any bpd bph
  in (bpi,) } in
let _take32 = { lambda ; bpj:i64[4,1] bpk:f64[200,7,4,4]. let
    bpl:f64[200,7,13,4] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 13, 4)
    ] 0.0
    bpm:f64[200,7,13,4] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=False
      update_consts=()
      update_jaxpr=jaxpr
    ] bpl bpj bpk
  in (bpm,) } in
let jaxpr1 = { lambda ; bpn:f64[200,7,18,18] bpo:f64[200,7,18,18]. let
    bpp:f64[200,7,18,18] = dot_general[
      dimension_numbers=(([3], [3]), ([0, 1], [0, 1]))
      precision=(Precision.HIGHEST, Precision.HIGHEST)
    ] bpn bpo
    bpq:f64[200,7,18,18] = transpose[permutation=(0, 1, 3, 2)] bpp
  in (bpq,) } in
let jaxpr2 = { lambda ; bpr:f64[200,7,18,18] bps:f64[200,7,18,18]. let
    bpt:f64[200,7,18,18] = pjit[
      name=_cho_solve
      jaxpr={ lambda ; bpu:f64[200,7,18,18] bpv:f64[200,7,18,18]. let
          bpw:f64[200,7,18,18,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2, 3)
            shape=(200, 7, 18, 18, 1)
          ] bpv
          bpx:f64[200,7,18,1,18] = transpose[permutation=(0, 1, 3, 4, 2)] bpw
          bpy:f64[200,7,18,18] = reshape[
            dimensions=None
            new_sizes=(200, 7, 18, 18)
          ] bpx
          bpz:f64[200,7,18,18] = triangular_solve[
            conjugate_a=False
            left_side=True
            lower=False
            transpose_a=True
            unit_diagonal=False
          ] bpu bpy
          bqa:f64[200,7,18,1,18] = reshape[
            dimensions=None
            new_sizes=(200, 7, 18, 1, 18)
          ] bpz
          bqb:f64[200,7,18,1,18] = slice[
            limit_indices=(200, 7, 18, 1, 18)
            start_indices=(0, 0, 0, 0, 0)
            strides=None
          ] bqa
          bqc:f64[200,7,18,18,1] = transpose[permutation=(0, 1, 4, 2, 3)] bqb
          bqd:f64[200,7,18,18] = squeeze[dimensions=(4,)] bqc
          bqe:f64[200,7,18,18,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2, 3)
            shape=(200, 7, 18, 18, 1)
          ] bqd
          bqf:f64[200,7,18,1,18] = transpose[permutation=(0, 1, 3, 4, 2)] bqe
          bqg:f64[200,7,18,18] = reshape[
            dimensions=None
            new_sizes=(200, 7, 18, 18)
          ] bqf
          bqh:f64[200,7,18,18] = triangular_solve[
            conjugate_a=False
            left_side=True
            lower=False
            transpose_a=False
            unit_diagonal=False
          ] bpu bqg
          bqi:f64[200,7,18,1,18] = reshape[
            dimensions=None
            new_sizes=(200, 7, 18, 1, 18)
          ] bqh
          bqj:f64[200,7,18,1,18] = slice[
            limit_indices=(200, 7, 18, 1, 18)
            start_indices=(0, 0, 0, 0, 0)
            strides=None
          ] bqi
          bqk:f64[200,7,18,18,1] = transpose[permutation=(0, 1, 4, 2, 3)] bqj
          bql:f64[200,7,18,18] = squeeze[dimensions=(4,)] bqk
        in (bql,) }
    ] bpr bps
  in (bpt,) } in
let jaxpr3 = { lambda ; bqm:f64[200,7,18,18] bqn:f64[200,7,18,18]. let
    bqo:f64[200,7,18,18] = pjit[
      name=_cho_solve
      jaxpr={ lambda ; bpu:f64[200,7,18,18] bpv:f64[200,7,18,18]. let
          bpw:f64[200,7,18,18,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2, 3)
            shape=(200, 7, 18, 18, 1)
          ] bpv
          bpx:f64[200,7,18,1,18] = transpose[permutation=(0, 1, 3, 4, 2)] bpw
          bpy:f64[200,7,18,18] = reshape[
            dimensions=None
            new_sizes=(200, 7, 18, 18)
          ] bpx
          bpz:f64[200,7,18,18] = triangular_solve[
            conjugate_a=False
            left_side=True
            lower=False
            transpose_a=True
            unit_diagonal=False
          ] bpu bpy
          bqa:f64[200,7,18,1,18] = reshape[
            dimensions=None
            new_sizes=(200, 7, 18, 1, 18)
          ] bpz
          bqb:f64[200,7,18,1,18] = slice[
            limit_indices=(200, 7, 18, 1, 18)
            start_indices=(0, 0, 0, 0, 0)
            strides=None
          ] bqa
          bqc:f64[200,7,18,18,1] = transpose[permutation=(0, 1, 4, 2, 3)] bqb
          bqd:f64[200,7,18,18] = squeeze[dimensions=(4,)] bqc
          bqe:f64[200,7,18,18,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2, 3)
            shape=(200, 7, 18, 18, 1)
          ] bqd
          bqf:f64[200,7,18,1,18] = transpose[permutation=(0, 1, 3, 4, 2)] bqe
          bqg:f64[200,7,18,18] = reshape[
            dimensions=None
            new_sizes=(200, 7, 18, 18)
          ] bqf
          bqh:f64[200,7,18,18] = triangular_solve[
            conjugate_a=False
            left_side=True
            lower=False
            transpose_a=False
            unit_diagonal=False
          ] bpu bqg
          bqi:f64[200,7,18,1,18] = reshape[
            dimensions=None
            new_sizes=(200, 7, 18, 1, 18)
          ] bqh
          bqj:f64[200,7,18,1,18] = slice[
            limit_indices=(200, 7, 18, 1, 18)
            start_indices=(0, 0, 0, 0, 0)
            strides=None
          ] bqi
          bqk:f64[200,7,18,18,1] = transpose[permutation=(0, 1, 4, 2, 3)] bqj
          bql:f64[200,7,18,18] = squeeze[dimensions=(4,)] bqk
        in (bql,) }
    ] bqm bqn
  in (bqo,) } in
let cross27 = { lambda ; bqp:f64[200,7,3] bqq:f64[200,7,3] bqr:i32[1] bqs:i32[1]
    bqt:i32[1] bqu:i32[1] bqv:i32[1] bqw:i32[1]. let
    bqx:f64[200,7] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 1)
      unique_indices=True
    ] bqp bqr
    bqy:f64[200,7] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 1)
      unique_indices=True
    ] bqq bqs
    bqz:f64[200,7] = mul bqx bqy
    bra:f64[200,7] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 1)
      unique_indices=True
    ] bqp bqt
    brb:f64[200,7] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 1)
      unique_indices=True
    ] bqq bqu
    brc:f64[200,7] = mul bra brb
    brd:f64[200,7] = sub bqz brc
    bre:f64[200,7,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(200, 7, 1)
    ] brd
    brf:f64[200,7] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 1)
      unique_indices=True
    ] bqq bqv
    brg:f64[200,7] = mul bra brf
    brh:f64[200,7] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 1)
      unique_indices=True
    ] bqp bqw
    bri:f64[200,7] = mul brh bqy
    brj:f64[200,7] = sub brg bri
    brk:f64[200,7,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(200, 7, 1)
    ] brj
    brl:f64[200,7] = mul brh brb
    brm:f64[200,7] = mul bqx brf
    brn:f64[200,7] = sub brl brm
    bro:f64[200,7,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(200, 7, 1)
    ] brn
    brp:f64[200,7,3] = concatenate[dimension=2] bre brk bro
  in (brp, bqy, bqx, brb, bra, brf, brh) } in
let remainder9 = { lambda ; brq:f64[200,7] brr:f64[] brs:bool[]. let
    brt:f64[200,7] = rem brq brr
    bru:bool[200,7] = lt brt 0.0
    brv:bool[200,7] = ne bru brs
    brw:bool[200,7] = ne brt 0.0
    brx:bool[200,7] = and brv brw
    bry:f64[200,7] = add brt brr
    brz:f64[200,7] = select_n brx brt bry
  in (brz, brx) } in
let clip2 = { lambda ; bsa:f64[200,7] bsb:f64[] bsc:f64[200,7] bsd:f64[200,7] bse:f64[200,7]
    bsf:f64[200,7] bsg:f64[] bsh:f64[200,7] bsi:f64[200,7] bsj:f64[200,7] bsk:f64[200,7]. let
    bsl:f64[200,7] = max bsb bsa
    bsm:bool[200,7] = eq bsa bsl
    bsn:f64[200,7] = select_n bsm bsc bsd
    bso:bool[200,7] = eq bsb bsl
    bsp:f64[200,7] = select_n bso bse bsf
    bsq:f64[200,7] = div bsn bsp
    bsr:f64[200,7] = min bsg bsl
    bss:bool[200,7] = eq bsl bsr
    bst:f64[200,7] = select_n bss bsh bsi
    bsu:bool[200,7] = eq bsg bsr
    bsv:f64[200,7] = select_n bsu bsj bsk
    bsw:f64[200,7] = div bst bsv
  in (bsr, bsq, bsw) } in
let clip3 = { lambda ; bsx:f64[200,7,12] bsy:f64[1,1,12] bsz:f64[200,7,12] bta:f64[200,7,12]
    btb:f64[200,7,12] btc:f64[200,7,12] btd:f64[1,1,12] bte:f64[200,7,12] btf:f64[200,7,12]
    btg:f64[200,7,12] bth:f64[200,7,12]. let
    bti:f64[200,7,12] = max bsy bsx
    btj:bool[200,7,12] = eq bsx bti
    btk:f64[200,7,12] = select_n btj bsz bta
    btl:bool[200,7,12] = eq bsy bti
    btm:f64[200,7,12] = select_n btl btb btc
    btn:f64[200,7,12] = div btk btm
    bto:f64[200,7,12] = min btd bti
    btp:bool[200,7,12] = eq bti bto
    btq:f64[200,7,12] = select_n btp bte btf
    btr:bool[200,7,12] = eq btd bto
    bts:f64[200,7,12] = select_n btr btg bth
    btt:f64[200,7,12] = div btq bts
  in (bto, btn, btt) } in
let clip4 = { lambda ; btu:f64[200,7,12] btv:f64[200,7,12] btw:f64[200,7,12]. let
    btx:f64[200,7,12] = mul btw btv
    bty:f64[200,7,12] = mul btx btu
  in (bty,) } in
let clip5 = { lambda ; btz:f64[200,7] bua:f64[200,7] bub:f64[200,7]. let
    buc:f64[200,7] = mul bub bua
    bud:f64[200,7] = mul buc btz
  in (bud,) } in
let remainder10 = { lambda ; bue:bool[200,7] buf:f64[200,7]. let
    bug:f64[200,7] = broadcast_in_dim[broadcast_dimensions=() shape=(200, 7)] 0.0
    buh:f64[200,7] = select_n bue buf bug
    bui:f64[200,7] = select_n bue bug buf
    buj:f64[200,7] = add_any buh bui
  in (buj,) } in
let cross28 = { lambda ; buk:i32[1] bul:f64[200,7] bum:f64[200,7] bun:i32[1] buo:i32[1]
    bup:f64[200,7] buq:f64[200,7] bur:i32[1] bus:f64[200,7] but:i32[1] buu:i32[1]
    buv:f64[200,7] buw:f64[200,7,3]. let
    bux:f64[200,7,1] = slice[
      limit_indices=(200, 7, 1)
      start_indices=(0, 0, 0)
      strides=None
    ] buw
    buy:f64[200,7,1] = slice[
      limit_indices=(200, 7, 2)
      start_indices=(0, 0, 1)
      strides=None
    ] buw
    buz:f64[200,7,1] = slice[
      limit_indices=(200, 7, 3)
      start_indices=(0, 0, 2)
      strides=None
    ] buw
    bva:f64[200,7] = reduce_sum[axes=(2,)] buz
    bvb:f64[200,7] = neg bva
    bvc:f64[200,7] = mul bum bvb
    bvd:f64[200,7] = mul bvb bus
    bve:f64[200,7] = mul buv bva
    bvf:f64[200,7] = mul bva bup
    bvg:f64[200,7] = reduce_sum[axes=(2,)] buy
    bvh:f64[200,7] = neg bvg
    bvi:f64[200,7] = mul buv bvh
    bvj:f64[200,7] = mul bvh bul
    bvk:f64[200,7] = add_any bvf bvj
    bvl:f64[200,7,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 3)
    ] 0.0
    bvm:f64[200,7,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] bvl buu bvk
    bvn:f64[200,7] = mul buq bvg
    bvo:f64[200,7] = add_any bvc bvn
    bvp:f64[200,7,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 3)
    ] 0.0
    bvq:f64[200,7,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] bvp but bvo
    bvr:f64[200,7] = mul bvg bus
    bvs:f64[200,7] = reduce_sum[axes=(2,)] bux
    bvt:f64[200,7] = neg bvs
    bvu:f64[200,7] = mul buq bvt
    bvv:f64[200,7] = add_any bve bvu
    bvw:f64[200,7,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 3)
    ] 0.0
    bvx:f64[200,7,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] bvw bur bvv
    bvy:f64[200,7,3] = add_any bvq bvx
    bvz:f64[200,7] = mul bvt bup
    bwa:f64[200,7] = add_any bvr bvz
    bwb:f64[200,7,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 3)
    ] 0.0
    bwc:f64[200,7,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] bwb buo bwa
    bwd:f64[200,7,3] = add_any bvm bwc
    bwe:f64[200,7] = mul bum bvs
    bwf:f64[200,7] = add_any bvi bwe
    bwg:f64[200,7,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 3)
    ] 0.0
    bwh:f64[200,7,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] bwg bun bwf
    bwi:f64[200,7,3] = add_any bvy bwh
    bwj:f64[200,7] = mul bvs bul
    bwk:f64[200,7] = add_any bvd bwj
    bwl:f64[200,7,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 3)
    ] 0.0
    bwm:f64[200,7,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] bwl buk bwk
    bwn:f64[200,7,3] = add_any bwd bwm
  in (bwn, bwi) } in
let _cho_solve = { lambda ; bpu:f64[200,7,18,18] bpv:f64[200,7,18,18]. let
    bpw:f64[200,7,18,18,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2, 3)
      shape=(200, 7, 18, 18, 1)
    ] bpv
    bpx:f64[200,7,18,1,18] = transpose[permutation=(0, 1, 3, 4, 2)] bpw
    bpy:f64[200,7,18,18] = reshape[dimensions=None new_sizes=(200, 7, 18, 18)] bpx
    bpz:f64[200,7,18,18] = triangular_solve[
      conjugate_a=False
      left_side=True
      lower=False
      transpose_a=True
      unit_diagonal=False
    ] bpu bpy
    bqa:f64[200,7,18,1,18] = reshape[
      dimensions=None
      new_sizes=(200, 7, 18, 1, 18)
    ] bpz
    bqb:f64[200,7,18,1,18] = slice[
      limit_indices=(200, 7, 18, 1, 18)
      start_indices=(0, 0, 0, 0, 0)
      strides=None
    ] bqa
    bqc:f64[200,7,18,18,1] = transpose[permutation=(0, 1, 4, 2, 3)] bqb
    bqd:f64[200,7,18,18] = squeeze[dimensions=(4,)] bqc
    bqe:f64[200,7,18,18,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2, 3)
      shape=(200, 7, 18, 18, 1)
    ] bqd
    bqf:f64[200,7,18,1,18] = transpose[permutation=(0, 1, 3, 4, 2)] bqe
    bqg:f64[200,7,18,18] = reshape[dimensions=None new_sizes=(200, 7, 18, 18)] bqf
    bqh:f64[200,7,18,18] = triangular_solve[
      conjugate_a=False
      left_side=True
      lower=False
      transpose_a=False
      unit_diagonal=False
    ] bpu bqg
    bqi:f64[200,7,18,1,18] = reshape[
      dimensions=None
      new_sizes=(200, 7, 18, 1, 18)
    ] bqh
    bqj:f64[200,7,18,1,18] = slice[
      limit_indices=(200, 7, 18, 1, 18)
      start_indices=(0, 0, 0, 0, 0)
      strides=None
    ] bqi
    bqk:f64[200,7,18,18,1] = transpose[permutation=(0, 1, 4, 2, 3)] bqj
    bql:f64[200,7,18,18] = squeeze[dimensions=(4,)] bqk
  in (bql,) } in
{ lambda ; bwo:i32[] bwp:f64[180] bwq:f64[180] bwr:f64[9] bws:f64[9] bwt:f64[36,2]
    bwu:f64[9,2] bwv:f64[19] bww:i64[4] bwx:f64[18,3] bwy:f64[18,3] bwz:f64[13,3]
    bxa:f64[13,4] bxb:f64[13,4] bxc:f64[13,3] bxd:i64[4] bxe:i64[4] bxf:i64[4] bxg:i64[4]
    bxh:i64[4] bxi:i64[4] bxj:i64[4] bxk:i64[4] bxl:i64[4] bxm:i64[4] bxn:i64[4]
    bxo:i64[4] bxp:i64[4] bxq:i64[4] bxr:i64[4] bxs:i64[4] bxt:i64[13] bxu:i64[13]
    bxv:i64[13] bxw:i64[13] bxx:f64[13,3] bxy:f64[13,4] bxz:f64[13] bya:i32[13] byb:f64[4]
    byc:i32[13] byd:f64[4] bye:i64[18] byf:f64[4] byg:i64[18] byh:i64[4] byi:i64[18]
    byj:i64[4] byk:i64[4] byl:i64[4] bym:i64[4] byn:i64[4] byo:i64[4] byp:i64[4]
    byq:i64[4] byr:i64[4] bys:i64[4] byt:i64[4] byu:i64[13] byv:i64[13] byw:i64[4]
    byx:i64[4] byy:i64[4] byz:i64[4] bza:i64[4] bzb:i64[4] bzc:i64[4] bzd:i64[4]
    bze:i64[4] bzf:i64[4] bzg:i64[4] bzh:i64[4] bzi:i64[13] bzj:i64[13] bzk:i64[13]
    bzl:i64[18] bzm:i64[132] bzn:i64[132] bzo:f64[18] bzp:f64[18] bzq:f64[18] bzr:i64[18]
    bzs:f64[3] bzt:i64[4] bzu:i64[4] bzv:i64[4] bzw:i64[4] bzx:i64[4] bzy:i64[4]
    bzz:i64[4] caa:i64[4] cab:i64[4] cac:i64[4] cad:i64[4] cae:i64[4] caf:i64[4]
    cag:i64[4] cah:i64[13] cai:i64[13] caj:i64[4] cak:i64[4] cal:i64[4] cam:i64[4]
    can:i64[4] cao:i64[4] cap:i64[4] caq:i64[4] car:i64[4] cas:i64[13] cat:i64[13]
    cau:i64[18] cav:i64[4] caw:f64[] cax:f64[4] cay:f64[3] caz:f64[3] cba:f64[3]
    cbb:f64[] cbc:f64[8] cbd:f64[3] cbe:f64[3] cbf:f64[3] cbg:i64[3] cbh:f64[3] cbi:f64[12]
    cbj:i32[12] cbk:i32[12] cbl:f64[12,2] cbm:f64[12] cbn:f64[12] cbo:f64[12] cbp:f64[12]
    cbq:f64[12,2] cbr:f64[13,3,3] cbs:i64[4] cbt:i64[5] cbu:f64[7,400] cbv:f64[7,189,400]
    cbw:f64[7,400] cbx:f64[7,400,400] cby:f64[7,400] cbz:f64[7,400,400] cca:f64[7,400]
    ccb:f64[7,400,400] ccc:f64[7,54] ccd:f64[7,400,54] cce:i32[] ccf:f64[7,400] ccg:f64[7,189,400]
    cch:f64[7,400] cci:f64[7,400,400] ccj:f64[7,400] cck:f64[7,400,400] ccl:f64[7,400]
    ccm:f64[7,400,400] ccn:f64[7,54] cco:f64[7,400,54] ccp:f64[7,400] ccq:f64[7,189,400]
    ccr:f64[7,400] ccs:f64[7,400,400] cct:f64[7,400] ccu:f64[7,400,400] ccv:f64[7,400]
    ccw:f64[7,400,400] ccx:f64[7,54] ccy:f64[7,400,54] ccz:f64[200,4,7,180] cda:f64[200,4,7,9]
    cdb:f64[200,4,7] cdc:f64[200,4,7,180] cdd:i64[]. let
    cde:i64[] = convert_element_type[new_dtype=int64 weak_type=False] bwo
    cdf:bool[] = lt cdd cde
    cdg:i32[] = convert_element_type[new_dtype=int32 weak_type=False] cdf
    cdh:f64[] cdi:f64[7] cdj:f64[7,400] cdk:f64[7,189,400] cdl:f64[7,400] cdm:f64[7,400,400]
      cdn:f64[7,400] cdo:f64[7,400,400] cdp:f64[7,400] cdq:f64[7,400,400] cdr:f64[7,54]
      cds:f64[7,400,54] cdt:i32[] cdu:f64[7,400] cdv:f64[7,189,400] cdw:f64[7,400]
      cdx:f64[7,400,400] cdy:f64[7,400] cdz:f64[7,400,400] cea:f64[7,400] ceb:f64[7,400,400]
      cec:f64[7,54] ced:f64[7,400,54] cee:f64[7,400] cef:f64[7,189,400] ceg:f64[7,400]
      ceh:f64[7,400,400] cei:f64[7,400] cej:f64[7,400,400] cek:f64[7,400] cel:f64[7,400,400]
      cem:f64[7,54] cen:f64[7,400,54] = cond[
      branches=(
        { lambda ; ceo_:f64[200,4,7,180] cep_:f64[200,4,7,9] ceq_:f64[180] cer_:f64[180]
            ces_:f64[9] cet_:f64[9] ceu_:f64[7,400] cev_:f64[7,400] cew_:f64[7,400]
            cex_:f64[7,400] cey_:f64[7,54] cez_:f64[36,2] cfa_:f64[9,2] cfb_:f64[19]
            cfc_:i64[4] cfd_:f64[18,3] cfe_:f64[18,3] cff_:f64[13,3] cfg_:f64[13,4]
            cfh_:f64[13,4] cfi_:f64[13,3] cfj_:i64[4] cfk_:i64[4] cfl_:i64[4] cfm_:i64[4]
            cfn_:i64[4] cfo_:i64[4] cfp_:i64[4] cfq_:i64[4] cfr_:i64[4] cfs_:i64[4]
            cft_:i64[4] cfu_:i64[4] cfv_:i64[4] cfw_:i64[4] cfx_:i64[4] cfy_:i64[4]
            cfz_:i64[13] cga_:i64[13] cgb_:i64[13] cgc_:i64[13] cgd_:f64[13,3] cge_:f64[13,4]
            cgf_:f64[13] cgg_:i32[13] cgh_:f64[4] cgi_:i32[13] cgj_:f64[4] cgk_:i64[18]
            cgl_:f64[4] cgm_:i64[18] cgn_:i64[4] cgo_:i64[18] cgp_:i64[4] cgq_:i64[4]
            cgr_:i64[4] cgs_:i64[4] cgt_:i64[4] cgu_:i64[4] cgv_:i64[4] cgw_:i64[4]
            cgx_:i64[4] cgy_:i64[4] cgz_:i64[4] cha_:i64[13] chb_:i64[13] chc_:i64[4]
            chd_:i64[4] che_:i64[4] chf_:i64[4] chg_:i64[4] chh_:i64[4] chi_:i64[4]
            chj_:i64[4] chk_:i64[4] chl_:i64[4] chm_:i64[4] chn_:i64[4] cho_:i64[13]
            chp_:i64[13] chq_:i64[13] chr_:i64[18] chs_:i64[132] cht_:i64[132] chu_:f64[18]
            chv_:f64[18] chw_:f64[18] chx_:i64[18] chy_:f64[3] chz_:i64[4] cia_:i64[4]
            cib_:i64[4] cic_:i64[4] cid_:i64[4] cie_:i64[4] cif_:i64[4] cig_:i64[4]
            cih_:i64[4] cii_:i64[4] cij_:i64[4] cik_:i64[4] cil_:i64[4] cim_:i64[4]
            cin_:i64[13] cio_:i64[13] cip_:i64[4] ciq_:i64[4] cir_:i64[4] cis_:i64[4]
            cit_:i64[4] ciu_:i64[4] civ_:i64[4] ciw_:i64[4] cix_:i64[4] ciy_:i64[13]
            ciz_:i64[13] cja_:i64[18] cjb_:i64[4] cjc_:f64[] cjd_:f64[4] cje_:f64[3]
            cjf_:f64[3] cjg_:f64[3] cjh_:f64[] cji_:f64[8] cjj_:f64[3] cjk_:f64[3]
            cjl_:f64[3] cjm_:i64[3] cjn_:f64[3] cjo_:f64[12] cjp_:i32[12] cjq_:i32[12]
            cjr_:f64[12,2] cjs_:f64[12] cjt_:f64[12] cju_:f64[12] cjv_:f64[12] cjw_:f64[12,2]
            cjx_:f64[13,3,3] cjy_:i64[4] cjz_:f64[7,189,400] cka_:f64[7,400,400]
            ckb_:f64[7,400,400] ckc_:f64[7,400,400] ckd_:f64[7,400,54] cke_:f64[200,4,7,180]
            ckf_:f64[200,4,7] ckg_:f64[7,400] ckh_:f64[7,189,400] cki_:f64[7,400]
            ckj_:f64[7,400,400] ckk_:f64[7,400] ckl_:f64[7,400,400] ckm_:f64[7,400]
            ckn_:f64[7,400,400] cko_:f64[7,54] ckp_:f64[7,400,54] ckq_:f64[7,400]
            ckr_:f64[7,189,400] cks_:f64[7,400] ckt_:f64[7,400,400] cku_:f64[7,400]
            ckv_:f64[7,400,400] ckw_:f64[7,400] ckx_:f64[7,400,400] cky_:f64[7,54]
            ckz_:f64[7,400,54] cla_:i32[] clb:f64[7,400] clc:f64[7,189,400] cld:f64[7,400]
            cle:f64[7,400,400] clf:f64[7,400] clg:f64[7,400,400] clh:f64[7,400] cli:f64[7,400,400]
            clj:f64[7,54] clk:f64[7,400,54] cll:i32[] clm:f64[7,400] cln:f64[7,189,400]
            clo:f64[7,400] clp:f64[7,400,400] clq:f64[7,400] clr:f64[7,400,400] cls:f64[7,400]
            clt:f64[7,400,400] clu:f64[7,54] clv:f64[7,400,54] clw:f64[7,400] clx:f64[7,189,400]
            cly:f64[7,400] clz:f64[7,400,400] cma:f64[7,400] cmb:f64[7,400,400] cmc:f64[7,400]
            cmd:f64[7,400,400] cme:f64[7,54] cmf:f64[7,400,54]. let
            cmg:f64[7] = broadcast_in_dim[broadcast_dimensions=() shape=(7,)] 0.0
          in (0.0, cmg, clb, clc, cld, cle, clf, clg, clh, cli, clj, clk, cll, clm,
            cln, clo, clp, clq, clr, cls, clt, clu, clv, clw, clx, cly, clz, cma,
            cmb, cmc, cmd, cme, cmf) }
        { lambda ; cmh:f64[200,4,7,180] cmi:f64[200,4,7,9] cmj:f64[180] cmk:f64[180]
            cml:f64[9] cmm:f64[9] cmn:f64[7,400] cmo:f64[7,400] cmp:f64[7,400] cmq:f64[7,400]
            cmr:f64[7,54] cms:f64[36,2] cmt:f64[9,2] cmu:f64[19] cmv:i64[4] cmw:f64[18,3]
            cmx:f64[18,3] cmy:f64[13,3] cmz:f64[13,4] cna:f64[13,4] cnb:f64[13,3]
            cnc:i64[4] cnd:i64[4] cne:i64[4] cnf:i64[4] cng:i64[4] cnh:i64[4] cni:i64[4]
            cnj:i64[4] cnk:i64[4] cnl:i64[4] cnm:i64[4] cnn:i64[4] cno:i64[4] cnp:i64[4]
            cnq:i64[4] cnr:i64[4] cns:i64[13] cnt:i64[13] cnu:i64[13] cnv:i64[13]
            cnw:f64[13,3] cnx:f64[13,4] cny:f64[13] cnz:i32[13] coa:f64[4] cob:i32[13]
            coc:f64[4] cod:i64[18] coe:f64[4] cof:i64[18] cog:i64[4] coh:i64[18]
            coi:i64[4] coj:i64[4] cok:i64[4] col:i64[4] com:i64[4] con:i64[4] coo:i64[4]
            cop:i64[4] coq:i64[4] cor:i64[4] cos:i64[4] cot:i64[13] cou:i64[13] cov:i64[4]
            cow:i64[4] cox:i64[4] coy:i64[4] coz:i64[4] cpa:i64[4] cpb:i64[4] cpc:i64[4]
            cpd:i64[4] cpe:i64[4] cpf:i64[4] cpg:i64[4] cph:i64[13] cpi:i64[13] cpj:i64[13]
            cpk:i64[18] cpl:i64[132] cpm:i64[132] cpn:f64[18] cpo:f64[18] cpp:f64[18]
            cpq:i64[18] cpr:f64[3] cps:i64[4] cpt:i64[4] cpu:i64[4] cpv:i64[4] cpw:i64[4]
            cpx:i64[4] cpy:i64[4] cpz:i64[4] cqa:i64[4] cqb:i64[4] cqc:i64[4] cqd:i64[4]
            cqe:i64[4] cqf:i64[4] cqg:i64[13] cqh:i64[13] cqi:i64[4] cqj:i64[4] cqk:i64[4]
            cql:i64[4] cqm:i64[4] cqn:i64[4] cqo:i64[4] cqp:i64[4] cqq:i64[4] cqr:i64[13]
            cqs:i64[13] cqt:i64[18] cqu:i64[4] cqv:f64[] cqw:f64[4] cqx:f64[3] cqy:f64[3]
            cqz:f64[3] cra:f64[] crb:f64[8] crc:f64[3] crd:f64[3] cre:f64[3] crf:i64[3]
            crg:f64[3] crh:f64[12] cri:i32[12] crj:i32[12] crk:f64[12,2] crl:f64[12]
            crm:f64[12] crn:f64[12] cro:f64[12] crp:f64[12,2] crq:f64[13,3,3] crr:i64[4]
            crs:f64[7,189,400] crt:f64[7,400,400] cru:f64[7,400,400] crv:f64[7,400,400]
            crw:f64[7,400,54] crx:f64[200,4,7,180] cry:f64[200,4,7] crz:f64[7,400]
            csa:f64[7,189,400] csb:f64[7,400] csc:f64[7,400,400] csd:f64[7,400] cse:f64[7,400,400]
            csf:f64[7,400] csg:f64[7,400,400] csh:f64[7,54] csi:f64[7,400,54] csj:f64[7,400]
            csk:f64[7,189,400] csl:f64[7,400] csm:f64[7,400,400] csn:f64[7,400] cso:f64[7,400,400]
            csp:f64[7,400] csq:f64[7,400,400] csr:f64[7,54] css:f64[7,400,54] cst:i32[]
            csu_:f64[7,400] csv_:f64[7,189,400] csw_:f64[7,400] csx_:f64[7,400,400]
            csy_:f64[7,400] csz_:f64[7,400,400] cta_:f64[7,400] ctb_:f64[7,400,400]
            ctc_:f64[7,54] ctd_:f64[7,400,54] cte_:i32[] ctf_:f64[7,400] ctg_:f64[7,189,400]
            cth_:f64[7,400] cti_:f64[7,400,400] ctj_:f64[7,400] ctk_:f64[7,400,400]
            ctl_:f64[7,400] ctm_:f64[7,400,400] ctn_:f64[7,54] cto_:f64[7,400,54]
            ctp_:f64[7,400] ctq_:f64[7,189,400] ctr_:f64[7,400] cts_:f64[7,400,400]
            ctt_:f64[7,400] ctu_:f64[7,400,400] ctv_:f64[7,400] ctw_:f64[7,400,400]
            ctx_:f64[7,54] cty_:f64[7,400,54]. let
            ctz:f64[200,1,7,180] = slice[
              limit_indices=(200, 1, 7, 180)
              start_indices=(0, 0, 0, 0)
              strides=None
            ] cmh
            cua:f64[200,7,180] = squeeze[dimensions=(1,)] ctz
            cub:f64[4,200,7,9] = transpose[permutation=(1, 0, 2, 3)] cmi
            cuc:f64[1,180] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 180)
            ] cmj
            cud:f64[1,1,180] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 180)
            ] cuc
            cue:f64[1,180] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 180)
            ] cmk
            cuf:f64[1,1,180] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 180)
            ] cue
            cug:f64[1,9] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 9)
            ] cml
            cuh:f64[1,1,9] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 9)
            ] cug
            cui:f64[1,9] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 9)
            ] cmm
            cuj:f64[1,1,9] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 9)
            ] cui
            cuk:f64[1,36] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(1, 36)
            ] 1.0
            cul:f64[1,36] = mul 0.5 cuk
            cum:f64[1,36] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(1, 36)
            ] 1.0
            cun:f64[1,36] = mul -10.0 cum
            cuo:f64[1,7,400] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 7, 400)
            ] cmn
            cup:f64[1,7,400] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 7, 400)
            ] cmo
            cuq:f64[1,7,400] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 7, 400)
            ] cmp
            cur:f64[1,7,400] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 7, 400)
            ] cmq
            cus:f64[1,7,54] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 7, 54)
            ] cmr
            cut:f64[1,1,36] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 36)
            ] cul
            cuu:f64[200,7,36] cuv:f64[] cuw:f64[200,7,36] = pjit[
              name=softplus
              jaxpr=softplus
            ]
            cux:f64[1,1,36] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 36)
            ] cul
            cuy:f64[1,1,36] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 36)
            ] cun
            cuz:f64[200,7,36] cva:f64[] cvb:f64[200,7,36] = pjit[
              name=softplus
              jaxpr=softplus
            ]
            cvc:f64[1,1,36] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 36)
            ] cun
            cvd:f64[36,1] = slice[
              limit_indices=(36, 2)
              start_indices=(0, 1)
              strides=None
            ] cms
            cve:f64[36] = squeeze[dimensions=(1,)] cvd
            cvf:f64[36,1] = slice[
              limit_indices=(36, 1)
              start_indices=(0, 0)
              strides=None
            ] cms
            cvg:f64[36] = squeeze[dimensions=(1,)] cvf
            cvh:f64[36] = sub cve cvg
            cvi:f64[1,36] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 36)
            ] cvh
            cvj:f64[1,1,36] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 36)
            ] cvi
            cvk:f64[36,1] = slice[
              limit_indices=(36, 1)
              start_indices=(0, 0)
              strides=None
            ] cms
            cvl:f64[36] = squeeze[dimensions=(1,)] cvk
            cvm:f64[1,36] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 36)
            ] cvl
            cvn:f64[1,1,36] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 36)
            ] cvm
            cvo:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 34
            cvp:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 35
            cvq:f64[36,1] = slice[
              limit_indices=(36, 1)
              start_indices=(0, 0)
              strides=None
            ] cms
            cvr:f64[36] = squeeze[dimensions=(1,)] cvq
            cvs:f64[1,36] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 36)
            ] cvr
            cvt:f64[1,1,36] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 36)
            ] cvs
            cvu:f64[36,1] = slice[
              limit_indices=(36, 2)
              start_indices=(0, 1)
              strides=None
            ] cms
            cvv:f64[36] = squeeze[dimensions=(1,)] cvu
            cvw:f64[36,1] = slice[
              limit_indices=(36, 1)
              start_indices=(0, 0)
              strides=None
            ] cms
            cvx:f64[36] = squeeze[dimensions=(1,)] cvw
            cvy:f64[36] = sub cvv cvx
            cvz:f64[1,36] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 36)
            ] cvy
            cwa:f64[1,1,36] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 36)
            ] cvz
            cwb:f64[9,1] = slice[
              limit_indices=(9, 2)
              start_indices=(0, 1)
              strides=None
            ] cmt
            cwc:f64[9] = squeeze[dimensions=(1,)] cwb
            cwd:f64[9,1] = slice[
              limit_indices=(9, 1)
              start_indices=(0, 0)
              strides=None
            ] cmt
            cwe:f64[9] = squeeze[dimensions=(1,)] cwd
            cwf:f64[9] = sub cwc cwe
            cwg:f64[1,9] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 9)
            ] cwf
            cwh:f64[1,1,9] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 9)
            ] cwg
            cwi:f64[9,1] = slice[
              limit_indices=(9, 2)
              start_indices=(0, 1)
              strides=None
            ] cmt
            cwj:f64[9] = squeeze[dimensions=(1,)] cwi
            cwk:f64[9,1] = slice[
              limit_indices=(9, 1)
              start_indices=(0, 0)
              strides=None
            ] cmt
            cwl:f64[9] = squeeze[dimensions=(1,)] cwk
            cwm:f64[9] = add cwj cwl
            cwn:f64[9] = div cwm 2.0
            cwo:f64[1,9] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 9)
            ] cwn
            cwp:f64[1,1,9] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 9)
            ] cwo
            cwq:f64[36,1] = slice[
              limit_indices=(36, 2)
              start_indices=(0, 1)
              strides=None
            ] cms
            cwr:f64[36] = squeeze[dimensions=(1,)] cwq
            cws:f64[36,1] = slice[
              limit_indices=(36, 1)
              start_indices=(0, 0)
              strides=None
            ] cms
            cwt:f64[36] = squeeze[dimensions=(1,)] cws
            cwu:f64[36] = sub cwr cwt
            cwv:f64[1,36] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 36)
            ] cwu
            cww:f64[1,1,36] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 36)
            ] cwv
            cwx:f64[36,1] = slice[
              limit_indices=(36, 1)
              start_indices=(0, 0)
              strides=None
            ] cms
            cwy:f64[36] = squeeze[dimensions=(1,)] cwx
            cwz:f64[1,36] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 36)
            ] cwy
            cxa:f64[1,1,36] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 36)
            ] cwz
            cxb:f64[36,1] = slice[
              limit_indices=(36, 2)
              start_indices=(0, 1)
              strides=None
            ] cms
            cxc:f64[36] = squeeze[dimensions=(1,)] cxb
            cxd:f64[36,1] = slice[
              limit_indices=(36, 1)
              start_indices=(0, 0)
              strides=None
            ] cms
            cxe:f64[36] = squeeze[dimensions=(1,)] cxd
            cxf:f64[36] = sub cxc cxe
            cxg:f64[1,36] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 36)
            ] cxf
            cxh:f64[1,1,36] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 36)
            ] cxg
            cxi:f64[36,1] = slice[
              limit_indices=(36, 1)
              start_indices=(0, 0)
              strides=None
            ] cms
            cxj:f64[36] = squeeze[dimensions=(1,)] cxi
            cxk:f64[1,36] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 36)
            ] cxj
            cxl:f64[1,1,36] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 36)
            ] cxk
            cxm:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 3
            cxn:f64[7,19] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(7, 19)
            ] cmu
            cxo:f64[200,7,19] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(200, 7, 19)
            ] cxn
            cxp:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 7
            cxq:i32[1] cxr:i32[1] cxs:i32[1] cxt:i32[1] cxu:i32[1] cxv:i32[1] = pjit[
              name=cross
              jaxpr=cross
            ]
            cxw:f64[4] = convert_element_type[new_dtype=float64 weak_type=False] cmv
            cxx:f64[1,4] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 4)
            ] cxw
            cxy:f64[1,1,4] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 4)
            ] cxx
            cxz:i32[1] cya:i32[1] cyb:i32[1] cyc:i32[1] cyd:i32[1] cye:i32[1] = pjit[
              name=cross
              jaxpr=cross
            ]
            cyf:f64[18] = broadcast_in_dim[broadcast_dimensions=() shape=(18,)] 0.0
            cyg:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            cyh:f64[7,18] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(7, 18)
            ] cyf
            cyi:f64[200,7,18] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(200, 7, 18)
            ] cyh
            cyj:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 3
            cyk:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 6
            cyl:f64[12,3] = slice[
              limit_indices=(18, 3)
              start_indices=(6, 0)
              strides=None
            ] cmw
            cym:f64[12,3] = slice[
              limit_indices=(18, 3)
              start_indices=(6, 0)
              strides=None
            ] cmx
            cyn:f64[12,1] = slice[
              limit_indices=(12, 1)
              start_indices=(0, 0)
              strides=None
            ] cyl
            cyo:f64[12] = squeeze[dimensions=(1,)] cyn
            cyp:f64[1,12] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 12)
            ] cyo
            cyq:f64[1,1,12] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 12)
            ] cyp
            cyr:f64[12,1] = slice[
              limit_indices=(12, 2)
              start_indices=(0, 1)
              strides=None
            ] cyl
            cys:f64[12] = squeeze[dimensions=(1,)] cyr
            cyt:f64[1,12] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 12)
            ] cys
            cyu:f64[1,1,12] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 12)
            ] cyt
            cyv:f64[12,1] = slice[
              limit_indices=(12, 3)
              start_indices=(0, 2)
              strides=None
            ] cyl
            cyw:f64[12] = squeeze[dimensions=(1,)] cyv
            cyx:f64[1,12] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 12)
            ] cyw
            cyy:f64[1,1,12] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 12)
            ] cyx
            cyz:f64[] cza:f64[] czb:bool[] czc:bool[] = pjit[
              name=allclose
              jaxpr={ lambda ; czd:f64[]. let
                  cze:f64[] czf:f64[] czg:bool[] czh:bool[] = pjit[
                    name=isclose
                    jaxpr={ lambda ; czi:f64[] czj:f64[] czk:f64[]. let
                        czl:f64[] = convert_element_type[
                          new_dtype=float64
                          weak_type=False
                        ] czi
                        czm:f64[] = convert_element_type[
                          new_dtype=float64
                          weak_type=False
                        ] czj
                        czn:f64[] = convert_element_type[
                          new_dtype=float64
                          weak_type=False
                        ] czk
                        czo:f64[] = abs czl
                        czp:f64[] = mul czm czo
                        czq:f64[] = add czn czp
                        czr:bool[] = pjit[name=isinf jaxpr=isinf] czl
                        czs:bool[] = ne czl czl
                      in (czl, czq, czr, czs) }
                  ] czd 1e-05 1e-08
                in (cze, czf, czg, czh) }
            ] 0.0
            czt:f64[4] = broadcast_in_dim[broadcast_dimensions=() shape=(4,)] 1.0
            czu:f64[200,7,12,4] = pjit[
              name=_where
              jaxpr={ lambda ; czv:f64[4]. let
                  czw:f64[12,4] = broadcast_in_dim[
                    broadcast_dimensions=(1,)
                    shape=(12, 4)
                  ] czv
                  czx:f64[7,12,4] = broadcast_in_dim[
                    broadcast_dimensions=(1, 2)
                    shape=(7, 12, 4)
                  ] czw
                  czy:f64[200,7,12,4] = broadcast_in_dim[
                    broadcast_dimensions=(1, 2, 3)
                    shape=(200, 7, 12, 4)
                  ] czx
                in (czy,) }
            ] czt
            czz:f64[200,7,12] = pjit[
              name=_where
              jaxpr={ lambda ; daa:f64[]. let
                  dab:f64[] = convert_element_type[
                    new_dtype=float64
                    weak_type=False
                  ] daa
                  dac:f64[12] = broadcast_in_dim[
                    broadcast_dimensions=()
                    shape=(12,)
                  ] dab
                  dad:f64[7,12] = broadcast_in_dim[
                    broadcast_dimensions=(1,)
                    shape=(7, 12)
                  ] dac
                  dae:f64[200,7,12] = broadcast_in_dim[
                    broadcast_dimensions=(1, 2)
                    shape=(200, 7, 12)
                  ] dad
                in (dae,) }
            ] 0.0
            daf:f64[1,12,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 12, 3)
            ] cym
            dag:f64[1,1,12,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(1, 1, 12, 3)
            ] daf
            dah:f64[1,12,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 12, 3)
            ] cyl
            dai:f64[1,1,12,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(1, 1, 12, 3)
            ] dah
            daj:f64[1,12,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 12, 3)
            ] cym
            dak:f64[1,1,12,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(1, 1, 12, 3)
            ] daj
            dal:i64[1] = pjit[name=_take jaxpr=_take] 0
            dam:i64[1] = pjit[
              name=_take
              jaxpr={ lambda ; dan:i64[]. let
                  dao:i64[] = pjit[name=remainder jaxpr=remainder1] dan 1
                  dap:i64[1] = broadcast_in_dim[
                    broadcast_dimensions=()
                    shape=(1,)
                  ] dao
                in (dap,) }
            ] 0
            daq:i64[1] = pjit[name=_take jaxpr=_take] 0
            dar:i64[1] = pjit[name=_take jaxpr=_take] 0
            das:f64[13,3] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(13, 3)
            ] 0.0
            dat:f64[1,13,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 13, 3)
            ] cmy
            dau:f64[1,1,13,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(1, 1, 13, 3)
            ] dat
            dav:i32[1] daw:f64[1,1,13] dax:i32[1] day:f64[1,1,13] daz:f64[1,1,13]
              dba:i32[1] dbb:f64[1,1,13] dbc:f64[1,1,13] dbd:f64[1,1,13] = pjit[
              name=cross
              jaxpr=cross1
            ] cmy
            dbe:f64[1,13,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 13, 3)
            ] das
            dbf:f64[1,1,13,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(1, 1, 13, 3)
            ] dbe
            dbg:f64[1,13,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 13, 3)
            ] cmy
            dbh:f64[1,1,13,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(1, 1, 13, 3)
            ] dbg
            dbi:f64[13,1] = slice[
              limit_indices=(13, 1)
              start_indices=(0, 0)
              strides=None
            ] cna
            dbj:f64[13] = squeeze[dimensions=(1,)] dbi
            dbk:f64[13,3] = slice[
              limit_indices=(13, 4)
              start_indices=(0, 1)
              strides=None
            ] cna
            dbl:f64[1,13,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 13, 3)
            ] dbk
            dbm:f64[1,1,13,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(1, 1, 13, 3)
            ] dbl
            dbn:f64[13] = mul dbj dbj
            dbo:f64[13] = dot_general[
              dimension_numbers=(([1], [1]), ([0], [0]))
              preferred_element_type=float64
            ] dbk dbk
            dbp:f64[13] = sub dbn dbo
            dbq:f64[13,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(13, 1)
            ] dbp
            dbr:f64[1,13,1] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 13, 1)
            ] dbq
            dbs:f64[1,1,13,1] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(1, 1, 13, 1)
            ] dbr
            dbt:f64[13] = mul 2.0 dbj
            dbu:f64[1,1,13] dbv:i32[1] dbw:f64[1,1,13] dbx:i32[1] dby:f64[1,1,13]
              dbz:i32[1] dca:f64[1,1,13] dcb:f64[1,1,13] dcc:f64[1,1,13] = pjit[
              name=cross
              jaxpr={ lambda ; dcd:f64[13,3]. let
                  dce:i32[1] = broadcast_in_dim[
                    broadcast_dimensions=()
                    shape=(1,)
                  ] 0
                  dcf:f64[13] = gather[
                    dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
                    fill_value=None
                    indices_are_sorted=True
                    mode=GatherScatterMode.PROMISE_IN_BOUNDS
                    slice_sizes=(13, 1)
                    unique_indices=True
                  ] dcd dce
                  dcg:i32[1] = broadcast_in_dim[
                    broadcast_dimensions=()
                    shape=(1,)
                  ] 1
                  dch:f64[13] = gather[
                    dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
                    fill_value=None
                    indices_are_sorted=True
                    mode=GatherScatterMode.PROMISE_IN_BOUNDS
                    slice_sizes=(13, 1)
                    unique_indices=True
                  ] dcd dcg
                  dci:i32[1] = broadcast_in_dim[
                    broadcast_dimensions=()
                    shape=(1,)
                  ] 2
                  dcj:f64[13] = gather[
                    dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
                    fill_value=None
                    indices_are_sorted=True
                    mode=GatherScatterMode.PROMISE_IN_BOUNDS
                    slice_sizes=(13, 1)
                    unique_indices=True
                  ] dcd dci
                  dck:i32[1] = broadcast_in_dim[
                    broadcast_dimensions=()
                    shape=(1,)
                  ] 0
                  dcl:i32[1] = broadcast_in_dim[
                    broadcast_dimensions=()
                    shape=(1,)
                  ] 1
                  dcm:i32[1] = broadcast_in_dim[
                    broadcast_dimensions=()
                    shape=(1,)
                  ] 2
                  dcn:f64[1,13] = broadcast_in_dim[
                    broadcast_dimensions=(1,)
                    shape=(1, 13)
                  ] dch
                  dco:f64[1,1,13] = broadcast_in_dim[
                    broadcast_dimensions=(1, 2)
                    shape=(1, 1, 13)
                  ] dcn
                  dcp:f64[1,13] = broadcast_in_dim[
                    broadcast_dimensions=(1,)
                    shape=(1, 13)
                  ] dcj
                  dcq:f64[1,1,13] = broadcast_in_dim[
                    broadcast_dimensions=(1, 2)
                    shape=(1, 1, 13)
                  ] dcp
                  dcr:f64[1,13] = broadcast_in_dim[
                    broadcast_dimensions=(1,)
                    shape=(1, 13)
                  ] dcj
                  dcs:f64[1,1,13] = broadcast_in_dim[
                    broadcast_dimensions=(1, 2)
                    shape=(1, 1, 13)
                  ] dcr
                  dct:f64[1,13] = broadcast_in_dim[
                    broadcast_dimensions=(1,)
                    shape=(1, 13)
                  ] dcf
                  dcu:f64[1,1,13] = broadcast_in_dim[
                    broadcast_dimensions=(1, 2)
                    shape=(1, 1, 13)
                  ] dct
                  dcv:f64[1,13] = broadcast_in_dim[
                    broadcast_dimensions=(1,)
                    shape=(1, 13)
                  ] dcf
                  dcw:f64[1,1,13] = broadcast_in_dim[
                    broadcast_dimensions=(1, 2)
                    shape=(1, 1, 13)
                  ] dcv
                  dcx:f64[1,13] = broadcast_in_dim[
                    broadcast_dimensions=(1,)
                    shape=(1, 13)
                  ] dch
                  dcy:f64[1,1,13] = broadcast_in_dim[
                    broadcast_dimensions=(1, 2)
                    shape=(1, 1, 13)
                  ] dcx
                in (dco, dcm, dcq, dcl, dcs, dck, dcu, dcw, dcy) }
            ] dbk
            dcz:f64[13,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(13, 1)
            ] dbt
            dda:f64[1,13,1] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 13, 1)
            ] dcz
            ddb:f64[1,1,13,1] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(1, 1, 13, 1)
            ] dda
            ddc:f64[1,13,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 13, 3)
            ] cnb
            ddd:f64[1,1,13,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(1, 1, 13, 3)
            ] ddc
            dde:f64[13,1] = slice[
              limit_indices=(13, 1)
              start_indices=(0, 0)
              strides=None
            ] cna
            ddf:f64[13] = squeeze[dimensions=(1,)] dde
            ddg:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] ddf
            ddh:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] ddg
            ddi:f64[13,1] = slice[
              limit_indices=(13, 2)
              start_indices=(0, 1)
              strides=None
            ] cna
            ddj:f64[13] = squeeze[dimensions=(1,)] ddi
            ddk:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] ddj
            ddl:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] ddk
            ddm:f64[13,1] = slice[
              limit_indices=(13, 3)
              start_indices=(0, 2)
              strides=None
            ] cna
            ddn:f64[13] = squeeze[dimensions=(1,)] ddm
            ddo:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] ddn
            ddp:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] ddo
            ddq:f64[13,1] = slice[
              limit_indices=(13, 4)
              start_indices=(0, 3)
              strides=None
            ] cna
            ddr:f64[13] = squeeze[dimensions=(1,)] ddq
            dds:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] ddr
            ddt:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dds
            ddu:f64[13,1] = slice[
              limit_indices=(13, 1)
              start_indices=(0, 0)
              strides=None
            ] cna
            ddv:f64[13] = squeeze[dimensions=(1,)] ddu
            ddw:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] ddv
            ddx:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] ddw
            ddy:f64[13,1] = slice[
              limit_indices=(13, 2)
              start_indices=(0, 1)
              strides=None
            ] cna
            ddz:f64[13] = squeeze[dimensions=(1,)] ddy
            dea:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] ddz
            deb:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dea
            dec:f64[13,1] = slice[
              limit_indices=(13, 3)
              start_indices=(0, 2)
              strides=None
            ] cna
            ded:f64[13] = squeeze[dimensions=(1,)] dec
            dee:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] ded
            def:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dee
            deg:f64[13,1] = slice[
              limit_indices=(13, 4)
              start_indices=(0, 3)
              strides=None
            ] cna
            deh:f64[13] = squeeze[dimensions=(1,)] deg
            dei:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] deh
            dej:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dei
            dek:f64[13,1] = slice[
              limit_indices=(13, 1)
              start_indices=(0, 0)
              strides=None
            ] cna
            del:f64[13] = squeeze[dimensions=(1,)] dek
            dem:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] del
            den:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dem
            deo:f64[13,1] = slice[
              limit_indices=(13, 2)
              start_indices=(0, 1)
              strides=None
            ] cna
            dep:f64[13] = squeeze[dimensions=(1,)] deo
            deq:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dep
            der:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] deq
            des:f64[13,1] = slice[
              limit_indices=(13, 3)
              start_indices=(0, 2)
              strides=None
            ] cna
            det:f64[13] = squeeze[dimensions=(1,)] des
            deu:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] det
            dev:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] deu
            dew:f64[13,1] = slice[
              limit_indices=(13, 4)
              start_indices=(0, 3)
              strides=None
            ] cna
            dex:f64[13] = squeeze[dimensions=(1,)] dew
            dey:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dex
            dez:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dey
            dfa:f64[13,1] = slice[
              limit_indices=(13, 1)
              start_indices=(0, 0)
              strides=None
            ] cna
            dfb:f64[13] = squeeze[dimensions=(1,)] dfa
            dfc:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dfb
            dfd:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dfc
            dfe:f64[13,1] = slice[
              limit_indices=(13, 2)
              start_indices=(0, 1)
              strides=None
            ] cna
            dff:f64[13] = squeeze[dimensions=(1,)] dfe
            dfg:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dff
            dfh:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dfg
            dfi:f64[13,1] = slice[
              limit_indices=(13, 3)
              start_indices=(0, 2)
              strides=None
            ] cna
            dfj:f64[13] = squeeze[dimensions=(1,)] dfi
            dfk:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dfj
            dfl:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dfk
            dfm:f64[13,1] = slice[
              limit_indices=(13, 4)
              start_indices=(0, 3)
              strides=None
            ] cna
            dfn:f64[13] = squeeze[dimensions=(1,)] dfm
            dfo:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dfn
            dfp:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dfo
            dfq:i32[1] dfr:i32[1] dfs:i32[1] dft:i32[1] dfu:i32[1] dfv:i32[1] = pjit[
              name=cross
              jaxpr={ lambda ; . let
                  dfw:i32[1] = broadcast_in_dim[
                    broadcast_dimensions=()
                    shape=(1,)
                  ] 0
                  dfx:i32[1] = broadcast_in_dim[
                    broadcast_dimensions=()
                    shape=(1,)
                  ] 1
                  dfy:i32[1] = broadcast_in_dim[
                    broadcast_dimensions=()
                    shape=(1,)
                  ] 2
                  dfz:i32[1] = broadcast_in_dim[
                    broadcast_dimensions=()
                    shape=(1,)
                  ] 0
                  dga:i32[1] = broadcast_in_dim[
                    broadcast_dimensions=()
                    shape=(1,)
                  ] 1
                  dgb:i32[1] = broadcast_in_dim[
                    broadcast_dimensions=()
                    shape=(1,)
                  ] 2
                in (dfx, dgb, dfy, dga, dfz, dfw) }
            ]
            dgc:i64[4,1] = pjit[name=_take jaxpr=_take1] cnc
            dgd:i64[4,1] = pjit[name=_take jaxpr=_take2] cnd
            dge:i64[4,1] = pjit[name=_take jaxpr=_take1] cne
            dgf:i64[4,1] = pjit[name=_take jaxpr=_take1] cnf
            dgg:i64[4,1] = pjit[name=_take jaxpr=_take3] cng
            dgh:i64[4,1] = pjit[
              name=_take
              jaxpr={ lambda ; dgi:i64[4]. let
                  dgj:i64[4] = pjit[name=remainder jaxpr=remainder2] dgi 1
                  dgk:i64[4,1] = broadcast_in_dim[
                    broadcast_dimensions=(0,)
                    shape=(4, 1)
                  ] dgj
                in (dgk,) }
            ] cnh
            dgl:i64[4,1] = pjit[name=_take jaxpr=_take3] cni
            dgm:i64[4,1] = pjit[name=_take jaxpr=_take3] cnj
            dgn:i32[1] dgo:i32[1] dgp:i32[1] dgq:i32[1] dgr:i32[1] dgs:i32[1] = pjit[
              name=cross
              jaxpr=cross2
            ]
            dgt:i32[1] dgu:i32[1] dgv:i32[1] dgw:i32[1] dgx:i32[1] dgy:i32[1] = pjit[
              name=cross
              jaxpr=cross2
            ]
            dgz:i32[1] dha:i32[1] dhb:i32[1] dhc:i32[1] dhd:i32[1] dhe:i32[1] = pjit[
              name=cross
              jaxpr=cross2
            ]
            dhf:i32[1] dhg:i32[1] dhh:i32[1] dhi:i32[1] dhj:i32[1] dhk:i32[1] = pjit[
              name=cross
              jaxpr=cross2
            ]
            dhl:i64[4,1] = pjit[name=_take jaxpr=_take1] cnk
            dhm:i64[4,1] = pjit[name=_take jaxpr=_take2] cnl
            dhn:i64[4,1] = pjit[name=_take jaxpr=_take1] cnm
            dho:i64[4,1] = pjit[name=_take jaxpr=_take1] cnn
            dhp:i32[1] dhq:i32[1] dhr:i32[1] dhs:i32[1] dht:i32[1] dhu:i32[1] = pjit[
              name=cross
              jaxpr=cross2
            ]
            dhv:i32[1] dhw:i32[1] dhx:i32[1] dhy:i32[1] dhz:i32[1] dia:i32[1] = pjit[
              name=cross
              jaxpr=cross2
            ]
            dib:i32[1] dic:i32[1] did:i32[1] die:i32[1] dif:i32[1] dig:i32[1] = pjit[
              name=cross
              jaxpr=cross2
            ]
            dih:i32[1] dii:i32[1] dij:i32[1] dik:i32[1] dil:i32[1] dim:i32[1] = pjit[
              name=cross
              jaxpr=cross2
            ]
            din:i64[4,1] = pjit[name=_take jaxpr=_take1] cno
            dio:i64[4,1] = pjit[name=_take jaxpr=_take2] cnp
            dip:i64[4,1] = pjit[name=_take jaxpr=_take1] cnq
            diq:i64[4,1] = pjit[name=_take jaxpr=_take1] cnr
            dir:i32[1] dis:i32[1] dit:i32[1] diu:i32[1] div:i32[1] diw:i32[1] = pjit[
              name=cross
              jaxpr=cross2
            ]
            dix:i32[1] diy:i32[1] diz:i32[1] dja:i32[1] djb:i32[1] djc:i32[1] = pjit[
              name=cross
              jaxpr=cross2
            ]
            djd:i32[1] dje:i32[1] djf:i32[1] djg:i32[1] djh:i32[1] dji:i32[1] = pjit[
              name=cross
              jaxpr=cross2
            ]
            djj:i32[1] djk:i32[1] djl:i32[1] djm:i32[1] djn:i32[1] djo:i32[1] = pjit[
              name=cross
              jaxpr=cross2
            ]
            djp:i64[13,1] = pjit[name=_take jaxpr=_take4] cns
            djq:i64[13,1] = pjit[
              name=_take
              jaxpr={ lambda ; djr:i64[13]. let
                  djs:i64[13] = pjit[name=remainder jaxpr=remainder3] djr 13
                  djt:i64[13,1] = broadcast_in_dim[
                    broadcast_dimensions=(0,)
                    shape=(13, 1)
                  ] djs
                in (djt,) }
            ] cnt
            dju:i64[13,1] = pjit[name=_take jaxpr=_take4] cnu
            djv:i64[13,1] = pjit[name=_take jaxpr=_take4] cnv
            djw:f64[] djx:f64[] djy:bool[] djz:bool[] = pjit[
              name=allclose
              jaxpr={ lambda ; dka:f64[]. let
                  dkb:f64[] dkc:f64[] dkd:bool[] dke:bool[] = pjit[
                    name=isclose
                    jaxpr={ lambda ; dkf:f64[] dkg:f64[] dkh:f64[]. let
                        dki:f64[] = convert_element_type[
                          new_dtype=float64
                          weak_type=False
                        ] dkf
                        dkj:f64[] = convert_element_type[
                          new_dtype=float64
                          weak_type=False
                        ] dkg
                        dkk:f64[] = convert_element_type[
                          new_dtype=float64
                          weak_type=False
                        ] dkh
                        dkl:f64[] = abs dki
                        dkm:f64[] = mul dkj dkl
                        dkn:f64[] = add dkk dkm
                        dko:bool[] = pjit[name=isinf jaxpr=isinf] dki
                        dkp:bool[] = ne dki dki
                      in (dki, dkn, dko, dkp) }
                  ] dka 1e-05 1e-08
                in (dkb, dkc, dkd, dke) }
            ] 0.0
            dkq:f64[4] = broadcast_in_dim[broadcast_dimensions=() shape=(4,)] 1.0
            dkr:f64[200,7,13,4] = pjit[
              name=_where
              jaxpr={ lambda ; dks:f64[4]. let
                  dkt:f64[13,4] = broadcast_in_dim[
                    broadcast_dimensions=(1,)
                    shape=(13, 4)
                  ] dks
                  dku:f64[7,13,4] = broadcast_in_dim[
                    broadcast_dimensions=(1, 2)
                    shape=(7, 13, 4)
                  ] dkt
                  dkv:f64[200,7,13,4] = broadcast_in_dim[
                    broadcast_dimensions=(1, 2, 3)
                    shape=(200, 7, 13, 4)
                  ] dku
                in (dkv,) }
            ] dkq
            dkw:f64[200,7,13] = pjit[
              name=_where
              jaxpr={ lambda ; dkx:f64[]. let
                  dky:f64[] = convert_element_type[
                    new_dtype=float64
                    weak_type=False
                  ] dkx
                  dkz:f64[13] = broadcast_in_dim[
                    broadcast_dimensions=()
                    shape=(13,)
                  ] dky
                  dla:f64[7,13] = broadcast_in_dim[
                    broadcast_dimensions=(1,)
                    shape=(7, 13)
                  ] dkz
                  dlb:f64[200,7,13] = broadcast_in_dim[
                    broadcast_dimensions=(1, 2)
                    shape=(200, 7, 13)
                  ] dla
                in (dlb,) }
            ] 0.0
            dlc:f64[1,13,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 13, 3)
            ] cnw
            dld:f64[1,1,13,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(1, 1, 13, 3)
            ] dlc
            dle:i32[1] dlf:f64[1,1,13] dlg:i32[1] dlh:f64[1,1,13] dli:f64[1,1,13]
              dlj:i32[1] dlk:f64[1,1,13] dll:f64[1,1,13] dlm:f64[1,1,13] = pjit[
              name=cross
              jaxpr=cross1
            ] cnw
            dln:f64[13,1] = slice[
              limit_indices=(13, 1)
              start_indices=(0, 0)
              strides=None
            ] cnx
            dlo:f64[13] = squeeze[dimensions=(1,)] dln
            dlp:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dlo
            dlq:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dlp
            dlr:f64[13,1] = slice[
              limit_indices=(13, 2)
              start_indices=(0, 1)
              strides=None
            ] cnx
            dls:f64[13] = squeeze[dimensions=(1,)] dlr
            dlt:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dls
            dlu:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dlt
            dlv:f64[13,1] = slice[
              limit_indices=(13, 3)
              start_indices=(0, 2)
              strides=None
            ] cnx
            dlw:f64[13] = squeeze[dimensions=(1,)] dlv
            dlx:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dlw
            dly:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dlx
            dlz:f64[13,1] = slice[
              limit_indices=(13, 4)
              start_indices=(0, 3)
              strides=None
            ] cnx
            dma:f64[13] = squeeze[dimensions=(1,)] dlz
            dmb:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dma
            dmc:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dmb
            dmd:f64[13,1] = slice[
              limit_indices=(13, 2)
              start_indices=(0, 1)
              strides=None
            ] cnx
            dme:f64[13] = squeeze[dimensions=(1,)] dmd
            dmf:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dme
            dmg:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dmf
            dmh:f64[13,1] = slice[
              limit_indices=(13, 1)
              start_indices=(0, 0)
              strides=None
            ] cnx
            dmi:f64[13] = squeeze[dimensions=(1,)] dmh
            dmj:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dmi
            dmk:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dmj
            dml:f64[13,1] = slice[
              limit_indices=(13, 4)
              start_indices=(0, 3)
              strides=None
            ] cnx
            dmm:f64[13] = squeeze[dimensions=(1,)] dml
            dmn:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dmm
            dmo:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dmn
            dmp:f64[13,1] = slice[
              limit_indices=(13, 3)
              start_indices=(0, 2)
              strides=None
            ] cnx
            dmq:f64[13] = squeeze[dimensions=(1,)] dmp
            dmr:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dmq
            dms:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dmr
            dmt:f64[13,1] = slice[
              limit_indices=(13, 3)
              start_indices=(0, 2)
              strides=None
            ] cnx
            dmu:f64[13] = squeeze[dimensions=(1,)] dmt
            dmv:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dmu
            dmw:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dmv
            dmx:f64[13,1] = slice[
              limit_indices=(13, 4)
              start_indices=(0, 3)
              strides=None
            ] cnx
            dmy:f64[13] = squeeze[dimensions=(1,)] dmx
            dmz:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dmy
            dna:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dmz
            dnb:f64[13,1] = slice[
              limit_indices=(13, 1)
              start_indices=(0, 0)
              strides=None
            ] cnx
            dnc:f64[13] = squeeze[dimensions=(1,)] dnb
            dnd:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dnc
            dne:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dnd
            dnf:f64[13,1] = slice[
              limit_indices=(13, 2)
              start_indices=(0, 1)
              strides=None
            ] cnx
            dng:f64[13] = squeeze[dimensions=(1,)] dnf
            dnh:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dng
            dni:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dnh
            dnj:f64[13,1] = slice[
              limit_indices=(13, 4)
              start_indices=(0, 3)
              strides=None
            ] cnx
            dnk:f64[13] = squeeze[dimensions=(1,)] dnj
            dnl:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dnk
            dnm:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dnl
            dnn:f64[13,1] = slice[
              limit_indices=(13, 3)
              start_indices=(0, 2)
              strides=None
            ] cnx
            dno:f64[13] = squeeze[dimensions=(1,)] dnn
            dnp:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dno
            dnq:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dnp
            dnr:f64[13,1] = slice[
              limit_indices=(13, 2)
              start_indices=(0, 1)
              strides=None
            ] cnx
            dns:f64[13] = squeeze[dimensions=(1,)] dnr
            dnt:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dns
            dnu:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dnt
            dnv:f64[13,1] = slice[
              limit_indices=(13, 1)
              start_indices=(0, 0)
              strides=None
            ] cnx
            dnw:f64[13] = squeeze[dimensions=(1,)] dnv
            dnx:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dnw
            dny:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dnx
            dnz:f64[13,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(13, 1)
            ] cny
            doa:f64[1,13,1] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 13, 1)
            ] dnz
            dob:f64[1,1,13,1] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(1, 1, 13, 1)
            ] doa
            doc:f64[13,3] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(13, 3)
            ] 0.0
            dod:i32[13,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(13, 1)
            ] cnz
            doe:f64[7,13,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(7, 13, 3)
            ] doc
            dof:f64[200,7,13,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(200, 7, 13, 3)
            ] doe
            dog:f64[13] = broadcast_in_dim[broadcast_dimensions=() shape=(13,)] 0.0
            doh:i32[13,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(13, 1)
            ] cnz
            doi:f64[13] = scatter-add[
              dimension_numbers=ScatterDimensionNumbers(update_window_dims=(), inserted_window_dims=(0,), scatter_dims_to_operand_dims=(0,))
              indices_are_sorted=False
              mode=GatherScatterMode.FILL_OR_DROP
              unique_indices=False
              update_consts=()
              update_jaxpr=jaxpr
            ] dog doh cny
            doj:bool[13] = lt cnz 0
            dok:i32[13] = add cnz 13
            dol:i32[13] = select_n doj cnz dok
            dom:i32[13,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(13, 1)
            ] dol
            don:bool[13] = lt cnz 0
            doo:i32[13] = add cnz 13
            dop:i32[13] = select_n don cnz doo
            doq:i32[13,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(13, 1)
            ] dop
            dor:f64[13] = gather[
              dimension_numbers=GatherDimensionNumbers(offset_dims=(), collapsed_slice_dims=(0,), start_index_map=(0,))
              fill_value=None
              indices_are_sorted=False
              mode=GatherScatterMode.PROMISE_IN_BOUNDS
              slice_sizes=(1,)
              unique_indices=False
            ] doi doq
            dos:f64[13,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(13, 1)
            ] dor
            dot:f64[1,13,1] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 13, 1)
            ] dos
            dou:f64[1,1,13,1] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(1, 1, 13, 1)
            ] dot
            dov:i64[3,3] = iota[dimension=0 dtype=int64 shape=(3, 3)]
            dow:i64[3,3] = iota[dimension=1 dtype=int64 shape=(3, 3)]
            dox:i64[3,3] = add dov 0
            doy:bool[3,3] = eq dox dow
            doz:f64[3,3] = convert_element_type[
              new_dtype=float64
              weak_type=False
            ] doy
            dpa:f64[3,3] = neg doz
            dpb:i32[1] dpc:f64[1,1,1,3] dpd:i32[1] dpe:f64[1,1,1,3] dpf:f64[1,1,1,3]
              dpg:i32[1] dph:f64[1,1,1,3] dpi:f64[1,1,1,3] dpj:f64[1,1,1,3] = pjit[
              name=cross
              jaxpr={ lambda ; dpk:f64[3,3]. let
                  dpl:i32[1] = broadcast_in_dim[
                    broadcast_dimensions=()
                    shape=(1,)
                  ] 0
                  dpm:i32[1] = broadcast_in_dim[
                    broadcast_dimensions=()
                    shape=(1,)
                  ] 1
                  dpn:i32[1] = broadcast_in_dim[
                    broadcast_dimensions=()
                    shape=(1,)
                  ] 2
                  dpo:f64[3,1] = slice[
                    limit_indices=(3, 1)
                    start_indices=(0, 0)
                    strides=None
                  ] dpk
                  dpp:f64[3] = squeeze[dimensions=(1,)] dpo
                  dpq:f64[3,1] = slice[
                    limit_indices=(3, 2)
                    start_indices=(0, 1)
                    strides=None
                  ] dpk
                  dpr:f64[3] = squeeze[dimensions=(1,)] dpq
                  dps:f64[3,1] = slice[
                    limit_indices=(3, 3)
                    start_indices=(0, 2)
                    strides=None
                  ] dpk
                  dpt:f64[3] = squeeze[dimensions=(1,)] dps
                  dpu:f64[1,3] = broadcast_in_dim[
                    broadcast_dimensions=(1,)
                    shape=(1, 3)
                  ] dpt
                  dpv:f64[1,1,3] = broadcast_in_dim[
                    broadcast_dimensions=(1, 2)
                    shape=(1, 1, 3)
                  ] dpu
                  dpw:f64[1,1,1,3] = broadcast_in_dim[
                    broadcast_dimensions=(1, 2, 3)
                    shape=(1, 1, 1, 3)
                  ] dpv
                  dpx:f64[1,3] = broadcast_in_dim[
                    broadcast_dimensions=(1,)
                    shape=(1, 3)
                  ] dpr
                  dpy:f64[1,1,3] = broadcast_in_dim[
                    broadcast_dimensions=(1, 2)
                    shape=(1, 1, 3)
                  ] dpx
                  dpz:f64[1,1,1,3] = broadcast_in_dim[
                    broadcast_dimensions=(1, 2, 3)
                    shape=(1, 1, 1, 3)
                  ] dpy
                  dqa:f64[1,3] = broadcast_in_dim[
                    broadcast_dimensions=(1,)
                    shape=(1, 3)
                  ] dpp
                  dqb:f64[1,1,3] = broadcast_in_dim[
                    broadcast_dimensions=(1, 2)
                    shape=(1, 1, 3)
                  ] dqa
                  dqc:f64[1,1,1,3] = broadcast_in_dim[
                    broadcast_dimensions=(1, 2, 3)
                    shape=(1, 1, 1, 3)
                  ] dqb
                  dqd:f64[1,3] = broadcast_in_dim[
                    broadcast_dimensions=(1,)
                    shape=(1, 3)
                  ] dpt
                  dqe:f64[1,1,3] = broadcast_in_dim[
                    broadcast_dimensions=(1, 2)
                    shape=(1, 1, 3)
                  ] dqd
                  dqf:f64[1,1,1,3] = broadcast_in_dim[
                    broadcast_dimensions=(1, 2, 3)
                    shape=(1, 1, 1, 3)
                  ] dqe
                  dqg:f64[1,3] = broadcast_in_dim[
                    broadcast_dimensions=(1,)
                    shape=(1, 3)
                  ] dpr
                  dqh:f64[1,1,3] = broadcast_in_dim[
                    broadcast_dimensions=(1, 2)
                    shape=(1, 1, 3)
                  ] dqg
                  dqi:f64[1,1,1,3] = broadcast_in_dim[
                    broadcast_dimensions=(1, 2, 3)
                    shape=(1, 1, 1, 3)
                  ] dqh
                  dqj:f64[1,3] = broadcast_in_dim[
                    broadcast_dimensions=(1,)
                    shape=(1, 3)
                  ] dpp
                  dqk:f64[1,1,3] = broadcast_in_dim[
                    broadcast_dimensions=(1, 2)
                    shape=(1, 1, 3)
                  ] dqj
                  dql:f64[1,1,1,3] = broadcast_in_dim[
                    broadcast_dimensions=(1, 2, 3)
                    shape=(1, 1, 1, 3)
                  ] dqk
                in (dpm, dpw, dpn, dpz, dqc, dpl, dqf, dqi, dql) }
            ] dpa
            dqm:f64[13,1,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(13, 1, 1)
            ] cny
            dqn:f64[1,13,1,1] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(1, 13, 1, 1)
            ] dqm
            dqo:f64[1,1,13,1,1] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3, 4)
              shape=(1, 1, 13, 1, 1)
            ] dqn
            dqp:f64[13,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(13, 1)
            ] cny
            dqq:f64[1,13,1] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 13, 1)
            ] dqp
            dqr:f64[1,1,13,1] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(1, 1, 13, 1)
            ] dqq
            dqs:f64[1,3] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(1, 3)
            ] 0.0
            dqt:f64[1,1,1,4] = reshape[dimensions=None new_sizes=(1, 1, 1, 4)] coa
            dqu:f64[1,4] = reshape[dimensions=None new_sizes=(1, 4)] dqt
            dqv:f64[7,1,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(7, 1, 3)
            ] dqs
            dqw:f64[200,7,1,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(200, 7, 1, 3)
            ] dqv
            dqx:f64[7,1,4] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(7, 1, 4)
            ] dqu
            dqy:f64[200,7,1,4] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(200, 7, 1, 4)
            ] dqx
            dqz:i32[13,1] = pjit[name=_take jaxpr=_take5] cob
            dra:i32[13,1] = pjit[
              name=_take
              jaxpr={ lambda ; drb:i32[13]. let
                  drc:i32[13] = pjit[name=remainder jaxpr=remainder4] drb 14
                  drd:i32[13,1] = broadcast_in_dim[
                    broadcast_dimensions=(0,)
                    shape=(13, 1)
                  ] drc
                in (drd,) }
            ] cob
            dre:f64[1,13,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 13, 3)
            ] cnb
            drf:f64[1,1,13,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(1, 1, 13, 3)
            ] dre
            drg:i32[1] drh:f64[1,1,13] dri:i32[1] drj:f64[1,1,13] drk:f64[1,1,13]
              drl:i32[1] drm:f64[1,1,13] drn:f64[1,1,13] dro:f64[1,1,13] = pjit[
              name=cross
              jaxpr=cross1
            ] cnb
            drp:f64[13,1] = slice[
              limit_indices=(13, 1)
              start_indices=(0, 0)
              strides=None
            ] cna
            drq:f64[13] = squeeze[dimensions=(1,)] drp
            drr:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] drq
            drs:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] drr
            drt:f64[13,1] = slice[
              limit_indices=(13, 2)
              start_indices=(0, 1)
              strides=None
            ] cna
            dru:f64[13] = squeeze[dimensions=(1,)] drt
            drv:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dru
            drw:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] drv
            drx:f64[13,1] = slice[
              limit_indices=(13, 3)
              start_indices=(0, 2)
              strides=None
            ] cna
            dry:f64[13] = squeeze[dimensions=(1,)] drx
            drz:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dry
            dsa:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] drz
            dsb:f64[13,1] = slice[
              limit_indices=(13, 4)
              start_indices=(0, 3)
              strides=None
            ] cna
            dsc:f64[13] = squeeze[dimensions=(1,)] dsb
            dsd:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dsc
            dse:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dsd
            dsf:f64[13,1] = slice[
              limit_indices=(13, 2)
              start_indices=(0, 1)
              strides=None
            ] cna
            dsg:f64[13] = squeeze[dimensions=(1,)] dsf
            dsh:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dsg
            dsi:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dsh
            dsj:f64[13,1] = slice[
              limit_indices=(13, 1)
              start_indices=(0, 0)
              strides=None
            ] cna
            dsk:f64[13] = squeeze[dimensions=(1,)] dsj
            dsl:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dsk
            dsm:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dsl
            dsn:f64[13,1] = slice[
              limit_indices=(13, 4)
              start_indices=(0, 3)
              strides=None
            ] cna
            dso:f64[13] = squeeze[dimensions=(1,)] dsn
            dsp:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dso
            dsq:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dsp
            dsr:f64[13,1] = slice[
              limit_indices=(13, 3)
              start_indices=(0, 2)
              strides=None
            ] cna
            dss:f64[13] = squeeze[dimensions=(1,)] dsr
            dst:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dss
            dsu:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dst
            dsv:f64[13,1] = slice[
              limit_indices=(13, 3)
              start_indices=(0, 2)
              strides=None
            ] cna
            dsw:f64[13] = squeeze[dimensions=(1,)] dsv
            dsx:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dsw
            dsy:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dsx
            dsz:f64[13,1] = slice[
              limit_indices=(13, 4)
              start_indices=(0, 3)
              strides=None
            ] cna
            dta:f64[13] = squeeze[dimensions=(1,)] dsz
            dtb:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dta
            dtc:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dtb
            dtd:f64[13,1] = slice[
              limit_indices=(13, 1)
              start_indices=(0, 0)
              strides=None
            ] cna
            dte:f64[13] = squeeze[dimensions=(1,)] dtd
            dtf:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dte
            dtg:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dtf
            dth:f64[13,1] = slice[
              limit_indices=(13, 2)
              start_indices=(0, 1)
              strides=None
            ] cna
            dti:f64[13] = squeeze[dimensions=(1,)] dth
            dtj:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dti
            dtk:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dtj
            dtl:f64[13,1] = slice[
              limit_indices=(13, 4)
              start_indices=(0, 3)
              strides=None
            ] cna
            dtm:f64[13] = squeeze[dimensions=(1,)] dtl
            dtn:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dtm
            dto:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dtn
            dtp:f64[13,1] = slice[
              limit_indices=(13, 3)
              start_indices=(0, 2)
              strides=None
            ] cna
            dtq:f64[13] = squeeze[dimensions=(1,)] dtp
            dtr:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dtq
            dts:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dtr
            dtt:f64[13,1] = slice[
              limit_indices=(13, 2)
              start_indices=(0, 1)
              strides=None
            ] cna
            dtu:f64[13] = squeeze[dimensions=(1,)] dtt
            dtv:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dtu
            dtw:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dtv
            dtx:f64[13,1] = slice[
              limit_indices=(13, 1)
              start_indices=(0, 0)
              strides=None
            ] cna
            dty:f64[13] = squeeze[dimensions=(1,)] dtx
            dtz:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dty
            dua:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dtz
            dub:f64[1,13,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 13, 3)
            ] cmy
            duc:f64[1,1,13,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(1, 1, 13, 3)
            ] dub
            dud:i32[1] due:f64[1,1,13] duf:i32[1] dug:f64[1,1,13] duh:f64[1,1,13]
              dui:i32[1] duj:f64[1,1,13] duk:f64[1,1,13] dul:f64[1,1,13] = pjit[
              name=cross
              jaxpr=cross1
            ] cmy
            dum:f64[13,1] = slice[
              limit_indices=(13, 1)
              start_indices=(0, 0)
              strides=None
            ] cmz
            dun:f64[13] = squeeze[dimensions=(1,)] dum
            duo:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dun
            dup:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] duo
            duq:f64[13,1] = slice[
              limit_indices=(13, 2)
              start_indices=(0, 1)
              strides=None
            ] cmz
            dur:f64[13] = squeeze[dimensions=(1,)] duq
            dus:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dur
            dut:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dus
            duu:f64[13,1] = slice[
              limit_indices=(13, 3)
              start_indices=(0, 2)
              strides=None
            ] cmz
            duv:f64[13] = squeeze[dimensions=(1,)] duu
            duw:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] duv
            dux:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] duw
            duy:f64[13,1] = slice[
              limit_indices=(13, 4)
              start_indices=(0, 3)
              strides=None
            ] cmz
            duz:f64[13] = squeeze[dimensions=(1,)] duy
            dva:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] duz
            dvb:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dva
            dvc:f64[13,1] = slice[
              limit_indices=(13, 2)
              start_indices=(0, 1)
              strides=None
            ] cmz
            dvd:f64[13] = squeeze[dimensions=(1,)] dvc
            dve:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dvd
            dvf:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dve
            dvg:f64[13,1] = slice[
              limit_indices=(13, 1)
              start_indices=(0, 0)
              strides=None
            ] cmz
            dvh:f64[13] = squeeze[dimensions=(1,)] dvg
            dvi:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dvh
            dvj:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dvi
            dvk:f64[13,1] = slice[
              limit_indices=(13, 4)
              start_indices=(0, 3)
              strides=None
            ] cmz
            dvl:f64[13] = squeeze[dimensions=(1,)] dvk
            dvm:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dvl
            dvn:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dvm
            dvo:f64[13,1] = slice[
              limit_indices=(13, 3)
              start_indices=(0, 2)
              strides=None
            ] cmz
            dvp:f64[13] = squeeze[dimensions=(1,)] dvo
            dvq:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dvp
            dvr:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dvq
            dvs:f64[13,1] = slice[
              limit_indices=(13, 3)
              start_indices=(0, 2)
              strides=None
            ] cmz
            dvt:f64[13] = squeeze[dimensions=(1,)] dvs
            dvu:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dvt
            dvv:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dvu
            dvw:f64[13,1] = slice[
              limit_indices=(13, 4)
              start_indices=(0, 3)
              strides=None
            ] cmz
            dvx:f64[13] = squeeze[dimensions=(1,)] dvw
            dvy:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dvx
            dvz:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dvy
            dwa:f64[13,1] = slice[
              limit_indices=(13, 1)
              start_indices=(0, 0)
              strides=None
            ] cmz
            dwb:f64[13] = squeeze[dimensions=(1,)] dwa
            dwc:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dwb
            dwd:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dwc
            dwe:f64[13,1] = slice[
              limit_indices=(13, 2)
              start_indices=(0, 1)
              strides=None
            ] cmz
            dwf:f64[13] = squeeze[dimensions=(1,)] dwe
            dwg:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dwf
            dwh:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dwg
            dwi:f64[13,1] = slice[
              limit_indices=(13, 4)
              start_indices=(0, 3)
              strides=None
            ] cmz
            dwj:f64[13] = squeeze[dimensions=(1,)] dwi
            dwk:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dwj
            dwl:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dwk
            dwm:f64[13,1] = slice[
              limit_indices=(13, 3)
              start_indices=(0, 2)
              strides=None
            ] cmz
            dwn:f64[13] = squeeze[dimensions=(1,)] dwm
            dwo:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dwn
            dwp:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dwo
            dwq:f64[13,1] = slice[
              limit_indices=(13, 2)
              start_indices=(0, 1)
              strides=None
            ] cmz
            dwr:f64[13] = squeeze[dimensions=(1,)] dwq
            dws:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dwr
            dwt:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dws
            dwu:f64[13,1] = slice[
              limit_indices=(13, 1)
              start_indices=(0, 0)
              strides=None
            ] cmz
            dwv:f64[13] = squeeze[dimensions=(1,)] dwu
            dww:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dwv
            dwx:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dww
            dwy:f64[6,3] = slice[
              limit_indices=(6, 3)
              start_indices=(0, 0)
              strides=None
            ] cmw
            dwz:f64[6,3] = slice[
              limit_indices=(6, 3)
              start_indices=(0, 0)
              strides=None
            ] cmx
            dxa:f64[12,3] = slice[
              limit_indices=(18, 3)
              start_indices=(6, 0)
              strides=None
            ] cmw
            dxb:f64[12,3] = slice[
              limit_indices=(18, 3)
              start_indices=(6, 0)
              strides=None
            ] cmx
            dxc:f64[12,1,3] = reshape[dimensions=None new_sizes=(12, 1, 3)] dxa
            dxd:f64[12,1,3] = reshape[dimensions=None new_sizes=(12, 1, 3)] dxb
            dxe:f64[12,3] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(12, 3)
            ] 0.0
            dxf:f64[1,1,1,4] = reshape[dimensions=None new_sizes=(1, 1, 1, 4)] coc
            dxg:f64[1,1,4] = squeeze[dimensions=(0,)] dxf
            dxh:f64[12,1,1,4] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(12, 1, 1, 4)
            ] dxg
            dxi:f64[12,4] = reshape[dimensions=None new_sizes=(12, 4)] dxh
            dxj:f64[12,3] = pjit[name=_take jaxpr=_take6] dxc 0
            dxk:f64[12,3] = pjit[name=_take jaxpr=_take6] dxd 0
            dxl:f64[12,1] = slice[
              limit_indices=(12, 1)
              start_indices=(0, 0)
              strides=None
            ] dxi
            dxm:f64[12] = squeeze[dimensions=(1,)] dxl
            dxn:f64[12,3] = slice[
              limit_indices=(12, 4)
              start_indices=(0, 1)
              strides=None
            ] dxi
            dxo:f64[12] = dot_general[
              dimension_numbers=(([1], [1]), ([0], [0]))
              preferred_element_type=float64
            ] dxn dxj
            dxp:f64[12,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(12, 1)
            ] dxo
            dxq:f64[12,3] = mul dxp dxn
            dxr:f64[12,3] = mul 2.0 dxq
            dxs:f64[12] = mul dxm dxm
            dxt:f64[12] = dot_general[
              dimension_numbers=(([1], [1]), ([0], [0]))
              preferred_element_type=float64
            ] dxn dxn
            dxu:f64[12] = sub dxs dxt
            dxv:f64[12,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(12, 1)
            ] dxu
            dxw:f64[12,3] = mul dxv dxj
            dxx:f64[12,3] = add dxr dxw
            dxy:f64[12] = mul 2.0 dxm
            dxz:f64[12,3] = pjit[name=cross jaxpr=cross3] dxn dxj
            dya:f64[12,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(12, 1)
            ] dxy
            dyb:f64[12,3] = mul dya dxz
            dyc:f64[12,3] = add dxx dyb
            dyd:f64[12,1] = slice[
              limit_indices=(12, 1)
              start_indices=(0, 0)
              strides=None
            ] dxi
            dye:f64[12] = squeeze[dimensions=(1,)] dyd
            dyf:f64[12,3] = slice[
              limit_indices=(12, 4)
              start_indices=(0, 1)
              strides=None
            ] dxi
            dyg:f64[12] = dot_general[
              dimension_numbers=(([1], [1]), ([0], [0]))
              preferred_element_type=float64
            ] dyf dxk
            dyh:f64[12,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(12, 1)
            ] dyg
            dyi:f64[12,3] = mul dyh dyf
            dyj:f64[12,3] = mul 2.0 dyi
            dyk:f64[12] = mul dye dye
            dyl:f64[12] = dot_general[
              dimension_numbers=(([1], [1]), ([0], [0]))
              preferred_element_type=float64
            ] dyf dyf
            dym:f64[12] = sub dyk dyl
            dyn:f64[12,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(12, 1)
            ] dym
            dyo:f64[12,3] = mul dyn dxk
            dyp:f64[12,3] = add dyj dyo
            dyq:f64[12] = mul 2.0 dye
            dyr:f64[12,3] = pjit[name=cross jaxpr=cross3] dyf dxk
            dys:f64[12,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(12, 1)
            ] dyq
            dyt:f64[12,3] = mul dys dyr
            dyu:f64[12,3] = add dyp dyt
            dyv:f64[12,3] = pjit[name=cross jaxpr=cross3] dxe dyc
            dyw:f64[12,3] = add dyu dyv
            dyx:f64[18,3] = concatenate[dimension=0] dwy dyc
            dyy:f64[18,3] = concatenate[dimension=0] dwz dyw
            dyz:i64[18,1] = pjit[
              name=_take
              jaxpr={ lambda ; dza:i64[18]. let
                  dzb:i64[18] = pjit[name=remainder jaxpr=remainder6] dza 13
                  dzc:i64[18,1] = broadcast_in_dim[
                    broadcast_dimensions=(0,)
                    shape=(18, 1)
                  ] dzb
                in (dzc,) }
            ] cod
            dzd:f64[1,18,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 18, 3)
            ] dyx
            dze:f64[1,1,18,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(1, 1, 18, 3)
            ] dzd
            dzf:i32[1] dzg:f64[1,1,18] dzh:i32[1] dzi:f64[1,1,18] dzj:f64[1,1,18]
              dzk:i32[1] dzl:f64[1,1,18] dzm:f64[1,1,18] dzn:f64[1,1,18] = pjit[
              name=cross
              jaxpr={ lambda ; dzo:f64[18,3]. let
                  dzp:i32[1] = broadcast_in_dim[
                    broadcast_dimensions=()
                    shape=(1,)
                  ] 0
                  dzq:i32[1] = broadcast_in_dim[
                    broadcast_dimensions=()
                    shape=(1,)
                  ] 1
                  dzr:i32[1] = broadcast_in_dim[
                    broadcast_dimensions=()
                    shape=(1,)
                  ] 2
                  dzs:i32[1] = broadcast_in_dim[
                    broadcast_dimensions=()
                    shape=(1,)
                  ] 0
                  dzt:f64[18] = gather[
                    dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
                    fill_value=None
                    indices_are_sorted=True
                    mode=GatherScatterMode.PROMISE_IN_BOUNDS
                    slice_sizes=(18, 1)
                    unique_indices=True
                  ] dzo dzs
                  dzu:i32[1] = broadcast_in_dim[
                    broadcast_dimensions=()
                    shape=(1,)
                  ] 1
                  dzv:f64[18] = gather[
                    dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
                    fill_value=None
                    indices_are_sorted=True
                    mode=GatherScatterMode.PROMISE_IN_BOUNDS
                    slice_sizes=(18, 1)
                    unique_indices=True
                  ] dzo dzu
                  dzw:i32[1] = broadcast_in_dim[
                    broadcast_dimensions=()
                    shape=(1,)
                  ] 2
                  dzx:f64[18] = gather[
                    dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
                    fill_value=None
                    indices_are_sorted=True
                    mode=GatherScatterMode.PROMISE_IN_BOUNDS
                    slice_sizes=(18, 1)
                    unique_indices=True
                  ] dzo dzw
                  dzy:f64[1,18] = broadcast_in_dim[
                    broadcast_dimensions=(1,)
                    shape=(1, 18)
                  ] dzx
                  dzz:f64[1,1,18] = broadcast_in_dim[
                    broadcast_dimensions=(1, 2)
                    shape=(1, 1, 18)
                  ] dzy
                  eaa:f64[1,18] = broadcast_in_dim[
                    broadcast_dimensions=(1,)
                    shape=(1, 18)
                  ] dzv
                  eab:f64[1,1,18] = broadcast_in_dim[
                    broadcast_dimensions=(1, 2)
                    shape=(1, 1, 18)
                  ] eaa
                  eac:f64[1,18] = broadcast_in_dim[
                    broadcast_dimensions=(1,)
                    shape=(1, 18)
                  ] dzt
                  ead:f64[1,1,18] = broadcast_in_dim[
                    broadcast_dimensions=(1, 2)
                    shape=(1, 1, 18)
                  ] eac
                  eae:f64[1,18] = broadcast_in_dim[
                    broadcast_dimensions=(1,)
                    shape=(1, 18)
                  ] dzx
                  eaf:f64[1,1,18] = broadcast_in_dim[
                    broadcast_dimensions=(1, 2)
                    shape=(1, 1, 18)
                  ] eae
                  eag:f64[1,18] = broadcast_in_dim[
                    broadcast_dimensions=(1,)
                    shape=(1, 18)
                  ] dzv
                  eah:f64[1,1,18] = broadcast_in_dim[
                    broadcast_dimensions=(1, 2)
                    shape=(1, 1, 18)
                  ] eag
                  eai:f64[1,18] = broadcast_in_dim[
                    broadcast_dimensions=(1,)
                    shape=(1, 18)
                  ] dzt
                  eaj:f64[1,1,18] = broadcast_in_dim[
                    broadcast_dimensions=(1, 2)
                    shape=(1, 1, 18)
                  ] eai
                in (dzq, dzz, dzr, eab, ead, dzp, eaf, eah, eaj) }
            ] dyx
            eak:f64[1,1,1,4] = reshape[dimensions=None new_sizes=(1, 1, 1, 4)] coe
            eal:f64[1,1,4] = squeeze[dimensions=(0,)] eak
            eam:f64[13,1,1,4] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(13, 1, 1, 4)
            ] eal
            ean:f64[13,4] = reshape[dimensions=None new_sizes=(13, 4)] eam
            eao:i64[18,1] = pjit[name=_take jaxpr=_take7] cof
            eap:f64[18,4] = pjit[
              name=_take
              jaxpr={ lambda ; eaq:f64[13,4] ear:i64[18]. let
                  eas:i64[18] = pjit[
                    name=remainder
                    jaxpr={ lambda ; fx:i64[18] fy:i64[]. let
                        fz:bool[] = eq fy 0
                        ga:i64[] = pjit[name=_where jaxpr=_where2] fz 1 fy
                        gb:i64[18] = rem fx ga
                        gc:bool[18] = ne gb 0
                        gd:bool[18] = lt gb 0
                        ge:bool[] = lt ga 0
                        gf:bool[18] = ne gd ge
                        gg:bool[18] = and gf gc
                        gh:i64[18] = add gb ga
                        gi:i64[18] = select_n gg gb gh
                      in (gi,) }
                  ] ear 13
                  eat:i64[18,1] = broadcast_in_dim[
                    broadcast_dimensions=(0,)
                    shape=(18, 1)
                  ] eas
                  eau:f64[18,4] = gather[
                    dimension_numbers=GatherDimensionNumbers(offset_dims=(1,), collapsed_slice_dims=(0,), start_index_map=(0,))
                    fill_value=None
                    indices_are_sorted=False
                    mode=GatherScatterMode.PROMISE_IN_BOUNDS
                    slice_sizes=(1, 4)
                    unique_indices=False
                  ] eaq eat
                in (eau,) }
            ] ean cof
            eav:f64[4] = convert_element_type[new_dtype=float64 weak_type=False] cog
            eaw:f64[1,4] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 4)
            ] eav
            eax:f64[18,4] = mul eap eaw
            eay:f64[18,1] = slice[
              limit_indices=(18, 1)
              start_indices=(0, 0)
              strides=None
            ] eax
            eaz:f64[18] = squeeze[dimensions=(1,)] eay
            eba:f64[18,3] = slice[
              limit_indices=(18, 4)
              start_indices=(0, 1)
              strides=None
            ] eax
            ebb:f64[1,18,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 18, 3)
            ] eba
            ebc:f64[1,1,18,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(1, 1, 18, 3)
            ] ebb
            ebd:f64[18] = mul eaz eaz
            ebe:f64[18] = dot_general[
              dimension_numbers=(([1], [1]), ([0], [0]))
              preferred_element_type=float64
            ] eba eba
            ebf:f64[18] = sub ebd ebe
            ebg:f64[18,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(18, 1)
            ] ebf
            ebh:f64[1,18,1] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 18, 1)
            ] ebg
            ebi:f64[1,1,18,1] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(1, 1, 18, 1)
            ] ebh
            ebj:f64[18] = mul 2.0 eaz
            ebk:f64[1,1,18] ebl:i32[1] ebm:f64[1,1,18] ebn:i32[1] ebo:f64[1,1,18]
              ebp:i32[1] ebq:f64[1,1,18] ebr:f64[1,1,18] ebs:f64[1,1,18] = pjit[
              name=cross
              jaxpr=cross4
            ] eba
            ebt:f64[18,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(18, 1)
            ] ebj
            ebu:f64[1,18,1] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 18, 1)
            ] ebt
            ebv:f64[1,1,18,1] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(1, 1, 18, 1)
            ] ebu
            ebw:i32[1] ebx:i32[1] eby:i32[1] ebz:i32[1] eca:i32[1] ecb:i32[1] = pjit[
              name=cross
              jaxpr=cross5
            ]
            ecc:f64[1,18,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 18, 3)
            ] dyy
            ecd:f64[1,1,18,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(1, 1, 18, 3)
            ] ecc
            ece:f64[18,1] = slice[
              limit_indices=(18, 1)
              start_indices=(0, 0)
              strides=None
            ] eax
            ecf:f64[18] = squeeze[dimensions=(1,)] ece
            ecg:f64[18,3] = slice[
              limit_indices=(18, 4)
              start_indices=(0, 1)
              strides=None
            ] eax
            ech:f64[1,18,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 18, 3)
            ] ecg
            eci:f64[1,1,18,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(1, 1, 18, 3)
            ] ech
            ecj:f64[18] = mul ecf ecf
            eck:f64[18] = dot_general[
              dimension_numbers=(([1], [1]), ([0], [0]))
              preferred_element_type=float64
            ] ecg ecg
            ecl:f64[18] = sub ecj eck
            ecm:f64[18,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(18, 1)
            ] ecl
            ecn:f64[1,18,1] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 18, 1)
            ] ecm
            eco:f64[1,1,18,1] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(1, 1, 18, 1)
            ] ecn
            ecp:f64[18] = mul 2.0 ecf
            ecq:f64[1,1,18] ecr:i32[1] ecs:f64[1,1,18] ect:i32[1] ecu:f64[1,1,18]
              ecv:i32[1] ecw:f64[1,1,18] ecx:f64[1,1,18] ecy:f64[1,1,18] = pjit[
              name=cross
              jaxpr=cross4
            ] ecg
            ecz:f64[18,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(18, 1)
            ] ecp
            eda:f64[1,18,1] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 18, 1)
            ] ecz
            edb:f64[1,1,18,1] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(1, 1, 18, 1)
            ] eda
            edc:i64[6] = slice[
              limit_indices=(6,)
              start_indices=(0,)
              strides=None
            ] coh
            edd:f64[1,3] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(1, 3)
            ] 0.0
            ede:f64[1,3] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(1, 3)
            ] 0.0
            edf:bool[6] = lt edc 0
            edg:i64[6] = add edc 1
            edh:i64[6] = select_n edf edc edg
            edi:i32[6] = convert_element_type[new_dtype=int32 weak_type=False] edh
            edj:i32[6,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(6, 1)
            ] edi
            edk:f64[7,1,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(7, 1, 3)
            ] edd
            edl:f64[200,7,1,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(200, 7, 1, 3)
            ] edk
            edm:bool[6] = lt edc 0
            edn:i64[6] = add edc 1
            edo:i64[6] = select_n edm edc edn
            edp:i32[6] = convert_element_type[new_dtype=int32 weak_type=False] edo
            edq:i32[6,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(6, 1)
            ] edp
            edr:f64[7,1,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(7, 1, 3)
            ] ede
            eds:f64[200,7,1,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(200, 7, 1, 3)
            ] edr
            edt:i64[4,1] = pjit[name=_take jaxpr=_take8] coi
            edu:i64[4,1] = pjit[name=_take jaxpr=_take8] coj
            edv:i64[4] = pjit[name=_take jaxpr=_take9] coh cok
            edw:i64[4,1] = pjit[name=_take jaxpr=_take3] col
            edx:i64[4,1] = pjit[name=_take jaxpr=_take3] com
            edy:bool[4] = lt edv 0
            edz:i64[4] = add edv 4
            eea:i64[4] = select_n edy edv edz
            eeb:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] eea
            eec:i32[4,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(4, 1)
            ] eeb
            eed:bool[4] = lt edv 0
            eee:i64[4] = add edv 4
            eef:i64[4] = select_n eed edv eee
            eeg:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] eef
            eeh:i32[4,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(4, 1)
            ] eeg
            eei:i64[4,1] = pjit[name=_take jaxpr=_take8] con
            eej:i64[4,1] = pjit[name=_take jaxpr=_take8] coo
            eek:i64[4] = pjit[name=_take jaxpr=_take9] coh cop
            eel:bool[4] = lt eek 0
            eem:i64[4] = add eek 4
            een:i64[4] = select_n eel eek eem
            eeo:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] een
            eep:i32[4,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(4, 1)
            ] eeo
            eeq:bool[4] = lt eek 0
            eer:i64[4] = add eek 4
            ees:i64[4] = select_n eeq eek eer
            eet:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] ees
            eeu:i32[4,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(4, 1)
            ] eet
            eev:i64[4,1] = pjit[name=_take jaxpr=_take8] coq
            eew:i64[4,1] = pjit[name=_take jaxpr=_take8] cor
            eex:i64[4] = pjit[name=_take jaxpr=_take9] coh cos
            eey:bool[4] = lt eex 0
            eez:i64[4] = add eex 4
            efa:i64[4] = select_n eey eex eez
            efb:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] efa
            efc:i32[4,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(4, 1)
            ] efb
            efd:bool[4] = lt eex 0
            efe:i64[4] = add eex 4
            eff:i64[4] = select_n efd eex efe
            efg:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] eff
            efh:i32[4,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(4, 1)
            ] efg
            efi:i64[13,1] = pjit[name=_take jaxpr=_take4] cot
            efj:i64[13,1] = pjit[name=_take jaxpr=_take4] cou
            efk:f64[1,3] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(1, 3)
            ] 0.0
            efl:f64[1,3] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(1, 3)
            ] 0.0
            efm:f64[7,1,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(7, 1, 3)
            ] efk
            efn:f64[200,7,1,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(200, 7, 1, 3)
            ] efm
            efo:f64[7,1,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(7, 1, 3)
            ] efl
            efp:f64[200,7,1,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(200, 7, 1, 3)
            ] efo
            efq:i32[13,1] = pjit[name=_take jaxpr=_take5] cob
            efr:i32[13,1] = pjit[name=_take jaxpr=_take5] cob
            efs:i32[1] eft:i32[1] efu:i32[1] efv:i32[1] efw:i32[1] efx:i32[1] = pjit[
              name=cross
              jaxpr=cross6
            ]
            efy:i32[1] efz:i32[1] ega:i32[1] egb:i32[1] egc:i32[1] egd:i32[1] = pjit[
              name=cross
              jaxpr=cross6
            ]
            ege:i32[1] egf:i32[1] egg:i32[1] egh:i32[1] egi:i32[1] egj:i32[1] = pjit[
              name=cross
              jaxpr=cross6
            ]
            egk:f64[3] = broadcast_in_dim[broadcast_dimensions=() shape=(3,)] 0.0
            egl:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            egm:f64[1,3,3] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 3, 3)
            ] egk
            egn:f64[7,1,3,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(7, 1, 3, 3)
            ] egm
            ego:f64[200,7,1,3,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3, 4)
              shape=(200, 7, 1, 3, 3)
            ] egn
            egp:f64[3] = broadcast_in_dim[broadcast_dimensions=() shape=(3,)] 0.0
            egq:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            egr:f64[1,3,3] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 3, 3)
            ] egp
            egs:f64[7,1,3,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(7, 1, 3, 3)
            ] egr
            egt:f64[200,7,1,3,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3, 4)
              shape=(200, 7, 1, 3, 3)
            ] egs
            egu:i32[1] egv:i32[1] egw:i32[1] egx:i32[1] egy:i32[1] egz:i32[1] = pjit[
              name=cross
              jaxpr=cross7
            ]
            eha:i32[1] ehb:i32[1] ehc:i32[1] ehd:i32[1] ehe:i32[1] ehf:i32[1] = pjit[
              name=cross
              jaxpr=cross7
            ]
            ehg:i32[1] ehh:i32[1] ehi:i32[1] ehj:i32[1] ehk:i32[1] ehl:i32[1] = pjit[
              name=cross
              jaxpr=cross7
            ]
            ehm:i64[4,1] = pjit[name=_take jaxpr=_take1] cov
            ehn:i64[4,1] = pjit[name=_take jaxpr=_take10] cow
            eho:f64[4] = pjit[name=_take jaxpr=_take11] cny cox
            ehp:i64[4,1] = pjit[name=_take jaxpr=_take1] coy
            ehq:i64[4,1] = pjit[name=_take jaxpr=_take10] coz
            ehr:f64[4] = pjit[name=_take jaxpr=_take11] cny cpa
            ehs:f64[4,3] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(4, 3)
            ] 0.0
            eht:bool[4] = lt cpb 0
            ehu:i64[4] = add cpb 4
            ehv:i64[4] = select_n eht cpb ehu
            ehw:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] ehv
            ehx:i32[4,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(4, 1)
            ] ehw
            ehy:f64[7,4,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(7, 4, 3)
            ] ehs
            ehz:f64[200,7,4,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(200, 7, 4, 3)
            ] ehy
            eia:f64[4,3,3] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(4, 3, 3)
            ] 0.0
            eib:bool[4] = lt cpb 0
            eic:i64[4] = add cpb 4
            eid:i64[4] = select_n eib cpb eic
            eie:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] eid
            eif:i32[4,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(4, 1)
            ] eie
            eig:f64[7,4,3,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(7, 4, 3, 3)
            ] eia
            eih:f64[200,7,4,3,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3, 4)
              shape=(200, 7, 4, 3, 3)
            ] eig
            eii:f64[4] = broadcast_in_dim[broadcast_dimensions=() shape=(4,)] 0.0
            eij:bool[4] = lt cpb 0
            eik:i64[4] = add cpb 4
            eil:i64[4] = select_n eij cpb eik
            eim:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] eil
            ein:i32[4,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(4, 1)
            ] eim
            eio:f64[4] = scatter-add[
              dimension_numbers=ScatterDimensionNumbers(update_window_dims=(), inserted_window_dims=(0,), scatter_dims_to_operand_dims=(0,))
              indices_are_sorted=False
              mode=GatherScatterMode.FILL_OR_DROP
              unique_indices=False
              update_consts=()
              update_jaxpr=jaxpr
            ] eii ein eho
            eip:f64[4] = add ehr eio
            eiq:i64[4,1] = pjit[name=_take jaxpr=_take1] cpc
            eir:i64[4,1] = pjit[name=_take jaxpr=_take10] cpd
            eis:f64[4] = pjit[name=_take jaxpr=_take11] cny cpe
            eit:f64[4,3] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(4, 3)
            ] 0.0
            eiu:bool[4] = lt cpf 0
            eiv:i64[4] = add cpf 4
            eiw:i64[4] = select_n eiu cpf eiv
            eix:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] eiw
            eiy:i32[4,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(4, 1)
            ] eix
            eiz:f64[7,4,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(7, 4, 3)
            ] eit
            eja:f64[200,7,4,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(200, 7, 4, 3)
            ] eiz
            ejb:f64[4,3,3] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(4, 3, 3)
            ] 0.0
            ejc:bool[4] = lt cpf 0
            ejd:i64[4] = add cpf 4
            eje:i64[4] = select_n ejc cpf ejd
            ejf:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] eje
            ejg:i32[4,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(4, 1)
            ] ejf
            ejh:f64[7,4,3,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(7, 4, 3, 3)
            ] ejb
            eji:f64[200,7,4,3,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3, 4)
              shape=(200, 7, 4, 3, 3)
            ] ejh
            ejj:f64[4] = broadcast_in_dim[broadcast_dimensions=() shape=(4,)] 0.0
            ejk:bool[4] = lt cpf 0
            ejl:i64[4] = add cpf 4
            ejm:i64[4] = select_n ejk cpf ejl
            ejn:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] ejm
            ejo:i32[4,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(4, 1)
            ] ejn
            ejp:f64[4] = scatter-add[
              dimension_numbers=ScatterDimensionNumbers(update_window_dims=(), inserted_window_dims=(0,), scatter_dims_to_operand_dims=(0,))
              indices_are_sorted=False
              mode=GatherScatterMode.FILL_OR_DROP
              unique_indices=False
              update_consts=()
              update_jaxpr=jaxpr
            ] ejj ejo eip
            ejq:f64[4] = add eis ejp
            ejr:f64[1] = slice[
              limit_indices=(1,)
              start_indices=(0,)
              strides=None
            ] cny
            ejs:f64[1,3] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(1, 3)
            ] 0.0
            ejt:bool[4] = lt cpg 0
            eju:i64[4] = add cpg 1
            ejv:i64[4] = select_n ejt cpg eju
            ejw:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] ejv
            ejx:i32[4,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(4, 1)
            ] ejw
            ejy:f64[7,1,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(7, 1, 3)
            ] ejs
            ejz:f64[200,7,1,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(200, 7, 1, 3)
            ] ejy
            eka:f64[1,3,3] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(1, 3, 3)
            ] 0.0
            ekb:bool[4] = lt cpg 0
            ekc:i64[4] = add cpg 1
            ekd:i64[4] = select_n ekb cpg ekc
            eke:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] ekd
            ekf:i32[4,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(4, 1)
            ] eke
            ekg:f64[7,1,3,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(7, 1, 3, 3)
            ] eka
            ekh:f64[200,7,1,3,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3, 4)
              shape=(200, 7, 1, 3, 3)
            ] ekg
            eki:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0.0
            ekj:bool[4] = lt cpg 0
            ekk:i64[4] = add cpg 1
            ekl:i64[4] = select_n ekj cpg ekk
            ekm:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] ekl
            ekn:i32[4,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(4, 1)
            ] ekm
            eko:f64[1] = scatter-add[
              dimension_numbers=ScatterDimensionNumbers(update_window_dims=(), inserted_window_dims=(0,), scatter_dims_to_operand_dims=(0,))
              indices_are_sorted=False
              mode=GatherScatterMode.FILL_OR_DROP
              unique_indices=False
              update_consts=()
              update_jaxpr=jaxpr
            ] eki ekn ejq
            ekp:f64[1] = add ejr eko
            ekq:f64[13] = concatenate[dimension=0] ekp ejq eip eho
            ekr:i64[13,1] = pjit[name=_take jaxpr=_take4] cph
            eks:i64[13,1] = pjit[
              name=_take
              jaxpr={ lambda ; ekt:i64[13]. let
                  eku:i64[13] = pjit[name=remainder jaxpr=remainder3] ekt 13
                  ekv:i64[13,1] = broadcast_in_dim[
                    broadcast_dimensions=(0,)
                    shape=(13, 1)
                  ] eku
                in (ekv,) }
            ] cpi
            ekw:f64[13] = pjit[
              name=_take
              jaxpr={ lambda ; ekx:f64[13] eky:i64[13]. let
                  ekz:i64[13] = pjit[
                    name=remainder
                    jaxpr={ lambda ; dg:i64[13] dh:i64[]. let
                        di:bool[] = eq dh 0
                        dj:i64[] = pjit[name=_where jaxpr=_where2] di 1 dh
                        dk:i64[13] = rem dg dj
                        dl:bool[13] = ne dk 0
                        dm:bool[13] = lt dk 0
                        dn:bool[] = lt dj 0
                        do:bool[13] = ne dm dn
                        dp:bool[13] = and do dl
                        dq:i64[13] = add dk dj
                        dr:i64[13] = select_n dp dk dq
                      in (dr,) }
                  ] eky 13
                  ela:i64[13,1] = broadcast_in_dim[
                    broadcast_dimensions=(0,)
                    shape=(13, 1)
                  ] ekz
                  elb:f64[13] = gather[
                    dimension_numbers=GatherDimensionNumbers(offset_dims=(), collapsed_slice_dims=(0,), start_index_map=(0,))
                    fill_value=None
                    indices_are_sorted=False
                    mode=GatherScatterMode.PROMISE_IN_BOUNDS
                    slice_sizes=(1,)
                    unique_indices=False
                  ] ekx ela
                in (elb,) }
            ] ekq cpj
            elc:i64[18,1] = pjit[
              name=_take
              jaxpr={ lambda ; eld:i64[18]. let
                  ele:i64[18] = pjit[name=remainder jaxpr=remainder8] eld 13
                  elf:i64[18,1] = broadcast_in_dim[
                    broadcast_dimensions=(0,)
                    shape=(18, 1)
                  ] ele
                in (elf,) }
            ] cpk
            elg:i64[18,1] = pjit[
              name=_take
              jaxpr={ lambda ; elh:i64[18]. let
                  eli:i64[18] = pjit[name=remainder jaxpr=remainder8] elh 13
                  elj:i64[18,1] = broadcast_in_dim[
                    broadcast_dimensions=(0,)
                    shape=(18, 1)
                  ] eli
                in (elj,) }
            ] cpk
            elk:f64[18] = pjit[
              name=_take
              jaxpr={ lambda ; ell:f64[13] elm:i64[18]. let
                  eln:i64[18] = pjit[
                    name=remainder
                    jaxpr={ lambda ; kc:i64[18] kd:i64[]. let
                        ke:bool[] = eq kd 0
                        kf:i64[] = pjit[name=_where jaxpr=_where4] ke 1 kd
                        kg:i64[18] = rem kc kf
                        kh:bool[18] = ne kg 0
                        ki:bool[18] = lt kg 0
                        kj:bool[] = lt kf 0
                        kk:bool[18] = ne ki kj
                        kl:bool[18] = and kk kh
                        km:i64[18] = add kg kf
                        kn:i64[18] = select_n kl kg km
                      in (kn,) }
                  ] elm 13
                  elo:i64[18,1] = broadcast_in_dim[
                    broadcast_dimensions=(0,)
                    shape=(18, 1)
                  ] eln
                  elp:f64[18] = gather[
                    dimension_numbers=GatherDimensionNumbers(offset_dims=(), collapsed_slice_dims=(0,), start_index_map=(0,))
                    fill_value=None
                    indices_are_sorted=False
                    mode=GatherScatterMode.PROMISE_IN_BOUNDS
                    slice_sizes=(1,)
                    unique_indices=False
                  ] ell elo
                in (elp,) }
            ] ekw cpk
            elq:i32[1] elr:i32[1] els:i32[1] elt:i32[1] elu:i32[1] elv:i32[1] = pjit[
              name=cross
              jaxpr=cross5
            ]
            elw:f64[18,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(18, 1)
            ] elk
            elx:f64[1,18,1] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 18, 1)
            ] elw
            ely:f64[1,1,18,1] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(1, 1, 18, 1)
            ] elx
            elz:i32[1] ema:i32[1] emb:i32[1] emc:i32[1] emd:i32[1] eme:i32[1] = pjit[
              name=cross
              jaxpr=cross5
            ]
            emf:f64[18,18] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(18, 18)
            ] 0.0
            emg:bool[132] = lt cpl 0
            emh:i64[132] = add cpl 18
            emi:i64[132] = select_n emg cpl emh
            emj:bool[132] = lt cpm 0
            emk:i64[132] = add cpm 18
            eml:i64[132] = select_n emj cpm emk
            emm:i32[132] = convert_element_type[new_dtype=int32 weak_type=False] emi
            emn:i32[132] = convert_element_type[new_dtype=int32 weak_type=False] eml
            emo:i32[132,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(132, 1)
            ] emm
            emp:i32[132,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(132, 1)
            ] emn
            emq:i32[132,2] = concatenate[dimension=1] emo emp
            emr:f64[132] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(132,)
            ] 1.0
            ems:f64[18,18] = scatter[
              dimension_numbers=ScatterDimensionNumbers(update_window_dims=(), inserted_window_dims=(0, 1), scatter_dims_to_operand_dims=(0, 1))
              indices_are_sorted=False
              mode=GatherScatterMode.FILL_OR_DROP
              unique_indices=False
              update_consts=()
              update_jaxpr=None
            ] emf emq emr
            emt:f64[1,18,18] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 18, 18)
            ] ems
            emu:f64[1,1,18,18] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(1, 1, 18, 18)
            ] emt
            emv:bool[200,7,18,18] emw:f64[200,7,18,18] = pjit[
              name=tril
              jaxpr={ lambda ; . let
                  emx:i32[18,18] = iota[dimension=0 dtype=int32 shape=(18, 18)]
                  emy:i32[18,18] = add emx 0
                  emz:i32[18,18] = iota[dimension=1 dtype=int32 shape=(18, 18)]
                  ena:bool[18,18] = ge emy emz
                  enb:f64[18,18] = broadcast_in_dim[
                    broadcast_dimensions=()
                    shape=(18, 18)
                  ] 0.0
                  enc:bool[7,18,18] = broadcast_in_dim[
                    broadcast_dimensions=(1, 2)
                    shape=(7, 18, 18)
                  ] ena
                  end:f64[7,18,18] = broadcast_in_dim[
                    broadcast_dimensions=(1, 2)
                    shape=(7, 18, 18)
                  ] enb
                  ene:bool[200,7,18,18] = broadcast_in_dim[
                    broadcast_dimensions=(1, 2, 3)
                    shape=(200, 7, 18, 18)
                  ] enc
                  enf:f64[200,7,18,18] = broadcast_in_dim[
                    broadcast_dimensions=(1, 2, 3)
                    shape=(200, 7, 18, 18)
                  ] end
                in (ene, enf) }
            ]
            eng:bool[200,7,18,18] enh:f64[200,7,18,18] = pjit[
              name=tril
              jaxpr={ lambda ; . let
                  eni:i32[18,18] = iota[dimension=0 dtype=int32 shape=(18, 18)]
                  enj:i32[18,18] = add eni -1
                  enk:i32[18,18] = iota[dimension=1 dtype=int32 shape=(18, 18)]
                  enl:bool[18,18] = ge enj enk
                  enm:f64[18,18] = broadcast_in_dim[
                    broadcast_dimensions=()
                    shape=(18, 18)
                  ] 0.0
                  enn:bool[7,18,18] = broadcast_in_dim[
                    broadcast_dimensions=(1, 2)
                    shape=(7, 18, 18)
                  ] enl
                  eno:f64[7,18,18] = broadcast_in_dim[
                    broadcast_dimensions=(1, 2)
                    shape=(7, 18, 18)
                  ] enm
                  enp:bool[200,7,18,18] = broadcast_in_dim[
                    broadcast_dimensions=(1, 2, 3)
                    shape=(200, 7, 18, 18)
                  ] enn
                  enq:f64[200,7,18,18] = broadcast_in_dim[
                    broadcast_dimensions=(1, 2, 3)
                    shape=(200, 7, 18, 18)
                  ] eno
                in (enp, enq) }
            ]
            enr:f64[18,18] = pjit[
              name=_diag
              jaxpr={ lambda ; ens:f64[18]. let
                  ent:f64[18] = pad[padding_config=((0, 0, 0),)] ens 0.0
                  enu:i64[18,18] = iota[dimension=0 dtype=int64 shape=(18, 18)]
                  env:i64[18,18] = iota[dimension=1 dtype=int64 shape=(18, 18)]
                  enw:i64[18,18] = add enu 0
                  enx:bool[18,18] = eq enw env
                  eny:f64[18] = broadcast_in_dim[
                    broadcast_dimensions=()
                    shape=(18,)
                  ] 0.0
                  enz:f64[18,18] = pjit[name=_where jaxpr=_where] enx ent eny
                in (enz,) }
            ] cpn
            eoa:f64[1,18,18] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 18, 18)
            ] enr
            eob:f64[1,1,18,18] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(1, 1, 18, 18)
            ] eoa
            eoc:i64[18,18] = iota[dimension=0 dtype=int64 shape=(18, 18)]
            eod:i64[18,18] = iota[dimension=1 dtype=int64 shape=(18, 18)]
            eoe:i64[18,18] = add eoc 0
            eof:bool[18,18] = eq eoe eod
            eog:f64[18,18] = convert_element_type[
              new_dtype=float64
              weak_type=False
            ] eof
            eoh:bool[200,7,18,18] eoi:f64[200,7,18,18] eoj:bool[200,7,18,18] eok:f64[200,7,18,18]
              eol:bool[200,7,18,18] eom:f64[200,7,18,18] eon:f64[200,7,18,18] = pjit[
              name=_solve
              jaxpr={ lambda ; eoo:f64[18,18]. let
                  eop:bool[200,7,18,18] eoq:f64[200,7,18,18] eor:bool[200,7,18,18]
                    eos:f64[200,7,18,18] eot:bool[200,7,18,18] eou:f64[200,7,18,18] = pjit[
                    name=_cholesky
                    jaxpr=_cholesky
                  ]
                  eov:f64[18,18] = transpose[permutation=(1, 0)] eoo
                  eow:f64[7,18,18] = broadcast_in_dim[
                    broadcast_dimensions=(1, 2)
                    shape=(7, 18, 18)
                  ] eov
                  eox:f64[200,7,18,18] = broadcast_in_dim[
                    broadcast_dimensions=(1, 2, 3)
                    shape=(200, 7, 18, 18)
                  ] eow
                in (eop, eoq, eor, eos, eot, eou, eox) }
            ] eog
            eoy:f64[18] = broadcast_in_dim[broadcast_dimensions=() shape=(18,)] 0.0
            eoz:f64[6] = broadcast_in_dim[broadcast_dimensions=() shape=(6,)] 0.0
            epa:f64[12] = slice[
              limit_indices=(18,)
              start_indices=(6,)
              strides=None
            ] cpo
            epb:f64[1,12] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 12)
            ] epa
            epc:f64[1,1,12] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 12)
            ] epb
            epd:f64[7,6] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(7, 6)
            ] eoz
            epe:f64[200,7,6] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(200, 7, 6)
            ] epd
            epf:f64[1,18] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 18)
            ] cpp
            epg:f64[1,1,18] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 18)
            ] epf
            eph:i64[6] = slice[
              limit_indices=(6,)
              start_indices=(0,)
              strides=None
            ] cpq
            epi:f64[1,1,1,3] = reshape[dimensions=None new_sizes=(1, 1, 1, 3)] cpr
            epj:f64[1,3] = reshape[dimensions=None new_sizes=(1, 3)] epi
            epk:f64[1,3] = neg epj
            epl:f64[1,3] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(1, 3)
            ] 0.0
            epm:bool[6] = lt eph 0
            epn:i64[6] = add eph 1
            epo:i64[6] = select_n epm eph epn
            epp:i32[6] = convert_element_type[new_dtype=int32 weak_type=False] epo
            epq:i32[6,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(6, 1)
            ] epp
            epr:f64[7,1,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(7, 1, 3)
            ] epl
            eps:f64[200,7,1,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(200, 7, 1, 3)
            ] epr
            ept:bool[6] = lt eph 0
            epu:i64[6] = add eph 1
            epv:i64[6] = select_n ept eph epu
            epw:i32[6] = convert_element_type[new_dtype=int32 weak_type=False] epv
            epx:i32[6,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(6, 1)
            ] epw
            epy:f64[7,1,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(7, 1, 3)
            ] epk
            epz:f64[200,7,1,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(200, 7, 1, 3)
            ] epy
            eqa:i64[4,1] = pjit[name=_take jaxpr=_take8] cps
            eqb:i64[4,1] = pjit[name=_take jaxpr=_take8] cpt
            eqc:i64[4,1] = pjit[name=_take jaxpr=_take12] cpu
            eqd:i64[4] = pjit[name=_take jaxpr=_take9] cpq cpv
            eqe:i64[4,1] = pjit[name=_take jaxpr=_take3] cpw
            eqf:i64[4,1] = pjit[name=_take jaxpr=_take3] cpx
            eqg:bool[4] = lt eqd 0
            eqh:i64[4] = add eqd 4
            eqi:i64[4] = select_n eqg eqd eqh
            eqj:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] eqi
            eqk:i32[4,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(4, 1)
            ] eqj
            eql:bool[4] = lt eqd 0
            eqm:i64[4] = add eqd 4
            eqn:i64[4] = select_n eql eqd eqm
            eqo:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] eqn
            eqp:i32[4,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(4, 1)
            ] eqo
            eqq:i64[4,1] = pjit[name=_take jaxpr=_take8] cpy
            eqr:i64[4,1] = pjit[name=_take jaxpr=_take8] cpz
            eqs:i64[4,1] = pjit[name=_take jaxpr=_take12] cqa
            eqt:i64[4] = pjit[name=_take jaxpr=_take9] cpq cqb
            equ:bool[4] = lt eqt 0
            eqv:i64[4] = add eqt 4
            eqw:i64[4] = select_n equ eqt eqv
            eqx:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] eqw
            eqy:i32[4,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(4, 1)
            ] eqx
            eqz:bool[4] = lt eqt 0
            era:i64[4] = add eqt 4
            erb:i64[4] = select_n eqz eqt era
            erc:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] erb
            erd:i32[4,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(4, 1)
            ] erc
            ere:i64[4,1] = pjit[name=_take jaxpr=_take8] cqc
            erf:i64[4,1] = pjit[name=_take jaxpr=_take8] cqd
            erg:i64[4,1] = pjit[name=_take jaxpr=_take12] cqe
            erh:i64[4] = pjit[name=_take jaxpr=_take9] cpq cqf
            eri:bool[4] = lt erh 0
            erj:i64[4] = add erh 4
            erk:i64[4] = select_n eri erh erj
            erl:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] erk
            erm:i32[4,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(4, 1)
            ] erl
            ern:bool[4] = lt erh 0
            ero:i64[4] = add erh 4
            erp:i64[4] = select_n ern erh ero
            erq:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] erp
            err:i32[4,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(4, 1)
            ] erq
            ers:i64[13,1] = pjit[name=_take jaxpr=_take4] cqg
            ert:i64[13,1] = pjit[name=_take jaxpr=_take4] cqh
            eru:i32[1] erv:i32[1] erw:i32[1] erx:i32[1] ery:i32[1] erz:i32[1] = pjit[
              name=cross
              jaxpr=cross8
            ]
            esa:f64[13,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(13, 1)
            ] cny
            esb:f64[1,13,1] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 13, 1)
            ] esa
            esc:f64[1,1,13,1] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(1, 1, 13, 1)
            ] esb
            esd:i32[1] ese:i32[1] esf:i32[1] esg:i32[1] esh:i32[1] esi:i32[1] = pjit[
              name=cross
              jaxpr=cross8
            ]
            esj:i32[1] esk:i32[1] esl:i32[1] esm:i32[1] esn:i32[1] eso:i32[1] = pjit[
              name=cross
              jaxpr=cross8
            ]
            esp:f64[13,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(13, 1)
            ] cny
            esq:f64[1,13,1] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 13, 1)
            ] esp
            esr:f64[1,1,13,1] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(1, 1, 13, 1)
            ] esq
            ess:i32[1] est:i32[1] esu:i32[1] esv:i32[1] esw:i32[1] esx:i32[1] = pjit[
              name=cross
              jaxpr=cross8
            ]
            esy:i32[1] esz:i32[1] eta:i32[1] etb:i32[1] etc:i32[1] etd:i32[1] = pjit[
              name=cross
              jaxpr=cross8
            ]
            ete:i32[1] etf:i32[1] etg:i32[1] eth:i32[1] eti:i32[1] etj:i32[1] = pjit[
              name=cross
              jaxpr=cross8
            ]
            etk:i32[1] etl:i32[1] etm:i32[1] etn:i32[1] eto:i32[1] etp:i32[1] = pjit[
              name=cross
              jaxpr=cross8
            ]
            etq:i64[4,1] = pjit[name=_take jaxpr=_take1] cqi
            etr:i64[4,1] = pjit[name=_take jaxpr=_take1] cqj
            ets:i64[4,1] = pjit[name=_take jaxpr=_take1] cqk
            ett:i64[4,1] = pjit[name=_take jaxpr=_take1] cql
            etu:f64[4,3] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(4, 3)
            ] 0.0
            etv:bool[4] = lt cqm 0
            etw:i64[4] = add cqm 4
            etx:i64[4] = select_n etv cqm etw
            ety:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] etx
            etz:i32[4,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(4, 1)
            ] ety
            eua:f64[7,4,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(7, 4, 3)
            ] etu
            eub:f64[200,7,4,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(200, 7, 4, 3)
            ] eua
            euc:f64[4,3] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(4, 3)
            ] 0.0
            eud:bool[4] = lt cqm 0
            eue:i64[4] = add cqm 4
            euf:i64[4] = select_n eud cqm eue
            eug:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] euf
            euh:i32[4,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(4, 1)
            ] eug
            eui:f64[7,4,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(7, 4, 3)
            ] euc
            euj:f64[200,7,4,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(200, 7, 4, 3)
            ] eui
            euk:i64[4,1] = pjit[name=_take jaxpr=_take1] cqn
            eul:i64[4,1] = pjit[name=_take jaxpr=_take1] cqo
            eum:f64[4,3] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(4, 3)
            ] 0.0
            eun:bool[4] = lt cqp 0
            euo:i64[4] = add cqp 4
            eup:i64[4] = select_n eun cqp euo
            euq:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] eup
            eur:i32[4,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(4, 1)
            ] euq
            eus:f64[7,4,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(7, 4, 3)
            ] eum
            eut:f64[200,7,4,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(200, 7, 4, 3)
            ] eus
            euu:f64[4,3] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(4, 3)
            ] 0.0
            euv:bool[4] = lt cqp 0
            euw:i64[4] = add cqp 4
            eux:i64[4] = select_n euv cqp euw
            euy:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] eux
            euz:i32[4,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(4, 1)
            ] euy
            eva:f64[7,4,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(7, 4, 3)
            ] euu
            evb:f64[200,7,4,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(200, 7, 4, 3)
            ] eva
            evc:f64[1,3] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(1, 3)
            ] 0.0
            evd:bool[4] = lt cqq 0
            eve:i64[4] = add cqq 1
            evf:i64[4] = select_n evd cqq eve
            evg:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] evf
            evh:i32[4,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(4, 1)
            ] evg
            evi:f64[7,1,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(7, 1, 3)
            ] evc
            evj:f64[200,7,1,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(200, 7, 1, 3)
            ] evi
            evk:f64[1,3] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(1, 3)
            ] 0.0
            evl:bool[4] = lt cqq 0
            evm:i64[4] = add cqq 1
            evn:i64[4] = select_n evl cqq evm
            evo:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] evn
            evp:i32[4,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(4, 1)
            ] evo
            evq:f64[7,1,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(7, 1, 3)
            ] evk
            evr:f64[200,7,1,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(200, 7, 1, 3)
            ] evq
            evs:i64[13,1] = pjit[name=_take jaxpr=_take4] cqr
            evt:i64[13,1] = pjit[name=_take jaxpr=_take4] cqs
            evu:i64[18,1] = pjit[name=_take jaxpr=_take7] cqt
            evv:i64[18,1] = pjit[name=_take jaxpr=_take7] cqt
            evw:f64[1,18] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 18)
            ] eoy
            evx:f64[1,1,18] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 18)
            ] evw
            evy:f64[4] = convert_element_type[new_dtype=float64 weak_type=False] cqu
            evz:f64[1,4] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 4)
            ] evy
            ewa:f64[1,1,4] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 4)
            ] evz
            ewb:i32[1] ewc:i32[1] ewd:i32[1] ewe:i32[1] ewf:i32[1] ewg:i32[1] = pjit[
              name=cross
              jaxpr=cross9
            ]
            ewh:i32[1] ewi:i32[1] ewj:i32[1] ewk:i32[1] ewl:i32[1] ewm:i32[1] = pjit[
              name=cross
              jaxpr=cross9
            ]
            ewn:f64[36,1] = slice[
              limit_indices=(36, 1)
              start_indices=(0, 0)
              strides=None
            ] cms
            ewo:f64[36] = squeeze[dimensions=(1,)] ewn
            ewp:f64[1,36] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 36)
            ] ewo
            ewq:f64[1,1,36] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 36)
            ] ewp
            ewr:f64[36,1] = slice[
              limit_indices=(36, 2)
              start_indices=(0, 1)
              strides=None
            ] cms
            ews:f64[36] = squeeze[dimensions=(1,)] ewr
            ewt:f64[36,1] = slice[
              limit_indices=(36, 1)
              start_indices=(0, 0)
              strides=None
            ] cms
            ewu:f64[36] = squeeze[dimensions=(1,)] ewt
            ewv:f64[36] = sub ews ewu
            eww:f64[1,36] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 36)
            ] ewv
            ewx:f64[1,1,36] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 36)
            ] eww
            ewy:f64[36,1] = slice[
              limit_indices=(36, 2)
              start_indices=(0, 1)
              strides=None
            ] cms
            ewz:f64[36] = squeeze[dimensions=(1,)] ewy
            exa:f64[36,1] = slice[
              limit_indices=(36, 1)
              start_indices=(0, 0)
              strides=None
            ] cms
            exb:f64[36] = squeeze[dimensions=(1,)] exa
            exc:f64[36] = sub ewz exb
            exd:f64[1,36] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 36)
            ] exc
            exe:f64[1,1,36] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 36)
            ] exd
            exf:f64[36,1] = slice[
              limit_indices=(36, 1)
              start_indices=(0, 0)
              strides=None
            ] cms
            exg:f64[36] = squeeze[dimensions=(1,)] exf
            exh:f64[1,36] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 36)
            ] exg
            exi:f64[1,1,36] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 36)
            ] exh
            exj:f64[] = mul cqv 1.0
            exk:f64[1] = slice[
              limit_indices=(1,)
              start_indices=(0,)
              strides=None
            ] cqw
            exl:f64[] = squeeze[dimensions=(0,)] exk
            exm:f64[] exn:bool[] = pjit[name=remainder jaxpr=remainder] 1
            exo:bool[7] = broadcast_in_dim[broadcast_dimensions=() shape=(7,)] False
            exp:bool[7] = broadcast_in_dim[broadcast_dimensions=() shape=(7,)] True
            exq:bool[200,7] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(200, 7)
            ] exo
            exr:bool[200,7] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(200, 7)
            ] exp
            exs:f64[1] = slice[
              limit_indices=(2,)
              start_indices=(1,)
              strides=None
            ] cqw
            ext:f64[] = squeeze[dimensions=(0,)] exs
            exu:f64[] exv:bool[] = pjit[name=remainder jaxpr=remainder] 1
            exw:bool[7] = broadcast_in_dim[broadcast_dimensions=() shape=(7,)] False
            exx:bool[7] = broadcast_in_dim[broadcast_dimensions=() shape=(7,)] True
            exy:bool[200,7] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(200, 7)
            ] exw
            exz:bool[200,7] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(200, 7)
            ] exx
            eya:f64[1] = slice[
              limit_indices=(3,)
              start_indices=(2,)
              strides=None
            ] cqw
            eyb:f64[] = squeeze[dimensions=(0,)] eya
            eyc:f64[] eyd:bool[] = pjit[name=remainder jaxpr=remainder] 1
            eye:bool[7] = broadcast_in_dim[broadcast_dimensions=() shape=(7,)] False
            eyf:bool[7] = broadcast_in_dim[broadcast_dimensions=() shape=(7,)] True
            eyg:bool[200,7] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(200, 7)
            ] eye
            eyh:bool[200,7] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(200, 7)
            ] eyf
            eyi:f64[1] = slice[
              limit_indices=(4,)
              start_indices=(3,)
              strides=None
            ] cqw
            eyj:f64[] = squeeze[dimensions=(0,)] eyi
            eyk:f64[] eyl:bool[] = pjit[name=remainder jaxpr=remainder] 1
            eym:bool[7] = broadcast_in_dim[broadcast_dimensions=() shape=(7,)] False
            eyn:bool[7] = broadcast_in_dim[broadcast_dimensions=() shape=(7,)] True
            eyo:bool[200,7] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(200, 7)
            ] eym
            eyp:bool[200,7] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(200, 7)
            ] eyn
            eyq:f64[8] = broadcast_in_dim[broadcast_dimensions=() shape=(8,)] 0.0
            eyr:f64[1] = slice[
              limit_indices=(1,)
              start_indices=(0,)
              strides=None
            ] cqx
            eys:f64[] = squeeze[dimensions=(0,)] eyr
            eyt:f64[1] = slice[
              limit_indices=(1,)
              start_indices=(0,)
              strides=None
            ] cqy
            eyu:f64[] = squeeze[dimensions=(0,)] eyt
            eyv:f64[] = select_n True eyu eys
            eyw:f64[1] = slice[
              limit_indices=(2,)
              start_indices=(1,)
              strides=None
            ] cqx
            eyx:f64[] = squeeze[dimensions=(0,)] eyw
            eyy:f64[1] = slice[
              limit_indices=(2,)
              start_indices=(1,)
              strides=None
            ] cqz
            eyz:f64[] = squeeze[dimensions=(0,)] eyy
            eza:f64[] = select_n True eyz eyx
            ezb:f64[] = mul 0.0 0.25
            ezc:f64[] = atan2 eza eyv
            ezd:f64[] = add ezc ezb
            eze:f64[] = cos ezd
            ezf:f64[] = convert_element_type[new_dtype=float64 weak_type=False] cra
            ezg:f64[] = mul ezf eze
            ezh:f64[] = sub ezg eyv
            ezi:f64[] = atan2 eza eyv
            ezj:f64[] = add ezi ezb
            ezk:f64[] = sin ezj
            ezl:f64[] = convert_element_type[new_dtype=float64 weak_type=False] cra
            ezm:f64[] = mul ezl ezk
            ezn:f64[] = sub ezm eza
            ezo:f64[2] = slice[
              limit_indices=(2,)
              start_indices=(0,)
              strides=None
            ] eyq
            ezp:f64[1] = slice[
              limit_indices=(1,)
              start_indices=(0,)
              strides=None
            ] ezo
            ezq:f64[] = squeeze[dimensions=(0,)] ezp
            ezr:f64[2] = slice[
              limit_indices=(2,)
              start_indices=(0,)
              strides=None
            ] eyq
            ezs:f64[1] = slice[
              limit_indices=(2,)
              start_indices=(1,)
              strides=None
            ] ezr
            ezt:f64[] = squeeze[dimensions=(0,)] ezs
            ezu:f64[] = mul exj 0.25
            ezv:f64[] = add ezu ezh
            ezw:f64[] = add ezv ezq
            ezx:f64[] = add ezn ezt
            ezy:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] ezw
            ezz:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] ezx
            faa:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0.0
            fab:f64[3] = concatenate[dimension=0] ezy ezz faa
            fac:f64[3] = neg fab
            fad:f64[8] = broadcast_in_dim[broadcast_dimensions=() shape=(8,)] 0.0
            fae:f64[1] = slice[
              limit_indices=(1,)
              start_indices=(0,)
              strides=None
            ] cqx
            faf:f64[] = squeeze[dimensions=(0,)] fae
            fag:f64[1] = slice[
              limit_indices=(1,)
              start_indices=(0,)
              strides=None
            ] cqy
            fah:f64[] = squeeze[dimensions=(0,)] fag
            fai:f64[] = select_n True fah faf
            faj:f64[1] = slice[
              limit_indices=(2,)
              start_indices=(1,)
              strides=None
            ] cqx
            fak:f64[] = squeeze[dimensions=(0,)] faj
            fal:f64[1] = slice[
              limit_indices=(2,)
              start_indices=(1,)
              strides=None
            ] cqz
            fam:f64[] = squeeze[dimensions=(0,)] fal
            fan:f64[] = select_n False fam fak
            fao:f64[] = mul 0.0 0.25
            fap:f64[] = atan2 fan fai
            faq:f64[] = add fap fao
            far:f64[] = cos faq
            fas:f64[] = convert_element_type[new_dtype=float64 weak_type=False] cra
            fat:f64[] = mul fas far
            fau:f64[] = sub fat fai
            fav:f64[] = atan2 fan fai
            faw:f64[] = add fav fao
            fax:f64[] = sin faw
            fay:f64[] = convert_element_type[new_dtype=float64 weak_type=False] cra
            faz:f64[] = mul fay fax
            fba:f64[] = sub faz fan
            fbb:f64[2] = slice[
              limit_indices=(4,)
              start_indices=(2,)
              strides=None
            ] fad
            fbc:f64[1] = slice[
              limit_indices=(1,)
              start_indices=(0,)
              strides=None
            ] fbb
            fbd:f64[] = squeeze[dimensions=(0,)] fbc
            fbe:f64[2] = slice[
              limit_indices=(4,)
              start_indices=(2,)
              strides=None
            ] fad
            fbf:f64[1] = slice[
              limit_indices=(2,)
              start_indices=(1,)
              strides=None
            ] fbe
            fbg:f64[] = squeeze[dimensions=(0,)] fbf
            fbh:f64[] = mul exj 0.25
            fbi:f64[] = add fbh fau
            fbj:f64[] = add fbi fbd
            fbk:f64[] = add fba fbg
            fbl:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] fbj
            fbm:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] fbk
            fbn:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0.0
            fbo:f64[3] = concatenate[dimension=0] fbl fbm fbn
            fbp:f64[3] = neg fbo
            fbq:f64[8] = broadcast_in_dim[broadcast_dimensions=() shape=(8,)] 0.0
            fbr:f64[1] = slice[
              limit_indices=(1,)
              start_indices=(0,)
              strides=None
            ] cqx
            fbs:f64[] = squeeze[dimensions=(0,)] fbr
            fbt:f64[1] = slice[
              limit_indices=(1,)
              start_indices=(0,)
              strides=None
            ] cqy
            fbu:f64[] = squeeze[dimensions=(0,)] fbt
            fbv:f64[] = select_n False fbu fbs
            fbw:f64[1] = slice[
              limit_indices=(2,)
              start_indices=(1,)
              strides=None
            ] cqx
            fbx:f64[] = squeeze[dimensions=(0,)] fbw
            fby:f64[1] = slice[
              limit_indices=(2,)
              start_indices=(1,)
              strides=None
            ] cqz
            fbz:f64[] = squeeze[dimensions=(0,)] fby
            fca:f64[] = select_n True fbz fbx
            fcb:f64[] = mul 0.0 0.25
            fcc:f64[] = atan2 fca fbv
            fcd:f64[] = add fcc fcb
            fce:f64[] = cos fcd
            fcf:f64[] = convert_element_type[new_dtype=float64 weak_type=False] cra
            fcg:f64[] = mul fcf fce
            fch:f64[] = sub fcg fbv
            fci:f64[] = atan2 fca fbv
            fcj:f64[] = add fci fcb
            fck:f64[] = sin fcj
            fcl:f64[] = convert_element_type[new_dtype=float64 weak_type=False] cra
            fcm:f64[] = mul fcl fck
            fcn:f64[] = sub fcm fca
            fco:f64[2] = slice[
              limit_indices=(6,)
              start_indices=(4,)
              strides=None
            ] fbq
            fcp:f64[1] = slice[
              limit_indices=(1,)
              start_indices=(0,)
              strides=None
            ] fco
            fcq:f64[] = squeeze[dimensions=(0,)] fcp
            fcr:f64[2] = slice[
              limit_indices=(6,)
              start_indices=(4,)
              strides=None
            ] fbq
            fcs:f64[1] = slice[
              limit_indices=(2,)
              start_indices=(1,)
              strides=None
            ] fcr
            fct:f64[] = squeeze[dimensions=(0,)] fcs
            fcu:f64[] = mul exj 0.25
            fcv:f64[] = add fcu fch
            fcw:f64[] = add fcv fcq
            fcx:f64[] = add fcn fct
            fcy:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] fcw
            fcz:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] fcx
            fda:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0.0
            fdb:f64[3] = concatenate[dimension=0] fcy fcz fda
            fdc:f64[3] = neg fdb
            fdd:f64[8] = broadcast_in_dim[broadcast_dimensions=() shape=(8,)] 0.0
            fde:f64[1] = slice[
              limit_indices=(1,)
              start_indices=(0,)
              strides=None
            ] cqx
            fdf:f64[] = squeeze[dimensions=(0,)] fde
            fdg:f64[1] = slice[
              limit_indices=(1,)
              start_indices=(0,)
              strides=None
            ] cqy
            fdh:f64[] = squeeze[dimensions=(0,)] fdg
            fdi:f64[] = select_n False fdh fdf
            fdj:f64[1] = slice[
              limit_indices=(2,)
              start_indices=(1,)
              strides=None
            ] cqx
            fdk:f64[] = squeeze[dimensions=(0,)] fdj
            fdl:f64[1] = slice[
              limit_indices=(2,)
              start_indices=(1,)
              strides=None
            ] cqz
            fdm:f64[] = squeeze[dimensions=(0,)] fdl
            fdn:f64[] = select_n False fdm fdk
            fdo:f64[] = mul 0.0 0.25
            fdp:f64[] = atan2 fdn fdi
            fdq:f64[] = add fdp fdo
            fdr:f64[] = cos fdq
            fds:f64[] = convert_element_type[new_dtype=float64 weak_type=False] cra
            fdt:f64[] = mul fds fdr
            fdu:f64[] = sub fdt fdi
            fdv:f64[] = atan2 fdn fdi
            fdw:f64[] = add fdv fdo
            fdx:f64[] = sin fdw
            fdy:f64[] = convert_element_type[new_dtype=float64 weak_type=False] cra
            fdz:f64[] = mul fdy fdx
            fea:f64[] = sub fdz fdn
            feb:f64[2] = slice[
              limit_indices=(8,)
              start_indices=(6,)
              strides=None
            ] fdd
            fec:f64[1] = slice[
              limit_indices=(1,)
              start_indices=(0,)
              strides=None
            ] feb
            fed:f64[] = squeeze[dimensions=(0,)] fec
            fee:f64[2] = slice[
              limit_indices=(8,)
              start_indices=(6,)
              strides=None
            ] fdd
            fef:f64[1] = slice[
              limit_indices=(2,)
              start_indices=(1,)
              strides=None
            ] fee
            feg:f64[] = squeeze[dimensions=(0,)] fef
            feh:f64[] = mul exj 0.25
            fei:f64[] = add feh fdu
            fej:f64[] = add fei fed
            fek:f64[] = add fea feg
            fel:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] fej
            fem:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] fek
            fen:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0.0
            feo:f64[3] = concatenate[dimension=0] fel fem fen
            fep:f64[3] = neg feo
            feq:f64[1] = slice[
              limit_indices=(1,)
              start_indices=(0,)
              strides=None
            ] cqx
            fer:f64[] = squeeze[dimensions=(0,)] feq
            fes:f64[1] = slice[
              limit_indices=(1,)
              start_indices=(0,)
              strides=None
            ] cqy
            fet:f64[] = squeeze[dimensions=(0,)] fes
            feu:f64[] = select_n True fet fer
            fev:f64[1] = slice[
              limit_indices=(2,)
              start_indices=(1,)
              strides=None
            ] cqx
            few:f64[] = squeeze[dimensions=(0,)] fev
            fex:f64[1] = slice[
              limit_indices=(2,)
              start_indices=(1,)
              strides=None
            ] cqz
            fey:f64[] = squeeze[dimensions=(0,)] fex
            fez:f64[] = select_n True fey few
            ffa:f64[] = mul 0.0 0.25
            ffb:f64[] = atan2 fez feu
            ffc:f64[] = add ffb ffa
            ffd:f64[] = cos ffc
            ffe:f64[] = convert_element_type[new_dtype=float64 weak_type=False] cra
            fff:f64[] = mul ffe ffd
            ffg:f64[] = sub fff feu
            ffh:f64[] = atan2 fez feu
            ffi:f64[] = add ffh ffa
            ffj:f64[] = sin ffi
            ffk:f64[] = convert_element_type[new_dtype=float64 weak_type=False] cra
            ffl:f64[] = mul ffk ffj
            ffm:f64[] = sub ffl fez
            ffn:f64[2] = slice[
              limit_indices=(2,)
              start_indices=(0,)
              strides=None
            ] crb
            ffo:f64[1] = slice[
              limit_indices=(1,)
              start_indices=(0,)
              strides=None
            ] ffn
            ffp:f64[] = squeeze[dimensions=(0,)] ffo
            ffq:f64[2] = slice[
              limit_indices=(2,)
              start_indices=(0,)
              strides=None
            ] crb
            ffr:f64[1] = slice[
              limit_indices=(2,)
              start_indices=(1,)
              strides=None
            ] ffq
            ffs:f64[] = squeeze[dimensions=(0,)] ffr
            fft:f64[] = mul exj 0.25
            ffu:f64[] = add fft ffg
            ffv:f64[] = add ffu ffp
            ffw:f64[] = add ffm ffs
            ffx:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] ffv
            ffy:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] ffw
            ffz:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0.0
            fga:f64[3] = concatenate[dimension=0] ffx ffy ffz
            fgb:f64[1] = slice[
              limit_indices=(1,)
              start_indices=(0,)
              strides=None
            ] cqx
            fgc:f64[] = squeeze[dimensions=(0,)] fgb
            fgd:f64[1] = slice[
              limit_indices=(1,)
              start_indices=(0,)
              strides=None
            ] cqy
            fge:f64[] = squeeze[dimensions=(0,)] fgd
            fgf:f64[] = select_n True fge fgc
            fgg:f64[1] = slice[
              limit_indices=(2,)
              start_indices=(1,)
              strides=None
            ] cqx
            fgh:f64[] = squeeze[dimensions=(0,)] fgg
            fgi:f64[1] = slice[
              limit_indices=(2,)
              start_indices=(1,)
              strides=None
            ] cqz
            fgj:f64[] = squeeze[dimensions=(0,)] fgi
            fgk:f64[] = select_n False fgj fgh
            fgl:f64[] = mul 0.0 0.25
            fgm:f64[] = atan2 fgk fgf
            fgn:f64[] = add fgm fgl
            fgo:f64[] = cos fgn
            fgp:f64[] = convert_element_type[new_dtype=float64 weak_type=False] cra
            fgq:f64[] = mul fgp fgo
            fgr:f64[] = sub fgq fgf
            fgs:f64[] = atan2 fgk fgf
            fgt:f64[] = add fgs fgl
            fgu:f64[] = sin fgt
            fgv:f64[] = convert_element_type[new_dtype=float64 weak_type=False] cra
            fgw:f64[] = mul fgv fgu
            fgx:f64[] = sub fgw fgk
            fgy:f64[2] = slice[
              limit_indices=(4,)
              start_indices=(2,)
              strides=None
            ] crb
            fgz:f64[1] = slice[
              limit_indices=(1,)
              start_indices=(0,)
              strides=None
            ] fgy
            fha:f64[] = squeeze[dimensions=(0,)] fgz
            fhb:f64[2] = slice[
              limit_indices=(4,)
              start_indices=(2,)
              strides=None
            ] crb
            fhc:f64[1] = slice[
              limit_indices=(2,)
              start_indices=(1,)
              strides=None
            ] fhb
            fhd:f64[] = squeeze[dimensions=(0,)] fhc
            fhe:f64[] = mul exj 0.25
            fhf:f64[] = add fhe fgr
            fhg:f64[] = add fhf fha
            fhh:f64[] = add fgx fhd
            fhi:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] fhg
            fhj:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] fhh
            fhk:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0.0
            fhl:f64[3] = concatenate[dimension=0] fhi fhj fhk
            fhm:f64[1] = slice[
              limit_indices=(1,)
              start_indices=(0,)
              strides=None
            ] cqx
            fhn:f64[] = squeeze[dimensions=(0,)] fhm
            fho:f64[1] = slice[
              limit_indices=(1,)
              start_indices=(0,)
              strides=None
            ] cqy
            fhp:f64[] = squeeze[dimensions=(0,)] fho
            fhq:f64[] = select_n False fhp fhn
            fhr:f64[1] = slice[
              limit_indices=(2,)
              start_indices=(1,)
              strides=None
            ] cqx
            fhs:f64[] = squeeze[dimensions=(0,)] fhr
            fht:f64[1] = slice[
              limit_indices=(2,)
              start_indices=(1,)
              strides=None
            ] cqz
            fhu:f64[] = squeeze[dimensions=(0,)] fht
            fhv:f64[] = select_n True fhu fhs
            fhw:f64[] = mul 0.0 0.25
            fhx:f64[] = atan2 fhv fhq
            fhy:f64[] = add fhx fhw
            fhz:f64[] = cos fhy
            fia:f64[] = convert_element_type[new_dtype=float64 weak_type=False] cra
            fib:f64[] = mul fia fhz
            fic:f64[] = sub fib fhq
            fid:f64[] = atan2 fhv fhq
            fie:f64[] = add fid fhw
            fif:f64[] = sin fie
            fig:f64[] = convert_element_type[new_dtype=float64 weak_type=False] cra
            fih:f64[] = mul fig fif
            fii:f64[] = sub fih fhv
            fij:f64[2] = slice[
              limit_indices=(6,)
              start_indices=(4,)
              strides=None
            ] crb
            fik:f64[1] = slice[
              limit_indices=(1,)
              start_indices=(0,)
              strides=None
            ] fij
            fil:f64[] = squeeze[dimensions=(0,)] fik
            fim:f64[2] = slice[
              limit_indices=(6,)
              start_indices=(4,)
              strides=None
            ] crb
            fin:f64[1] = slice[
              limit_indices=(2,)
              start_indices=(1,)
              strides=None
            ] fim
            fio:f64[] = squeeze[dimensions=(0,)] fin
            fip:f64[] = mul exj 0.25
            fiq:f64[] = add fip fic
            fir:f64[] = add fiq fil
            fis:f64[] = add fii fio
            fit:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] fir
            fiu:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] fis
            fiv:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0.0
            fiw:f64[3] = concatenate[dimension=0] fit fiu fiv
            fix:f64[1] = slice[
              limit_indices=(1,)
              start_indices=(0,)
              strides=None
            ] cqx
            fiy:f64[] = squeeze[dimensions=(0,)] fix
            fiz:f64[1] = slice[
              limit_indices=(1,)
              start_indices=(0,)
              strides=None
            ] cqy
            fja:f64[] = squeeze[dimensions=(0,)] fiz
            fjb:f64[] = select_n False fja fiy
            fjc:f64[1] = slice[
              limit_indices=(2,)
              start_indices=(1,)
              strides=None
            ] cqx
            fjd:f64[] = squeeze[dimensions=(0,)] fjc
            fje:f64[1] = slice[
              limit_indices=(2,)
              start_indices=(1,)
              strides=None
            ] cqz
            fjf:f64[] = squeeze[dimensions=(0,)] fje
            fjg:f64[] = select_n False fjf fjd
            fjh:f64[] = mul 0.0 0.25
            fji:f64[] = atan2 fjg fjb
            fjj:f64[] = add fji fjh
            fjk:f64[] = cos fjj
            fjl:f64[] = convert_element_type[new_dtype=float64 weak_type=False] cra
            fjm:f64[] = mul fjl fjk
            fjn:f64[] = sub fjm fjb
            fjo:f64[] = atan2 fjg fjb
            fjp:f64[] = add fjo fjh
            fjq:f64[] = sin fjp
            fjr:f64[] = convert_element_type[new_dtype=float64 weak_type=False] cra
            fjs:f64[] = mul fjr fjq
            fjt:f64[] = sub fjs fjg
            fju:f64[2] = slice[
              limit_indices=(8,)
              start_indices=(6,)
              strides=None
            ] crb
            fjv:f64[1] = slice[
              limit_indices=(1,)
              start_indices=(0,)
              strides=None
            ] fju
            fjw:f64[] = squeeze[dimensions=(0,)] fjv
            fjx:f64[2] = slice[
              limit_indices=(8,)
              start_indices=(6,)
              strides=None
            ] crb
            fjy:f64[1] = slice[
              limit_indices=(2,)
              start_indices=(1,)
              strides=None
            ] fjx
            fjz:f64[] = squeeze[dimensions=(0,)] fjy
            fka:f64[] = mul exj 0.25
            fkb:f64[] = add fka fjn
            fkc:f64[] = add fkb fjw
            fkd:f64[] = add fjt fjz
            fke:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] fkc
            fkf:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] fkd
            fkg:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0.0
            fkh:f64[3] = concatenate[dimension=0] fke fkf fkg
            fki:f64[1] = slice[
              limit_indices=(1,)
              start_indices=(0,)
              strides=None
            ] fac
            fkj:f64[] = squeeze[dimensions=(0,)] fki
            fkk:f64[1] = slice[
              limit_indices=(1,)
              start_indices=(0,)
              strides=None
            ] fga
            fkl:f64[] = squeeze[dimensions=(0,)] fkk
            fkm:f64[] = sub fkl fkj
            fkn:f64[] = div fkm 6.283185307179586
            fko:f64[1] = slice[
              limit_indices=(2,)
              start_indices=(1,)
              strides=None
            ] fac
            fkp:f64[] = squeeze[dimensions=(0,)] fko
            fkq:f64[1] = slice[
              limit_indices=(2,)
              start_indices=(1,)
              strides=None
            ] fga
            fkr:f64[] = squeeze[dimensions=(0,)] fkq
            fks:f64[] = sub fkr fkp
            fkt:f64[] = div fks 6.283185307179586
            fku:f64[1] = slice[
              limit_indices=(1,)
              start_indices=(0,)
              strides=None
            ] fbp
            fkv:f64[] = squeeze[dimensions=(0,)] fku
            fkw:f64[1] = slice[
              limit_indices=(1,)
              start_indices=(0,)
              strides=None
            ] fhl
            fkx:f64[] = squeeze[dimensions=(0,)] fkw
            fky:f64[] = sub fkx fkv
            fkz:f64[] = div fky 6.283185307179586
            fla:f64[1] = slice[
              limit_indices=(2,)
              start_indices=(1,)
              strides=None
            ] fbp
            flb:f64[] = squeeze[dimensions=(0,)] fla
            flc:f64[1] = slice[
              limit_indices=(2,)
              start_indices=(1,)
              strides=None
            ] fhl
            fld:f64[] = squeeze[dimensions=(0,)] flc
            fle:f64[] = sub fld flb
            flf:f64[] = div fle 6.283185307179586
            flg:f64[1] = slice[
              limit_indices=(1,)
              start_indices=(0,)
              strides=None
            ] fdc
            flh:f64[] = squeeze[dimensions=(0,)] flg
            fli:f64[1] = slice[
              limit_indices=(1,)
              start_indices=(0,)
              strides=None
            ] fiw
            flj:f64[] = squeeze[dimensions=(0,)] fli
            flk:f64[] = sub flj flh
            fll:f64[] = div flk 6.283185307179586
            flm:f64[1] = slice[
              limit_indices=(2,)
              start_indices=(1,)
              strides=None
            ] fdc
            fln:f64[] = squeeze[dimensions=(0,)] flm
            flo:f64[1] = slice[
              limit_indices=(2,)
              start_indices=(1,)
              strides=None
            ] fiw
            flp:f64[] = squeeze[dimensions=(0,)] flo
            flq:f64[] = sub flp fln
            flr:f64[] = div flq 6.283185307179586
            fls:f64[1] = slice[
              limit_indices=(1,)
              start_indices=(0,)
              strides=None
            ] fep
            flt:f64[] = squeeze[dimensions=(0,)] fls
            flu:f64[1] = slice[
              limit_indices=(1,)
              start_indices=(0,)
              strides=None
            ] fkh
            flv:f64[] = squeeze[dimensions=(0,)] flu
            flw:f64[] = sub flv flt
            flx:f64[] = div flw 6.283185307179586
            fly:f64[1] = slice[
              limit_indices=(2,)
              start_indices=(1,)
              strides=None
            ] fep
            flz:f64[] = squeeze[dimensions=(0,)] fly
            fma:f64[1] = slice[
              limit_indices=(2,)
              start_indices=(1,)
              strides=None
            ] fkh
            fmb:f64[] = squeeze[dimensions=(0,)] fma
            fmc:f64[] = sub fmb flz
            fmd:f64[] = div fmc 6.283185307179586
            fme:f64[1] = slice[
              limit_indices=(1,)
              start_indices=(0,)
              strides=None
            ] fga
            fmf:f64[] = squeeze[dimensions=(0,)] fme
            fmg:f64[1] = slice[
              limit_indices=(1,)
              start_indices=(0,)
              strides=None
            ] fac
            fmh:f64[] = squeeze[dimensions=(0,)] fmg
            fmi:f64[] = sub fmh fmf
            fmj:f64[] = div fmi 6.283185307179586
            fmk:f64[1] = slice[
              limit_indices=(2,)
              start_indices=(1,)
              strides=None
            ] fga
            fml:f64[] = squeeze[dimensions=(0,)] fmk
            fmm:f64[1] = slice[
              limit_indices=(2,)
              start_indices=(1,)
              strides=None
            ] fac
            fmn:f64[] = squeeze[dimensions=(0,)] fmm
            fmo:f64[] = sub fmn fml
            fmp:f64[] = div fmo 6.283185307179586
            fmq:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0.0
            fmr:f64[7,1] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(7, 1)
            ] fmq
            fms:f64[200,7,1] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(200, 7, 1)
            ] fmr
            fmt:f64[1] = slice[
              limit_indices=(1,)
              start_indices=(0,)
              strides=None
            ] fhl
            fmu:f64[] = squeeze[dimensions=(0,)] fmt
            fmv:f64[1] = slice[
              limit_indices=(1,)
              start_indices=(0,)
              strides=None
            ] fbp
            fmw:f64[] = squeeze[dimensions=(0,)] fmv
            fmx:f64[] = sub fmw fmu
            fmy:f64[] = div fmx 6.283185307179586
            fmz:f64[1] = slice[
              limit_indices=(2,)
              start_indices=(1,)
              strides=None
            ] fhl
            fna:f64[] = squeeze[dimensions=(0,)] fmz
            fnb:f64[1] = slice[
              limit_indices=(2,)
              start_indices=(1,)
              strides=None
            ] fbp
            fnc:f64[] = squeeze[dimensions=(0,)] fnb
            fnd:f64[] = sub fnc fna
            fne:f64[] = div fnd 6.283185307179586
            fnf:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0.0
            fng:f64[7,1] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(7, 1)
            ] fnf
            fnh:f64[200,7,1] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(200, 7, 1)
            ] fng
            fni:f64[1] = slice[
              limit_indices=(1,)
              start_indices=(0,)
              strides=None
            ] fiw
            fnj:f64[] = squeeze[dimensions=(0,)] fni
            fnk:f64[1] = slice[
              limit_indices=(1,)
              start_indices=(0,)
              strides=None
            ] fdc
            fnl:f64[] = squeeze[dimensions=(0,)] fnk
            fnm:f64[] = sub fnl fnj
            fnn:f64[] = div fnm 6.283185307179586
            fno:f64[1] = slice[
              limit_indices=(2,)
              start_indices=(1,)
              strides=None
            ] fiw
            fnp:f64[] = squeeze[dimensions=(0,)] fno
            fnq:f64[1] = slice[
              limit_indices=(2,)
              start_indices=(1,)
              strides=None
            ] fdc
            fnr:f64[] = squeeze[dimensions=(0,)] fnq
            fns:f64[] = sub fnr fnp
            fnt:f64[] = div fns 6.283185307179586
            fnu:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0.0
            fnv:f64[7,1] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(7, 1)
            ] fnu
            fnw:f64[200,7,1] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(200, 7, 1)
            ] fnv
            fnx:f64[1] = slice[
              limit_indices=(1,)
              start_indices=(0,)
              strides=None
            ] fkh
            fny:f64[] = squeeze[dimensions=(0,)] fnx
            fnz:f64[1] = slice[
              limit_indices=(1,)
              start_indices=(0,)
              strides=None
            ] fep
            foa:f64[] = squeeze[dimensions=(0,)] fnz
            fob:f64[] = sub foa fny
            foc:f64[] = div fob 6.283185307179586
            fod:f64[1] = slice[
              limit_indices=(2,)
              start_indices=(1,)
              strides=None
            ] fkh
            foe:f64[] = squeeze[dimensions=(0,)] fod
            fof:f64[1] = slice[
              limit_indices=(2,)
              start_indices=(1,)
              strides=None
            ] fep
            fog:f64[] = squeeze[dimensions=(0,)] fof
            foh:f64[] = sub fog foe
            foi:f64[] = div foh 6.283185307179586
            foj:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0.0
            fok:f64[7,1] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(7, 1)
            ] foj
            fol:f64[200,7,1] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(200, 7, 1)
            ] fok
            fom:f64[1,3] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 3)
            ] cqx
            fon:f64[1,1,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 3)
            ] fom
            foo:f64[1,3] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 3)
            ] cqz
            fop:f64[1,1,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 3)
            ] foo
            foq:f64[1,3] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 3)
            ] cqy
            for:f64[1,1,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 3)
            ] foq
            fos:f64[1,3] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 3)
            ] crc
            fot:f64[1,1,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 3)
            ] fos
            fou:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0.0
            fov:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0.0
            fow:f64[7,1] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(7, 1)
            ] fou
            fox:f64[7,1] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(7, 1)
            ] fov
            foy:f64[200,7,1] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(200, 7, 1)
            ] fow
            foz:f64[200,7,1] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(200, 7, 1)
            ] fox
            fpa:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0.0
            fpb:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0.0
            fpc:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0.0
            fpd:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0.0
            fpe:f64[7,1] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(7, 1)
            ] fpa
            fpf:f64[7,1] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(7, 1)
            ] fpb
            fpg:f64[7,1] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(7, 1)
            ] fpc
            fph:f64[7,1] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(7, 1)
            ] fpd
            fpi:f64[200,7,1] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(200, 7, 1)
            ] fpe
            fpj:f64[200,7,1] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(200, 7, 1)
            ] fpf
            fpk:f64[200,7,1] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(200, 7, 1)
            ] fpg
            fpl:f64[200,7,1] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(200, 7, 1)
            ] fph
            fpm:f64[] = select_n False 0.25 -0.25
            fpn:f64[] = select_n True 0.12 -0.12
            fpo:f64[] = convert_element_type[new_dtype=float64 weak_type=False] fpm
            fpp:f64[] = convert_element_type[new_dtype=float64 weak_type=False] fpn
            fpq:f64[] = select_n True 0.083 -0.083
            fpr:f64[] = integer_pow[y=2] fpq
            fps:f64[] = convert_element_type[new_dtype=float64 weak_type=False] fpr
            fpt:f64[] = convert_element_type[new_dtype=float64 weak_type=False] fpq
            fpu:f64[] = convert_element_type[new_dtype=float64 weak_type=False] fpq
            fpv:f64[] = abs 0.0625
            fpw:f64[] = mul 2.0 fpv
            fpx:f64[] = convert_element_type[new_dtype=float64 weak_type=False] fpw
            fpy:f64[1] = slice[
              limit_indices=(3,)
              start_indices=(2,)
              strides=None
            ] crd
            fpz:f64[] = squeeze[dimensions=(0,)] fpy
            fqa:f64[1] = slice[
              limit_indices=(3,)
              start_indices=(2,)
              strides=None
            ] cre
            fqb:f64[] = squeeze[dimensions=(0,)] fqa
            fqc:f64[] = add 3.141592653589793 fpz
            fqd:f64[] = cos fqc
            fqe:f64[] = add 3.141592653589793 fqb
            fqf:f64[] = cos fqe
            fqg:f64[200,7] fqh:f64[200,7] fqi:f64[200,7] fqj:f64[200,7] fqk:f64[200,7]
              fql:f64[200,7] fqm:f64[200,7] fqn:f64[200,7] = pjit[
              name=clip
              jaxpr=clip
            ]
            fqo:f64[] = select_n False 0.25 -0.25
            fqp:f64[] = select_n False 0.12 -0.12
            fqq:f64[] = convert_element_type[new_dtype=float64 weak_type=False] fqo
            fqr:f64[] = convert_element_type[new_dtype=float64 weak_type=False] fqp
            fqs:f64[] = select_n False 0.083 -0.083
            fqt:f64[] = integer_pow[y=2] fqs
            fqu:f64[] = convert_element_type[new_dtype=float64 weak_type=False] fqt
            fqv:f64[] = convert_element_type[new_dtype=float64 weak_type=False] fqs
            fqw:f64[] = convert_element_type[new_dtype=float64 weak_type=False] fqs
            fqx:f64[] = abs 0.0625
            fqy:f64[] = mul 2.0 fqx
            fqz:f64[] = convert_element_type[new_dtype=float64 weak_type=False] fqy
            fra:f64[1] = slice[
              limit_indices=(3,)
              start_indices=(2,)
              strides=None
            ] crd
            frb:f64[] = squeeze[dimensions=(0,)] fra
            frc:f64[1] = slice[
              limit_indices=(3,)
              start_indices=(2,)
              strides=None
            ] cre
            frd:f64[] = squeeze[dimensions=(0,)] frc
            fre:f64[] = add 3.141592653589793 frb
            frf:f64[] = cos fre
            frg:f64[] = add 3.141592653589793 frd
            frh:f64[] = cos frg
            fri:f64[200,7] frj:f64[200,7] frk:f64[200,7] frl:f64[200,7] frm:f64[200,7]
              frn:f64[200,7] fro:f64[200,7] frp:f64[200,7] = pjit[
              name=clip
              jaxpr=clip
            ]
            frq:f64[] = select_n True 0.25 -0.25
            frr:f64[] = select_n True 0.12 -0.12
            frs:f64[] = convert_element_type[new_dtype=float64 weak_type=False] frq
            frt:f64[] = convert_element_type[new_dtype=float64 weak_type=False] frr
            fru:f64[] = select_n True 0.083 -0.083
            frv:f64[] = integer_pow[y=2] fru
            frw:f64[] = convert_element_type[new_dtype=float64 weak_type=False] frv
            frx:f64[] = convert_element_type[new_dtype=float64 weak_type=False] fru
            fry:f64[] = convert_element_type[new_dtype=float64 weak_type=False] fru
            frz:f64[] = abs 0.0625
            fsa:f64[] = mul 2.0 frz
            fsb:f64[] = convert_element_type[new_dtype=float64 weak_type=False] fsa
            fsc:f64[1] = slice[
              limit_indices=(3,)
              start_indices=(2,)
              strides=None
            ] crd
            fsd:f64[] = squeeze[dimensions=(0,)] fsc
            fse:f64[1] = slice[
              limit_indices=(3,)
              start_indices=(2,)
              strides=None
            ] cre
            fsf:f64[] = squeeze[dimensions=(0,)] fse
            fsg:f64[] = add 3.141592653589793 fsd
            fsh:f64[] = cos fsg
            fsi:f64[] = add 3.141592653589793 fsf
            fsj:f64[] = cos fsi
            fsk:f64[200,7] fsl:f64[200,7] fsm:f64[200,7] fsn:f64[200,7] fso:f64[200,7]
              fsp:f64[200,7] fsq:f64[200,7] fsr:f64[200,7] = pjit[
              name=clip
              jaxpr=clip
            ]
            fss:f64[] = select_n True 0.25 -0.25
            fst:f64[] = select_n False 0.12 -0.12
            fsu:f64[] = convert_element_type[new_dtype=float64 weak_type=False] fss
            fsv:f64[] = convert_element_type[new_dtype=float64 weak_type=False] fst
            fsw:f64[] = select_n False 0.083 -0.083
            fsx:f64[] = integer_pow[y=2] fsw
            fsy:f64[] = convert_element_type[new_dtype=float64 weak_type=False] fsx
            fsz:f64[] = convert_element_type[new_dtype=float64 weak_type=False] fsw
            fta:f64[] = convert_element_type[new_dtype=float64 weak_type=False] fsw
            ftb:f64[] = abs 0.0625
            ftc:f64[] = mul 2.0 ftb
            ftd:f64[] = convert_element_type[new_dtype=float64 weak_type=False] ftc
            fte:f64[1] = slice[
              limit_indices=(3,)
              start_indices=(2,)
              strides=None
            ] crd
            ftf:f64[] = squeeze[dimensions=(0,)] fte
            ftg:f64[1] = slice[
              limit_indices=(3,)
              start_indices=(2,)
              strides=None
            ] cre
            fth:f64[] = squeeze[dimensions=(0,)] ftg
            fti:f64[] = add 3.141592653589793 ftf
            ftj:f64[] = cos fti
            ftk:f64[] = add 3.141592653589793 fth
            ftl:f64[] = cos ftk
            ftm:f64[200,7] ftn:f64[200,7] fto:f64[200,7] ftp:f64[200,7] ftq:f64[200,7]
              ftr:f64[200,7] fts:f64[200,7] ftt:f64[200,7] = pjit[
              name=clip
              jaxpr=clip
            ]
            ftu:f64[1,3] = reshape[dimensions=None new_sizes=(1, 3)] cre
            ftv:f64[3] = squeeze[dimensions=(0,)] ftu
            ftw:f64[4,3] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(4, 3)
            ] ftv
            ftx:f64[12] = reshape[dimensions=None new_sizes=(12,)] ftw
            fty:f64[1,3] = reshape[dimensions=None new_sizes=(1, 3)] crd
            ftz:f64[3] = squeeze[dimensions=(0,)] fty
            fua:f64[4,3] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(4, 3)
            ] ftz
            fub:f64[12] = reshape[dimensions=None new_sizes=(12,)] fua
            fuc:f64[1,1,12] fud:f64[200,7,12] fue:f64[200,7,12] fuf:f64[200,7,12]
              fug:f64[200,7,12] fuh:f64[1,1,12] fui:f64[200,7,12] fuj:f64[200,7,12]
              fuk:f64[200,7,12] ful:f64[200,7,12] = pjit[name=clip jaxpr=clip1] ftx
              fub
            fum:f64[12] = broadcast_in_dim[broadcast_dimensions=() shape=(12,)] 0.0
            fun:i64[1,3] = reshape[dimensions=None new_sizes=(1, 3)] crf
            fuo:i64[3] = squeeze[dimensions=(0,)] fun
            fup:i64[4,3] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(4, 3)
            ] fuo
            fuq:i64[12] = reshape[dimensions=None new_sizes=(12,)] fup
            fur:f64[12] = convert_element_type[new_dtype=float64 weak_type=True] fuq
            fus:f64[12] = mul fur 1.4
            fut:f64[1,3] = reshape[dimensions=None new_sizes=(1, 3)] crg
            fuu:f64[3] = squeeze[dimensions=(0,)] fut
            fuv:f64[4,3] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(4, 3)
            ] fuu
            fuw:f64[12] = reshape[dimensions=None new_sizes=(12,)] fuv
            fux:f64[1,1,12] fuy:f64[1,1,12] fuz:f64[200,7,12] fva:f64[200,7,12] fvb:bool[200,7,12]
              fvc:f64[200,7,12] fvd:f64[200,7,12] fve:f64[200,7,12] fvf:f64[200,7,12]
              fvg:bool[200,7,12] fvh:bool[200,7,12] fvi:f64[1,1,12] fvj:f64[1,1,12]
              fvk:f64[1,1,12] fvl:f64[1,1,12] fvm:f64[1,1,12] fvn:f64[1,1,12] fvo:f64[1,1,12]
              fvp:f64[1,1,12] fvq:f64[1,1,12] fvr:f64[1,1,12] fvs:f64[1,1,12] = cond[
              branches=(
                { lambda ; fvt:f64[12] fvu:f64[12] fvv:f64[12] fvw:f64[12] fvx:f64[12]. let
                    fvy:f64[7,12] = broadcast_in_dim[
                      broadcast_dimensions=(1,)
                      shape=(7, 12)
                    ] fvu
                    fvz:f64[200,7,12] = broadcast_in_dim[
                      broadcast_dimensions=(1, 2)
                      shape=(200, 7, 12)
                    ] fvy
                    fwa:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(1, 1, 12)
                    ] 0.0
                    fwb:f64[200,7,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(200, 7, 12)
                    ] 0.0
                    fwc:bool[200,7,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(200, 7, 12)
                    ] False
                    fwd:f64[200,7,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(200, 7, 12)
                    ] 0.0
                    fwe:f64[200,7,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(200, 7, 12)
                    ] 0.0
                    fwf:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(1, 1, 12)
                    ] 0.0
                    fwg:f64[200,7,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(200, 7, 12)
                    ] 0.0
                    fwh:f64[200,7,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(200, 7, 12)
                    ] 0.0
                    fwi:bool[200,7,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(200, 7, 12)
                    ] False
                    fwj:bool[200,7,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(200, 7, 12)
                    ] False
                    fwk:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(1, 1, 12)
                    ] 0.0
                    fwl:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(1, 1, 12)
                    ] 0.0
                    fwm:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(1, 1, 12)
                    ] 0.0
                    fwn:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(1, 1, 12)
                    ] 0.0
                    fwo:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(1, 1, 12)
                    ] 0.0
                    fwp:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(1, 1, 12)
                    ] 0.0
                    fwq:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(1, 1, 12)
                    ] 0.0
                    fwr:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(1, 1, 12)
                    ] 0.0
                    fws:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(1, 1, 12)
                    ] 0.0
                    fwt:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(1, 1, 12)
                    ] 0.0
                    fwu:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(1, 1, 12)
                    ] 0.0
                  in (fwa, fwf, fvz, fwb, fwc, fwd, fwe, fwg, fwh, fwi, fwj, fwk,
                    fwl, fwm, fwn, fwo, fwp, fwq, fwr, fws, fwt, fwu) }
                { lambda ; fwv:f64[12] fww:f64[12] fwx:f64[12] fwy:f64[12] fwz:f64[12]. let
                    fxa:f64[12] = convert_element_type[
                      new_dtype=float64
                      weak_type=False
                    ] fwy
                    fxb:f64[1,12] = broadcast_in_dim[
                      broadcast_dimensions=(1,)
                      shape=(1, 12)
                    ] fxa
                    fxc:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=(1, 2)
                      shape=(1, 1, 12)
                    ] fxb
                    fxd:f64[1,12] = broadcast_in_dim[
                      broadcast_dimensions=(1,)
                      shape=(1, 12)
                    ] fwx
                    fxe:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=(1, 2)
                      shape=(1, 1, 12)
                    ] fxd
                    fxf:f64[1,12] = broadcast_in_dim[
                      broadcast_dimensions=(1,)
                      shape=(1, 12)
                    ] fwz
                    fxg:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=(1, 2)
                      shape=(1, 1, 12)
                    ] fxf
                    fxh:f64[200,7,12] = pjit[
                      name=_where
                      jaxpr={ lambda ; fxi:i64[]. let
                          fxj:f64[] = convert_element_type[
                            new_dtype=float64
                            weak_type=False
                          ] fxi
                          fxk:f64[12] = broadcast_in_dim[
                            broadcast_dimensions=()
                            shape=(12,)
                          ] fxj
                          fxl:f64[7,12] = broadcast_in_dim[
                            broadcast_dimensions=(1,)
                            shape=(7, 12)
                          ] fxk
                          fxm:f64[200,7,12] = broadcast_in_dim[
                            broadcast_dimensions=(1, 2)
                            shape=(200, 7, 12)
                          ] fxl
                        in (fxm,) }
                    ] 1
                    fxn:f64[1,12] = broadcast_in_dim[
                      broadcast_dimensions=(1,)
                      shape=(1, 12)
                    ] fwv
                    fxo:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=(1, 2)
                      shape=(1, 1, 12)
                    ] fxn
                    fxp:f64[1,12] = broadcast_in_dim[
                      broadcast_dimensions=(1,)
                      shape=(1, 12)
                    ] fwx
                    fxq:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=(1, 2)
                      shape=(1, 1, 12)
                    ] fxp
                    fxr:f64[1,12] = broadcast_in_dim[
                      broadcast_dimensions=(1,)
                      shape=(1, 12)
                    ] fwz
                    fxs:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=(1, 2)
                      shape=(1, 1, 12)
                    ] fxr
                    fxt:f64[1,12] = broadcast_in_dim[
                      broadcast_dimensions=(1,)
                      shape=(1, 12)
                    ] fwv
                    fxu:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=(1, 2)
                      shape=(1, 1, 12)
                    ] fxt
                    fxv:f64[200,7,12] = pjit[
                      name=_where
                      jaxpr={ lambda ; fxw:f64[12]. let
                          fxx:f64[12] = convert_element_type[
                            new_dtype=float64
                            weak_type=False
                          ] fxw
                          fxy:f64[7,12] = broadcast_in_dim[
                            broadcast_dimensions=(1,)
                            shape=(7, 12)
                          ] fxx
                          fxz:f64[200,7,12] = broadcast_in_dim[
                            broadcast_dimensions=(1, 2)
                            shape=(200, 7, 12)
                          ] fxy
                        in (fxz,) }
                    ] fwy
                    fya:f64[12] = neg fwv
                    fyb:f64[1,12] = broadcast_in_dim[
                      broadcast_dimensions=(1,)
                      shape=(1, 12)
                    ] fya
                    fyc:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=(1, 2)
                      shape=(1, 1, 12)
                    ] fyb
                    fyd:f64[12] = neg fwv
                    fye:f64[1,12] = broadcast_in_dim[
                      broadcast_dimensions=(1,)
                      shape=(1, 12)
                    ] fwx
                    fyf:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=(1, 2)
                      shape=(1, 1, 12)
                    ] fye
                    fyg:f64[1,12] = broadcast_in_dim[
                      broadcast_dimensions=(1,)
                      shape=(1, 12)
                    ] fwz
                    fyh:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=(1, 2)
                      shape=(1, 1, 12)
                    ] fyg
                    fyi:f64[1,12] = broadcast_in_dim[
                      broadcast_dimensions=(1,)
                      shape=(1, 12)
                    ] fyd
                    fyj:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=(1, 2)
                      shape=(1, 1, 12)
                    ] fyi
                    fyk:f64[200,7,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(200, 7, 12)
                    ] 0.0
                    fyl:bool[200,7,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(200, 7, 12)
                    ] False
                    fym:f64[200,7,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(200, 7, 12)
                    ] 0.0
                    fyn:f64[200,7,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(200, 7, 12)
                    ] 0.0
                    fyo:f64[200,7,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(200, 7, 12)
                    ] 0.0
                    fyp:bool[200,7,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(200, 7, 12)
                    ] False
                    fyq:bool[200,7,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(200, 7, 12)
                    ] False
                  in (fyh, fxs, fyk, fxh, fyl, fxv, fym, fyn, fyo, fyp, fyq, fxc,
                    fxg, fxe, fyc, fyj, fyh, fyf, fxo, fxu, fxs, fxq) }
              )
              linear=(False, False, False, False, False)
            ] 1 crh fus fum fus fuw
            fyr:f64[1,12] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 12)
            ] fum
            fys:f64[1,1,12] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 12)
            ] fyr
            fyt:f64[1,12] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 12)
            ] fuw
            fyu:f64[1,1,12] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 12)
            ] fyt
            fyv:bool[12] = lt cri 0
            fyw:i32[12] = add cri 19
            fyx:i32[12] = select_n fyv cri fyw
            fyy:i32[12,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(12, 1)
            ] fyx
            fyz:bool[12] = lt crj 0
            fza:i32[12] = add crj 18
            fzb:i32[12] = select_n fyz crj fza
            fzc:i32[12,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(12, 1)
            ] fzb
            fzd:f64[12,1] = slice[
              limit_indices=(12, 1)
              start_indices=(0, 0)
              strides=None
            ] crk
            fze:f64[12] = squeeze[dimensions=(1,)] fzd
            fzf:f64[12,1] = slice[
              limit_indices=(12, 2)
              start_indices=(0, 1)
              strides=None
            ] crk
            fzg:f64[12] = squeeze[dimensions=(1,)] fzf
            fzh:f64[1,1,12] fzi:f64[200,7,12] fzj:f64[200,7,12] fzk:f64[200,7,12]
              fzl:f64[200,7,12] fzm:f64[1,1,12] fzn:f64[200,7,12] fzo:f64[200,7,12]
              fzp:f64[200,7,12] fzq:f64[200,7,12] = pjit[name=clip jaxpr=clip1] fze
              fzg
            fzr:f64[1,12] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 12)
            ] crl
            fzs:f64[1,1,12] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 12)
            ] fzr
            fzt:f64[1,12] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 12)
            ] crm
            fzu:f64[1,1,12] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 12)
            ] fzt
            fzv:f64[1,12] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 12)
            ] crn
            fzw:f64[1,1,12] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 12)
            ] fzv
            fzx:f64[1,12] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 12)
            ] cro
            fzy:f64[1,1,12] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 12)
            ] fzx
            fzz:f64[12,1] = slice[
              limit_indices=(12, 1)
              start_indices=(0, 0)
              strides=None
            ] crp
            gaa:f64[12] = squeeze[dimensions=(1,)] fzz
            gab:f64[12,1] = slice[
              limit_indices=(12, 2)
              start_indices=(0, 1)
              strides=None
            ] crp
            gac:f64[12] = squeeze[dimensions=(1,)] gab
            gad:f64[1,1,12] gae:f64[200,7,12] gaf:f64[200,7,12] gag:f64[200,7,12]
              gah:f64[200,7,12] gai:f64[1,1,12] gaj:f64[200,7,12] gak:f64[200,7,12]
              gal:f64[200,7,12] gam:f64[200,7,12] = pjit[name=clip jaxpr=clip1] gaa
              gac
            gan:f64[1,12] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 12)
            ] crn
            gao:f64[1,1,12] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 12)
            ] gan
            gap:f64[18] = broadcast_in_dim[broadcast_dimensions=() shape=(18,)] 0.0
            gaq:bool[12] = lt crj 0
            gar:i32[12] = add crj 18
            gas:i32[12] = select_n gaq crj gar
            gat:i32[12,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(12, 1)
            ] gas
            gau:f64[7,18] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(7, 18)
            ] gap
            gav:f64[200,7,18] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(200, 7, 18)
            ] gau
            gaw:f64[18,18] = pjit[
              name=_diag
              jaxpr={ lambda ; ens:f64[18]. let
                  ent:f64[18] = pad[padding_config=((0, 0, 0),)] ens 0.0
                  enu:i64[18,18] = iota[dimension=0 dtype=int64 shape=(18, 18)]
                  env:i64[18,18] = iota[dimension=1 dtype=int64 shape=(18, 18)]
                  enw:i64[18,18] = add enu 0
                  enx:bool[18,18] = eq enw env
                  eny:f64[18] = broadcast_in_dim[
                    broadcast_dimensions=()
                    shape=(18,)
                  ] 0.0
                  enz:f64[18,18] = pjit[name=_where jaxpr=_where] enx ent eny
                in (enz,) }
            ] cpp
            gax:f64[18,18] = mul gaw 0.0025
            gay:f64[1,18,18] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 18, 18)
            ] gax
            gaz:f64[1,1,18,18] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(1, 1, 18, 18)
            ] gay
            gba:i64[18,18] = iota[dimension=0 dtype=int64 shape=(18, 18)]
            gbb:i64[18,18] = iota[dimension=1 dtype=int64 shape=(18, 18)]
            gbc:i64[18,18] = add gba 0
            gbd:bool[18,18] = eq gbc gbb
            gbe:f64[18,18] = convert_element_type[
              new_dtype=float64
              weak_type=False
            ] gbd
            gbf:bool[200,7,18,18] gbg:f64[200,7,18,18] gbh:bool[200,7,18,18] gbi:f64[200,7,18,18]
              gbj:bool[200,7,18,18] gbk:f64[200,7,18,18] gbl:f64[200,7,18,18] = pjit[
              name=_solve
              jaxpr={ lambda ; gbm:f64[18,18]. let
                  gbn:bool[200,7,18,18] gbo:f64[200,7,18,18] gbp:bool[200,7,18,18]
                    gbq:f64[200,7,18,18] gbr:bool[200,7,18,18] gbs:f64[200,7,18,18] = pjit[
                    name=_cholesky
                    jaxpr=_cholesky
                  ]
                  gbt:f64[18,18] = transpose[permutation=(1, 0)] gbm
                  gbu:f64[7,18,18] = broadcast_in_dim[
                    broadcast_dimensions=(1, 2)
                    shape=(7, 18, 18)
                  ] gbt
                  gbv:f64[200,7,18,18] = broadcast_in_dim[
                    broadcast_dimensions=(1, 2, 3)
                    shape=(200, 7, 18, 18)
                  ] gbu
                in (gbn, gbo, gbp, gbq, gbr, gbs, gbv) }
            ] gbe
            gbw:f64[200,7,12] gbx:f64[200,7,12] gby:bool[200,7,12] gbz:f64[200,7,12]
              gca:f64[200,7,12] gcb:f64[200,7,12] gcc:f64[200,7,12] gcd:bool[200,7,12]
              gce:bool[200,7,12] gcf:f64[1,1,12] gcg:f64[1,1,12] gch:f64[1,1,12]
              gci:f64[1,1,12] gcj:f64[1,1,12] gck:f64[1,1,12] gcl:f64[1,1,12] gcm:f64[1,1,12]
              gcn:f64[1,1,12] gco:f64[1,1,12] gcp:f64[1,1,12] = cond[
              branches=(
                { lambda ; gcq:f64[200,7,12] gcr:f64[200,7,12] gcs:bool[200,7,12]
                    gct:f64[200,7,12] gcu:f64[200,7,12] gcv:f64[200,7,12] gcw:f64[200,7,12]
                    gcx:bool[200,7,12] gcy:bool[200,7,12] gcz:f64[1,1,12] gda:f64[1,1,12]
                    gdb:f64[1,1,12] gdc:f64[1,1,12] gdd:f64[1,1,12] gde:f64[1,1,12]
                    gdf:f64[1,1,12] gdg:f64[1,1,12] gdh:f64[1,1,12] gdi:f64[1,1,12]
                    gdj:f64[1,1,12]. let
                    gdk:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(1, 1, 12)
                    ] 0.0
                    gdl:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(1, 1, 12)
                    ] 0.0
                    gdm:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(1, 1, 12)
                    ] 0.0
                    gdn:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(1, 1, 12)
                    ] 0.0
                    gdo:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(1, 1, 12)
                    ] 0.0
                    gdp:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(1, 1, 12)
                    ] 0.0
                    gdq:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(1, 1, 12)
                    ] 0.0
                    gdr:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(1, 1, 12)
                    ] 0.0
                    gds:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(1, 1, 12)
                    ] 0.0
                    gdt:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(1, 1, 12)
                    ] 0.0
                    gdu:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(1, 1, 12)
                    ] 0.0
                  in (gcq, gcr, gcs, gct, gcu, gcv, gcw, gcx, gcy, gdk, gdl, gdm,
                    gdn, gdo, gdp, gdq, gdr, gds, gdt, gdu) }
                { lambda ; gdv:f64[200,7,12] gdw:f64[200,7,12] gdx:bool[200,7,12]
                    gdy:f64[200,7,12] gdz:f64[200,7,12] gea:f64[200,7,12] geb:f64[200,7,12]
                    gec:bool[200,7,12] ged:bool[200,7,12] gee:f64[1,1,12] gef:f64[1,1,12]
                    geg:f64[1,1,12] geh:f64[1,1,12] gei:f64[1,1,12] gej:f64[1,1,12]
                    gek:f64[1,1,12] gel:f64[1,1,12] gem:f64[1,1,12] gen:f64[1,1,12]
                    geo:f64[1,1,12]. let
                    gep:f64[200,7,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(200, 7, 12)
                    ] 0.0
                    geq:bool[200,7,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(200, 7, 12)
                    ] False
                    ger:f64[200,7,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(200, 7, 12)
                    ] 0.0
                    ges:f64[200,7,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(200, 7, 12)
                    ] 0.0
                    get:f64[200,7,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(200, 7, 12)
                    ] 0.0
                    geu:bool[200,7,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(200, 7, 12)
                    ] False
                    gev:bool[200,7,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(200, 7, 12)
                    ] False
                  in (gep, gdw, geq, gdy, ger, ges, get, geu, gev, gee, gef, geg,
                    geh, gei, gej, gek, gel, gem, gen, geo) }
              )
              linear=(False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False)
            ] 1 fuz fva fvb fvc fvd fve fvf fvg fvh fvi fvj fvk fvl fvm fvn fvo fvp
              fvq fvr fvs
            gew:f64[4] = convert_element_type[new_dtype=float64 weak_type=False] crr
            gex:f64[1,4] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 4)
            ] gew
            gey:f64[1,1,4] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 4)
            ] gex
            gez:i32[1] gfa:i32[1] gfb:i32[1] gfc:i32[1] gfd:i32[1] gfe:i32[1] = pjit[
              name=cross
              jaxpr=cross
            ]
            gff:i32[1] gfg:i32[1] gfh:i32[1] gfi:i32[1] gfj:i32[1] gfk:i32[1] = pjit[
              name=cross
              jaxpr=cross
            ]
            gfl:f64[36,1] = slice[
              limit_indices=(36, 1)
              start_indices=(0, 0)
              strides=None
            ] cms
            gfm:f64[36] = squeeze[dimensions=(1,)] gfl
            gfn:f64[1,36] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 36)
            ] gfm
            gfo:f64[1,1,36] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 36)
            ] gfn
            gfp:f64[36,1] = slice[
              limit_indices=(36, 2)
              start_indices=(0, 1)
              strides=None
            ] cms
            gfq:f64[36] = squeeze[dimensions=(1,)] gfp
            gfr:f64[36,1] = slice[
              limit_indices=(36, 1)
              start_indices=(0, 0)
              strides=None
            ] cms
            gfs:f64[36] = squeeze[dimensions=(1,)] gfr
            gft:f64[36] = sub gfq gfs
            gfu:f64[1,36] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 36)
            ] gft
            gfv:f64[1,1,36] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 36)
            ] gfu
            gfw:f64[200,7,12] gfx:f64[200,7,12] gfy:bool[200,7,12] gfz:f64[200,7,12]
              gga:f64[200,7,12] ggb:f64[200,7,12] ggc:f64[200,7,12] ggd:bool[200,7,12]
              gge:bool[200,7,12] ggf:f64[1,1,12] ggg:f64[1,1,12] ggh:f64[1,1,12]
              ggi:f64[1,1,12] ggj:f64[1,1,12] ggk:f64[1,1,12] ggl:f64[1,1,12] ggm:f64[1,1,12]
              ggn:f64[1,1,12] ggo:f64[1,1,12] ggp:f64[1,1,12] = cond[
              branches=(
                { lambda ; ggq:f64[200,7,12] ggr:f64[200,7,12] ggs:bool[200,7,12]
                    ggt:f64[200,7,12] ggu:f64[200,7,12] ggv:f64[200,7,12] ggw:f64[200,7,12]
                    ggx:bool[200,7,12] ggy:bool[200,7,12] ggz:f64[1,1,12] gha:f64[1,1,12]
                    ghb:f64[1,1,12] ghc:f64[1,1,12] ghd:f64[1,1,12] ghe:f64[1,1,12]
                    ghf:f64[1,1,12] ghg:f64[1,1,12] ghh:f64[1,1,12] ghi:f64[1,1,12]
                    ghj:f64[1,1,12]. let
                    ghk:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(1, 1, 12)
                    ] 0.0
                    ghl:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(1, 1, 12)
                    ] 0.0
                    ghm:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(1, 1, 12)
                    ] 0.0
                    ghn:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(1, 1, 12)
                    ] 0.0
                    gho:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(1, 1, 12)
                    ] 0.0
                    ghp:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(1, 1, 12)
                    ] 0.0
                    ghq:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(1, 1, 12)
                    ] 0.0
                    ghr:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(1, 1, 12)
                    ] 0.0
                    ghs:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(1, 1, 12)
                    ] 0.0
                    ght:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(1, 1, 12)
                    ] 0.0
                    ghu:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(1, 1, 12)
                    ] 0.0
                  in (ggq, ggr, ggs, ggt, ggu, ggv, ggw, ggx, ggy, ghk, ghl, ghm,
                    ghn, gho, ghp, ghq, ghr, ghs, ght, ghu) }
                { lambda ; ghv:f64[200,7,12] ghw:f64[200,7,12] ghx:bool[200,7,12]
                    ghy:f64[200,7,12] ghz:f64[200,7,12] gia:f64[200,7,12] gib:f64[200,7,12]
                    gic:bool[200,7,12] gid:bool[200,7,12] gie:f64[1,1,12] gif:f64[1,1,12]
                    gig:f64[1,1,12] gih:f64[1,1,12] gii:f64[1,1,12] gij:f64[1,1,12]
                    gik:f64[1,1,12] gil:f64[1,1,12] gim:f64[1,1,12] gin:f64[1,1,12]
                    gio:f64[1,1,12]. let
                    gip:f64[200,7,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(200, 7, 12)
                    ] 0.0
                    giq:bool[200,7,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(200, 7, 12)
                    ] False
                    gir:f64[200,7,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(200, 7, 12)
                    ] 0.0
                    gis:f64[200,7,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(200, 7, 12)
                    ] 0.0
                    git:f64[200,7,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(200, 7, 12)
                    ] 0.0
                    giu:bool[200,7,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(200, 7, 12)
                    ] False
                    giv:bool[200,7,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(200, 7, 12)
                    ] False
                  in (gip, ghw, giq, ghy, gir, gis, git, giu, giv, gie, gif, gig,
                    gih, gii, gij, gik, gil, gim, gin, gio) }
              )
              linear=(False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False)
            ] 1 gbw gbx gby gbz gca gcb gcc gcd gce gcf gcg gch gci gcj gck gcl gcm
              gcn gco gcp
            _:f64[200,7,180] giw:f64[4,200,7,36] gix:f64[4,200,7,36] giy:f64[4,200,7,189]
              giz:f64[4,200,7,400] gja:f64[4,200,7,400] gjb:f64[4,200,7,400] gjc:f64[4,200,7,400]
              gjd:f64[4,200,7,400] gje:f64[4,200,7,400] gjf:f64[4,200,7,400] gjg:f64[4,200,7,400]
              gjh:f64[4,200,7,400] gji:f64[4,200,7,400] gjj:f64[4,200,7,400] gjk:f64[4,200,7,400]
              gjl:f64[4,200,7,400] gjm:f64[4,200,7,400] gjn:f64[4,200,7,400] gjo:f64[4,200,7,400]
              gjp:f64[4,1,200,7,3] gjq:f64[4,1,200,7,3] gjr:f64[4,1,200,7,1] gjs:f64[4,1,200,7]
              gjt:f64[4,1,200,7,1] gju:f64[4,1,200,7,3] gjv:f64[4,1,200,7,1] gjw:f64[4,1,200,7]
              gjx:f64[4,1,200,7] gjy:f64[4,1,200,7] gjz:f64[4,1,200,7] gka:f64[4,1,200,7]
              gkb:f64[4,1,200,7] gkc:f64[4,1,200,7,3] gkd:f64[4,1,200,7,3] gke:f64[4,1,200,7,1]
              gkf:f64[4,1,200,7] gkg:f64[4,1,200,7,1] gkh:f64[4,1,200,7,3] gki:f64[4,1,200,7,1]
              gkj:f64[4,1,200,7] gkk:f64[4,1,200,7] gkl:f64[4,1,200,7] gkm:f64[4,1,200,7]
              gkn:f64[4,1,200,7] gko:f64[4,1,200,7] gkp:f64[4,1,200,7,12] gkq:f64[4,1,200,7,12]
              gkr:f64[4,1,200,7,12] gks:f64[4,1,200,7,12] gkt:f64[4,1,200,7,12,1]
              gku:bool[4,1,200,7,12,4] gkv:f64[4,1,200,7,12,4] gkw:f64[4,1,200,7,12]
              gkx:bool[4,1,200,7,12] gky:f64[4,1,200,7,12,4] gkz:f64[4,1,200,7,12,1]
              gla:f64[4,1,200,7,13,3] glb:f64[4,1,200,7,13,1] glc:f64[4,1,200,7,13]
              gld:f64[4,1,200,7,13,3] gle:f64[4,1,200,7,13,1] glf:f64[4,1,200,7,4,3]
              glg:f64[4,1,200,7,4,3] glh:f64[4,1,200,7,4,1] gli:f64[4,1,200,7,4]
              glj:f64[4,1,200,7,4,1] glk:f64[4,1,200,7,4,3] gll:f64[4,1,200,7,4,1]
              glm:f64[4,1,200,7,4] gln:f64[4,1,200,7,4] glo:f64[4,1,200,7,4] glp:f64[4,1,200,7,4]
              glq:f64[4,1,200,7,4] glr:f64[4,1,200,7,4] gls:f64[4,1,200,7,4] glt:f64[4,1,200,7,4]
              glu:f64[4,1,200,7,4] glv:f64[4,1,200,7,4] glw:f64[4,1,200,7,4] glx:f64[4,1,200,7,4]
              gly:f64[4,1,200,7,4] glz:f64[4,1,200,7,4] gma:f64[4,1,200,7,4] gmb:f64[4,1,200,7,4]
              gmc:f64[4,1,200,7,4] gmd:f64[4,1,200,7,4] gme:f64[4,1,200,7,4] gmf:f64[4,1,200,7,4]
              gmg:f64[4,1,200,7,4] gmh:f64[4,1,200,7,4] gmi:f64[4,1,200,7,4] gmj:f64[4,1,200,7,4]
              gmk:f64[4,1,200,7,4] gml:f64[4,1,200,7,4] gmm:f64[4,1,200,7,4] gmn:f64[4,1,200,7,4]
              gmo:f64[4,1,200,7,4] gmp:f64[4,1,200,7,4] gmq:f64[4,1,200,7,4] gmr:f64[4,1,200,7,4]
              gms:f64[4,1,200,7,4] gmt:f64[4,1,200,7,4] gmu:f64[4,1,200,7,4] gmv:f64[4,1,200,7,4]
              gmw:f64[4,1,200,7,4] gmx:f64[4,1,200,7,4] gmy:f64[4,1,200,7,4,3] gmz:f64[4,1,200,7,4,3]
              gna:f64[4,1,200,7,4,1] gnb:f64[4,1,200,7,4] gnc:f64[4,1,200,7,4,1]
              gnd:f64[4,1,200,7,4,3] gne:f64[4,1,200,7,4,1] gnf:f64[4,1,200,7,4]
              gng:f64[4,1,200,7,4] gnh:f64[4,1,200,7,4] gni:f64[4,1,200,7,4] gnj:f64[4,1,200,7,4]
              gnk:f64[4,1,200,7,4] gnl:f64[4,1,200,7,4] gnm:f64[4,1,200,7,4] gnn:f64[4,1,200,7,4]
              gno:f64[4,1,200,7,4] gnp:f64[4,1,200,7,4] gnq:f64[4,1,200,7,4] gnr:f64[4,1,200,7,4]
              gns:f64[4,1,200,7,4] gnt:f64[4,1,200,7,4] gnu:f64[4,1,200,7,4] gnv:f64[4,1,200,7,4]
              gnw:f64[4,1,200,7,4] gnx:f64[4,1,200,7,4] gny:f64[4,1,200,7,4] gnz:f64[4,1,200,7,4]
              goa:f64[4,1,200,7,4] gob:f64[4,1,200,7,4] goc:f64[4,1,200,7,4] god:f64[4,1,200,7,4]
              goe:f64[4,1,200,7,4] gof:f64[4,1,200,7,4] gog:f64[4,1,200,7,4] goh:f64[4,1,200,7,4]
              goi:f64[4,1,200,7,4] goj:f64[4,1,200,7,4] gok:f64[4,1,200,7,4] gol:f64[4,1,200,7,4]
              gom:f64[4,1,200,7,4] gon:f64[4,1,200,7,4] goo:f64[4,1,200,7,4] gop:f64[4,1,200,7,4]
              goq:f64[4,1,200,7,4] gor:f64[4,1,200,7,4,3] gos:f64[4,1,200,7,4,3]
              got:f64[4,1,200,7,4,1] gou:f64[4,1,200,7,4] gov:f64[4,1,200,7,4,1]
              gow:f64[4,1,200,7,4,3] gox:f64[4,1,200,7,4,1] goy:f64[4,1,200,7,4]
              goz:f64[4,1,200,7,4] gpa:f64[4,1,200,7,4] gpb:f64[4,1,200,7,4] gpc:f64[4,1,200,7,4]
              gpd:f64[4,1,200,7,4] gpe:f64[4,1,200,7,4] gpf:f64[4,1,200,7,4] gpg:f64[4,1,200,7,4]
              gph:f64[4,1,200,7,4] gpi:f64[4,1,200,7,4] gpj:f64[4,1,200,7,4] gpk:f64[4,1,200,7,4]
              gpl:f64[4,1,200,7,4] gpm:f64[4,1,200,7,4] gpn:f64[4,1,200,7,4] gpo:f64[4,1,200,7,4]
              gpp:f64[4,1,200,7,4] gpq:f64[4,1,200,7,4] gpr:f64[4,1,200,7,4] gps:f64[4,1,200,7,4]
              gpt:f64[4,1,200,7,4] gpu:f64[4,1,200,7,4] gpv:f64[4,1,200,7,4] gpw:f64[4,1,200,7,4]
              gpx:f64[4,1,200,7,4] gpy:f64[4,1,200,7,4] gpz:f64[4,1,200,7,4] gqa:f64[4,1,200,7,4]
              gqb:f64[4,1,200,7,4] gqc:f64[4,1,200,7,4] gqd:f64[4,1,200,7,4] gqe:f64[4,1,200,7,4]
              gqf:f64[4,1,200,7,4] gqg:f64[4,1,200,7,4] gqh:f64[4,1,200,7,4] gqi:f64[4,1,200,7,4]
              gqj:f64[4,1,200,7,4] gqk:f64[4,1,200,7,13,1] gql:bool[4,1,200,7,13,4]
              gqm:f64[4,1,200,7,13,4] gqn:f64[4,1,200,7,13] gqo:bool[4,1,200,7,13]
              gqp:f64[4,1,200,7,13,4] gqq:f64[4,1,200,7,13,1] gqr:f64[4,1,200,7,13,3]
              gqs:f64[4,1,200,7,13,1] gqt:f64[4,1,200,7,13] gqu:f64[4,1,200,7,13,3]
              gqv:f64[4,1,200,7,13,1] gqw:f64[4,1,200,7,13,3] gqx:f64[4,1,200,7,13,1]
              gqy:f64[4,1,200,7,13] gqz:f64[4,1,200,7,13,3] gra:f64[4,1,200,7,13,1]
              grb:f64[4,1,200,7,13,3] grc:f64[4,1,200,7,13,1] grd:f64[4,1,200,7,13]
              gre:f64[4,1,200,7,13,3] grf:f64[4,1,200,7,13,1] grg:f64[4,1,200,7,18,3]
              grh:f64[4,1,200,7,18,1] gri:f64[4,1,200,7,18] grj:f64[4,1,200,7,18,3]
              grk:f64[4,1,200,7,18,1] grl:f64[4,1,200,7,18] grm:f64[4,1,200,7,18]
              grn:f64[4,1,200,7,18] gro:f64[4,1,200,7,18] grp:f64[4,1,200,7,18] grq:f64[4,1,200,7,18]
              grr:f64[4,1,200,7,18,3] grs:f64[4,1,200,7,18,3] grt:f64[4,1,200,7,18,1]
              gru:f64[4,1,200,7,18,3] grv:f64[4,1,200,7,1,6] grw:f64[4,1,200,7,1,1]
              grx:f64[4,1,200,7,1,6] gry:f64[4,1,200,7,1,1] grz:f64[4,1,200,7,1,6]
              gsa:f64[4,1,200,7,1,1] gsb:f64[4,1,200,7,1,1] gsc:f64[4,1,200,7,1,1]
              gsd:f64[4,1,200,7,1,1] gse:f64[4,1,200,7,18,1] gsf:f64[4,1,200,7,1,6]
              gsg:f64[4,1,200,7,1,1] gsh:f64[4,1,200,7,1,6] gsi:f64[4,1,200,7,1,1]
              gsj:f64[4,1,200,7,1,6] gsk:f64[4,1,200,7,1,1] gsl:f64[4,1,200,7,1,1]
              gsm:f64[4,1,200,7,1,1] gsn:f64[4,1,200,7,1,1] gso:f64[4,1,200,7,12]
              gsp:f64[4,1,200,7,12] gsq:f64[4,1,200,7,12] gsr:f64[4,1,200,7,12] gss:f64[4,1,200,7,12]
              gst:f64[4,1,200,7,12] gsu:f64[4,1,200,7,12] gsv:f64[4,1,200,7,12] gsw:f64[4,1,200,7,12]
              gsx:f64[4,1,200,7,12] gsy:f64[4,1,200,7,12] gsz:f64[4,1,200,7,12] gta:f64[4,1,200,7,6,1]
              gtb:f64[4,1,200,7,6,3] gtc:f64[4,1,200,7,4,1] gtd:f64[4,1,200,7,4,3]
              gte:f64[4,1,200,7,4,1] gtf:f64[4,1,200,7,4,3] gtg:f64[4,1,200,7,4,1]
              gth:f64[4,1,200,7,4,3] gti:f64[4,1,200,7,1,6] gtj:f64[4,1,200,7,1,1]
              gtk:f64[4,1,200,7,1,6] gtl:f64[4,1,200,7,1,1] gtm:f64[4,1,200,7,1,6]
              gtn:f64[4,1,200,7,1,1] gto:f64[4,1,200,7,1,1] gtp:f64[4,1,200,7,1,1]
              gtq:f64[4,1,200,7,1,1] gtr:f64[4,1,200,7,12] gts:f64[4,1,200,7,12]
              gtt:f64[4,1,200,7,12] gtu:f64[4,1,200,7,12] gtv:f64[4,1,200,7,12] gtw:f64[4,1,200,7,12]
              gtx:f64[4,1,200,7,6,1] gty:f64[4,1,200,7,6,3] gtz:f64[4,1,200,7,4,1]
              gua:f64[4,1,200,7,4,3] gub:f64[4,1,200,7,4,1] guc:f64[4,1,200,7,4,3]
              gud:f64[4,1,200,7,4,1] gue:f64[4,1,200,7,4,3] guf:f64[4,1,200,7,13]
              gug:f64[4,1,200,7,13] guh:f64[4,1,200,7,13] gui:f64[4,1,200,7,13] guj:f64[4,1,200,7,13]
              guk:f64[4,1,200,7,13] gul:f64[4,1,200,7,13] gum:f64[4,1,200,7,13] gun:f64[4,1,200,7,13]
              guo:f64[4,1,200,7,13] gup:f64[4,1,200,7,13] guq:f64[4,1,200,7,13] gur:f64[4,1,200,7,13]
              gus:f64[4,1,200,7,13] gut:f64[4,1,200,7,13] guu:f64[4,1,200,7,13] guv:f64[4,1,200,7,13]
              guw:f64[4,1,200,7,13] gux:f64[4,1,200,7,18,3] guy:f64[4,1,200,7,13]
              guz:f64[4,1,200,7,13] gva:f64[4,1,200,7,13] gvb:f64[4,1,200,7,13,4]
              gvc:f64[4,1,200,7,13] gvd:f64[4,1,200,7,13] gve:f64[4,1,200,7,13] gvf:f64[4,1,200,7,13]
              gvg:f64[4,1,200,7,13] gvh:f64[4,1,200,7,13] gvi:f64[4,1,200,7,13,3,3]
              gvj:f64[4,1,13,200,7,3,3] gvk:f64[4,1,200,7,13,3,3] gvl:f64[4,1,200,7,13,3,3]
              gvm:f64[4,1,200,7,13,3] gvn:f64[4,1,200,7,13,3,3] gvo:f64[4,1,200,7,13]
              gvp:f64[4,1,200,7,13] gvq:f64[4,1,200,7,13] gvr:f64[4,1,200,7,13] gvs:f64[4,1,200,7,13]
              gvt:f64[4,1,200,7,13] gvu:f64[4,1,200,7,13,3] gvv:f64[4,1,200,7,13]
              gvw:f64[4,1,200,7,13] gvx:f64[4,1,200,7,13] gvy:f64[4,1,200,7,13] gvz:f64[4,1,200,7,13]
              gwa:f64[4,1,200,7,13] gwb:f64[4,1,200,7,13] gwc:f64[4,1,200,7,13] gwd:f64[4,1,200,7,13]
              gwe:f64[4,1,200,7,13] gwf:f64[4,1,200,7,13] gwg:f64[4,1,200,7,13] gwh:f64[4,1,200,7,13]
              gwi:f64[4,1,200,7,13] gwj:f64[4,1,200,7,13] gwk:f64[4,1,200,7,13] gwl:f64[4,1,200,7,13]
              gwm:f64[4,1,200,7,13] gwn:f64[4,1,200,7,1,3] gwo:f64[4,1,200,7,1,3]
              gwp:f64[4,1,200,7,1,1] gwq:f64[4,1,200,7,1] gwr:f64[4,1,200,7,1,1]
              gws:f64[4,1,200,7,1,3] gwt:f64[4,1,200,7,1,1] gwu:f64[4,1,200,7,1]
              gwv:f64[4,1,200,7,1] gww:f64[4,1,200,7,1] gwx:f64[4,1,200,7,1] gwy:f64[4,1,200,7,1]
              gwz:f64[4,1,200,7,1] gxa:f64[4,1,200,7,4,3] gxb:f64[4,1,200,7,4,3]
              gxc:f64[4,1,200,7,4,1] gxd:f64[4,1,200,7,4] gxe:f64[4,1,200,7,4,1]
              gxf:f64[4,1,200,7,4,3] gxg:f64[4,1,200,7,4,1] gxh:f64[4,1,200,7,4]
              gxi:f64[4,1,200,7,4] gxj:f64[4,1,200,7,4] gxk:f64[4,1,200,7,4] gxl:f64[4,1,200,7,4]
              gxm:f64[4,1,200,7,4] gxn:f64[4,1,200,7,4,3] gxo:f64[4,1,200,7,4,3]
              gxp:f64[4,1,200,7,4,1] gxq:f64[4,1,200,7,4] gxr:f64[4,1,200,7,4,1]
              gxs:f64[4,1,200,7,4,3] gxt:f64[4,1,200,7,4,1] gxu:f64[4,1,200,7,4]
              gxv:f64[4,1,200,7,4] gxw:f64[4,1,200,7,4] gxx:f64[4,1,200,7,4] gxy:f64[4,1,200,7,4]
              gxz:f64[4,1,200,7,4] gya:f64[4,1,200,7,4,3] gyb:f64[4,1,200,7,4,3]
              gyc:f64[4,1,200,7,4,1] gyd:f64[4,1,200,7,4] gye:f64[4,1,200,7,4,1]
              gyf:f64[4,1,200,7,4,3] gyg:f64[4,1,200,7,4,1] gyh:f64[4,1,200,7,4]
              gyi:f64[4,1,200,7,4] gyj:f64[4,1,200,7,4] gyk:f64[4,1,200,7,4] gyl:f64[4,1,200,7,4]
              gym:f64[4,1,200,7,4] gyn:f64[4,1,200,7,4] gyo:f64[4,1,200,7,4] gyp:f64[4,1,200,7,4]
              gyq:f64[4,1,200,7,4] gyr:f64[4,1,200,7,4] gys:f64[4,1,200,7,4] gyt:f64[4,1,200,7,4,3]
              gyu:f64[4,1,200,7,4,3] gyv:f64[4,1,200,7,4,1] gyw:f64[4,1,200,7,4]
              gyx:f64[4,1,200,7,4,1] gyy:f64[4,1,200,7,4,3] gyz:f64[4,1,200,7,4,1]
              gza:f64[4,1,200,7,4] gzb:f64[4,1,200,7,4] gzc:f64[4,1,200,7,4] gzd:f64[4,1,200,7,4]
              gze:f64[4,1,200,7,4] gzf:f64[4,1,200,7,4] gzg:f64[4,1,200,7,4] gzh:f64[4,1,200,7,4]
              gzi:f64[4,1,200,7,4] gzj:f64[4,1,200,7,4] gzk:f64[4,1,200,7,4] gzl:f64[4,1,200,7,4]
              gzm:f64[4,1,200,7,4,3] gzn:f64[4,1,200,7,4,3] gzo:f64[4,1,200,7,4,1]
              gzp:f64[4,1,200,7,4] gzq:f64[4,1,200,7,4,1] gzr:f64[4,1,200,7,4,3]
              gzs:f64[4,1,200,7,4,1] gzt:f64[4,1,200,7,4] gzu:f64[4,1,200,7,4] gzv:f64[4,1,200,7,4]
              gzw:f64[4,1,200,7,4] gzx:f64[4,1,200,7,4] gzy:f64[4,1,200,7,4] gzz:f64[4,1,200,7,4]
              haa:f64[4,1,200,7,4] hab:f64[4,1,200,7,4] hac:f64[4,1,200,7,4] had:f64[4,1,200,7,4]
              hae:f64[4,1,200,7,4] haf:f64[4,1,200,7,4,3] hag:f64[4,1,200,7,4,3]
              hah:f64[4,1,200,7,4,1] hai:f64[4,1,200,7,4] haj:f64[4,1,200,7,4,1]
              hak:f64[4,1,200,7,4,3] hal:f64[4,1,200,7,4,1] ham:f64[4,1,200,7,4]
              han:f64[4,1,200,7,4] hao:f64[4,1,200,7,4] hap:f64[4,1,200,7,4] haq:f64[4,1,200,7,4]
              har:f64[4,1,200,7,4] has:f64[4,1,200,7,18,3] hat:f64[4,1,200,7,18]
              hau:f64[4,1,200,7,18] hav:f64[4,1,200,7,18] haw:f64[4,1,200,7,18] hax:f64[4,1,200,7,18]
              hay:f64[4,1,200,7,18] haz:f64[4,1,200,7,18,3] hba:f64[4,1,200,7,18,3,3]
              hbb:f64[4,1,200,7,18] hbc:f64[4,1,200,7,18] hbd:f64[4,1,200,7,18] hbe:f64[4,1,200,7,18]
              hbf:f64[4,1,200,7,18] hbg:f64[4,1,200,7,18] hbh:f64[4,1,200,7,18,18]
              hbi:f64[4,1,200,7,18,18] hbj:f64[4,1,200,7,18,18] hbk:f64[4,1,4,200,7,18,18]
              hbl:f64[4,1,4,200,7,18,18] hbm:f64[4,1,4,200,7,18,18] hbn:f64[4,1,4,200,7,18]
              hbo:f64[4,1,4,200,7,18,18] hbp:f64[4,1,4,200,7,12] hbq:bool[4,1,4,200,7,12]
              hbr:f64[4,1,4,200,7,12] hbs:f64[4,1,4,200,7,12] hbt:f64[4,1,4,200,7,12]
              hbu:f64[4,1,4,200,7,12] hbv:bool[4,1,4,200,7,12] hbw:bool[4,1,4,200,7,12]
              hbx:bool[4,1,4,200,7,3] hby:bool[4,1,4,200,7] hbz:f64[4,1,4,200,7,3]
              hca:f64[4,1,4,200,7,3] hcb:f64[4,1,4,200,7,1] hcc:f64[4,1,4,200,7]
              hcd:f64[4,1,4,200,7,1] hce:f64[4,1,4,200,7,3] hcf:f64[4,1,4,200,7,1]
              hcg:f64[4,1,4,200,7] hch:f64[4,1,4,200,7] hci:f64[4,1,4,200,7] hcj:f64[4,1,4,200,7]
              hck:f64[4,1,4,200,7] hcl:f64[4,1,4,200,7] hcm:f64[4,1,4,200,7,3] hcn:f64[4,1,4,200,7,3]
              hco:f64[4,1,4,200,7,1] hcp:f64[4,1,4,200,7] hcq:f64[4,1,4,200,7,1]
              hcr:f64[4,1,4,200,7,3] hcs:f64[4,1,4,200,7,1] hct:f64[4,1,4,200,7]
              hcu:f64[4,1,4,200,7] hcv:f64[4,1,4,200,7] hcw:f64[4,1,4,200,7] hcx:f64[4,1,4,200,7]
              hcy:f64[4,1,4,200,7] hcz:f64[4,1,4,200,7] hda:f64[4,1,4,200,7] hdb:f64[4,1,4,200,7]
              hdc:bool[4,1,4,200,7] hdd:f64[4,1,4,200,7] hde:f64[4,1,4,200,7] hdf:f64[4,1,4,200,7]
              hdg:f64[4,1,4,200,7] hdh:f64[4,1,4,200,7] hdi:bool[4,1,4,200,7,3] hdj:bool[4,1,4,200,7]
              hdk:bool[4,1,4,200,7] hdl:f64[4,1,4,200,7] hdm:f64[4,1,4,200,7] hdn:f64[4,1,4,200,7]
              hdo:f64[4,1,4,200,7] hdp:f64[4,1,4,200,7] hdq:bool[4,1,4,200,7,3] hdr:bool[4,1,4,200,7]
              hds:bool[4,1,4,200,7] hdt:f64[4,1,4,200,7] hdu:f64[4,1,4,200,7] hdv:f64[4,1,4,200,7]
              hdw:f64[4,1,4,200,7] hdx:f64[4,1,4,200,7] hdy:bool[4,1,4,200,7,3] hdz:bool[4,1,4,200,7]
              hea:bool[4,1,4,200,7] heb:f64[4,1,4,200,7] hec:f64[4,1,4,200,7] hed:f64[4,1,4,200,7]
              hee:f64[4,1,4,200,7] hef:f64[4,1,4,200,7] heg:f64[4,1,4,200,7] heh:f64[4,1,4,200,7]
              hei:f64[4,1,4,200,7] hej:f64[4,1,4,200,7] hek:f64[4,1,4,200,7] hel:f64[4,1,4,200,7]
              hem:f64[4,1,4,200,7] hen:f64[4,1,4,200,7] heo:f64[4,1,4,200,7] hep:f64[4,1,4,200,7]
              heq:f64[4,1,4,200,7] her:f64[4,1,4,200,7] hes:f64[4,1,4,200,7] het:f64[4,1,4,200,7]
              heu:f64[4,1,4,200,7] hev:f64[4,1,4,200,7] hew:f64[4,1,4,200,7] hex:f64[4,1,4,200,7]
              hey:f64[4,1,4,200,7] hez:f64[4,1,4,200,7] hfa:f64[4,1,4,200,7] hfb:f64[4,1,4,200,7]
              hfc:f64[4,1,4,200,7] hfd:f64[4,1,4,200,7] hfe:f64[4,1,4,200,7] hff:f64[4,1,4,200,7]
              hfg:f64[4,1,4,200,7] hfh:f64[4,1,4,200,7] hfi:f64[4,1,4,200,7] hfj:f64[4,1,4,200,7]
              hfk:f64[4,1,4,200,7] hfl:f64[4,1,4,200,7] hfm:f64[4,1,4,200,7] hfn:f64[4,1,4,200,7]
              hfo:f64[4,1,4,200,7] hfp:f64[4,1,4,200,7] hfq:f64[4,1,4,200,7] hfr:f64[4,1,4,200,7]
              hfs:f64[4,1,4,200,7] hft:f64[4,1,4,200,7] hfu:f64[4,1,4,200,7] hfv:f64[4,1,4,200,7]
              hfw:f64[4,1,4,200,7] hfx:f64[4,1,4,200,7] hfy:f64[4,1,4,200,7] hfz:f64[4,1,4,200,7]
              hga:f64[4,1,4,200,7] hgb:f64[4,1,4,200,7] hgc:f64[4,1,4,200,7] hgd:f64[4,1,4,200,7]
              hge:f64[4,1,4,200,7] hgf:f64[4,1,4,200,7] hgg:f64[4,1,4,200,7] hgh:f64[4,1,4,200,7]
              hgi:f64[4,1,4,200,7] hgj:f64[4,1,4,200,7] hgk:f64[4,1,4,200,7] hgl:f64[4,1,4,200,7]
              hgm:f64[4,1,4,200,7] hgn:f64[4,1,4,200,7] hgo:f64[4,1,4,200,7] hgp:f64[4,1,4,200,7]
              hgq:f64[4,1,4,200,7] hgr:f64[4,1,4,200,7] hgs:f64[4,1,4,200,7] hgt:f64[4,1,4,200,7]
              hgu:f64[4,1,4,200,7] hgv:f64[4,1,4,200,7] hgw:f64[4,1,4,200,7] hgx:f64[4,1,4,200,7]
              hgy:f64[4,1,4,200,7] hgz:f64[4,1,4,200,7] hha:f64[4,1,4,200,7] hhb:f64[4,1,4,200,7]
              hhc:f64[4,1,4,200,7] hhd:f64[4,1,4,200,7] hhe:f64[4,1,4,200,7] hhf:f64[4,1,4,200,7]
              hhg:f64[4,1,4,200,7] hhh:f64[4,1,4,200,7] hhi:f64[4,1,4,200,7] hhj:f64[4,1,4,200,7]
              hhk:f64[4,1,4,200,7] hhl:f64[4,1,4,200,7] hhm:f64[4,1,4,200,7] hhn:f64[4,1,4,200,7]
              hho:f64[4,1,4,200,7] hhp:f64[4,1,4,200,7] hhq:f64[4,1,4,200,7] hhr:f64[4,1,4,200,7]
              hhs:f64[4,1,4,200,7] hht:f64[4,1,4,200,7] hhu:f64[4,1,4,200,7] hhv:f64[4,1,4,200,7]
              hhw:f64[4,1,4,200,7] hhx:f64[4,1,4,200,7] hhy:f64[4,1,4,200,7] hhz:f64[4,1,4,200,7]
              hia:f64[4,1,4,200,7] hib:f64[4,1,4,200,7] hic:f64[4,1,4,200,7] hid:f64[4,1,4,200,7]
              hie:f64[4,1,4,200,7] hif:f64[4,1,4,200,7] hig:f64[4,1,4,200,7] hih:f64[4,1,4,200,7]
              hii:f64[4,1,4,200,7] hij:f64[4,1,4,200,7] hik:f64[4,1,4,200,7] hil:f64[4,1,4,200,7]
              him:f64[4,1,4,200,7] hin:f64[4,1,4,200,7] hio:f64[4,1,4,200,7] hip:f64[4,1,4,200,7]
              hiq:f64[4,1,4,200,7] hir:f64[4,1,4,200,7] his:f64[4,1,4,200,7] hit:f64[4,1,4,200,7]
              hiu:f64[4,1,4,200,7] hiv:f64[4,1,4,200,7] hiw:f64[4,1,4,200,7] hix:f64[4,1,4,200,7]
              hiy:f64[4,1,4,200,7] hiz:f64[4,1,4,200,7] hja:f64[4,1,4,200,7] hjb:f64[4,1,4,200,7]
              hjc:f64[4,1,4,200,7] hjd:f64[4,1,4,200,7] hje:f64[4,1,4,200,7,12] hjf:f64[4,1,4,200,7,12]
              hjg:f64[4,1,4,200,7,12] hjh:f64[4,1,4,200,7,12] hji:f64[4,1,4,200,7,12]
              hjj:f64[4,1,4,200,7,12] hjk:f64[4,1,4,200,7,12] hjl:f64[4,1,4,200,7,12]
              hjm:f64[4,1,4,200,7,1] hjn:f64[4,1,4,200,7,1] hjo:f64[4,1,4,200,7,1,3]
              hjp:f64[4,1,4,200,7,1] hjq:f64[4,1,4,200,7,1] hjr:f64[4,1,4,200,7,1,1]
              hjs:f64[4,1,4,200,7,1,1] hjt:f64[4,1,4,200,7,1] hju:f64[4,1,4,200,7,1]
              hjv:f64[4,1,4,200,7,1] hjw:f64[4,1,4,200,7,1] hjx:f64[4,1,4,200,7,1]
              hjy:f64[4,1,4,200,7,1] hjz:f64[4,1,4,200,7,1] hka:f64[4,1,4,200,7,1]
              hkb:f64[4,1,4,200,7,1] hkc:f64[4,1,4,200,7,1] hkd:f64[4,1,4,200,7,1]
              hke:f64[4,1,4,200,7,1] hkf:f64[4,1,4,200,7,1] hkg:f64[4,1,4,200,7,1]
              hkh:f64[4,1,4,200,7,1] hki:f64[4,1,4,200,7,1] hkj:f64[4,1,4,200,7,1]
              hkk:f64[4,1,4,200,7,1] hkl:f64[4,1,4,200,7,1] hkm:f64[4,1,4,200,7,1]
              hkn:f64[4,1,4,200,7,1] hko:f64[4,1,4,200,7,1] hkp:f64[4,1,4,200,7,1]
              hkq:f64[4,1,4,200,7,1] hkr:f64[4,1,4,200,7,1] hks:f64[4,1,4,200,7,1]
              hkt:f64[4,1,4,200,7,1] hku:f64[4,1,4,200,7,1] hkv:f64[4,1,4,200,7,1]
              hkw:f64[4,1,4,200,7,1] hkx:f64[4,1,4,200,7,1] hky:f64[4,1,4,200,7,1]
              hkz:f64[4,1,4,200,7,1] hla:f64[4,1,4,200,7,1] hlb:f64[4,1,4,200,7,1]
              hlc:f64[4,1,4,200,7,1] hld:f64[4,1,4,200,7,1] hle:f64[4,1,4,200,7,1]
              hlf:f64[4,1,4,200,7,1] hlg:f64[4,1,4,200,7,1,1] hlh:f64[4,1,4,200,7,1,4]
              hli:f64[4,1,4,200,7,1] hlj:f64[4,1,4,200,7,1,1] hlk:f64[4,1,200,7,3]
              hll:f64[4,1,200,7,3] hlm:f64[4,1,200,7,1] hln:f64[4,1,200,7] hlo:f64[4,1,200,7,1]
              hlp:f64[4,1,200,7,3] hlq:f64[4,1,200,7,1] hlr:f64[4,1,200,7] hls:f64[4,1,200,7]
              hlt:f64[4,1,200,7] hlu:f64[4,1,200,7] hlv:f64[4,1,200,7] hlw:f64[4,1,200,7]
              hlx:f64[4,1,200,7,3] hly:f64[4,1,200,7,3] hlz:f64[4,1,200,7,1] hma:f64[4,1,200,7]
              hmb:f64[4,1,200,7,1] hmc:f64[4,1,200,7,3] hmd:f64[4,1,200,7,1] hme:f64[4,1,200,7]
              hmf:f64[4,1,200,7] hmg:f64[4,1,200,7] hmh:f64[4,1,200,7] hmi:f64[4,1,200,7]
              hmj:f64[4,1,200,7] hmk:f64[4,1,200,7] hml:f64[4,1,200,7] hmm:f64[4,1,200,7]
              hmn:f64[4,1,200,7] hmo:f64[4,1,200,7] hmp:f64[4,200,7,36] hmq:f64[4,200,7,36] = scan[
              _split_transpose=False
              jaxpr={ lambda ; hmr:f64[1,1,18,18] hms:bool[200,7,18,18] hmt:f64[200,7,18,18]
                  hmu:bool[200,7,18,18] hmv:f64[200,7,18,18] hmw:bool[200,7,18,18]
                  hmx:f64[200,7,18,18] hmy:f64[200,7,18,18] hmz:f64[200,7,18] hna:i32[12,1]
                  hnb:f64[1,1,12] hnc:f64[200,7,12] hnd:f64[200,7,12] hne:bool[200,7,12]
                  hnf:f64[200,7,12] hng:f64[200,7,12] hnh:f64[200,7,12] hni:f64[200,7,12]
                  hnj:bool[200,7,12] hnk:bool[200,7,12] hnl:f64[1,1,12] hnm:f64[1,1,12]
                  hnn:f64[1,1,12] hno:f64[1,1,12] hnp:f64[1,1,12] hnq:f64[1,1,12]
                  hnr:f64[1,1,12] hns:f64[1,1,12] hnt:f64[1,1,12] hnu:f64[1,1,12]
                  hnv:f64[1,1,12] hnw:f64[1,1,3] hnx:f64[1,1,4] hny:i32[1] hnz:i32[1]
                  hoa:i32[1] hob:i32[1] hoc:i32[1] hod:i32[1] hoe:i32[1] hof:i32[1]
                  hog:i32[1] hoh:i32[1] hoi:i32[1] hoj:i32[1] hok:f64[1,1,36] hol:f64[1,1,36]
                  hom:f64[1,1,36] hon:f64[1,1,36] hoo:f64[] hop:f64[] hoq:bool[]
                  hor:bool[200,7] hos:bool[200,7] hot:f64[] hou:f64[] hov:f64[] how:f64[]
                  hox:f64[] hoy:f64[] hoz:f64[] hpa:f64[] hpb:f64[200,7,1] hpc:f64[1,1,3]
                  hpd:f64[] hpe:f64[] hpf:bool[] hpg:bool[200,7] hph:bool[200,7]
                  hpi:f64[] hpj:f64[] hpk:f64[] hpl:f64[] hpm:f64[] hpn:f64[] hpo:f64[]
                  hpp:f64[] hpq:f64[200,7,1] hpr:f64[1,1,3] hps:f64[] hpt:f64[] hpu:bool[]
                  hpv:bool[200,7] hpw:bool[200,7] hpx:f64[] hpy:f64[] hpz:f64[] hqa:f64[]
                  hqb:f64[] hqc:f64[] hqd:f64[] hqe:f64[] hqf:f64[200,7,1] hqg:f64[1,1,3]
                  hqh:f64[] hqi:f64[] hqj:bool[] hqk:bool[200,7] hql:bool[200,7]
                  hqm:f64[] hqn:f64[] hqo:f64[] hqp:f64[] hqq:f64[] hqr:f64[] hqs:f64[]
                  hqt:f64[] hqu:f64[200,7,1] hqv:f64[] hqw:f64[] hqx:f64[] hqy:f64[]
                  hqz:f64[] hra:f64[] hrb:f64[] hrc:f64[200,7] hrd:f64[200,7] hre:f64[200,7]
                  hrf:f64[200,7] hrg:f64[] hrh:f64[200,7] hri:f64[200,7] hrj:f64[200,7]
                  hrk:f64[200,7] hrl:f64[] hrm:f64[] hrn:f64[] hro:f64[] hrp:f64[]
                  hrq:f64[] hrr:f64[] hrs:f64[200,7] hrt:f64[200,7] hru:f64[200,7]
                  hrv:f64[200,7] hrw:f64[] hrx:f64[200,7] hry:f64[200,7] hrz:f64[200,7]
                  hsa:f64[200,7] hsb:f64[] hsc:f64[] hsd:f64[] hse:f64[] hsf:f64[]
                  hsg:f64[] hsh:f64[] hsi:f64[200,7] hsj:f64[200,7] hsk:f64[200,7]
                  hsl:f64[200,7] hsm:f64[] hsn:f64[200,7] hso:f64[200,7] hsp:f64[200,7]
                  hsq:f64[200,7] hsr:f64[] hss:f64[] hst:f64[] hsu:f64[] hsv:f64[]
                  hsw:f64[] hsx:f64[] hsy:f64[200,7] hsz:f64[200,7] hta:f64[200,7]
                  htb:f64[200,7] htc:f64[] htd:f64[200,7] hte:f64[200,7] htf:f64[200,7]
                  htg:f64[200,7] hth:f64[1,1,12] hti:f64[200,7,12] htj:f64[200,7,12]
                  htk:f64[200,7,12] htl:f64[200,7,12] htm:f64[1,1,12] htn:f64[200,7,12]
                  hto:f64[200,7,12] htp:f64[200,7,12] htq:f64[200,7,12] htr:f64[1,1,12]
                  hts:f64[1,1,12] htt:f64[1,1,12] htu:f64[200,7,12] htv:f64[200,7,12]
                  htw:f64[200,7,12] htx:f64[200,7,12] hty:f64[1,1,12] htz:f64[200,7,12]
                  hua:f64[200,7,12] hub:f64[200,7,12] huc:f64[200,7,12] hud:f64[1,1,12]
                  hue:i32[12,1] huf:f64[1,1,12] hug:i32[12,1] huh:f64[1,1,12] hui:f64[1,1,12]
                  huj:f64[200,7,12] huk:f64[200,7,12] hul:f64[200,7,12] hum:f64[200,7,12]
                  hun:f64[1,1,12] huo:f64[200,7,12] hup:f64[200,7,12] huq:f64[200,7,12]
                  hur:f64[200,7,12] hus:f64[1,1,12] hut:f64[200,7,6] huu:f64[200,7,19]
                  huv:i32[1] huw:f64[1,1,36] hux:f64[1,1,36] huy:i32[1] huz:f64[1,1,12]
                  hva:f64[1,1,18] hvb:f64[200,7,18] hvc:i32[1] hvd:i32[1] hve:i32[1]
                  hvf:i32[1] hvg:i32[1] hvh:i32[1] hvi:i32[1] hvj:i32[1] hvk:f64[1,1,4]
                  hvl:i32[1] hvm:i32[1] hvn:i32[1] hvo:i32[1] hvp:i32[1] hvq:i32[1]
                  hvr:i32[1] hvs:f64[1,1,13,1] hvt:f64[200,7,1,3] hvu:i32[6,1] hvv:f64[18,3]
                  hvw:f64[1,1,13] hvx:f64[1,1,12] hvy:f64[1,1,12] hvz:f64[1,1,12]
                  hwa:f64[] hwb:f64[] hwc:bool[] hwd:bool[] hwe:f64[200,7,12,4] hwf:f64[200,7,12]
                  hwg:i64[1] hwh:f64[1,1,13] hwi:f64[1,1,13] hwj:f64[1,1,13] hwk:f64[1,1,13]
                  hwl:f64[1,1,13] hwm:f64[1,1,13] hwn:f64[1,1,13] hwo:f64[1,1,13]
                  hwp:f64[1,1,13] hwq:f64[1,1,13] hwr:f64[1,1,13] hws:f64[1,1,13]
                  hwt:f64[1,1,13] hwu:f64[1,1,13] hwv:f64[1,1,13] hww:i64[4,1] hwx:i64[4,1]
                  hwy:i64[4,1] hwz:i64[4,1] hxa:i64[13,1] hxb:f64[] hxc:f64[] hxd:bool[]
                  hxe:bool[] hxf:f64[200,7,13,4] hxg:f64[200,7,13] hxh:f64[200,7,1,4]
                  hxi:i32[13,1] hxj:f64[1,1,13] hxk:f64[1,1,13] hxl:f64[1,1,13] hxm:f64[1,1,13]
                  hxn:f64[1,1,13] hxo:f64[1,1,13] hxp:f64[1,1,13] hxq:f64[1,1,13]
                  hxr:f64[1,1,13] hxs:f64[1,1,13] hxt:f64[1,1,13] hxu:f64[1,1,13]
                  hxv:f64[1,1,13] hxw:f64[1,1,13] hxx:f64[1,1,13] hxy:f64[1,1,13]
                  hxz:f64[1,1,13] hya:f64[1,1,13] hyb:f64[1,1,13] hyc:f64[1,1,13]
                  hyd:f64[1,1,13] hye:f64[1,1,13] hyf:f64[1,1,13] hyg:f64[1,1,13]
                  hyh:f64[1,1,13] hyi:f64[1,1,13] hyj:f64[1,1,13] hyk:f64[1,1,13]
                  hyl:f64[1,1,13] hym:f64[1,1,13] hyn:f64[1,1,13] hyo:f64[1,1,13]
                  hyp:i64[18,1] hyq:f64[18,3] hyr:f64[1,1,18,3] hys:i32[1] hyt:f64[1,1,18]
                  hyu:i32[1] hyv:f64[1,1,18] hyw:f64[1,1,18] hyx:i32[1] hyy:f64[1,1,18]
                  hyz:f64[1,1,18] hza:f64[1,1,18] hzb:f64[1,1,18,3] hzc:f64[1,1,18,1]
                  hzd:f64[1,1,18,1] hze:f64[1,1,18] hzf:i32[1] hzg:f64[1,1,18] hzh:i32[1]
                  hzi:f64[1,1,18] hzj:i32[1] hzk:f64[1,1,18] hzl:f64[1,1,18] hzm:f64[1,1,18]
                  hzn:f64[18,3] hzo:f64[1,1,18,3] hzp:f64[200,7,13,3] hzq:i32[13,1]
                  hzr:f64[1,1,13,1] hzs:f64[1,1,13,3] hzt:f64[13,3] hzu:f64[1,1,12,3]
                  hzv:i64[1] hzw:f64[1,1,13,3] hzx:f64[1,1,13,3] hzy:f64[13,3] hzz:f64[1,1,13,3]
                  iaa:i32[1] iab:f64[1,1,13] iac:i32[1] iad:f64[1,1,13] iae:f64[1,1,13]
                  iaf:i32[1] iag:f64[1,1,13] iah:f64[1,1,13] iai:f64[1,1,13] iaj:f64[1,1,13,3]
                  iak:f64[1,1,13,1] ial:f64[1,1,13,1] iam:f64[1,1,13] ian:i32[1]
                  iao:f64[1,1,13] iap:i32[1] iaq:f64[1,1,13] iar:i32[1] ias:f64[1,1,13]
                  iat:f64[1,1,13] iau:f64[1,1,13] iav:i64[4,1] iaw:i64[4,1] iax:i32[1]
                  iay:i32[1] iaz:i32[1] iba:i32[1] ibb:i32[1] ibc:i32[1] ibd:i64[4,1]
                  ibe:i32[1] ibf:i32[1] ibg:i32[1] ibh:i32[1] ibi:i32[1] ibj:i32[1]
                  ibk:i64[4,1] ibl:i32[1] ibm:i32[1] ibn:i32[1] ibo:i32[1] ibp:i32[1]
                  ibq:i32[1] ibr:i64[13,1] ibs:f64[13,3] ibt:f64[1,1,13,3] ibu:i32[1]
                  ibv:f64[1,1,13] ibw:i32[1] ibx:f64[1,1,13] iby:f64[1,1,13] ibz:i32[1]
                  ica:f64[1,1,13] icb:f64[1,1,13] icc:f64[1,1,13] icd:i32[13,1] ice:f64[1,1,13,1]
                  icf:f64[200,7,1,3] icg:i32[13,1] ich:f64[13,3] ici:f64[1,1,13,3]
                  icj:i32[1] ick:f64[1,1,13] icl:i32[1] icm:f64[1,1,13] icn:f64[1,1,13]
                  ico:i32[1] icp:f64[1,1,13] icq:f64[1,1,13] icr:f64[1,1,13] ics:f64[1,1,13,3]
                  ict:i32[1] icu:f64[1,1,13] icv:i32[1] icw:f64[1,1,13] icx:f64[1,1,13]
                  icy:i32[1] icz:f64[1,1,13] ida:f64[1,1,13] idb:f64[1,1,13] idc:i64[18,1]
                  idd:i32[1] ide:i32[1] idf:i32[1] idg:i32[1] idh:i32[1] idi:i32[1]
                  idj:f64[1,1,18,3] idk:f64[1,1,18,1] idl:f64[1,1,18,1] idm:f64[1,1,18]
                  idn:i32[1] ido:f64[1,1,18] idp:i32[1] idq:f64[1,1,18] idr:i32[1]
                  ids:f64[1,1,18] idt:f64[1,1,18] idu:f64[1,1,18] idv:i32[1] idw:i32[1]
                  idx:i32[1] idy:i32[1] idz:i32[1] iea:i32[1] ieb:i32[1] iec:i32[1]
                  ied:i32[1] iee:i32[1] ief:i32[1] ieg:i32[1] ieh:i32[1] iei:f64[200,7,1,3,3]
                  iej:f64[200,7,1,3] iek:i32[6,1] iel:i64[4,1] iem:i32[4,1] ien:i64[4,1]
                  ieo:i32[4,1] iep:i64[4,1] ieq:i32[4,1] ier:i64[4,1] ies:i64[13,1]
                  iet:f64[200,7,1,3] ieu:i32[13,1] iev:i32[1] iew:i32[1] iex:i32[1]
                  iey:i32[1] iez:i32[1] ifa:i32[1] ifb:f64[200,7,1,3] ifc:i32[6,1]
                  ifd:i64[4,1] ife:i32[4,1] iff:i64[4,1] ifg:i32[4,1] ifh:i64[4,1]
                  ifi:i32[4,1] ifj:i64[4,1] ifk:i64[13,1] ifl:f64[200,7,1,3] ifm:i32[13,1]
                  ifn:i32[1] ifo:i32[1] ifp:i32[1] ifq:i32[1] ifr:i32[1] ifs:i32[1]
                  ift:i64[4,1] ifu:i32[4,1] ifv:i64[4,1] ifw:i64[4,1] ifx:i32[4,1]
                  ify:i64[4,1] ifz:i64[4,1] iga:i32[4,1] igb:i64[4,1] igc:i64[4,1]
                  igd:i64[13,1] ige:f64[1,1,13,1] igf:f64[200,7,1,3] igg:i32[6,1]
                  igh:i32[1] igi:i32[1] igj:i32[1] igk:i32[1] igl:i32[1] igm:i32[1]
                  ign:i32[1] igo:f64[200,7,1,3,3] igp:i32[1] igq:i32[1] igr:i32[1]
                  igs:i32[1] igt:i32[1] igu:i32[1] igv:i64[4,1] igw:i32[4,1] igx:i64[4,1]
                  igy:i32[4,1] igz:i64[4,1] iha:i32[4,1] ihb:i64[4,1] ihc:i64[13,1]
                  ihd:i32[1] ihe:i32[1] ihf:i32[1] ihg:i32[1] ihh:i32[1] ihi:i32[1]
                  ihj:f64[1,1,13,1] ihk:i32[1] ihl:i32[1] ihm:i32[1] ihn:i32[1] iho:i32[1]
                  ihp:i32[1] ihq:i32[1] ihr:i32[1] ihs:i32[1] iht:i32[1] ihu:i32[1]
                  ihv:i32[1] ihw:f64[200,7,1,3] ihx:i32[4,1] ihy:i64[4,1] ihz:f64[200,7,4,3]
                  iia:i32[4,1] iib:i64[4,1] iic:f64[200,7,4,3] iid:i32[4,1] iie:i64[4,1]
                  iif:i64[13,1] iig:i64[18,1] iih:f64[1,1,13] iii:f64[1,1,13] iij:f64[1,1,13]
                  iik:f64[1,1,13] iil:f64[1,1,13] iim:f64[1,1,13] iin:f64[1,1,13]
                  iio:f64[1,1,13] iip:f64[1,1,13] iiq:f64[1,1,13] iir:f64[1,1,13]
                  iis:f64[1,1,13] iit:f64[1,1,13] iiu:f64[1,1,13] iiv:f64[1,1,13]
                  iiw:f64[1,1,13] iix:f64[13,3,3] iiy:i32[1] iiz:f64[1,1,1,3] ija:i32[1]
                  ijb:f64[1,1,1,3] ijc:f64[1,1,1,3] ijd:i32[1] ije:f64[1,1,1,3] ijf:f64[1,1,1,3]
                  ijg:f64[1,1,1,3] ijh:f64[1,1,13,1,1] iji:i32[1] ijj:i32[1] ijk:i32[1]
                  ijl:i32[1] ijm:i32[1] ijn:i32[1] ijo:i32[1] ijp:i32[1] ijq:i32[1]
                  ijr:i32[1] ijs:i32[1] ijt:i32[1] iju:i32[1] ijv:i32[1] ijw:i32[1]
                  ijx:i32[1] ijy:i32[1] ijz:i32[1] ika:i32[1] ikb:i32[1] ikc:i32[1]
                  ikd:i32[1] ike:i32[1] ikf:i32[1] ikg:f64[200,7,1,3] ikh:i32[4,1]
                  iki:i64[4,1] ikj:f64[200,7,4,3] ikk:i32[4,1] ikl:i64[4,1] ikm:f64[200,7,4,3]
                  ikn:i32[4,1] iko:i64[4,1] ikp:i64[13,1] ikq:i64[18,1] ikr:f64[1,1,18]
                  iks:f64[1,1,12,3] ikt:i64[1] iku:i32[1] ikv:i32[1] ikw:i32[1] ikx:i32[1]
                  iky:i32[1] ikz:i32[1] ila:i64[4,1] ilb:i64[4,1] ilc:i32[1] ild:i32[1]
                  ile:i32[1] ilf:i32[1] ilg:i32[1] ilh:i32[1] ili:i64[4,1] ilj:i32[1]
                  ilk:i32[1] ill:i32[1] ilm:i32[1] iln:i32[1] ilo:i32[1] ilp:i64[4,1]
                  ilq:i32[1] ilr:i32[1] ils:i32[1] ilt:i32[1] ilu:i32[1] ilv:i32[1]
                  ilw:f64[1,1,12,3] ilx:i64[1] ily:i32[1] ilz:i32[1] ima:i32[1] imb:i32[1]
                  imc:i32[1] imd:i32[1] ime:i64[4,1] imf:i32[1] img:i32[1] imh:i32[1]
                  imi:i32[1] imj:i32[1] imk:i32[1] iml:i32[1] imm:i32[1] imn:i32[1]
                  imo:i32[1] imp:i32[1] imq:i32[1] imr:i64[4,1] ims:i32[1] imt:i32[1]
                  imu:i32[1] imv:i32[1] imw:i32[1] imx:i32[1] imy:i32[1] imz:i32[1]
                  ina:i32[1] inb:i32[1] inc:i32[1] ind:i32[1] ine:i64[4,1] inf:i32[1]
                  ing:i32[1] inh:i32[1] ini:i32[1] inj:i32[1] ink:i32[1] inl:f64[1,1,18,1]
                  inm:f64[200,7,1,3] inn:i32[4,1] ino:i64[4,1] inp:f64[200,7,4,3]
                  inq:i32[4,1] inr:i64[4,1] ins:f64[200,7,4,3] int:i32[4,1] inu:i64[4,1]
                  inv:i64[13,1] inw:i64[18,1] inx:i32[1] iny:i32[1] inz:i32[1] ioa:i32[1]
                  iob:i32[1] ioc:i32[1] iod:f64[200,7,1,3,3] ioe:i32[4,1] iof:i64[4,1]
                  iog:f64[200,7,4,3,3] ioh:i32[4,1] ioi:i64[4,1] ioj:f64[200,7,4,3,3]
                  iok:i32[4,1] iol:i64[4,1] iom:i64[13,1] ion:i64[18,1] ioo:i32[1]
                  iop:i32[1] ioq:i32[1] ior:i32[1] ios:i32[1] iot:i32[1] iou:f64[1,1,18,18]
                  iov:bool[200,7,18,18] iow:f64[200,7,18,18] iox:bool[200,7,18,18]
                  ioy:f64[200,7,18,18] ioz:f64[1,1,18,18] ipa:bool[200,7,18,18] ipb:f64[200,7,18,18]
                  ipc:bool[200,7,18,18] ipd:f64[200,7,18,18] ipe:bool[200,7,18,18]
                  ipf:f64[200,7,18,18] ipg:f64[200,7,18,18] iph:f64[1,1,4] ipi:i32[1]
                  ipj:i32[1] ipk:i32[1] ipl:i32[1] ipm:i32[1] ipn:i32[1] ipo:i32[1]
                  ipp:i32[1] ipq:i32[1] ipr:i32[1] ips:i32[1] ipt:i32[1] ipu:i32[1]
                  ipv:f64[1,1,36] ipw:f64[1,1,36] ipx:i32[1] ipy:f64[1,1,36] ipz:f64[1,1,36]
                  iqa:f64[1,1,36] iqb:f64[1,1,36] iqc:f64[1,1,36] iqd:f64[1,1,36]
                  iqe:f64[200,7,1] iqf:f64[200,7,1] iqg:f64[1,1,9] iqh:f64[1,1,9]
                  iqi:f64[200,7,1] iqj:f64[200,7,1] iqk:f64[200,7,1] iql:f64[200,7,1]
                  iqm:f64[1,1,180] iqn:f64[1,1,180] iqo:f64[1,1,9] iqp:f64[1,1,9]
                  iqq:f64[7,189,400] iqr:f64[1,7,400] iqs:f64[7,400,400] iqt:f64[1,7,400]
                  iqu:f64[7,400,400] iqv:f64[1,7,400] iqw:f64[7,400,400] iqx:f64[1,7,400]
                  iqy:f64[7,400,54] iqz:f64[1,7,54] ira:f64[1,1,36] irb:f64[1,1,36]
                  irc:f64[1,1,36] ird:f64[200,7,36] ire:f64[] irf:f64[200,7,36] irg:f64[1,1,36]
                  irh:f64[200,7,36] iri:f64[] irj:f64[200,7,36] irk:f64[200,7,180]
                  irl:f64[200,7,9]. let
                  irm:f64[200,7,9] = mul iqg irl
                  irn:f64[200,7,9] = div irm 2.0
                  iro:f64[200,7,9] = add irn iqh
                  irp:f64[200,7,1] = slice[
                    limit_indices=(200, 7, 9)
                    start_indices=(0, 0, 8)
                    strides=None
                  ] iro
                  irq:f64[200,7] = squeeze[dimensions=(2,)] irp
                  irr:f64[200,7,1] = broadcast_in_dim[
                    broadcast_dimensions=(0, 1)
                    shape=(200, 7, 1)
                  ] irq
                  irs:f64[200,7,3] = concatenate[dimension=2] iqe iqf irr
                  irt:f64[200,7,1,3] = reshape[
                    dimensions=None
                    new_sizes=(200, 7, 1, 3)
                  ] irs
                  iru:f64[200,7,3] = squeeze[dimensions=(2,)] irt
                  irv:f64[200,7,4,3] = broadcast_in_dim[
                    broadcast_dimensions=(0, 1, 3)
                    shape=(200, 7, 4, 3)
                  ] iru
                  irw:f64[200,7,12] = reshape[
                    dimensions=None
                    new_sizes=(200, 7, 12)
                  ] irv
                  irx:f64[200,7,8] = slice[
                    limit_indices=(200, 7, 8)
                    start_indices=(0, 0, 0)
                    strides=None
                  ] iro
                  iry:f64[200,7,1] = slice[
                    limit_indices=(200, 7, 1)
                    start_indices=(0, 0, 0)
                    strides=None
                  ] irx
                  irz:f64[200,7] = squeeze[dimensions=(2,)] iry
                  isa:f64[200,7,1] = broadcast_in_dim[
                    broadcast_dimensions=(0, 1)
                    shape=(200, 7, 1)
                  ] irz
                  isb:f64[200,7,1] = slice[
                    limit_indices=(200, 7, 5)
                    start_indices=(0, 0, 4)
                    strides=None
                  ] irx
                  isc:f64[200,7] = squeeze[dimensions=(2,)] isb
                  isd:f64[200,7,1] = broadcast_in_dim[
                    broadcast_dimensions=(0, 1)
                    shape=(200, 7, 1)
                  ] isc
                  ise:f64[200,7,1] = slice[
                    limit_indices=(200, 7, 2)
                    start_indices=(0, 0, 1)
                    strides=None
                  ] irx
                  isf:f64[200,7] = squeeze[dimensions=(2,)] ise
                  isg:f64[200,7,1] = broadcast_in_dim[
                    broadcast_dimensions=(0, 1)
                    shape=(200, 7, 1)
                  ] isf
                  ish:f64[200,7,1] = slice[
                    limit_indices=(200, 7, 6)
                    start_indices=(0, 0, 5)
                    strides=None
                  ] irx
                  isi:f64[200,7] = squeeze[dimensions=(2,)] ish
                  isj:f64[200,7,1] = broadcast_in_dim[
                    broadcast_dimensions=(0, 1)
                    shape=(200, 7, 1)
                  ] isi
                  isk:f64[200,7,1] = slice[
                    limit_indices=(200, 7, 3)
                    start_indices=(0, 0, 2)
                    strides=None
                  ] irx
                  isl:f64[200,7] = squeeze[dimensions=(2,)] isk
                  ism:f64[200,7,1] = broadcast_in_dim[
                    broadcast_dimensions=(0, 1)
                    shape=(200, 7, 1)
                  ] isl
                  isn:f64[200,7,1] = slice[
                    limit_indices=(200, 7, 7)
                    start_indices=(0, 0, 6)
                    strides=None
                  ] irx
                  iso:f64[200,7] = squeeze[dimensions=(2,)] isn
                  isp:f64[200,7,1] = broadcast_in_dim[
                    broadcast_dimensions=(0, 1)
                    shape=(200, 7, 1)
                  ] iso
                  isq:f64[200,7,1] = slice[
                    limit_indices=(200, 7, 4)
                    start_indices=(0, 0, 3)
                    strides=None
                  ] irx
                  isr:f64[200,7] = squeeze[dimensions=(2,)] isq
                  iss:f64[200,7,1] = broadcast_in_dim[
                    broadcast_dimensions=(0, 1)
                    shape=(200, 7, 1)
                  ] isr
                  ist:f64[200,7,1] = slice[
                    limit_indices=(200, 7, 8)
                    start_indices=(0, 0, 7)
                    strides=None
                  ] irx
                  isu:f64[200,7] = squeeze[dimensions=(2,)] ist
                  isv:f64[200,7,1] = broadcast_in_dim[
                    broadcast_dimensions=(0, 1)
                    shape=(200, 7, 1)
                  ] isu
                  isw:f64[200,7,12] = concatenate[dimension=2] isa isd iqi isg isj
                    iqj ism isp iqk iss isv iql
                  isx:f64[200,7,180] = sub irk iqm
                  isy:f64[200,7,180] = div isx iqn
                  isz:f64[200,7,9] = sub irl iqo
                  ita:f64[200,7,9] = div isz iqp
                  itb:f64[200,7,189] = concatenate[dimension=2] isy ita
                  itc:f64[7,200,400] = dot_general[
                    dimension_numbers=(([2], [1]), ([1], [0]))
                    preferred_element_type=float64
                  ] itb iqq
                  itd:f64[200,7,400] = transpose[permutation=(1, 0, 2)] itc
                  ite:f64[200,7,400] = add itd iqr
                  itf:f64[200,7,400] itg:f64[200,7,400] ith:f64[200,7,400] = pjit[
                    name=silu
                    jaxpr=silu
                  ] ite
                  iti:f64[7,200,400] = dot_general[
                    dimension_numbers=(([2], [1]), ([1], [0]))
                    preferred_element_type=float64
                  ] itf iqs
                  itj:f64[200,7,400] = transpose[permutation=(1, 0, 2)] iti
                  itk:f64[200,7,400] = add itj iqt
                  itl:f64[200,7,400] itm:f64[200,7,400] itn:f64[200,7,400] = pjit[
                    name=silu
                    jaxpr=silu
                  ] itk
                  ito:f64[7,200,400] = dot_general[
                    dimension_numbers=(([2], [1]), ([1], [0]))
                    preferred_element_type=float64
                  ] itl iqu
                  itp:f64[200,7,400] = transpose[permutation=(1, 0, 2)] ito
                  itq:f64[200,7,400] = add itp iqv
                  itr:f64[200,7,400] its:f64[200,7,400] itt:f64[200,7,400] = pjit[
                    name=silu
                    jaxpr=silu
                  ] itq
                  itu:f64[7,200,400] = dot_general[
                    dimension_numbers=(([2], [1]), ([1], [0]))
                    preferred_element_type=float64
                  ] itr iqw
                  itv:f64[200,7,400] = transpose[permutation=(1, 0, 2)] itu
                  itw:f64[200,7,400] = add itv iqx
                  itx:f64[200,7,400] ity:f64[200,7,400] itz:f64[200,7,400] = pjit[
                    name=silu
                    jaxpr=silu
                  ] itw
                  iua:f64[7,200,54] = dot_general[
                    dimension_numbers=(([2], [1]), ([1], [0]))
                    preferred_element_type=float64
                  ] itx iqy
                  iub:f64[200,7,54] = transpose[permutation=(1, 0, 2)] iua
                  iuc:f64[200,7,54] = add iub iqz
                  iud:f64[200,7,18] = slice[
                    limit_indices=(200, 7, 18)
                    start_indices=(0, 0, 0)
                    strides=None
                  ] iuc
                  _:f64[200,7,18] iue:f64[4,200,7,18] = scan[
                    _split_transpose=False
                    jaxpr={ lambda ; iuf:f64[200,7,18]. let  in (iuf, iuf) }
                    length=4
                    linear=(False,)
                    num_carry=1
                    num_consts=0
                    reverse=False
                    unroll=1
                  ] iud
                  iug:f64[200,7,36] = slice[
                    limit_indices=(200, 7, 36)
                    start_indices=(0, 0, 0)
                    strides=None
                  ] irk
                  iuh:f64[200,7,36] iui:f64[1,200,7,3] iuj:f64[1,200,7,3] iuk:f64[1,200,7,1]
                    iul:f64[1,200,7] ium:f64[1,200,7,1] iun:f64[1,200,7,3] iuo:f64[1,200,7,1]
                    iup:f64[1,200,7] iuq:f64[1,200,7] iur:f64[1,200,7] ius:f64[1,200,7]
                    iut:f64[1,200,7] iuu:f64[1,200,7] iuv:f64[1,200,7,3] iuw:f64[1,200,7,3]
                    iux:f64[1,200,7,1] iuy:f64[1,200,7] iuz:f64[1,200,7,1] iva:f64[1,200,7,3]
                    ivb:f64[1,200,7,1] ivc:f64[1,200,7] ivd:f64[1,200,7] ive:f64[1,200,7]
                    ivf:f64[1,200,7] ivg:f64[1,200,7] ivh:f64[1,200,7] ivi:f64[1,200,7,12]
                    ivj:f64[1,200,7,12] ivk:f64[1,200,7,12] ivl:f64[1,200,7,12] ivm:f64[1,200,7,12,1]
                    ivn:bool[1,200,7,12,4] ivo:f64[1,200,7,12,4] ivp:f64[1,200,7,12]
                    ivq:bool[1,200,7,12] ivr:f64[1,200,7,12,4] ivs:f64[1,200,7,12,1]
                    ivt:f64[1,200,7,13,3] ivu:f64[1,200,7,13,1] ivv:f64[1,200,7,13]
                    ivw:f64[1,200,7,13,3] ivx:f64[1,200,7,13,1] ivy:f64[1,200,7,4,3]
                    ivz:f64[1,200,7,4,3] iwa:f64[1,200,7,4,1] iwb:f64[1,200,7,4]
                    iwc:f64[1,200,7,4,1] iwd:f64[1,200,7,4,3] iwe:f64[1,200,7,4,1]
                    iwf:f64[1,200,7,4] iwg:f64[1,200,7,4] iwh:f64[1,200,7,4] iwi:f64[1,200,7,4]
                    iwj:f64[1,200,7,4] iwk:f64[1,200,7,4] iwl:f64[1,200,7,4] iwm:f64[1,200,7,4]
                    iwn:f64[1,200,7,4] iwo:f64[1,200,7,4] iwp:f64[1,200,7,4] iwq:f64[1,200,7,4]
                    iwr:f64[1,200,7,4] iws:f64[1,200,7,4] iwt:f64[1,200,7,4] iwu:f64[1,200,7,4]
                    iwv:f64[1,200,7,4] iww:f64[1,200,7,4] iwx:f64[1,200,7,4] iwy:f64[1,200,7,4]
                    iwz:f64[1,200,7,4] ixa:f64[1,200,7,4] ixb:f64[1,200,7,4] ixc:f64[1,200,7,4]
                    ixd:f64[1,200,7,4] ixe:f64[1,200,7,4] ixf:f64[1,200,7,4] ixg:f64[1,200,7,4]
                    ixh:f64[1,200,7,4] ixi:f64[1,200,7,4] ixj:f64[1,200,7,4] ixk:f64[1,200,7,4]
                    ixl:f64[1,200,7,4] ixm:f64[1,200,7,4] ixn:f64[1,200,7,4] ixo:f64[1,200,7,4]
                    ixp:f64[1,200,7,4] ixq:f64[1,200,7,4] ixr:f64[1,200,7,4,3] ixs:f64[1,200,7,4,3]
                    ixt:f64[1,200,7,4,1] ixu:f64[1,200,7,4] ixv:f64[1,200,7,4,1]
                    ixw:f64[1,200,7,4,3] ixx:f64[1,200,7,4,1] ixy:f64[1,200,7,4]
                    ixz:f64[1,200,7,4] iya:f64[1,200,7,4] iyb:f64[1,200,7,4] iyc:f64[1,200,7,4]
                    iyd:f64[1,200,7,4] iye:f64[1,200,7,4] iyf:f64[1,200,7,4] iyg:f64[1,200,7,4]
                    iyh:f64[1,200,7,4] iyi:f64[1,200,7,4] iyj:f64[1,200,7,4] iyk:f64[1,200,7,4]
                    iyl:f64[1,200,7,4] iym:f64[1,200,7,4] iyn:f64[1,200,7,4] iyo:f64[1,200,7,4]
                    iyp:f64[1,200,7,4] iyq:f64[1,200,7,4] iyr:f64[1,200,7,4] iys:f64[1,200,7,4]
                    iyt:f64[1,200,7,4] iyu:f64[1,200,7,4] iyv:f64[1,200,7,4] iyw:f64[1,200,7,4]
                    iyx:f64[1,200,7,4] iyy:f64[1,200,7,4] iyz:f64[1,200,7,4] iza:f64[1,200,7,4]
                    izb:f64[1,200,7,4] izc:f64[1,200,7,4] izd:f64[1,200,7,4] ize:f64[1,200,7,4]
                    izf:f64[1,200,7,4] izg:f64[1,200,7,4] izh:f64[1,200,7,4] izi:f64[1,200,7,4]
                    izj:f64[1,200,7,4] izk:f64[1,200,7,4,3] izl:f64[1,200,7,4,3]
                    izm:f64[1,200,7,4,1] izn:f64[1,200,7,4] izo:f64[1,200,7,4,1]
                    izp:f64[1,200,7,4,3] izq:f64[1,200,7,4,1] izr:f64[1,200,7,4]
                    izs:f64[1,200,7,4] izt:f64[1,200,7,4] izu:f64[1,200,7,4] izv:f64[1,200,7,4]
                    izw:f64[1,200,7,4] izx:f64[1,200,7,4] izy:f64[1,200,7,4] izz:f64[1,200,7,4]
                    jaa:f64[1,200,7,4] jab:f64[1,200,7,4] jac:f64[1,200,7,4] jad:f64[1,200,7,4]
                    jae:f64[1,200,7,4] jaf:f64[1,200,7,4] jag:f64[1,200,7,4] jah:f64[1,200,7,4]
                    jai:f64[1,200,7,4] jaj:f64[1,200,7,4] jak:f64[1,200,7,4] jal:f64[1,200,7,4]
                    jam:f64[1,200,7,4] jan:f64[1,200,7,4] jao:f64[1,200,7,4] jap:f64[1,200,7,4]
                    jaq:f64[1,200,7,4] jar:f64[1,200,7,4] jas:f64[1,200,7,4] jat:f64[1,200,7,4]
                    jau:f64[1,200,7,4] jav:f64[1,200,7,4] jaw:f64[1,200,7,4] jax:f64[1,200,7,4]
                    jay:f64[1,200,7,4] jaz:f64[1,200,7,4] jba:f64[1,200,7,4] jbb:f64[1,200,7,4]
                    jbc:f64[1,200,7,4] jbd:f64[1,200,7,13,1] jbe:bool[1,200,7,13,4]
                    jbf:f64[1,200,7,13,4] jbg:f64[1,200,7,13] jbh:bool[1,200,7,13]
                    jbi:f64[1,200,7,13,4] jbj:f64[1,200,7,13,1] jbk:f64[1,200,7,13,3]
                    jbl:f64[1,200,7,13,1] jbm:f64[1,200,7,13] jbn:f64[1,200,7,13,3]
                    jbo:f64[1,200,7,13,1] jbp:f64[1,200,7,13,3] jbq:f64[1,200,7,13,1]
                    jbr:f64[1,200,7,13] jbs:f64[1,200,7,13,3] jbt:f64[1,200,7,13,1]
                    jbu:f64[1,200,7,13,3] jbv:f64[1,200,7,13,1] jbw:f64[1,200,7,13]
                    jbx:f64[1,200,7,13,3] jby:f64[1,200,7,13,1] jbz:f64[1,200,7,18,3]
                    jca:f64[1,200,7,18,1] jcb:f64[1,200,7,18] jcc:f64[1,200,7,18,3]
                    jcd:f64[1,200,7,18,1] jce:f64[1,200,7,18] jcf:f64[1,200,7,18]
                    jcg:f64[1,200,7,18] jch:f64[1,200,7,18] jci:f64[1,200,7,18] jcj:f64[1,200,7,18]
                    jck:f64[1,200,7,18,3] jcl:f64[1,200,7,18,3] jcm:f64[1,200,7,18,1]
                    jcn:f64[1,200,7,18,3] jco:f64[1,200,7,1,6] jcp:f64[1,200,7,1,1]
                    jcq:f64[1,200,7,1,6] jcr:f64[1,200,7,1,1] jcs:f64[1,200,7,1,6]
                    jct:f64[1,200,7,1,1] jcu:f64[1,200,7,1,1] jcv:f64[1,200,7,1,1]
                    jcw:f64[1,200,7,1,1] jcx:f64[1,200,7,18,1] jcy:f64[1,200,7,1,6]
                    jcz:f64[1,200,7,1,1] jda:f64[1,200,7,1,6] jdb:f64[1,200,7,1,1]
                    jdc:f64[1,200,7,1,6] jdd:f64[1,200,7,1,1] jde:f64[1,200,7,1,1]
                    jdf:f64[1,200,7,1,1] jdg:f64[1,200,7,1,1] jdh:f64[1,200,7,12]
                    jdi:f64[1,200,7,12] jdj:f64[1,200,7,12] jdk:f64[1,200,7,12] jdl:f64[1,200,7,12]
                    jdm:f64[1,200,7,12] jdn:f64[1,200,7,12] jdo:f64[1,200,7,12] jdp:f64[1,200,7,12]
                    jdq:f64[1,200,7,12] jdr:f64[1,200,7,12] jds:f64[1,200,7,12] jdt:f64[1,200,7,6,1]
                    jdu:f64[1,200,7,6,3] jdv:f64[1,200,7,4,1] jdw:f64[1,200,7,4,3]
                    jdx:f64[1,200,7,4,1] jdy:f64[1,200,7,4,3] jdz:f64[1,200,7,4,1]
                    jea:f64[1,200,7,4,3] jeb:f64[1,200,7,1,6] jec:f64[1,200,7,1,1]
                    jed:f64[1,200,7,1,6] jee:f64[1,200,7,1,1] jef:f64[1,200,7,1,6]
                    jeg:f64[1,200,7,1,1] jeh:f64[1,200,7,1,1] jei:f64[1,200,7,1,1]
                    jej:f64[1,200,7,1,1] jek:f64[1,200,7,12] jel:f64[1,200,7,12]
                    jem:f64[1,200,7,12] jen:f64[1,200,7,12] jeo:f64[1,200,7,12] jep:f64[1,200,7,12]
                    jeq:f64[1,200,7,6,1] jer:f64[1,200,7,6,3] jes:f64[1,200,7,4,1]
                    jet:f64[1,200,7,4,3] jeu:f64[1,200,7,4,1] jev:f64[1,200,7,4,3]
                    jew:f64[1,200,7,4,1] jex:f64[1,200,7,4,3] jey:f64[1,200,7,13]
                    jez:f64[1,200,7,13] jfa:f64[1,200,7,13] jfb:f64[1,200,7,13] jfc:f64[1,200,7,13]
                    jfd:f64[1,200,7,13] jfe:f64[1,200,7,13] jff:f64[1,200,7,13] jfg:f64[1,200,7,13]
                    jfh:f64[1,200,7,13] jfi:f64[1,200,7,13] jfj:f64[1,200,7,13] jfk:f64[1,200,7,13]
                    jfl:f64[1,200,7,13] jfm:f64[1,200,7,13] jfn:f64[1,200,7,13] jfo:f64[1,200,7,13]
                    jfp:f64[1,200,7,13] jfq:f64[1,200,7,18,3] jfr:f64[1,200,7,13]
                    jfs:f64[1,200,7,13] jft:f64[1,200,7,13] jfu:f64[1,200,7,13,4]
                    jfv:f64[1,200,7,13] jfw:f64[1,200,7,13] jfx:f64[1,200,7,13] jfy:f64[1,200,7,13]
                    jfz:f64[1,200,7,13] jga:f64[1,200,7,13] jgb:f64[1,200,7,13,3,3]
                    jgc:f64[1,13,200,7,3,3] jgd:f64[1,200,7,13,3,3] jge:f64[1,200,7,13,3,3]
                    jgf:f64[1,200,7,13,3] jgg:f64[1,200,7,13,3,3] jgh:f64[1,200,7,13]
                    jgi:f64[1,200,7,13] jgj:f64[1,200,7,13] jgk:f64[1,200,7,13] jgl:f64[1,200,7,13]
                    jgm:f64[1,200,7,13] jgn:f64[1,200,7,13,3] jgo:f64[1,200,7,13]
                    jgp:f64[1,200,7,13] jgq:f64[1,200,7,13] jgr:f64[1,200,7,13] jgs:f64[1,200,7,13]
                    jgt:f64[1,200,7,13] jgu:f64[1,200,7,13] jgv:f64[1,200,7,13] jgw:f64[1,200,7,13]
                    jgx:f64[1,200,7,13] jgy:f64[1,200,7,13] jgz:f64[1,200,7,13] jha:f64[1,200,7,13]
                    jhb:f64[1,200,7,13] jhc:f64[1,200,7,13] jhd:f64[1,200,7,13] jhe:f64[1,200,7,13]
                    jhf:f64[1,200,7,13] jhg:f64[1,200,7,1,3] jhh:f64[1,200,7,1,3]
                    jhi:f64[1,200,7,1,1] jhj:f64[1,200,7,1] jhk:f64[1,200,7,1,1]
                    jhl:f64[1,200,7,1,3] jhm:f64[1,200,7,1,1] jhn:f64[1,200,7,1]
                    jho:f64[1,200,7,1] jhp:f64[1,200,7,1] jhq:f64[1,200,7,1] jhr:f64[1,200,7,1]
                    jhs:f64[1,200,7,1] jht:f64[1,200,7,4,3] jhu:f64[1,200,7,4,3]
                    jhv:f64[1,200,7,4,1] jhw:f64[1,200,7,4] jhx:f64[1,200,7,4,1]
                    jhy:f64[1,200,7,4,3] jhz:f64[1,200,7,4,1] jia:f64[1,200,7,4]
                    jib:f64[1,200,7,4] jic:f64[1,200,7,4] jid:f64[1,200,7,4] jie:f64[1,200,7,4]
                    jif:f64[1,200,7,4] jig:f64[1,200,7,4,3] jih:f64[1,200,7,4,3]
                    jii:f64[1,200,7,4,1] jij:f64[1,200,7,4] jik:f64[1,200,7,4,1]
                    jil:f64[1,200,7,4,3] jim:f64[1,200,7,4,1] jin:f64[1,200,7,4]
                    jio:f64[1,200,7,4] jip:f64[1,200,7,4] jiq:f64[1,200,7,4] jir:f64[1,200,7,4]
                    jis:f64[1,200,7,4] jit:f64[1,200,7,4,3] jiu:f64[1,200,7,4,3]
                    jiv:f64[1,200,7,4,1] jiw:f64[1,200,7,4] jix:f64[1,200,7,4,1]
                    jiy:f64[1,200,7,4,3] jiz:f64[1,200,7,4,1] jja:f64[1,200,7,4]
                    jjb:f64[1,200,7,4] jjc:f64[1,200,7,4] jjd:f64[1,200,7,4] jje:f64[1,200,7,4]
                    jjf:f64[1,200,7,4] jjg:f64[1,200,7,4] jjh:f64[1,200,7,4] jji:f64[1,200,7,4]
                    jjj:f64[1,200,7,4] jjk:f64[1,200,7,4] jjl:f64[1,200,7,4] jjm:f64[1,200,7,4,3]
                    jjn:f64[1,200,7,4,3] jjo:f64[1,200,7,4,1] jjp:f64[1,200,7,4]
                    jjq:f64[1,200,7,4,1] jjr:f64[1,200,7,4,3] jjs:f64[1,200,7,4,1]
                    jjt:f64[1,200,7,4] jju:f64[1,200,7,4] jjv:f64[1,200,7,4] jjw:f64[1,200,7,4]
                    jjx:f64[1,200,7,4] jjy:f64[1,200,7,4] jjz:f64[1,200,7,4] jka:f64[1,200,7,4]
                    jkb:f64[1,200,7,4] jkc:f64[1,200,7,4] jkd:f64[1,200,7,4] jke:f64[1,200,7,4]
                    jkf:f64[1,200,7,4,3] jkg:f64[1,200,7,4,3] jkh:f64[1,200,7,4,1]
                    jki:f64[1,200,7,4] jkj:f64[1,200,7,4,1] jkk:f64[1,200,7,4,3]
                    jkl:f64[1,200,7,4,1] jkm:f64[1,200,7,4] jkn:f64[1,200,7,4] jko:f64[1,200,7,4]
                    jkp:f64[1,200,7,4] jkq:f64[1,200,7,4] jkr:f64[1,200,7,4] jks:f64[1,200,7,4]
                    jkt:f64[1,200,7,4] jku:f64[1,200,7,4] jkv:f64[1,200,7,4] jkw:f64[1,200,7,4]
                    jkx:f64[1,200,7,4] jky:f64[1,200,7,4,3] jkz:f64[1,200,7,4,3]
                    jla:f64[1,200,7,4,1] jlb:f64[1,200,7,4] jlc:f64[1,200,7,4,1]
                    jld:f64[1,200,7,4,3] jle:f64[1,200,7,4,1] jlf:f64[1,200,7,4]
                    jlg:f64[1,200,7,4] jlh:f64[1,200,7,4] jli:f64[1,200,7,4] jlj:f64[1,200,7,4]
                    jlk:f64[1,200,7,4] jll:f64[1,200,7,18,3] jlm:f64[1,200,7,18]
                    jln:f64[1,200,7,18] jlo:f64[1,200,7,18] jlp:f64[1,200,7,18] jlq:f64[1,200,7,18]
                    jlr:f64[1,200,7,18] jls:f64[1,200,7,18,3] jlt:f64[1,200,7,18,3,3]
                    jlu:f64[1,200,7,18] jlv:f64[1,200,7,18] jlw:f64[1,200,7,18] jlx:f64[1,200,7,18]
                    jly:f64[1,200,7,18] jlz:f64[1,200,7,18] jma:f64[1,200,7,18,18]
                    jmb:f64[1,200,7,18,18] jmc:f64[1,200,7,18,18] jmd:f64[1,4,200,7,18,18]
                    jme:f64[1,4,200,7,18,18] jmf:f64[1,4,200,7,18,18] jmg:f64[1,4,200,7,18]
                    jmh:f64[1,4,200,7,18,18] jmi:f64[1,4,200,7,12] jmj:bool[1,4,200,7,12]
                    jmk:f64[1,4,200,7,12] jml:f64[1,4,200,7,12] jmm:f64[1,4,200,7,12]
                    jmn:f64[1,4,200,7,12] jmo:bool[1,4,200,7,12] jmp:bool[1,4,200,7,12]
                    jmq:bool[1,4,200,7,3] jmr:bool[1,4,200,7] jms:f64[1,4,200,7,3]
                    jmt:f64[1,4,200,7,3] jmu:f64[1,4,200,7,1] jmv:f64[1,4,200,7]
                    jmw:f64[1,4,200,7,1] jmx:f64[1,4,200,7,3] jmy:f64[1,4,200,7,1]
                    jmz:f64[1,4,200,7] jna:f64[1,4,200,7] jnb:f64[1,4,200,7] jnc:f64[1,4,200,7]
                    jnd:f64[1,4,200,7] jne:f64[1,4,200,7] jnf:f64[1,4,200,7,3] jng:f64[1,4,200,7,3]
                    jnh:f64[1,4,200,7,1] jni:f64[1,4,200,7] jnj:f64[1,4,200,7,1]
                    jnk:f64[1,4,200,7,3] jnl:f64[1,4,200,7,1] jnm:f64[1,4,200,7]
                    jnn:f64[1,4,200,7] jno:f64[1,4,200,7] jnp:f64[1,4,200,7] jnq:f64[1,4,200,7]
                    jnr:f64[1,4,200,7] jns:f64[1,4,200,7] jnt:f64[1,4,200,7] jnu:f64[1,4,200,7]
                    jnv:bool[1,4,200,7] jnw:f64[1,4,200,7] jnx:f64[1,4,200,7] jny:f64[1,4,200,7]
                    jnz:f64[1,4,200,7] joa:f64[1,4,200,7] job:bool[1,4,200,7,3] joc:bool[1,4,200,7]
                    jod:bool[1,4,200,7] joe:f64[1,4,200,7] jof:f64[1,4,200,7] jog:f64[1,4,200,7]
                    joh:f64[1,4,200,7] joi:f64[1,4,200,7] joj:bool[1,4,200,7,3] jok:bool[1,4,200,7]
                    jol:bool[1,4,200,7] jom:f64[1,4,200,7] jon:f64[1,4,200,7] joo:f64[1,4,200,7]
                    jop:f64[1,4,200,7] joq:f64[1,4,200,7] jor:bool[1,4,200,7,3] jos:bool[1,4,200,7]
                    jot:bool[1,4,200,7] jou:f64[1,4,200,7] jov:f64[1,4,200,7] jow:f64[1,4,200,7]
                    jox:f64[1,4,200,7] joy:f64[1,4,200,7] joz:f64[1,4,200,7] jpa:f64[1,4,200,7]
                    jpb:f64[1,4,200,7] jpc:f64[1,4,200,7] jpd:f64[1,4,200,7] jpe:f64[1,4,200,7]
                    jpf:f64[1,4,200,7] jpg:f64[1,4,200,7] jph:f64[1,4,200,7] jpi:f64[1,4,200,7]
                    jpj:f64[1,4,200,7] jpk:f64[1,4,200,7] jpl:f64[1,4,200,7] jpm:f64[1,4,200,7]
                    jpn:f64[1,4,200,7] jpo:f64[1,4,200,7] jpp:f64[1,4,200,7] jpq:f64[1,4,200,7]
                    jpr:f64[1,4,200,7] jps:f64[1,4,200,7] jpt:f64[1,4,200,7] jpu:f64[1,4,200,7]
                    jpv:f64[1,4,200,7] jpw:f64[1,4,200,7] jpx:f64[1,4,200,7] jpy:f64[1,4,200,7]
                    jpz:f64[1,4,200,7] jqa:f64[1,4,200,7] jqb:f64[1,4,200,7] jqc:f64[1,4,200,7]
                    jqd:f64[1,4,200,7] jqe:f64[1,4,200,7] jqf:f64[1,4,200,7] jqg:f64[1,4,200,7]
                    jqh:f64[1,4,200,7] jqi:f64[1,4,200,7] jqj:f64[1,4,200,7] jqk:f64[1,4,200,7]
                    jql:f64[1,4,200,7] jqm:f64[1,4,200,7] jqn:f64[1,4,200,7] jqo:f64[1,4,200,7]
                    jqp:f64[1,4,200,7] jqq:f64[1,4,200,7] jqr:f64[1,4,200,7] jqs:f64[1,4,200,7]
                    jqt:f64[1,4,200,7] jqu:f64[1,4,200,7] jqv:f64[1,4,200,7] jqw:f64[1,4,200,7]
                    jqx:f64[1,4,200,7] jqy:f64[1,4,200,7] jqz:f64[1,4,200,7] jra:f64[1,4,200,7]
                    jrb:f64[1,4,200,7] jrc:f64[1,4,200,7] jrd:f64[1,4,200,7] jre:f64[1,4,200,7]
                    jrf:f64[1,4,200,7] jrg:f64[1,4,200,7] jrh:f64[1,4,200,7] jri:f64[1,4,200,7]
                    jrj:f64[1,4,200,7] jrk:f64[1,4,200,7] jrl:f64[1,4,200,7] jrm:f64[1,4,200,7]
                    jrn:f64[1,4,200,7] jro:f64[1,4,200,7] jrp:f64[1,4,200,7] jrq:f64[1,4,200,7]
                    jrr:f64[1,4,200,7] jrs:f64[1,4,200,7] jrt:f64[1,4,200,7] jru:f64[1,4,200,7]
                    jrv:f64[1,4,200,7] jrw:f64[1,4,200,7] jrx:f64[1,4,200,7] jry:f64[1,4,200,7]
                    jrz:f64[1,4,200,7] jsa:f64[1,4,200,7] jsb:f64[1,4,200,7] jsc:f64[1,4,200,7]
                    jsd:f64[1,4,200,7] jse:f64[1,4,200,7] jsf:f64[1,4,200,7] jsg:f64[1,4,200,7]
                    jsh:f64[1,4,200,7] jsi:f64[1,4,200,7] jsj:f64[1,4,200,7] jsk:f64[1,4,200,7]
                    jsl:f64[1,4,200,7] jsm:f64[1,4,200,7] jsn:f64[1,4,200,7] jso:f64[1,4,200,7]
                    jsp:f64[1,4,200,7] jsq:f64[1,4,200,7] jsr:f64[1,4,200,7] jss:f64[1,4,200,7]
                    jst:f64[1,4,200,7] jsu:f64[1,4,200,7] jsv:f64[1,4,200,7] jsw:f64[1,4,200,7]
                    jsx:f64[1,4,200,7] jsy:f64[1,4,200,7] jsz:f64[1,4,200,7] jta:f64[1,4,200,7]
                    jtb:f64[1,4,200,7] jtc:f64[1,4,200,7] jtd:f64[1,4,200,7] jte:f64[1,4,200,7]
                    jtf:f64[1,4,200,7] jtg:f64[1,4,200,7] jth:f64[1,4,200,7] jti:f64[1,4,200,7]
                    jtj:f64[1,4,200,7] jtk:f64[1,4,200,7] jtl:f64[1,4,200,7] jtm:f64[1,4,200,7]
                    jtn:f64[1,4,200,7] jto:f64[1,4,200,7] jtp:f64[1,4,200,7] jtq:f64[1,4,200,7]
                    jtr:f64[1,4,200,7] jts:f64[1,4,200,7] jtt:f64[1,4,200,7] jtu:f64[1,4,200,7]
                    jtv:f64[1,4,200,7] jtw:f64[1,4,200,7] jtx:f64[1,4,200,7,12] jty:f64[1,4,200,7,12]
                    jtz:f64[1,4,200,7,12] jua:f64[1,4,200,7,12] jub:f64[1,4,200,7,12]
                    juc:f64[1,4,200,7,12] jud:f64[1,4,200,7,12] jue:f64[1,4,200,7,12]
                    juf:f64[1,4,200,7,1] jug:f64[1,4,200,7,1] juh:f64[1,4,200,7,1,3]
                    jui:f64[1,4,200,7,1] juj:f64[1,4,200,7,1] juk:f64[1,4,200,7,1,1]
                    jul:f64[1,4,200,7,1,1] jum:f64[1,4,200,7,1] jun:f64[1,4,200,7,1]
                    juo:f64[1,4,200,7,1] jup:f64[1,4,200,7,1] juq:f64[1,4,200,7,1]
                    jur:f64[1,4,200,7,1] jus:f64[1,4,200,7,1] jut:f64[1,4,200,7,1]
                    juu:f64[1,4,200,7,1] juv:f64[1,4,200,7,1] juw:f64[1,4,200,7,1]
                    jux:f64[1,4,200,7,1] juy:f64[1,4,200,7,1] juz:f64[1,4,200,7,1]
                    jva:f64[1,4,200,7,1] jvb:f64[1,4,200,7,1] jvc:f64[1,4,200,7,1]
                    jvd:f64[1,4,200,7,1] jve:f64[1,4,200,7,1] jvf:f64[1,4,200,7,1]
                    jvg:f64[1,4,200,7,1] jvh:f64[1,4,200,7,1] jvi:f64[1,4,200,7,1]
                    jvj:f64[1,4,200,7,1] jvk:f64[1,4,200,7,1] jvl:f64[1,4,200,7,1]
                    jvm:f64[1,4,200,7,1] jvn:f64[1,4,200,7,1] jvo:f64[1,4,200,7,1]
                    jvp:f64[1,4,200,7,1] jvq:f64[1,4,200,7,1] jvr:f64[1,4,200,7,1]
                    jvs:f64[1,4,200,7,1] jvt:f64[1,4,200,7,1] jvu:f64[1,4,200,7,1]
                    jvv:f64[1,4,200,7,1] jvw:f64[1,4,200,7,1] jvx:f64[1,4,200,7,1]
                    jvy:f64[1,4,200,7,1] jvz:f64[1,4,200,7,1,1] jwa:f64[1,4,200,7,1,4]
                    jwb:f64[1,4,200,7,1] jwc:f64[1,4,200,7,1,1] jwd:f64[1,200,7,3]
                    jwe:f64[1,200,7,3] jwf:f64[1,200,7,1] jwg:f64[1,200,7] jwh:f64[1,200,7,1]
                    jwi:f64[1,200,7,3] jwj:f64[1,200,7,1] jwk:f64[1,200,7] jwl:f64[1,200,7]
                    jwm:f64[1,200,7] jwn:f64[1,200,7] jwo:f64[1,200,7] jwp:f64[1,200,7]
                    jwq:f64[1,200,7,3] jwr:f64[1,200,7,3] jws:f64[1,200,7,1] jwt:f64[1,200,7]
                    jwu:f64[1,200,7,1] jwv:f64[1,200,7,3] jww:f64[1,200,7,1] jwx:f64[1,200,7]
                    jwy:f64[1,200,7] jwz:f64[1,200,7] jxa:f64[1,200,7] jxb:f64[1,200,7]
                    jxc:f64[1,200,7] jxd:f64[1,200,7] jxe:f64[1,200,7] jxf:f64[1,200,7]
                    jxg:f64[1,200,7] jxh:f64[1,200,7] = scan[
                    _split_transpose=False
                    jaxpr={ lambda ; jxi:f64[1,1,18,18] jxj:bool[200,7,18,18] jxk:f64[200,7,18,18]
                        jxl:bool[200,7,18,18] jxm:f64[200,7,18,18] jxn:bool[200,7,18,18]
                        jxo:f64[200,7,18,18] jxp:f64[200,7,18,18] jxq:f64[200,7,18]
                        jxr:i32[12,1] jxs:f64[1,1,12] jxt:f64[200,7,12] jxu:f64[200,7,12]
                        jxv:bool[200,7,12] jxw:f64[200,7,12] jxx:f64[200,7,12] jxy:f64[200,7,12]
                        jxz:f64[200,7,12] jya:bool[200,7,12] jyb:bool[200,7,12] jyc:f64[1,1,12]
                        jyd:f64[1,1,12] jye:f64[1,1,12] jyf:f64[1,1,12] jyg:f64[1,1,12]
                        jyh:f64[1,1,12] jyi:f64[1,1,12] jyj:f64[1,1,12] jyk:f64[1,1,12]
                        jyl:f64[1,1,12] jym:f64[1,1,12] jyn:f64[1,1,3] jyo:f64[1,1,4]
                        jyp:i32[1] jyq:i32[1] jyr:i32[1] jys:i32[1] jyt:i32[1] jyu:i32[1]
                        jyv:i32[1] jyw:i32[1] jyx:i32[1] jyy:i32[1] jyz:i32[1] jza:i32[1]
                        jzb:f64[1,1,36] jzc:f64[1,1,36] jzd:f64[1,1,36] jze:f64[1,1,36]
                        jzf:f64[] jzg:f64[] jzh:bool[] jzi:bool[200,7] jzj:bool[200,7]
                        jzk:f64[] jzl:f64[] jzm:f64[] jzn:f64[] jzo:f64[] jzp:f64[]
                        jzq:f64[] jzr:f64[] jzs:f64[200,7,1] jzt:f64[1,1,3] jzu:f64[]
                        jzv:f64[] jzw:bool[] jzx:bool[200,7] jzy:bool[200,7] jzz:f64[]
                        kaa:f64[] kab:f64[] kac:f64[] kad:f64[] kae:f64[] kaf:f64[]
                        kag:f64[] kah:f64[200,7,1] kai:f64[1,1,3] kaj:f64[] kak:f64[]
                        kal:bool[] kam:bool[200,7] kan:bool[200,7] kao:f64[] kap:f64[]
                        kaq:f64[] kar:f64[] kas:f64[] kat:f64[] kau:f64[] kav:f64[]
                        kaw:f64[200,7,1] kax:f64[1,1,3] kay:f64[] kaz:f64[] kba:bool[]
                        kbb:bool[200,7] kbc:bool[200,7] kbd:f64[] kbe:f64[] kbf:f64[]
                        kbg:f64[] kbh:f64[] kbi:f64[] kbj:f64[] kbk:f64[] kbl:f64[200,7,1]
                        kbm:f64[] kbn:f64[] kbo:f64[] kbp:f64[] kbq:f64[] kbr:f64[]
                        kbs:f64[] kbt:f64[200,7] kbu:f64[200,7] kbv:f64[200,7] kbw:f64[200,7]
                        kbx:f64[] kby:f64[200,7] kbz:f64[200,7] kca:f64[200,7] kcb:f64[200,7]
                        kcc:f64[] kcd:f64[] kce:f64[] kcf:f64[] kcg:f64[] kch:f64[]
                        kci:f64[] kcj:f64[200,7] kck:f64[200,7] kcl:f64[200,7] kcm:f64[200,7]
                        kcn:f64[] kco:f64[200,7] kcp:f64[200,7] kcq:f64[200,7] kcr:f64[200,7]
                        kcs:f64[] kct:f64[] kcu:f64[] kcv:f64[] kcw:f64[] kcx:f64[]
                        kcy:f64[] kcz:f64[200,7] kda:f64[200,7] kdb:f64[200,7] kdc:f64[200,7]
                        kdd:f64[] kde:f64[200,7] kdf:f64[200,7] kdg:f64[200,7] kdh:f64[200,7]
                        kdi:f64[] kdj:f64[] kdk:f64[] kdl:f64[] kdm:f64[] kdn:f64[]
                        kdo:f64[] kdp:f64[200,7] kdq:f64[200,7] kdr:f64[200,7] kds:f64[200,7]
                        kdt:f64[] kdu:f64[200,7] kdv:f64[200,7] kdw:f64[200,7] kdx:f64[200,7]
                        kdy:f64[1,1,12] kdz:f64[200,7,12] kea:f64[200,7,12] keb:f64[200,7,12]
                        kec:f64[200,7,12] ked:f64[1,1,12] kee:f64[200,7,12] kef:f64[200,7,12]
                        keg:f64[200,7,12] keh:f64[200,7,12] kei:f64[1,1,12] kej:f64[1,1,12]
                        kek:f64[1,1,12] kel:f64[200,7,12] kem:f64[200,7,12] ken:f64[200,7,12]
                        keo:f64[200,7,12] kep:f64[1,1,12] keq:f64[200,7,12] ker:f64[200,7,12]
                        kes:f64[200,7,12] ket:f64[200,7,12] keu:f64[1,1,12] kev:i32[12,1]
                        kew:f64[1,1,12] kex:i32[12,1] key:f64[1,1,12] kez:f64[1,1,12]
                        kfa:f64[200,7,12] kfb:f64[200,7,12] kfc:f64[200,7,12] kfd:f64[200,7,12]
                        kfe:f64[1,1,12] kff:f64[200,7,12] kfg:f64[200,7,12] kfh:f64[200,7,12]
                        kfi:f64[200,7,12] kfj:f64[1,1,12] kfk:f64[200,7,6] kfl:f64[200,7,19]
                        kfm:i32[1] kfn:f64[1,1,36] kfo:f64[1,1,36] kfp:i32[1] kfq:f64[1,1,12]
                        kfr:f64[1,1,18] kfs:f64[200,7,18] kft:i32[1] kfu:i32[1] kfv:i32[1]
                        kfw:i32[1] kfx:i32[1] kfy:i32[1] kfz:i32[1] kga:i32[1] kgb:f64[1,1,4]
                        kgc:i32[1] kgd:i32[1] kge:i32[1] kgf:i32[1] kgg:i32[1] kgh:i32[1]
                        kgi:i32[1] kgj:f64[1,1,13,1] kgk:f64[200,7,1,3] kgl:i32[6,1]
                        kgm:f64[18,3] kgn:f64[1,1,13] kgo:f64[1,1,12] kgp:f64[1,1,12]
                        kgq:f64[1,1,12] kgr:f64[] kgs:f64[] kgt:bool[] kgu:bool[]
                        kgv:f64[200,7,12,4] kgw:f64[200,7,12] kgx:i64[1] kgy:f64[1,1,13]
                        kgz:f64[1,1,13] kha:f64[1,1,13] khb:f64[1,1,13] khc:f64[1,1,13]
                        khd:f64[1,1,13] khe:f64[1,1,13] khf:f64[1,1,13] khg:f64[1,1,13]
                        khh:f64[1,1,13] khi:f64[1,1,13] khj:f64[1,1,13] khk:f64[1,1,13]
                        khl:f64[1,1,13] khm:f64[1,1,13] khn:i64[4,1] kho:i64[4,1]
                        khp:i64[4,1] khq:i64[4,1] khr:i64[13,1] khs:f64[] kht:f64[]
                        khu:bool[] khv:bool[] khw:f64[200,7,13,4] khx:f64[200,7,13]
                        khy:f64[200,7,1,4] khz:i32[13,1] kia:f64[1,1,13] kib:f64[1,1,13]
                        kic:f64[1,1,13] kid:f64[1,1,13] kie:f64[1,1,13] kif:f64[1,1,13]
                        kig:f64[1,1,13] kih:f64[1,1,13] kii:f64[1,1,13] kij:f64[1,1,13]
                        kik:f64[1,1,13] kil:f64[1,1,13] kim:f64[1,1,13] kin:f64[1,1,13]
                        kio:f64[1,1,13] kip:f64[1,1,13] kiq:f64[1,1,13] kir:f64[1,1,13]
                        kis:f64[1,1,13] kit:f64[1,1,13] kiu:f64[1,1,13] kiv:f64[1,1,13]
                        kiw:f64[1,1,13] kix:f64[1,1,13] kiy:f64[1,1,13] kiz:f64[1,1,13]
                        kja:f64[1,1,13] kjb:f64[1,1,13] kjc:f64[1,1,13] kjd:f64[1,1,13]
                        kje:f64[1,1,13] kjf:f64[1,1,13] kjg:i64[18,1] kjh:f64[18,3]
                        kji:f64[1,1,18,3] kjj:i32[1] kjk:f64[1,1,18] kjl:i32[1] kjm:f64[1,1,18]
                        kjn:f64[1,1,18] kjo:i32[1] kjp:f64[1,1,18] kjq:f64[1,1,18]
                        kjr:f64[1,1,18] kjs:f64[1,1,18,3] kjt:f64[1,1,18,1] kju:f64[1,1,18,1]
                        kjv:f64[1,1,18] kjw:i32[1] kjx:f64[1,1,18] kjy:i32[1] kjz:f64[1,1,18]
                        kka:i32[1] kkb:f64[1,1,18] kkc:f64[1,1,18] kkd:f64[1,1,18]
                        kke:f64[18,3] kkf:f64[1,1,18,3] kkg:f64[200,7,13,3] kkh:i32[13,1]
                        kki:f64[1,1,13,1] kkj:f64[1,1,13,3] kkk:f64[13,3] kkl:f64[1,1,12,3]
                        kkm:i64[1] kkn:f64[1,1,13,3] kko:f64[1,1,13,3] kkp:f64[13,3]
                        kkq:f64[1,1,13,3] kkr:i32[1] kks:f64[1,1,13] kkt:i32[1] kku:f64[1,1,13]
                        kkv:f64[1,1,13] kkw:i32[1] kkx:f64[1,1,13] kky:f64[1,1,13]
                        kkz:f64[1,1,13] kla:f64[1,1,13,3] klb:f64[1,1,13,1] klc:f64[1,1,13,1]
                        kld:f64[1,1,13] kle:i32[1] klf:f64[1,1,13] klg:i32[1] klh:f64[1,1,13]
                        kli:i32[1] klj:f64[1,1,13] klk:f64[1,1,13] kll:f64[1,1,13]
                        klm:i64[4,1] kln:i64[4,1] klo:i32[1] klp:i32[1] klq:i32[1]
                        klr:i32[1] kls:i32[1] klt:i32[1] klu:i64[4,1] klv:i32[1]
                        klw:i32[1] klx:i32[1] kly:i32[1] klz:i32[1] kma:i32[1] kmb:i64[4,1]
                        kmc:i32[1] kmd:i32[1] kme:i32[1] kmf:i32[1] kmg:i32[1] kmh:i32[1]
                        kmi:i64[13,1] kmj:f64[13,3] kmk:f64[1,1,13,3] kml:i32[1]
                        kmm:f64[1,1,13] kmn:i32[1] kmo:f64[1,1,13] kmp:f64[1,1,13]
                        kmq:i32[1] kmr:f64[1,1,13] kms:f64[1,1,13] kmt:f64[1,1,13]
                        kmu:i32[13,1] kmv:f64[1,1,13,1] kmw:f64[200,7,1,3] kmx:i32[13,1]
                        kmy:f64[13,3] kmz:f64[1,1,13,3] kna:i32[1] knb:f64[1,1,13]
                        knc:i32[1] knd:f64[1,1,13] kne:f64[1,1,13] knf:i32[1] kng:f64[1,1,13]
                        knh:f64[1,1,13] kni:f64[1,1,13] knj:f64[1,1,13,3] knk:i32[1]
                        knl:f64[1,1,13] knm:i32[1] knn:f64[1,1,13] kno:f64[1,1,13]
                        knp:i32[1] knq:f64[1,1,13] knr:f64[1,1,13] kns:f64[1,1,13]
                        knt:i64[18,1] knu:i32[1] knv:i32[1] knw:i32[1] knx:i32[1]
                        kny:i32[1] knz:i32[1] koa:f64[1,1,18,3] kob:f64[1,1,18,1]
                        koc:f64[1,1,18,1] kod:f64[1,1,18] koe:i32[1] kof:f64[1,1,18]
                        kog:i32[1] koh:f64[1,1,18] koi:i32[1] koj:f64[1,1,18] kok:f64[1,1,18]
                        kol:f64[1,1,18] kom:i32[1] kon:i32[1] koo:i32[1] kop:i32[1]
                        koq:i32[1] kor:i32[1] kos:i32[1] kot:i32[1] kou:i32[1] kov:i32[1]
                        kow:i32[1] kox:i32[1] koy:i32[1] koz:f64[200,7,1,3,3] kpa:f64[200,7,1,3]
                        kpb:i32[6,1] kpc:i64[4,1] kpd:i32[4,1] kpe:i64[4,1] kpf:i32[4,1]
                        kpg:i64[4,1] kph:i32[4,1] kpi:i64[4,1] kpj:i64[13,1] kpk:f64[200,7,1,3]
                        kpl:i32[13,1] kpm:i32[1] kpn:i32[1] kpo:i32[1] kpp:i32[1]
                        kpq:i32[1] kpr:i32[1] kps:f64[200,7,1,3] kpt:i32[6,1] kpu:i64[4,1]
                        kpv:i32[4,1] kpw:i64[4,1] kpx:i32[4,1] kpy:i64[4,1] kpz:i32[4,1]
                        kqa:i64[4,1] kqb:i64[13,1] kqc:f64[200,7,1,3] kqd:i32[13,1]
                        kqe:i32[1] kqf:i32[1] kqg:i32[1] kqh:i32[1] kqi:i32[1] kqj:i32[1]
                        kqk:i64[4,1] kql:i32[4,1] kqm:i64[4,1] kqn:i64[4,1] kqo:i32[4,1]
                        kqp:i64[4,1] kqq:i64[4,1] kqr:i32[4,1] kqs:i64[4,1] kqt:i64[4,1]
                        kqu:i64[13,1] kqv:f64[1,1,13,1] kqw:f64[200,7,1,3] kqx:i32[6,1]
                        kqy:i32[1] kqz:i32[1] kra:i32[1] krb:i32[1] krc:i32[1] krd:i32[1]
                        kre:i32[1] krf:f64[200,7,1,3,3] krg:i32[1] krh:i32[1] kri:i32[1]
                        krj:i32[1] krk:i32[1] krl:i32[1] krm:i64[4,1] krn:i32[4,1]
                        kro:i64[4,1] krp:i32[4,1] krq:i64[4,1] krr:i32[4,1] krs:i64[4,1]
                        krt:i64[13,1] kru:i32[1] krv:i32[1] krw:i32[1] krx:i32[1]
                        kry:i32[1] krz:i32[1] ksa:f64[1,1,13,1] ksb:i32[1] ksc:i32[1]
                        ksd:i32[1] kse:i32[1] ksf:i32[1] ksg:i32[1] ksh:i32[1] ksi:i32[1]
                        ksj:i32[1] ksk:i32[1] ksl:i32[1] ksm:i32[1] ksn:f64[200,7,1,3]
                        kso:i32[4,1] ksp:i64[4,1] ksq:f64[200,7,4,3] ksr:i32[4,1]
                        kss:i64[4,1] kst:f64[200,7,4,3] ksu:i32[4,1] ksv:i64[4,1]
                        ksw:i64[13,1] ksx:i64[18,1] ksy:f64[1,1,13] ksz:f64[1,1,13]
                        kta:f64[1,1,13] ktb:f64[1,1,13] ktc:f64[1,1,13] ktd:f64[1,1,13]
                        kte:f64[1,1,13] ktf:f64[1,1,13] ktg:f64[1,1,13] kth:f64[1,1,13]
                        kti:f64[1,1,13] ktj:f64[1,1,13] ktk:f64[1,1,13] ktl:f64[1,1,13]
                        ktm:f64[1,1,13] ktn:f64[1,1,13] kto:f64[13,3,3] ktp:i32[1]
                        ktq:f64[1,1,1,3] ktr:i32[1] kts:f64[1,1,1,3] ktt:f64[1,1,1,3]
                        ktu:i32[1] ktv:f64[1,1,1,3] ktw:f64[1,1,1,3] ktx:f64[1,1,1,3]
                        kty:f64[1,1,13,1,1] ktz:i32[1] kua:i32[1] kub:i32[1] kuc:i32[1]
                        kud:i32[1] kue:i32[1] kuf:i32[1] kug:i32[1] kuh:i32[1] kui:i32[1]
                        kuj:i32[1] kuk:i32[1] kul:i32[1] kum:i32[1] kun:i32[1] kuo:i32[1]
                        kup:i32[1] kuq:i32[1] kur:i32[1] kus:i32[1] kut:i32[1] kuu:i32[1]
                        kuv:i32[1] kuw:i32[1] kux:f64[200,7,1,3] kuy:i32[4,1] kuz:i64[4,1]
                        kva:f64[200,7,4,3] kvb:i32[4,1] kvc:i64[4,1] kvd:f64[200,7,4,3]
                        kve:i32[4,1] kvf:i64[4,1] kvg:i64[13,1] kvh:i64[18,1] kvi:f64[1,1,18]
                        kvj:f64[1,1,12,3] kvk:i64[1] kvl:i32[1] kvm:i32[1] kvn:i32[1]
                        kvo:i32[1] kvp:i32[1] kvq:i32[1] kvr:i64[4,1] kvs:i64[4,1]
                        kvt:i32[1] kvu:i32[1] kvv:i32[1] kvw:i32[1] kvx:i32[1] kvy:i32[1]
                        kvz:i64[4,1] kwa:i32[1] kwb:i32[1] kwc:i32[1] kwd:i32[1]
                        kwe:i32[1] kwf:i32[1] kwg:i64[4,1] kwh:i32[1] kwi:i32[1]
                        kwj:i32[1] kwk:i32[1] kwl:i32[1] kwm:i32[1] kwn:f64[1,1,12,3]
                        kwo:i64[1] kwp:i32[1] kwq:i32[1] kwr:i32[1] kws:i32[1] kwt:i32[1]
                        kwu:i32[1] kwv:i64[4,1] kww:i32[1] kwx:i32[1] kwy:i32[1]
                        kwz:i32[1] kxa:i32[1] kxb:i32[1] kxc:i32[1] kxd:i32[1] kxe:i32[1]
                        kxf:i32[1] kxg:i32[1] kxh:i32[1] kxi:i64[4,1] kxj:i32[1]
                        kxk:i32[1] kxl:i32[1] kxm:i32[1] kxn:i32[1] kxo:i32[1] kxp:i32[1]
                        kxq:i32[1] kxr:i32[1] kxs:i32[1] kxt:i32[1] kxu:i32[1] kxv:i64[4,1]
                        kxw:i32[1] kxx:i32[1] kxy:i32[1] kxz:i32[1] kya:i32[1] kyb:i32[1]
                        kyc:f64[1,1,18,1] kyd:f64[200,7,1,3] kye:i32[4,1] kyf:i64[4,1]
                        kyg:f64[200,7,4,3] kyh:i32[4,1] kyi:i64[4,1] kyj:f64[200,7,4,3]
                        kyk:i32[4,1] kyl:i64[4,1] kym:i64[13,1] kyn:i64[18,1] kyo:i32[1]
                        kyp:i32[1] kyq:i32[1] kyr:i32[1] kys:i32[1] kyt:i32[1] kyu:f64[200,7,1,3,3]
                        kyv:i32[4,1] kyw:i64[4,1] kyx:f64[200,7,4,3,3] kyy:i32[4,1]
                        kyz:i64[4,1] kza:f64[200,7,4,3,3] kzb:i32[4,1] kzc:i64[4,1]
                        kzd:i64[13,1] kze:i64[18,1] kzf:i32[1] kzg:i32[1] kzh:i32[1]
                        kzi:i32[1] kzj:i32[1] kzk:i32[1] kzl:f64[1,1,18,18] kzm:bool[200,7,18,18]
                        kzn:f64[200,7,18,18] kzo:bool[200,7,18,18] kzp:f64[200,7,18,18]
                        kzq:f64[1,1,18,18] kzr:bool[200,7,18,18] kzs:f64[200,7,18,18]
                        kzt:bool[200,7,18,18] kzu:f64[200,7,18,18] kzv:bool[200,7,18,18]
                        kzw:f64[200,7,18,18] kzx:f64[200,7,18,18] kzy:f64[1,1,4]
                        kzz:i32[1] laa:i32[1] lab:i32[1] lac:i32[1] lad:i32[1] lae:i32[1]
                        laf:i32[1] lag:i32[1] lah:i32[1] lai:i32[1] laj:i32[1] lak:i32[1]
                        lal:i32[1] lam:f64[1,1,36] lan:f64[1,1,36] lao:i32[1] lap:f64[1,1,36]
                        laq:f64[1,1,36] lar:f64[1,1,36] las:f64[1,1,36] lat:f64[1,1,36]
                        lau:f64[1,1,36] lav:f64[200,7,12] law:f64[200,7,12] lax:f64[4,200,7,18]
                        lay:f64[200,7,36]. let
                        laz:f64[200,7,36] = add lay 1.0
                        lba:f64[200,7,36] = mul laz kfn
                        lbb:f64[200,7,36] = div lba 2.0
                        lbc:f64[200,7,36] = add lbb kfo
                        lbd:f64[200,7,4] = slice[
                          limit_indices=(200, 7, 4)
                          start_indices=(0, 0, 0)
                          strides=None
                        ] lbc
                        lbe:f64[200,7,19] = scatter[
                          dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(), scatter_dims_to_operand_dims=(2,))
                          indices_are_sorted=True
                          mode=GatherScatterMode.FILL_OR_DROP
                          unique_indices=True
                          update_consts=()
                          update_jaxpr=None
                        ] kfl kfm lbd
                        lbf:f64[200,7,12] = slice[
                          limit_indices=(200, 7, 16)
                          start_indices=(0, 0, 4)
                          strides=None
                        ] lbc
                        lbg:f64[200,7,19] = scatter[
                          dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(), scatter_dims_to_operand_dims=(2,))
                          indices_are_sorted=True
                          mode=GatherScatterMode.FILL_OR_DROP
                          unique_indices=True
                          update_consts=()
                          update_jaxpr=None
                        ] lbe kfp lbf
                        lbh:f64[200,7,12] = slice[
                          limit_indices=(200, 7, 19)
                          start_indices=(0, 0, 7)
                          strides=None
                        ] lbg
                        lbi:f64[200,7,12] = neg lbh
                        lbj:f64[200,7,12] = mul lbi kfq
                        lbk:f64[200,7,18] = concatenate[dimension=2] kfk lbj
                        lbl:f64[200,7,4] = slice[
                          limit_indices=(200, 7, 4)
                          start_indices=(0, 0, 0)
                          strides=None
                        ] lbc
                        lbm:f64[200,7,3] = slice[
                          limit_indices=(200, 7, 4)
                          start_indices=(0, 0, 1)
                          strides=None
                        ] lbl
                        lbn:f64[200,7,3] = slice[
                          limit_indices=(200, 7, 19)
                          start_indices=(0, 0, 16)
                          strides=None
                        ] lbc
                        lbo:f64[200,7] = dot_general[
                          dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
                          preferred_element_type=float64
                        ] lbm lbn
                        lbp:f64[200,7,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1)
                          shape=(200, 7, 1)
                        ] lbo
                        lbq:f64[200,7,3] = mul lbp lbm
                        lbr:f64[200,7,3] = mul 2.0 lbq
                        lbs:f64[200,7,1] = slice[
                          limit_indices=(200, 7, 1)
                          start_indices=(0, 0, 0)
                          strides=None
                        ] lbl
                        lbt:f64[200,7] = squeeze[dimensions=(2,)] lbs
                        lbu:f64[200,7] = mul lbt lbt
                        lbv:f64[200,7] = dot_general[
                          dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
                          preferred_element_type=float64
                        ] lbm lbm
                        lbw:f64[200,7] = sub lbu lbv
                        lbx:f64[200,7,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1)
                          shape=(200, 7, 1)
                        ] lbw
                        lby:f64[200,7,3] = mul lbx lbn
                        lbz:f64[200,7,3] = add lbr lby
                        lca:f64[200,7] = mul 2.0 lbt
                        lcb:f64[200,7,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1)
                          shape=(200, 7, 1)
                        ] lca
                        lcc:f64[200,7,3] lcd:f64[200,7] lce:f64[200,7] lcf:f64[200,7]
                          lcg:f64[200,7] lch:f64[200,7] lci:f64[200,7] = pjit[
                          name=cross
                          jaxpr=cross10
                        ] lbm lbn kfu kfv kfw kfx kfy kfz
                        lcj:f64[200,7,3] = mul lcb lcc
                        lck:f64[200,7,3] = add lbz lcj
                        lcl:f64[200,7,18] = scatter[
                          dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(), scatter_dims_to_operand_dims=(2,))
                          indices_are_sorted=True
                          mode=GatherScatterMode.FILL_OR_DROP
                          unique_indices=True
                          update_consts=()
                          update_jaxpr=None
                        ] kfs kft lck
                        lcm:f64[200,7,4] = mul lbl kgb
                        lcn:f64[200,7,3] = slice[
                          limit_indices=(200, 7, 4)
                          start_indices=(0, 0, 1)
                          strides=None
                        ] lcm
                        lco:f64[200,7,3] = slice[
                          limit_indices=(200, 7, 22)
                          start_indices=(0, 0, 19)
                          strides=None
                        ] lbc
                        lcp:f64[200,7] = dot_general[
                          dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
                          preferred_element_type=float64
                        ] lcn lco
                        lcq:f64[200,7,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1)
                          shape=(200, 7, 1)
                        ] lcp
                        lcr:f64[200,7,3] = mul lcq lcn
                        lcs:f64[200,7,3] = mul 2.0 lcr
                        lct:f64[200,7,1] = slice[
                          limit_indices=(200, 7, 1)
                          start_indices=(0, 0, 0)
                          strides=None
                        ] lcm
                        lcu:f64[200,7] = squeeze[dimensions=(2,)] lct
                        lcv:f64[200,7] = mul lcu lcu
                        lcw:f64[200,7] = dot_general[
                          dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
                          preferred_element_type=float64
                        ] lcn lcn
                        lcx:f64[200,7] = sub lcv lcw
                        lcy:f64[200,7,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1)
                          shape=(200, 7, 1)
                        ] lcx
                        lcz:f64[200,7,3] = mul lcy lco
                        lda:f64[200,7,3] = add lcs lcz
                        ldb:f64[200,7] = mul 2.0 lcu
                        ldc:f64[200,7,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1)
                          shape=(200, 7, 1)
                        ] ldb
                        ldd:f64[200,7,3] lde:f64[200,7] ldf:f64[200,7] ldg:f64[200,7]
                          ldh:f64[200,7] ldi:f64[200,7] ldj:f64[200,7] = pjit[
                          name=cross
                          jaxpr=cross10
                        ] lcn lco kgc kgd kge kgf kgg kgh
                        ldk:f64[200,7,3] = mul ldc ldd
                        ldl:f64[200,7,3] = add lda ldk
                        ldm:f64[200,7,18] = scatter[
                          dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(), scatter_dims_to_operand_dims=(2,))
                          indices_are_sorted=True
                          mode=GatherScatterMode.FILL_OR_DROP
                          unique_indices=True
                          update_consts=()
                          update_jaxpr=None
                        ] lcl kga ldl
                        ldn:f64[200,7,12] = slice[
                          limit_indices=(200, 7, 34)
                          start_indices=(0, 0, 22)
                          strides=None
                        ] lbc
                        ldo:f64[200,7,18] = scatter[
                          dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(), scatter_dims_to_operand_dims=(2,))
                          indices_are_sorted=True
                          mode=GatherScatterMode.FILL_OR_DROP
                          unique_indices=True
                          update_consts=()
                          update_jaxpr=None
                        ] ldm kgi ldn
                        ldp:f64[200,7,18] = mul kfr ldo
                        ldq:f64[200,7,18] = sub lbk ldp
                        ldr:f64[200,7,7] = slice[
                          limit_indices=(200, 7, 7)
                          start_indices=(0, 0, 0)
                          strides=None
                        ] lbg
                        lds:f64[200,7,1,7] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 1, 7)
                        ] ldr
                        ldt:f64[200,7,1,4] = slice[
                          limit_indices=(200, 7, 1, 7)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] lds
                        ldu:f64[200,7,12] = slice[
                          limit_indices=(200, 7, 19)
                          start_indices=(0, 0, 7)
                          strides=None
                        ] lbg
                        ldv:f64[200,7,12] = div ldu 2.0
                        ldw:f64[200,7,12] = cos ldv
                        ldx:f64[200,7,12,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 12, 1)
                        ] ldw
                        ldy:f64[200,7,12] = div ldu 2.0
                        ldz:f64[200,7,12] = sin ldy
                        lea:f64[200,7,12] = mul kgo ldz
                        leb:f64[200,7,12,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 12, 1)
                        ] lea
                        lec:f64[200,7,12] = div ldu 2.0
                        led:f64[200,7,12] = sin lec
                        lee:f64[200,7,12] = mul kgp led
                        lef:f64[200,7,12,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 12, 1)
                        ] lee
                        leg:f64[200,7,12] = div ldu 2.0
                        leh:f64[200,7,12] = sin leg
                        lei:f64[200,7,12] = mul kgq leh
                        lej:f64[200,7,12,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 12, 1)
                        ] lei
                        lek:f64[200,7,12,4] = concatenate[dimension=3] ldx leb lef
                          lej
                        lel:bool[200,7,12] = pjit[
                          name=allclose
                          jaxpr={ lambda ; lem:f64[200,7,12,4] len:f64[] leo:f64[]
                              lep:bool[] leq:bool[]. let
                              ler:bool[200,7,12,4] = pjit[
                                name=isclose
                                jaxpr={ lambda ; les:f64[200,7,12,4] let:f64[] leu:f64[]
                                    lev:bool[] lew:bool[]. let
                                    lex:f64[200,7,12,4] = sub les let
                                    ley:f64[200,7,12,4] = abs lex
                                    lez:bool[200,7,12,4] = le ley leu
                                    lfa:bool[200,7,12,4] = pjit[
                                      name=isinf
                                      jaxpr={ lambda ; lfb:f64[200,7,12,4]. let
                                          lfc:f64[200,7,12,4] = abs lfb
                                          lfd:bool[200,7,12,4] = eq lfc inf
                                        in (lfd,) }
                                    ] les
                                    lfe:bool[200,7,12,4] = or lfa lev
                                    lff:bool[200,7,12,4] = not lfe
                                    lfg:bool[200,7,12,4] = and lez lff
                                    lfh:bool[200,7,12,4] = and lfa lev
                                    lfi:bool[200,7,12,4] = eq les let
                                    lfj:bool[200,7,12,4] = and lfh lfi
                                    lfk:bool[200,7,12,4] = or lfg lfj
                                    lfl:bool[200,7,12,4] = ne les les
                                    lfm:bool[200,7,12,4] = or lfl lew
                                    lfn:bool[200,7,12,4] = not lfm
                                    lfo:bool[200,7,12,4] = and lfk lfn
                                  in (lfo,) }
                              ] lem len leo lep leq
                              lfp:bool[200,7,12] = reduce_and[axes=(3,)] ler
                            in (lfp,) }
                        ] lek kgr kgs kgt kgu
                        lfq:f64[200,7,12,4] lfr:bool[200,7,12,4] = pjit[
                          name=_where
                          jaxpr={ lambda ; lfs:bool[200,7,12] lft:f64[200,7,12,4]
                              lfu:f64[200,7,12,4]. let
                              lfv:bool[200,7,12,4] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1, 2)
                                shape=(200, 7, 12, 4)
                              ] lfs
                              lfw:f64[200,7,12,4] = select_n lfv lft lfu
                            in (lfw, lfv) }
                        ] lel lek kgv
                        lfx:f64[200,7,12] lfy:f64[200,7,12] = pjit[
                          name=norm
                          jaxpr={ lambda ; lfz:f64[200,7,12,4]. let
                              lga:f64[200,7,12,4] = mul lfz lfz
                              lgb:f64[200,7,12] = reduce_sum[axes=(3,)] lga
                              lgc:f64[200,7,12] = sqrt lgb
                              lgd:f64[200,7,12] = div 0.5 lgc
                            in (lgc, lgd) }
                        ] lfq
                        lge:f64[200,7,12] = pjit[
                          name=_where
                          jaxpr={ lambda ; lgf:bool[200,7,12] lgg:f64[200,7,12] lgh:f64[200,7,12]. let
                              lgi:f64[200,7,12] = select_n lgf lgg lgh
                            in (lgi,) }
                        ] lel lfx kgw
                        lgj:bool[200,7,12] = eq lge 0.0
                        lgk:f64[200,7,12] = convert_element_type[
                          new_dtype=float64
                          weak_type=True
                        ] lgj
                        lgl:f64[200,7,12] = mul 1e-06 lgk
                        lgm:f64[200,7,12] = convert_element_type[
                          new_dtype=float64
                          weak_type=False
                        ] lgl
                        lgn:f64[200,7,12] = add lge lgm
                        lgo:f64[200,7,12,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 12, 1)
                        ] lgn
                        lgp:f64[200,7,12,4] = div lek lgo
                        lgq:f64[200,7,12,1,4] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 12, 1, 4)
                        ] lgp
                        lgr:f64[200,7,12,4] = pjit[
                          name=_take
                          jaxpr={ lambda ; lgs:f64[200,7,12,1,4] lgt:i64[1]. let
                              lgu:f64[200,7,12,4] = gather[
                                dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2, 3), collapsed_slice_dims=(3,), start_index_map=(3,))
                                fill_value=None
                                indices_are_sorted=False
                                mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                slice_sizes=(200, 7, 12, 1, 4)
                                unique_indices=False
                              ] lgs lgt
                            in (lgu,) }
                        ] lgq kgx
                        lgv:f64[200,7,13,4] = concatenate[dimension=2] ldt lgr
                        lgw:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] lgv
                        lgx:f64[200,7,13] = squeeze[dimensions=(3,)] lgw
                        lgy:f64[200,7,13] = mul kgn lgx
                        lgz:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] lgv
                        lha:f64[200,7,13] = squeeze[dimensions=(3,)] lgz
                        lhb:f64[200,7,13] = mul kgy lha
                        lhc:f64[200,7,13] = sub lgy lhb
                        lhd:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] lgv
                        lhe:f64[200,7,13] = squeeze[dimensions=(3,)] lhd
                        lhf:f64[200,7,13] = mul kgz lhe
                        lhg:f64[200,7,13] = sub lhc lhf
                        lhh:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] lgv
                        lhi:f64[200,7,13] = squeeze[dimensions=(3,)] lhh
                        lhj:f64[200,7,13] = mul kha lhi
                        lhk:f64[200,7,13] = sub lhg lhj
                        lhl:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] lhk
                        lhm:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] lgv
                        lhn:f64[200,7,13] = squeeze[dimensions=(3,)] lhm
                        lho:f64[200,7,13] = mul khb lhn
                        lhp:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] lgv
                        lhq:f64[200,7,13] = squeeze[dimensions=(3,)] lhp
                        lhr:f64[200,7,13] = mul khc lhq
                        lhs:f64[200,7,13] = add lho lhr
                        lht:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] lgv
                        lhu:f64[200,7,13] = squeeze[dimensions=(3,)] lht
                        lhv:f64[200,7,13] = mul khd lhu
                        lhw:f64[200,7,13] = add lhs lhv
                        lhx:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] lgv
                        lhy:f64[200,7,13] = squeeze[dimensions=(3,)] lhx
                        lhz:f64[200,7,13] = mul khe lhy
                        lia:f64[200,7,13] = sub lhw lhz
                        lib:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] lia
                        lic:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] lgv
                        lid:f64[200,7,13] = squeeze[dimensions=(3,)] lic
                        lie:f64[200,7,13] = mul khf lid
                        lif:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] lgv
                        lig:f64[200,7,13] = squeeze[dimensions=(3,)] lif
                        lih:f64[200,7,13] = mul khg lig
                        lii:f64[200,7,13] = sub lie lih
                        lij:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] lgv
                        lik:f64[200,7,13] = squeeze[dimensions=(3,)] lij
                        lil:f64[200,7,13] = mul khh lik
                        lim:f64[200,7,13] = add lii lil
                        lin:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] lgv
                        lio:f64[200,7,13] = squeeze[dimensions=(3,)] lin
                        lip:f64[200,7,13] = mul khi lio
                        liq:f64[200,7,13] = add lim lip
                        lir:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] liq
                        lis:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] lgv
                        lit:f64[200,7,13] = squeeze[dimensions=(3,)] lis
                        liu:f64[200,7,13] = mul khj lit
                        liv:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] lgv
                        liw:f64[200,7,13] = squeeze[dimensions=(3,)] liv
                        lix:f64[200,7,13] = mul khk liw
                        liy:f64[200,7,13] = add liu lix
                        liz:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] lgv
                        lja:f64[200,7,13] = squeeze[dimensions=(3,)] liz
                        ljb:f64[200,7,13] = mul khl lja
                        ljc:f64[200,7,13] = sub liy ljb
                        ljd:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] lgv
                        lje:f64[200,7,13] = squeeze[dimensions=(3,)] ljd
                        ljf:f64[200,7,13] = mul khm lje
                        ljg:f64[200,7,13] = add ljc ljf
                        ljh:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] ljg
                        lji:f64[200,7,13,4] = concatenate[dimension=3] lhl lib lir
                          ljh
                        ljj:f64[200,7,1,4] = slice[
                          limit_indices=(200, 7, 1, 4)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] lji
                        ljk:f64[200,7,4,4] = pjit[
                          name=_take
                          jaxpr={ lambda ; ljl:f64[200,7,1,4] ljm:i64[4,1]. let
                              ljn:f64[200,7,4,4] = gather[
                                dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 3), collapsed_slice_dims=(2,), start_index_map=(2,))
                                fill_value=None
                                indices_are_sorted=False
                                mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                slice_sizes=(200, 7, 1, 4)
                                unique_indices=False
                              ] ljl ljm
                            in (ljn,) }
                        ] ljj khn
                        ljo:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] ljk
                        ljp:f64[200,7,4] = squeeze[dimensions=(3,)] ljo
                        ljq:f64[200,7,4,4] = pjit[name=_take jaxpr=_take13] lji kho
                        ljr:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] ljq
                        ljs:f64[200,7,4] = squeeze[dimensions=(3,)] ljr
                        ljt:f64[200,7,4] = mul ljp ljs
                        lju:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] ljk
                        ljv:f64[200,7,4] = squeeze[dimensions=(3,)] lju
                        ljw:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] ljq
                        ljx:f64[200,7,4] = squeeze[dimensions=(3,)] ljw
                        ljy:f64[200,7,4] = mul ljv ljx
                        ljz:f64[200,7,4] = sub ljt ljy
                        lka:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] ljk
                        lkb:f64[200,7,4] = squeeze[dimensions=(3,)] lka
                        lkc:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] ljq
                        lkd:f64[200,7,4] = squeeze[dimensions=(3,)] lkc
                        lke:f64[200,7,4] = mul lkb lkd
                        lkf:f64[200,7,4] = sub ljz lke
                        lkg:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] ljk
                        lkh:f64[200,7,4] = squeeze[dimensions=(3,)] lkg
                        lki:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] ljq
                        lkj:f64[200,7,4] = squeeze[dimensions=(3,)] lki
                        lkk:f64[200,7,4] = mul lkh lkj
                        lkl:f64[200,7,4] = sub lkf lkk
                        lkm:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] lkl
                        lkn:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] ljk
                        lko:f64[200,7,4] = squeeze[dimensions=(3,)] lkn
                        lkp:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] ljq
                        lkq:f64[200,7,4] = squeeze[dimensions=(3,)] lkp
                        lkr:f64[200,7,4] = mul lko lkq
                        lks:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] ljk
                        lkt:f64[200,7,4] = squeeze[dimensions=(3,)] lks
                        lku:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] ljq
                        lkv:f64[200,7,4] = squeeze[dimensions=(3,)] lku
                        lkw:f64[200,7,4] = mul lkt lkv
                        lkx:f64[200,7,4] = add lkr lkw
                        lky:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] ljk
                        lkz:f64[200,7,4] = squeeze[dimensions=(3,)] lky
                        lla:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] ljq
                        llb:f64[200,7,4] = squeeze[dimensions=(3,)] lla
                        llc:f64[200,7,4] = mul lkz llb
                        lld:f64[200,7,4] = add lkx llc
                        lle:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] ljk
                        llf:f64[200,7,4] = squeeze[dimensions=(3,)] lle
                        llg:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] ljq
                        llh:f64[200,7,4] = squeeze[dimensions=(3,)] llg
                        lli:f64[200,7,4] = mul llf llh
                        llj:f64[200,7,4] = sub lld lli
                        llk:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] llj
                        lll:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] ljk
                        llm:f64[200,7,4] = squeeze[dimensions=(3,)] lll
                        lln:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] ljq
                        llo:f64[200,7,4] = squeeze[dimensions=(3,)] lln
                        llp:f64[200,7,4] = mul llm llo
                        llq:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] ljk
                        llr:f64[200,7,4] = squeeze[dimensions=(3,)] llq
                        lls:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] ljq
                        llt:f64[200,7,4] = squeeze[dimensions=(3,)] lls
                        llu:f64[200,7,4] = mul llr llt
                        llv:f64[200,7,4] = sub llp llu
                        llw:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] ljk
                        llx:f64[200,7,4] = squeeze[dimensions=(3,)] llw
                        lly:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] ljq
                        llz:f64[200,7,4] = squeeze[dimensions=(3,)] lly
                        lma:f64[200,7,4] = mul llx llz
                        lmb:f64[200,7,4] = add llv lma
                        lmc:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] ljk
                        lmd:f64[200,7,4] = squeeze[dimensions=(3,)] lmc
                        lme:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] ljq
                        lmf:f64[200,7,4] = squeeze[dimensions=(3,)] lme
                        lmg:f64[200,7,4] = mul lmd lmf
                        lmh:f64[200,7,4] = add lmb lmg
                        lmi:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] lmh
                        lmj:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] ljk
                        lmk:f64[200,7,4] = squeeze[dimensions=(3,)] lmj
                        lml:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] ljq
                        lmm:f64[200,7,4] = squeeze[dimensions=(3,)] lml
                        lmn:f64[200,7,4] = mul lmk lmm
                        lmo:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] ljk
                        lmp:f64[200,7,4] = squeeze[dimensions=(3,)] lmo
                        lmq:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] ljq
                        lmr:f64[200,7,4] = squeeze[dimensions=(3,)] lmq
                        lms:f64[200,7,4] = mul lmp lmr
                        lmt:f64[200,7,4] = add lmn lms
                        lmu:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] ljk
                        lmv:f64[200,7,4] = squeeze[dimensions=(3,)] lmu
                        lmw:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] ljq
                        lmx:f64[200,7,4] = squeeze[dimensions=(3,)] lmw
                        lmy:f64[200,7,4] = mul lmv lmx
                        lmz:f64[200,7,4] = sub lmt lmy
                        lna:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] ljk
                        lnb:f64[200,7,4] = squeeze[dimensions=(3,)] lna
                        lnc:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] ljq
                        lnd:f64[200,7,4] = squeeze[dimensions=(3,)] lnc
                        lne:f64[200,7,4] = mul lnb lnd
                        lnf:f64[200,7,4] = add lmz lne
                        lng:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] lnf
                        lnh:f64[200,7,4,4] = concatenate[dimension=3] lkm llk lmi
                          lng
                        lni:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] lnh
                        lnj:f64[200,7,4] = squeeze[dimensions=(3,)] lni
                        lnk:f64[200,7,4,4] = pjit[name=_take jaxpr=_take13] lji khp
                        lnl:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] lnk
                        lnm:f64[200,7,4] = squeeze[dimensions=(3,)] lnl
                        lnn:f64[200,7,4] = mul lnj lnm
                        lno:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] lnh
                        lnp:f64[200,7,4] = squeeze[dimensions=(3,)] lno
                        lnq:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] lnk
                        lnr:f64[200,7,4] = squeeze[dimensions=(3,)] lnq
                        lns:f64[200,7,4] = mul lnp lnr
                        lnt:f64[200,7,4] = sub lnn lns
                        lnu:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] lnh
                        lnv:f64[200,7,4] = squeeze[dimensions=(3,)] lnu
                        lnw:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] lnk
                        lnx:f64[200,7,4] = squeeze[dimensions=(3,)] lnw
                        lny:f64[200,7,4] = mul lnv lnx
                        lnz:f64[200,7,4] = sub lnt lny
                        loa:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] lnh
                        lob:f64[200,7,4] = squeeze[dimensions=(3,)] loa
                        loc:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] lnk
                        lod:f64[200,7,4] = squeeze[dimensions=(3,)] loc
                        loe:f64[200,7,4] = mul lob lod
                        lof:f64[200,7,4] = sub lnz loe
                        log:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] lof
                        loh:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] lnh
                        loi:f64[200,7,4] = squeeze[dimensions=(3,)] loh
                        loj:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] lnk
                        lok:f64[200,7,4] = squeeze[dimensions=(3,)] loj
                        lol:f64[200,7,4] = mul loi lok
                        lom:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] lnh
                        lon:f64[200,7,4] = squeeze[dimensions=(3,)] lom
                        loo:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] lnk
                        lop:f64[200,7,4] = squeeze[dimensions=(3,)] loo
                        loq:f64[200,7,4] = mul lon lop
                        lor:f64[200,7,4] = add lol loq
                        los:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] lnh
                        lot:f64[200,7,4] = squeeze[dimensions=(3,)] los
                        lou:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] lnk
                        lov:f64[200,7,4] = squeeze[dimensions=(3,)] lou
                        low:f64[200,7,4] = mul lot lov
                        lox:f64[200,7,4] = add lor low
                        loy:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] lnh
                        loz:f64[200,7,4] = squeeze[dimensions=(3,)] loy
                        lpa:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] lnk
                        lpb:f64[200,7,4] = squeeze[dimensions=(3,)] lpa
                        lpc:f64[200,7,4] = mul loz lpb
                        lpd:f64[200,7,4] = sub lox lpc
                        lpe:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] lpd
                        lpf:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] lnh
                        lpg:f64[200,7,4] = squeeze[dimensions=(3,)] lpf
                        lph:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] lnk
                        lpi:f64[200,7,4] = squeeze[dimensions=(3,)] lph
                        lpj:f64[200,7,4] = mul lpg lpi
                        lpk:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] lnh
                        lpl:f64[200,7,4] = squeeze[dimensions=(3,)] lpk
                        lpm:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] lnk
                        lpn:f64[200,7,4] = squeeze[dimensions=(3,)] lpm
                        lpo:f64[200,7,4] = mul lpl lpn
                        lpp:f64[200,7,4] = sub lpj lpo
                        lpq:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] lnh
                        lpr:f64[200,7,4] = squeeze[dimensions=(3,)] lpq
                        lps:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] lnk
                        lpt:f64[200,7,4] = squeeze[dimensions=(3,)] lps
                        lpu:f64[200,7,4] = mul lpr lpt
                        lpv:f64[200,7,4] = add lpp lpu
                        lpw:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] lnh
                        lpx:f64[200,7,4] = squeeze[dimensions=(3,)] lpw
                        lpy:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] lnk
                        lpz:f64[200,7,4] = squeeze[dimensions=(3,)] lpy
                        lqa:f64[200,7,4] = mul lpx lpz
                        lqb:f64[200,7,4] = add lpv lqa
                        lqc:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] lqb
                        lqd:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] lnh
                        lqe:f64[200,7,4] = squeeze[dimensions=(3,)] lqd
                        lqf:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] lnk
                        lqg:f64[200,7,4] = squeeze[dimensions=(3,)] lqf
                        lqh:f64[200,7,4] = mul lqe lqg
                        lqi:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] lnh
                        lqj:f64[200,7,4] = squeeze[dimensions=(3,)] lqi
                        lqk:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] lnk
                        lql:f64[200,7,4] = squeeze[dimensions=(3,)] lqk
                        lqm:f64[200,7,4] = mul lqj lql
                        lqn:f64[200,7,4] = add lqh lqm
                        lqo:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] lnh
                        lqp:f64[200,7,4] = squeeze[dimensions=(3,)] lqo
                        lqq:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] lnk
                        lqr:f64[200,7,4] = squeeze[dimensions=(3,)] lqq
                        lqs:f64[200,7,4] = mul lqp lqr
                        lqt:f64[200,7,4] = sub lqn lqs
                        lqu:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] lnh
                        lqv:f64[200,7,4] = squeeze[dimensions=(3,)] lqu
                        lqw:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] lnk
                        lqx:f64[200,7,4] = squeeze[dimensions=(3,)] lqw
                        lqy:f64[200,7,4] = mul lqv lqx
                        lqz:f64[200,7,4] = add lqt lqy
                        lra:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] lqz
                        lrb:f64[200,7,4,4] = concatenate[dimension=3] log lpe lqc
                          lra
                        lrc:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] lrb
                        lrd:f64[200,7,4] = squeeze[dimensions=(3,)] lrc
                        lre:f64[200,7,4,4] = pjit[name=_take jaxpr=_take13] lji khq
                        lrf:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] lre
                        lrg:f64[200,7,4] = squeeze[dimensions=(3,)] lrf
                        lrh:f64[200,7,4] = mul lrd lrg
                        lri:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] lrb
                        lrj:f64[200,7,4] = squeeze[dimensions=(3,)] lri
                        lrk:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] lre
                        lrl:f64[200,7,4] = squeeze[dimensions=(3,)] lrk
                        lrm:f64[200,7,4] = mul lrj lrl
                        lrn:f64[200,7,4] = sub lrh lrm
                        lro:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] lrb
                        lrp:f64[200,7,4] = squeeze[dimensions=(3,)] lro
                        lrq:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] lre
                        lrr:f64[200,7,4] = squeeze[dimensions=(3,)] lrq
                        lrs:f64[200,7,4] = mul lrp lrr
                        lrt:f64[200,7,4] = sub lrn lrs
                        lru:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] lrb
                        lrv:f64[200,7,4] = squeeze[dimensions=(3,)] lru
                        lrw:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] lre
                        lrx:f64[200,7,4] = squeeze[dimensions=(3,)] lrw
                        lry:f64[200,7,4] = mul lrv lrx
                        lrz:f64[200,7,4] = sub lrt lry
                        lsa:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] lrz
                        lsb:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] lrb
                        lsc:f64[200,7,4] = squeeze[dimensions=(3,)] lsb
                        lsd:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] lre
                        lse:f64[200,7,4] = squeeze[dimensions=(3,)] lsd
                        lsf:f64[200,7,4] = mul lsc lse
                        lsg:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] lrb
                        lsh:f64[200,7,4] = squeeze[dimensions=(3,)] lsg
                        lsi:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] lre
                        lsj:f64[200,7,4] = squeeze[dimensions=(3,)] lsi
                        lsk:f64[200,7,4] = mul lsh lsj
                        lsl:f64[200,7,4] = add lsf lsk
                        lsm:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] lrb
                        lsn:f64[200,7,4] = squeeze[dimensions=(3,)] lsm
                        lso:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] lre
                        lsp:f64[200,7,4] = squeeze[dimensions=(3,)] lso
                        lsq:f64[200,7,4] = mul lsn lsp
                        lsr:f64[200,7,4] = add lsl lsq
                        lss:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] lrb
                        lst:f64[200,7,4] = squeeze[dimensions=(3,)] lss
                        lsu:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] lre
                        lsv:f64[200,7,4] = squeeze[dimensions=(3,)] lsu
                        lsw:f64[200,7,4] = mul lst lsv
                        lsx:f64[200,7,4] = sub lsr lsw
                        lsy:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] lsx
                        lsz:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] lrb
                        lta:f64[200,7,4] = squeeze[dimensions=(3,)] lsz
                        ltb:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] lre
                        ltc:f64[200,7,4] = squeeze[dimensions=(3,)] ltb
                        ltd:f64[200,7,4] = mul lta ltc
                        lte:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] lrb
                        ltf:f64[200,7,4] = squeeze[dimensions=(3,)] lte
                        ltg:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] lre
                        lth:f64[200,7,4] = squeeze[dimensions=(3,)] ltg
                        lti:f64[200,7,4] = mul ltf lth
                        ltj:f64[200,7,4] = sub ltd lti
                        ltk:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] lrb
                        ltl:f64[200,7,4] = squeeze[dimensions=(3,)] ltk
                        ltm:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] lre
                        ltn:f64[200,7,4] = squeeze[dimensions=(3,)] ltm
                        lto:f64[200,7,4] = mul ltl ltn
                        ltp:f64[200,7,4] = add ltj lto
                        ltq:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] lrb
                        ltr:f64[200,7,4] = squeeze[dimensions=(3,)] ltq
                        lts:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] lre
                        ltt:f64[200,7,4] = squeeze[dimensions=(3,)] lts
                        ltu:f64[200,7,4] = mul ltr ltt
                        ltv:f64[200,7,4] = add ltp ltu
                        ltw:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] ltv
                        ltx:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] lrb
                        lty:f64[200,7,4] = squeeze[dimensions=(3,)] ltx
                        ltz:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] lre
                        lua:f64[200,7,4] = squeeze[dimensions=(3,)] ltz
                        lub:f64[200,7,4] = mul lty lua
                        luc:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] lrb
                        lud:f64[200,7,4] = squeeze[dimensions=(3,)] luc
                        lue:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] lre
                        luf:f64[200,7,4] = squeeze[dimensions=(3,)] lue
                        lug:f64[200,7,4] = mul lud luf
                        luh:f64[200,7,4] = add lub lug
                        lui:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] lrb
                        luj:f64[200,7,4] = squeeze[dimensions=(3,)] lui
                        luk:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] lre
                        lul:f64[200,7,4] = squeeze[dimensions=(3,)] luk
                        lum:f64[200,7,4] = mul luj lul
                        lun:f64[200,7,4] = sub luh lum
                        luo:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] lrb
                        lup:f64[200,7,4] = squeeze[dimensions=(3,)] luo
                        luq:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] lre
                        lur:f64[200,7,4] = squeeze[dimensions=(3,)] luq
                        lus:f64[200,7,4] = mul lup lur
                        lut:f64[200,7,4] = add lun lus
                        luu:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] lut
                        luv:f64[200,7,4,4] = concatenate[dimension=3] lsa lsy ltw
                          luu
                        luw:f64[200,7,13,4] = concatenate[dimension=2] ljj lnh lrb
                          luv
                        lux:f64[200,7,13,4] = pjit[
                          name=_take
                          jaxpr={ lambda ; luy:f64[200,7,13,4] luz:i64[13,1]. let
                              lva:f64[200,7,13,4] = gather[
                                dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 3), collapsed_slice_dims=(2,), start_index_map=(2,))
                                fill_value=None
                                indices_are_sorted=False
                                mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                slice_sizes=(200, 7, 1, 4)
                                unique_indices=False
                              ] luy luz
                            in (lva,) }
                        ] luw khr
                        lvb:bool[200,7,13] = pjit[
                          name=allclose
                          jaxpr={ lambda ; lvc:f64[200,7,13,4] lvd:f64[] lve:f64[]
                              lvf:bool[] lvg:bool[]. let
                              lvh:bool[200,7,13,4] = pjit[
                                name=isclose
                                jaxpr={ lambda ; lvi:f64[200,7,13,4] lvj:f64[] lvk:f64[]
                                    lvl:bool[] lvm:bool[]. let
                                    lvn:f64[200,7,13,4] = sub lvi lvj
                                    lvo:f64[200,7,13,4] = abs lvn
                                    lvp:bool[200,7,13,4] = le lvo lvk
                                    lvq:bool[200,7,13,4] = pjit[
                                      name=isinf
                                      jaxpr={ lambda ; lvr:f64[200,7,13,4]. let
                                          lvs:f64[200,7,13,4] = abs lvr
                                          lvt:bool[200,7,13,4] = eq lvs inf
                                        in (lvt,) }
                                    ] lvi
                                    lvu:bool[200,7,13,4] = or lvq lvl
                                    lvv:bool[200,7,13,4] = not lvu
                                    lvw:bool[200,7,13,4] = and lvp lvv
                                    lvx:bool[200,7,13,4] = and lvq lvl
                                    lvy:bool[200,7,13,4] = eq lvi lvj
                                    lvz:bool[200,7,13,4] = and lvx lvy
                                    lwa:bool[200,7,13,4] = or lvw lvz
                                    lwb:bool[200,7,13,4] = ne lvi lvi
                                    lwc:bool[200,7,13,4] = or lwb lvm
                                    lwd:bool[200,7,13,4] = not lwc
                                    lwe:bool[200,7,13,4] = and lwa lwd
                                  in (lwe,) }
                              ] lvc lvd lve lvf lvg
                              lwf:bool[200,7,13] = reduce_and[axes=(3,)] lvh
                            in (lwf,) }
                        ] lux khs kht khu khv
                        lwg:f64[200,7,13,4] lwh:bool[200,7,13,4] = pjit[
                          name=_where
                          jaxpr={ lambda ; lwi:bool[200,7,13] lwj:f64[200,7,13,4]
                              lwk:f64[200,7,13,4]. let
                              lwl:bool[200,7,13,4] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1, 2)
                                shape=(200, 7, 13, 4)
                              ] lwi
                              lwm:f64[200,7,13,4] = select_n lwl lwj lwk
                            in (lwm, lwl) }
                        ] lvb lux khw
                        lwn:f64[200,7,13] lwo:f64[200,7,13] = pjit[
                          name=norm
                          jaxpr={ lambda ; lwp:f64[200,7,13,4]. let
                              lwq:f64[200,7,13,4] = mul lwp lwp
                              lwr:f64[200,7,13] = reduce_sum[axes=(3,)] lwq
                              lws:f64[200,7,13] = sqrt lwr
                              lwt:f64[200,7,13] = div 0.5 lws
                            in (lws, lwt) }
                        ] lwg
                        lwu:f64[200,7,13] = pjit[
                          name=_where
                          jaxpr={ lambda ; lwv:bool[200,7,13] lww:f64[200,7,13] lwx:f64[200,7,13]. let
                              lwy:f64[200,7,13] = select_n lwv lww lwx
                            in (lwy,) }
                        ] lvb lwn khx
                        lwz:bool[200,7,13] = eq lwu 0.0
                        lxa:f64[200,7,13] = convert_element_type[
                          new_dtype=float64
                          weak_type=True
                        ] lwz
                        lxb:f64[200,7,13] = mul 1e-06 lxa
                        lxc:f64[200,7,13] = convert_element_type[
                          new_dtype=float64
                          weak_type=False
                        ] lxb
                        lxd:f64[200,7,13] = add lwu lxc
                        lxe:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] lxd
                        lxf:f64[200,7,13,4] = div lux lxe
                        lxg:f64[200,7,14,4] = concatenate[dimension=2] lxf khy
                        lxh:f64[200,7,13,4] = pjit[
                          name=_take
                          jaxpr={ lambda ; lxi:f64[200,7,14,4] lxj:i32[13,1]. let
                              lxk:f64[200,7,13,4] = gather[
                                dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 3), collapsed_slice_dims=(2,), start_index_map=(2,))
                                fill_value=None
                                indices_are_sorted=False
                                mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                slice_sizes=(200, 7, 1, 4)
                                unique_indices=False
                              ] lxi lxj
                            in (lxk,) }
                        ] lxg khz
                        lxl:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] lxh
                        lxm:f64[200,7,13] = squeeze[dimensions=(3,)] lxl
                        lxn:f64[200,7,13] = mul lxm kia
                        lxo:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] lxh
                        lxp:f64[200,7,13] = squeeze[dimensions=(3,)] lxo
                        lxq:f64[200,7,13] = mul lxp kib
                        lxr:f64[200,7,13] = sub lxn lxq
                        lxs:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] lxh
                        lxt:f64[200,7,13] = squeeze[dimensions=(3,)] lxs
                        lxu:f64[200,7,13] = mul lxt kic
                        lxv:f64[200,7,13] = sub lxr lxu
                        lxw:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] lxh
                        lxx:f64[200,7,13] = squeeze[dimensions=(3,)] lxw
                        lxy:f64[200,7,13] = mul lxx kid
                        lxz:f64[200,7,13] = sub lxv lxy
                        lya:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] lxz
                        lyb:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] lxh
                        lyc:f64[200,7,13] = squeeze[dimensions=(3,)] lyb
                        lyd:f64[200,7,13] = mul lyc kie
                        lye:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] lxh
                        lyf:f64[200,7,13] = squeeze[dimensions=(3,)] lye
                        lyg:f64[200,7,13] = mul lyf kif
                        lyh:f64[200,7,13] = add lyd lyg
                        lyi:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] lxh
                        lyj:f64[200,7,13] = squeeze[dimensions=(3,)] lyi
                        lyk:f64[200,7,13] = mul lyj kig
                        lyl:f64[200,7,13] = add lyh lyk
                        lym:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] lxh
                        lyn:f64[200,7,13] = squeeze[dimensions=(3,)] lym
                        lyo:f64[200,7,13] = mul lyn kih
                        lyp:f64[200,7,13] = sub lyl lyo
                        lyq:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] lyp
                        lyr:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] lxh
                        lys:f64[200,7,13] = squeeze[dimensions=(3,)] lyr
                        lyt:f64[200,7,13] = mul lys kii
                        lyu:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] lxh
                        lyv:f64[200,7,13] = squeeze[dimensions=(3,)] lyu
                        lyw:f64[200,7,13] = mul lyv kij
                        lyx:f64[200,7,13] = sub lyt lyw
                        lyy:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] lxh
                        lyz:f64[200,7,13] = squeeze[dimensions=(3,)] lyy
                        lza:f64[200,7,13] = mul lyz kik
                        lzb:f64[200,7,13] = add lyx lza
                        lzc:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] lxh
                        lzd:f64[200,7,13] = squeeze[dimensions=(3,)] lzc
                        lze:f64[200,7,13] = mul lzd kil
                        lzf:f64[200,7,13] = add lzb lze
                        lzg:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] lzf
                        lzh:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] lxh
                        lzi:f64[200,7,13] = squeeze[dimensions=(3,)] lzh
                        lzj:f64[200,7,13] = mul lzi kim
                        lzk:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] lxh
                        lzl:f64[200,7,13] = squeeze[dimensions=(3,)] lzk
                        lzm:f64[200,7,13] = mul lzl kin
                        lzn:f64[200,7,13] = add lzj lzm
                        lzo:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] lxh
                        lzp:f64[200,7,13] = squeeze[dimensions=(3,)] lzo
                        lzq:f64[200,7,13] = mul lzp kio
                        lzr:f64[200,7,13] = sub lzn lzq
                        lzs:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] lxh
                        lzt:f64[200,7,13] = squeeze[dimensions=(3,)] lzs
                        lzu:f64[200,7,13] = mul lzt kip
                        lzv:f64[200,7,13] = add lzr lzu
                        lzw:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] lzv
                        lzx:f64[200,7,13,4] = concatenate[dimension=3] lya lyq lzg
                          lzw
                        lzy:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] lzx
                        lzz:f64[200,7,13] = squeeze[dimensions=(3,)] lzy
                        maa:f64[200,7,13] = mul lzz kiq
                        mab:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] lzx
                        mac:f64[200,7,13] = squeeze[dimensions=(3,)] mab
                        mad:f64[200,7,13] = mul mac kir
                        mae:f64[200,7,13] = sub maa mad
                        maf:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] lzx
                        mag:f64[200,7,13] = squeeze[dimensions=(3,)] maf
                        mah:f64[200,7,13] = mul mag kis
                        mai:f64[200,7,13] = sub mae mah
                        maj:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] lzx
                        mak:f64[200,7,13] = squeeze[dimensions=(3,)] maj
                        mal:f64[200,7,13] = mul mak kit
                        mam:f64[200,7,13] = sub mai mal
                        man:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] mam
                        mao:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] lzx
                        map:f64[200,7,13] = squeeze[dimensions=(3,)] mao
                        maq:f64[200,7,13] = mul map kiu
                        mar:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] lzx
                        mas:f64[200,7,13] = squeeze[dimensions=(3,)] mar
                        mat:f64[200,7,13] = mul mas kiv
                        mau:f64[200,7,13] = add maq mat
                        mav:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] lzx
                        maw:f64[200,7,13] = squeeze[dimensions=(3,)] mav
                        max:f64[200,7,13] = mul maw kiw
                        may:f64[200,7,13] = add mau max
                        maz:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] lzx
                        mba:f64[200,7,13] = squeeze[dimensions=(3,)] maz
                        mbb:f64[200,7,13] = mul mba kix
                        mbc:f64[200,7,13] = sub may mbb
                        mbd:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] mbc
                        mbe:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] lzx
                        mbf:f64[200,7,13] = squeeze[dimensions=(3,)] mbe
                        mbg:f64[200,7,13] = mul mbf kiy
                        mbh:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] lzx
                        mbi:f64[200,7,13] = squeeze[dimensions=(3,)] mbh
                        mbj:f64[200,7,13] = mul mbi kiz
                        mbk:f64[200,7,13] = sub mbg mbj
                        mbl:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] lzx
                        mbm:f64[200,7,13] = squeeze[dimensions=(3,)] mbl
                        mbn:f64[200,7,13] = mul mbm kja
                        mbo:f64[200,7,13] = add mbk mbn
                        mbp:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] lzx
                        mbq:f64[200,7,13] = squeeze[dimensions=(3,)] mbp
                        mbr:f64[200,7,13] = mul mbq kjb
                        mbs:f64[200,7,13] = add mbo mbr
                        mbt:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] mbs
                        mbu:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] lzx
                        mbv:f64[200,7,13] = squeeze[dimensions=(3,)] mbu
                        mbw:f64[200,7,13] = mul mbv kjc
                        mbx:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] lzx
                        mby:f64[200,7,13] = squeeze[dimensions=(3,)] mbx
                        mbz:f64[200,7,13] = mul mby kjd
                        mca:f64[200,7,13] = add mbw mbz
                        mcb:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] lzx
                        mcc:f64[200,7,13] = squeeze[dimensions=(3,)] mcb
                        mcd:f64[200,7,13] = mul mcc kje
                        mce:f64[200,7,13] = sub mca mcd
                        mcf:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] lzx
                        mcg:f64[200,7,13] = squeeze[dimensions=(3,)] mcf
                        mch:f64[200,7,13] = mul mcg kjf
                        mci:f64[200,7,13] = add mce mch
                        mcj:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] mci
                        mck:f64[200,7,13,4] = concatenate[dimension=3] man mbd mbt
                          mcj
                        mcl:f64[200,7,18,4] = pjit[
                          name=_take
                          jaxpr={ lambda ; mcm:f64[200,7,13,4] mcn:i64[18,1]. let
                              mco:f64[200,7,18,4] = gather[
                                dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 3), collapsed_slice_dims=(2,), start_index_map=(2,))
                                fill_value=None
                                indices_are_sorted=False
                                mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                slice_sizes=(200, 7, 1, 4)
                                unique_indices=False
                              ] mcm mcn
                            in (mco,) }
                        ] mck kjg
                        mcp:f64[200,7,18,3] = slice[
                          limit_indices=(200, 7, 18, 4)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] mcl
                        mcq:f64[18,200,7] = dot_general[
                          dimension_numbers=(([3], [1]), ([2], [0]))
                          preferred_element_type=float64
                        ] mcp kjh
                        mcr:f64[200,7,18] = transpose[permutation=(1, 2, 0)] mcq
                        mcs:f64[200,7,18,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 18, 1)
                        ] mcr
                        mct:f64[200,7,18,3] = mul mcs mcp
                        mcu:f64[200,7,18,3] = mul 2.0 mct
                        mcv:f64[200,7,18,1] = slice[
                          limit_indices=(200, 7, 18, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] mcl
                        mcw:f64[200,7,18] = squeeze[dimensions=(3,)] mcv
                        mcx:f64[200,7,18] = mul mcw mcw
                        mcy:f64[200,7,18] = dot_general[
                          dimension_numbers=(([3], [3]), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] mcp mcp
                        mcz:f64[200,7,18] = sub mcx mcy
                        mda:f64[200,7,18,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 18, 1)
                        ] mcz
                        mdb:f64[200,7,18,3] = mul mda kji
                        mdc:f64[200,7,18,3] = add mcu mdb
                        mdd:f64[200,7,18] = mul 2.0 mcw
                        mde:f64[200,7,18,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 18, 1)
                        ] mdd
                        mdf:f64[200,7,18,3] = pjit[
                          name=cross
                          jaxpr={ lambda ; mdg:f64[200,7,18,3] mdh:i32[1] mdi:f64[1,1,18]
                              mdj:i32[1] mdk:f64[1,1,18] mdl:f64[1,1,18] mdm:i32[1]
                              mdn:f64[1,1,18] mdo:f64[1,1,18] mdp:f64[1,1,18]. let
                              mdq:f64[200,7,18] = gather[
                                dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
                                fill_value=None
                                indices_are_sorted=True
                                mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                slice_sizes=(200, 7, 18, 1)
                                unique_indices=True
                              ] mdg mdh
                              mdr:f64[200,7,18] = mul mdq mdi
                              mds:f64[200,7,18] = gather[
                                dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
                                fill_value=None
                                indices_are_sorted=True
                                mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                slice_sizes=(200, 7, 18, 1)
                                unique_indices=True
                              ] mdg mdj
                              mdt:f64[200,7,18] = mul mds mdk
                              mdu:f64[200,7,18] = sub mdr mdt
                              mdv:f64[200,7,18,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1, 2)
                                shape=(200, 7, 18, 1)
                              ] mdu
                              mdw:f64[200,7,18] = mul mds mdl
                              mdx:f64[200,7,18] = gather[
                                dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
                                fill_value=None
                                indices_are_sorted=True
                                mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                slice_sizes=(200, 7, 18, 1)
                                unique_indices=True
                              ] mdg mdm
                              mdy:f64[200,7,18] = mul mdx mdn
                              mdz:f64[200,7,18] = sub mdw mdy
                              mea:f64[200,7,18,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1, 2)
                                shape=(200, 7, 18, 1)
                              ] mdz
                              meb:f64[200,7,18] = mul mdx mdo
                              mec:f64[200,7,18] = mul mdq mdp
                              med:f64[200,7,18] = sub meb mec
                              mee:f64[200,7,18,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1, 2)
                                shape=(200, 7, 18, 1)
                              ] med
                              mef:f64[200,7,18,3] = concatenate[dimension=3] mdv
                                mea mee
                            in (mef,) }
                        ] mcp kjj kjk kjl kjm kjn kjo kjp kjq kjr
                        meg:f64[200,7,18,3] = mul mde mdf
                        meh:f64[200,7,18,3] = add mdc meg
                        mei:f64[18,200,7] = dot_general[
                          dimension_numbers=(([1], [3]), ([0], [2]))
                          preferred_element_type=float64
                        ] kgm meh
                        mej:f64[200,7,18] = transpose[permutation=(1, 2, 0)] mei
                        mek:f64[200,7,18,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 18, 1)
                        ] mej
                        mel:f64[200,7,18,3] = mul mek kjs
                        mem:f64[200,7,18,3] = mul 2.0 mel
                        men:f64[200,7,18,3] = mul kjt meh
                        meo:f64[200,7,18,3] = add mem men
                        mep:f64[200,7,18,3] = pjit[name=cross jaxpr=cross11] meh
                          kjv kjw kjx kjy kjz kka kkb kkc kkd
                        meq:f64[200,7,18,3] = mul kju mep
                        mer:f64[200,7,18,3] = add meo meq
                        mes:f64[200,7,18,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 18, 1)
                        ] ldo
                        met:f64[200,7,18,3] = mul mer mes
                        meu:f64[200,7,6,3] = slice[
                          limit_indices=(200, 7, 6, 3)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] met
                        mev:f64[200,7,1,6,3] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 1, 6, 3)
                        ] meu
                        mew:f64[200,7,1,3,3] = slice[
                          limit_indices=(200, 7, 1, 3, 3)
                          start_indices=(0, 0, 0, 0, 0)
                          strides=None
                        ] mev
                        mex:f64[200,7,1,3] = reduce_sum[axes=(3,)] mew
                        mey:f64[200,7,1,3] = slice[
                          limit_indices=(200, 7, 1, 3)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] lds
                        mez:f64[200,7,12,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 12, 1)
                        ] ldu
                        mfa:f64[200,7,12,3] = mul kkl mez
                        mfb:f64[200,7,12,1,3] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 12, 1, 3)
                        ] mfa
                        mfc:f64[200,7,12,3] = pjit[name=_take jaxpr=_take14] mfb
                          kkm
                        mfd:f64[200,7,13,3] = concatenate[dimension=2] mey mfc
                        mfe:f64[200,7,13,3] = add mfd kkn
                        mff:f64[200,7,13,3] = slice[
                          limit_indices=(200, 7, 13, 4)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] lgv
                        mfg:f64[13,200,7] = dot_general[
                          dimension_numbers=(([3], [1]), ([2], [0]))
                          preferred_element_type=float64
                        ] mff kkp
                        mfh:f64[200,7,13] = transpose[permutation=(1, 2, 0)] mfg
                        mfi:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] mfh
                        mfj:f64[200,7,13,3] = mul mfi mff
                        mfk:f64[200,7,13,3] = mul 2.0 mfj
                        mfl:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] lgv
                        mfm:f64[200,7,13] = squeeze[dimensions=(3,)] mfl
                        mfn:f64[200,7,13] = mul mfm mfm
                        mfo:f64[200,7,13] = dot_general[
                          dimension_numbers=(([3], [3]), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] mff mff
                        mfp:f64[200,7,13] = sub mfn mfo
                        mfq:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] mfp
                        mfr:f64[200,7,13,3] = mul mfq kkq
                        mfs:f64[200,7,13,3] = add mfk mfr
                        mft:f64[200,7,13] = mul 2.0 mfm
                        mfu:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] mft
                        mfv:f64[200,7,13,3] = pjit[name=cross jaxpr=cross12] mff
                          kkr kks kkt kku kkv kkw kkx kky kkz
                        mfw:f64[200,7,13,3] = mul mfu mfv
                        mfx:f64[200,7,13,3] = add mfs mfw
                        mfy:f64[200,7,13,3] = add kko mfx
                        mfz:f64[200,7,13,3] = sub mfe mfy
                        mga:f64[13,200,7] = dot_general[
                          dimension_numbers=(([1], [3]), ([0], [2]))
                          preferred_element_type=float64
                        ] kkk mfz
                        mgb:f64[200,7,13] = transpose[permutation=(1, 2, 0)] mga
                        mgc:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] mgb
                        mgd:f64[200,7,13,3] = mul mgc kla
                        mge:f64[200,7,13,3] = mul 2.0 mgd
                        mgf:f64[200,7,13,3] = mul klb mfz
                        mgg:f64[200,7,13,3] = add mge mgf
                        mgh:f64[200,7,13,3] = pjit[
                          name=cross
                          jaxpr={ lambda ; mgi:f64[200,7,13,3] mgj:f64[1,1,13] mgk:i32[1]
                              mgl:f64[1,1,13] mgm:i32[1] mgn:f64[1,1,13] mgo:i32[1]
                              mgp:f64[1,1,13] mgq:f64[1,1,13] mgr:f64[1,1,13]. let
                              mgs:f64[200,7,13] = gather[
                                dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
                                fill_value=None
                                indices_are_sorted=True
                                mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                slice_sizes=(200, 7, 13, 1)
                                unique_indices=True
                              ] mgi mgk
                              mgt:f64[200,7,13] = mul mgj mgs
                              mgu:f64[200,7,13] = gather[
                                dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
                                fill_value=None
                                indices_are_sorted=True
                                mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                slice_sizes=(200, 7, 13, 1)
                                unique_indices=True
                              ] mgi mgm
                              mgv:f64[200,7,13] = mul mgl mgu
                              mgw:f64[200,7,13] = sub mgt mgv
                              mgx:f64[200,7,13,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1, 2)
                                shape=(200, 7, 13, 1)
                              ] mgw
                              mgy:f64[200,7,13] = gather[
                                dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
                                fill_value=None
                                indices_are_sorted=True
                                mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                slice_sizes=(200, 7, 13, 1)
                                unique_indices=True
                              ] mgi mgo
                              mgz:f64[200,7,13] = mul mgn mgy
                              mha:f64[200,7,13] = mul mgp mgs
                              mhb:f64[200,7,13] = sub mgz mha
                              mhc:f64[200,7,13,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1, 2)
                                shape=(200, 7, 13, 1)
                              ] mhb
                              mhd:f64[200,7,13] = mul mgq mgu
                              mhe:f64[200,7,13] = mul mgr mgy
                              mhf:f64[200,7,13] = sub mhd mhe
                              mhg:f64[200,7,13,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1, 2)
                                shape=(200, 7, 13, 1)
                              ] mhf
                              mhh:f64[200,7,13,3] = concatenate[dimension=3] mgx
                                mhc mhg
                            in (mhh,) }
                        ] mfz kld kle klf klg klh kli klj klk kll
                        mhi:f64[200,7,13,3] = mul klc mgh
                        mhj:f64[200,7,13,3] = add mgg mhi
                        mhk:f64[200,7,13,3] = add kkj mhj
                        mhl:f64[200,7,1,3] = slice[
                          limit_indices=(200, 7, 1, 3)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] mhk
                        mhm:f64[200,7,4,3] = pjit[name=_take jaxpr=_take15] mhl klm
                        mhn:f64[200,7,4,3] = slice[
                          limit_indices=(200, 7, 4, 4)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] ljk
                        mho:f64[200,7,4,3] = pjit[name=_take jaxpr=_take16] mhk kln
                        mhp:f64[200,7,4] = dot_general[
                          dimension_numbers=(([3], [3]), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] mhn mho
                        mhq:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] mhp
                        mhr:f64[200,7,4,3] = mul mhq mhn
                        mhs:f64[200,7,4,3] = mul 2.0 mhr
                        mht:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] ljk
                        mhu:f64[200,7,4] = squeeze[dimensions=(3,)] mht
                        mhv:f64[200,7,4] = mul mhu mhu
                        mhw:f64[200,7,4] = dot_general[
                          dimension_numbers=(([3], [3]), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] mhn mhn
                        mhx:f64[200,7,4] = sub mhv mhw
                        mhy:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] mhx
                        mhz:f64[200,7,4,3] = mul mhy mho
                        mia:f64[200,7,4,3] = add mhs mhz
                        mib:f64[200,7,4] = mul 2.0 mhu
                        mic:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] mib
                        mid:f64[200,7,4,3] mie:f64[200,7,4] mif:f64[200,7,4] mig:f64[200,7,4]
                          mih:f64[200,7,4] mii:f64[200,7,4] mij:f64[200,7,4] = pjit[
                          name=cross
                          jaxpr=cross13
                        ] mhn mho klo klp klq klr kls klt
                        mik:f64[200,7,4,3] = mul mic mid
                        mil:f64[200,7,4,3] = add mia mik
                        mim:f64[200,7,4,3] = add mhm mil
                        min:f64[200,7,4,3] = slice[
                          limit_indices=(200, 7, 4, 4)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] lnh
                        mio:f64[200,7,4,3] = pjit[name=_take jaxpr=_take16] mhk klu
                        mip:f64[200,7,4] = dot_general[
                          dimension_numbers=(([3], [3]), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] min mio
                        miq:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] mip
                        mir:f64[200,7,4,3] = mul miq min
                        mis:f64[200,7,4,3] = mul 2.0 mir
                        mit:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] lnh
                        miu:f64[200,7,4] = squeeze[dimensions=(3,)] mit
                        miv:f64[200,7,4] = mul miu miu
                        miw:f64[200,7,4] = dot_general[
                          dimension_numbers=(([3], [3]), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] min min
                        mix:f64[200,7,4] = sub miv miw
                        miy:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] mix
                        miz:f64[200,7,4,3] = mul miy mio
                        mja:f64[200,7,4,3] = add mis miz
                        mjb:f64[200,7,4] = mul 2.0 miu
                        mjc:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] mjb
                        mjd:f64[200,7,4,3] mje:f64[200,7,4] mjf:f64[200,7,4] mjg:f64[200,7,4]
                          mjh:f64[200,7,4] mji:f64[200,7,4] mjj:f64[200,7,4] = pjit[
                          name=cross
                          jaxpr=cross13
                        ] min mio klv klw klx kly klz kma
                        mjk:f64[200,7,4,3] = mul mjc mjd
                        mjl:f64[200,7,4,3] = add mja mjk
                        mjm:f64[200,7,4,3] = add mim mjl
                        mjn:f64[200,7,4,3] = slice[
                          limit_indices=(200, 7, 4, 4)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] lrb
                        mjo:f64[200,7,4,3] = pjit[name=_take jaxpr=_take16] mhk kmb
                        mjp:f64[200,7,4] = dot_general[
                          dimension_numbers=(([3], [3]), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] mjn mjo
                        mjq:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] mjp
                        mjr:f64[200,7,4,3] = mul mjq mjn
                        mjs:f64[200,7,4,3] = mul 2.0 mjr
                        mjt:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] lrb
                        mju:f64[200,7,4] = squeeze[dimensions=(3,)] mjt
                        mjv:f64[200,7,4] = mul mju mju
                        mjw:f64[200,7,4] = dot_general[
                          dimension_numbers=(([3], [3]), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] mjn mjn
                        mjx:f64[200,7,4] = sub mjv mjw
                        mjy:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] mjx
                        mjz:f64[200,7,4,3] = mul mjy mjo
                        mka:f64[200,7,4,3] = add mjs mjz
                        mkb:f64[200,7,4] = mul 2.0 mju
                        mkc:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] mkb
                        mkd:f64[200,7,4,3] mke:f64[200,7,4] mkf:f64[200,7,4] mkg:f64[200,7,4]
                          mkh:f64[200,7,4] mki:f64[200,7,4] mkj:f64[200,7,4] = pjit[
                          name=cross
                          jaxpr=cross13
                        ] mjn mjo kmc kmd kme kmf kmg kmh
                        mkk:f64[200,7,4,3] = mul mkc mkd
                        mkl:f64[200,7,4,3] = add mka mkk
                        mkm:f64[200,7,4,3] = add mjm mkl
                        mkn:f64[200,7,13,3] = concatenate[dimension=2] mhl mim mjm
                          mkm
                        mko:f64[200,7,13,3] = pjit[name=_take jaxpr=_take17] mkn
                          kmi
                        mkp:f64[200,7,13,3] = slice[
                          limit_indices=(200, 7, 13, 4)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] lxf
                        mkq:f64[13,200,7] = dot_general[
                          dimension_numbers=(([3], [1]), ([2], [0]))
                          preferred_element_type=float64
                        ] mkp kmj
                        mkr:f64[200,7,13] = transpose[permutation=(1, 2, 0)] mkq
                        mks:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] mkr
                        mkt:f64[200,7,13,3] = mul mks mkp
                        mku:f64[200,7,13,3] = mul 2.0 mkt
                        mkv:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] lxf
                        mkw:f64[200,7,13] = squeeze[dimensions=(3,)] mkv
                        mkx:f64[200,7,13] = mul mkw mkw
                        mky:f64[200,7,13] = dot_general[
                          dimension_numbers=(([3], [3]), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] mkp mkp
                        mkz:f64[200,7,13] = sub mkx mky
                        mla:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] mkz
                        mlb:f64[200,7,13,3] = mul mla kmk
                        mlc:f64[200,7,13,3] = add mku mlb
                        mld:f64[200,7,13] = mul 2.0 mkw
                        mle:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] mld
                        mlf:f64[200,7,13,3] = pjit[name=cross jaxpr=cross12] mkp
                          kml kmm kmn kmo kmp kmq kmr kms kmt
                        mlg:f64[200,7,13,3] = mul mle mlf
                        mlh:f64[200,7,13,3] = add mlc mlg
                        mli:f64[200,7,13,3] = add mko mlh
                        mlj:f64[200,7,13,3] = mul kki mli
                        mlk:f64[200,7,13,3] = scatter-add[
                          dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          unique_indices=False
                          update_consts=()
                          update_jaxpr=jaxpr
                        ] kkg kkh mlj
                        mll:f64[200,7,13,3] = gather[
                          dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 3), collapsed_slice_dims=(2,), start_index_map=(2,))
                          fill_value=None
                          indices_are_sorted=False
                          mode=GatherScatterMode.PROMISE_IN_BOUNDS
                          slice_sizes=(200, 7, 1, 3)
                          unique_indices=False
                        ] mlk kmu
                        mlm:f64[200,7,13,3] = div mll kmv
                        mln:f64[200,7,14,3] = concatenate[dimension=2] mko kmw
                        mlo:f64[200,7,13,3] = pjit[name=_take jaxpr=_take18] mln
                          kmx
                        mlp:f64[200,7,13,3] = slice[
                          limit_indices=(200, 7, 13, 4)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] lxh
                        mlq:f64[13,200,7] = dot_general[
                          dimension_numbers=(([3], [1]), ([2], [0]))
                          preferred_element_type=float64
                        ] mlp kmy
                        mlr:f64[200,7,13] = transpose[permutation=(1, 2, 0)] mlq
                        mls:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] mlr
                        mlt:f64[200,7,13,3] = mul mls mlp
                        mlu:f64[200,7,13,3] = mul 2.0 mlt
                        mlv:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] lxh
                        mlw:f64[200,7,13] = squeeze[dimensions=(3,)] mlv
                        mlx:f64[200,7,13] = mul mlw mlw
                        mly:f64[200,7,13] = dot_general[
                          dimension_numbers=(([3], [3]), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] mlp mlp
                        mlz:f64[200,7,13] = sub mlx mly
                        mma:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] mlz
                        mmb:f64[200,7,13,3] = mul mma kmz
                        mmc:f64[200,7,13,3] = add mlu mmb
                        mmd:f64[200,7,13] = mul 2.0 mlw
                        mme:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] mmd
                        mmf:f64[200,7,13,3] = pjit[name=cross jaxpr=cross12] mlp
                          kna knb knc knd kne knf kng knh kni
                        mmg:f64[200,7,13,3] = mul mme mmf
                        mmh:f64[200,7,13,3] = add mmc mmg
                        mmi:f64[200,7,13,3] = add mlo mmh
                        mmj:f64[200,7,13,3] = slice[
                          limit_indices=(200, 7, 13, 4)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] lzx
                        mmk:f64[13,200,7] = dot_general[
                          dimension_numbers=(([3], [1]), ([2], [0]))
                          preferred_element_type=float64
                        ] mmj kkp
                        mml:f64[200,7,13] = transpose[permutation=(1, 2, 0)] mmk
                        mmm:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] mml
                        mmn:f64[200,7,13,3] = mul mmm mmj
                        mmo:f64[200,7,13,3] = mul 2.0 mmn
                        mmp:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] lzx
                        mmq:f64[200,7,13] = squeeze[dimensions=(3,)] mmp
                        mmr:f64[200,7,13] = mul mmq mmq
                        mms:f64[200,7,13] = dot_general[
                          dimension_numbers=(([3], [3]), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] mmj mmj
                        mmt:f64[200,7,13] = sub mmr mms
                        mmu:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] mmt
                        mmv:f64[200,7,13,3] = mul mmu knj
                        mmw:f64[200,7,13,3] = add mmo mmv
                        mmx:f64[200,7,13] = mul 2.0 mmq
                        mmy:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] mmx
                        mmz:f64[200,7,13,3] = pjit[name=cross jaxpr=cross12] mmj
                          knk knl knm knn kno knp knq knr kns
                        mna:f64[200,7,13,3] = mul mmy mmz
                        mnb:f64[200,7,13,3] = add mmw mna
                        mnc:f64[200,7,13,3] = add mmi mnb
                        mnd:f64[200,7,13,3] = sub mlm mnc
                        mne:f64[200,7,18,3] = pjit[name=_take jaxpr=_take19] mnd
                          knt
                        mnf:f64[200,7,18,3] mng:f64[200,7,18] mnh:f64[200,7,18] mni:f64[200,7,18]
                          mnj:f64[200,7,18] mnk:f64[200,7,18] mnl:f64[200,7,18] = pjit[
                          name=cross
                          jaxpr=cross14
                        ] mne meh knu knv knw knx kny knz
                        mnm:f64[200,7,18,3] = sub kkf mnf
                        mnn:f64[18,200,7] = dot_general[
                          dimension_numbers=(([1], [3]), ([0], [2]))
                          preferred_element_type=float64
                        ] kke mnm
                        mno:f64[200,7,18] = transpose[permutation=(1, 2, 0)] mnn
                        mnp:f64[200,7,18,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 18, 1)
                        ] mno
                        mnq:f64[200,7,18,3] = mul mnp koa
                        mnr:f64[200,7,18,3] = mul 2.0 mnq
                        mns:f64[200,7,18,3] = mul kob mnm
                        mnt:f64[200,7,18,3] = add mnr mns
                        mnu:f64[200,7,18,3] = pjit[name=cross jaxpr=cross11] mnm
                          kod koe kof kog koh koi koj kok kol
                        mnv:f64[200,7,18,3] = mul koc mnu
                        mnw:f64[200,7,18,3] = add mnt mnv
                        mnx:f64[200,7,6,3] = slice[
                          limit_indices=(200, 7, 6, 3)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] mnw
                        mny:f64[200,7,1,6,3] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 1, 6, 3)
                        ] mnx
                        mnz:f64[200,7,1,6,3] moa:f64[200,7,1,6] mob:f64[200,7,1,1]
                          moc:f64[200,7,1,6] mod:f64[200,7,1,1] moe:f64[200,7,1,6]
                          mof:f64[200,7,1,1] mog:f64[200,7,1,1] moh:f64[200,7,1,1]
                          moi:f64[200,7,1,1] = pjit[name=cross jaxpr=cross15] mex
                          mny kom kon koo kop koq kor
                        moj:f64[200,7,18,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 18, 1)
                        ] ldo
                        mok:f64[200,7,18,3] = mul mnw moj
                        mol:f64[200,7,6,3] = slice[
                          limit_indices=(200, 7, 6, 3)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] mok
                        mom:f64[200,7,1,6,3] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 1, 6, 3)
                        ] mol
                        mon:f64[200,7,1,3,3] = slice[
                          limit_indices=(200, 7, 1, 3, 3)
                          start_indices=(0, 0, 0, 0, 0)
                          strides=None
                        ] mom
                        moo:f64[200,7,1,3] = reduce_sum[axes=(3,)] mon
                        mop:f64[200,7,6,3] = slice[
                          limit_indices=(200, 7, 6, 3)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] mer
                        moq:f64[200,7,1,6,3] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 1, 6, 3)
                        ] mop
                        mor:f64[200,7,1,6,3] mos:f64[200,7,1,6] mot:f64[200,7,1,1]
                          mou:f64[200,7,1,6] mov:f64[200,7,1,1] mow:f64[200,7,1,6]
                          mox:f64[200,7,1,1] moy:f64[200,7,1,1] moz:f64[200,7,1,1]
                          mpa:f64[200,7,1,1] = pjit[name=cross jaxpr=cross15] moo
                          moq kos kot kou kov kow kox
                        mpb:f64[200,7,1,6,3] = add mnz mor
                        mpc:f64[200,7,1,6,3] = scatter[
                          dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2, 3, 4), inserted_window_dims=(), scatter_dims_to_operand_dims=(3,))
                          indices_are_sorted=True
                          mode=GatherScatterMode.FILL_OR_DROP
                          unique_indices=True
                          update_consts=()
                          update_jaxpr=None
                        ] mpb koy koz
                        mpd:f64[200,7,6,3] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 6, 3)
                        ] mpc
                        mpe:f64[200,7,6,3] = slice[
                          limit_indices=(200, 7, 6, 3)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] met
                        mpf:f64[200,7,1,3] = scatter-add[
                          dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          unique_indices=False
                          update_consts=()
                          update_jaxpr=jaxpr
                        ] kpa kpb mpe
                        mpg:f64[200,7,4,3] = pjit[name=_take jaxpr=_take15] mpf kpc
                        mph:f64[200,7,4,3] = pjit[name=_take jaxpr=_take20] met kpe
                        mpi:f64[200,7,4,3] = scatter-add[
                          dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          unique_indices=False
                          update_consts=()
                          update_jaxpr=jaxpr
                        ] mpg kpd mph
                        mpj:f64[200,7,4,3] = pjit[name=_take jaxpr=_take20] met kpg
                        mpk:f64[200,7,4,3] = scatter-add[
                          dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          unique_indices=False
                          update_consts=()
                          update_jaxpr=jaxpr
                        ] mpi kpf mpj
                        mpl:f64[200,7,4,3] = pjit[name=_take jaxpr=_take20] met kpi
                        mpm:f64[200,7,4,3] = scatter-add[
                          dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          unique_indices=False
                          update_consts=()
                          update_jaxpr=jaxpr
                        ] mpk kph mpl
                        mpn:f64[200,7,13,3] = concatenate[dimension=2] mpf mpi mpk
                          mpm
                        mpo:f64[200,7,13,3] = pjit[name=_take jaxpr=_take17] mpn
                          kpj
                        mpp:f64[200,7,14,3] = concatenate[dimension=2] mpo kpk
                        mpq:f64[200,7,13,3] = pjit[name=_take jaxpr=_take18] mpp
                          kpl
                        mpr:f64[200,7,12,3] = slice[
                          limit_indices=(200, 7, 13, 3)
                          start_indices=(0, 0, 1, 0)
                          strides=None
                        ] mpq
                        mps:f64[200,7,12,3] = slice[
                          limit_indices=(200, 7, 18, 3)
                          start_indices=(0, 0, 6, 0)
                          strides=None
                        ] mnw
                        mpt:f64[200,7,12,3] mpu:f64[200,7,12] mpv:f64[200,7,12] mpw:f64[200,7,12]
                          mpx:f64[200,7,12] mpy:f64[200,7,12] mpz:f64[200,7,12] = pjit[
                          name=cross
                          jaxpr=cross16
                        ] mpr mps kpm kpn kpo kpp kpq kpr
                        mqa:f64[200,7,6,3] = slice[
                          limit_indices=(200, 7, 6, 3)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] mok
                        mqb:f64[200,7,1,3] = scatter-add[
                          dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          unique_indices=False
                          update_consts=()
                          update_jaxpr=jaxpr
                        ] kps kpt mqa
                        mqc:f64[200,7,4,3] = pjit[name=_take jaxpr=_take15] mqb kpu
                        mqd:f64[200,7,4,3] = pjit[name=_take jaxpr=_take20] mok kpw
                        mqe:f64[200,7,4,3] = scatter-add[
                          dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          unique_indices=False
                          update_consts=()
                          update_jaxpr=jaxpr
                        ] mqc kpv mqd
                        mqf:f64[200,7,4,3] = pjit[name=_take jaxpr=_take20] mok kpy
                        mqg:f64[200,7,4,3] = scatter-add[
                          dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          unique_indices=False
                          update_consts=()
                          update_jaxpr=jaxpr
                        ] mqe kpx mqf
                        mqh:f64[200,7,4,3] = pjit[name=_take jaxpr=_take20] mok kqa
                        mqi:f64[200,7,4,3] = scatter-add[
                          dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          unique_indices=False
                          update_consts=()
                          update_jaxpr=jaxpr
                        ] mqg kpz mqh
                        mqj:f64[200,7,13,3] = concatenate[dimension=2] mqb mqe mqg
                          mqi
                        mqk:f64[200,7,13,3] = pjit[name=_take jaxpr=_take17] mqj
                          kqb
                        mql:f64[200,7,14,3] = concatenate[dimension=2] mqk kqc
                        mqm:f64[200,7,13,3] = pjit[name=_take jaxpr=_take18] mql
                          kqd
                        mqn:f64[200,7,12,3] = slice[
                          limit_indices=(200, 7, 13, 3)
                          start_indices=(0, 0, 1, 0)
                          strides=None
                        ] mqm
                        mqo:f64[200,7,12,3] = slice[
                          limit_indices=(200, 7, 18, 3)
                          start_indices=(0, 0, 6, 0)
                          strides=None
                        ] mer
                        mqp:f64[200,7,12,3] mqq:f64[200,7,12] mqr:f64[200,7,12] mqs:f64[200,7,12]
                          mqt:f64[200,7,12] mqu:f64[200,7,12] mqv:f64[200,7,12] = pjit[
                          name=cross
                          jaxpr=cross16
                        ] mqn mqo kqe kqf kqg kqh kqi kqj
                        mqw:f64[200,7,12,3] = add mpt mqp
                        mqx:f64[200,7,18,3] = concatenate[dimension=2] mpd mqw
                        mqy:f64[200,7,6,3] = slice[
                          limit_indices=(200, 7, 6, 3)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] mqx
                        mqz:f64[200,7,6] = slice[
                          limit_indices=(200, 7, 6)
                          start_indices=(0, 0, 0)
                          strides=None
                        ] ldo
                        mra:f64[200,7,6,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 6, 1)
                        ] mqz
                        mrb:f64[200,7,6,3] = mul mqy mra
                        mrc:f64[200,7,1,3] = scatter-add[
                          dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          unique_indices=False
                          update_consts=()
                          update_jaxpr=jaxpr
                        ] kgk kgl mrb
                        mrd:f64[200,7,4,3] = pjit[name=_take jaxpr=_take15] mrc kqk
                        mre:f64[200,7,4,3] = pjit[name=_take jaxpr=_take20] mqx kqm
                        mrf:f64[200,7,4] = pjit[name=_take jaxpr=_take21] ldo kqn
                        mrg:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] mrf
                        mrh:f64[200,7,4,3] = mul mre mrg
                        mri:f64[200,7,4,3] = scatter-add[
                          dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          unique_indices=False
                          update_consts=()
                          update_jaxpr=jaxpr
                        ] mrd kql mrh
                        mrj:f64[200,7,4,3] = pjit[name=_take jaxpr=_take20] mqx kqp
                        mrk:f64[200,7,4] = pjit[name=_take jaxpr=_take21] ldo kqq
                        mrl:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] mrk
                        mrm:f64[200,7,4,3] = mul mrj mrl
                        mrn:f64[200,7,4,3] = scatter-add[
                          dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          unique_indices=False
                          update_consts=()
                          update_jaxpr=jaxpr
                        ] mri kqo mrm
                        mro:f64[200,7,4,3] = pjit[name=_take jaxpr=_take20] mqx kqs
                        mrp:f64[200,7,4] = pjit[name=_take jaxpr=_take21] ldo kqt
                        mrq:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] mrp
                        mrr:f64[200,7,4,3] = mul mro mrq
                        mrs:f64[200,7,4,3] = scatter-add[
                          dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          unique_indices=False
                          update_consts=()
                          update_jaxpr=jaxpr
                        ] mrn kqr mrr
                        mrt:f64[200,7,13,3] = concatenate[dimension=2] mrc mri mrn
                          mrs
                        mru:f64[200,7,13,3] = pjit[name=_take jaxpr=_take17] mrt
                          kqu
                        mrv:f64[200,7,13,3] = mul kgj mru
                        mrw:f64[200,7,13,3] = sub mli mlm
                        mrx:f64[200,7,13,3] = mul mrw kqv
                        mry:f64[200,7,1,6,3] mrz:f64[200,7,1,6] msa:f64[200,7,1,1]
                          msb:f64[200,7,1,6] msc:f64[200,7,1,1] msd:f64[200,7,1,6]
                          mse:f64[200,7,1,1] msf:f64[200,7,1,1] msg:f64[200,7,1,1]
                          msh:f64[200,7,1,1] = pjit[name=cross jaxpr=cross15] mex
                          moq kqy kqz kra krb krc krd
                        msi:f64[200,7,1,6,3] = scatter[
                          dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2, 3, 4), inserted_window_dims=(), scatter_dims_to_operand_dims=(3,))
                          indices_are_sorted=True
                          mode=GatherScatterMode.FILL_OR_DROP
                          unique_indices=True
                          update_consts=()
                          update_jaxpr=None
                        ] mry kre krf
                        msj:f64[200,7,6,3] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 6, 3)
                        ] msi
                        msk:f64[200,7,12,3] msl:f64[200,7,12] msm:f64[200,7,12] msn:f64[200,7,12]
                          mso:f64[200,7,12] msp:f64[200,7,12] msq:f64[200,7,12] = pjit[
                          name=cross
                          jaxpr=cross16
                        ] mpr mqo krg krh kri krj krk krl
                        msr:f64[200,7,18,3] = concatenate[dimension=2] msj msk
                        mss:f64[200,7,6,3] = slice[
                          limit_indices=(200, 7, 6, 3)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] msr
                        mst:f64[200,7,6,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 6, 1)
                        ] mqz
                        msu:f64[200,7,6,3] = mul mss mst
                        msv:f64[200,7,1,3] = scatter-add[
                          dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          unique_indices=False
                          update_consts=()
                          update_jaxpr=jaxpr
                        ] kqw kqx msu
                        msw:f64[200,7,4,3] = pjit[name=_take jaxpr=_take15] msv krm
                        msx:f64[200,7,4,3] = pjit[name=_take jaxpr=_take20] msr kro
                        msy:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] mrf
                        msz:f64[200,7,4,3] = mul msx msy
                        mta:f64[200,7,4,3] = scatter-add[
                          dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          unique_indices=False
                          update_consts=()
                          update_jaxpr=jaxpr
                        ] msw krn msz
                        mtb:f64[200,7,4,3] = pjit[name=_take jaxpr=_take20] msr krq
                        mtc:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] mrk
                        mtd:f64[200,7,4,3] = mul mtb mtc
                        mte:f64[200,7,4,3] = scatter-add[
                          dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          unique_indices=False
                          update_consts=()
                          update_jaxpr=jaxpr
                        ] mta krp mtd
                        mtf:f64[200,7,4,3] = pjit[name=_take jaxpr=_take20] msr krs
                        mtg:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] mrp
                        mth:f64[200,7,4,3] = mul mtf mtg
                        mti:f64[200,7,4,3] = scatter-add[
                          dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          unique_indices=False
                          update_consts=()
                          update_jaxpr=jaxpr
                        ] mte krr mth
                        mtj:f64[200,7,13,3] = concatenate[dimension=2] msv mta mte
                          mti
                        mtk:f64[200,7,13,3] = pjit[name=_take jaxpr=_take17] mtj
                          krt
                        mtl:f64[200,7,13,3] mtm:f64[200,7,13] mtn:f64[200,7,13] mto:f64[200,7,13]
                          mtp:f64[200,7,13] mtq:f64[200,7,13] mtr:f64[200,7,13] = pjit[
                          name=cross
                          jaxpr=cross17
                        ] mrx mtk kru krv krw krx kry krz
                        mts:f64[200,7,13,3] = sub mrv mtl
                        mtt:f64[200,7,13,3] = mul ksa mqk
                        mtu:f64[200,7,13,3] mtv:f64[200,7,13] mtw:f64[200,7,13] mtx:f64[200,7,13]
                          mty:f64[200,7,13] mtz:f64[200,7,13] mua:f64[200,7,13] = pjit[
                          name=cross
                          jaxpr=cross17
                        ] mrx mpo ksb ksc ksd kse ksf ksg
                        mub:f64[200,7,13,3] = sub mtt mtu
                        muc:f64[200,7,13,3] mud:f64[200,7,13] mue:f64[200,7,13] muf:f64[200,7,13]
                          mug:f64[200,7,13] muh:f64[200,7,13] mui:f64[200,7,13] = pjit[
                          name=cross
                          jaxpr=cross17
                        ] mpo mub ksh ksi ksj ksk ksl ksm
                        muj:f64[200,7,13,3] = add mts muc
                        muk:f64[200,7,1,3] = slice[
                          limit_indices=(200, 7, 1, 3)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] muj
                        mul:f64[200,7,4,3] = pjit[name=_take jaxpr=_take16] muj ksp
                        mum:f64[200,7,4,3] = pjit[name=_take jaxpr=_take16] muj kss
                        mun:f64[200,7,4,3] = pjit[name=_take jaxpr=_take16] muj ksv
                        muo:f64[200,7,4,3] = scatter-add[
                          dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          unique_indices=False
                          update_consts=()
                          update_jaxpr=jaxpr
                        ] kst ksu mun
                        mup:f64[200,7,4,3] = add mum muo
                        muq:f64[200,7,4,3] = scatter-add[
                          dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          unique_indices=False
                          update_consts=()
                          update_jaxpr=jaxpr
                        ] ksq ksr mup
                        mur:f64[200,7,4,3] = add mul muq
                        mus:f64[200,7,1,3] = scatter-add[
                          dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          unique_indices=False
                          update_consts=()
                          update_jaxpr=jaxpr
                        ] ksn kso mur
                        mut:f64[200,7,1,3] = add muk mus
                        muu:f64[200,7,13,3] = concatenate[dimension=2] mut mur mup
                          mun
                        muv:f64[200,7,13,3] = pjit[name=_take jaxpr=_take17] muu
                          ksw
                        muw:f64[200,7,18,3] = pjit[name=_take jaxpr=_take19] muv
                          ksx
                        mux:f64[200,7,18] = dot_general[
                          dimension_numbers=(([3], [3]), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] mnw muw
                        muy:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] lxf
                        muz:f64[200,7,13] = squeeze[dimensions=(3,)] muy
                        mva:f64[200,7,13] = mul muz ksy
                        mvb:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] lxf
                        mvc:f64[200,7,13] = squeeze[dimensions=(3,)] mvb
                        mvd:f64[200,7,13] = mul mvc ksz
                        mve:f64[200,7,13] = sub mva mvd
                        mvf:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] lxf
                        mvg:f64[200,7,13] = squeeze[dimensions=(3,)] mvf
                        mvh:f64[200,7,13] = mul mvg kta
                        mvi:f64[200,7,13] = sub mve mvh
                        mvj:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] lxf
                        mvk:f64[200,7,13] = squeeze[dimensions=(3,)] mvj
                        mvl:f64[200,7,13] = mul mvk ktb
                        mvm:f64[200,7,13] = sub mvi mvl
                        mvn:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] mvm
                        mvo:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] lxf
                        mvp:f64[200,7,13] = squeeze[dimensions=(3,)] mvo
                        mvq:f64[200,7,13] = mul mvp ktc
                        mvr:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] lxf
                        mvs:f64[200,7,13] = squeeze[dimensions=(3,)] mvr
                        mvt:f64[200,7,13] = mul mvs ktd
                        mvu:f64[200,7,13] = add mvq mvt
                        mvv:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] lxf
                        mvw:f64[200,7,13] = squeeze[dimensions=(3,)] mvv
                        mvx:f64[200,7,13] = mul mvw kte
                        mvy:f64[200,7,13] = add mvu mvx
                        mvz:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] lxf
                        mwa:f64[200,7,13] = squeeze[dimensions=(3,)] mvz
                        mwb:f64[200,7,13] = mul mwa ktf
                        mwc:f64[200,7,13] = sub mvy mwb
                        mwd:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] mwc
                        mwe:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] lxf
                        mwf:f64[200,7,13] = squeeze[dimensions=(3,)] mwe
                        mwg:f64[200,7,13] = mul mwf ktg
                        mwh:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] lxf
                        mwi:f64[200,7,13] = squeeze[dimensions=(3,)] mwh
                        mwj:f64[200,7,13] = mul mwi kth
                        mwk:f64[200,7,13] = sub mwg mwj
                        mwl:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] lxf
                        mwm:f64[200,7,13] = squeeze[dimensions=(3,)] mwl
                        mwn:f64[200,7,13] = mul mwm kti
                        mwo:f64[200,7,13] = add mwk mwn
                        mwp:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] lxf
                        mwq:f64[200,7,13] = squeeze[dimensions=(3,)] mwp
                        mwr:f64[200,7,13] = mul mwq ktj
                        mws:f64[200,7,13] = add mwo mwr
                        mwt:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] mws
                        mwu:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] lxf
                        mwv:f64[200,7,13] = squeeze[dimensions=(3,)] mwu
                        mww:f64[200,7,13] = mul mwv ktk
                        mwx:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] lxf
                        mwy:f64[200,7,13] = squeeze[dimensions=(3,)] mwx
                        mwz:f64[200,7,13] = mul mwy ktl
                        mxa:f64[200,7,13] = add mww mwz
                        mxb:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] lxf
                        mxc:f64[200,7,13] = squeeze[dimensions=(3,)] mxb
                        mxd:f64[200,7,13] = mul mxc ktm
                        mxe:f64[200,7,13] = sub mxa mxd
                        mxf:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] lxf
                        mxg:f64[200,7,13] = squeeze[dimensions=(3,)] mxf
                        mxh:f64[200,7,13] = mul mxg ktn
                        mxi:f64[200,7,13] = add mxe mxh
                        mxj:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] mxi
                        mxk:f64[200,7,13,4] = concatenate[dimension=3] mvn mwd mwt
                          mxj
                        mxl:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=(1, 1, 1, 1)
                        ] mxk
                        mxm:f64[200,7,13] = squeeze[dimensions=(3,)] mxl
                        mxn:f64[200,7,13] = dot_general[
                          dimension_numbers=(([3], [3]), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] mxk mxk
                        mxo:f64[200,7,13] = div 2.0 mxn
                        mxp:f64[200,7,13] = mul mxm mxo
                        mxq:f64[200,7,13] = mul mxm mxp
                        mxr:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=(1, 1, 1, 1)
                        ] mxk
                        mxs:f64[200,7,13] = squeeze[dimensions=(3,)] mxr
                        mxt:f64[200,7,13] = mul mxs mxo
                        mxu:f64[200,7,13] = mul mxs mxt
                        mxv:f64[200,7,13] = add mxq mxu
                        mxw:f64[200,7,13] = sub 1.0 mxv
                        mxx:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] mxw
                        mxy:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=(1, 1, 1, 1)
                        ] mxk
                        mxz:f64[200,7,13] = squeeze[dimensions=(3,)] mxy
                        mya:f64[200,7,13] = mul mxz mxp
                        myb:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=(1, 1, 1, 1)
                        ] mxk
                        myc:f64[200,7,13] = squeeze[dimensions=(3,)] myb
                        myd:f64[200,7,13] = mul myc mxt
                        mye:f64[200,7,13] = sub mya myd
                        myf:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] mye
                        myg:f64[200,7,13] = mul mxz mxt
                        myh:f64[200,7,13] = mul myc mxp
                        myi:f64[200,7,13] = add myg myh
                        myj:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] myi
                        myk:f64[200,7,13,3] = concatenate[dimension=3] mxx myf myj
                        myl:f64[200,7,13,1,3] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2, 4)
                          shape=(200, 7, 13, 1, 3)
                        ] myk
                        mym:f64[200,7,13] = add mya myd
                        myn:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] mym
                        myo:f64[200,7,13] = mul mxz mxo
                        myp:f64[200,7,13] = mul mxz myo
                        myq:f64[200,7,13] = add myp mxu
                        myr:f64[200,7,13] = sub 1.0 myq
                        mys:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] myr
                        myt:f64[200,7,13] = mul mxm mxt
                        myu:f64[200,7,13] = mul myc myo
                        myv:f64[200,7,13] = sub myt myu
                        myw:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] myv
                        myx:f64[200,7,13,3] = concatenate[dimension=3] myn mys myw
                        myy:f64[200,7,13,1,3] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2, 4)
                          shape=(200, 7, 13, 1, 3)
                        ] myx
                        myz:f64[200,7,13] = sub myg myh
                        mza:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] myz
                        mzb:f64[200,7,13] = add myt myu
                        mzc:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] mzb
                        mzd:f64[200,7,13] = add myp mxq
                        mze:f64[200,7,13] = sub 1.0 mzd
                        mzf:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] mze
                        mzg:f64[200,7,13,3] = concatenate[dimension=3] mza mzc mzf
                        mzh:f64[200,7,13,1,3] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2, 4)
                          shape=(200, 7, 13, 1, 3)
                        ] mzg
                        mzi:f64[200,7,13,3,3] = concatenate[dimension=3] myl myy
                          mzh
                        mzj:f64[13,200,7,3,3] = dot_general[
                          dimension_numbers=(([4], [1]), ([2], [0]))
                          preferred_element_type=float64
                        ] mzi kto
                        mzk:f64[200,7,13,3,3] = transpose[
                          permutation=(0, 1, 2, 4, 3)
                        ] mzi
                        mzl:f64[200,7,13,3,3] = dot_general[
                          dimension_numbers=(([4], [3]), ([1, 2, 0], [0, 1, 2]))
                          preferred_element_type=float64
                        ] mzj mzk
                        mzm:f64[200,7,13,3,3] = pjit[
                          name=cross
                          jaxpr={ lambda ; mzn:f64[200,7,13,3] mzo:i32[1] mzp:f64[1,1,1,3]
                              mzq:i32[1] mzr:f64[1,1,1,3] mzs:f64[1,1,1,3] mzt:i32[1]
                              mzu:f64[1,1,1,3] mzv:f64[1,1,1,3] mzw:f64[1,1,1,3]. let
                              mzx:f64[200,7,13] = gather[
                                dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
                                fill_value=None
                                indices_are_sorted=True
                                mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                slice_sizes=(200, 7, 13, 1)
                                unique_indices=True
                              ] mzn mzo
                              mzy:f64[200,7,13,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1, 2)
                                shape=(200, 7, 13, 1)
                              ] mzx
                              mzz:f64[200,7,13,3] = mul mzy mzp
                              naa:f64[200,7,13] = gather[
                                dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
                                fill_value=None
                                indices_are_sorted=True
                                mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                slice_sizes=(200, 7, 13, 1)
                                unique_indices=True
                              ] mzn mzq
                              nab:f64[200,7,13,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1, 2)
                                shape=(200, 7, 13, 1)
                              ] naa