run_name: null
sweep_name: null
env: Go1GoFast
algo: ssrl
gpus: '0'
num_seeds: 1
ssrl_dynamics_fn: contact_integrate_only
render_during_training: true
render_epoch_interval: 1
render_seed: 0
common:
  action_repeat: 1
  obs_history_length: 5
  normalize_observations: false
  forces_in_q_coords: true
actor_network:
  hidden_layers: 2
  hidden_size: 512
  activation: swish
  max_std: null
critic_network:
  hidden_layers: 5
  hidden_size: 256
env_common:
  policy_repeat: 4
  forward_vel_rew_weight: 2.0
  turn_rew_weight: 0.5
  pitch_rew_weight: 0.25
  roll_rew_weight: 0.25
  yaw_rew_weight: 0.5
  side_motion_rew_weight: 0.5
  z_vel_change_rew_weight: 0.15
  ang_vel_rew_weight: 0.0
  ang_change_rew_weight: 0.25
  joint_lim_rew_weight: 0.0
  torque_lim_rew_weight: 0.0
  joint_acc_rew_weight: 0.0
  action_rew_weight: 0.0
  cosmetic_rew_weight: 0.0
  energy_rew_weight: 0.25
  foot_z_rew_weight: 0.0
  torque_lim_penalty_weight: 0.1
  fallen_roll: 0.785
  fallen_pitch: 0.785
  include_height_in_obs: false
  gains_in_action_space: false
  reward_type: normalized
env_sac:
  policy_repeat: ${env_common.policy_repeat}
  forward_cmd_vel_type: constant
  forward_cmd_vel_range: 0.0
  forward_cmd_vel_period_range:
  - 40.0
  - 40.0
  turn_cmd_rate_range:
  - -0.0
  - 0.0
  initial_yaw_range:
  - -0.0
  - 0.0
  contact_time_const: 0.02
  contact_damping_ratio: 1.0
  friction_range:
  - 0.6
  - 0.6
  ground_roll_range:
  - 0.0
  - 0.0
  ground_pitch_range:
  - 0.0
  - 0.0
  joint_damping_perc_range:
  - 1.0
  - 1.0
  joint_gain_range:
  - 1.0
  - 1.0
  link_mass_perc_range:
  - 1.0
  - 1.0
  forward_vel_rew_weight: ${env_common.forward_vel_rew_weight}
  turn_rew_weight: ${env_common.turn_rew_weight}
  pitch_rew_weight: ${env_common.pitch_rew_weight}
  roll_rew_weight: ${env_common.roll_rew_weight}
  yaw_rew_weight: ${env_common.yaw_rew_weight}
  side_motion_rew_weight: ${env_common.side_motion_rew_weight}
  z_vel_change_rew_weight: ${env_common.z_vel_change_rew_weight}
  ang_vel_rew_weight: ${env_common.ang_vel_rew_weight}
  ang_change_rew_weight: ${env_common.ang_change_rew_weight}
  joint_lim_rew_weight: ${env_common.joint_lim_rew_weight}
  torque_lim_rew_weight: ${env_common.torque_lim_rew_weight}
  joint_acc_rew_weight: ${env_common.joint_acc_rew_weight}
  action_rew_weight: ${env_common.action_rew_weight}
  cosmetic_rew_weight: ${env_common.cosmetic_rew_weight}
  energy_rew_weight: ${env_common.energy_rew_weight}
  foot_z_rew_weight: ${env_common.foot_z_rew_weight}
  torque_lim_penalty_weight: ${env_common.torque_lim_penalty_weight}
  fallen_roll: ${env_common.fallen_roll}
  fallen_pitch: ${env_common.fallen_pitch}
  forces_in_q_coords: ${common.forces_in_q_coords}
  include_height_in_obs: ${env_common.include_height_in_obs}
  gains_in_action_space: ${env_common.gains_in_action_space}
  reward_type: ${env_common.reward_type}
sac:
  num_timesteps: 10000000
  episode_length: 1000
  action_repeat: ${common.action_repeat}
  obs_history_length: ${common.obs_history_length}
  num_envs: 1
  num_eval_envs: 500
  learning_rate: 0.0001
  discounting: 0.99
  seed: 0
  batch_size: 200
  num_evals: 10
  normalize_observations: ${common.normalize_observations}
  reward_scaling: 1
  tau: 0.001
  min_replay_size: 10000
  max_replay_size: 200000
  grad_updates_per_step: 20
  deterministic_eval: true
env_ssrl:
  policy_repeat: ${env_common.policy_repeat}
  forward_cmd_vel_type: constant
  forward_cmd_vel_range: 0.0
  forward_cmd_vel_period_range:
  - 40.0
  - 40.0
  turn_cmd_rate_range:
  - -0.0
  - 0.0
  initial_yaw_range:
  - -0.0
  - 0.0
  contact_time_const: 0.02
  contact_damping_ratio: 1.0
  friction_range:
  - 0.6
  - 0.6
  ground_roll_range:
  - 0.0
  - 0.0
  ground_pitch_range:
  - 0.0
  - 0.0
  joint_damping_perc_range:
  - 1.0
  - 1.0
  joint_gain_range:
  - 1.0
  - 1.0
  link_mass_perc_range:
  - 1.0
  - 1.0
  forward_vel_rew_weight: ${env_common.forward_vel_rew_weight}
  turn_rew_weight: ${env_common.turn_rew_weight}
  pitch_rew_weight: ${env_common.pitch_rew_weight}
  roll_rew_weight: ${env_common.roll_rew_weight}
  yaw_rew_weight: ${env_common.yaw_rew_weight}
  side_motion_rew_weight: ${env_common.side_motion_rew_weight}
  z_vel_change_rew_weight: ${env_common.z_vel_change_rew_weight}
  ang_vel_rew_weight: ${env_common.ang_vel_rew_weight}
  ang_change_rew_weight: ${env_common.ang_change_rew_weight}
  joint_lim_rew_weight: ${env_common.joint_lim_rew_weight}
  torque_lim_rew_weight: ${env_common.torque_lim_rew_weight}
  joint_acc_rew_weight: ${env_common.joint_acc_rew_weight}
  action_rew_weight: ${env_common.action_rew_weight}
  cosmetic_rew_weight: ${env_common.cosmetic_rew_weight}
  energy_rew_weight: ${env_common.energy_rew_weight}
  foot_z_rew_weight: ${env_common.foot_z_rew_weight}
  torque_lim_penalty_weight: ${env_common.torque_lim_penalty_weight}
  fallen_roll: ${env_common.fallen_roll}
  fallen_pitch: ${env_common.fallen_pitch}
  forces_in_q_coords: ${common.forces_in_q_coords}
  include_height_in_obs: ${env_common.include_height_in_obs}
  body_height_in_action_space: true
  gains_in_action_space: ${env_common.gains_in_action_space}
  reward_type: ${env_common.reward_type}
  healthy_delta_radius: 2.0
  healthy_delta_yaw: 1.57
ssrl_start_with_sac: false
ssrl:
  episode_length: 1000
  policy_repeat: 1
  num_epochs: 40
  model_trains_per_epoch: 1
  training_steps_per_model_train: 1
  env_steps_per_training_step: 1000
  model_rollouts_per_hallucination_update: 400
  sac_grad_updates_per_hallucination_update: 60
  init_exploration_steps: 1000
  clear_model_buffer_after_model_train: false
  action_repeat: ${common.action_repeat}
  obs_history_length: ${common.obs_history_length}
  num_envs: 1
  num_evals: 41
  num_eval_envs: 1
  policy_normalize_observations: ${common.normalize_observations}
  model_learning_rate: 0.001
  model_training_batch_size: 200
  model_training_max_sgd_steps_per_epoch: null
  model_training_max_epochs: 1000
  model_training_convergence_criteria: 0.01
  model_training_consec_converged_epochs: 6
  model_training_abs_criteria: null
  model_training_test_ratio: 0.2
  model_training_weight_decay: true
  model_training_stop_gradient: false
  model_loss_horizon: 4
  model_check_done_condition: true
  max_env_buffer_size: 15000
  max_model_buffer_size: 400000
  sac_learning_rate: 0.0002
  sac_discounting: 0.99
  sac_batch_size: 256
  real_ratio: 0.06
  sac_reward_scaling: 1.0
  sac_tau: 0.001
  sac_fixed_alpha: None
  seed: 2
  deterministic_in_env: true
  deterministic_eval: true
  hallucination_max_std: -1.0
  zero_final_layer_of_policy: false
ssrl_model:
  hidden_size: 400
  ensemble_size: 7
  num_elites: 5
  probabilistic: true
ssrl_linear_threshold_fn:
  start_epoch: 0
  end_epoch: 10
  start_model_horizon: 1
  end_model_horizon: 20
ssrl_hupts_fn:
  start_epoch: 0
  end_epoch: 4
  start_hupts: 10
  end_hupts: 1000
render:
  policy: ssrl
wandb:
  entity: an-tsaritsin-itmo-university
  log_sac: true
  log_ssrl: true
save_policy:
  sac: true
  sac_all: true
  ssrl: true
  ssrl_all: true
torque_validate:
  hardware_data: true
Running on GPU 0
[2025-02-04 16:08:00,435][root][INFO] - Converting mesh (6656549023744117130, 6086012894254590903) into convex hull.
[2025-02-04 16:08:03,845][root][INFO] - Converting mesh (7885110425330011512, -1520026645143911713) into convex hull.
[2025-02-04 16:08:04,227][root][INFO] - Converting mesh (-4472825412599558678, -5142227984495432637) into convex hull.
[2025-02-04 16:08:05,370][root][INFO] - Converting mesh (4358430687835884600, -2841152117759796061) into convex hull.
[2025-02-04 16:08:06,289][root][INFO] - Converting mesh (3156252371368382572, 2820558258841865415) into convex hull.
[2025-02-04 16:09:06,395][absl][INFO] - {'eval/walltime': 53.5067503452301, 'eval/episode_forward_vel': Array(-376.30392904, dtype=float64), 'eval/episode_penalty_torque_lim': Array(-3.06508716e-06, dtype=float64), 'eval/episode_rew_action': Array(0., dtype=float64), 'eval/episode_rew_ang_change': Array(53.06618492, dtype=float64), 'eval/episode_rew_ang_vel': Array(0., dtype=float64), 'eval/episode_rew_cosmetic': Array(0., dtype=float64), 'eval/episode_rew_energy': Array(0.09114272, dtype=float64), 'eval/episode_rew_foot_z': Array(0., dtype=float64), 'eval/episode_rew_forward_vel': Array(-161.85115228, dtype=float64), 'eval/episode_rew_joint_acc': Array(0., dtype=float64), 'eval/episode_rew_joint_limits': Array(0., dtype=float64), 'eval/episode_rew_pitch': Array(53.59088099, dtype=float64), 'eval/episode_rew_roll': Array(53.54532013, dtype=float64), 'eval/episode_rew_side_motion': Array(94.86929945, dtype=float64), 'eval/episode_rew_torque_limits': Array(0., dtype=float64), 'eval/episode_rew_turn': Array(51.05626566, dtype=float64), 'eval/episode_rew_yaw': Array(30.11394262, dtype=float64), 'eval/episode_rew_z_vel_change': Array(24.29036732, dtype=float64), 'eval/episode_reward': Array(198.91886346, dtype=float64), 'eval/episode_step_count': Array(499500., dtype=float64), 'eval/avg_episode_length': Array(1000., dtype=float64), 'eval/epoch_eval_time': 53.5067503452301, 'eval/sps': 18.689230677398925}
Steps / Eval:  0
Reward is  198.91886346021627
Total reward is  198.91886346021585
[2025-02-04 16:11:36,028][absl][INFO] - env buffer size after init exploration 1000
Traceback (most recent call last):
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/mlir.py", line 1810, in _lower_jaxpr_to_fun_cached
    func_op = ctx.cached_primitive_lowerings[key]
KeyError: (None, let softplus = { lambda ; . let
    a:f64[7,36] = broadcast_in_dim[broadcast_dimensions=() shape=(7, 36)] 0.0
    b:f64[200,7,36] = broadcast_in_dim[
      broadcast_dimensions=(1, 2)
      shape=(200, 7, 36)
    ] a
    c:f64[7,36] = broadcast_in_dim[broadcast_dimensions=() shape=(7, 36)] 0.0
    d:f64[200,7,36] = broadcast_in_dim[
      broadcast_dimensions=(1, 2)
      shape=(200, 7, 36)
    ] c
  in (b, 0.0, d) } in
let cross = { lambda ; . let
    e:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    f:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    g:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    h:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    i:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    j:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
  in (f, j, g, i, h, e) } in
let _take = { lambda ; k:i64[]. let
    l:i64[] = pjit[
      name=remainder
      jaxpr={ lambda ; m:i64[] n:i64[]. let
          o:bool[] = eq n 0
          p:i64[] = pjit[
            name=_where
            jaxpr={ lambda ; q:bool[] r:i64[] s:i64[]. let
                t:i64[] = select_n q s r
              in (t,) }
          ] o 1 n
          u:i64[] = rem m p
          v:bool[] = ne u 0
          w:bool[] = lt u 0
          x:bool[] = lt p 0
          y:bool[] = ne w x
          z:bool[] = and y v
          ba:i64[] = add u p
          bb:i64[] = select_n z u ba
        in (bb,) }
    ] k 1
    bc:i64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] l
  in (bc,) } in
let cross1 = { lambda ; bd:f64[13,3]. let
    be:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    bf:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    bg:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    bh:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    bi:f64[13] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(13, 1)
      unique_indices=True
    ] bd bh
    bj:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    bk:f64[13] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(13, 1)
      unique_indices=True
    ] bd bj
    bl:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    bm:f64[13] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(13, 1)
      unique_indices=True
    ] bd bl
    bn:f64[1,13] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 13)] bm
    bo:f64[1,1,13] = broadcast_in_dim[
      broadcast_dimensions=(1, 2)
      shape=(1, 1, 13)
    ] bn
    bp:f64[1,13] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 13)] bk
    bq:f64[1,1,13] = broadcast_in_dim[
      broadcast_dimensions=(1, 2)
      shape=(1, 1, 13)
    ] bp
    br:f64[1,13] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 13)] bi
    bs:f64[1,1,13] = broadcast_in_dim[
      broadcast_dimensions=(1, 2)
      shape=(1, 1, 13)
    ] br
    bt:f64[1,13] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 13)] bm
    bu:f64[1,1,13] = broadcast_in_dim[
      broadcast_dimensions=(1, 2)
      shape=(1, 1, 13)
    ] bt
    bv:f64[1,13] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 13)] bk
    bw:f64[1,1,13] = broadcast_in_dim[
      broadcast_dimensions=(1, 2)
      shape=(1, 1, 13)
    ] bv
    bx:f64[1,13] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 13)] bi
    by:f64[1,1,13] = broadcast_in_dim[
      broadcast_dimensions=(1, 2)
      shape=(1, 1, 13)
    ] bx
  in (bf, bo, bg, bq, bs, be, bu, bw, by) } in
let _take1 = { lambda ; bz:i64[4]. let
    ca:i64[4] = pjit[
      name=remainder
      jaxpr={ lambda ; cb:i64[4] cc:i64[]. let
          cd:bool[] = eq cc 0
          ce:i64[] = pjit[
            name=_where
            jaxpr={ lambda ; cf:bool[] cg:i64[] ch:i64[]. let
                ci:i64[] = select_n cf ch cg
              in (ci,) }
          ] cd 1 cc
          cj:i64[4] = rem cb ce
          ck:bool[4] = ne cj 0
          cl:bool[4] = lt cj 0
          cm:bool[] = lt ce 0
          cn:bool[4] = ne cl cm
          co:bool[4] = and cn ck
          cp:i64[4] = add cj ce
          cq:i64[4] = select_n co cj cp
        in (cq,) }
    ] bz 13
    cr:i64[4,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(4, 1)] ca
  in (cr,) } in
let _take2 = { lambda ; cs:i64[4]. let
    ct:i64[4] = pjit[
      name=remainder
      jaxpr={ lambda ; cb:i64[4] cc:i64[]. let
          cd:bool[] = eq cc 0
          ce:i64[] = pjit[
            name=_where
            jaxpr={ lambda ; cf:bool[] cg:i64[] ch:i64[]. let
                ci:i64[] = select_n cf ch cg
              in (ci,) }
          ] cd 1 cc
          cj:i64[4] = rem cb ce
          ck:bool[4] = ne cj 0
          cl:bool[4] = lt cj 0
          cm:bool[] = lt ce 0
          cn:bool[4] = ne cl cm
          co:bool[4] = and cn ck
          cp:i64[4] = add cj ce
          cq:i64[4] = select_n co cj cp
        in (cq,) }
    ] cs 13
    cu:i64[4,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(4, 1)] ct
  in (cu,) } in
let _take3 = { lambda ; cv:i64[4]. let
    cw:i64[4] = pjit[
      name=remainder
      jaxpr={ lambda ; cb:i64[4] cc:i64[]. let
          cd:bool[] = eq cc 0
          ce:i64[] = pjit[
            name=_where
            jaxpr={ lambda ; cf:bool[] cg:i64[] ch:i64[]. let
                ci:i64[] = select_n cf ch cg
              in (ci,) }
          ] cd 1 cc
          cj:i64[4] = rem cb ce
          ck:bool[4] = ne cj 0
          cl:bool[4] = lt cj 0
          cm:bool[] = lt ce 0
          cn:bool[4] = ne cl cm
          co:bool[4] = and cn ck
          cp:i64[4] = add cj ce
          cq:i64[4] = select_n co cj cp
        in (cq,) }
    ] cv 1
    cx:i64[4,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(4, 1)] cw
  in (cx,) } in
let cross2 = { lambda ; . let
    cy:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    cz:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    da:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    db:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    dc:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    dd:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
  in (cz, dd, da, dc, db, cy) } in
let _take4 = { lambda ; de:i64[13]. let
    df:i64[13] = pjit[
      name=remainder
      jaxpr={ lambda ; dg:i64[13] dh:i64[]. let
          di:bool[] = eq dh 0
          dj:i64[] = pjit[
            name=_where
            jaxpr={ lambda ; cf:bool[] cg:i64[] ch:i64[]. let
                ci:i64[] = select_n cf ch cg
              in (ci,) }
          ] di 1 dh
          dk:i64[13] = rem dg dj
          dl:bool[13] = ne dk 0
          dm:bool[13] = lt dk 0
          dn:bool[] = lt dj 0
          do:bool[13] = ne dm dn
          dp:bool[13] = and do dl
          dq:i64[13] = add dk dj
          dr:i64[13] = select_n dp dk dq
        in (dr,) }
    ] de 13
    ds:i64[13,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(13, 1)] df
  in (ds,) } in
let jaxpr = { lambda ; dt:f64[] du:f64[]. let dv:f64[] = add dt du in (dv,) } in
let _take5 = { lambda ; dw:i32[13]. let
    dx:i32[13] = pjit[
      name=remainder
      jaxpr={ lambda ; dy:i32[13] dz:i32[]. let
          ea:bool[] = eq dz 0
          eb:i32[] = pjit[
            name=_where
            jaxpr={ lambda ; ec:bool[] ed:i32[] ee:i32[]. let
                ef:i32[] = select_n ec ee ed
              in (ef,) }
          ] ea 1 dz
          eg:i32[13] = rem dy eb
          eh:bool[13] = ne eg 0
          ei:bool[13] = lt eg 0
          ej:bool[] = lt eb 0
          ek:bool[13] = ne ei ej
          el:bool[13] = and ek eh
          em:i32[13] = add eg eb
          en:i32[13] = select_n el eg em
        in (en,) }
    ] dw 14
    eo:i32[13,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(13, 1)] dx
  in (eo,) } in
let _take6 = { lambda ; ep:f64[12,1,3] eq:i64[]. let
    er:i64[] = pjit[
      name=remainder
      jaxpr={ lambda ; m:i64[] n:i64[]. let
          o:bool[] = eq n 0
          p:i64[] = pjit[
            name=_where
            jaxpr={ lambda ; q:bool[] r:i64[] s:i64[]. let
                t:i64[] = select_n q s r
              in (t,) }
          ] o 1 n
          u:i64[] = rem m p
          v:bool[] = ne u 0
          w:bool[] = lt u 0
          x:bool[] = lt p 0
          y:bool[] = ne w x
          z:bool[] = and y v
          ba:i64[] = add u p
          bb:i64[] = select_n z u ba
        in (bb,) }
    ] eq 1
    es:i64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] er
    et:f64[12,3] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(12, 1, 3)
      unique_indices=False
    ] ep es
  in (et,) } in
let cross3 = { lambda ; eu:f64[12,3] ev:f64[12,3]. let
    ew:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    ex:f64[12] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(12, 1)
      unique_indices=True
    ] eu ew
    ey:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    ez:f64[12] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(12, 1)
      unique_indices=True
    ] eu ey
    fa:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    fb:f64[12] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(12, 1)
      unique_indices=True
    ] eu fa
    fc:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    fd:f64[12] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(12, 1)
      unique_indices=True
    ] ev fc
    fe:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    ff:f64[12] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(12, 1)
      unique_indices=True
    ] ev fe
    fg:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    fh:f64[12] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(12, 1)
      unique_indices=True
    ] ev fg
    fi:f64[12] = mul ez fh
    fj:f64[12] = mul fb ff
    fk:f64[12] = sub fi fj
    fl:f64[12] = mul fb fd
    fm:f64[12] = mul ex fh
    fn:f64[12] = sub fl fm
    fo:f64[12] = mul ex ff
    fp:f64[12] = mul ez fd
    fq:f64[12] = sub fo fp
    fr:f64[12,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(12, 1)] fk
    fs:f64[12,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(12, 1)] fn
    ft:f64[12,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(12, 1)] fq
    fu:f64[12,3] = concatenate[dimension=1] fr fs ft
  in (fu,) } in
let _take7 = { lambda ; fv:i64[18]. let
    fw:i64[18] = pjit[
      name=remainder
      jaxpr={ lambda ; fx:i64[18] fy:i64[]. let
          fz:bool[] = eq fy 0
          ga:i64[] = pjit[
            name=_where
            jaxpr={ lambda ; cf:bool[] cg:i64[] ch:i64[]. let
                ci:i64[] = select_n cf ch cg
              in (ci,) }
          ] fz 1 fy
          gb:i64[18] = rem fx ga
          gc:bool[18] = ne gb 0
          gd:bool[18] = lt gb 0
          ge:bool[] = lt ga 0
          gf:bool[18] = ne gd ge
          gg:bool[18] = and gf gc
          gh:i64[18] = add gb ga
          gi:i64[18] = select_n gg gb gh
        in (gi,) }
    ] fv 13
    gj:i64[18,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(18, 1)] fw
  in (gj,) } in
let cross4 = { lambda ; gk:f64[18,3]. let
    gl:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    gm:f64[18] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(18, 1)
      unique_indices=True
    ] gk gl
    gn:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    go:f64[18] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(18, 1)
      unique_indices=True
    ] gk gn
    gp:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    gq:f64[18] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(18, 1)
      unique_indices=True
    ] gk gp
    gr:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    gs:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    gt:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    gu:f64[1,18] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 18)] go
    gv:f64[1,1,18] = broadcast_in_dim[
      broadcast_dimensions=(1, 2)
      shape=(1, 1, 18)
    ] gu
    gw:f64[1,18] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 18)] gq
    gx:f64[1,1,18] = broadcast_in_dim[
      broadcast_dimensions=(1, 2)
      shape=(1, 1, 18)
    ] gw
    gy:f64[1,18] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 18)] gq
    gz:f64[1,1,18] = broadcast_in_dim[
      broadcast_dimensions=(1, 2)
      shape=(1, 1, 18)
    ] gy
    ha:f64[1,18] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 18)] gm
    hb:f64[1,1,18] = broadcast_in_dim[
      broadcast_dimensions=(1, 2)
      shape=(1, 1, 18)
    ] ha
    hc:f64[1,18] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 18)] gm
    hd:f64[1,1,18] = broadcast_in_dim[
      broadcast_dimensions=(1, 2)
      shape=(1, 1, 18)
    ] hc
    he:f64[1,18] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 18)] go
    hf:f64[1,1,18] = broadcast_in_dim[
      broadcast_dimensions=(1, 2)
      shape=(1, 1, 18)
    ] he
  in (gv, gt, gx, gs, gz, gr, hb, hd, hf) } in
let cross5 = { lambda ; . let
    hg:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    hh:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    hi:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    hj:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    hk:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    hl:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
  in (hh, hl, hi, hk, hj, hg) } in
let _take8 = { lambda ; hm:i64[4]. let
    hn:i64[4] = pjit[
      name=remainder
      jaxpr={ lambda ; cb:i64[4] cc:i64[]. let
          cd:bool[] = eq cc 0
          ce:i64[] = pjit[
            name=_where
            jaxpr={ lambda ; cf:bool[] cg:i64[] ch:i64[]. let
                ci:i64[] = select_n cf ch cg
              in (ci,) }
          ] cd 1 cc
          cj:i64[4] = rem cb ce
          ck:bool[4] = ne cj 0
          cl:bool[4] = lt cj 0
          cm:bool[] = lt ce 0
          cn:bool[4] = ne cl cm
          co:bool[4] = and cn ck
          cp:i64[4] = add cj ce
          cq:i64[4] = select_n co cj cp
        in (cq,) }
    ] hm 18
    ho:i64[4,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(4, 1)] hn
  in (ho,) } in
let _take9 = { lambda ; hp:i64[18] hq:i64[4]. let
    hr:i64[4] = pjit[
      name=remainder
      jaxpr={ lambda ; cb:i64[4] cc:i64[]. let
          cd:bool[] = eq cc 0
          ce:i64[] = pjit[
            name=_where
            jaxpr={ lambda ; cf:bool[] cg:i64[] ch:i64[]. let
                ci:i64[] = select_n cf ch cg
              in (ci,) }
          ] cd 1 cc
          cj:i64[4] = rem cb ce
          ck:bool[4] = ne cj 0
          cl:bool[4] = lt cj 0
          cm:bool[] = lt ce 0
          cn:bool[4] = ne cl cm
          co:bool[4] = and cn ck
          cp:i64[4] = add cj ce
          cq:i64[4] = select_n co cj cp
        in (cq,) }
    ] hq 18
    hs:i64[4,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(4, 1)] hr
    ht:i64[4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(), collapsed_slice_dims=(0,), start_index_map=(0,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(1,)
      unique_indices=False
    ] hp hs
  in (ht,) } in
let cross6 = { lambda ; . let
    hu:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    hv:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    hw:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    hx:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    hy:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    hz:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
  in (hv, hz, hw, hy, hx, hu) } in
let cross7 = { lambda ; . let
    ia:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    ib:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    ic:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    id:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    ie:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    if:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
  in (ib, if, ic, ie, id, ia) } in
let _take10 = { lambda ; ig:i64[4]. let
    ih:i64[4] = pjit[
      name=remainder
      jaxpr={ lambda ; cb:i64[4] cc:i64[]. let
          cd:bool[] = eq cc 0
          ce:i64[] = pjit[
            name=_where
            jaxpr={ lambda ; cf:bool[] cg:i64[] ch:i64[]. let
                ci:i64[] = select_n cf ch cg
              in (ci,) }
          ] cd 1 cc
          cj:i64[4] = rem cb ce
          ck:bool[4] = ne cj 0
          cl:bool[4] = lt cj 0
          cm:bool[] = lt ce 0
          cn:bool[4] = ne cl cm
          co:bool[4] = and cn ck
          cp:i64[4] = add cj ce
          cq:i64[4] = select_n co cj cp
        in (cq,) }
    ] ig 13
    ii:i64[4,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(4, 1)] ih
  in (ii,) } in
let _take11 = { lambda ; ij:f64[13] ik:i64[4]. let
    il:i64[4] = pjit[
      name=remainder
      jaxpr={ lambda ; cb:i64[4] cc:i64[]. let
          cd:bool[] = eq cc 0
          ce:i64[] = pjit[
            name=_where
            jaxpr={ lambda ; cf:bool[] cg:i64[] ch:i64[]. let
                ci:i64[] = select_n cf ch cg
              in (ci,) }
          ] cd 1 cc
          cj:i64[4] = rem cb ce
          ck:bool[4] = ne cj 0
          cl:bool[4] = lt cj 0
          cm:bool[] = lt ce 0
          cn:bool[4] = ne cl cm
          co:bool[4] = and cn ck
          cp:i64[4] = add cj ce
          cq:i64[4] = select_n co cj cp
        in (cq,) }
    ] ik 13
    im:i64[4,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(4, 1)] il
    in:f64[4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(), collapsed_slice_dims=(0,), start_index_map=(0,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(1,)
      unique_indices=False
    ] ij im
  in (in,) } in
let _take12 = { lambda ; io:i64[4]. let
    ip:i64[4] = pjit[
      name=remainder
      jaxpr={ lambda ; cb:i64[4] cc:i64[]. let
          cd:bool[] = eq cc 0
          ce:i64[] = pjit[
            name=_where
            jaxpr={ lambda ; cf:bool[] cg:i64[] ch:i64[]. let
                ci:i64[] = select_n cf ch cg
              in (ci,) }
          ] cd 1 cc
          cj:i64[4] = rem cb ce
          ck:bool[4] = ne cj 0
          cl:bool[4] = lt cj 0
          cm:bool[] = lt ce 0
          cn:bool[4] = ne cl cm
          co:bool[4] = and cn ck
          cp:i64[4] = add cj ce
          cq:i64[4] = select_n co cj cp
        in (cq,) }
    ] io 18
    iq:i64[4,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(4, 1)] ip
  in (iq,) } in
let cross8 = { lambda ; . let
    ir:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    is:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    it:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    iu:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    iv:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    iw:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
  in (is, iw, it, iv, iu, ir) } in
let cross9 = { lambda ; . let
    ix:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    iy:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    iz:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    ja:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    jb:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    jc:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
  in (iy, jc, iz, jb, ja, ix) } in
let remainder = { lambda ; jd:i64[]. let
    je:f64[] = convert_element_type[new_dtype=float64 weak_type=False] jd
    jf:bool[] = lt je 0.0
  in (je, jf) } in
let clip = { lambda ; . let
    jg:f64[200,7] = broadcast_in_dim[broadcast_dimensions=() shape=(200, 7)] 1.0
    jh:f64[200,7] = broadcast_in_dim[broadcast_dimensions=() shape=(200, 7)] 0.0
    ji:f64[200,7] = broadcast_in_dim[broadcast_dimensions=() shape=(200, 7)] 2.0
    jj:f64[200,7] = broadcast_in_dim[broadcast_dimensions=() shape=(200, 7)] 1.0
    jk:f64[200,7] = broadcast_in_dim[broadcast_dimensions=() shape=(200, 7)] 1.0
    jl:f64[200,7] = broadcast_in_dim[broadcast_dimensions=() shape=(200, 7)] 0.0
    jm:f64[200,7] = broadcast_in_dim[broadcast_dimensions=() shape=(200, 7)] 2.0
    jn:f64[200,7] = broadcast_in_dim[broadcast_dimensions=() shape=(200, 7)] 1.0
  in (jh, jg, jj, ji, jl, jk, jn, jm) } in
let clip1 = { lambda ; jo:f64[12] jp:f64[12]. let
    jq:f64[1,12] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 12)] jo
    jr:f64[1,1,12] = broadcast_in_dim[
      broadcast_dimensions=(1, 2)
      shape=(1, 1, 12)
    ] jq
    js:f64[200,7,12] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 12)
    ] 1.0
    jt:f64[200,7,12] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 12)
    ] 0.0
    ju:f64[200,7,12] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 12)
    ] 2.0
    jv:f64[200,7,12] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 12)
    ] 1.0
    jw:f64[1,12] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 12)] jp
    jx:f64[1,1,12] = broadcast_in_dim[
      broadcast_dimensions=(1, 2)
      shape=(1, 1, 12)
    ] jw
    jy:f64[200,7,12] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 12)
    ] 1.0
    jz:f64[200,7,12] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 12)
    ] 0.0
    ka:f64[200,7,12] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 12)
    ] 2.0
    kb:f64[200,7,12] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 12)
    ] 1.0
  in (jr, jt, js, jv, ju, jx, jz, jy, kb, ka) } in
let remainder1 = { lambda ; m:i64[] n:i64[]. let
    o:bool[] = eq n 0
    p:i64[] = pjit[
      name=_where
      jaxpr={ lambda ; q:bool[] r:i64[] s:i64[]. let
          t:i64[] = select_n q s r
        in (t,) }
    ] o 1 n
    u:i64[] = rem m p
    v:bool[] = ne u 0
    w:bool[] = lt u 0
    x:bool[] = lt p 0
    y:bool[] = ne w x
    z:bool[] = and y v
    ba:i64[] = add u p
    bb:i64[] = select_n z u ba
  in (bb,) } in
let remainder2 = { lambda ; cb:i64[4] cc:i64[]. let
    cd:bool[] = eq cc 0
    ce:i64[] = pjit[
      name=_where
      jaxpr={ lambda ; cf:bool[] cg:i64[] ch:i64[]. let
          ci:i64[] = select_n cf ch cg
        in (ci,) }
    ] cd 1 cc
    cj:i64[4] = rem cb ce
    ck:bool[4] = ne cj 0
    cl:bool[4] = lt cj 0
    cm:bool[] = lt ce 0
    cn:bool[4] = ne cl cm
    co:bool[4] = and cn ck
    cp:i64[4] = add cj ce
    cq:i64[4] = select_n co cj cp
  in (cq,) } in
let remainder3 = { lambda ; dg:i64[13] dh:i64[]. let
    di:bool[] = eq dh 0
    dj:i64[] = pjit[
      name=_where
      jaxpr={ lambda ; cf:bool[] cg:i64[] ch:i64[]. let
          ci:i64[] = select_n cf ch cg
        in (ci,) }
    ] di 1 dh
    dk:i64[13] = rem dg dj
    dl:bool[13] = ne dk 0
    dm:bool[13] = lt dk 0
    dn:bool[] = lt dj 0
    do:bool[13] = ne dm dn
    dp:bool[13] = and do dl
    dq:i64[13] = add dk dj
    dr:i64[13] = select_n dp dk dq
  in (dr,) } in
let remainder4 = { lambda ; dy:i32[13] dz:i32[]. let
    ea:bool[] = eq dz 0
    eb:i32[] = pjit[
      name=_where
      jaxpr={ lambda ; ec:bool[] ed:i32[] ee:i32[]. let
          ef:i32[] = select_n ec ee ed
        in (ef,) }
    ] ea 1 dz
    eg:i32[13] = rem dy eb
    eh:bool[13] = ne eg 0
    ei:bool[13] = lt eg 0
    ej:bool[] = lt eb 0
    ek:bool[13] = ne ei ej
    el:bool[13] = and ek eh
    em:i32[13] = add eg eb
    en:i32[13] = select_n el eg em
  in (en,) } in
let remainder5 = { lambda ; m:i64[] n:i64[]. let
    o:bool[] = eq n 0
    p:i64[] = pjit[
      name=_where
      jaxpr={ lambda ; q:bool[] r:i64[] s:i64[]. let
          t:i64[] = select_n q s r
        in (t,) }
    ] o 1 n
    u:i64[] = rem m p
    v:bool[] = ne u 0
    w:bool[] = lt u 0
    x:bool[] = lt p 0
    y:bool[] = ne w x
    z:bool[] = and y v
    ba:i64[] = add u p
    bb:i64[] = select_n z u ba
  in (bb,) } in
let remainder6 = { lambda ; fx:i64[18] fy:i64[]. let
    fz:bool[] = eq fy 0
    ga:i64[] = pjit[
      name=_where
      jaxpr={ lambda ; cf:bool[] cg:i64[] ch:i64[]. let
          ci:i64[] = select_n cf ch cg
        in (ci,) }
    ] fz 1 fy
    gb:i64[18] = rem fx ga
    gc:bool[18] = ne gb 0
    gd:bool[18] = lt gb 0
    ge:bool[] = lt ga 0
    gf:bool[18] = ne gd ge
    gg:bool[18] = and gf gc
    gh:i64[18] = add gb ga
    gi:i64[18] = select_n gg gb gh
  in (gi,) } in
let remainder7 = { lambda ; cb:i64[4] cc:i64[]. let
    cd:bool[] = eq cc 0
    ce:i64[] = pjit[
      name=_where
      jaxpr={ lambda ; cf:bool[] cg:i64[] ch:i64[]. let
          ci:i64[] = select_n cf ch cg
        in (ci,) }
    ] cd 1 cc
    cj:i64[4] = rem cb ce
    ck:bool[4] = ne cj 0
    cl:bool[4] = lt cj 0
    cm:bool[] = lt ce 0
    cn:bool[4] = ne cl cm
    co:bool[4] = and cn ck
    cp:i64[4] = add cj ce
    cq:i64[4] = select_n co cj cp
  in (cq,) } in
let remainder8 = { lambda ; kc:i64[18] kd:i64[]. let
    ke:bool[] = eq kd 0
    kf:i64[] = pjit[
      name=_where
      jaxpr={ lambda ; cf:bool[] cg:i64[] ch:i64[]. let
          ci:i64[] = select_n cf ch cg
        in (ci,) }
    ] ke 1 kd
    kg:i64[18] = rem kc kf
    kh:bool[18] = ne kg 0
    ki:bool[18] = lt kg 0
    kj:bool[] = lt kf 0
    kk:bool[18] = ne ki kj
    kl:bool[18] = and kk kh
    km:i64[18] = add kg kf
    kn:i64[18] = select_n kl kg km
  in (kn,) } in
let _where = { lambda ; ko:bool[18,18] kp:f64[18] kq:f64[18]. let
    kr:f64[18,18] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(18, 18)] kp
    ks:f64[18,18] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(18, 18)] kq
    kt:f64[18,18] = select_n ko ks kr
  in (kt,) } in
let _cholesky = { lambda ; . let
    ku:bool[200,7,18,18] kv:f64[200,7,18,18] = pjit[
      name=tril
      jaxpr={ lambda ; . let
          kw:i32[18,18] = iota[dimension=0 dtype=int32 shape=(18, 18)]
          kx:i32[18,18] = add kw 0
          ky:i32[18,18] = iota[dimension=1 dtype=int32 shape=(18, 18)]
          kz:bool[18,18] = ge kx ky
          la:bool[200,7,18,18] = broadcast_in_dim[
            broadcast_dimensions=(2, 3)
            shape=(200, 7, 18, 18)
          ] kz
          lb:f64[200,7,18,18] = broadcast_in_dim[
            broadcast_dimensions=()
            shape=(200, 7, 18, 18)
          ] 0.0
        in (la, lb) }
    ]
    lc:bool[200,7,18,18] ld:f64[200,7,18,18] = pjit[
      name=tril
      jaxpr={ lambda ; . let
          le:i32[18,18] = iota[dimension=0 dtype=int32 shape=(18, 18)]
          lf:i32[18,18] = add le 0
          lg:i32[18,18] = iota[dimension=1 dtype=int32 shape=(18, 18)]
          lh:bool[18,18] = ge lf lg
          li:bool[7,18,18] = broadcast_in_dim[
            broadcast_dimensions=(1, 2)
            shape=(7, 18, 18)
          ] lh
          lj:f64[7,18,18] = broadcast_in_dim[
            broadcast_dimensions=()
            shape=(7, 18, 18)
          ] 0.0
          lk:bool[200,7,18,18] = broadcast_in_dim[
            broadcast_dimensions=(1, 2, 3)
            shape=(200, 7, 18, 18)
          ] li
          ll:f64[200,7,18,18] = broadcast_in_dim[
            broadcast_dimensions=(1, 2, 3)
            shape=(200, 7, 18, 18)
          ] lj
        in (lk, ll) }
    ]
    lm:bool[200,7,18,18] ln:f64[200,7,18,18] = pjit[
      name=tril
      jaxpr={ lambda ; . let
          lo:i32[18,18] = iota[dimension=0 dtype=int32 shape=(18, 18)]
          lp:i32[18,18] = add lo 0
          lq:i32[18,18] = iota[dimension=1 dtype=int32 shape=(18, 18)]
          lr:bool[18,18] = ge lp lq
          ls:f64[18,18] = broadcast_in_dim[
            broadcast_dimensions=()
            shape=(18, 18)
          ] 0.0
          lt:bool[7,18,18] = broadcast_in_dim[
            broadcast_dimensions=(1, 2)
            shape=(7, 18, 18)
          ] lr
          lu:f64[7,18,18] = broadcast_in_dim[
            broadcast_dimensions=(1, 2)
            shape=(7, 18, 18)
          ] ls
          lv:bool[200,7,18,18] = broadcast_in_dim[
            broadcast_dimensions=(1, 2, 3)
            shape=(200, 7, 18, 18)
          ] lt
          lw:f64[200,7,18,18] = broadcast_in_dim[
            broadcast_dimensions=(1, 2, 3)
            shape=(200, 7, 18, 18)
          ] lu
        in (lv, lw) }
    ]
  in (ku, kv, lc, ld, lm, ln) } in
let silu = { lambda ; lx:f64[200,7,400]. let
    ly:f64[200,7,400] = logistic lx
    lz:f64[200,7,400] = mul lx ly
    ma:f64[200,7,400] = sub 1.0 ly
    mb:f64[200,7,400] = mul ly ma
  in (lz, ly, mb) } in
let softplus1 = { lambda ; mc:f64[200,7,36] md:f64[200,7,36] me:f64[] mf:f64[200,7,36]. let
    mg:bool[200,7,36] = eq mc inf
    mh:f64[200,7,36] = select_n mg mc md
    mi:f64[200,7,36] = pjit[
      name=logaddexp
      jaxpr={ lambda ; mj:f64[200,7,36] mk:f64[]. let
          ml:f64[200,7,36] = sub mj mk
          mm:bool[200,7,36] = ne ml ml
          mn:f64[200,7,36] = max mj mk
          mo:f64[200,7,36] = abs ml
          mp:f64[200,7,36] = neg mo
          mq:f64[200,7,36] = exp mp
          mr:f64[200,7,36] = log1p mq
          ms:f64[200,7,36] = add mn mr
          mt:f64[200,7,36] = add mj mk
          mu:f64[200,7,36] = select_n mm ms mt
        in (mu,) }
    ] mc me
    mv:bool[200,7,36] = eq mi inf
    mw:f64[200,7,36] = select_n mv mi mf
    mx:f64[200,7,36] = sub mh mw
    my:f64[200,7,36] = exp mx
  in (mi, my) } in
let softplus2 = { lambda ; mz:f64[200,7,36] na:f64[200,7,36]. let
    nb:f64[200,7,36] = mul na mz
  in (nb,) } in
let silu1 = { lambda ; nc:f64[200,7,400] nd:f64[200,7,400] ne:f64[200,7,400] nf:f64[200,7,400]. let
    ng:f64[200,7,400] = mul nd nf
    nh:f64[200,7,400] = mul ng ne
    ni:f64[200,7,400] = mul nf nc
    nj:f64[200,7,400] = add_any nh ni
  in (nj,) } in
let isinf = { lambda ; nk:f64[]. let
    nl:f64[] = abs nk
    nm:bool[] = eq nl inf
  in (nm,) } in
let _where1 = { lambda ; q:bool[] r:i64[] s:i64[]. let
    t:i64[] = select_n q s r
  in (t,) } in
let _where2 = { lambda ; cf:bool[] cg:i64[] ch:i64[]. let
    ci:i64[] = select_n cf ch cg
  in (ci,) } in
let _where3 = { lambda ; ec:bool[] ed:i32[] ee:i32[]. let
    ef:i32[] = select_n ec ee ed
  in (ef,) } in
let _where4 = { lambda ; cf:bool[] cg:i64[] ch:i64[]. let
    ci:i64[] = select_n cf ch cg
  in (ci,) } in
let tril = { lambda ; . let
    kw:i32[18,18] = iota[dimension=0 dtype=int32 shape=(18, 18)]
    kx:i32[18,18] = add kw 0
    ky:i32[18,18] = iota[dimension=1 dtype=int32 shape=(18, 18)]
    kz:bool[18,18] = ge kx ky
    la:bool[200,7,18,18] = broadcast_in_dim[
      broadcast_dimensions=(2, 3)
      shape=(200, 7, 18, 18)
    ] kz
    lb:f64[200,7,18,18] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 18, 18)
    ] 0.0
  in (la, lb) } in
let tril1 = { lambda ; . let
    le:i32[18,18] = iota[dimension=0 dtype=int32 shape=(18, 18)]
    lf:i32[18,18] = add le 0
    lg:i32[18,18] = iota[dimension=1 dtype=int32 shape=(18, 18)]
    lh:bool[18,18] = ge lf lg
    li:bool[7,18,18] = broadcast_in_dim[
      broadcast_dimensions=(1, 2)
      shape=(7, 18, 18)
    ] lh
    lj:f64[7,18,18] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(7, 18, 18)
    ] 0.0
    lk:bool[200,7,18,18] = broadcast_in_dim[
      broadcast_dimensions=(1, 2, 3)
      shape=(200, 7, 18, 18)
    ] li
    ll:f64[200,7,18,18] = broadcast_in_dim[
      broadcast_dimensions=(1, 2, 3)
      shape=(200, 7, 18, 18)
    ] lj
  in (lk, ll) } in
let tril2 = { lambda ; . let
    lo:i32[18,18] = iota[dimension=0 dtype=int32 shape=(18, 18)]
    lp:i32[18,18] = add lo 0
    lq:i32[18,18] = iota[dimension=1 dtype=int32 shape=(18, 18)]
    lr:bool[18,18] = ge lp lq
    ls:f64[18,18] = broadcast_in_dim[broadcast_dimensions=() shape=(18, 18)] 0.0
    lt:bool[7,18,18] = broadcast_in_dim[
      broadcast_dimensions=(1, 2)
      shape=(7, 18, 18)
    ] lr
    lu:f64[7,18,18] = broadcast_in_dim[
      broadcast_dimensions=(1, 2)
      shape=(7, 18, 18)
    ] ls
    lv:bool[200,7,18,18] = broadcast_in_dim[
      broadcast_dimensions=(1, 2, 3)
      shape=(200, 7, 18, 18)
    ] lt
    lw:f64[200,7,18,18] = broadcast_in_dim[
      broadcast_dimensions=(1, 2, 3)
      shape=(200, 7, 18, 18)
    ] lu
  in (lv, lw) } in
let cross10 = { lambda ; nn:f64[200,7,3] no:f64[200,7,3] np:i32[1] nq:i32[1] nr:i32[1]
    ns:i32[1] nt:i32[1] nu:i32[1]. let
    nv:f64[200,7] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 1)
      unique_indices=True
    ] nn np
    nw:f64[200,7] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 1)
      unique_indices=True
    ] no nq
    nx:f64[200,7] = mul nv nw
    ny:f64[200,7] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 1)
      unique_indices=True
    ] nn nr
    nz:f64[200,7] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 1)
      unique_indices=True
    ] no ns
    oa:f64[200,7] = mul ny nz
    ob:f64[200,7] = sub nx oa
    oc:f64[200,7,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(200, 7, 1)
    ] ob
    od:f64[200,7] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 1)
      unique_indices=True
    ] no nt
    oe:f64[200,7] = mul ny od
    of:f64[200,7] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 1)
      unique_indices=True
    ] nn nu
    og:f64[200,7] = mul of nw
    oh:f64[200,7] = sub oe og
    oi:f64[200,7,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(200, 7, 1)
    ] oh
    oj:f64[200,7] = mul of nz
    ok:f64[200,7] = mul nv od
    ol:f64[200,7] = sub oj ok
    om:f64[200,7,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(200, 7, 1)
    ] ol
    on:f64[200,7,3] = concatenate[dimension=2] oc oi om
  in (on, nw, nv, nz, ny, od, of) } in
let _take13 = { lambda ; oo:f64[200,7,13,4] op:i64[4,1]. let
    oq:f64[200,7,4,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 3), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 1, 4)
      unique_indices=False
    ] oo op
  in (oq,) } in
let cross11 = { lambda ; or:f64[200,7,18,3] os:f64[1,1,18] ot:i32[1] ou:f64[1,1,18]
    ov:i32[1] ow:f64[1,1,18] ox:i32[1] oy:f64[1,1,18] oz:f64[1,1,18] pa:f64[1,1,18]. let
    pb:f64[200,7,18] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 18, 1)
      unique_indices=True
    ] or ot
    pc:f64[200,7,18] = mul os pb
    pd:f64[200,7,18] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 18, 1)
      unique_indices=True
    ] or ov
    pe:f64[200,7,18] = mul ou pd
    pf:f64[200,7,18] = sub pc pe
    pg:f64[200,7,18,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(200, 7, 18, 1)
    ] pf
    ph:f64[200,7,18] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 18, 1)
      unique_indices=True
    ] or ox
    pi:f64[200,7,18] = mul ow ph
    pj:f64[200,7,18] = mul oy pb
    pk:f64[200,7,18] = sub pi pj
    pl:f64[200,7,18,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(200, 7, 18, 1)
    ] pk
    pm:f64[200,7,18] = mul oz pd
    pn:f64[200,7,18] = mul pa ph
    po:f64[200,7,18] = sub pm pn
    pp:f64[200,7,18,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(200, 7, 18, 1)
    ] po
    pq:f64[200,7,18,3] = concatenate[dimension=3] pg pl pp
  in (pq,) } in
let _take14 = { lambda ; pr:f64[200,7,12,1,3] ps:i64[1]. let
    pt:f64[200,7,12,3] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2, 3), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 12, 1, 3)
      unique_indices=False
    ] pr ps
  in (pt,) } in
let cross12 = { lambda ; pu:f64[200,7,13,3] pv:i32[1] pw:f64[1,1,13] px:i32[1] py:f64[1,1,13]
    pz:f64[1,1,13] qa:i32[1] qb:f64[1,1,13] qc:f64[1,1,13] qd:f64[1,1,13]. let
    qe:f64[200,7,13] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 13, 1)
      unique_indices=True
    ] pu pv
    qf:f64[200,7,13] = mul qe pw
    qg:f64[200,7,13] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 13, 1)
      unique_indices=True
    ] pu px
    qh:f64[200,7,13] = mul qg py
    qi:f64[200,7,13] = sub qf qh
    qj:f64[200,7,13,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(200, 7, 13, 1)
    ] qi
    qk:f64[200,7,13] = mul qg pz
    ql:f64[200,7,13] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 13, 1)
      unique_indices=True
    ] pu qa
    qm:f64[200,7,13] = mul ql qb
    qn:f64[200,7,13] = sub qk qm
    qo:f64[200,7,13,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(200, 7, 13, 1)
    ] qn
    qp:f64[200,7,13] = mul ql qc
    qq:f64[200,7,13] = mul qe qd
    qr:f64[200,7,13] = sub qp qq
    qs:f64[200,7,13,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(200, 7, 13, 1)
    ] qr
    qt:f64[200,7,13,3] = concatenate[dimension=3] qj qo qs
  in (qt,) } in
let _take15 = { lambda ; qu:f64[200,7,1,3] qv:i64[4,1]. let
    qw:f64[200,7,4,3] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 3), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 1, 3)
      unique_indices=False
    ] qu qv
  in (qw,) } in
let _take16 = { lambda ; qx:f64[200,7,13,3] qy:i64[4,1]. let
    qz:f64[200,7,4,3] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 3), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 1, 3)
      unique_indices=False
    ] qx qy
  in (qz,) } in
let cross13 = { lambda ; ra:f64[200,7,4,3] rb:f64[200,7,4,3] rc:i32[1] rd:i32[1]
    re:i32[1] rf:i32[1] rg:i32[1] rh:i32[1]. let
    ri:f64[200,7,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 4, 1)
      unique_indices=True
    ] ra rc
    rj:f64[200,7,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 4, 1)
      unique_indices=True
    ] rb rd
    rk:f64[200,7,4] = mul ri rj
    rl:f64[200,7,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 4, 1)
      unique_indices=True
    ] ra re
    rm:f64[200,7,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 4, 1)
      unique_indices=True
    ] rb rf
    rn:f64[200,7,4] = mul rl rm
    ro:f64[200,7,4] = sub rk rn
    rp:f64[200,7,4,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(200, 7, 4, 1)
    ] ro
    rq:f64[200,7,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 4, 1)
      unique_indices=True
    ] rb rg
    rr:f64[200,7,4] = mul rl rq
    rs:f64[200,7,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 4, 1)
      unique_indices=True
    ] ra rh
    rt:f64[200,7,4] = mul rs rj
    ru:f64[200,7,4] = sub rr rt
    rv:f64[200,7,4,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(200, 7, 4, 1)
    ] ru
    rw:f64[200,7,4] = mul rs rm
    rx:f64[200,7,4] = mul ri rq
    ry:f64[200,7,4] = sub rw rx
    rz:f64[200,7,4,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(200, 7, 4, 1)
    ] ry
    sa:f64[200,7,4,3] = concatenate[dimension=3] rp rv rz
  in (sa, rj, ri, rm, rl, rq, rs) } in
let _take17 = { lambda ; sb:f64[200,7,13,3] sc:i64[13,1]. let
    sd:f64[200,7,13,3] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 3), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 1, 3)
      unique_indices=False
    ] sb sc
  in (sd,) } in
let _take18 = { lambda ; se:f64[200,7,14,3] sf:i32[13,1]. let
    sg:f64[200,7,13,3] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 3), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 1, 3)
      unique_indices=False
    ] se sf
  in (sg,) } in
let _take19 = { lambda ; sh:f64[200,7,13,3] si:i64[18,1]. let
    sj:f64[200,7,18,3] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 3), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 1, 3)
      unique_indices=False
    ] sh si
  in (sj,) } in
let cross14 = { lambda ; sk:f64[200,7,18,3] sl:f64[200,7,18,3] sm:i32[1] sn:i32[1]
    so:i32[1] sp:i32[1] sq:i32[1] sr:i32[1]. let
    ss:f64[200,7,18] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 18, 1)
      unique_indices=True
    ] sk sm
    st:f64[200,7,18] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 18, 1)
      unique_indices=True
    ] sl sn
    su:f64[200,7,18] = mul ss st
    sv:f64[200,7,18] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 18, 1)
      unique_indices=True
    ] sk so
    sw:f64[200,7,18] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 18, 1)
      unique_indices=True
    ] sl sp
    sx:f64[200,7,18] = mul sv sw
    sy:f64[200,7,18] = sub su sx
    sz:f64[200,7,18,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(200, 7, 18, 1)
    ] sy
    ta:f64[200,7,18] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 18, 1)
      unique_indices=True
    ] sl sq
    tb:f64[200,7,18] = mul sv ta
    tc:f64[200,7,18] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 18, 1)
      unique_indices=True
    ] sk sr
    td:f64[200,7,18] = mul tc st
    te:f64[200,7,18] = sub tb td
    tf:f64[200,7,18,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(200, 7, 18, 1)
    ] te
    tg:f64[200,7,18] = mul tc sw
    th:f64[200,7,18] = mul ss ta
    ti:f64[200,7,18] = sub tg th
    tj:f64[200,7,18,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(200, 7, 18, 1)
    ] ti
    tk:f64[200,7,18,3] = concatenate[dimension=3] sz tf tj
  in (tk, st, ss, sw, sv, ta, tc) } in
let cross15 = { lambda ; tl:f64[200,7,1,3] tm:f64[200,7,1,6,3] tn:i32[1] to:i32[1]
    tp:i32[1] tq:i32[1] tr:i32[1] ts:i32[1]. let
    tt:f64[200,7,1] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 1, 1)
      unique_indices=True
    ] tl tn
    tu:f64[200,7,1,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(200, 7, 1, 1)
    ] tt
    tv:f64[200,7,1,6] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2, 3), collapsed_slice_dims=(4,), start_index_map=(4,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 1, 6, 1)
      unique_indices=True
    ] tm to
    tw:f64[200,7,1,6] = mul tu tv
    tx:f64[200,7,1] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 1, 1)
      unique_indices=True
    ] tl tp
    ty:f64[200,7,1,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(200, 7, 1, 1)
    ] tx
    tz:f64[200,7,1,6] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2, 3), collapsed_slice_dims=(4,), start_index_map=(4,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 1, 6, 1)
      unique_indices=True
    ] tm tq
    ua:f64[200,7,1,6] = mul ty tz
    ub:f64[200,7,1,6] = sub tw ua
    uc:f64[200,7,1,6,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2, 3)
      shape=(200, 7, 1, 6, 1)
    ] ub
    ud:f64[200,7,1,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(200, 7, 1, 1)
    ] tx
    ue:f64[200,7,1,6] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2, 3), collapsed_slice_dims=(4,), start_index_map=(4,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 1, 6, 1)
      unique_indices=True
    ] tm tr
    uf:f64[200,7,1,6] = mul ud ue
    ug:f64[200,7,1] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 1, 1)
      unique_indices=True
    ] tl ts
    uh:f64[200,7,1,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(200, 7, 1, 1)
    ] ug
    ui:f64[200,7,1,6] = mul uh tv
    uj:f64[200,7,1,6] = sub uf ui
    uk:f64[200,7,1,6,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2, 3)
      shape=(200, 7, 1, 6, 1)
    ] uj
    ul:f64[200,7,1,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(200, 7, 1, 1)
    ] ug
    um:f64[200,7,1,6] = mul ul tz
    un:f64[200,7,1,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(200, 7, 1, 1)
    ] tt
    uo:f64[200,7,1,6] = mul un ue
    up:f64[200,7,1,6] = sub um uo
    uq:f64[200,7,1,6,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2, 3)
      shape=(200, 7, 1, 6, 1)
    ] up
    ur:f64[200,7,1,6,3] = concatenate[dimension=4] uc uk uq
  in (ur, tv, tu, tz, ty, ue, ud, uh, ul, un) } in
let _take20 = { lambda ; us:f64[200,7,18,3] ut:i64[4,1]. let
    uu:f64[200,7,4,3] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 3), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 1, 3)
      unique_indices=False
    ] us ut
  in (uu,) } in
let cross16 = { lambda ; uv:f64[200,7,12,3] uw:f64[200,7,12,3] ux:i32[1] uy:i32[1]
    uz:i32[1] va:i32[1] vb:i32[1] vc:i32[1]. let
    vd:f64[200,7,12] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 12, 1)
      unique_indices=True
    ] uv ux
    ve:f64[200,7,12] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 12, 1)
      unique_indices=True
    ] uw uy
    vf:f64[200,7,12] = mul vd ve
    vg:f64[200,7,12] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 12, 1)
      unique_indices=True
    ] uv uz
    vh:f64[200,7,12] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 12, 1)
      unique_indices=True
    ] uw va
    vi:f64[200,7,12] = mul vg vh
    vj:f64[200,7,12] = sub vf vi
    vk:f64[200,7,12,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(200, 7, 12, 1)
    ] vj
    vl:f64[200,7,12] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 12, 1)
      unique_indices=True
    ] uw vb
    vm:f64[200,7,12] = mul vg vl
    vn:f64[200,7,12] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 12, 1)
      unique_indices=True
    ] uv vc
    vo:f64[200,7,12] = mul vn ve
    vp:f64[200,7,12] = sub vm vo
    vq:f64[200,7,12,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(200, 7, 12, 1)
    ] vp
    vr:f64[200,7,12] = mul vn vh
    vs:f64[200,7,12] = mul vd vl
    vt:f64[200,7,12] = sub vr vs
    vu:f64[200,7,12,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(200, 7, 12, 1)
    ] vt
    vv:f64[200,7,12,3] = concatenate[dimension=3] vk vq vu
  in (vv, ve, vd, vh, vg, vl, vn) } in
let _take21 = { lambda ; vw:f64[200,7,18] vx:i64[4,1]. let
    vy:f64[200,7,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 1)
      unique_indices=False
    ] vw vx
  in (vy,) } in
let cross17 = { lambda ; vz:f64[200,7,13,3] wa:f64[200,7,13,3] wb:i32[1] wc:i32[1]
    wd:i32[1] we:i32[1] wf:i32[1] wg:i32[1]. let
    wh:f64[200,7,13] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 13, 1)
      unique_indices=True
    ] vz wb
    wi:f64[200,7,13] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 13, 1)
      unique_indices=True
    ] wa wc
    wj:f64[200,7,13] = mul wh wi
    wk:f64[200,7,13] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 13, 1)
      unique_indices=True
    ] vz wd
    wl:f64[200,7,13] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 13, 1)
      unique_indices=True
    ] wa we
    wm:f64[200,7,13] = mul wk wl
    wn:f64[200,7,13] = sub wj wm
    wo:f64[200,7,13,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(200, 7, 13, 1)
    ] wn
    wp:f64[200,7,13] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 13, 1)
      unique_indices=True
    ] wa wf
    wq:f64[200,7,13] = mul wk wp
    wr:f64[200,7,13] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 13, 1)
      unique_indices=True
    ] vz wg
    ws:f64[200,7,13] = mul wr wi
    wt:f64[200,7,13] = sub wq ws
    wu:f64[200,7,13,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(200, 7, 13, 1)
    ] wt
    wv:f64[200,7,13] = mul wr wl
    ww:f64[200,7,13] = mul wh wp
    wx:f64[200,7,13] = sub wv ww
    wy:f64[200,7,13,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(200, 7, 13, 1)
    ] wx
    wz:f64[200,7,13,3] = concatenate[dimension=3] wo wu wy
  in (wz, wi, wh, wl, wk, wp, wr) } in
let cross18 = { lambda ; ra:f64[200,7,4,3] rb:f64[200,7,4,3] rc:i32[1] rd:i32[1]
    re:i32[1] rf:i32[1] rg:i32[1] rh:i32[1]. let
    ri:f64[200,7,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 4, 1)
      unique_indices=True
    ] ra rc
    rj:f64[200,7,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 4, 1)
      unique_indices=True
    ] rb rd
    rl:f64[200,7,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 4, 1)
      unique_indices=True
    ] ra re
    rm:f64[200,7,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 4, 1)
      unique_indices=True
    ] rb rf
    rq:f64[200,7,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 4, 1)
      unique_indices=True
    ] rb rg
    rs:f64[200,7,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 4, 1)
      unique_indices=True
    ] ra rh
  in (rj, ri, rm, rl, rq, rs) } in
let _take22 = { lambda ; xa:f64[200,7,13,3,3] xb:i64[4,1]. let
    xc:f64[200,7,4,3,3] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 3, 4), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 1, 3, 3)
      unique_indices=False
    ] xa xb
  in (xc,) } in
let logaddexp = { lambda ; mj:f64[200,7,36] mk:f64[]. let
    ml:f64[200,7,36] = sub mj mk
    mm:bool[200,7,36] = ne ml ml
    mn:f64[200,7,36] = max mj mk
    mo:f64[200,7,36] = abs ml
    mp:f64[200,7,36] = neg mo
    mq:f64[200,7,36] = exp mp
    mr:f64[200,7,36] = log1p mq
    ms:f64[200,7,36] = add mn mr
    mt:f64[200,7,36] = add mj mk
    mu:f64[200,7,36] = select_n mm ms mt
  in (mu,) } in
let cross19 = { lambda ; xd:i32[1] xe:f64[200,7] xf:f64[200,7] xg:i32[1] xh:i32[1]
    xi:f64[200,7] xj:f64[200,7] xk:i32[1] xl:f64[200,7] xm:i32[1] xn:i32[1] xo:f64[200,7]
    xp:f64[200,7,3]. let
    xq:f64[200,7,1] = slice[
      limit_indices=(200, 7, 1)
      start_indices=(0, 0, 0)
      strides=None
    ] xp
    xr:f64[200,7,1] = slice[
      limit_indices=(200, 7, 2)
      start_indices=(0, 0, 1)
      strides=None
    ] xp
    xs:f64[200,7,1] = slice[
      limit_indices=(200, 7, 3)
      start_indices=(0, 0, 2)
      strides=None
    ] xp
    xt:f64[200,7] = reduce_sum[axes=(2,)] xs
    xu:f64[200,7] = neg xt
    xv:f64[200,7] = mul xf xu
    xw:f64[200,7] = mul xu xl
    xx:f64[200,7] = mul xo xt
    xy:f64[200,7] = mul xt xi
    xz:f64[200,7] = reduce_sum[axes=(2,)] xr
    ya:f64[200,7] = neg xz
    yb:f64[200,7] = mul xo ya
    yc:f64[200,7] = mul ya xe
    yd:f64[200,7] = add_any xy yc
    ye:f64[200,7,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 3)
    ] 0.0
    yf:f64[200,7,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] ye xn yd
    yg:f64[200,7] = mul xj xz
    yh:f64[200,7] = add_any xv yg
    yi:f64[200,7,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 3)
    ] 0.0
    yj:f64[200,7,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] yi xm yh
    yk:f64[200,7] = mul xz xl
    yl:f64[200,7] = reduce_sum[axes=(2,)] xq
    ym:f64[200,7] = neg yl
    yn:f64[200,7] = mul xj ym
    yo:f64[200,7] = add_any xx yn
    yp:f64[200,7,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 3)
    ] 0.0
    yq:f64[200,7,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] yp xk yo
    yr:f64[200,7,3] = add_any yj yq
    ys:f64[200,7] = mul ym xi
    yt:f64[200,7] = add_any yk ys
    yu:f64[200,7,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 3)
    ] 0.0
    yv:f64[200,7,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] yu xh yt
    yw:f64[200,7,3] = add_any yf yv
    yx:f64[200,7] = mul xf yl
    yy:f64[200,7] = add_any yb yx
    yz:f64[200,7,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 3)
    ] 0.0
    za:f64[200,7,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] yz xg yy
    zb:f64[200,7,3] = add_any yr za
    zc:f64[200,7] = mul yl xe
    zd:f64[200,7] = add_any xw zc
    ze:f64[200,7,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 3)
    ] 0.0
    zf:f64[200,7,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] ze xd zd
    zg:f64[200,7,3] = add_any yw zf
  in (zg, zb) } in
let cross20 = { lambda ; zh:i32[1] zi:f64[200,7,18] zj:f64[200,7,18] zk:i32[1] zl:i32[1]
    zm:f64[200,7,18] zn:f64[200,7,18] zo:i32[1] zp:f64[200,7,18] zq:i32[1] zr:i32[1]
    zs:f64[200,7,18] zt:f64[200,7,18,3]. let
    zu:f64[200,7,18,1] = slice[
      limit_indices=(200, 7, 18, 1)
      start_indices=(0, 0, 0, 0)
      strides=None
    ] zt
    zv:f64[200,7,18,1] = slice[
      limit_indices=(200, 7, 18, 2)
      start_indices=(0, 0, 0, 1)
      strides=None
    ] zt
    zw:f64[200,7,18,1] = slice[
      limit_indices=(200, 7, 18, 3)
      start_indices=(0, 0, 0, 2)
      strides=None
    ] zt
    zx:f64[200,7,18] = reduce_sum[axes=(3,)] zw
    zy:f64[200,7,18] = neg zx
    zz:f64[200,7,18] = mul zj zy
    baa:f64[200,7,18] = mul zy zp
    bab:f64[200,7,18] = mul zs zx
    bac:f64[200,7,18] = mul zx zm
    bad:f64[200,7,18] = reduce_sum[axes=(3,)] zv
    bae:f64[200,7,18] = neg bad
    baf:f64[200,7,18] = mul zs bae
    bag:f64[200,7,18] = mul bae zi
    bah:f64[200,7,18] = add_any bac bag
    bai:f64[200,7,18,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 18, 3)
    ] 0.0
    baj:f64[200,7,18,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(3,), scatter_dims_to_operand_dims=(3,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] bai zr bah
    bak:f64[200,7,18] = mul zn bad
    bal:f64[200,7,18] = add_any zz bak
    bam:f64[200,7,18,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 18, 3)
    ] 0.0
    ban:f64[200,7,18,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(3,), scatter_dims_to_operand_dims=(3,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] bam zq bal
    bao:f64[200,7,18] = mul bad zp
    bap:f64[200,7,18] = reduce_sum[axes=(3,)] zu
    baq:f64[200,7,18] = neg bap
    bar:f64[200,7,18] = mul zn baq
    bas:f64[200,7,18] = add_any bab bar
    bat:f64[200,7,18,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 18, 3)
    ] 0.0
    bau:f64[200,7,18,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(3,), scatter_dims_to_operand_dims=(3,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] bat zo bas
    bav:f64[200,7,18,3] = add_any ban bau
    baw:f64[200,7,18] = mul baq zm
    bax:f64[200,7,18] = add_any bao baw
    bay:f64[200,7,18,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 18, 3)
    ] 0.0
    baz:f64[200,7,18,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(3,), scatter_dims_to_operand_dims=(3,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] bay zl bax
    bba:f64[200,7,18,3] = add_any baj baz
    bbb:f64[200,7,18] = mul zj bap
    bbc:f64[200,7,18] = add_any baf bbb
    bbd:f64[200,7,18,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 18, 3)
    ] 0.0
    bbe:f64[200,7,18,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(3,), scatter_dims_to_operand_dims=(3,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] bbd zk bbc
    bbf:f64[200,7,18,3] = add_any bav bbe
    bbg:f64[200,7,18] = mul bap zi
    bbh:f64[200,7,18] = add_any baa bbg
    bbi:f64[200,7,18,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 18, 3)
    ] 0.0
    bbj:f64[200,7,18,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(3,), scatter_dims_to_operand_dims=(3,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] bbi zh bbh
    bbk:f64[200,7,18,3] = add_any bba bbj
  in (bbk, bbf) } in
let _take23 = { lambda ; bbl:i64[4,1] bbm:f64[200,7,4,3,3]. let
    bbn:f64[200,7,13,3,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 13, 3, 3)
    ] 0.0
    bbo:f64[200,7,13,3,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3, 4), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=False
      update_consts=()
      update_jaxpr=jaxpr
    ] bbn bbl bbm
  in (bbo,) } in
let _take24 = { lambda ; bbp:i64[13,1] bbq:f64[200,7,13,3]. let
    bbr:f64[200,7,13,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 13, 3)
    ] 0.0
    bbs:f64[200,7,13,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=False
      update_consts=()
      update_jaxpr=jaxpr
    ] bbr bbp bbq
  in (bbs,) } in
let _take25 = { lambda ; bbt:i64[4,1] bbu:f64[200,7,4,3]. let
    bbv:f64[200,7,13,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 13, 3)
    ] 0.0
    bbw:f64[200,7,13,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=False
      update_consts=()
      update_jaxpr=jaxpr
    ] bbv bbt bbu
  in (bbw,) } in
let cross21 = { lambda ; bbx:i32[1] bby:f64[200,7,4] bbz:f64[200,7,4] bca:i32[1]
    bcb:i32[1] bcc:f64[200,7,4] bcd:f64[200,7,4] bce:i32[1] bcf:f64[200,7,4] bcg:i32[1]
    bch:i32[1] bci:f64[200,7,4] bcj:f64[200,7,4,3]. let
    bck:f64[200,7,4,1] = slice[
      limit_indices=(200, 7, 4, 1)
      start_indices=(0, 0, 0, 0)
      strides=None
    ] bcj
    bcl:f64[200,7,4,1] = slice[
      limit_indices=(200, 7, 4, 2)
      start_indices=(0, 0, 0, 1)
      strides=None
    ] bcj
    bcm:f64[200,7,4,1] = slice[
      limit_indices=(200, 7, 4, 3)
      start_indices=(0, 0, 0, 2)
      strides=None
    ] bcj
    bcn:f64[200,7,4] = reduce_sum[axes=(3,)] bcm
    bco:f64[200,7,4] = neg bcn
    bcp:f64[200,7,4] = mul bbz bco
    bcq:f64[200,7,4] = mul bco bcf
    bcr:f64[200,7,4] = mul bci bcn
    bcs:f64[200,7,4] = mul bcn bcc
    bct:f64[200,7,4] = reduce_sum[axes=(3,)] bcl
    bcu:f64[200,7,4] = neg bct
    bcv:f64[200,7,4] = mul bci bcu
    bcw:f64[200,7,4] = mul bcu bby
    bcx:f64[200,7,4] = add_any bcs bcw
    bcy:f64[200,7,4,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 4, 3)
    ] 0.0
    bcz:f64[200,7,4,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(3,), scatter_dims_to_operand_dims=(3,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] bcy bch bcx
    bda:f64[200,7,4] = mul bcd bct
    bdb:f64[200,7,4] = add_any bcp bda
    bdc:f64[200,7,4,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 4, 3)
    ] 0.0
    bdd:f64[200,7,4,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(3,), scatter_dims_to_operand_dims=(3,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] bdc bcg bdb
    bde:f64[200,7,4] = mul bct bcf
    bdf:f64[200,7,4] = reduce_sum[axes=(3,)] bck
    bdg:f64[200,7,4] = neg bdf
    bdh:f64[200,7,4] = mul bcd bdg
    bdi:f64[200,7,4] = add_any bcr bdh
    bdj:f64[200,7,4,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 4, 3)
    ] 0.0
    bdk:f64[200,7,4,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(3,), scatter_dims_to_operand_dims=(3,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] bdj bce bdi
    bdl:f64[200,7,4,3] = add_any bdd bdk
    bdm:f64[200,7,4] = mul bdg bcc
    bdn:f64[200,7,4] = add_any bde bdm
    bdo:f64[200,7,4,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 4, 3)
    ] 0.0
    bdp:f64[200,7,4,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(3,), scatter_dims_to_operand_dims=(3,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] bdo bcb bdn
    bdq:f64[200,7,4,3] = add_any bcz bdp
    bdr:f64[200,7,4] = mul bbz bdf
    bds:f64[200,7,4] = add_any bcv bdr
    bdt:f64[200,7,4,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 4, 3)
    ] 0.0
    bdu:f64[200,7,4,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(3,), scatter_dims_to_operand_dims=(3,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] bdt bca bds
    bdv:f64[200,7,4,3] = add_any bdl bdu
    bdw:f64[200,7,4] = mul bdf bby
    bdx:f64[200,7,4] = add_any bcq bdw
    bdy:f64[200,7,4,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 4, 3)
    ] 0.0
    bdz:f64[200,7,4,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(3,), scatter_dims_to_operand_dims=(3,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] bdy bbx bdx
    bea:f64[200,7,4,3] = add_any bdq bdz
  in (bea, bdv) } in
let _take26 = { lambda ; beb:i64[4,1] bec:f64[200,7,4,3]. let
    bed:f64[200,7,1,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 1, 3)
    ] 0.0
    bee:f64[200,7,1,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=False
      update_consts=()
      update_jaxpr=jaxpr
    ] bed beb bec
  in (bee,) } in
let _take27 = { lambda ; bef:i64[1] beg:f64[200,7,12,3]. let
    beh:f64[200,7,12,1,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 12, 1, 3)
    ] 0.0
    bei:f64[200,7,12,1,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2, 3), inserted_window_dims=(3,), scatter_dims_to_operand_dims=(3,))
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=False
      update_consts=()
      update_jaxpr=jaxpr
    ] beh bef beg
  in (bei,) } in
let _take28 = { lambda ; bej:i64[18,1] bek:f64[200,7,18,3]. let
    bel:f64[200,7,13,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 13, 3)
    ] 0.0
    bem:f64[200,7,13,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=False
      update_consts=()
      update_jaxpr=jaxpr
    ] bel bej bek
  in (bem,) } in
let cross22 = { lambda ; ben:i32[1] beo:f64[200,7,13] bep:f64[200,7,13] beq:i32[1]
    ber:i32[1] bes:f64[200,7,13] bet:f64[200,7,13] beu:i32[1] bev:f64[200,7,13] bew:i32[1]
    bex:i32[1] bey:f64[200,7,13] bez:f64[200,7,13,3]. let
    bfa:f64[200,7,13,1] = slice[
      limit_indices=(200, 7, 13, 1)
      start_indices=(0, 0, 0, 0)
      strides=None
    ] bez
    bfb:f64[200,7,13,1] = slice[
      limit_indices=(200, 7, 13, 2)
      start_indices=(0, 0, 0, 1)
      strides=None
    ] bez
    bfc:f64[200,7,13,1] = slice[
      limit_indices=(200, 7, 13, 3)
      start_indices=(0, 0, 0, 2)
      strides=None
    ] bez
    bfd:f64[200,7,13] = reduce_sum[axes=(3,)] bfc
    bfe:f64[200,7,13] = neg bfd
    bff:f64[200,7,13] = mul bep bfe
    bfg:f64[200,7,13] = mul bfe bev
    bfh:f64[200,7,13] = mul bey bfd
    bfi:f64[200,7,13] = mul bfd bes
    bfj:f64[200,7,13] = reduce_sum[axes=(3,)] bfb
    bfk:f64[200,7,13] = neg bfj
    bfl:f64[200,7,13] = mul bey bfk
    bfm:f64[200,7,13] = mul bfk beo
    bfn:f64[200,7,13] = add_any bfi bfm
    bfo:f64[200,7,13,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 13, 3)
    ] 0.0
    bfp:f64[200,7,13,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(3,), scatter_dims_to_operand_dims=(3,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] bfo bex bfn
    bfq:f64[200,7,13] = mul bet bfj
    bfr:f64[200,7,13] = add_any bff bfq
    bfs:f64[200,7,13,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 13, 3)
    ] 0.0
    bft:f64[200,7,13,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(3,), scatter_dims_to_operand_dims=(3,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] bfs bew bfr
    bfu:f64[200,7,13] = mul bfj bev
    bfv:f64[200,7,13] = reduce_sum[axes=(3,)] bfa
    bfw:f64[200,7,13] = neg bfv
    bfx:f64[200,7,13] = mul bet bfw
    bfy:f64[200,7,13] = add_any bfh bfx
    bfz:f64[200,7,13,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 13, 3)
    ] 0.0
    bga:f64[200,7,13,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(3,), scatter_dims_to_operand_dims=(3,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] bfz beu bfy
    bgb:f64[200,7,13,3] = add_any bft bga
    bgc:f64[200,7,13] = mul bfw bes
    bgd:f64[200,7,13] = add_any bfu bgc
    bge:f64[200,7,13,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 13, 3)
    ] 0.0
    bgf:f64[200,7,13,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(3,), scatter_dims_to_operand_dims=(3,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] bge ber bgd
    bgg:f64[200,7,13,3] = add_any bfp bgf
    bgh:f64[200,7,13] = mul bep bfv
    bgi:f64[200,7,13] = add_any bfl bgh
    bgj:f64[200,7,13,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 13, 3)
    ] 0.0
    bgk:f64[200,7,13,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(3,), scatter_dims_to_operand_dims=(3,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] bgj beq bgi
    bgl:f64[200,7,13,3] = add_any bgb bgk
    bgm:f64[200,7,13] = mul bfv beo
    bgn:f64[200,7,13] = add_any bfg bgm
    bgo:f64[200,7,13,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 13, 3)
    ] 0.0
    bgp:f64[200,7,13,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(3,), scatter_dims_to_operand_dims=(3,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] bgo ben bgn
    bgq:f64[200,7,13,3] = add_any bgg bgp
  in (bgq, bgl) } in
let _take29 = { lambda ; bgr:i64[4,1] bgs:f64[200,7,4,3]. let
    bgt:f64[200,7,18,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 18, 3)
    ] 0.0
    bgu:f64[200,7,18,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=False
      update_consts=()
      update_jaxpr=jaxpr
    ] bgt bgr bgs
  in (bgu,) } in
let cross23 = { lambda ; bgv:i32[1] bgw:f64[200,7,12] bgx:f64[200,7,12] bgy:i32[1]
    bgz:i32[1] bha:f64[200,7,12] bhb:f64[200,7,12] bhc:i32[1] bhd:f64[200,7,12] bhe:i32[1]
    bhf:i32[1] bhg:f64[200,7,12] bhh:f64[200,7,12,3]. let
    bhi:f64[200,7,12,1] = slice[
      limit_indices=(200, 7, 12, 1)
      start_indices=(0, 0, 0, 0)
      strides=None
    ] bhh
    bhj:f64[200,7,12,1] = slice[
      limit_indices=(200, 7, 12, 2)
      start_indices=(0, 0, 0, 1)
      strides=None
    ] bhh
    bhk:f64[200,7,12,1] = slice[
      limit_indices=(200, 7, 12, 3)
      start_indices=(0, 0, 0, 2)
      strides=None
    ] bhh
    bhl:f64[200,7,12] = reduce_sum[axes=(3,)] bhk
    bhm:f64[200,7,12] = neg bhl
    bhn:f64[200,7,12] = mul bgx bhm
    bho:f64[200,7,12] = mul bhm bhd
    bhp:f64[200,7,12] = mul bhg bhl
    bhq:f64[200,7,12] = mul bhl bha
    bhr:f64[200,7,12] = reduce_sum[axes=(3,)] bhj
    bhs:f64[200,7,12] = neg bhr
    bht:f64[200,7,12] = mul bhg bhs
    bhu:f64[200,7,12] = mul bhs bgw
    bhv:f64[200,7,12] = add_any bhq bhu
    bhw:f64[200,7,12,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 12, 3)
    ] 0.0
    bhx:f64[200,7,12,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(3,), scatter_dims_to_operand_dims=(3,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] bhw bhf bhv
    bhy:f64[200,7,12] = mul bhb bhr
    bhz:f64[200,7,12] = add_any bhn bhy
    bia:f64[200,7,12,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 12, 3)
    ] 0.0
    bib:f64[200,7,12,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(3,), scatter_dims_to_operand_dims=(3,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] bia bhe bhz
    bic:f64[200,7,12] = mul bhr bhd
    bid:f64[200,7,12] = reduce_sum[axes=(3,)] bhi
    bie:f64[200,7,12] = neg bid
    bif:f64[200,7,12] = mul bhb bie
    big:f64[200,7,12] = add_any bhp bif
    bih:f64[200,7,12,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 12, 3)
    ] 0.0
    bii:f64[200,7,12,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(3,), scatter_dims_to_operand_dims=(3,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] bih bhc big
    bij:f64[200,7,12,3] = add_any bib bii
    bik:f64[200,7,12] = mul bie bha
    bil:f64[200,7,12] = add_any bic bik
    bim:f64[200,7,12,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 12, 3)
    ] 0.0
    bin:f64[200,7,12,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(3,), scatter_dims_to_operand_dims=(3,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] bim bgz bil
    bio:f64[200,7,12,3] = add_any bhx bin
    bip:f64[200,7,12] = mul bgx bid
    biq:f64[200,7,12] = add_any bht bip
    bir:f64[200,7,12,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 12, 3)
    ] 0.0
    bis:f64[200,7,12,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(3,), scatter_dims_to_operand_dims=(3,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] bir bgy biq
    bit:f64[200,7,12,3] = add_any bij bis
    biu:f64[200,7,12] = mul bid bgw
    biv:f64[200,7,12] = add_any bho biu
    biw:f64[200,7,12,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 12, 3)
    ] 0.0
    bix:f64[200,7,12,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(3,), scatter_dims_to_operand_dims=(3,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] biw bgv biv
    biy:f64[200,7,12,3] = add_any bio bix
  in (biy, bit) } in
let cross24 = { lambda ; biz:i32[1] bja:f64[200,7,1,6] bjb:f64[200,7,1,1] bjc:i32[1]
    bjd:i32[1] bje:f64[200,7,1,6] bjf:f64[200,7,1,1] bjg:i32[1] bjh:f64[200,7,1,6]
    bji:f64[200,7,1,1] bjj:i32[1] bjk:i32[1] bjl:f64[200,7,1,1] bjm:f64[200,7,1,1]
    bjn:f64[200,7,1,1] bjo:f64[200,7,1,6,3]. let
    bjp:f64[200,7,1,6,1] = slice[
      limit_indices=(200, 7, 1, 6, 1)
      start_indices=(0, 0, 0, 0, 0)
      strides=None
    ] bjo
    bjq:f64[200,7,1,6,1] = slice[
      limit_indices=(200, 7, 1, 6, 2)
      start_indices=(0, 0, 0, 0, 1)
      strides=None
    ] bjo
    bjr:f64[200,7,1,6,1] = slice[
      limit_indices=(200, 7, 1, 6, 3)
      start_indices=(0, 0, 0, 0, 2)
      strides=None
    ] bjo
    bjs:f64[200,7,6] = reduce_sum[axes=(2, 4)] bjr
    bjt:f64[200,7,1,6] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 3)
      shape=(200, 7, 1, 6)
    ] bjs
    bju:f64[200,7,1,6] = neg bjt
    bjv:f64[200,7,1,6] = mul bjn bju
    bjw:f64[200,7,1,6] = mul bju bjh
    bjx:f64[200,7,1] = reduce_sum[axes=(3,)] bjw
    bjy:f64[200,7,1,1] = reshape[dimensions=None new_sizes=(200, 7, 1, 1)] bjx
    bjz:f64[200,7] = reduce_sum[axes=(2, 3)] bjy
    bka:f64[200,7,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(200, 7, 1)
    ] bjz
    bkb:f64[200,7,1,6] = mul bjm bjt
    bkc:f64[200,7,1,6] = mul bjt bje
    bkd:f64[200,7,1] = reduce_sum[axes=(3,)] bkc
    bke:f64[200,7,1,1] = reshape[dimensions=None new_sizes=(200, 7, 1, 1)] bkd
    bkf:f64[200,7] = reduce_sum[axes=(2, 3)] bke
    bkg:f64[200,7,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(200, 7, 1)
    ] bkf
    bkh:f64[200,7,6] = reduce_sum[axes=(2, 4)] bjq
    bki:f64[200,7,1,6] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 3)
      shape=(200, 7, 1, 6)
    ] bkh
    bkj:f64[200,7,1,6] = neg bki
    bkk:f64[200,7,1,6] = mul bjl bkj
    bkl:f64[200,7,1,6] = mul bkj bja
    bkm:f64[200,7,1] = reduce_sum[axes=(3,)] bkl
    bkn:f64[200,7,1,1] = reshape[dimensions=None new_sizes=(200, 7, 1, 1)] bkm
    bko:f64[200,7] = reduce_sum[axes=(2, 3)] bkn
    bkp:f64[200,7,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(200, 7, 1)
    ] bko
    bkq:f64[200,7,1] = add_any bkg bkp
    bkr:f64[200,7,1,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 1, 3)
    ] 0.0
    bks:f64[200,7,1,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(3,), scatter_dims_to_operand_dims=(3,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] bkr bjk bkq
    bkt:f64[200,7,1,6] = mul bji bki
    bku:f64[200,7,1,6] = add_any bjv bkt
    bkv:f64[200,7,1,6,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 1, 6, 3)
    ] 0.0
    bkw:f64[200,7,1,6,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2, 3), inserted_window_dims=(4,), scatter_dims_to_operand_dims=(4,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] bkv bjj bku
    bkx:f64[200,7,1,6] = mul bki bjh
    bky:f64[200,7,1] = reduce_sum[axes=(3,)] bkx
    bkz:f64[200,7,1,1] = reshape[dimensions=None new_sizes=(200, 7, 1, 1)] bky
    bla:f64[200,7] = reduce_sum[axes=(2, 3)] bkz
    blb:f64[200,7,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(200, 7, 1)
    ] bla
    blc:f64[200,7,6] = reduce_sum[axes=(2, 4)] bjp
    bld:f64[200,7,1,6] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 3)
      shape=(200, 7, 1, 6)
    ] blc
    ble:f64[200,7,1,6] = neg bld
    blf:f64[200,7,1,6] = mul bjf ble
    blg:f64[200,7,1,6] = add_any bkb blf
    blh:f64[200,7,1,6,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 1, 6, 3)
    ] 0.0
    bli:f64[200,7,1,6,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2, 3), inserted_window_dims=(4,), scatter_dims_to_operand_dims=(4,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] blh bjg blg
    blj:f64[200,7,1,6,3] = add_any bkw bli
    blk:f64[200,7,1,6] = mul ble bje
    bll:f64[200,7,1] = reduce_sum[axes=(3,)] blk
    blm:f64[200,7,1,1] = reshape[dimensions=None new_sizes=(200, 7, 1, 1)] bll
    bln:f64[200,7] = reduce_sum[axes=(2, 3)] blm
    blo:f64[200,7,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(200, 7, 1)
    ] bln
    blp:f64[200,7,1] = add_any blb blo
    blq:f64[200,7,1,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 1, 3)
    ] 0.0
    blr:f64[200,7,1,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(3,), scatter_dims_to_operand_dims=(3,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] blq bjd blp
    bls:f64[200,7,1,3] = add_any bks blr
    blt:f64[200,7,1,6] = mul bjb bld
    blu:f64[200,7,1,6] = add_any bkk blt
    blv:f64[200,7,1,6,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 1, 6, 3)
    ] 0.0
    blw:f64[200,7,1,6,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2, 3), inserted_window_dims=(4,), scatter_dims_to_operand_dims=(4,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] blv bjc blu
    blx:f64[200,7,1,6,3] = add_any blj blw
    bly:f64[200,7,1,6] = mul bld bja
    blz:f64[200,7,1] = reduce_sum[axes=(3,)] bly
    bma:f64[200,7,1,1] = reshape[dimensions=None new_sizes=(200, 7, 1, 1)] blz
    bmb:f64[200,7] = reduce_sum[axes=(2, 3)] bma
    bmc:f64[200,7,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(200, 7, 1)
    ] bmb
    bmd:f64[200,7,1] = add_any bka bmc
    bme:f64[200,7,1,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 1, 3)
    ] 0.0
    bmf:f64[200,7,1,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(3,), scatter_dims_to_operand_dims=(3,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] bme biz bmd
    bmg:f64[200,7,1,3] = add_any bls bmf
  in (bmg, blx) } in
let _take30 = { lambda ; bmh:i64[4,1] bmi:f64[200,7,4]. let
    bmj:f64[200,7,18] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 18)
    ] 0.0
    bmk:f64[200,7,18] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=False
      update_consts=()
      update_jaxpr=jaxpr
    ] bmj bmh bmi
  in (bmk,) } in
let _take31 = { lambda ; bml:i32[13,1] bmm:f64[200,7,13,3]. let
    bmn:f64[200,7,14,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 14, 3)
    ] 0.0
    bmo:f64[200,7,14,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=False
      update_consts=()
      update_jaxpr=jaxpr
    ] bmn bml bmm
  in (bmo,) } in
let cross25 = { lambda ; bmp:f64[1,1,18] bmq:i32[1] bmr:f64[1,1,18] bms:i32[1] bmt:f64[1,1,18]
    bmu:i32[1] bmv:f64[1,1,18] bmw:f64[1,1,18] bmx:f64[1,1,18] bmy:f64[200,7,18,3]. let
    bmz:f64[200,7,18,1] = slice[
      limit_indices=(200, 7, 18, 1)
      start_indices=(0, 0, 0, 0)
      strides=None
    ] bmy
    bna:f64[200,7,18,1] = slice[
      limit_indices=(200, 7, 18, 2)
      start_indices=(0, 0, 0, 1)
      strides=None
    ] bmy
    bnb:f64[200,7,18,1] = slice[
      limit_indices=(200, 7, 18, 3)
      start_indices=(0, 0, 0, 2)
      strides=None
    ] bmy
    bnc:f64[200,7,18] = reduce_sum[axes=(3,)] bnb
    bnd:f64[200,7,18] = neg bnc
    bne:f64[200,7,18] = mul bmx bnd
    bnf:f64[200,7,18] = mul bmw bnc
    bng:f64[200,7,18] = reduce_sum[axes=(3,)] bna
    bnh:f64[200,7,18] = neg bng
    bni:f64[200,7,18] = mul bmv bnh
    bnj:f64[200,7,18] = mul bmt bng
    bnk:f64[200,7,18] = add_any bne bnj
    bnl:f64[200,7,18,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 18, 3)
    ] 0.0
    bnm:f64[200,7,18,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(3,), scatter_dims_to_operand_dims=(3,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] bnl bmu bnk
    bnn:f64[200,7,18] = reduce_sum[axes=(3,)] bmz
    bno:f64[200,7,18] = neg bnn
    bnp:f64[200,7,18] = mul bmr bno
    bnq:f64[200,7,18] = add_any bnf bnp
    bnr:f64[200,7,18,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 18, 3)
    ] 0.0
    bns:f64[200,7,18,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(3,), scatter_dims_to_operand_dims=(3,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] bnr bms bnq
    bnt:f64[200,7,18,3] = add_any bnm bns
    bnu:f64[200,7,18] = mul bmp bnn
    bnv:f64[200,7,18] = add_any bni bnu
    bnw:f64[200,7,18,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 18, 3)
    ] 0.0
    bnx:f64[200,7,18,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(3,), scatter_dims_to_operand_dims=(3,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] bnw bmq bnv
    bny:f64[200,7,18,3] = add_any bnt bnx
  in (bny,) } in
let cross26 = { lambda ; bnz:i32[1] boa:f64[1,1,13] bob:i32[1] boc:f64[1,1,13] bod:f64[1,1,13]
    boe:i32[1] bof:f64[1,1,13] bog:f64[1,1,13] boh:f64[1,1,13] boi:f64[200,7,13,3]. let
    boj:f64[200,7,13,1] = slice[
      limit_indices=(200, 7, 13, 1)
      start_indices=(0, 0, 0, 0)
      strides=None
    ] boi
    bok:f64[200,7,13,1] = slice[
      limit_indices=(200, 7, 13, 2)
      start_indices=(0, 0, 0, 1)
      strides=None
    ] boi
    bol:f64[200,7,13,1] = slice[
      limit_indices=(200, 7, 13, 3)
      start_indices=(0, 0, 0, 2)
      strides=None
    ] boi
    bom:f64[200,7,13] = reduce_sum[axes=(3,)] bol
    bon:f64[200,7,13] = neg bom
    boo:f64[200,7,13] = mul bon boh
    bop:f64[200,7,13] = mul bom bog
    boq:f64[200,7,13] = reduce_sum[axes=(3,)] bok
    bor:f64[200,7,13] = neg boq
    bos:f64[200,7,13] = mul bor bof
    bot:f64[200,7,13] = add_any bop bos
    bou:f64[200,7,13,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 13, 3)
    ] 0.0
    bov:f64[200,7,13,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(3,), scatter_dims_to_operand_dims=(3,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] bou boe bot
    bow:f64[200,7,13] = mul boq bod
    box:f64[200,7,13] = reduce_sum[axes=(3,)] boj
    boy:f64[200,7,13] = neg box
    boz:f64[200,7,13] = mul boy boc
    bpa:f64[200,7,13] = add_any bow boz
    bpb:f64[200,7,13,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 13, 3)
    ] 0.0
    bpc:f64[200,7,13,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(3,), scatter_dims_to_operand_dims=(3,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] bpb bob bpa
    bpd:f64[200,7,13,3] = add_any bov bpc
    bpe:f64[200,7,13] = mul box boa
    bpf:f64[200,7,13] = add_any boo bpe
    bpg:f64[200,7,13,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 13, 3)
    ] 0.0
    bph:f64[200,7,13,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(3,), scatter_dims_to_operand_dims=(3,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] bpg bnz bpf
    bpi:f64[200,7,13,3] = add_any bpd bph
  in (bpi,) } in
let _take32 = { lambda ; bpj:i64[4,1] bpk:f64[200,7,4,4]. let
    bpl:f64[200,7,13,4] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 13, 4)
    ] 0.0
    bpm:f64[200,7,13,4] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=False
      update_consts=()
      update_jaxpr=jaxpr
    ] bpl bpj bpk
  in (bpm,) } in
let jaxpr1 = { lambda ; bpn:f64[200,7,18,18] bpo:f64[200,7,18,18]. let
    bpp:f64[200,7,18,18] = dot_general[
      dimension_numbers=(([3], [3]), ([0, 1], [0, 1]))
      precision=(Precision.HIGHEST, Precision.HIGHEST)
    ] bpn bpo
    bpq:f64[200,7,18,18] = transpose[permutation=(0, 1, 3, 2)] bpp
  in (bpq,) } in
let jaxpr2 = { lambda ; bpr:f64[200,7,18,18] bps:f64[200,7,18,18]. let
    bpt:f64[200,7,18,18] = pjit[
      name=_cho_solve
      jaxpr={ lambda ; bpu:f64[200,7,18,18] bpv:f64[200,7,18,18]. let
          bpw:f64[200,7,18,18,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2, 3)
            shape=(200, 7, 18, 18, 1)
          ] bpv
          bpx:f64[200,7,18,1,18] = transpose[permutation=(0, 1, 3, 4, 2)] bpw
          bpy:f64[200,7,18,18] = reshape[
            dimensions=None
            new_sizes=(200, 7, 18, 18)
          ] bpx
          bpz:f64[200,7,18,18] = triangular_solve[
            conjugate_a=False
            left_side=True
            lower=False
            transpose_a=True
            unit_diagonal=False
          ] bpu bpy
          bqa:f64[200,7,18,1,18] = reshape[
            dimensions=None
            new_sizes=(200, 7, 18, 1, 18)
          ] bpz
          bqb:f64[200,7,18,1,18] = slice[
            limit_indices=(200, 7, 18, 1, 18)
            start_indices=(0, 0, 0, 0, 0)
            strides=None
          ] bqa
          bqc:f64[200,7,18,18,1] = transpose[permutation=(0, 1, 4, 2, 3)] bqb
          bqd:f64[200,7,18,18] = squeeze[dimensions=(4,)] bqc
          bqe:f64[200,7,18,18,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2, 3)
            shape=(200, 7, 18, 18, 1)
          ] bqd
          bqf:f64[200,7,18,1,18] = transpose[permutation=(0, 1, 3, 4, 2)] bqe
          bqg:f64[200,7,18,18] = reshape[
            dimensions=None
            new_sizes=(200, 7, 18, 18)
          ] bqf
          bqh:f64[200,7,18,18] = triangular_solve[
            conjugate_a=False
            left_side=True
            lower=False
            transpose_a=False
            unit_diagonal=False
          ] bpu bqg
          bqi:f64[200,7,18,1,18] = reshape[
            dimensions=None
            new_sizes=(200, 7, 18, 1, 18)
          ] bqh
          bqj:f64[200,7,18,1,18] = slice[
            limit_indices=(200, 7, 18, 1, 18)
            start_indices=(0, 0, 0, 0, 0)
            strides=None
          ] bqi
          bqk:f64[200,7,18,18,1] = transpose[permutation=(0, 1, 4, 2, 3)] bqj
          bql:f64[200,7,18,18] = squeeze[dimensions=(4,)] bqk
        in (bql,) }
    ] bpr bps
  in (bpt,) } in
let jaxpr3 = { lambda ; bqm:f64[200,7,18,18] bqn:f64[200,7,18,18]. let
    bqo:f64[200,7,18,18] = pjit[
      name=_cho_solve
      jaxpr={ lambda ; bpu:f64[200,7,18,18] bpv:f64[200,7,18,18]. let
          bpw:f64[200,7,18,18,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2, 3)
            shape=(200, 7, 18, 18, 1)
          ] bpv
          bpx:f64[200,7,18,1,18] = transpose[permutation=(0, 1, 3, 4, 2)] bpw
          bpy:f64[200,7,18,18] = reshape[
            dimensions=None
            new_sizes=(200, 7, 18, 18)
          ] bpx
          bpz:f64[200,7,18,18] = triangular_solve[
            conjugate_a=False
            left_side=True
            lower=False
            transpose_a=True
            unit_diagonal=False
          ] bpu bpy
          bqa:f64[200,7,18,1,18] = reshape[
            dimensions=None
            new_sizes=(200, 7, 18, 1, 18)
          ] bpz
          bqb:f64[200,7,18,1,18] = slice[
            limit_indices=(200, 7, 18, 1, 18)
            start_indices=(0, 0, 0, 0, 0)
            strides=None
          ] bqa
          bqc:f64[200,7,18,18,1] = transpose[permutation=(0, 1, 4, 2, 3)] bqb
          bqd:f64[200,7,18,18] = squeeze[dimensions=(4,)] bqc
          bqe:f64[200,7,18,18,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2, 3)
            shape=(200, 7, 18, 18, 1)
          ] bqd
          bqf:f64[200,7,18,1,18] = transpose[permutation=(0, 1, 3, 4, 2)] bqe
          bqg:f64[200,7,18,18] = reshape[
            dimensions=None
            new_sizes=(200, 7, 18, 18)
          ] bqf
          bqh:f64[200,7,18,18] = triangular_solve[
            conjugate_a=False
            left_side=True
            lower=False
            transpose_a=False
            unit_diagonal=False
          ] bpu bqg
          bqi:f64[200,7,18,1,18] = reshape[
            dimensions=None
            new_sizes=(200, 7, 18, 1, 18)
          ] bqh
          bqj:f64[200,7,18,1,18] = slice[
            limit_indices=(200, 7, 18, 1, 18)
            start_indices=(0, 0, 0, 0, 0)
            strides=None
          ] bqi
          bqk:f64[200,7,18,18,1] = transpose[permutation=(0, 1, 4, 2, 3)] bqj
          bql:f64[200,7,18,18] = squeeze[dimensions=(4,)] bqk
        in (bql,) }
    ] bqm bqn
  in (bqo,) } in
let cross27 = { lambda ; bqp:f64[200,7,3] bqq:f64[200,7,3] bqr:i32[1] bqs:i32[1]
    bqt:i32[1] bqu:i32[1] bqv:i32[1] bqw:i32[1]. let
    bqx:f64[200,7] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 1)
      unique_indices=True
    ] bqp bqr
    bqy:f64[200,7] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 1)
      unique_indices=True
    ] bqq bqs
    bqz:f64[200,7] = mul bqx bqy
    bra:f64[200,7] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 1)
      unique_indices=True
    ] bqp bqt
    brb:f64[200,7] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 1)
      unique_indices=True
    ] bqq bqu
    brc:f64[200,7] = mul bra brb
    brd:f64[200,7] = sub bqz brc
    bre:f64[200,7,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(200, 7, 1)
    ] brd
    brf:f64[200,7] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 1)
      unique_indices=True
    ] bqq bqv
    brg:f64[200,7] = mul bra brf
    brh:f64[200,7] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 1)
      unique_indices=True
    ] bqp bqw
    bri:f64[200,7] = mul brh bqy
    brj:f64[200,7] = sub brg bri
    brk:f64[200,7,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(200, 7, 1)
    ] brj
    brl:f64[200,7] = mul brh brb
    brm:f64[200,7] = mul bqx brf
    brn:f64[200,7] = sub brl brm
    bro:f64[200,7,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(200, 7, 1)
    ] brn
    brp:f64[200,7,3] = concatenate[dimension=2] bre brk bro
  in (brp, bqy, bqx, brb, bra, brf, brh) } in
let remainder9 = { lambda ; brq:f64[200,7] brr:f64[] brs:bool[]. let
    brt:f64[200,7] = rem brq brr
    bru:bool[200,7] = lt brt 0.0
    brv:bool[200,7] = ne bru brs
    brw:bool[200,7] = ne brt 0.0
    brx:bool[200,7] = and brv brw
    bry:f64[200,7] = add brt brr
    brz:f64[200,7] = select_n brx brt bry
  in (brz, brx) } in
let clip2 = { lambda ; bsa:f64[200,7] bsb:f64[] bsc:f64[200,7] bsd:f64[200,7] bse:f64[200,7]
    bsf:f64[200,7] bsg:f64[] bsh:f64[200,7] bsi:f64[200,7] bsj:f64[200,7] bsk:f64[200,7]. let
    bsl:f64[200,7] = max bsb bsa
    bsm:bool[200,7] = eq bsa bsl
    bsn:f64[200,7] = select_n bsm bsc bsd
    bso:bool[200,7] = eq bsb bsl
    bsp:f64[200,7] = select_n bso bse bsf
    bsq:f64[200,7] = div bsn bsp
    bsr:f64[200,7] = min bsg bsl
    bss:bool[200,7] = eq bsl bsr
    bst:f64[200,7] = select_n bss bsh bsi
    bsu:bool[200,7] = eq bsg bsr
    bsv:f64[200,7] = select_n bsu bsj bsk
    bsw:f64[200,7] = div bst bsv
  in (bsr, bsq, bsw) } in
let clip3 = { lambda ; bsx:f64[200,7,12] bsy:f64[1,1,12] bsz:f64[200,7,12] bta:f64[200,7,12]
    btb:f64[200,7,12] btc:f64[200,7,12] btd:f64[1,1,12] bte:f64[200,7,12] btf:f64[200,7,12]
    btg:f64[200,7,12] bth:f64[200,7,12]. let
    bti:f64[200,7,12] = max bsy bsx
    btj:bool[200,7,12] = eq bsx bti
    btk:f64[200,7,12] = select_n btj bsz bta
    btl:bool[200,7,12] = eq bsy bti
    btm:f64[200,7,12] = select_n btl btb btc
    btn:f64[200,7,12] = div btk btm
    bto:f64[200,7,12] = min btd bti
    btp:bool[200,7,12] = eq bti bto
    btq:f64[200,7,12] = select_n btp bte btf
    btr:bool[200,7,12] = eq btd bto
    bts:f64[200,7,12] = select_n btr btg bth
    btt:f64[200,7,12] = div btq bts
  in (bto, btn, btt) } in
let clip4 = { lambda ; btu:f64[200,7,12] btv:f64[200,7,12] btw:f64[200,7,12]. let
    btx:f64[200,7,12] = mul btw btv
    bty:f64[200,7,12] = mul btx btu
  in (bty,) } in
let clip5 = { lambda ; btz:f64[200,7] bua:f64[200,7] bub:f64[200,7]. let
    buc:f64[200,7] = mul bub bua
    bud:f64[200,7] = mul buc btz
  in (bud,) } in
let remainder10 = { lambda ; bue:bool[200,7] buf:f64[200,7]. let
    bug:f64[200,7] = broadcast_in_dim[broadcast_dimensions=() shape=(200, 7)] 0.0
    buh:f64[200,7] = select_n bue buf bug
    bui:f64[200,7] = select_n bue bug buf
    buj:f64[200,7] = add_any buh bui
  in (buj,) } in
let cross28 = { lambda ; buk:i32[1] bul:f64[200,7] bum:f64[200,7] bun:i32[1] buo:i32[1]
    bup:f64[200,7] buq:f64[200,7] bur:i32[1] bus:f64[200,7] but:i32[1] buu:i32[1]
    buv:f64[200,7] buw:f64[200,7,3]. let
    bux:f64[200,7,1] = slice[
      limit_indices=(200, 7, 1)
      start_indices=(0, 0, 0)
      strides=None
    ] buw
    buy:f64[200,7,1] = slice[
      limit_indices=(200, 7, 2)
      start_indices=(0, 0, 1)
      strides=None
    ] buw
    buz:f64[200,7,1] = slice[
      limit_indices=(200, 7, 3)
      start_indices=(0, 0, 2)
      strides=None
    ] buw
    bva:f64[200,7] = reduce_sum[axes=(2,)] buz
    bvb:f64[200,7] = neg bva
    bvc:f64[200,7] = mul bum bvb
    bvd:f64[200,7] = mul bvb bus
    bve:f64[200,7] = mul buv bva
    bvf:f64[200,7] = mul bva bup
    bvg:f64[200,7] = reduce_sum[axes=(2,)] buy
    bvh:f64[200,7] = neg bvg
    bvi:f64[200,7] = mul buv bvh
    bvj:f64[200,7] = mul bvh bul
    bvk:f64[200,7] = add_any bvf bvj
    bvl:f64[200,7,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 3)
    ] 0.0
    bvm:f64[200,7,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] bvl buu bvk
    bvn:f64[200,7] = mul buq bvg
    bvo:f64[200,7] = add_any bvc bvn
    bvp:f64[200,7,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 3)
    ] 0.0
    bvq:f64[200,7,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] bvp but bvo
    bvr:f64[200,7] = mul bvg bus
    bvs:f64[200,7] = reduce_sum[axes=(2,)] bux
    bvt:f64[200,7] = neg bvs
    bvu:f64[200,7] = mul buq bvt
    bvv:f64[200,7] = add_any bve bvu
    bvw:f64[200,7,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 3)
    ] 0.0
    bvx:f64[200,7,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] bvw bur bvv
    bvy:f64[200,7,3] = add_any bvq bvx
    bvz:f64[200,7] = mul bvt bup
    bwa:f64[200,7] = add_any bvr bvz
    bwb:f64[200,7,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 3)
    ] 0.0
    bwc:f64[200,7,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] bwb buo bwa
    bwd:f64[200,7,3] = add_any bvm bwc
    bwe:f64[200,7] = mul bum bvs
    bwf:f64[200,7] = add_any bvi bwe
    bwg:f64[200,7,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 3)
    ] 0.0
    bwh:f64[200,7,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] bwg bun bwf
    bwi:f64[200,7,3] = add_any bvy bwh
    bwj:f64[200,7] = mul bvs bul
    bwk:f64[200,7] = add_any bvd bwj
    bwl:f64[200,7,3] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(200, 7, 3)
    ] 0.0
    bwm:f64[200,7,3] = scatter-add[
      dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      unique_indices=True
      update_consts=()
      update_jaxpr=jaxpr
    ] bwl buk bwk
    bwn:f64[200,7,3] = add_any bwd bwm
  in (bwn, bwi) } in
let _cho_solve = { lambda ; bpu:f64[200,7,18,18] bpv:f64[200,7,18,18]. let
    bpw:f64[200,7,18,18,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2, 3)
      shape=(200, 7, 18, 18, 1)
    ] bpv
    bpx:f64[200,7,18,1,18] = transpose[permutation=(0, 1, 3, 4, 2)] bpw
    bpy:f64[200,7,18,18] = reshape[dimensions=None new_sizes=(200, 7, 18, 18)] bpx
    bpz:f64[200,7,18,18] = triangular_solve[
      conjugate_a=False
      left_side=True
      lower=False
      transpose_a=True
      unit_diagonal=False
    ] bpu bpy
    bqa:f64[200,7,18,1,18] = reshape[
      dimensions=None
      new_sizes=(200, 7, 18, 1, 18)
    ] bpz
    bqb:f64[200,7,18,1,18] = slice[
      limit_indices=(200, 7, 18, 1, 18)
      start_indices=(0, 0, 0, 0, 0)
      strides=None
    ] bqa
    bqc:f64[200,7,18,18,1] = transpose[permutation=(0, 1, 4, 2, 3)] bqb
    bqd:f64[200,7,18,18] = squeeze[dimensions=(4,)] bqc
    bqe:f64[200,7,18,18,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2, 3)
      shape=(200, 7, 18, 18, 1)
    ] bqd
    bqf:f64[200,7,18,1,18] = transpose[permutation=(0, 1, 3, 4, 2)] bqe
    bqg:f64[200,7,18,18] = reshape[dimensions=None new_sizes=(200, 7, 18, 18)] bqf
    bqh:f64[200,7,18,18] = triangular_solve[
      conjugate_a=False
      left_side=True
      lower=False
      transpose_a=False
      unit_diagonal=False
    ] bpu bqg
    bqi:f64[200,7,18,1,18] = reshape[
      dimensions=None
      new_sizes=(200, 7, 18, 1, 18)
    ] bqh
    bqj:f64[200,7,18,1,18] = slice[
      limit_indices=(200, 7, 18, 1, 18)
      start_indices=(0, 0, 0, 0, 0)
      strides=None
    ] bqi
    bqk:f64[200,7,18,18,1] = transpose[permutation=(0, 1, 4, 2, 3)] bqj
    bql:f64[200,7,18,18] = squeeze[dimensions=(4,)] bqk
  in (bql,) } in
{ lambda ; bwo:i32[] bwp:f64[180] bwq:f64[180] bwr:f64[9] bws:f64[9] bwt:f64[36,2]
    bwu:f64[9,2] bwv:f64[19] bww:i64[4] bwx:f64[18,3] bwy:f64[18,3] bwz:f64[13,3]
    bxa:f64[13,4] bxb:f64[13,4] bxc:f64[13,3] bxd:i64[4] bxe:i64[4] bxf:i64[4] bxg:i64[4]
    bxh:i64[4] bxi:i64[4] bxj:i64[4] bxk:i64[4] bxl:i64[4] bxm:i64[4] bxn:i64[4]
    bxo:i64[4] bxp:i64[4] bxq:i64[4] bxr:i64[4] bxs:i64[4] bxt:i64[13] bxu:i64[13]
    bxv:i64[13] bxw:i64[13] bxx:f64[13,3] bxy:f64[13,4] bxz:f64[13] bya:i32[13] byb:f64[4]
    byc:i32[13] byd:f64[4] bye:i64[18] byf:f64[4] byg:i64[18] byh:i64[4] byi:i64[18]
    byj:i64[4] byk:i64[4] byl:i64[4] bym:i64[4] byn:i64[4] byo:i64[4] byp:i64[4]
    byq:i64[4] byr:i64[4] bys:i64[4] byt:i64[4] byu:i64[13] byv:i64[13] byw:i64[4]
    byx:i64[4] byy:i64[4] byz:i64[4] bza:i64[4] bzb:i64[4] bzc:i64[4] bzd:i64[4]
    bze:i64[4] bzf:i64[4] bzg:i64[4] bzh:i64[4] bzi:i64[13] bzj:i64[13] bzk:i64[13]
    bzl:i64[18] bzm:i64[132] bzn:i64[132] bzo:f64[18] bzp:f64[18] bzq:f64[18] bzr:i64[18]
    bzs:f64[3] bzt:i64[4] bzu:i64[4] bzv:i64[4] bzw:i64[4] bzx:i64[4] bzy:i64[4]
    bzz:i64[4] caa:i64[4] cab:i64[4] cac:i64[4] cad:i64[4] cae:i64[4] caf:i64[4]
    cag:i64[4] cah:i64[13] cai:i64[13] caj:i64[4] cak:i64[4] cal:i64[4] cam:i64[4]
    can:i64[4] cao:i64[4] cap:i64[4] caq:i64[4] car:i64[4] cas:i64[13] cat:i64[13]
    cau:i64[18] cav:i64[4] caw:f64[] cax:f64[4] cay:f64[3] caz:f64[3] cba:f64[3]
    cbb:f64[] cbc:f64[8] cbd:f64[3] cbe:f64[3] cbf:f64[3] cbg:i64[3] cbh:f64[3] cbi:f64[12]
    cbj:i32[12] cbk:i32[12] cbl:f64[12,2] cbm:f64[12] cbn:f64[12] cbo:f64[12] cbp:f64[12]
    cbq:f64[12,2] cbr:f64[13,3,3] cbs:i64[4] cbt:i64[5] cbu:f64[7,400] cbv:f64[7,189,400]
    cbw:f64[7,400] cbx:f64[7,400,400] cby:f64[7,400] cbz:f64[7,400,400] cca:f64[7,400]
    ccb:f64[7,400,400] ccc:f64[7,54] ccd:f64[7,400,54] cce:i32[] ccf:f64[7,400] ccg:f64[7,189,400]
    cch:f64[7,400] cci:f64[7,400,400] ccj:f64[7,400] cck:f64[7,400,400] ccl:f64[7,400]
    ccm:f64[7,400,400] ccn:f64[7,54] cco:f64[7,400,54] ccp:f64[7,400] ccq:f64[7,189,400]
    ccr:f64[7,400] ccs:f64[7,400,400] cct:f64[7,400] ccu:f64[7,400,400] ccv:f64[7,400]
    ccw:f64[7,400,400] ccx:f64[7,54] ccy:f64[7,400,54] ccz:f64[200,4,7,180] cda:f64[200,4,7,9]
    cdb:f64[200,4,7] cdc:f64[200,4,7,180] cdd:i64[]. let
    cde:i64[] = convert_element_type[new_dtype=int64 weak_type=False] bwo
    cdf:bool[] = lt cdd cde
    cdg:i32[] = convert_element_type[new_dtype=int32 weak_type=False] cdf
    cdh:f64[] cdi:f64[7] cdj:f64[7,400] cdk:f64[7,189,400] cdl:f64[7,400] cdm:f64[7,400,400]
      cdn:f64[7,400] cdo:f64[7,400,400] cdp:f64[7,400] cdq:f64[7,400,400] cdr:f64[7,54]
      cds:f64[7,400,54] cdt:i32[] cdu:f64[7,400] cdv:f64[7,189,400] cdw:f64[7,400]
      cdx:f64[7,400,400] cdy:f64[7,400] cdz:f64[7,400,400] cea:f64[7,400] ceb:f64[7,400,400]
      cec:f64[7,54] ced:f64[7,400,54] cee:f64[7,400] cef:f64[7,189,400] ceg:f64[7,400]
      ceh:f64[7,400,400] cei:f64[7,400] cej:f64[7,400,400] cek:f64[7,400] cel:f64[7,400,400]
      cem:f64[7,54] cen:f64[7,400,54] = cond[
      branches=(
        { lambda ; ceo_:f64[200,4,7,180] cep_:f64[200,4,7,9] ceq_:f64[180] cer_:f64[180]
            ces_:f64[9] cet_:f64[9] ceu_:f64[7,400] cev_:f64[7,400] cew_:f64[7,400]
            cex_:f64[7,400] cey_:f64[7,54] cez_:f64[36,2] cfa_:f64[9,2] cfb_:f64[19]
            cfc_:i64[4] cfd_:f64[18,3] cfe_:f64[18,3] cff_:f64[13,3] cfg_:f64[13,4]
            cfh_:f64[13,4] cfi_:f64[13,3] cfj_:i64[4] cfk_:i64[4] cfl_:i64[4] cfm_:i64[4]
            cfn_:i64[4] cfo_:i64[4] cfp_:i64[4] cfq_:i64[4] cfr_:i64[4] cfs_:i64[4]
            cft_:i64[4] cfu_:i64[4] cfv_:i64[4] cfw_:i64[4] cfx_:i64[4] cfy_:i64[4]
            cfz_:i64[13] cga_:i64[13] cgb_:i64[13] cgc_:i64[13] cgd_:f64[13,3] cge_:f64[13,4]
            cgf_:f64[13] cgg_:i32[13] cgh_:f64[4] cgi_:i32[13] cgj_:f64[4] cgk_:i64[18]
            cgl_:f64[4] cgm_:i64[18] cgn_:i64[4] cgo_:i64[18] cgp_:i64[4] cgq_:i64[4]
            cgr_:i64[4] cgs_:i64[4] cgt_:i64[4] cgu_:i64[4] cgv_:i64[4] cgw_:i64[4]
            cgx_:i64[4] cgy_:i64[4] cgz_:i64[4] cha_:i64[13] chb_:i64[13] chc_:i64[4]
            chd_:i64[4] che_:i64[4] chf_:i64[4] chg_:i64[4] chh_:i64[4] chi_:i64[4]
            chj_:i64[4] chk_:i64[4] chl_:i64[4] chm_:i64[4] chn_:i64[4] cho_:i64[13]
            chp_:i64[13] chq_:i64[13] chr_:i64[18] chs_:i64[132] cht_:i64[132] chu_:f64[18]
            chv_:f64[18] chw_:f64[18] chx_:i64[18] chy_:f64[3] chz_:i64[4] cia_:i64[4]
            cib_:i64[4] cic_:i64[4] cid_:i64[4] cie_:i64[4] cif_:i64[4] cig_:i64[4]
            cih_:i64[4] cii_:i64[4] cij_:i64[4] cik_:i64[4] cil_:i64[4] cim_:i64[4]
            cin_:i64[13] cio_:i64[13] cip_:i64[4] ciq_:i64[4] cir_:i64[4] cis_:i64[4]
            cit_:i64[4] ciu_:i64[4] civ_:i64[4] ciw_:i64[4] cix_:i64[4] ciy_:i64[13]
            ciz_:i64[13] cja_:i64[18] cjb_:i64[4] cjc_:f64[] cjd_:f64[4] cje_:f64[3]
            cjf_:f64[3] cjg_:f64[3] cjh_:f64[] cji_:f64[8] cjj_:f64[3] cjk_:f64[3]
            cjl_:f64[3] cjm_:i64[3] cjn_:f64[3] cjo_:f64[12] cjp_:i32[12] cjq_:i32[12]
            cjr_:f64[12,2] cjs_:f64[12] cjt_:f64[12] cju_:f64[12] cjv_:f64[12] cjw_:f64[12,2]
            cjx_:f64[13,3,3] cjy_:i64[4] cjz_:f64[7,189,400] cka_:f64[7,400,400]
            ckb_:f64[7,400,400] ckc_:f64[7,400,400] ckd_:f64[7,400,54] cke_:f64[200,4,7,180]
            ckf_:f64[200,4,7] ckg_:f64[7,400] ckh_:f64[7,189,400] cki_:f64[7,400]
            ckj_:f64[7,400,400] ckk_:f64[7,400] ckl_:f64[7,400,400] ckm_:f64[7,400]
            ckn_:f64[7,400,400] cko_:f64[7,54] ckp_:f64[7,400,54] ckq_:f64[7,400]
            ckr_:f64[7,189,400] cks_:f64[7,400] ckt_:f64[7,400,400] cku_:f64[7,400]
            ckv_:f64[7,400,400] ckw_:f64[7,400] ckx_:f64[7,400,400] cky_:f64[7,54]
            ckz_:f64[7,400,54] cla_:i32[] clb:f64[7,400] clc:f64[7,189,400] cld:f64[7,400]
            cle:f64[7,400,400] clf:f64[7,400] clg:f64[7,400,400] clh:f64[7,400] cli:f64[7,400,400]
            clj:f64[7,54] clk:f64[7,400,54] cll:i32[] clm:f64[7,400] cln:f64[7,189,400]
            clo:f64[7,400] clp:f64[7,400,400] clq:f64[7,400] clr:f64[7,400,400] cls:f64[7,400]
            clt:f64[7,400,400] clu:f64[7,54] clv:f64[7,400,54] clw:f64[7,400] clx:f64[7,189,400]
            cly:f64[7,400] clz:f64[7,400,400] cma:f64[7,400] cmb:f64[7,400,400] cmc:f64[7,400]
            cmd:f64[7,400,400] cme:f64[7,54] cmf:f64[7,400,54]. let
            cmg:f64[7] = broadcast_in_dim[broadcast_dimensions=() shape=(7,)] 0.0
          in (0.0, cmg, clb, clc, cld, cle, clf, clg, clh, cli, clj, clk, cll, clm,
            cln, clo, clp, clq, clr, cls, clt, clu, clv, clw, clx, cly, clz, cma,
            cmb, cmc, cmd, cme, cmf) }
        { lambda ; cmh:f64[200,4,7,180] cmi:f64[200,4,7,9] cmj:f64[180] cmk:f64[180]
            cml:f64[9] cmm:f64[9] cmn:f64[7,400] cmo:f64[7,400] cmp:f64[7,400] cmq:f64[7,400]
            cmr:f64[7,54] cms:f64[36,2] cmt:f64[9,2] cmu:f64[19] cmv:i64[4] cmw:f64[18,3]
            cmx:f64[18,3] cmy:f64[13,3] cmz:f64[13,4] cna:f64[13,4] cnb:f64[13,3]
            cnc:i64[4] cnd:i64[4] cne:i64[4] cnf:i64[4] cng:i64[4] cnh:i64[4] cni:i64[4]
            cnj:i64[4] cnk:i64[4] cnl:i64[4] cnm:i64[4] cnn:i64[4] cno:i64[4] cnp:i64[4]
            cnq:i64[4] cnr:i64[4] cns:i64[13] cnt:i64[13] cnu:i64[13] cnv:i64[13]
            cnw:f64[13,3] cnx:f64[13,4] cny:f64[13] cnz:i32[13] coa:f64[4] cob:i32[13]
            coc:f64[4] cod:i64[18] coe:f64[4] cof:i64[18] cog:i64[4] coh:i64[18]
            coi:i64[4] coj:i64[4] cok:i64[4] col:i64[4] com:i64[4] con:i64[4] coo:i64[4]
            cop:i64[4] coq:i64[4] cor:i64[4] cos:i64[4] cot:i64[13] cou:i64[13] cov:i64[4]
            cow:i64[4] cox:i64[4] coy:i64[4] coz:i64[4] cpa:i64[4] cpb:i64[4] cpc:i64[4]
            cpd:i64[4] cpe:i64[4] cpf:i64[4] cpg:i64[4] cph:i64[13] cpi:i64[13] cpj:i64[13]
            cpk:i64[18] cpl:i64[132] cpm:i64[132] cpn:f64[18] cpo:f64[18] cpp:f64[18]
            cpq:i64[18] cpr:f64[3] cps:i64[4] cpt:i64[4] cpu:i64[4] cpv:i64[4] cpw:i64[4]
            cpx:i64[4] cpy:i64[4] cpz:i64[4] cqa:i64[4] cqb:i64[4] cqc:i64[4] cqd:i64[4]
            cqe:i64[4] cqf:i64[4] cqg:i64[13] cqh:i64[13] cqi:i64[4] cqj:i64[4] cqk:i64[4]
            cql:i64[4] cqm:i64[4] cqn:i64[4] cqo:i64[4] cqp:i64[4] cqq:i64[4] cqr:i64[13]
            cqs:i64[13] cqt:i64[18] cqu:i64[4] cqv:f64[] cqw:f64[4] cqx:f64[3] cqy:f64[3]
            cqz:f64[3] cra:f64[] crb:f64[8] crc:f64[3] crd:f64[3] cre:f64[3] crf:i64[3]
            crg:f64[3] crh:f64[12] cri:i32[12] crj:i32[12] crk:f64[12,2] crl:f64[12]
            crm:f64[12] crn:f64[12] cro:f64[12] crp:f64[12,2] crq:f64[13,3,3] crr:i64[4]
            crs:f64[7,189,400] crt:f64[7,400,400] cru:f64[7,400,400] crv:f64[7,400,400]
            crw:f64[7,400,54] crx:f64[200,4,7,180] cry:f64[200,4,7] crz:f64[7,400]
            csa:f64[7,189,400] csb:f64[7,400] csc:f64[7,400,400] csd:f64[7,400] cse:f64[7,400,400]
            csf:f64[7,400] csg:f64[7,400,400] csh:f64[7,54] csi:f64[7,400,54] csj:f64[7,400]
            csk:f64[7,189,400] csl:f64[7,400] csm:f64[7,400,400] csn:f64[7,400] cso:f64[7,400,400]
            csp:f64[7,400] csq:f64[7,400,400] csr:f64[7,54] css:f64[7,400,54] cst:i32[]
            csu_:f64[7,400] csv_:f64[7,189,400] csw_:f64[7,400] csx_:f64[7,400,400]
            csy_:f64[7,400] csz_:f64[7,400,400] cta_:f64[7,400] ctb_:f64[7,400,400]
            ctc_:f64[7,54] ctd_:f64[7,400,54] cte_:i32[] ctf_:f64[7,400] ctg_:f64[7,189,400]
            cth_:f64[7,400] cti_:f64[7,400,400] ctj_:f64[7,400] ctk_:f64[7,400,400]
            ctl_:f64[7,400] ctm_:f64[7,400,400] ctn_:f64[7,54] cto_:f64[7,400,54]
            ctp_:f64[7,400] ctq_:f64[7,189,400] ctr_:f64[7,400] cts_:f64[7,400,400]
            ctt_:f64[7,400] ctu_:f64[7,400,400] ctv_:f64[7,400] ctw_:f64[7,400,400]
            ctx_:f64[7,54] cty_:f64[7,400,54]. let
            ctz:f64[200,1,7,180] = slice[
              limit_indices=(200, 1, 7, 180)
              start_indices=(0, 0, 0, 0)
              strides=None
            ] cmh
            cua:f64[200,7,180] = squeeze[dimensions=(1,)] ctz
            cub:f64[4,200,7,9] = transpose[permutation=(1, 0, 2, 3)] cmi
            cuc:f64[1,180] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 180)
            ] cmj
            cud:f64[1,1,180] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 180)
            ] cuc
            cue:f64[1,180] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 180)
            ] cmk
            cuf:f64[1,1,180] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 180)
            ] cue
            cug:f64[1,9] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 9)
            ] cml
            cuh:f64[1,1,9] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 9)
            ] cug
            cui:f64[1,9] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 9)
            ] cmm
            cuj:f64[1,1,9] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 9)
            ] cui
            cuk:f64[1,36] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(1, 36)
            ] 1.0
            cul:f64[1,36] = mul 0.5 cuk
            cum:f64[1,36] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(1, 36)
            ] 1.0
            cun:f64[1,36] = mul -10.0 cum
            cuo:f64[1,7,400] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 7, 400)
            ] cmn
            cup:f64[1,7,400] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 7, 400)
            ] cmo
            cuq:f64[1,7,400] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 7, 400)
            ] cmp
            cur:f64[1,7,400] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 7, 400)
            ] cmq
            cus:f64[1,7,54] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 7, 54)
            ] cmr
            cut:f64[1,1,36] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 36)
            ] cul
            cuu:f64[200,7,36] cuv:f64[] cuw:f64[200,7,36] = pjit[
              name=softplus
              jaxpr=softplus
            ]
            cux:f64[1,1,36] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 36)
            ] cul
            cuy:f64[1,1,36] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 36)
            ] cun
            cuz:f64[200,7,36] cva:f64[] cvb:f64[200,7,36] = pjit[
              name=softplus
              jaxpr=softplus
            ]
            cvc:f64[1,1,36] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 36)
            ] cun
            cvd:f64[36,1] = slice[
              limit_indices=(36, 2)
              start_indices=(0, 1)
              strides=None
            ] cms
            cve:f64[36] = squeeze[dimensions=(1,)] cvd
            cvf:f64[36,1] = slice[
              limit_indices=(36, 1)
              start_indices=(0, 0)
              strides=None
            ] cms
            cvg:f64[36] = squeeze[dimensions=(1,)] cvf
            cvh:f64[36] = sub cve cvg
            cvi:f64[1,36] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 36)
            ] cvh
            cvj:f64[1,1,36] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 36)
            ] cvi
            cvk:f64[36,1] = slice[
              limit_indices=(36, 1)
              start_indices=(0, 0)
              strides=None
            ] cms
            cvl:f64[36] = squeeze[dimensions=(1,)] cvk
            cvm:f64[1,36] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 36)
            ] cvl
            cvn:f64[1,1,36] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 36)
            ] cvm
            cvo:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 34
            cvp:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 35
            cvq:f64[36,1] = slice[
              limit_indices=(36, 1)
              start_indices=(0, 0)
              strides=None
            ] cms
            cvr:f64[36] = squeeze[dimensions=(1,)] cvq
            cvs:f64[1,36] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 36)
            ] cvr
            cvt:f64[1,1,36] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 36)
            ] cvs
            cvu:f64[36,1] = slice[
              limit_indices=(36, 2)
              start_indices=(0, 1)
              strides=None
            ] cms
            cvv:f64[36] = squeeze[dimensions=(1,)] cvu
            cvw:f64[36,1] = slice[
              limit_indices=(36, 1)
              start_indices=(0, 0)
              strides=None
            ] cms
            cvx:f64[36] = squeeze[dimensions=(1,)] cvw
            cvy:f64[36] = sub cvv cvx
            cvz:f64[1,36] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 36)
            ] cvy
            cwa:f64[1,1,36] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 36)
            ] cvz
            cwb:f64[9,1] = slice[
              limit_indices=(9, 2)
              start_indices=(0, 1)
              strides=None
            ] cmt
            cwc:f64[9] = squeeze[dimensions=(1,)] cwb
            cwd:f64[9,1] = slice[
              limit_indices=(9, 1)
              start_indices=(0, 0)
              strides=None
            ] cmt
            cwe:f64[9] = squeeze[dimensions=(1,)] cwd
            cwf:f64[9] = sub cwc cwe
            cwg:f64[1,9] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 9)
            ] cwf
            cwh:f64[1,1,9] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 9)
            ] cwg
            cwi:f64[9,1] = slice[
              limit_indices=(9, 2)
              start_indices=(0, 1)
              strides=None
            ] cmt
            cwj:f64[9] = squeeze[dimensions=(1,)] cwi
            cwk:f64[9,1] = slice[
              limit_indices=(9, 1)
              start_indices=(0, 0)
              strides=None
            ] cmt
            cwl:f64[9] = squeeze[dimensions=(1,)] cwk
            cwm:f64[9] = add cwj cwl
            cwn:f64[9] = div cwm 2.0
            cwo:f64[1,9] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 9)
            ] cwn
            cwp:f64[1,1,9] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 9)
            ] cwo
            cwq:f64[36,1] = slice[
              limit_indices=(36, 2)
              start_indices=(0, 1)
              strides=None
            ] cms
            cwr:f64[36] = squeeze[dimensions=(1,)] cwq
            cws:f64[36,1] = slice[
              limit_indices=(36, 1)
              start_indices=(0, 0)
              strides=None
            ] cms
            cwt:f64[36] = squeeze[dimensions=(1,)] cws
            cwu:f64[36] = sub cwr cwt
            cwv:f64[1,36] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 36)
            ] cwu
            cww:f64[1,1,36] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 36)
            ] cwv
            cwx:f64[36,1] = slice[
              limit_indices=(36, 1)
              start_indices=(0, 0)
              strides=None
            ] cms
            cwy:f64[36] = squeeze[dimensions=(1,)] cwx
            cwz:f64[1,36] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 36)
            ] cwy
            cxa:f64[1,1,36] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 36)
            ] cwz
            cxb:f64[36,1] = slice[
              limit_indices=(36, 2)
              start_indices=(0, 1)
              strides=None
            ] cms
            cxc:f64[36] = squeeze[dimensions=(1,)] cxb
            cxd:f64[36,1] = slice[
              limit_indices=(36, 1)
              start_indices=(0, 0)
              strides=None
            ] cms
            cxe:f64[36] = squeeze[dimensions=(1,)] cxd
            cxf:f64[36] = sub cxc cxe
            cxg:f64[1,36] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 36)
            ] cxf
            cxh:f64[1,1,36] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 36)
            ] cxg
            cxi:f64[36,1] = slice[
              limit_indices=(36, 1)
              start_indices=(0, 0)
              strides=None
            ] cms
            cxj:f64[36] = squeeze[dimensions=(1,)] cxi
            cxk:f64[1,36] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 36)
            ] cxj
            cxl:f64[1,1,36] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 36)
            ] cxk
            cxm:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 3
            cxn:f64[7,19] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(7, 19)
            ] cmu
            cxo:f64[200,7,19] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(200, 7, 19)
            ] cxn
            cxp:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 7
            cxq:i32[1] cxr:i32[1] cxs:i32[1] cxt:i32[1] cxu:i32[1] cxv:i32[1] = pjit[
              name=cross
              jaxpr=cross
            ]
            cxw:f64[4] = convert_element_type[new_dtype=float64 weak_type=False] cmv
            cxx:f64[1,4] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 4)
            ] cxw
            cxy:f64[1,1,4] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 4)
            ] cxx
            cxz:i32[1] cya:i32[1] cyb:i32[1] cyc:i32[1] cyd:i32[1] cye:i32[1] = pjit[
              name=cross
              jaxpr=cross
            ]
            cyf:f64[18] = broadcast_in_dim[broadcast_dimensions=() shape=(18,)] 0.0
            cyg:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            cyh:f64[7,18] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(7, 18)
            ] cyf
            cyi:f64[200,7,18] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(200, 7, 18)
            ] cyh
            cyj:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 3
            cyk:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 6
            cyl:f64[12,3] = slice[
              limit_indices=(18, 3)
              start_indices=(6, 0)
              strides=None
            ] cmw
            cym:f64[12,3] = slice[
              limit_indices=(18, 3)
              start_indices=(6, 0)
              strides=None
            ] cmx
            cyn:f64[12,1] = slice[
              limit_indices=(12, 1)
              start_indices=(0, 0)
              strides=None
            ] cyl
            cyo:f64[12] = squeeze[dimensions=(1,)] cyn
            cyp:f64[1,12] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 12)
            ] cyo
            cyq:f64[1,1,12] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 12)
            ] cyp
            cyr:f64[12,1] = slice[
              limit_indices=(12, 2)
              start_indices=(0, 1)
              strides=None
            ] cyl
            cys:f64[12] = squeeze[dimensions=(1,)] cyr
            cyt:f64[1,12] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 12)
            ] cys
            cyu:f64[1,1,12] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 12)
            ] cyt
            cyv:f64[12,1] = slice[
              limit_indices=(12, 3)
              start_indices=(0, 2)
              strides=None
            ] cyl
            cyw:f64[12] = squeeze[dimensions=(1,)] cyv
            cyx:f64[1,12] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 12)
            ] cyw
            cyy:f64[1,1,12] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 12)
            ] cyx
            cyz:f64[] cza:f64[] czb:bool[] czc:bool[] = pjit[
              name=allclose
              jaxpr={ lambda ; czd:f64[]. let
                  cze:f64[] czf:f64[] czg:bool[] czh:bool[] = pjit[
                    name=isclose
                    jaxpr={ lambda ; czi:f64[] czj:f64[] czk:f64[]. let
                        czl:f64[] = convert_element_type[
                          new_dtype=float64
                          weak_type=False
                        ] czi
                        czm:f64[] = convert_element_type[
                          new_dtype=float64
                          weak_type=False
                        ] czj
                        czn:f64[] = convert_element_type[
                          new_dtype=float64
                          weak_type=False
                        ] czk
                        czo:f64[] = abs czl
                        czp:f64[] = mul czm czo
                        czq:f64[] = add czn czp
                        czr:bool[] = pjit[name=isinf jaxpr=isinf] czl
                        czs:bool[] = ne czl czl
                      in (czl, czq, czr, czs) }
                  ] czd 1e-05 1e-08
                in (cze, czf, czg, czh) }
            ] 0.0
            czt:f64[4] = broadcast_in_dim[broadcast_dimensions=() shape=(4,)] 1.0
            czu:f64[200,7,12,4] = pjit[
              name=_where
              jaxpr={ lambda ; czv:f64[4]. let
                  czw:f64[12,4] = broadcast_in_dim[
                    broadcast_dimensions=(1,)
                    shape=(12, 4)
                  ] czv
                  czx:f64[7,12,4] = broadcast_in_dim[
                    broadcast_dimensions=(1, 2)
                    shape=(7, 12, 4)
                  ] czw
                  czy:f64[200,7,12,4] = broadcast_in_dim[
                    broadcast_dimensions=(1, 2, 3)
                    shape=(200, 7, 12, 4)
                  ] czx
                in (czy,) }
            ] czt
            czz:f64[200,7,12] = pjit[
              name=_where
              jaxpr={ lambda ; daa:f64[]. let
                  dab:f64[] = convert_element_type[
                    new_dtype=float64
                    weak_type=False
                  ] daa
                  dac:f64[12] = broadcast_in_dim[
                    broadcast_dimensions=()
                    shape=(12,)
                  ] dab
                  dad:f64[7,12] = broadcast_in_dim[
                    broadcast_dimensions=(1,)
                    shape=(7, 12)
                  ] dac
                  dae:f64[200,7,12] = broadcast_in_dim[
                    broadcast_dimensions=(1, 2)
                    shape=(200, 7, 12)
                  ] dad
                in (dae,) }
            ] 0.0
            daf:f64[1,12,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 12, 3)
            ] cym
            dag:f64[1,1,12,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(1, 1, 12, 3)
            ] daf
            dah:f64[1,12,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 12, 3)
            ] cyl
            dai:f64[1,1,12,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(1, 1, 12, 3)
            ] dah
            daj:f64[1,12,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 12, 3)
            ] cym
            dak:f64[1,1,12,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(1, 1, 12, 3)
            ] daj
            dal:i64[1] = pjit[name=_take jaxpr=_take] 0
            dam:i64[1] = pjit[
              name=_take
              jaxpr={ lambda ; dan:i64[]. let
                  dao:i64[] = pjit[name=remainder jaxpr=remainder1] dan 1
                  dap:i64[1] = broadcast_in_dim[
                    broadcast_dimensions=()
                    shape=(1,)
                  ] dao
                in (dap,) }
            ] 0
            daq:i64[1] = pjit[name=_take jaxpr=_take] 0
            dar:i64[1] = pjit[name=_take jaxpr=_take] 0
            das:f64[13,3] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(13, 3)
            ] 0.0
            dat:f64[1,13,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 13, 3)
            ] cmy
            dau:f64[1,1,13,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(1, 1, 13, 3)
            ] dat
            dav:i32[1] daw:f64[1,1,13] dax:i32[1] day:f64[1,1,13] daz:f64[1,1,13]
              dba:i32[1] dbb:f64[1,1,13] dbc:f64[1,1,13] dbd:f64[1,1,13] = pjit[
              name=cross
              jaxpr=cross1
            ] cmy
            dbe:f64[1,13,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 13, 3)
            ] das
            dbf:f64[1,1,13,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(1, 1, 13, 3)
            ] dbe
            dbg:f64[1,13,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 13, 3)
            ] cmy
            dbh:f64[1,1,13,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(1, 1, 13, 3)
            ] dbg
            dbi:f64[13,1] = slice[
              limit_indices=(13, 1)
              start_indices=(0, 0)
              strides=None
            ] cna
            dbj:f64[13] = squeeze[dimensions=(1,)] dbi
            dbk:f64[13,3] = slice[
              limit_indices=(13, 4)
              start_indices=(0, 1)
              strides=None
            ] cna
            dbl:f64[1,13,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 13, 3)
            ] dbk
            dbm:f64[1,1,13,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(1, 1, 13, 3)
            ] dbl
            dbn:f64[13] = mul dbj dbj
            dbo:f64[13] = dot_general[
              dimension_numbers=(([1], [1]), ([0], [0]))
              preferred_element_type=float64
            ] dbk dbk
            dbp:f64[13] = sub dbn dbo
            dbq:f64[13,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(13, 1)
            ] dbp
            dbr:f64[1,13,1] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 13, 1)
            ] dbq
            dbs:f64[1,1,13,1] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(1, 1, 13, 1)
            ] dbr
            dbt:f64[13] = mul 2.0 dbj
            dbu:f64[1,1,13] dbv:i32[1] dbw:f64[1,1,13] dbx:i32[1] dby:f64[1,1,13]
              dbz:i32[1] dca:f64[1,1,13] dcb:f64[1,1,13] dcc:f64[1,1,13] = pjit[
              name=cross
              jaxpr={ lambda ; dcd:f64[13,3]. let
                  dce:i32[1] = broadcast_in_dim[
                    broadcast_dimensions=()
                    shape=(1,)
                  ] 0
                  dcf:f64[13] = gather[
                    dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
                    fill_value=None
                    indices_are_sorted=True
                    mode=GatherScatterMode.PROMISE_IN_BOUNDS
                    slice_sizes=(13, 1)
                    unique_indices=True
                  ] dcd dce
                  dcg:i32[1] = broadcast_in_dim[
                    broadcast_dimensions=()
                    shape=(1,)
                  ] 1
                  dch:f64[13] = gather[
                    dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
                    fill_value=None
                    indices_are_sorted=True
                    mode=GatherScatterMode.PROMISE_IN_BOUNDS
                    slice_sizes=(13, 1)
                    unique_indices=True
                  ] dcd dcg
                  dci:i32[1] = broadcast_in_dim[
                    broadcast_dimensions=()
                    shape=(1,)
                  ] 2
                  dcj:f64[13] = gather[
                    dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
                    fill_value=None
                    indices_are_sorted=True
                    mode=GatherScatterMode.PROMISE_IN_BOUNDS
                    slice_sizes=(13, 1)
                    unique_indices=True
                  ] dcd dci
                  dck:i32[1] = broadcast_in_dim[
                    broadcast_dimensions=()
                    shape=(1,)
                  ] 0
                  dcl:i32[1] = broadcast_in_dim[
                    broadcast_dimensions=()
                    shape=(1,)
                  ] 1
                  dcm:i32[1] = broadcast_in_dim[
                    broadcast_dimensions=()
                    shape=(1,)
                  ] 2
                  dcn:f64[1,13] = broadcast_in_dim[
                    broadcast_dimensions=(1,)
                    shape=(1, 13)
                  ] dch
                  dco:f64[1,1,13] = broadcast_in_dim[
                    broadcast_dimensions=(1, 2)
                    shape=(1, 1, 13)
                  ] dcn
                  dcp:f64[1,13] = broadcast_in_dim[
                    broadcast_dimensions=(1,)
                    shape=(1, 13)
                  ] dcj
                  dcq:f64[1,1,13] = broadcast_in_dim[
                    broadcast_dimensions=(1, 2)
                    shape=(1, 1, 13)
                  ] dcp
                  dcr:f64[1,13] = broadcast_in_dim[
                    broadcast_dimensions=(1,)
                    shape=(1, 13)
                  ] dcj
                  dcs:f64[1,1,13] = broadcast_in_dim[
                    broadcast_dimensions=(1, 2)
                    shape=(1, 1, 13)
                  ] dcr
                  dct:f64[1,13] = broadcast_in_dim[
                    broadcast_dimensions=(1,)
                    shape=(1, 13)
                  ] dcf
                  dcu:f64[1,1,13] = broadcast_in_dim[
                    broadcast_dimensions=(1, 2)
                    shape=(1, 1, 13)
                  ] dct
                  dcv:f64[1,13] = broadcast_in_dim[
                    broadcast_dimensions=(1,)
                    shape=(1, 13)
                  ] dcf
                  dcw:f64[1,1,13] = broadcast_in_dim[
                    broadcast_dimensions=(1, 2)
                    shape=(1, 1, 13)
                  ] dcv
                  dcx:f64[1,13] = broadcast_in_dim[
                    broadcast_dimensions=(1,)
                    shape=(1, 13)
                  ] dch
                  dcy:f64[1,1,13] = broadcast_in_dim[
                    broadcast_dimensions=(1, 2)
                    shape=(1, 1, 13)
                  ] dcx
                in (dco, dcm, dcq, dcl, dcs, dck, dcu, dcw, dcy) }
            ] dbk
            dcz:f64[13,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(13, 1)
            ] dbt
            dda:f64[1,13,1] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 13, 1)
            ] dcz
            ddb:f64[1,1,13,1] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(1, 1, 13, 1)
            ] dda
            ddc:f64[1,13,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 13, 3)
            ] cnb
            ddd:f64[1,1,13,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(1, 1, 13, 3)
            ] ddc
            dde:f64[13,1] = slice[
              limit_indices=(13, 1)
              start_indices=(0, 0)
              strides=None
            ] cna
            ddf:f64[13] = squeeze[dimensions=(1,)] dde
            ddg:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] ddf
            ddh:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] ddg
            ddi:f64[13,1] = slice[
              limit_indices=(13, 2)
              start_indices=(0, 1)
              strides=None
            ] cna
            ddj:f64[13] = squeeze[dimensions=(1,)] ddi
            ddk:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] ddj
            ddl:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] ddk
            ddm:f64[13,1] = slice[
              limit_indices=(13, 3)
              start_indices=(0, 2)
              strides=None
            ] cna
            ddn:f64[13] = squeeze[dimensions=(1,)] ddm
            ddo:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] ddn
            ddp:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] ddo
            ddq:f64[13,1] = slice[
              limit_indices=(13, 4)
              start_indices=(0, 3)
              strides=None
            ] cna
            ddr:f64[13] = squeeze[dimensions=(1,)] ddq
            dds:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] ddr
            ddt:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dds
            ddu:f64[13,1] = slice[
              limit_indices=(13, 1)
              start_indices=(0, 0)
              strides=None
            ] cna
            ddv:f64[13] = squeeze[dimensions=(1,)] ddu
            ddw:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] ddv
            ddx:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] ddw
            ddy:f64[13,1] = slice[
              limit_indices=(13, 2)
              start_indices=(0, 1)
              strides=None
            ] cna
            ddz:f64[13] = squeeze[dimensions=(1,)] ddy
            dea:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] ddz
            deb:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dea
            dec:f64[13,1] = slice[
              limit_indices=(13, 3)
              start_indices=(0, 2)
              strides=None
            ] cna
            ded:f64[13] = squeeze[dimensions=(1,)] dec
            dee:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] ded
            def:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dee
            deg:f64[13,1] = slice[
              limit_indices=(13, 4)
              start_indices=(0, 3)
              strides=None
            ] cna
            deh:f64[13] = squeeze[dimensions=(1,)] deg
            dei:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] deh
            dej:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dei
            dek:f64[13,1] = slice[
              limit_indices=(13, 1)
              start_indices=(0, 0)
              strides=None
            ] cna
            del:f64[13] = squeeze[dimensions=(1,)] dek
            dem:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] del
            den:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dem
            deo:f64[13,1] = slice[
              limit_indices=(13, 2)
              start_indices=(0, 1)
              strides=None
            ] cna
            dep:f64[13] = squeeze[dimensions=(1,)] deo
            deq:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dep
            der:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] deq
            des:f64[13,1] = slice[
              limit_indices=(13, 3)
              start_indices=(0, 2)
              strides=None
            ] cna
            det:f64[13] = squeeze[dimensions=(1,)] des
            deu:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] det
            dev:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] deu
            dew:f64[13,1] = slice[
              limit_indices=(13, 4)
              start_indices=(0, 3)
              strides=None
            ] cna
            dex:f64[13] = squeeze[dimensions=(1,)] dew
            dey:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dex
            dez:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dey
            dfa:f64[13,1] = slice[
              limit_indices=(13, 1)
              start_indices=(0, 0)
              strides=None
            ] cna
            dfb:f64[13] = squeeze[dimensions=(1,)] dfa
            dfc:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dfb
            dfd:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dfc
            dfe:f64[13,1] = slice[
              limit_indices=(13, 2)
              start_indices=(0, 1)
              strides=None
            ] cna
            dff:f64[13] = squeeze[dimensions=(1,)] dfe
            dfg:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dff
            dfh:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dfg
            dfi:f64[13,1] = slice[
              limit_indices=(13, 3)
              start_indices=(0, 2)
              strides=None
            ] cna
            dfj:f64[13] = squeeze[dimensions=(1,)] dfi
            dfk:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dfj
            dfl:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dfk
            dfm:f64[13,1] = slice[
              limit_indices=(13, 4)
              start_indices=(0, 3)
              strides=None
            ] cna
            dfn:f64[13] = squeeze[dimensions=(1,)] dfm
            dfo:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dfn
            dfp:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dfo
            dfq:i32[1] dfr:i32[1] dfs:i32[1] dft:i32[1] dfu:i32[1] dfv:i32[1] = pjit[
              name=cross
              jaxpr={ lambda ; . let
                  dfw:i32[1] = broadcast_in_dim[
                    broadcast_dimensions=()
                    shape=(1,)
                  ] 0
                  dfx:i32[1] = broadcast_in_dim[
                    broadcast_dimensions=()
                    shape=(1,)
                  ] 1
                  dfy:i32[1] = broadcast_in_dim[
                    broadcast_dimensions=()
                    shape=(1,)
                  ] 2
                  dfz:i32[1] = broadcast_in_dim[
                    broadcast_dimensions=()
                    shape=(1,)
                  ] 0
                  dga:i32[1] = broadcast_in_dim[
                    broadcast_dimensions=()
                    shape=(1,)
                  ] 1
                  dgb:i32[1] = broadcast_in_dim[
                    broadcast_dimensions=()
                    shape=(1,)
                  ] 2
                in (dfx, dgb, dfy, dga, dfz, dfw) }
            ]
            dgc:i64[4,1] = pjit[name=_take jaxpr=_take1] cnc
            dgd:i64[4,1] = pjit[name=_take jaxpr=_take2] cnd
            dge:i64[4,1] = pjit[name=_take jaxpr=_take1] cne
            dgf:i64[4,1] = pjit[name=_take jaxpr=_take1] cnf
            dgg:i64[4,1] = pjit[name=_take jaxpr=_take3] cng
            dgh:i64[4,1] = pjit[
              name=_take
              jaxpr={ lambda ; dgi:i64[4]. let
                  dgj:i64[4] = pjit[name=remainder jaxpr=remainder2] dgi 1
                  dgk:i64[4,1] = broadcast_in_dim[
                    broadcast_dimensions=(0,)
                    shape=(4, 1)
                  ] dgj
                in (dgk,) }
            ] cnh
            dgl:i64[4,1] = pjit[name=_take jaxpr=_take3] cni
            dgm:i64[4,1] = pjit[name=_take jaxpr=_take3] cnj
            dgn:i32[1] dgo:i32[1] dgp:i32[1] dgq:i32[1] dgr:i32[1] dgs:i32[1] = pjit[
              name=cross
              jaxpr=cross2
            ]
            dgt:i32[1] dgu:i32[1] dgv:i32[1] dgw:i32[1] dgx:i32[1] dgy:i32[1] = pjit[
              name=cross
              jaxpr=cross2
            ]
            dgz:i32[1] dha:i32[1] dhb:i32[1] dhc:i32[1] dhd:i32[1] dhe:i32[1] = pjit[
              name=cross
              jaxpr=cross2
            ]
            dhf:i32[1] dhg:i32[1] dhh:i32[1] dhi:i32[1] dhj:i32[1] dhk:i32[1] = pjit[
              name=cross
              jaxpr=cross2
            ]
            dhl:i64[4,1] = pjit[name=_take jaxpr=_take1] cnk
            dhm:i64[4,1] = pjit[name=_take jaxpr=_take2] cnl
            dhn:i64[4,1] = pjit[name=_take jaxpr=_take1] cnm
            dho:i64[4,1] = pjit[name=_take jaxpr=_take1] cnn
            dhp:i32[1] dhq:i32[1] dhr:i32[1] dhs:i32[1] dht:i32[1] dhu:i32[1] = pjit[
              name=cross
              jaxpr=cross2
            ]
            dhv:i32[1] dhw:i32[1] dhx:i32[1] dhy:i32[1] dhz:i32[1] dia:i32[1] = pjit[
              name=cross
              jaxpr=cross2
            ]
            dib:i32[1] dic:i32[1] did:i32[1] die:i32[1] dif:i32[1] dig:i32[1] = pjit[
              name=cross
              jaxpr=cross2
            ]
            dih:i32[1] dii:i32[1] dij:i32[1] dik:i32[1] dil:i32[1] dim:i32[1] = pjit[
              name=cross
              jaxpr=cross2
            ]
            din:i64[4,1] = pjit[name=_take jaxpr=_take1] cno
            dio:i64[4,1] = pjit[name=_take jaxpr=_take2] cnp
            dip:i64[4,1] = pjit[name=_take jaxpr=_take1] cnq
            diq:i64[4,1] = pjit[name=_take jaxpr=_take1] cnr
            dir:i32[1] dis:i32[1] dit:i32[1] diu:i32[1] div:i32[1] diw:i32[1] = pjit[
              name=cross
              jaxpr=cross2
            ]
            dix:i32[1] diy:i32[1] diz:i32[1] dja:i32[1] djb:i32[1] djc:i32[1] = pjit[
              name=cross
              jaxpr=cross2
            ]
            djd:i32[1] dje:i32[1] djf:i32[1] djg:i32[1] djh:i32[1] dji:i32[1] = pjit[
              name=cross
              jaxpr=cross2
            ]
            djj:i32[1] djk:i32[1] djl:i32[1] djm:i32[1] djn:i32[1] djo:i32[1] = pjit[
              name=cross
              jaxpr=cross2
            ]
            djp:i64[13,1] = pjit[name=_take jaxpr=_take4] cns
            djq:i64[13,1] = pjit[
              name=_take
              jaxpr={ lambda ; djr:i64[13]. let
                  djs:i64[13] = pjit[name=remainder jaxpr=remainder3] djr 13
                  djt:i64[13,1] = broadcast_in_dim[
                    broadcast_dimensions=(0,)
                    shape=(13, 1)
                  ] djs
                in (djt,) }
            ] cnt
            dju:i64[13,1] = pjit[name=_take jaxpr=_take4] cnu
            djv:i64[13,1] = pjit[name=_take jaxpr=_take4] cnv
            djw:f64[] djx:f64[] djy:bool[] djz:bool[] = pjit[
              name=allclose
              jaxpr={ lambda ; dka:f64[]. let
                  dkb:f64[] dkc:f64[] dkd:bool[] dke:bool[] = pjit[
                    name=isclose
                    jaxpr={ lambda ; dkf:f64[] dkg:f64[] dkh:f64[]. let
                        dki:f64[] = convert_element_type[
                          new_dtype=float64
                          weak_type=False
                        ] dkf
                        dkj:f64[] = convert_element_type[
                          new_dtype=float64
                          weak_type=False
                        ] dkg
                        dkk:f64[] = convert_element_type[
                          new_dtype=float64
                          weak_type=False
                        ] dkh
                        dkl:f64[] = abs dki
                        dkm:f64[] = mul dkj dkl
                        dkn:f64[] = add dkk dkm
                        dko:bool[] = pjit[name=isinf jaxpr=isinf] dki
                        dkp:bool[] = ne dki dki
                      in (dki, dkn, dko, dkp) }
                  ] dka 1e-05 1e-08
                in (dkb, dkc, dkd, dke) }
            ] 0.0
            dkq:f64[4] = broadcast_in_dim[broadcast_dimensions=() shape=(4,)] 1.0
            dkr:f64[200,7,13,4] = pjit[
              name=_where
              jaxpr={ lambda ; dks:f64[4]. let
                  dkt:f64[13,4] = broadcast_in_dim[
                    broadcast_dimensions=(1,)
                    shape=(13, 4)
                  ] dks
                  dku:f64[7,13,4] = broadcast_in_dim[
                    broadcast_dimensions=(1, 2)
                    shape=(7, 13, 4)
                  ] dkt
                  dkv:f64[200,7,13,4] = broadcast_in_dim[
                    broadcast_dimensions=(1, 2, 3)
                    shape=(200, 7, 13, 4)
                  ] dku
                in (dkv,) }
            ] dkq
            dkw:f64[200,7,13] = pjit[
              name=_where
              jaxpr={ lambda ; dkx:f64[]. let
                  dky:f64[] = convert_element_type[
                    new_dtype=float64
                    weak_type=False
                  ] dkx
                  dkz:f64[13] = broadcast_in_dim[
                    broadcast_dimensions=()
                    shape=(13,)
                  ] dky
                  dla:f64[7,13] = broadcast_in_dim[
                    broadcast_dimensions=(1,)
                    shape=(7, 13)
                  ] dkz
                  dlb:f64[200,7,13] = broadcast_in_dim[
                    broadcast_dimensions=(1, 2)
                    shape=(200, 7, 13)
                  ] dla
                in (dlb,) }
            ] 0.0
            dlc:f64[1,13,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 13, 3)
            ] cnw
            dld:f64[1,1,13,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(1, 1, 13, 3)
            ] dlc
            dle:i32[1] dlf:f64[1,1,13] dlg:i32[1] dlh:f64[1,1,13] dli:f64[1,1,13]
              dlj:i32[1] dlk:f64[1,1,13] dll:f64[1,1,13] dlm:f64[1,1,13] = pjit[
              name=cross
              jaxpr=cross1
            ] cnw
            dln:f64[13,1] = slice[
              limit_indices=(13, 1)
              start_indices=(0, 0)
              strides=None
            ] cnx
            dlo:f64[13] = squeeze[dimensions=(1,)] dln
            dlp:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dlo
            dlq:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dlp
            dlr:f64[13,1] = slice[
              limit_indices=(13, 2)
              start_indices=(0, 1)
              strides=None
            ] cnx
            dls:f64[13] = squeeze[dimensions=(1,)] dlr
            dlt:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dls
            dlu:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dlt
            dlv:f64[13,1] = slice[
              limit_indices=(13, 3)
              start_indices=(0, 2)
              strides=None
            ] cnx
            dlw:f64[13] = squeeze[dimensions=(1,)] dlv
            dlx:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dlw
            dly:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dlx
            dlz:f64[13,1] = slice[
              limit_indices=(13, 4)
              start_indices=(0, 3)
              strides=None
            ] cnx
            dma:f64[13] = squeeze[dimensions=(1,)] dlz
            dmb:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dma
            dmc:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dmb
            dmd:f64[13,1] = slice[
              limit_indices=(13, 2)
              start_indices=(0, 1)
              strides=None
            ] cnx
            dme:f64[13] = squeeze[dimensions=(1,)] dmd
            dmf:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dme
            dmg:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dmf
            dmh:f64[13,1] = slice[
              limit_indices=(13, 1)
              start_indices=(0, 0)
              strides=None
            ] cnx
            dmi:f64[13] = squeeze[dimensions=(1,)] dmh
            dmj:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dmi
            dmk:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dmj
            dml:f64[13,1] = slice[
              limit_indices=(13, 4)
              start_indices=(0, 3)
              strides=None
            ] cnx
            dmm:f64[13] = squeeze[dimensions=(1,)] dml
            dmn:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dmm
            dmo:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dmn
            dmp:f64[13,1] = slice[
              limit_indices=(13, 3)
              start_indices=(0, 2)
              strides=None
            ] cnx
            dmq:f64[13] = squeeze[dimensions=(1,)] dmp
            dmr:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dmq
            dms:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dmr
            dmt:f64[13,1] = slice[
              limit_indices=(13, 3)
              start_indices=(0, 2)
              strides=None
            ] cnx
            dmu:f64[13] = squeeze[dimensions=(1,)] dmt
            dmv:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dmu
            dmw:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dmv
            dmx:f64[13,1] = slice[
              limit_indices=(13, 4)
              start_indices=(0, 3)
              strides=None
            ] cnx
            dmy:f64[13] = squeeze[dimensions=(1,)] dmx
            dmz:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dmy
            dna:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dmz
            dnb:f64[13,1] = slice[
              limit_indices=(13, 1)
              start_indices=(0, 0)
              strides=None
            ] cnx
            dnc:f64[13] = squeeze[dimensions=(1,)] dnb
            dnd:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dnc
            dne:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dnd
            dnf:f64[13,1] = slice[
              limit_indices=(13, 2)
              start_indices=(0, 1)
              strides=None
            ] cnx
            dng:f64[13] = squeeze[dimensions=(1,)] dnf
            dnh:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dng
            dni:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dnh
            dnj:f64[13,1] = slice[
              limit_indices=(13, 4)
              start_indices=(0, 3)
              strides=None
            ] cnx
            dnk:f64[13] = squeeze[dimensions=(1,)] dnj
            dnl:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dnk
            dnm:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dnl
            dnn:f64[13,1] = slice[
              limit_indices=(13, 3)
              start_indices=(0, 2)
              strides=None
            ] cnx
            dno:f64[13] = squeeze[dimensions=(1,)] dnn
            dnp:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dno
            dnq:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dnp
            dnr:f64[13,1] = slice[
              limit_indices=(13, 2)
              start_indices=(0, 1)
              strides=None
            ] cnx
            dns:f64[13] = squeeze[dimensions=(1,)] dnr
            dnt:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dns
            dnu:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dnt
            dnv:f64[13,1] = slice[
              limit_indices=(13, 1)
              start_indices=(0, 0)
              strides=None
            ] cnx
            dnw:f64[13] = squeeze[dimensions=(1,)] dnv
            dnx:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dnw
            dny:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dnx
            dnz:f64[13,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(13, 1)
            ] cny
            doa:f64[1,13,1] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 13, 1)
            ] dnz
            dob:f64[1,1,13,1] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(1, 1, 13, 1)
            ] doa
            doc:f64[13,3] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(13, 3)
            ] 0.0
            dod:i32[13,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(13, 1)
            ] cnz
            doe:f64[7,13,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(7, 13, 3)
            ] doc
            dof:f64[200,7,13,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(200, 7, 13, 3)
            ] doe
            dog:f64[13] = broadcast_in_dim[broadcast_dimensions=() shape=(13,)] 0.0
            doh:i32[13,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(13, 1)
            ] cnz
            doi:f64[13] = scatter-add[
              dimension_numbers=ScatterDimensionNumbers(update_window_dims=(), inserted_window_dims=(0,), scatter_dims_to_operand_dims=(0,))
              indices_are_sorted=False
              mode=GatherScatterMode.FILL_OR_DROP
              unique_indices=False
              update_consts=()
              update_jaxpr=jaxpr
            ] dog doh cny
            doj:bool[13] = lt cnz 0
            dok:i32[13] = add cnz 13
            dol:i32[13] = select_n doj cnz dok
            dom:i32[13,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(13, 1)
            ] dol
            don:bool[13] = lt cnz 0
            doo:i32[13] = add cnz 13
            dop:i32[13] = select_n don cnz doo
            doq:i32[13,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(13, 1)
            ] dop
            dor:f64[13] = gather[
              dimension_numbers=GatherDimensionNumbers(offset_dims=(), collapsed_slice_dims=(0,), start_index_map=(0,))
              fill_value=None
              indices_are_sorted=False
              mode=GatherScatterMode.PROMISE_IN_BOUNDS
              slice_sizes=(1,)
              unique_indices=False
            ] doi doq
            dos:f64[13,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(13, 1)
            ] dor
            dot:f64[1,13,1] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 13, 1)
            ] dos
            dou:f64[1,1,13,1] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(1, 1, 13, 1)
            ] dot
            dov:i64[3,3] = iota[dimension=0 dtype=int64 shape=(3, 3)]
            dow:i64[3,3] = iota[dimension=1 dtype=int64 shape=(3, 3)]
            dox:i64[3,3] = add dov 0
            doy:bool[3,3] = eq dox dow
            doz:f64[3,3] = convert_element_type[
              new_dtype=float64
              weak_type=False
            ] doy
            dpa:f64[3,3] = neg doz
            dpb:i32[1] dpc:f64[1,1,1,3] dpd:i32[1] dpe:f64[1,1,1,3] dpf:f64[1,1,1,3]
              dpg:i32[1] dph:f64[1,1,1,3] dpi:f64[1,1,1,3] dpj:f64[1,1,1,3] = pjit[
              name=cross
              jaxpr={ lambda ; dpk:f64[3,3]. let
                  dpl:i32[1] = broadcast_in_dim[
                    broadcast_dimensions=()
                    shape=(1,)
                  ] 0
                  dpm:i32[1] = broadcast_in_dim[
                    broadcast_dimensions=()
                    shape=(1,)
                  ] 1
                  dpn:i32[1] = broadcast_in_dim[
                    broadcast_dimensions=()
                    shape=(1,)
                  ] 2
                  dpo:f64[3,1] = slice[
                    limit_indices=(3, 1)
                    start_indices=(0, 0)
                    strides=None
                  ] dpk
                  dpp:f64[3] = squeeze[dimensions=(1,)] dpo
                  dpq:f64[3,1] = slice[
                    limit_indices=(3, 2)
                    start_indices=(0, 1)
                    strides=None
                  ] dpk
                  dpr:f64[3] = squeeze[dimensions=(1,)] dpq
                  dps:f64[3,1] = slice[
                    limit_indices=(3, 3)
                    start_indices=(0, 2)
                    strides=None
                  ] dpk
                  dpt:f64[3] = squeeze[dimensions=(1,)] dps
                  dpu:f64[1,3] = broadcast_in_dim[
                    broadcast_dimensions=(1,)
                    shape=(1, 3)
                  ] dpt
                  dpv:f64[1,1,3] = broadcast_in_dim[
                    broadcast_dimensions=(1, 2)
                    shape=(1, 1, 3)
                  ] dpu
                  dpw:f64[1,1,1,3] = broadcast_in_dim[
                    broadcast_dimensions=(1, 2, 3)
                    shape=(1, 1, 1, 3)
                  ] dpv
                  dpx:f64[1,3] = broadcast_in_dim[
                    broadcast_dimensions=(1,)
                    shape=(1, 3)
                  ] dpr
                  dpy:f64[1,1,3] = broadcast_in_dim[
                    broadcast_dimensions=(1, 2)
                    shape=(1, 1, 3)
                  ] dpx
                  dpz:f64[1,1,1,3] = broadcast_in_dim[
                    broadcast_dimensions=(1, 2, 3)
                    shape=(1, 1, 1, 3)
                  ] dpy
                  dqa:f64[1,3] = broadcast_in_dim[
                    broadcast_dimensions=(1,)
                    shape=(1, 3)
                  ] dpp
                  dqb:f64[1,1,3] = broadcast_in_dim[
                    broadcast_dimensions=(1, 2)
                    shape=(1, 1, 3)
                  ] dqa
                  dqc:f64[1,1,1,3] = broadcast_in_dim[
                    broadcast_dimensions=(1, 2, 3)
                    shape=(1, 1, 1, 3)
                  ] dqb
                  dqd:f64[1,3] = broadcast_in_dim[
                    broadcast_dimensions=(1,)
                    shape=(1, 3)
                  ] dpt
                  dqe:f64[1,1,3] = broadcast_in_dim[
                    broadcast_dimensions=(1, 2)
                    shape=(1, 1, 3)
                  ] dqd
                  dqf:f64[1,1,1,3] = broadcast_in_dim[
                    broadcast_dimensions=(1, 2, 3)
                    shape=(1, 1, 1, 3)
                  ] dqe
                  dqg:f64[1,3] = broadcast_in_dim[
                    broadcast_dimensions=(1,)
                    shape=(1, 3)
                  ] dpr
                  dqh:f64[1,1,3] = broadcast_in_dim[
                    broadcast_dimensions=(1, 2)
                    shape=(1, 1, 3)
                  ] dqg
                  dqi:f64[1,1,1,3] = broadcast_in_dim[
                    broadcast_dimensions=(1, 2, 3)
                    shape=(1, 1, 1, 3)
                  ] dqh
                  dqj:f64[1,3] = broadcast_in_dim[
                    broadcast_dimensions=(1,)
                    shape=(1, 3)
                  ] dpp
                  dqk:f64[1,1,3] = broadcast_in_dim[
                    broadcast_dimensions=(1, 2)
                    shape=(1, 1, 3)
                  ] dqj
                  dql:f64[1,1,1,3] = broadcast_in_dim[
                    broadcast_dimensions=(1, 2, 3)
                    shape=(1, 1, 1, 3)
                  ] dqk
                in (dpm, dpw, dpn, dpz, dqc, dpl, dqf, dqi, dql) }
            ] dpa
            dqm:f64[13,1,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(13, 1, 1)
            ] cny
            dqn:f64[1,13,1,1] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(1, 13, 1, 1)
            ] dqm
            dqo:f64[1,1,13,1,1] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3, 4)
              shape=(1, 1, 13, 1, 1)
            ] dqn
            dqp:f64[13,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(13, 1)
            ] cny
            dqq:f64[1,13,1] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 13, 1)
            ] dqp
            dqr:f64[1,1,13,1] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(1, 1, 13, 1)
            ] dqq
            dqs:f64[1,3] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(1, 3)
            ] 0.0
            dqt:f64[1,1,1,4] = reshape[dimensions=None new_sizes=(1, 1, 1, 4)] coa
            dqu:f64[1,4] = reshape[dimensions=None new_sizes=(1, 4)] dqt
            dqv:f64[7,1,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(7, 1, 3)
            ] dqs
            dqw:f64[200,7,1,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(200, 7, 1, 3)
            ] dqv
            dqx:f64[7,1,4] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(7, 1, 4)
            ] dqu
            dqy:f64[200,7,1,4] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(200, 7, 1, 4)
            ] dqx
            dqz:i32[13,1] = pjit[name=_take jaxpr=_take5] cob
            dra:i32[13,1] = pjit[
              name=_take
              jaxpr={ lambda ; drb:i32[13]. let
                  drc:i32[13] = pjit[name=remainder jaxpr=remainder4] drb 14
                  drd:i32[13,1] = broadcast_in_dim[
                    broadcast_dimensions=(0,)
                    shape=(13, 1)
                  ] drc
                in (drd,) }
            ] cob
            dre:f64[1,13,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 13, 3)
            ] cnb
            drf:f64[1,1,13,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(1, 1, 13, 3)
            ] dre
            drg:i32[1] drh:f64[1,1,13] dri:i32[1] drj:f64[1,1,13] drk:f64[1,1,13]
              drl:i32[1] drm:f64[1,1,13] drn:f64[1,1,13] dro:f64[1,1,13] = pjit[
              name=cross
              jaxpr=cross1
            ] cnb
            drp:f64[13,1] = slice[
              limit_indices=(13, 1)
              start_indices=(0, 0)
              strides=None
            ] cna
            drq:f64[13] = squeeze[dimensions=(1,)] drp
            drr:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] drq
            drs:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] drr
            drt:f64[13,1] = slice[
              limit_indices=(13, 2)
              start_indices=(0, 1)
              strides=None
            ] cna
            dru:f64[13] = squeeze[dimensions=(1,)] drt
            drv:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dru
            drw:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] drv
            drx:f64[13,1] = slice[
              limit_indices=(13, 3)
              start_indices=(0, 2)
              strides=None
            ] cna
            dry:f64[13] = squeeze[dimensions=(1,)] drx
            drz:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dry
            dsa:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] drz
            dsb:f64[13,1] = slice[
              limit_indices=(13, 4)
              start_indices=(0, 3)
              strides=None
            ] cna
            dsc:f64[13] = squeeze[dimensions=(1,)] dsb
            dsd:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dsc
            dse:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dsd
            dsf:f64[13,1] = slice[
              limit_indices=(13, 2)
              start_indices=(0, 1)
              strides=None
            ] cna
            dsg:f64[13] = squeeze[dimensions=(1,)] dsf
            dsh:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dsg
            dsi:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dsh
            dsj:f64[13,1] = slice[
              limit_indices=(13, 1)
              start_indices=(0, 0)
              strides=None
            ] cna
            dsk:f64[13] = squeeze[dimensions=(1,)] dsj
            dsl:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dsk
            dsm:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dsl
            dsn:f64[13,1] = slice[
              limit_indices=(13, 4)
              start_indices=(0, 3)
              strides=None
            ] cna
            dso:f64[13] = squeeze[dimensions=(1,)] dsn
            dsp:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dso
            dsq:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dsp
            dsr:f64[13,1] = slice[
              limit_indices=(13, 3)
              start_indices=(0, 2)
              strides=None
            ] cna
            dss:f64[13] = squeeze[dimensions=(1,)] dsr
            dst:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dss
            dsu:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dst
            dsv:f64[13,1] = slice[
              limit_indices=(13, 3)
              start_indices=(0, 2)
              strides=None
            ] cna
            dsw:f64[13] = squeeze[dimensions=(1,)] dsv
            dsx:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dsw
            dsy:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dsx
            dsz:f64[13,1] = slice[
              limit_indices=(13, 4)
              start_indices=(0, 3)
              strides=None
            ] cna
            dta:f64[13] = squeeze[dimensions=(1,)] dsz
            dtb:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dta
            dtc:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dtb
            dtd:f64[13,1] = slice[
              limit_indices=(13, 1)
              start_indices=(0, 0)
              strides=None
            ] cna
            dte:f64[13] = squeeze[dimensions=(1,)] dtd
            dtf:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dte
            dtg:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dtf
            dth:f64[13,1] = slice[
              limit_indices=(13, 2)
              start_indices=(0, 1)
              strides=None
            ] cna
            dti:f64[13] = squeeze[dimensions=(1,)] dth
            dtj:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dti
            dtk:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dtj
            dtl:f64[13,1] = slice[
              limit_indices=(13, 4)
              start_indices=(0, 3)
              strides=None
            ] cna
            dtm:f64[13] = squeeze[dimensions=(1,)] dtl
            dtn:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dtm
            dto:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dtn
            dtp:f64[13,1] = slice[
              limit_indices=(13, 3)
              start_indices=(0, 2)
              strides=None
            ] cna
            dtq:f64[13] = squeeze[dimensions=(1,)] dtp
            dtr:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dtq
            dts:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dtr
            dtt:f64[13,1] = slice[
              limit_indices=(13, 2)
              start_indices=(0, 1)
              strides=None
            ] cna
            dtu:f64[13] = squeeze[dimensions=(1,)] dtt
            dtv:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dtu
            dtw:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dtv
            dtx:f64[13,1] = slice[
              limit_indices=(13, 1)
              start_indices=(0, 0)
              strides=None
            ] cna
            dty:f64[13] = squeeze[dimensions=(1,)] dtx
            dtz:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dty
            dua:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dtz
            dub:f64[1,13,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 13, 3)
            ] cmy
            duc:f64[1,1,13,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(1, 1, 13, 3)
            ] dub
            dud:i32[1] due:f64[1,1,13] duf:i32[1] dug:f64[1,1,13] duh:f64[1,1,13]
              dui:i32[1] duj:f64[1,1,13] duk:f64[1,1,13] dul:f64[1,1,13] = pjit[
              name=cross
              jaxpr=cross1
            ] cmy
            dum:f64[13,1] = slice[
              limit_indices=(13, 1)
              start_indices=(0, 0)
              strides=None
            ] cmz
            dun:f64[13] = squeeze[dimensions=(1,)] dum
            duo:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dun
            dup:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] duo
            duq:f64[13,1] = slice[
              limit_indices=(13, 2)
              start_indices=(0, 1)
              strides=None
            ] cmz
            dur:f64[13] = squeeze[dimensions=(1,)] duq
            dus:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dur
            dut:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dus
            duu:f64[13,1] = slice[
              limit_indices=(13, 3)
              start_indices=(0, 2)
              strides=None
            ] cmz
            duv:f64[13] = squeeze[dimensions=(1,)] duu
            duw:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] duv
            dux:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] duw
            duy:f64[13,1] = slice[
              limit_indices=(13, 4)
              start_indices=(0, 3)
              strides=None
            ] cmz
            duz:f64[13] = squeeze[dimensions=(1,)] duy
            dva:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] duz
            dvb:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dva
            dvc:f64[13,1] = slice[
              limit_indices=(13, 2)
              start_indices=(0, 1)
              strides=None
            ] cmz
            dvd:f64[13] = squeeze[dimensions=(1,)] dvc
            dve:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dvd
            dvf:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dve
            dvg:f64[13,1] = slice[
              limit_indices=(13, 1)
              start_indices=(0, 0)
              strides=None
            ] cmz
            dvh:f64[13] = squeeze[dimensions=(1,)] dvg
            dvi:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dvh
            dvj:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dvi
            dvk:f64[13,1] = slice[
              limit_indices=(13, 4)
              start_indices=(0, 3)
              strides=None
            ] cmz
            dvl:f64[13] = squeeze[dimensions=(1,)] dvk
            dvm:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dvl
            dvn:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dvm
            dvo:f64[13,1] = slice[
              limit_indices=(13, 3)
              start_indices=(0, 2)
              strides=None
            ] cmz
            dvp:f64[13] = squeeze[dimensions=(1,)] dvo
            dvq:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dvp
            dvr:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dvq
            dvs:f64[13,1] = slice[
              limit_indices=(13, 3)
              start_indices=(0, 2)
              strides=None
            ] cmz
            dvt:f64[13] = squeeze[dimensions=(1,)] dvs
            dvu:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dvt
            dvv:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dvu
            dvw:f64[13,1] = slice[
              limit_indices=(13, 4)
              start_indices=(0, 3)
              strides=None
            ] cmz
            dvx:f64[13] = squeeze[dimensions=(1,)] dvw
            dvy:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dvx
            dvz:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dvy
            dwa:f64[13,1] = slice[
              limit_indices=(13, 1)
              start_indices=(0, 0)
              strides=None
            ] cmz
            dwb:f64[13] = squeeze[dimensions=(1,)] dwa
            dwc:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dwb
            dwd:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dwc
            dwe:f64[13,1] = slice[
              limit_indices=(13, 2)
              start_indices=(0, 1)
              strides=None
            ] cmz
            dwf:f64[13] = squeeze[dimensions=(1,)] dwe
            dwg:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dwf
            dwh:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dwg
            dwi:f64[13,1] = slice[
              limit_indices=(13, 4)
              start_indices=(0, 3)
              strides=None
            ] cmz
            dwj:f64[13] = squeeze[dimensions=(1,)] dwi
            dwk:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dwj
            dwl:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dwk
            dwm:f64[13,1] = slice[
              limit_indices=(13, 3)
              start_indices=(0, 2)
              strides=None
            ] cmz
            dwn:f64[13] = squeeze[dimensions=(1,)] dwm
            dwo:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dwn
            dwp:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dwo
            dwq:f64[13,1] = slice[
              limit_indices=(13, 2)
              start_indices=(0, 1)
              strides=None
            ] cmz
            dwr:f64[13] = squeeze[dimensions=(1,)] dwq
            dws:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dwr
            dwt:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dws
            dwu:f64[13,1] = slice[
              limit_indices=(13, 1)
              start_indices=(0, 0)
              strides=None
            ] cmz
            dwv:f64[13] = squeeze[dimensions=(1,)] dwu
            dww:f64[1,13] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 13)
            ] dwv
            dwx:f64[1,1,13] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 13)
            ] dww
            dwy:f64[6,3] = slice[
              limit_indices=(6, 3)
              start_indices=(0, 0)
              strides=None
            ] cmw
            dwz:f64[6,3] = slice[
              limit_indices=(6, 3)
              start_indices=(0, 0)
              strides=None
            ] cmx
            dxa:f64[12,3] = slice[
              limit_indices=(18, 3)
              start_indices=(6, 0)
              strides=None
            ] cmw
            dxb:f64[12,3] = slice[
              limit_indices=(18, 3)
              start_indices=(6, 0)
              strides=None
            ] cmx
            dxc:f64[12,1,3] = reshape[dimensions=None new_sizes=(12, 1, 3)] dxa
            dxd:f64[12,1,3] = reshape[dimensions=None new_sizes=(12, 1, 3)] dxb
            dxe:f64[12,3] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(12, 3)
            ] 0.0
            dxf:f64[1,1,1,4] = reshape[dimensions=None new_sizes=(1, 1, 1, 4)] coc
            dxg:f64[1,1,4] = squeeze[dimensions=(0,)] dxf
            dxh:f64[12,1,1,4] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(12, 1, 1, 4)
            ] dxg
            dxi:f64[12,4] = reshape[dimensions=None new_sizes=(12, 4)] dxh
            dxj:f64[12,3] = pjit[name=_take jaxpr=_take6] dxc 0
            dxk:f64[12,3] = pjit[name=_take jaxpr=_take6] dxd 0
            dxl:f64[12,1] = slice[
              limit_indices=(12, 1)
              start_indices=(0, 0)
              strides=None
            ] dxi
            dxm:f64[12] = squeeze[dimensions=(1,)] dxl
            dxn:f64[12,3] = slice[
              limit_indices=(12, 4)
              start_indices=(0, 1)
              strides=None
            ] dxi
            dxo:f64[12] = dot_general[
              dimension_numbers=(([1], [1]), ([0], [0]))
              preferred_element_type=float64
            ] dxn dxj
            dxp:f64[12,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(12, 1)
            ] dxo
            dxq:f64[12,3] = mul dxp dxn
            dxr:f64[12,3] = mul 2.0 dxq
            dxs:f64[12] = mul dxm dxm
            dxt:f64[12] = dot_general[
              dimension_numbers=(([1], [1]), ([0], [0]))
              preferred_element_type=float64
            ] dxn dxn
            dxu:f64[12] = sub dxs dxt
            dxv:f64[12,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(12, 1)
            ] dxu
            dxw:f64[12,3] = mul dxv dxj
            dxx:f64[12,3] = add dxr dxw
            dxy:f64[12] = mul 2.0 dxm
            dxz:f64[12,3] = pjit[name=cross jaxpr=cross3] dxn dxj
            dya:f64[12,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(12, 1)
            ] dxy
            dyb:f64[12,3] = mul dya dxz
            dyc:f64[12,3] = add dxx dyb
            dyd:f64[12,1] = slice[
              limit_indices=(12, 1)
              start_indices=(0, 0)
              strides=None
            ] dxi
            dye:f64[12] = squeeze[dimensions=(1,)] dyd
            dyf:f64[12,3] = slice[
              limit_indices=(12, 4)
              start_indices=(0, 1)
              strides=None
            ] dxi
            dyg:f64[12] = dot_general[
              dimension_numbers=(([1], [1]), ([0], [0]))
              preferred_element_type=float64
            ] dyf dxk
            dyh:f64[12,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(12, 1)
            ] dyg
            dyi:f64[12,3] = mul dyh dyf
            dyj:f64[12,3] = mul 2.0 dyi
            dyk:f64[12] = mul dye dye
            dyl:f64[12] = dot_general[
              dimension_numbers=(([1], [1]), ([0], [0]))
              preferred_element_type=float64
            ] dyf dyf
            dym:f64[12] = sub dyk dyl
            dyn:f64[12,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(12, 1)
            ] dym
            dyo:f64[12,3] = mul dyn dxk
            dyp:f64[12,3] = add dyj dyo
            dyq:f64[12] = mul 2.0 dye
            dyr:f64[12,3] = pjit[name=cross jaxpr=cross3] dyf dxk
            dys:f64[12,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(12, 1)
            ] dyq
            dyt:f64[12,3] = mul dys dyr
            dyu:f64[12,3] = add dyp dyt
            dyv:f64[12,3] = pjit[name=cross jaxpr=cross3] dxe dyc
            dyw:f64[12,3] = add dyu dyv
            dyx:f64[18,3] = concatenate[dimension=0] dwy dyc
            dyy:f64[18,3] = concatenate[dimension=0] dwz dyw
            dyz:i64[18,1] = pjit[
              name=_take
              jaxpr={ lambda ; dza:i64[18]. let
                  dzb:i64[18] = pjit[name=remainder jaxpr=remainder6] dza 13
                  dzc:i64[18,1] = broadcast_in_dim[
                    broadcast_dimensions=(0,)
                    shape=(18, 1)
                  ] dzb
                in (dzc,) }
            ] cod
            dzd:f64[1,18,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 18, 3)
            ] dyx
            dze:f64[1,1,18,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(1, 1, 18, 3)
            ] dzd
            dzf:i32[1] dzg:f64[1,1,18] dzh:i32[1] dzi:f64[1,1,18] dzj:f64[1,1,18]
              dzk:i32[1] dzl:f64[1,1,18] dzm:f64[1,1,18] dzn:f64[1,1,18] = pjit[
              name=cross
              jaxpr={ lambda ; dzo:f64[18,3]. let
                  dzp:i32[1] = broadcast_in_dim[
                    broadcast_dimensions=()
                    shape=(1,)
                  ] 0
                  dzq:i32[1] = broadcast_in_dim[
                    broadcast_dimensions=()
                    shape=(1,)
                  ] 1
                  dzr:i32[1] = broadcast_in_dim[
                    broadcast_dimensions=()
                    shape=(1,)
                  ] 2
                  dzs:i32[1] = broadcast_in_dim[
                    broadcast_dimensions=()
                    shape=(1,)
                  ] 0
                  dzt:f64[18] = gather[
                    dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
                    fill_value=None
                    indices_are_sorted=True
                    mode=GatherScatterMode.PROMISE_IN_BOUNDS
                    slice_sizes=(18, 1)
                    unique_indices=True
                  ] dzo dzs
                  dzu:i32[1] = broadcast_in_dim[
                    broadcast_dimensions=()
                    shape=(1,)
                  ] 1
                  dzv:f64[18] = gather[
                    dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
                    fill_value=None
                    indices_are_sorted=True
                    mode=GatherScatterMode.PROMISE_IN_BOUNDS
                    slice_sizes=(18, 1)
                    unique_indices=True
                  ] dzo dzu
                  dzw:i32[1] = broadcast_in_dim[
                    broadcast_dimensions=()
                    shape=(1,)
                  ] 2
                  dzx:f64[18] = gather[
                    dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
                    fill_value=None
                    indices_are_sorted=True
                    mode=GatherScatterMode.PROMISE_IN_BOUNDS
                    slice_sizes=(18, 1)
                    unique_indices=True
                  ] dzo dzw
                  dzy:f64[1,18] = broadcast_in_dim[
                    broadcast_dimensions=(1,)
                    shape=(1, 18)
                  ] dzx
                  dzz:f64[1,1,18] = broadcast_in_dim[
                    broadcast_dimensions=(1, 2)
                    shape=(1, 1, 18)
                  ] dzy
                  eaa:f64[1,18] = broadcast_in_dim[
                    broadcast_dimensions=(1,)
                    shape=(1, 18)
                  ] dzv
                  eab:f64[1,1,18] = broadcast_in_dim[
                    broadcast_dimensions=(1, 2)
                    shape=(1, 1, 18)
                  ] eaa
                  eac:f64[1,18] = broadcast_in_dim[
                    broadcast_dimensions=(1,)
                    shape=(1, 18)
                  ] dzt
                  ead:f64[1,1,18] = broadcast_in_dim[
                    broadcast_dimensions=(1, 2)
                    shape=(1, 1, 18)
                  ] eac
                  eae:f64[1,18] = broadcast_in_dim[
                    broadcast_dimensions=(1,)
                    shape=(1, 18)
                  ] dzx
                  eaf:f64[1,1,18] = broadcast_in_dim[
                    broadcast_dimensions=(1, 2)
                    shape=(1, 1, 18)
                  ] eae
                  eag:f64[1,18] = broadcast_in_dim[
                    broadcast_dimensions=(1,)
                    shape=(1, 18)
                  ] dzv
                  eah:f64[1,1,18] = broadcast_in_dim[
                    broadcast_dimensions=(1, 2)
                    shape=(1, 1, 18)
                  ] eag
                  eai:f64[1,18] = broadcast_in_dim[
                    broadcast_dimensions=(1,)
                    shape=(1, 18)
                  ] dzt
                  eaj:f64[1,1,18] = broadcast_in_dim[
                    broadcast_dimensions=(1, 2)
                    shape=(1, 1, 18)
                  ] eai
                in (dzq, dzz, dzr, eab, ead, dzp, eaf, eah, eaj) }
            ] dyx
            eak:f64[1,1,1,4] = reshape[dimensions=None new_sizes=(1, 1, 1, 4)] coe
            eal:f64[1,1,4] = squeeze[dimensions=(0,)] eak
            eam:f64[13,1,1,4] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(13, 1, 1, 4)
            ] eal
            ean:f64[13,4] = reshape[dimensions=None new_sizes=(13, 4)] eam
            eao:i64[18,1] = pjit[name=_take jaxpr=_take7] cof
            eap:f64[18,4] = pjit[
              name=_take
              jaxpr={ lambda ; eaq:f64[13,4] ear:i64[18]. let
                  eas:i64[18] = pjit[
                    name=remainder
                    jaxpr={ lambda ; fx:i64[18] fy:i64[]. let
                        fz:bool[] = eq fy 0
                        ga:i64[] = pjit[name=_where jaxpr=_where2] fz 1 fy
                        gb:i64[18] = rem fx ga
                        gc:bool[18] = ne gb 0
                        gd:bool[18] = lt gb 0
                        ge:bool[] = lt ga 0
                        gf:bool[18] = ne gd ge
                        gg:bool[18] = and gf gc
                        gh:i64[18] = add gb ga
                        gi:i64[18] = select_n gg gb gh
                      in (gi,) }
                  ] ear 13
                  eat:i64[18,1] = broadcast_in_dim[
                    broadcast_dimensions=(0,)
                    shape=(18, 1)
                  ] eas
                  eau:f64[18,4] = gather[
                    dimension_numbers=GatherDimensionNumbers(offset_dims=(1,), collapsed_slice_dims=(0,), start_index_map=(0,))
                    fill_value=None
                    indices_are_sorted=False
                    mode=GatherScatterMode.PROMISE_IN_BOUNDS
                    slice_sizes=(1, 4)
                    unique_indices=False
                  ] eaq eat
                in (eau,) }
            ] ean cof
            eav:f64[4] = convert_element_type[new_dtype=float64 weak_type=False] cog
            eaw:f64[1,4] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 4)
            ] eav
            eax:f64[18,4] = mul eap eaw
            eay:f64[18,1] = slice[
              limit_indices=(18, 1)
              start_indices=(0, 0)
              strides=None
            ] eax
            eaz:f64[18] = squeeze[dimensions=(1,)] eay
            eba:f64[18,3] = slice[
              limit_indices=(18, 4)
              start_indices=(0, 1)
              strides=None
            ] eax
            ebb:f64[1,18,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 18, 3)
            ] eba
            ebc:f64[1,1,18,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(1, 1, 18, 3)
            ] ebb
            ebd:f64[18] = mul eaz eaz
            ebe:f64[18] = dot_general[
              dimension_numbers=(([1], [1]), ([0], [0]))
              preferred_element_type=float64
            ] eba eba
            ebf:f64[18] = sub ebd ebe
            ebg:f64[18,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(18, 1)
            ] ebf
            ebh:f64[1,18,1] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 18, 1)
            ] ebg
            ebi:f64[1,1,18,1] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(1, 1, 18, 1)
            ] ebh
            ebj:f64[18] = mul 2.0 eaz
            ebk:f64[1,1,18] ebl:i32[1] ebm:f64[1,1,18] ebn:i32[1] ebo:f64[1,1,18]
              ebp:i32[1] ebq:f64[1,1,18] ebr:f64[1,1,18] ebs:f64[1,1,18] = pjit[
              name=cross
              jaxpr=cross4
            ] eba
            ebt:f64[18,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(18, 1)
            ] ebj
            ebu:f64[1,18,1] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 18, 1)
            ] ebt
            ebv:f64[1,1,18,1] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(1, 1, 18, 1)
            ] ebu
            ebw:i32[1] ebx:i32[1] eby:i32[1] ebz:i32[1] eca:i32[1] ecb:i32[1] = pjit[
              name=cross
              jaxpr=cross5
            ]
            ecc:f64[1,18,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 18, 3)
            ] dyy
            ecd:f64[1,1,18,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(1, 1, 18, 3)
            ] ecc
            ece:f64[18,1] = slice[
              limit_indices=(18, 1)
              start_indices=(0, 0)
              strides=None
            ] eax
            ecf:f64[18] = squeeze[dimensions=(1,)] ece
            ecg:f64[18,3] = slice[
              limit_indices=(18, 4)
              start_indices=(0, 1)
              strides=None
            ] eax
            ech:f64[1,18,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 18, 3)
            ] ecg
            eci:f64[1,1,18,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(1, 1, 18, 3)
            ] ech
            ecj:f64[18] = mul ecf ecf
            eck:f64[18] = dot_general[
              dimension_numbers=(([1], [1]), ([0], [0]))
              preferred_element_type=float64
            ] ecg ecg
            ecl:f64[18] = sub ecj eck
            ecm:f64[18,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(18, 1)
            ] ecl
            ecn:f64[1,18,1] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 18, 1)
            ] ecm
            eco:f64[1,1,18,1] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(1, 1, 18, 1)
            ] ecn
            ecp:f64[18] = mul 2.0 ecf
            ecq:f64[1,1,18] ecr:i32[1] ecs:f64[1,1,18] ect:i32[1] ecu:f64[1,1,18]
              ecv:i32[1] ecw:f64[1,1,18] ecx:f64[1,1,18] ecy:f64[1,1,18] = pjit[
              name=cross
              jaxpr=cross4
            ] ecg
            ecz:f64[18,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(18, 1)
            ] ecp
            eda:f64[1,18,1] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 18, 1)
            ] ecz
            edb:f64[1,1,18,1] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(1, 1, 18, 1)
            ] eda
            edc:i64[6] = slice[
              limit_indices=(6,)
              start_indices=(0,)
              strides=None
            ] coh
            edd:f64[1,3] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(1, 3)
            ] 0.0
            ede:f64[1,3] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(1, 3)
            ] 0.0
            edf:bool[6] = lt edc 0
            edg:i64[6] = add edc 1
            edh:i64[6] = select_n edf edc edg
            edi:i32[6] = convert_element_type[new_dtype=int32 weak_type=False] edh
            edj:i32[6,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(6, 1)
            ] edi
            edk:f64[7,1,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(7, 1, 3)
            ] edd
            edl:f64[200,7,1,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(200, 7, 1, 3)
            ] edk
            edm:bool[6] = lt edc 0
            edn:i64[6] = add edc 1
            edo:i64[6] = select_n edm edc edn
            edp:i32[6] = convert_element_type[new_dtype=int32 weak_type=False] edo
            edq:i32[6,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(6, 1)
            ] edp
            edr:f64[7,1,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(7, 1, 3)
            ] ede
            eds:f64[200,7,1,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(200, 7, 1, 3)
            ] edr
            edt:i64[4,1] = pjit[name=_take jaxpr=_take8] coi
            edu:i64[4,1] = pjit[name=_take jaxpr=_take8] coj
            edv:i64[4] = pjit[name=_take jaxpr=_take9] coh cok
            edw:i64[4,1] = pjit[name=_take jaxpr=_take3] col
            edx:i64[4,1] = pjit[name=_take jaxpr=_take3] com
            edy:bool[4] = lt edv 0
            edz:i64[4] = add edv 4
            eea:i64[4] = select_n edy edv edz
            eeb:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] eea
            eec:i32[4,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(4, 1)
            ] eeb
            eed:bool[4] = lt edv 0
            eee:i64[4] = add edv 4
            eef:i64[4] = select_n eed edv eee
            eeg:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] eef
            eeh:i32[4,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(4, 1)
            ] eeg
            eei:i64[4,1] = pjit[name=_take jaxpr=_take8] con
            eej:i64[4,1] = pjit[name=_take jaxpr=_take8] coo
            eek:i64[4] = pjit[name=_take jaxpr=_take9] coh cop
            eel:bool[4] = lt eek 0
            eem:i64[4] = add eek 4
            een:i64[4] = select_n eel eek eem
            eeo:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] een
            eep:i32[4,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(4, 1)
            ] eeo
            eeq:bool[4] = lt eek 0
            eer:i64[4] = add eek 4
            ees:i64[4] = select_n eeq eek eer
            eet:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] ees
            eeu:i32[4,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(4, 1)
            ] eet
            eev:i64[4,1] = pjit[name=_take jaxpr=_take8] coq
            eew:i64[4,1] = pjit[name=_take jaxpr=_take8] cor
            eex:i64[4] = pjit[name=_take jaxpr=_take9] coh cos
            eey:bool[4] = lt eex 0
            eez:i64[4] = add eex 4
            efa:i64[4] = select_n eey eex eez
            efb:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] efa
            efc:i32[4,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(4, 1)
            ] efb
            efd:bool[4] = lt eex 0
            efe:i64[4] = add eex 4
            eff:i64[4] = select_n efd eex efe
            efg:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] eff
            efh:i32[4,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(4, 1)
            ] efg
            efi:i64[13,1] = pjit[name=_take jaxpr=_take4] cot
            efj:i64[13,1] = pjit[name=_take jaxpr=_take4] cou
            efk:f64[1,3] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(1, 3)
            ] 0.0
            efl:f64[1,3] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(1, 3)
            ] 0.0
            efm:f64[7,1,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(7, 1, 3)
            ] efk
            efn:f64[200,7,1,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(200, 7, 1, 3)
            ] efm
            efo:f64[7,1,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(7, 1, 3)
            ] efl
            efp:f64[200,7,1,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(200, 7, 1, 3)
            ] efo
            efq:i32[13,1] = pjit[name=_take jaxpr=_take5] cob
            efr:i32[13,1] = pjit[name=_take jaxpr=_take5] cob
            efs:i32[1] eft:i32[1] efu:i32[1] efv:i32[1] efw:i32[1] efx:i32[1] = pjit[
              name=cross
              jaxpr=cross6
            ]
            efy:i32[1] efz:i32[1] ega:i32[1] egb:i32[1] egc:i32[1] egd:i32[1] = pjit[
              name=cross
              jaxpr=cross6
            ]
            ege:i32[1] egf:i32[1] egg:i32[1] egh:i32[1] egi:i32[1] egj:i32[1] = pjit[
              name=cross
              jaxpr=cross6
            ]
            egk:f64[3] = broadcast_in_dim[broadcast_dimensions=() shape=(3,)] 0.0
            egl:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            egm:f64[1,3,3] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 3, 3)
            ] egk
            egn:f64[7,1,3,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(7, 1, 3, 3)
            ] egm
            ego:f64[200,7,1,3,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3, 4)
              shape=(200, 7, 1, 3, 3)
            ] egn
            egp:f64[3] = broadcast_in_dim[broadcast_dimensions=() shape=(3,)] 0.0
            egq:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            egr:f64[1,3,3] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 3, 3)
            ] egp
            egs:f64[7,1,3,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(7, 1, 3, 3)
            ] egr
            egt:f64[200,7,1,3,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3, 4)
              shape=(200, 7, 1, 3, 3)
            ] egs
            egu:i32[1] egv:i32[1] egw:i32[1] egx:i32[1] egy:i32[1] egz:i32[1] = pjit[
              name=cross
              jaxpr=cross7
            ]
            eha:i32[1] ehb:i32[1] ehc:i32[1] ehd:i32[1] ehe:i32[1] ehf:i32[1] = pjit[
              name=cross
              jaxpr=cross7
            ]
            ehg:i32[1] ehh:i32[1] ehi:i32[1] ehj:i32[1] ehk:i32[1] ehl:i32[1] = pjit[
              name=cross
              jaxpr=cross7
            ]
            ehm:i64[4,1] = pjit[name=_take jaxpr=_take1] cov
            ehn:i64[4,1] = pjit[name=_take jaxpr=_take10] cow
            eho:f64[4] = pjit[name=_take jaxpr=_take11] cny cox
            ehp:i64[4,1] = pjit[name=_take jaxpr=_take1] coy
            ehq:i64[4,1] = pjit[name=_take jaxpr=_take10] coz
            ehr:f64[4] = pjit[name=_take jaxpr=_take11] cny cpa
            ehs:f64[4,3] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(4, 3)
            ] 0.0
            eht:bool[4] = lt cpb 0
            ehu:i64[4] = add cpb 4
            ehv:i64[4] = select_n eht cpb ehu
            ehw:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] ehv
            ehx:i32[4,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(4, 1)
            ] ehw
            ehy:f64[7,4,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(7, 4, 3)
            ] ehs
            ehz:f64[200,7,4,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(200, 7, 4, 3)
            ] ehy
            eia:f64[4,3,3] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(4, 3, 3)
            ] 0.0
            eib:bool[4] = lt cpb 0
            eic:i64[4] = add cpb 4
            eid:i64[4] = select_n eib cpb eic
            eie:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] eid
            eif:i32[4,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(4, 1)
            ] eie
            eig:f64[7,4,3,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(7, 4, 3, 3)
            ] eia
            eih:f64[200,7,4,3,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3, 4)
              shape=(200, 7, 4, 3, 3)
            ] eig
            eii:f64[4] = broadcast_in_dim[broadcast_dimensions=() shape=(4,)] 0.0
            eij:bool[4] = lt cpb 0
            eik:i64[4] = add cpb 4
            eil:i64[4] = select_n eij cpb eik
            eim:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] eil
            ein:i32[4,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(4, 1)
            ] eim
            eio:f64[4] = scatter-add[
              dimension_numbers=ScatterDimensionNumbers(update_window_dims=(), inserted_window_dims=(0,), scatter_dims_to_operand_dims=(0,))
              indices_are_sorted=False
              mode=GatherScatterMode.FILL_OR_DROP
              unique_indices=False
              update_consts=()
              update_jaxpr=jaxpr
            ] eii ein eho
            eip:f64[4] = add ehr eio
            eiq:i64[4,1] = pjit[name=_take jaxpr=_take1] cpc
            eir:i64[4,1] = pjit[name=_take jaxpr=_take10] cpd
            eis:f64[4] = pjit[name=_take jaxpr=_take11] cny cpe
            eit:f64[4,3] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(4, 3)
            ] 0.0
            eiu:bool[4] = lt cpf 0
            eiv:i64[4] = add cpf 4
            eiw:i64[4] = select_n eiu cpf eiv
            eix:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] eiw
            eiy:i32[4,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(4, 1)
            ] eix
            eiz:f64[7,4,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(7, 4, 3)
            ] eit
            eja:f64[200,7,4,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(200, 7, 4, 3)
            ] eiz
            ejb:f64[4,3,3] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(4, 3, 3)
            ] 0.0
            ejc:bool[4] = lt cpf 0
            ejd:i64[4] = add cpf 4
            eje:i64[4] = select_n ejc cpf ejd
            ejf:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] eje
            ejg:i32[4,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(4, 1)
            ] ejf
            ejh:f64[7,4,3,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(7, 4, 3, 3)
            ] ejb
            eji:f64[200,7,4,3,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3, 4)
              shape=(200, 7, 4, 3, 3)
            ] ejh
            ejj:f64[4] = broadcast_in_dim[broadcast_dimensions=() shape=(4,)] 0.0
            ejk:bool[4] = lt cpf 0
            ejl:i64[4] = add cpf 4
            ejm:i64[4] = select_n ejk cpf ejl
            ejn:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] ejm
            ejo:i32[4,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(4, 1)
            ] ejn
            ejp:f64[4] = scatter-add[
              dimension_numbers=ScatterDimensionNumbers(update_window_dims=(), inserted_window_dims=(0,), scatter_dims_to_operand_dims=(0,))
              indices_are_sorted=False
              mode=GatherScatterMode.FILL_OR_DROP
              unique_indices=False
              update_consts=()
              update_jaxpr=jaxpr
            ] ejj ejo eip
            ejq:f64[4] = add eis ejp
            ejr:f64[1] = slice[
              limit_indices=(1,)
              start_indices=(0,)
              strides=None
            ] cny
            ejs:f64[1,3] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(1, 3)
            ] 0.0
            ejt:bool[4] = lt cpg 0
            eju:i64[4] = add cpg 1
            ejv:i64[4] = select_n ejt cpg eju
            ejw:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] ejv
            ejx:i32[4,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(4, 1)
            ] ejw
            ejy:f64[7,1,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(7, 1, 3)
            ] ejs
            ejz:f64[200,7,1,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(200, 7, 1, 3)
            ] ejy
            eka:f64[1,3,3] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(1, 3, 3)
            ] 0.0
            ekb:bool[4] = lt cpg 0
            ekc:i64[4] = add cpg 1
            ekd:i64[4] = select_n ekb cpg ekc
            eke:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] ekd
            ekf:i32[4,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(4, 1)
            ] eke
            ekg:f64[7,1,3,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(7, 1, 3, 3)
            ] eka
            ekh:f64[200,7,1,3,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3, 4)
              shape=(200, 7, 1, 3, 3)
            ] ekg
            eki:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0.0
            ekj:bool[4] = lt cpg 0
            ekk:i64[4] = add cpg 1
            ekl:i64[4] = select_n ekj cpg ekk
            ekm:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] ekl
            ekn:i32[4,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(4, 1)
            ] ekm
            eko:f64[1] = scatter-add[
              dimension_numbers=ScatterDimensionNumbers(update_window_dims=(), inserted_window_dims=(0,), scatter_dims_to_operand_dims=(0,))
              indices_are_sorted=False
              mode=GatherScatterMode.FILL_OR_DROP
              unique_indices=False
              update_consts=()
              update_jaxpr=jaxpr
            ] eki ekn ejq
            ekp:f64[1] = add ejr eko
            ekq:f64[13] = concatenate[dimension=0] ekp ejq eip eho
            ekr:i64[13,1] = pjit[name=_take jaxpr=_take4] cph
            eks:i64[13,1] = pjit[
              name=_take
              jaxpr={ lambda ; ekt:i64[13]. let
                  eku:i64[13] = pjit[name=remainder jaxpr=remainder3] ekt 13
                  ekv:i64[13,1] = broadcast_in_dim[
                    broadcast_dimensions=(0,)
                    shape=(13, 1)
                  ] eku
                in (ekv,) }
            ] cpi
            ekw:f64[13] = pjit[
              name=_take
              jaxpr={ lambda ; ekx:f64[13] eky:i64[13]. let
                  ekz:i64[13] = pjit[
                    name=remainder
                    jaxpr={ lambda ; dg:i64[13] dh:i64[]. let
                        di:bool[] = eq dh 0
                        dj:i64[] = pjit[name=_where jaxpr=_where2] di 1 dh
                        dk:i64[13] = rem dg dj
                        dl:bool[13] = ne dk 0
                        dm:bool[13] = lt dk 0
                        dn:bool[] = lt dj 0
                        do:bool[13] = ne dm dn
                        dp:bool[13] = and do dl
                        dq:i64[13] = add dk dj
                        dr:i64[13] = select_n dp dk dq
                      in (dr,) }
                  ] eky 13
                  ela:i64[13,1] = broadcast_in_dim[
                    broadcast_dimensions=(0,)
                    shape=(13, 1)
                  ] ekz
                  elb:f64[13] = gather[
                    dimension_numbers=GatherDimensionNumbers(offset_dims=(), collapsed_slice_dims=(0,), start_index_map=(0,))
                    fill_value=None
                    indices_are_sorted=False
                    mode=GatherScatterMode.PROMISE_IN_BOUNDS
                    slice_sizes=(1,)
                    unique_indices=False
                  ] ekx ela
                in (elb,) }
            ] ekq cpj
            elc:i64[18,1] = pjit[
              name=_take
              jaxpr={ lambda ; eld:i64[18]. let
                  ele:i64[18] = pjit[name=remainder jaxpr=remainder8] eld 13
                  elf:i64[18,1] = broadcast_in_dim[
                    broadcast_dimensions=(0,)
                    shape=(18, 1)
                  ] ele
                in (elf,) }
            ] cpk
            elg:i64[18,1] = pjit[
              name=_take
              jaxpr={ lambda ; elh:i64[18]. let
                  eli:i64[18] = pjit[name=remainder jaxpr=remainder8] elh 13
                  elj:i64[18,1] = broadcast_in_dim[
                    broadcast_dimensions=(0,)
                    shape=(18, 1)
                  ] eli
                in (elj,) }
            ] cpk
            elk:f64[18] = pjit[
              name=_take
              jaxpr={ lambda ; ell:f64[13] elm:i64[18]. let
                  eln:i64[18] = pjit[
                    name=remainder
                    jaxpr={ lambda ; kc:i64[18] kd:i64[]. let
                        ke:bool[] = eq kd 0
                        kf:i64[] = pjit[name=_where jaxpr=_where4] ke 1 kd
                        kg:i64[18] = rem kc kf
                        kh:bool[18] = ne kg 0
                        ki:bool[18] = lt kg 0
                        kj:bool[] = lt kf 0
                        kk:bool[18] = ne ki kj
                        kl:bool[18] = and kk kh
                        km:i64[18] = add kg kf
                        kn:i64[18] = select_n kl kg km
                      in (kn,) }
                  ] elm 13
                  elo:i64[18,1] = broadcast_in_dim[
                    broadcast_dimensions=(0,)
                    shape=(18, 1)
                  ] eln
                  elp:f64[18] = gather[
                    dimension_numbers=GatherDimensionNumbers(offset_dims=(), collapsed_slice_dims=(0,), start_index_map=(0,))
                    fill_value=None
                    indices_are_sorted=False
                    mode=GatherScatterMode.PROMISE_IN_BOUNDS
                    slice_sizes=(1,)
                    unique_indices=False
                  ] ell elo
                in (elp,) }
            ] ekw cpk
            elq:i32[1] elr:i32[1] els:i32[1] elt:i32[1] elu:i32[1] elv:i32[1] = pjit[
              name=cross
              jaxpr=cross5
            ]
            elw:f64[18,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(18, 1)
            ] elk
            elx:f64[1,18,1] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 18, 1)
            ] elw
            ely:f64[1,1,18,1] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(1, 1, 18, 1)
            ] elx
            elz:i32[1] ema:i32[1] emb:i32[1] emc:i32[1] emd:i32[1] eme:i32[1] = pjit[
              name=cross
              jaxpr=cross5
            ]
            emf:f64[18,18] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(18, 18)
            ] 0.0
            emg:bool[132] = lt cpl 0
            emh:i64[132] = add cpl 18
            emi:i64[132] = select_n emg cpl emh
            emj:bool[132] = lt cpm 0
            emk:i64[132] = add cpm 18
            eml:i64[132] = select_n emj cpm emk
            emm:i32[132] = convert_element_type[new_dtype=int32 weak_type=False] emi
            emn:i32[132] = convert_element_type[new_dtype=int32 weak_type=False] eml
            emo:i32[132,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(132, 1)
            ] emm
            emp:i32[132,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(132, 1)
            ] emn
            emq:i32[132,2] = concatenate[dimension=1] emo emp
            emr:f64[132] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(132,)
            ] 1.0
            ems:f64[18,18] = scatter[
              dimension_numbers=ScatterDimensionNumbers(update_window_dims=(), inserted_window_dims=(0, 1), scatter_dims_to_operand_dims=(0, 1))
              indices_are_sorted=False
              mode=GatherScatterMode.FILL_OR_DROP
              unique_indices=False
              update_consts=()
              update_jaxpr=None
            ] emf emq emr
            emt:f64[1,18,18] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 18, 18)
            ] ems
            emu:f64[1,1,18,18] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(1, 1, 18, 18)
            ] emt
            emv:bool[200,7,18,18] emw:f64[200,7,18,18] = pjit[
              name=tril
              jaxpr={ lambda ; . let
                  emx:i32[18,18] = iota[dimension=0 dtype=int32 shape=(18, 18)]
                  emy:i32[18,18] = add emx 0
                  emz:i32[18,18] = iota[dimension=1 dtype=int32 shape=(18, 18)]
                  ena:bool[18,18] = ge emy emz
                  enb:f64[18,18] = broadcast_in_dim[
                    broadcast_dimensions=()
                    shape=(18, 18)
                  ] 0.0
                  enc:bool[7,18,18] = broadcast_in_dim[
                    broadcast_dimensions=(1, 2)
                    shape=(7, 18, 18)
                  ] ena
                  end:f64[7,18,18] = broadcast_in_dim[
                    broadcast_dimensions=(1, 2)
                    shape=(7, 18, 18)
                  ] enb
                  ene:bool[200,7,18,18] = broadcast_in_dim[
                    broadcast_dimensions=(1, 2, 3)
                    shape=(200, 7, 18, 18)
                  ] enc
                  enf:f64[200,7,18,18] = broadcast_in_dim[
                    broadcast_dimensions=(1, 2, 3)
                    shape=(200, 7, 18, 18)
                  ] end
                in (ene, enf) }
            ]
            eng:bool[200,7,18,18] enh:f64[200,7,18,18] = pjit[
              name=tril
              jaxpr={ lambda ; . let
                  eni:i32[18,18] = iota[dimension=0 dtype=int32 shape=(18, 18)]
                  enj:i32[18,18] = add eni -1
                  enk:i32[18,18] = iota[dimension=1 dtype=int32 shape=(18, 18)]
                  enl:bool[18,18] = ge enj enk
                  enm:f64[18,18] = broadcast_in_dim[
                    broadcast_dimensions=()
                    shape=(18, 18)
                  ] 0.0
                  enn:bool[7,18,18] = broadcast_in_dim[
                    broadcast_dimensions=(1, 2)
                    shape=(7, 18, 18)
                  ] enl
                  eno:f64[7,18,18] = broadcast_in_dim[
                    broadcast_dimensions=(1, 2)
                    shape=(7, 18, 18)
                  ] enm
                  enp:bool[200,7,18,18] = broadcast_in_dim[
                    broadcast_dimensions=(1, 2, 3)
                    shape=(200, 7, 18, 18)
                  ] enn
                  enq:f64[200,7,18,18] = broadcast_in_dim[
                    broadcast_dimensions=(1, 2, 3)
                    shape=(200, 7, 18, 18)
                  ] eno
                in (enp, enq) }
            ]
            enr:f64[18,18] = pjit[
              name=_diag
              jaxpr={ lambda ; ens:f64[18]. let
                  ent:f64[18] = pad[padding_config=((0, 0, 0),)] ens 0.0
                  enu:i64[18,18] = iota[dimension=0 dtype=int64 shape=(18, 18)]
                  env:i64[18,18] = iota[dimension=1 dtype=int64 shape=(18, 18)]
                  enw:i64[18,18] = add enu 0
                  enx:bool[18,18] = eq enw env
                  eny:f64[18] = broadcast_in_dim[
                    broadcast_dimensions=()
                    shape=(18,)
                  ] 0.0
                  enz:f64[18,18] = pjit[name=_where jaxpr=_where] enx ent eny
                in (enz,) }
            ] cpn
            eoa:f64[1,18,18] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 18, 18)
            ] enr
            eob:f64[1,1,18,18] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(1, 1, 18, 18)
            ] eoa
            eoc:i64[18,18] = iota[dimension=0 dtype=int64 shape=(18, 18)]
            eod:i64[18,18] = iota[dimension=1 dtype=int64 shape=(18, 18)]
            eoe:i64[18,18] = add eoc 0
            eof:bool[18,18] = eq eoe eod
            eog:f64[18,18] = convert_element_type[
              new_dtype=float64
              weak_type=False
            ] eof
            eoh:bool[200,7,18,18] eoi:f64[200,7,18,18] eoj:bool[200,7,18,18] eok:f64[200,7,18,18]
              eol:bool[200,7,18,18] eom:f64[200,7,18,18] eon:f64[200,7,18,18] = pjit[
              name=_solve
              jaxpr={ lambda ; eoo:f64[18,18]. let
                  eop:bool[200,7,18,18] eoq:f64[200,7,18,18] eor:bool[200,7,18,18]
                    eos:f64[200,7,18,18] eot:bool[200,7,18,18] eou:f64[200,7,18,18] = pjit[
                    name=_cholesky
                    jaxpr=_cholesky
                  ]
                  eov:f64[18,18] = transpose[permutation=(1, 0)] eoo
                  eow:f64[7,18,18] = broadcast_in_dim[
                    broadcast_dimensions=(1, 2)
                    shape=(7, 18, 18)
                  ] eov
                  eox:f64[200,7,18,18] = broadcast_in_dim[
                    broadcast_dimensions=(1, 2, 3)
                    shape=(200, 7, 18, 18)
                  ] eow
                in (eop, eoq, eor, eos, eot, eou, eox) }
            ] eog
            eoy:f64[18] = broadcast_in_dim[broadcast_dimensions=() shape=(18,)] 0.0
            eoz:f64[6] = broadcast_in_dim[broadcast_dimensions=() shape=(6,)] 0.0
            epa:f64[12] = slice[
              limit_indices=(18,)
              start_indices=(6,)
              strides=None
            ] cpo
            epb:f64[1,12] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 12)
            ] epa
            epc:f64[1,1,12] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 12)
            ] epb
            epd:f64[7,6] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(7, 6)
            ] eoz
            epe:f64[200,7,6] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(200, 7, 6)
            ] epd
            epf:f64[1,18] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 18)
            ] cpp
            epg:f64[1,1,18] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 18)
            ] epf
            eph:i64[6] = slice[
              limit_indices=(6,)
              start_indices=(0,)
              strides=None
            ] cpq
            epi:f64[1,1,1,3] = reshape[dimensions=None new_sizes=(1, 1, 1, 3)] cpr
            epj:f64[1,3] = reshape[dimensions=None new_sizes=(1, 3)] epi
            epk:f64[1,3] = neg epj
            epl:f64[1,3] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(1, 3)
            ] 0.0
            epm:bool[6] = lt eph 0
            epn:i64[6] = add eph 1
            epo:i64[6] = select_n epm eph epn
            epp:i32[6] = convert_element_type[new_dtype=int32 weak_type=False] epo
            epq:i32[6,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(6, 1)
            ] epp
            epr:f64[7,1,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(7, 1, 3)
            ] epl
            eps:f64[200,7,1,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(200, 7, 1, 3)
            ] epr
            ept:bool[6] = lt eph 0
            epu:i64[6] = add eph 1
            epv:i64[6] = select_n ept eph epu
            epw:i32[6] = convert_element_type[new_dtype=int32 weak_type=False] epv
            epx:i32[6,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(6, 1)
            ] epw
            epy:f64[7,1,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(7, 1, 3)
            ] epk
            epz:f64[200,7,1,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(200, 7, 1, 3)
            ] epy
            eqa:i64[4,1] = pjit[name=_take jaxpr=_take8] cps
            eqb:i64[4,1] = pjit[name=_take jaxpr=_take8] cpt
            eqc:i64[4,1] = pjit[name=_take jaxpr=_take12] cpu
            eqd:i64[4] = pjit[name=_take jaxpr=_take9] cpq cpv
            eqe:i64[4,1] = pjit[name=_take jaxpr=_take3] cpw
            eqf:i64[4,1] = pjit[name=_take jaxpr=_take3] cpx
            eqg:bool[4] = lt eqd 0
            eqh:i64[4] = add eqd 4
            eqi:i64[4] = select_n eqg eqd eqh
            eqj:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] eqi
            eqk:i32[4,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(4, 1)
            ] eqj
            eql:bool[4] = lt eqd 0
            eqm:i64[4] = add eqd 4
            eqn:i64[4] = select_n eql eqd eqm
            eqo:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] eqn
            eqp:i32[4,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(4, 1)
            ] eqo
            eqq:i64[4,1] = pjit[name=_take jaxpr=_take8] cpy
            eqr:i64[4,1] = pjit[name=_take jaxpr=_take8] cpz
            eqs:i64[4,1] = pjit[name=_take jaxpr=_take12] cqa
            eqt:i64[4] = pjit[name=_take jaxpr=_take9] cpq cqb
            equ:bool[4] = lt eqt 0
            eqv:i64[4] = add eqt 4
            eqw:i64[4] = select_n equ eqt eqv
            eqx:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] eqw
            eqy:i32[4,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(4, 1)
            ] eqx
            eqz:bool[4] = lt eqt 0
            era:i64[4] = add eqt 4
            erb:i64[4] = select_n eqz eqt era
            erc:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] erb
            erd:i32[4,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(4, 1)
            ] erc
            ere:i64[4,1] = pjit[name=_take jaxpr=_take8] cqc
            erf:i64[4,1] = pjit[name=_take jaxpr=_take8] cqd
            erg:i64[4,1] = pjit[name=_take jaxpr=_take12] cqe
            erh:i64[4] = pjit[name=_take jaxpr=_take9] cpq cqf
            eri:bool[4] = lt erh 0
            erj:i64[4] = add erh 4
            erk:i64[4] = select_n eri erh erj
            erl:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] erk
            erm:i32[4,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(4, 1)
            ] erl
            ern:bool[4] = lt erh 0
            ero:i64[4] = add erh 4
            erp:i64[4] = select_n ern erh ero
            erq:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] erp
            err:i32[4,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(4, 1)
            ] erq
            ers:i64[13,1] = pjit[name=_take jaxpr=_take4] cqg
            ert:i64[13,1] = pjit[name=_take jaxpr=_take4] cqh
            eru:i32[1] erv:i32[1] erw:i32[1] erx:i32[1] ery:i32[1] erz:i32[1] = pjit[
              name=cross
              jaxpr=cross8
            ]
            esa:f64[13,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(13, 1)
            ] cny
            esb:f64[1,13,1] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 13, 1)
            ] esa
            esc:f64[1,1,13,1] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(1, 1, 13, 1)
            ] esb
            esd:i32[1] ese:i32[1] esf:i32[1] esg:i32[1] esh:i32[1] esi:i32[1] = pjit[
              name=cross
              jaxpr=cross8
            ]
            esj:i32[1] esk:i32[1] esl:i32[1] esm:i32[1] esn:i32[1] eso:i32[1] = pjit[
              name=cross
              jaxpr=cross8
            ]
            esp:f64[13,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(13, 1)
            ] cny
            esq:f64[1,13,1] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 13, 1)
            ] esp
            esr:f64[1,1,13,1] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(1, 1, 13, 1)
            ] esq
            ess:i32[1] est:i32[1] esu:i32[1] esv:i32[1] esw:i32[1] esx:i32[1] = pjit[
              name=cross
              jaxpr=cross8
            ]
            esy:i32[1] esz:i32[1] eta:i32[1] etb:i32[1] etc:i32[1] etd:i32[1] = pjit[
              name=cross
              jaxpr=cross8
            ]
            ete:i32[1] etf:i32[1] etg:i32[1] eth:i32[1] eti:i32[1] etj:i32[1] = pjit[
              name=cross
              jaxpr=cross8
            ]
            etk:i32[1] etl:i32[1] etm:i32[1] etn:i32[1] eto:i32[1] etp:i32[1] = pjit[
              name=cross
              jaxpr=cross8
            ]
            etq:i64[4,1] = pjit[name=_take jaxpr=_take1] cqi
            etr:i64[4,1] = pjit[name=_take jaxpr=_take1] cqj
            ets:i64[4,1] = pjit[name=_take jaxpr=_take1] cqk
            ett:i64[4,1] = pjit[name=_take jaxpr=_take1] cql
            etu:f64[4,3] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(4, 3)
            ] 0.0
            etv:bool[4] = lt cqm 0
            etw:i64[4] = add cqm 4
            etx:i64[4] = select_n etv cqm etw
            ety:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] etx
            etz:i32[4,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(4, 1)
            ] ety
            eua:f64[7,4,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(7, 4, 3)
            ] etu
            eub:f64[200,7,4,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(200, 7, 4, 3)
            ] eua
            euc:f64[4,3] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(4, 3)
            ] 0.0
            eud:bool[4] = lt cqm 0
            eue:i64[4] = add cqm 4
            euf:i64[4] = select_n eud cqm eue
            eug:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] euf
            euh:i32[4,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(4, 1)
            ] eug
            eui:f64[7,4,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(7, 4, 3)
            ] euc
            euj:f64[200,7,4,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(200, 7, 4, 3)
            ] eui
            euk:i64[4,1] = pjit[name=_take jaxpr=_take1] cqn
            eul:i64[4,1] = pjit[name=_take jaxpr=_take1] cqo
            eum:f64[4,3] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(4, 3)
            ] 0.0
            eun:bool[4] = lt cqp 0
            euo:i64[4] = add cqp 4
            eup:i64[4] = select_n eun cqp euo
            euq:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] eup
            eur:i32[4,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(4, 1)
            ] euq
            eus:f64[7,4,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(7, 4, 3)
            ] eum
            eut:f64[200,7,4,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(200, 7, 4, 3)
            ] eus
            euu:f64[4,3] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(4, 3)
            ] 0.0
            euv:bool[4] = lt cqp 0
            euw:i64[4] = add cqp 4
            eux:i64[4] = select_n euv cqp euw
            euy:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] eux
            euz:i32[4,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(4, 1)
            ] euy
            eva:f64[7,4,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(7, 4, 3)
            ] euu
            evb:f64[200,7,4,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(200, 7, 4, 3)
            ] eva
            evc:f64[1,3] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(1, 3)
            ] 0.0
            evd:bool[4] = lt cqq 0
            eve:i64[4] = add cqq 1
            evf:i64[4] = select_n evd cqq eve
            evg:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] evf
            evh:i32[4,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(4, 1)
            ] evg
            evi:f64[7,1,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(7, 1, 3)
            ] evc
            evj:f64[200,7,1,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(200, 7, 1, 3)
            ] evi
            evk:f64[1,3] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(1, 3)
            ] 0.0
            evl:bool[4] = lt cqq 0
            evm:i64[4] = add cqq 1
            evn:i64[4] = select_n evl cqq evm
            evo:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] evn
            evp:i32[4,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(4, 1)
            ] evo
            evq:f64[7,1,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(7, 1, 3)
            ] evk
            evr:f64[200,7,1,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(200, 7, 1, 3)
            ] evq
            evs:i64[13,1] = pjit[name=_take jaxpr=_take4] cqr
            evt:i64[13,1] = pjit[name=_take jaxpr=_take4] cqs
            evu:i64[18,1] = pjit[name=_take jaxpr=_take7] cqt
            evv:i64[18,1] = pjit[name=_take jaxpr=_take7] cqt
            evw:f64[1,18] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 18)
            ] eoy
            evx:f64[1,1,18] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 18)
            ] evw
            evy:f64[4] = convert_element_type[new_dtype=float64 weak_type=False] cqu
            evz:f64[1,4] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 4)
            ] evy
            ewa:f64[1,1,4] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 4)
            ] evz
            ewb:i32[1] ewc:i32[1] ewd:i32[1] ewe:i32[1] ewf:i32[1] ewg:i32[1] = pjit[
              name=cross
              jaxpr=cross9
            ]
            ewh:i32[1] ewi:i32[1] ewj:i32[1] ewk:i32[1] ewl:i32[1] ewm:i32[1] = pjit[
              name=cross
              jaxpr=cross9
            ]
            ewn:f64[36,1] = slice[
              limit_indices=(36, 1)
              start_indices=(0, 0)
              strides=None
            ] cms
            ewo:f64[36] = squeeze[dimensions=(1,)] ewn
            ewp:f64[1,36] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 36)
            ] ewo
            ewq:f64[1,1,36] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 36)
            ] ewp
            ewr:f64[36,1] = slice[
              limit_indices=(36, 2)
              start_indices=(0, 1)
              strides=None
            ] cms
            ews:f64[36] = squeeze[dimensions=(1,)] ewr
            ewt:f64[36,1] = slice[
              limit_indices=(36, 1)
              start_indices=(0, 0)
              strides=None
            ] cms
            ewu:f64[36] = squeeze[dimensions=(1,)] ewt
            ewv:f64[36] = sub ews ewu
            eww:f64[1,36] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 36)
            ] ewv
            ewx:f64[1,1,36] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 36)
            ] eww
            ewy:f64[36,1] = slice[
              limit_indices=(36, 2)
              start_indices=(0, 1)
              strides=None
            ] cms
            ewz:f64[36] = squeeze[dimensions=(1,)] ewy
            exa:f64[36,1] = slice[
              limit_indices=(36, 1)
              start_indices=(0, 0)
              strides=None
            ] cms
            exb:f64[36] = squeeze[dimensions=(1,)] exa
            exc:f64[36] = sub ewz exb
            exd:f64[1,36] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 36)
            ] exc
            exe:f64[1,1,36] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 36)
            ] exd
            exf:f64[36,1] = slice[
              limit_indices=(36, 1)
              start_indices=(0, 0)
              strides=None
            ] cms
            exg:f64[36] = squeeze[dimensions=(1,)] exf
            exh:f64[1,36] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 36)
            ] exg
            exi:f64[1,1,36] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 36)
            ] exh
            exj:f64[] = mul cqv 1.0
            exk:f64[1] = slice[
              limit_indices=(1,)
              start_indices=(0,)
              strides=None
            ] cqw
            exl:f64[] = squeeze[dimensions=(0,)] exk
            exm:f64[] exn:bool[] = pjit[name=remainder jaxpr=remainder] 1
            exo:bool[7] = broadcast_in_dim[broadcast_dimensions=() shape=(7,)] False
            exp:bool[7] = broadcast_in_dim[broadcast_dimensions=() shape=(7,)] True
            exq:bool[200,7] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(200, 7)
            ] exo
            exr:bool[200,7] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(200, 7)
            ] exp
            exs:f64[1] = slice[
              limit_indices=(2,)
              start_indices=(1,)
              strides=None
            ] cqw
            ext:f64[] = squeeze[dimensions=(0,)] exs
            exu:f64[] exv:bool[] = pjit[name=remainder jaxpr=remainder] 1
            exw:bool[7] = broadcast_in_dim[broadcast_dimensions=() shape=(7,)] False
            exx:bool[7] = broadcast_in_dim[broadcast_dimensions=() shape=(7,)] True
            exy:bool[200,7] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(200, 7)
            ] exw
            exz:bool[200,7] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(200, 7)
            ] exx
            eya:f64[1] = slice[
              limit_indices=(3,)
              start_indices=(2,)
              strides=None
            ] cqw
            eyb:f64[] = squeeze[dimensions=(0,)] eya
            eyc:f64[] eyd:bool[] = pjit[name=remainder jaxpr=remainder] 1
            eye:bool[7] = broadcast_in_dim[broadcast_dimensions=() shape=(7,)] False
            eyf:bool[7] = broadcast_in_dim[broadcast_dimensions=() shape=(7,)] True
            eyg:bool[200,7] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(200, 7)
            ] eye
            eyh:bool[200,7] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(200, 7)
            ] eyf
            eyi:f64[1] = slice[
              limit_indices=(4,)
              start_indices=(3,)
              strides=None
            ] cqw
            eyj:f64[] = squeeze[dimensions=(0,)] eyi
            eyk:f64[] eyl:bool[] = pjit[name=remainder jaxpr=remainder] 1
            eym:bool[7] = broadcast_in_dim[broadcast_dimensions=() shape=(7,)] False
            eyn:bool[7] = broadcast_in_dim[broadcast_dimensions=() shape=(7,)] True
            eyo:bool[200,7] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(200, 7)
            ] eym
            eyp:bool[200,7] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(200, 7)
            ] eyn
            eyq:f64[8] = broadcast_in_dim[broadcast_dimensions=() shape=(8,)] 0.0
            eyr:f64[1] = slice[
              limit_indices=(1,)
              start_indices=(0,)
              strides=None
            ] cqx
            eys:f64[] = squeeze[dimensions=(0,)] eyr
            eyt:f64[1] = slice[
              limit_indices=(1,)
              start_indices=(0,)
              strides=None
            ] cqy
            eyu:f64[] = squeeze[dimensions=(0,)] eyt
            eyv:f64[] = select_n True eyu eys
            eyw:f64[1] = slice[
              limit_indices=(2,)
              start_indices=(1,)
              strides=None
            ] cqx
            eyx:f64[] = squeeze[dimensions=(0,)] eyw
            eyy:f64[1] = slice[
              limit_indices=(2,)
              start_indices=(1,)
              strides=None
            ] cqz
            eyz:f64[] = squeeze[dimensions=(0,)] eyy
            eza:f64[] = select_n True eyz eyx
            ezb:f64[] = mul 0.0 0.25
            ezc:f64[] = atan2 eza eyv
            ezd:f64[] = add ezc ezb
            eze:f64[] = cos ezd
            ezf:f64[] = convert_element_type[new_dtype=float64 weak_type=False] cra
            ezg:f64[] = mul ezf eze
            ezh:f64[] = sub ezg eyv
            ezi:f64[] = atan2 eza eyv
            ezj:f64[] = add ezi ezb
            ezk:f64[] = sin ezj
            ezl:f64[] = convert_element_type[new_dtype=float64 weak_type=False] cra
            ezm:f64[] = mul ezl ezk
            ezn:f64[] = sub ezm eza
            ezo:f64[2] = slice[
              limit_indices=(2,)
              start_indices=(0,)
              strides=None
            ] eyq
            ezp:f64[1] = slice[
              limit_indices=(1,)
              start_indices=(0,)
              strides=None
            ] ezo
            ezq:f64[] = squeeze[dimensions=(0,)] ezp
            ezr:f64[2] = slice[
              limit_indices=(2,)
              start_indices=(0,)
              strides=None
            ] eyq
            ezs:f64[1] = slice[
              limit_indices=(2,)
              start_indices=(1,)
              strides=None
            ] ezr
            ezt:f64[] = squeeze[dimensions=(0,)] ezs
            ezu:f64[] = mul exj 0.25
            ezv:f64[] = add ezu ezh
            ezw:f64[] = add ezv ezq
            ezx:f64[] = add ezn ezt
            ezy:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] ezw
            ezz:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] ezx
            faa:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0.0
            fab:f64[3] = concatenate[dimension=0] ezy ezz faa
            fac:f64[3] = neg fab
            fad:f64[8] = broadcast_in_dim[broadcast_dimensions=() shape=(8,)] 0.0
            fae:f64[1] = slice[
              limit_indices=(1,)
              start_indices=(0,)
              strides=None
            ] cqx
            faf:f64[] = squeeze[dimensions=(0,)] fae
            fag:f64[1] = slice[
              limit_indices=(1,)
              start_indices=(0,)
              strides=None
            ] cqy
            fah:f64[] = squeeze[dimensions=(0,)] fag
            fai:f64[] = select_n True fah faf
            faj:f64[1] = slice[
              limit_indices=(2,)
              start_indices=(1,)
              strides=None
            ] cqx
            fak:f64[] = squeeze[dimensions=(0,)] faj
            fal:f64[1] = slice[
              limit_indices=(2,)
              start_indices=(1,)
              strides=None
            ] cqz
            fam:f64[] = squeeze[dimensions=(0,)] fal
            fan:f64[] = select_n False fam fak
            fao:f64[] = mul 0.0 0.25
            fap:f64[] = atan2 fan fai
            faq:f64[] = add fap fao
            far:f64[] = cos faq
            fas:f64[] = convert_element_type[new_dtype=float64 weak_type=False] cra
            fat:f64[] = mul fas far
            fau:f64[] = sub fat fai
            fav:f64[] = atan2 fan fai
            faw:f64[] = add fav fao
            fax:f64[] = sin faw
            fay:f64[] = convert_element_type[new_dtype=float64 weak_type=False] cra
            faz:f64[] = mul fay fax
            fba:f64[] = sub faz fan
            fbb:f64[2] = slice[
              limit_indices=(4,)
              start_indices=(2,)
              strides=None
            ] fad
            fbc:f64[1] = slice[
              limit_indices=(1,)
              start_indices=(0,)
              strides=None
            ] fbb
            fbd:f64[] = squeeze[dimensions=(0,)] fbc
            fbe:f64[2] = slice[
              limit_indices=(4,)
              start_indices=(2,)
              strides=None
            ] fad
            fbf:f64[1] = slice[
              limit_indices=(2,)
              start_indices=(1,)
              strides=None
            ] fbe
            fbg:f64[] = squeeze[dimensions=(0,)] fbf
            fbh:f64[] = mul exj 0.25
            fbi:f64[] = add fbh fau
            fbj:f64[] = add fbi fbd
            fbk:f64[] = add fba fbg
            fbl:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] fbj
            fbm:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] fbk
            fbn:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0.0
            fbo:f64[3] = concatenate[dimension=0] fbl fbm fbn
            fbp:f64[3] = neg fbo
            fbq:f64[8] = broadcast_in_dim[broadcast_dimensions=() shape=(8,)] 0.0
            fbr:f64[1] = slice[
              limit_indices=(1,)
              start_indices=(0,)
              strides=None
            ] cqx
            fbs:f64[] = squeeze[dimensions=(0,)] fbr
            fbt:f64[1] = slice[
              limit_indices=(1,)
              start_indices=(0,)
              strides=None
            ] cqy
            fbu:f64[] = squeeze[dimensions=(0,)] fbt
            fbv:f64[] = select_n False fbu fbs
            fbw:f64[1] = slice[
              limit_indices=(2,)
              start_indices=(1,)
              strides=None
            ] cqx
            fbx:f64[] = squeeze[dimensions=(0,)] fbw
            fby:f64[1] = slice[
              limit_indices=(2,)
              start_indices=(1,)
              strides=None
            ] cqz
            fbz:f64[] = squeeze[dimensions=(0,)] fby
            fca:f64[] = select_n True fbz fbx
            fcb:f64[] = mul 0.0 0.25
            fcc:f64[] = atan2 fca fbv
            fcd:f64[] = add fcc fcb
            fce:f64[] = cos fcd
            fcf:f64[] = convert_element_type[new_dtype=float64 weak_type=False] cra
            fcg:f64[] = mul fcf fce
            fch:f64[] = sub fcg fbv
            fci:f64[] = atan2 fca fbv
            fcj:f64[] = add fci fcb
            fck:f64[] = sin fcj
            fcl:f64[] = convert_element_type[new_dtype=float64 weak_type=False] cra
            fcm:f64[] = mul fcl fck
            fcn:f64[] = sub fcm fca
            fco:f64[2] = slice[
              limit_indices=(6,)
              start_indices=(4,)
              strides=None
            ] fbq
            fcp:f64[1] = slice[
              limit_indices=(1,)
              start_indices=(0,)
              strides=None
            ] fco
            fcq:f64[] = squeeze[dimensions=(0,)] fcp
            fcr:f64[2] = slice[
              limit_indices=(6,)
              start_indices=(4,)
              strides=None
            ] fbq
            fcs:f64[1] = slice[
              limit_indices=(2,)
              start_indices=(1,)
              strides=None
            ] fcr
            fct:f64[] = squeeze[dimensions=(0,)] fcs
            fcu:f64[] = mul exj 0.25
            fcv:f64[] = add fcu fch
            fcw:f64[] = add fcv fcq
            fcx:f64[] = add fcn fct
            fcy:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] fcw
            fcz:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] fcx
            fda:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0.0
            fdb:f64[3] = concatenate[dimension=0] fcy fcz fda
            fdc:f64[3] = neg fdb
            fdd:f64[8] = broadcast_in_dim[broadcast_dimensions=() shape=(8,)] 0.0
            fde:f64[1] = slice[
              limit_indices=(1,)
              start_indices=(0,)
              strides=None
            ] cqx
            fdf:f64[] = squeeze[dimensions=(0,)] fde
            fdg:f64[1] = slice[
              limit_indices=(1,)
              start_indices=(0,)
              strides=None
            ] cqy
            fdh:f64[] = squeeze[dimensions=(0,)] fdg
            fdi:f64[] = select_n False fdh fdf
            fdj:f64[1] = slice[
              limit_indices=(2,)
              start_indices=(1,)
              strides=None
            ] cqx
            fdk:f64[] = squeeze[dimensions=(0,)] fdj
            fdl:f64[1] = slice[
              limit_indices=(2,)
              start_indices=(1,)
              strides=None
            ] cqz
            fdm:f64[] = squeeze[dimensions=(0,)] fdl
            fdn:f64[] = select_n False fdm fdk
            fdo:f64[] = mul 0.0 0.25
            fdp:f64[] = atan2 fdn fdi
            fdq:f64[] = add fdp fdo
            fdr:f64[] = cos fdq
            fds:f64[] = convert_element_type[new_dtype=float64 weak_type=False] cra
            fdt:f64[] = mul fds fdr
            fdu:f64[] = sub fdt fdi
            fdv:f64[] = atan2 fdn fdi
            fdw:f64[] = add fdv fdo
            fdx:f64[] = sin fdw
            fdy:f64[] = convert_element_type[new_dtype=float64 weak_type=False] cra
            fdz:f64[] = mul fdy fdx
            fea:f64[] = sub fdz fdn
            feb:f64[2] = slice[
              limit_indices=(8,)
              start_indices=(6,)
              strides=None
            ] fdd
            fec:f64[1] = slice[
              limit_indices=(1,)
              start_indices=(0,)
              strides=None
            ] feb
            fed:f64[] = squeeze[dimensions=(0,)] fec
            fee:f64[2] = slice[
              limit_indices=(8,)
              start_indices=(6,)
              strides=None
            ] fdd
            fef:f64[1] = slice[
              limit_indices=(2,)
              start_indices=(1,)
              strides=None
            ] fee
            feg:f64[] = squeeze[dimensions=(0,)] fef
            feh:f64[] = mul exj 0.25
            fei:f64[] = add feh fdu
            fej:f64[] = add fei fed
            fek:f64[] = add fea feg
            fel:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] fej
            fem:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] fek
            fen:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0.0
            feo:f64[3] = concatenate[dimension=0] fel fem fen
            fep:f64[3] = neg feo
            feq:f64[1] = slice[
              limit_indices=(1,)
              start_indices=(0,)
              strides=None
            ] cqx
            fer:f64[] = squeeze[dimensions=(0,)] feq
            fes:f64[1] = slice[
              limit_indices=(1,)
              start_indices=(0,)
              strides=None
            ] cqy
            fet:f64[] = squeeze[dimensions=(0,)] fes
            feu:f64[] = select_n True fet fer
            fev:f64[1] = slice[
              limit_indices=(2,)
              start_indices=(1,)
              strides=None
            ] cqx
            few:f64[] = squeeze[dimensions=(0,)] fev
            fex:f64[1] = slice[
              limit_indices=(2,)
              start_indices=(1,)
              strides=None
            ] cqz
            fey:f64[] = squeeze[dimensions=(0,)] fex
            fez:f64[] = select_n True fey few
            ffa:f64[] = mul 0.0 0.25
            ffb:f64[] = atan2 fez feu
            ffc:f64[] = add ffb ffa
            ffd:f64[] = cos ffc
            ffe:f64[] = convert_element_type[new_dtype=float64 weak_type=False] cra
            fff:f64[] = mul ffe ffd
            ffg:f64[] = sub fff feu
            ffh:f64[] = atan2 fez feu
            ffi:f64[] = add ffh ffa
            ffj:f64[] = sin ffi
            ffk:f64[] = convert_element_type[new_dtype=float64 weak_type=False] cra
            ffl:f64[] = mul ffk ffj
            ffm:f64[] = sub ffl fez
            ffn:f64[2] = slice[
              limit_indices=(2,)
              start_indices=(0,)
              strides=None
            ] crb
            ffo:f64[1] = slice[
              limit_indices=(1,)
              start_indices=(0,)
              strides=None
            ] ffn
            ffp:f64[] = squeeze[dimensions=(0,)] ffo
            ffq:f64[2] = slice[
              limit_indices=(2,)
              start_indices=(0,)
              strides=None
            ] crb
            ffr:f64[1] = slice[
              limit_indices=(2,)
              start_indices=(1,)
              strides=None
            ] ffq
            ffs:f64[] = squeeze[dimensions=(0,)] ffr
            fft:f64[] = mul exj 0.25
            ffu:f64[] = add fft ffg
            ffv:f64[] = add ffu ffp
            ffw:f64[] = add ffm ffs
            ffx:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] ffv
            ffy:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] ffw
            ffz:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0.0
            fga:f64[3] = concatenate[dimension=0] ffx ffy ffz
            fgb:f64[1] = slice[
              limit_indices=(1,)
              start_indices=(0,)
              strides=None
            ] cqx
            fgc:f64[] = squeeze[dimensions=(0,)] fgb
            fgd:f64[1] = slice[
              limit_indices=(1,)
              start_indices=(0,)
              strides=None
            ] cqy
            fge:f64[] = squeeze[dimensions=(0,)] fgd
            fgf:f64[] = select_n True fge fgc
            fgg:f64[1] = slice[
              limit_indices=(2,)
              start_indices=(1,)
              strides=None
            ] cqx
            fgh:f64[] = squeeze[dimensions=(0,)] fgg
            fgi:f64[1] = slice[
              limit_indices=(2,)
              start_indices=(1,)
              strides=None
            ] cqz
            fgj:f64[] = squeeze[dimensions=(0,)] fgi
            fgk:f64[] = select_n False fgj fgh
            fgl:f64[] = mul 0.0 0.25
            fgm:f64[] = atan2 fgk fgf
            fgn:f64[] = add fgm fgl
            fgo:f64[] = cos fgn
            fgp:f64[] = convert_element_type[new_dtype=float64 weak_type=False] cra
            fgq:f64[] = mul fgp fgo
            fgr:f64[] = sub fgq fgf
            fgs:f64[] = atan2 fgk fgf
            fgt:f64[] = add fgs fgl
            fgu:f64[] = sin fgt
            fgv:f64[] = convert_element_type[new_dtype=float64 weak_type=False] cra
            fgw:f64[] = mul fgv fgu
            fgx:f64[] = sub fgw fgk
            fgy:f64[2] = slice[
              limit_indices=(4,)
              start_indices=(2,)
              strides=None
            ] crb
            fgz:f64[1] = slice[
              limit_indices=(1,)
              start_indices=(0,)
              strides=None
            ] fgy
            fha:f64[] = squeeze[dimensions=(0,)] fgz
            fhb:f64[2] = slice[
              limit_indices=(4,)
              start_indices=(2,)
              strides=None
            ] crb
            fhc:f64[1] = slice[
              limit_indices=(2,)
              start_indices=(1,)
              strides=None
            ] fhb
            fhd:f64[] = squeeze[dimensions=(0,)] fhc
            fhe:f64[] = mul exj 0.25
            fhf:f64[] = add fhe fgr
            fhg:f64[] = add fhf fha
            fhh:f64[] = add fgx fhd
            fhi:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] fhg
            fhj:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] fhh
            fhk:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0.0
            fhl:f64[3] = concatenate[dimension=0] fhi fhj fhk
            fhm:f64[1] = slice[
              limit_indices=(1,)
              start_indices=(0,)
              strides=None
            ] cqx
            fhn:f64[] = squeeze[dimensions=(0,)] fhm
            fho:f64[1] = slice[
              limit_indices=(1,)
              start_indices=(0,)
              strides=None
            ] cqy
            fhp:f64[] = squeeze[dimensions=(0,)] fho
            fhq:f64[] = select_n False fhp fhn
            fhr:f64[1] = slice[
              limit_indices=(2,)
              start_indices=(1,)
              strides=None
            ] cqx
            fhs:f64[] = squeeze[dimensions=(0,)] fhr
            fht:f64[1] = slice[
              limit_indices=(2,)
              start_indices=(1,)
              strides=None
            ] cqz
            fhu:f64[] = squeeze[dimensions=(0,)] fht
            fhv:f64[] = select_n True fhu fhs
            fhw:f64[] = mul 0.0 0.25
            fhx:f64[] = atan2 fhv fhq
            fhy:f64[] = add fhx fhw
            fhz:f64[] = cos fhy
            fia:f64[] = convert_element_type[new_dtype=float64 weak_type=False] cra
            fib:f64[] = mul fia fhz
            fic:f64[] = sub fib fhq
            fid:f64[] = atan2 fhv fhq
            fie:f64[] = add fid fhw
            fif:f64[] = sin fie
            fig:f64[] = convert_element_type[new_dtype=float64 weak_type=False] cra
            fih:f64[] = mul fig fif
            fii:f64[] = sub fih fhv
            fij:f64[2] = slice[
              limit_indices=(6,)
              start_indices=(4,)
              strides=None
            ] crb
            fik:f64[1] = slice[
              limit_indices=(1,)
              start_indices=(0,)
              strides=None
            ] fij
            fil:f64[] = squeeze[dimensions=(0,)] fik
            fim:f64[2] = slice[
              limit_indices=(6,)
              start_indices=(4,)
              strides=None
            ] crb
            fin:f64[1] = slice[
              limit_indices=(2,)
              start_indices=(1,)
              strides=None
            ] fim
            fio:f64[] = squeeze[dimensions=(0,)] fin
            fip:f64[] = mul exj 0.25
            fiq:f64[] = add fip fic
            fir:f64[] = add fiq fil
            fis:f64[] = add fii fio
            fit:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] fir
            fiu:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] fis
            fiv:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0.0
            fiw:f64[3] = concatenate[dimension=0] fit fiu fiv
            fix:f64[1] = slice[
              limit_indices=(1,)
              start_indices=(0,)
              strides=None
            ] cqx
            fiy:f64[] = squeeze[dimensions=(0,)] fix
            fiz:f64[1] = slice[
              limit_indices=(1,)
              start_indices=(0,)
              strides=None
            ] cqy
            fja:f64[] = squeeze[dimensions=(0,)] fiz
            fjb:f64[] = select_n False fja fiy
            fjc:f64[1] = slice[
              limit_indices=(2,)
              start_indices=(1,)
              strides=None
            ] cqx
            fjd:f64[] = squeeze[dimensions=(0,)] fjc
            fje:f64[1] = slice[
              limit_indices=(2,)
              start_indices=(1,)
              strides=None
            ] cqz
            fjf:f64[] = squeeze[dimensions=(0,)] fje
            fjg:f64[] = select_n False fjf fjd
            fjh:f64[] = mul 0.0 0.25
            fji:f64[] = atan2 fjg fjb
            fjj:f64[] = add fji fjh
            fjk:f64[] = cos fjj
            fjl:f64[] = convert_element_type[new_dtype=float64 weak_type=False] cra
            fjm:f64[] = mul fjl fjk
            fjn:f64[] = sub fjm fjb
            fjo:f64[] = atan2 fjg fjb
            fjp:f64[] = add fjo fjh
            fjq:f64[] = sin fjp
            fjr:f64[] = convert_element_type[new_dtype=float64 weak_type=False] cra
            fjs:f64[] = mul fjr fjq
            fjt:f64[] = sub fjs fjg
            fju:f64[2] = slice[
              limit_indices=(8,)
              start_indices=(6,)
              strides=None
            ] crb
            fjv:f64[1] = slice[
              limit_indices=(1,)
              start_indices=(0,)
              strides=None
            ] fju
            fjw:f64[] = squeeze[dimensions=(0,)] fjv
            fjx:f64[2] = slice[
              limit_indices=(8,)
              start_indices=(6,)
              strides=None
            ] crb
            fjy:f64[1] = slice[
              limit_indices=(2,)
              start_indices=(1,)
              strides=None
            ] fjx
            fjz:f64[] = squeeze[dimensions=(0,)] fjy
            fka:f64[] = mul exj 0.25
            fkb:f64[] = add fka fjn
            fkc:f64[] = add fkb fjw
            fkd:f64[] = add fjt fjz
            fke:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] fkc
            fkf:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] fkd
            fkg:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0.0
            fkh:f64[3] = concatenate[dimension=0] fke fkf fkg
            fki:f64[1] = slice[
              limit_indices=(1,)
              start_indices=(0,)
              strides=None
            ] fac
            fkj:f64[] = squeeze[dimensions=(0,)] fki
            fkk:f64[1] = slice[
              limit_indices=(1,)
              start_indices=(0,)
              strides=None
            ] fga
            fkl:f64[] = squeeze[dimensions=(0,)] fkk
            fkm:f64[] = sub fkl fkj
            fkn:f64[] = div fkm 6.283185307179586
            fko:f64[1] = slice[
              limit_indices=(2,)
              start_indices=(1,)
              strides=None
            ] fac
            fkp:f64[] = squeeze[dimensions=(0,)] fko
            fkq:f64[1] = slice[
              limit_indices=(2,)
              start_indices=(1,)
              strides=None
            ] fga
            fkr:f64[] = squeeze[dimensions=(0,)] fkq
            fks:f64[] = sub fkr fkp
            fkt:f64[] = div fks 6.283185307179586
            fku:f64[1] = slice[
              limit_indices=(1,)
              start_indices=(0,)
              strides=None
            ] fbp
            fkv:f64[] = squeeze[dimensions=(0,)] fku
            fkw:f64[1] = slice[
              limit_indices=(1,)
              start_indices=(0,)
              strides=None
            ] fhl
            fkx:f64[] = squeeze[dimensions=(0,)] fkw
            fky:f64[] = sub fkx fkv
            fkz:f64[] = div fky 6.283185307179586
            fla:f64[1] = slice[
              limit_indices=(2,)
              start_indices=(1,)
              strides=None
            ] fbp
            flb:f64[] = squeeze[dimensions=(0,)] fla
            flc:f64[1] = slice[
              limit_indices=(2,)
              start_indices=(1,)
              strides=None
            ] fhl
            fld:f64[] = squeeze[dimensions=(0,)] flc
            fle:f64[] = sub fld flb
            flf:f64[] = div fle 6.283185307179586
            flg:f64[1] = slice[
              limit_indices=(1,)
              start_indices=(0,)
              strides=None
            ] fdc
            flh:f64[] = squeeze[dimensions=(0,)] flg
            fli:f64[1] = slice[
              limit_indices=(1,)
              start_indices=(0,)
              strides=None
            ] fiw
            flj:f64[] = squeeze[dimensions=(0,)] fli
            flk:f64[] = sub flj flh
            fll:f64[] = div flk 6.283185307179586
            flm:f64[1] = slice[
              limit_indices=(2,)
              start_indices=(1,)
              strides=None
            ] fdc
            fln:f64[] = squeeze[dimensions=(0,)] flm
            flo:f64[1] = slice[
              limit_indices=(2,)
              start_indices=(1,)
              strides=None
            ] fiw
            flp:f64[] = squeeze[dimensions=(0,)] flo
            flq:f64[] = sub flp fln
            flr:f64[] = div flq 6.283185307179586
            fls:f64[1] = slice[
              limit_indices=(1,)
              start_indices=(0,)
              strides=None
            ] fep
            flt:f64[] = squeeze[dimensions=(0,)] fls
            flu:f64[1] = slice[
              limit_indices=(1,)
              start_indices=(0,)
              strides=None
            ] fkh
            flv:f64[] = squeeze[dimensions=(0,)] flu
            flw:f64[] = sub flv flt
            flx:f64[] = div flw 6.283185307179586
            fly:f64[1] = slice[
              limit_indices=(2,)
              start_indices=(1,)
              strides=None
            ] fep
            flz:f64[] = squeeze[dimensions=(0,)] fly
            fma:f64[1] = slice[
              limit_indices=(2,)
              start_indices=(1,)
              strides=None
            ] fkh
            fmb:f64[] = squeeze[dimensions=(0,)] fma
            fmc:f64[] = sub fmb flz
            fmd:f64[] = div fmc 6.283185307179586
            fme:f64[1] = slice[
              limit_indices=(1,)
              start_indices=(0,)
              strides=None
            ] fga
            fmf:f64[] = squeeze[dimensions=(0,)] fme
            fmg:f64[1] = slice[
              limit_indices=(1,)
              start_indices=(0,)
              strides=None
            ] fac
            fmh:f64[] = squeeze[dimensions=(0,)] fmg
            fmi:f64[] = sub fmh fmf
            fmj:f64[] = div fmi 6.283185307179586
            fmk:f64[1] = slice[
              limit_indices=(2,)
              start_indices=(1,)
              strides=None
            ] fga
            fml:f64[] = squeeze[dimensions=(0,)] fmk
            fmm:f64[1] = slice[
              limit_indices=(2,)
              start_indices=(1,)
              strides=None
            ] fac
            fmn:f64[] = squeeze[dimensions=(0,)] fmm
            fmo:f64[] = sub fmn fml
            fmp:f64[] = div fmo 6.283185307179586
            fmq:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0.0
            fmr:f64[7,1] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(7, 1)
            ] fmq
            fms:f64[200,7,1] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(200, 7, 1)
            ] fmr
            fmt:f64[1] = slice[
              limit_indices=(1,)
              start_indices=(0,)
              strides=None
            ] fhl
            fmu:f64[] = squeeze[dimensions=(0,)] fmt
            fmv:f64[1] = slice[
              limit_indices=(1,)
              start_indices=(0,)
              strides=None
            ] fbp
            fmw:f64[] = squeeze[dimensions=(0,)] fmv
            fmx:f64[] = sub fmw fmu
            fmy:f64[] = div fmx 6.283185307179586
            fmz:f64[1] = slice[
              limit_indices=(2,)
              start_indices=(1,)
              strides=None
            ] fhl
            fna:f64[] = squeeze[dimensions=(0,)] fmz
            fnb:f64[1] = slice[
              limit_indices=(2,)
              start_indices=(1,)
              strides=None
            ] fbp
            fnc:f64[] = squeeze[dimensions=(0,)] fnb
            fnd:f64[] = sub fnc fna
            fne:f64[] = div fnd 6.283185307179586
            fnf:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0.0
            fng:f64[7,1] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(7, 1)
            ] fnf
            fnh:f64[200,7,1] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(200, 7, 1)
            ] fng
            fni:f64[1] = slice[
              limit_indices=(1,)
              start_indices=(0,)
              strides=None
            ] fiw
            fnj:f64[] = squeeze[dimensions=(0,)] fni
            fnk:f64[1] = slice[
              limit_indices=(1,)
              start_indices=(0,)
              strides=None
            ] fdc
            fnl:f64[] = squeeze[dimensions=(0,)] fnk
            fnm:f64[] = sub fnl fnj
            fnn:f64[] = div fnm 6.283185307179586
            fno:f64[1] = slice[
              limit_indices=(2,)
              start_indices=(1,)
              strides=None
            ] fiw
            fnp:f64[] = squeeze[dimensions=(0,)] fno
            fnq:f64[1] = slice[
              limit_indices=(2,)
              start_indices=(1,)
              strides=None
            ] fdc
            fnr:f64[] = squeeze[dimensions=(0,)] fnq
            fns:f64[] = sub fnr fnp
            fnt:f64[] = div fns 6.283185307179586
            fnu:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0.0
            fnv:f64[7,1] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(7, 1)
            ] fnu
            fnw:f64[200,7,1] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(200, 7, 1)
            ] fnv
            fnx:f64[1] = slice[
              limit_indices=(1,)
              start_indices=(0,)
              strides=None
            ] fkh
            fny:f64[] = squeeze[dimensions=(0,)] fnx
            fnz:f64[1] = slice[
              limit_indices=(1,)
              start_indices=(0,)
              strides=None
            ] fep
            foa:f64[] = squeeze[dimensions=(0,)] fnz
            fob:f64[] = sub foa fny
            foc:f64[] = div fob 6.283185307179586
            fod:f64[1] = slice[
              limit_indices=(2,)
              start_indices=(1,)
              strides=None
            ] fkh
            foe:f64[] = squeeze[dimensions=(0,)] fod
            fof:f64[1] = slice[
              limit_indices=(2,)
              start_indices=(1,)
              strides=None
            ] fep
            fog:f64[] = squeeze[dimensions=(0,)] fof
            foh:f64[] = sub fog foe
            foi:f64[] = div foh 6.283185307179586
            foj:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0.0
            fok:f64[7,1] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(7, 1)
            ] foj
            fol:f64[200,7,1] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(200, 7, 1)
            ] fok
            fom:f64[1,3] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 3)
            ] cqx
            fon:f64[1,1,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 3)
            ] fom
            foo:f64[1,3] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 3)
            ] cqz
            fop:f64[1,1,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 3)
            ] foo
            foq:f64[1,3] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 3)
            ] cqy
            for:f64[1,1,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 3)
            ] foq
            fos:f64[1,3] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 3)
            ] crc
            fot:f64[1,1,3] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 3)
            ] fos
            fou:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0.0
            fov:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0.0
            fow:f64[7,1] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(7, 1)
            ] fou
            fox:f64[7,1] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(7, 1)
            ] fov
            foy:f64[200,7,1] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(200, 7, 1)
            ] fow
            foz:f64[200,7,1] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(200, 7, 1)
            ] fox
            fpa:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0.0
            fpb:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0.0
            fpc:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0.0
            fpd:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0.0
            fpe:f64[7,1] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(7, 1)
            ] fpa
            fpf:f64[7,1] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(7, 1)
            ] fpb
            fpg:f64[7,1] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(7, 1)
            ] fpc
            fph:f64[7,1] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(7, 1)
            ] fpd
            fpi:f64[200,7,1] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(200, 7, 1)
            ] fpe
            fpj:f64[200,7,1] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(200, 7, 1)
            ] fpf
            fpk:f64[200,7,1] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(200, 7, 1)
            ] fpg
            fpl:f64[200,7,1] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(200, 7, 1)
            ] fph
            fpm:f64[] = select_n False 0.25 -0.25
            fpn:f64[] = select_n True 0.12 -0.12
            fpo:f64[] = convert_element_type[new_dtype=float64 weak_type=False] fpm
            fpp:f64[] = convert_element_type[new_dtype=float64 weak_type=False] fpn
            fpq:f64[] = select_n True 0.083 -0.083
            fpr:f64[] = integer_pow[y=2] fpq
            fps:f64[] = convert_element_type[new_dtype=float64 weak_type=False] fpr
            fpt:f64[] = convert_element_type[new_dtype=float64 weak_type=False] fpq
            fpu:f64[] = convert_element_type[new_dtype=float64 weak_type=False] fpq
            fpv:f64[] = abs 0.0625
            fpw:f64[] = mul 2.0 fpv
            fpx:f64[] = convert_element_type[new_dtype=float64 weak_type=False] fpw
            fpy:f64[1] = slice[
              limit_indices=(3,)
              start_indices=(2,)
              strides=None
            ] crd
            fpz:f64[] = squeeze[dimensions=(0,)] fpy
            fqa:f64[1] = slice[
              limit_indices=(3,)
              start_indices=(2,)
              strides=None
            ] cre
            fqb:f64[] = squeeze[dimensions=(0,)] fqa
            fqc:f64[] = add 3.141592653589793 fpz
            fqd:f64[] = cos fqc
            fqe:f64[] = add 3.141592653589793 fqb
            fqf:f64[] = cos fqe
            fqg:f64[200,7] fqh:f64[200,7] fqi:f64[200,7] fqj:f64[200,7] fqk:f64[200,7]
              fql:f64[200,7] fqm:f64[200,7] fqn:f64[200,7] = pjit[
              name=clip
              jaxpr=clip
            ]
            fqo:f64[] = select_n False 0.25 -0.25
            fqp:f64[] = select_n False 0.12 -0.12
            fqq:f64[] = convert_element_type[new_dtype=float64 weak_type=False] fqo
            fqr:f64[] = convert_element_type[new_dtype=float64 weak_type=False] fqp
            fqs:f64[] = select_n False 0.083 -0.083
            fqt:f64[] = integer_pow[y=2] fqs
            fqu:f64[] = convert_element_type[new_dtype=float64 weak_type=False] fqt
            fqv:f64[] = convert_element_type[new_dtype=float64 weak_type=False] fqs
            fqw:f64[] = convert_element_type[new_dtype=float64 weak_type=False] fqs
            fqx:f64[] = abs 0.0625
            fqy:f64[] = mul 2.0 fqx
            fqz:f64[] = convert_element_type[new_dtype=float64 weak_type=False] fqy
            fra:f64[1] = slice[
              limit_indices=(3,)
              start_indices=(2,)
              strides=None
            ] crd
            frb:f64[] = squeeze[dimensions=(0,)] fra
            frc:f64[1] = slice[
              limit_indices=(3,)
              start_indices=(2,)
              strides=None
            ] cre
            frd:f64[] = squeeze[dimensions=(0,)] frc
            fre:f64[] = add 3.141592653589793 frb
            frf:f64[] = cos fre
            frg:f64[] = add 3.141592653589793 frd
            frh:f64[] = cos frg
            fri:f64[200,7] frj:f64[200,7] frk:f64[200,7] frl:f64[200,7] frm:f64[200,7]
              frn:f64[200,7] fro:f64[200,7] frp:f64[200,7] = pjit[
              name=clip
              jaxpr=clip
            ]
            frq:f64[] = select_n True 0.25 -0.25
            frr:f64[] = select_n True 0.12 -0.12
            frs:f64[] = convert_element_type[new_dtype=float64 weak_type=False] frq
            frt:f64[] = convert_element_type[new_dtype=float64 weak_type=False] frr
            fru:f64[] = select_n True 0.083 -0.083
            frv:f64[] = integer_pow[y=2] fru
            frw:f64[] = convert_element_type[new_dtype=float64 weak_type=False] frv
            frx:f64[] = convert_element_type[new_dtype=float64 weak_type=False] fru
            fry:f64[] = convert_element_type[new_dtype=float64 weak_type=False] fru
            frz:f64[] = abs 0.0625
            fsa:f64[] = mul 2.0 frz
            fsb:f64[] = convert_element_type[new_dtype=float64 weak_type=False] fsa
            fsc:f64[1] = slice[
              limit_indices=(3,)
              start_indices=(2,)
              strides=None
            ] crd
            fsd:f64[] = squeeze[dimensions=(0,)] fsc
            fse:f64[1] = slice[
              limit_indices=(3,)
              start_indices=(2,)
              strides=None
            ] cre
            fsf:f64[] = squeeze[dimensions=(0,)] fse
            fsg:f64[] = add 3.141592653589793 fsd
            fsh:f64[] = cos fsg
            fsi:f64[] = add 3.141592653589793 fsf
            fsj:f64[] = cos fsi
            fsk:f64[200,7] fsl:f64[200,7] fsm:f64[200,7] fsn:f64[200,7] fso:f64[200,7]
              fsp:f64[200,7] fsq:f64[200,7] fsr:f64[200,7] = pjit[
              name=clip
              jaxpr=clip
            ]
            fss:f64[] = select_n True 0.25 -0.25
            fst:f64[] = select_n False 0.12 -0.12
            fsu:f64[] = convert_element_type[new_dtype=float64 weak_type=False] fss
            fsv:f64[] = convert_element_type[new_dtype=float64 weak_type=False] fst
            fsw:f64[] = select_n False 0.083 -0.083
            fsx:f64[] = integer_pow[y=2] fsw
            fsy:f64[] = convert_element_type[new_dtype=float64 weak_type=False] fsx
            fsz:f64[] = convert_element_type[new_dtype=float64 weak_type=False] fsw
            fta:f64[] = convert_element_type[new_dtype=float64 weak_type=False] fsw
            ftb:f64[] = abs 0.0625
            ftc:f64[] = mul 2.0 ftb
            ftd:f64[] = convert_element_type[new_dtype=float64 weak_type=False] ftc
            fte:f64[1] = slice[
              limit_indices=(3,)
              start_indices=(2,)
              strides=None
            ] crd
            ftf:f64[] = squeeze[dimensions=(0,)] fte
            ftg:f64[1] = slice[
              limit_indices=(3,)
              start_indices=(2,)
              strides=None
            ] cre
            fth:f64[] = squeeze[dimensions=(0,)] ftg
            fti:f64[] = add 3.141592653589793 ftf
            ftj:f64[] = cos fti
            ftk:f64[] = add 3.141592653589793 fth
            ftl:f64[] = cos ftk
            ftm:f64[200,7] ftn:f64[200,7] fto:f64[200,7] ftp:f64[200,7] ftq:f64[200,7]
              ftr:f64[200,7] fts:f64[200,7] ftt:f64[200,7] = pjit[
              name=clip
              jaxpr=clip
            ]
            ftu:f64[1,3] = reshape[dimensions=None new_sizes=(1, 3)] cre
            ftv:f64[3] = squeeze[dimensions=(0,)] ftu
            ftw:f64[4,3] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(4, 3)
            ] ftv
            ftx:f64[12] = reshape[dimensions=None new_sizes=(12,)] ftw
            fty:f64[1,3] = reshape[dimensions=None new_sizes=(1, 3)] crd
            ftz:f64[3] = squeeze[dimensions=(0,)] fty
            fua:f64[4,3] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(4, 3)
            ] ftz
            fub:f64[12] = reshape[dimensions=None new_sizes=(12,)] fua
            fuc:f64[1,1,12] fud:f64[200,7,12] fue:f64[200,7,12] fuf:f64[200,7,12]
              fug:f64[200,7,12] fuh:f64[1,1,12] fui:f64[200,7,12] fuj:f64[200,7,12]
              fuk:f64[200,7,12] ful:f64[200,7,12] = pjit[name=clip jaxpr=clip1] ftx
              fub
            fum:f64[12] = broadcast_in_dim[broadcast_dimensions=() shape=(12,)] 0.0
            fun:i64[1,3] = reshape[dimensions=None new_sizes=(1, 3)] crf
            fuo:i64[3] = squeeze[dimensions=(0,)] fun
            fup:i64[4,3] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(4, 3)
            ] fuo
            fuq:i64[12] = reshape[dimensions=None new_sizes=(12,)] fup
            fur:f64[12] = convert_element_type[new_dtype=float64 weak_type=True] fuq
            fus:f64[12] = mul fur 1.4
            fut:f64[1,3] = reshape[dimensions=None new_sizes=(1, 3)] crg
            fuu:f64[3] = squeeze[dimensions=(0,)] fut
            fuv:f64[4,3] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(4, 3)
            ] fuu
            fuw:f64[12] = reshape[dimensions=None new_sizes=(12,)] fuv
            fux:f64[1,1,12] fuy:f64[1,1,12] fuz:f64[200,7,12] fva:f64[200,7,12] fvb:bool[200,7,12]
              fvc:f64[200,7,12] fvd:f64[200,7,12] fve:f64[200,7,12] fvf:f64[200,7,12]
              fvg:bool[200,7,12] fvh:bool[200,7,12] fvi:f64[1,1,12] fvj:f64[1,1,12]
              fvk:f64[1,1,12] fvl:f64[1,1,12] fvm:f64[1,1,12] fvn:f64[1,1,12] fvo:f64[1,1,12]
              fvp:f64[1,1,12] fvq:f64[1,1,12] fvr:f64[1,1,12] fvs:f64[1,1,12] = cond[
              branches=(
                { lambda ; fvt:f64[12] fvu:f64[12] fvv:f64[12] fvw:f64[12] fvx:f64[12]. let
                    fvy:f64[7,12] = broadcast_in_dim[
                      broadcast_dimensions=(1,)
                      shape=(7, 12)
                    ] fvu
                    fvz:f64[200,7,12] = broadcast_in_dim[
                      broadcast_dimensions=(1, 2)
                      shape=(200, 7, 12)
                    ] fvy
                    fwa:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(1, 1, 12)
                    ] 0.0
                    fwb:f64[200,7,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(200, 7, 12)
                    ] 0.0
                    fwc:bool[200,7,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(200, 7, 12)
                    ] False
                    fwd:f64[200,7,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(200, 7, 12)
                    ] 0.0
                    fwe:f64[200,7,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(200, 7, 12)
                    ] 0.0
                    fwf:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(1, 1, 12)
                    ] 0.0
                    fwg:f64[200,7,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(200, 7, 12)
                    ] 0.0
                    fwh:f64[200,7,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(200, 7, 12)
                    ] 0.0
                    fwi:bool[200,7,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(200, 7, 12)
                    ] False
                    fwj:bool[200,7,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(200, 7, 12)
                    ] False
                    fwk:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(1, 1, 12)
                    ] 0.0
                    fwl:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(1, 1, 12)
                    ] 0.0
                    fwm:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(1, 1, 12)
                    ] 0.0
                    fwn:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(1, 1, 12)
                    ] 0.0
                    fwo:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(1, 1, 12)
                    ] 0.0
                    fwp:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(1, 1, 12)
                    ] 0.0
                    fwq:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(1, 1, 12)
                    ] 0.0
                    fwr:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(1, 1, 12)
                    ] 0.0
                    fws:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(1, 1, 12)
                    ] 0.0
                    fwt:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(1, 1, 12)
                    ] 0.0
                    fwu:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(1, 1, 12)
                    ] 0.0
                  in (fwa, fwf, fvz, fwb, fwc, fwd, fwe, fwg, fwh, fwi, fwj, fwk,
                    fwl, fwm, fwn, fwo, fwp, fwq, fwr, fws, fwt, fwu) }
                { lambda ; fwv:f64[12] fww:f64[12] fwx:f64[12] fwy:f64[12] fwz:f64[12]. let
                    fxa:f64[12] = convert_element_type[
                      new_dtype=float64
                      weak_type=False
                    ] fwy
                    fxb:f64[1,12] = broadcast_in_dim[
                      broadcast_dimensions=(1,)
                      shape=(1, 12)
                    ] fxa
                    fxc:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=(1, 2)
                      shape=(1, 1, 12)
                    ] fxb
                    fxd:f64[1,12] = broadcast_in_dim[
                      broadcast_dimensions=(1,)
                      shape=(1, 12)
                    ] fwx
                    fxe:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=(1, 2)
                      shape=(1, 1, 12)
                    ] fxd
                    fxf:f64[1,12] = broadcast_in_dim[
                      broadcast_dimensions=(1,)
                      shape=(1, 12)
                    ] fwz
                    fxg:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=(1, 2)
                      shape=(1, 1, 12)
                    ] fxf
                    fxh:f64[200,7,12] = pjit[
                      name=_where
                      jaxpr={ lambda ; fxi:i64[]. let
                          fxj:f64[] = convert_element_type[
                            new_dtype=float64
                            weak_type=False
                          ] fxi
                          fxk:f64[12] = broadcast_in_dim[
                            broadcast_dimensions=()
                            shape=(12,)
                          ] fxj
                          fxl:f64[7,12] = broadcast_in_dim[
                            broadcast_dimensions=(1,)
                            shape=(7, 12)
                          ] fxk
                          fxm:f64[200,7,12] = broadcast_in_dim[
                            broadcast_dimensions=(1, 2)
                            shape=(200, 7, 12)
                          ] fxl
                        in (fxm,) }
                    ] 1
                    fxn:f64[1,12] = broadcast_in_dim[
                      broadcast_dimensions=(1,)
                      shape=(1, 12)
                    ] fwv
                    fxo:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=(1, 2)
                      shape=(1, 1, 12)
                    ] fxn
                    fxp:f64[1,12] = broadcast_in_dim[
                      broadcast_dimensions=(1,)
                      shape=(1, 12)
                    ] fwx
                    fxq:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=(1, 2)
                      shape=(1, 1, 12)
                    ] fxp
                    fxr:f64[1,12] = broadcast_in_dim[
                      broadcast_dimensions=(1,)
                      shape=(1, 12)
                    ] fwz
                    fxs:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=(1, 2)
                      shape=(1, 1, 12)
                    ] fxr
                    fxt:f64[1,12] = broadcast_in_dim[
                      broadcast_dimensions=(1,)
                      shape=(1, 12)
                    ] fwv
                    fxu:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=(1, 2)
                      shape=(1, 1, 12)
                    ] fxt
                    fxv:f64[200,7,12] = pjit[
                      name=_where
                      jaxpr={ lambda ; fxw:f64[12]. let
                          fxx:f64[12] = convert_element_type[
                            new_dtype=float64
                            weak_type=False
                          ] fxw
                          fxy:f64[7,12] = broadcast_in_dim[
                            broadcast_dimensions=(1,)
                            shape=(7, 12)
                          ] fxx
                          fxz:f64[200,7,12] = broadcast_in_dim[
                            broadcast_dimensions=(1, 2)
                            shape=(200, 7, 12)
                          ] fxy
                        in (fxz,) }
                    ] fwy
                    fya:f64[12] = neg fwv
                    fyb:f64[1,12] = broadcast_in_dim[
                      broadcast_dimensions=(1,)
                      shape=(1, 12)
                    ] fya
                    fyc:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=(1, 2)
                      shape=(1, 1, 12)
                    ] fyb
                    fyd:f64[12] = neg fwv
                    fye:f64[1,12] = broadcast_in_dim[
                      broadcast_dimensions=(1,)
                      shape=(1, 12)
                    ] fwx
                    fyf:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=(1, 2)
                      shape=(1, 1, 12)
                    ] fye
                    fyg:f64[1,12] = broadcast_in_dim[
                      broadcast_dimensions=(1,)
                      shape=(1, 12)
                    ] fwz
                    fyh:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=(1, 2)
                      shape=(1, 1, 12)
                    ] fyg
                    fyi:f64[1,12] = broadcast_in_dim[
                      broadcast_dimensions=(1,)
                      shape=(1, 12)
                    ] fyd
                    fyj:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=(1, 2)
                      shape=(1, 1, 12)
                    ] fyi
                    fyk:f64[200,7,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(200, 7, 12)
                    ] 0.0
                    fyl:bool[200,7,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(200, 7, 12)
                    ] False
                    fym:f64[200,7,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(200, 7, 12)
                    ] 0.0
                    fyn:f64[200,7,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(200, 7, 12)
                    ] 0.0
                    fyo:f64[200,7,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(200, 7, 12)
                    ] 0.0
                    fyp:bool[200,7,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(200, 7, 12)
                    ] False
                    fyq:bool[200,7,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(200, 7, 12)
                    ] False
                  in (fyh, fxs, fyk, fxh, fyl, fxv, fym, fyn, fyo, fyp, fyq, fxc,
                    fxg, fxe, fyc, fyj, fyh, fyf, fxo, fxu, fxs, fxq) }
              )
              linear=(False, False, False, False, False)
            ] 1 crh fus fum fus fuw
            fyr:f64[1,12] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 12)
            ] fum
            fys:f64[1,1,12] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 12)
            ] fyr
            fyt:f64[1,12] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 12)
            ] fuw
            fyu:f64[1,1,12] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 12)
            ] fyt
            fyv:bool[12] = lt cri 0
            fyw:i32[12] = add cri 19
            fyx:i32[12] = select_n fyv cri fyw
            fyy:i32[12,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(12, 1)
            ] fyx
            fyz:bool[12] = lt crj 0
            fza:i32[12] = add crj 18
            fzb:i32[12] = select_n fyz crj fza
            fzc:i32[12,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(12, 1)
            ] fzb
            fzd:f64[12,1] = slice[
              limit_indices=(12, 1)
              start_indices=(0, 0)
              strides=None
            ] crk
            fze:f64[12] = squeeze[dimensions=(1,)] fzd
            fzf:f64[12,1] = slice[
              limit_indices=(12, 2)
              start_indices=(0, 1)
              strides=None
            ] crk
            fzg:f64[12] = squeeze[dimensions=(1,)] fzf
            fzh:f64[1,1,12] fzi:f64[200,7,12] fzj:f64[200,7,12] fzk:f64[200,7,12]
              fzl:f64[200,7,12] fzm:f64[1,1,12] fzn:f64[200,7,12] fzo:f64[200,7,12]
              fzp:f64[200,7,12] fzq:f64[200,7,12] = pjit[name=clip jaxpr=clip1] fze
              fzg
            fzr:f64[1,12] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 12)
            ] crl
            fzs:f64[1,1,12] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 12)
            ] fzr
            fzt:f64[1,12] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 12)
            ] crm
            fzu:f64[1,1,12] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 12)
            ] fzt
            fzv:f64[1,12] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 12)
            ] crn
            fzw:f64[1,1,12] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 12)
            ] fzv
            fzx:f64[1,12] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 12)
            ] cro
            fzy:f64[1,1,12] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 12)
            ] fzx
            fzz:f64[12,1] = slice[
              limit_indices=(12, 1)
              start_indices=(0, 0)
              strides=None
            ] crp
            gaa:f64[12] = squeeze[dimensions=(1,)] fzz
            gab:f64[12,1] = slice[
              limit_indices=(12, 2)
              start_indices=(0, 1)
              strides=None
            ] crp
            gac:f64[12] = squeeze[dimensions=(1,)] gab
            gad:f64[1,1,12] gae:f64[200,7,12] gaf:f64[200,7,12] gag:f64[200,7,12]
              gah:f64[200,7,12] gai:f64[1,1,12] gaj:f64[200,7,12] gak:f64[200,7,12]
              gal:f64[200,7,12] gam:f64[200,7,12] = pjit[name=clip jaxpr=clip1] gaa
              gac
            gan:f64[1,12] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 12)
            ] crn
            gao:f64[1,1,12] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 12)
            ] gan
            gap:f64[18] = broadcast_in_dim[broadcast_dimensions=() shape=(18,)] 0.0
            gaq:bool[12] = lt crj 0
            gar:i32[12] = add crj 18
            gas:i32[12] = select_n gaq crj gar
            gat:i32[12,1] = broadcast_in_dim[
              broadcast_dimensions=(0,)
              shape=(12, 1)
            ] gas
            gau:f64[7,18] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(7, 18)
            ] gap
            gav:f64[200,7,18] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(200, 7, 18)
            ] gau
            gaw:f64[18,18] = pjit[
              name=_diag
              jaxpr={ lambda ; ens:f64[18]. let
                  ent:f64[18] = pad[padding_config=((0, 0, 0),)] ens 0.0
                  enu:i64[18,18] = iota[dimension=0 dtype=int64 shape=(18, 18)]
                  env:i64[18,18] = iota[dimension=1 dtype=int64 shape=(18, 18)]
                  enw:i64[18,18] = add enu 0
                  enx:bool[18,18] = eq enw env
                  eny:f64[18] = broadcast_in_dim[
                    broadcast_dimensions=()
                    shape=(18,)
                  ] 0.0
                  enz:f64[18,18] = pjit[name=_where jaxpr=_where] enx ent eny
                in (enz,) }
            ] cpp
            gax:f64[18,18] = mul gaw 0.0025
            gay:f64[1,18,18] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 18, 18)
            ] gax
            gaz:f64[1,1,18,18] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(1, 1, 18, 18)
            ] gay
            gba:i64[18,18] = iota[dimension=0 dtype=int64 shape=(18, 18)]
            gbb:i64[18,18] = iota[dimension=1 dtype=int64 shape=(18, 18)]
            gbc:i64[18,18] = add gba 0
            gbd:bool[18,18] = eq gbc gbb
            gbe:f64[18,18] = convert_element_type[
              new_dtype=float64
              weak_type=False
            ] gbd
            gbf:bool[200,7,18,18] gbg:f64[200,7,18,18] gbh:bool[200,7,18,18] gbi:f64[200,7,18,18]
              gbj:bool[200,7,18,18] gbk:f64[200,7,18,18] gbl:f64[200,7,18,18] = pjit[
              name=_solve
              jaxpr={ lambda ; gbm:f64[18,18]. let
                  gbn:bool[200,7,18,18] gbo:f64[200,7,18,18] gbp:bool[200,7,18,18]
                    gbq:f64[200,7,18,18] gbr:bool[200,7,18,18] gbs:f64[200,7,18,18] = pjit[
                    name=_cholesky
                    jaxpr=_cholesky
                  ]
                  gbt:f64[18,18] = transpose[permutation=(1, 0)] gbm
                  gbu:f64[7,18,18] = broadcast_in_dim[
                    broadcast_dimensions=(1, 2)
                    shape=(7, 18, 18)
                  ] gbt
                  gbv:f64[200,7,18,18] = broadcast_in_dim[
                    broadcast_dimensions=(1, 2, 3)
                    shape=(200, 7, 18, 18)
                  ] gbu
                in (gbn, gbo, gbp, gbq, gbr, gbs, gbv) }
            ] gbe
            gbw:f64[200,7,12] gbx:f64[200,7,12] gby:bool[200,7,12] gbz:f64[200,7,12]
              gca:f64[200,7,12] gcb:f64[200,7,12] gcc:f64[200,7,12] gcd:bool[200,7,12]
              gce:bool[200,7,12] gcf:f64[1,1,12] gcg:f64[1,1,12] gch:f64[1,1,12]
              gci:f64[1,1,12] gcj:f64[1,1,12] gck:f64[1,1,12] gcl:f64[1,1,12] gcm:f64[1,1,12]
              gcn:f64[1,1,12] gco:f64[1,1,12] gcp:f64[1,1,12] = cond[
              branches=(
                { lambda ; gcq:f64[200,7,12] gcr:f64[200,7,12] gcs:bool[200,7,12]
                    gct:f64[200,7,12] gcu:f64[200,7,12] gcv:f64[200,7,12] gcw:f64[200,7,12]
                    gcx:bool[200,7,12] gcy:bool[200,7,12] gcz:f64[1,1,12] gda:f64[1,1,12]
                    gdb:f64[1,1,12] gdc:f64[1,1,12] gdd:f64[1,1,12] gde:f64[1,1,12]
                    gdf:f64[1,1,12] gdg:f64[1,1,12] gdh:f64[1,1,12] gdi:f64[1,1,12]
                    gdj:f64[1,1,12]. let
                    gdk:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(1, 1, 12)
                    ] 0.0
                    gdl:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(1, 1, 12)
                    ] 0.0
                    gdm:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(1, 1, 12)
                    ] 0.0
                    gdn:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(1, 1, 12)
                    ] 0.0
                    gdo:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(1, 1, 12)
                    ] 0.0
                    gdp:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(1, 1, 12)
                    ] 0.0
                    gdq:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(1, 1, 12)
                    ] 0.0
                    gdr:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(1, 1, 12)
                    ] 0.0
                    gds:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(1, 1, 12)
                    ] 0.0
                    gdt:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(1, 1, 12)
                    ] 0.0
                    gdu:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(1, 1, 12)
                    ] 0.0
                  in (gcq, gcr, gcs, gct, gcu, gcv, gcw, gcx, gcy, gdk, gdl, gdm,
                    gdn, gdo, gdp, gdq, gdr, gds, gdt, gdu) }
                { lambda ; gdv:f64[200,7,12] gdw:f64[200,7,12] gdx:bool[200,7,12]
                    gdy:f64[200,7,12] gdz:f64[200,7,12] gea:f64[200,7,12] geb:f64[200,7,12]
                    gec:bool[200,7,12] ged:bool[200,7,12] gee:f64[1,1,12] gef:f64[1,1,12]
                    geg:f64[1,1,12] geh:f64[1,1,12] gei:f64[1,1,12] gej:f64[1,1,12]
                    gek:f64[1,1,12] gel:f64[1,1,12] gem:f64[1,1,12] gen:f64[1,1,12]
                    geo:f64[1,1,12]. let
                    gep:f64[200,7,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(200, 7, 12)
                    ] 0.0
                    geq:bool[200,7,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(200, 7, 12)
                    ] False
                    ger:f64[200,7,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(200, 7, 12)
                    ] 0.0
                    ges:f64[200,7,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(200, 7, 12)
                    ] 0.0
                    get:f64[200,7,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(200, 7, 12)
                    ] 0.0
                    geu:bool[200,7,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(200, 7, 12)
                    ] False
                    gev:bool[200,7,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(200, 7, 12)
                    ] False
                  in (gep, gdw, geq, gdy, ger, ges, get, geu, gev, gee, gef, geg,
                    geh, gei, gej, gek, gel, gem, gen, geo) }
              )
              linear=(False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False)
            ] 1 fuz fva fvb fvc fvd fve fvf fvg fvh fvi fvj fvk fvl fvm fvn fvo fvp
              fvq fvr fvs
            gew:f64[4] = convert_element_type[new_dtype=float64 weak_type=False] crr
            gex:f64[1,4] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 4)
            ] gew
            gey:f64[1,1,4] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 4)
            ] gex
            gez:i32[1] gfa:i32[1] gfb:i32[1] gfc:i32[1] gfd:i32[1] gfe:i32[1] = pjit[
              name=cross
              jaxpr=cross
            ]
            gff:i32[1] gfg:i32[1] gfh:i32[1] gfi:i32[1] gfj:i32[1] gfk:i32[1] = pjit[
              name=cross
              jaxpr=cross
            ]
            gfl:f64[36,1] = slice[
              limit_indices=(36, 1)
              start_indices=(0, 0)
              strides=None
            ] cms
            gfm:f64[36] = squeeze[dimensions=(1,)] gfl
            gfn:f64[1,36] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 36)
            ] gfm
            gfo:f64[1,1,36] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 36)
            ] gfn
            gfp:f64[36,1] = slice[
              limit_indices=(36, 2)
              start_indices=(0, 1)
              strides=None
            ] cms
            gfq:f64[36] = squeeze[dimensions=(1,)] gfp
            gfr:f64[36,1] = slice[
              limit_indices=(36, 1)
              start_indices=(0, 0)
              strides=None
            ] cms
            gfs:f64[36] = squeeze[dimensions=(1,)] gfr
            gft:f64[36] = sub gfq gfs
            gfu:f64[1,36] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 36)
            ] gft
            gfv:f64[1,1,36] = broadcast_in_dim[
              broadcast_dimensions=(1, 2)
              shape=(1, 1, 36)
            ] gfu
            gfw:f64[200,7,12] gfx:f64[200,7,12] gfy:bool[200,7,12] gfz:f64[200,7,12]
              gga:f64[200,7,12] ggb:f64[200,7,12] ggc:f64[200,7,12] ggd:bool[200,7,12]
              gge:bool[200,7,12] ggf:f64[1,1,12] ggg:f64[1,1,12] ggh:f64[1,1,12]
              ggi:f64[1,1,12] ggj:f64[1,1,12] ggk:f64[1,1,12] ggl:f64[1,1,12] ggm:f64[1,1,12]
              ggn:f64[1,1,12] ggo:f64[1,1,12] ggp:f64[1,1,12] = cond[
              branches=(
                { lambda ; ggq:f64[200,7,12] ggr:f64[200,7,12] ggs:bool[200,7,12]
                    ggt:f64[200,7,12] ggu:f64[200,7,12] ggv:f64[200,7,12] ggw:f64[200,7,12]
                    ggx:bool[200,7,12] ggy:bool[200,7,12] ggz:f64[1,1,12] gha:f64[1,1,12]
                    ghb:f64[1,1,12] ghc:f64[1,1,12] ghd:f64[1,1,12] ghe:f64[1,1,12]
                    ghf:f64[1,1,12] ghg:f64[1,1,12] ghh:f64[1,1,12] ghi:f64[1,1,12]
                    ghj:f64[1,1,12]. let
                    ghk:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(1, 1, 12)
                    ] 0.0
                    ghl:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(1, 1, 12)
                    ] 0.0
                    ghm:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(1, 1, 12)
                    ] 0.0
                    ghn:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(1, 1, 12)
                    ] 0.0
                    gho:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(1, 1, 12)
                    ] 0.0
                    ghp:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(1, 1, 12)
                    ] 0.0
                    ghq:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(1, 1, 12)
                    ] 0.0
                    ghr:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(1, 1, 12)
                    ] 0.0
                    ghs:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(1, 1, 12)
                    ] 0.0
                    ght:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(1, 1, 12)
                    ] 0.0
                    ghu:f64[1,1,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(1, 1, 12)
                    ] 0.0
                  in (ggq, ggr, ggs, ggt, ggu, ggv, ggw, ggx, ggy, ghk, ghl, ghm,
                    ghn, gho, ghp, ghq, ghr, ghs, ght, ghu) }
                { lambda ; ghv:f64[200,7,12] ghw:f64[200,7,12] ghx:bool[200,7,12]
                    ghy:f64[200,7,12] ghz:f64[200,7,12] gia:f64[200,7,12] gib:f64[200,7,12]
                    gic:bool[200,7,12] gid:bool[200,7,12] gie:f64[1,1,12] gif:f64[1,1,12]
                    gig:f64[1,1,12] gih:f64[1,1,12] gii:f64[1,1,12] gij:f64[1,1,12]
                    gik:f64[1,1,12] gil:f64[1,1,12] gim:f64[1,1,12] gin:f64[1,1,12]
                    gio:f64[1,1,12]. let
                    gip:f64[200,7,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(200, 7, 12)
                    ] 0.0
                    giq:bool[200,7,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(200, 7, 12)
                    ] False
                    gir:f64[200,7,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(200, 7, 12)
                    ] 0.0
                    gis:f64[200,7,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(200, 7, 12)
                    ] 0.0
                    git:f64[200,7,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(200, 7, 12)
                    ] 0.0
                    giu:bool[200,7,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(200, 7, 12)
                    ] False
                    giv:bool[200,7,12] = broadcast_in_dim[
                      broadcast_dimensions=()
                      shape=(200, 7, 12)
                    ] False
                  in (gip, ghw, giq, ghy, gir, gis, git, giu, giv, gie, gif, gig,
                    gih, gii, gij, gik, gil, gim, gin, gio) }
              )
              linear=(False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False)
            ] 1 gbw gbx gby gbz gca gcb gcc gcd gce gcf gcg gch gci gcj gck gcl gcm
              gcn gco gcp
            _:f64[200,7,180] giw:f64[4,200,7,36] gix:f64[4,200,7,36] giy:f64[4,200,7,189]
              giz:f64[4,200,7,400] gja:f64[4,200,7,400] gjb:f64[4,200,7,400] gjc:f64[4,200,7,400]
              gjd:f64[4,200,7,400] gje:f64[4,200,7,400] gjf:f64[4,200,7,400] gjg:f64[4,200,7,400]
              gjh:f64[4,200,7,400] gji:f64[4,200,7,400] gjj:f64[4,200,7,400] gjk:f64[4,200,7,400]
              gjl:f64[4,200,7,400] gjm:f64[4,200,7,400] gjn:f64[4,200,7,400] gjo:f64[4,200,7,400]
              gjp:f64[4,1,200,7,3] gjq:f64[4,1,200,7,3] gjr:f64[4,1,200,7,1] gjs:f64[4,1,200,7]
              gjt:f64[4,1,200,7,1] gju:f64[4,1,200,7,3] gjv:f64[4,1,200,7,1] gjw:f64[4,1,200,7]
              gjx:f64[4,1,200,7] gjy:f64[4,1,200,7] gjz:f64[4,1,200,7] gka:f64[4,1,200,7]
              gkb:f64[4,1,200,7] gkc:f64[4,1,200,7,3] gkd:f64[4,1,200,7,3] gke:f64[4,1,200,7,1]
              gkf:f64[4,1,200,7] gkg:f64[4,1,200,7,1] gkh:f64[4,1,200,7,3] gki:f64[4,1,200,7,1]
              gkj:f64[4,1,200,7] gkk:f64[4,1,200,7] gkl:f64[4,1,200,7] gkm:f64[4,1,200,7]
              gkn:f64[4,1,200,7] gko:f64[4,1,200,7] gkp:f64[4,1,200,7,12] gkq:f64[4,1,200,7,12]
              gkr:f64[4,1,200,7,12] gks:f64[4,1,200,7,12] gkt:f64[4,1,200,7,12,1]
              gku:bool[4,1,200,7,12,4] gkv:f64[4,1,200,7,12,4] gkw:f64[4,1,200,7,12]
              gkx:bool[4,1,200,7,12] gky:f64[4,1,200,7,12,4] gkz:f64[4,1,200,7,12,1]
              gla:f64[4,1,200,7,13,3] glb:f64[4,1,200,7,13,1] glc:f64[4,1,200,7,13]
              gld:f64[4,1,200,7,13,3] gle:f64[4,1,200,7,13,1] glf:f64[4,1,200,7,4,3]
              glg:f64[4,1,200,7,4,3] glh:f64[4,1,200,7,4,1] gli:f64[4,1,200,7,4]
              glj:f64[4,1,200,7,4,1] glk:f64[4,1,200,7,4,3] gll:f64[4,1,200,7,4,1]
              glm:f64[4,1,200,7,4] gln:f64[4,1,200,7,4] glo:f64[4,1,200,7,4] glp:f64[4,1,200,7,4]
              glq:f64[4,1,200,7,4] glr:f64[4,1,200,7,4] gls:f64[4,1,200,7,4] glt:f64[4,1,200,7,4]
              glu:f64[4,1,200,7,4] glv:f64[4,1,200,7,4] glw:f64[4,1,200,7,4] glx:f64[4,1,200,7,4]
              gly:f64[4,1,200,7,4] glz:f64[4,1,200,7,4] gma:f64[4,1,200,7,4] gmb:f64[4,1,200,7,4]
              gmc:f64[4,1,200,7,4] gmd:f64[4,1,200,7,4] gme:f64[4,1,200,7,4] gmf:f64[4,1,200,7,4]
              gmg:f64[4,1,200,7,4] gmh:f64[4,1,200,7,4] gmi:f64[4,1,200,7,4] gmj:f64[4,1,200,7,4]
              gmk:f64[4,1,200,7,4] gml:f64[4,1,200,7,4] gmm:f64[4,1,200,7,4] gmn:f64[4,1,200,7,4]
              gmo:f64[4,1,200,7,4] gmp:f64[4,1,200,7,4] gmq:f64[4,1,200,7,4] gmr:f64[4,1,200,7,4]
              gms:f64[4,1,200,7,4] gmt:f64[4,1,200,7,4] gmu:f64[4,1,200,7,4] gmv:f64[4,1,200,7,4]
              gmw:f64[4,1,200,7,4] gmx:f64[4,1,200,7,4] gmy:f64[4,1,200,7,4,3] gmz:f64[4,1,200,7,4,3]
              gna:f64[4,1,200,7,4,1] gnb:f64[4,1,200,7,4] gnc:f64[4,1,200,7,4,1]
              gnd:f64[4,1,200,7,4,3] gne:f64[4,1,200,7,4,1] gnf:f64[4,1,200,7,4]
              gng:f64[4,1,200,7,4] gnh:f64[4,1,200,7,4] gni:f64[4,1,200,7,4] gnj:f64[4,1,200,7,4]
              gnk:f64[4,1,200,7,4] gnl:f64[4,1,200,7,4] gnm:f64[4,1,200,7,4] gnn:f64[4,1,200,7,4]
              gno:f64[4,1,200,7,4] gnp:f64[4,1,200,7,4] gnq:f64[4,1,200,7,4] gnr:f64[4,1,200,7,4]
              gns:f64[4,1,200,7,4] gnt:f64[4,1,200,7,4] gnu:f64[4,1,200,7,4] gnv:f64[4,1,200,7,4]
              gnw:f64[4,1,200,7,4] gnx:f64[4,1,200,7,4] gny:f64[4,1,200,7,4] gnz:f64[4,1,200,7,4]
              goa:f64[4,1,200,7,4] gob:f64[4,1,200,7,4] goc:f64[4,1,200,7,4] god:f64[4,1,200,7,4]
              goe:f64[4,1,200,7,4] gof:f64[4,1,200,7,4] gog:f64[4,1,200,7,4] goh:f64[4,1,200,7,4]
              goi:f64[4,1,200,7,4] goj:f64[4,1,200,7,4] gok:f64[4,1,200,7,4] gol:f64[4,1,200,7,4]
              gom:f64[4,1,200,7,4] gon:f64[4,1,200,7,4] goo:f64[4,1,200,7,4] gop:f64[4,1,200,7,4]
              goq:f64[4,1,200,7,4] gor:f64[4,1,200,7,4,3] gos:f64[4,1,200,7,4,3]
              got:f64[4,1,200,7,4,1] gou:f64[4,1,200,7,4] gov:f64[4,1,200,7,4,1]
              gow:f64[4,1,200,7,4,3] gox:f64[4,1,200,7,4,1] goy:f64[4,1,200,7,4]
              goz:f64[4,1,200,7,4] gpa:f64[4,1,200,7,4] gpb:f64[4,1,200,7,4] gpc:f64[4,1,200,7,4]
              gpd:f64[4,1,200,7,4] gpe:f64[4,1,200,7,4] gpf:f64[4,1,200,7,4] gpg:f64[4,1,200,7,4]
              gph:f64[4,1,200,7,4] gpi:f64[4,1,200,7,4] gpj:f64[4,1,200,7,4] gpk:f64[4,1,200,7,4]
              gpl:f64[4,1,200,7,4] gpm:f64[4,1,200,7,4] gpn:f64[4,1,200,7,4] gpo:f64[4,1,200,7,4]
              gpp:f64[4,1,200,7,4] gpq:f64[4,1,200,7,4] gpr:f64[4,1,200,7,4] gps:f64[4,1,200,7,4]
              gpt:f64[4,1,200,7,4] gpu:f64[4,1,200,7,4] gpv:f64[4,1,200,7,4] gpw:f64[4,1,200,7,4]
              gpx:f64[4,1,200,7,4] gpy:f64[4,1,200,7,4] gpz:f64[4,1,200,7,4] gqa:f64[4,1,200,7,4]
              gqb:f64[4,1,200,7,4] gqc:f64[4,1,200,7,4] gqd:f64[4,1,200,7,4] gqe:f64[4,1,200,7,4]
              gqf:f64[4,1,200,7,4] gqg:f64[4,1,200,7,4] gqh:f64[4,1,200,7,4] gqi:f64[4,1,200,7,4]
              gqj:f64[4,1,200,7,4] gqk:f64[4,1,200,7,13,1] gql:bool[4,1,200,7,13,4]
              gqm:f64[4,1,200,7,13,4] gqn:f64[4,1,200,7,13] gqo:bool[4,1,200,7,13]
              gqp:f64[4,1,200,7,13,4] gqq:f64[4,1,200,7,13,1] gqr:f64[4,1,200,7,13,3]
              gqs:f64[4,1,200,7,13,1] gqt:f64[4,1,200,7,13] gqu:f64[4,1,200,7,13,3]
              gqv:f64[4,1,200,7,13,1] gqw:f64[4,1,200,7,13,3] gqx:f64[4,1,200,7,13,1]
              gqy:f64[4,1,200,7,13] gqz:f64[4,1,200,7,13,3] gra:f64[4,1,200,7,13,1]
              grb:f64[4,1,200,7,13,3] grc:f64[4,1,200,7,13,1] grd:f64[4,1,200,7,13]
              gre:f64[4,1,200,7,13,3] grf:f64[4,1,200,7,13,1] grg:f64[4,1,200,7,18,3]
              grh:f64[4,1,200,7,18,1] gri:f64[4,1,200,7,18] grj:f64[4,1,200,7,18,3]
              grk:f64[4,1,200,7,18,1] grl:f64[4,1,200,7,18] grm:f64[4,1,200,7,18]
              grn:f64[4,1,200,7,18] gro:f64[4,1,200,7,18] grp:f64[4,1,200,7,18] grq:f64[4,1,200,7,18]
              grr:f64[4,1,200,7,18,3] grs:f64[4,1,200,7,18,3] grt:f64[4,1,200,7,18,1]
              gru:f64[4,1,200,7,18,3] grv:f64[4,1,200,7,1,6] grw:f64[4,1,200,7,1,1]
              grx:f64[4,1,200,7,1,6] gry:f64[4,1,200,7,1,1] grz:f64[4,1,200,7,1,6]
              gsa:f64[4,1,200,7,1,1] gsb:f64[4,1,200,7,1,1] gsc:f64[4,1,200,7,1,1]
              gsd:f64[4,1,200,7,1,1] gse:f64[4,1,200,7,18,1] gsf:f64[4,1,200,7,1,6]
              gsg:f64[4,1,200,7,1,1] gsh:f64[4,1,200,7,1,6] gsi:f64[4,1,200,7,1,1]
              gsj:f64[4,1,200,7,1,6] gsk:f64[4,1,200,7,1,1] gsl:f64[4,1,200,7,1,1]
              gsm:f64[4,1,200,7,1,1] gsn:f64[4,1,200,7,1,1] gso:f64[4,1,200,7,12]
              gsp:f64[4,1,200,7,12] gsq:f64[4,1,200,7,12] gsr:f64[4,1,200,7,12] gss:f64[4,1,200,7,12]
              gst:f64[4,1,200,7,12] gsu:f64[4,1,200,7,12] gsv:f64[4,1,200,7,12] gsw:f64[4,1,200,7,12]
              gsx:f64[4,1,200,7,12] gsy:f64[4,1,200,7,12] gsz:f64[4,1,200,7,12] gta:f64[4,1,200,7,6,1]
              gtb:f64[4,1,200,7,6,3] gtc:f64[4,1,200,7,4,1] gtd:f64[4,1,200,7,4,3]
              gte:f64[4,1,200,7,4,1] gtf:f64[4,1,200,7,4,3] gtg:f64[4,1,200,7,4,1]
              gth:f64[4,1,200,7,4,3] gti:f64[4,1,200,7,1,6] gtj:f64[4,1,200,7,1,1]
              gtk:f64[4,1,200,7,1,6] gtl:f64[4,1,200,7,1,1] gtm:f64[4,1,200,7,1,6]
              gtn:f64[4,1,200,7,1,1] gto:f64[4,1,200,7,1,1] gtp:f64[4,1,200,7,1,1]
              gtq:f64[4,1,200,7,1,1] gtr:f64[4,1,200,7,12] gts:f64[4,1,200,7,12]
              gtt:f64[4,1,200,7,12] gtu:f64[4,1,200,7,12] gtv:f64[4,1,200,7,12] gtw:f64[4,1,200,7,12]
              gtx:f64[4,1,200,7,6,1] gty:f64[4,1,200,7,6,3] gtz:f64[4,1,200,7,4,1]
              gua:f64[4,1,200,7,4,3] gub:f64[4,1,200,7,4,1] guc:f64[4,1,200,7,4,3]
              gud:f64[4,1,200,7,4,1] gue:f64[4,1,200,7,4,3] guf:f64[4,1,200,7,13]
              gug:f64[4,1,200,7,13] guh:f64[4,1,200,7,13] gui:f64[4,1,200,7,13] guj:f64[4,1,200,7,13]
              guk:f64[4,1,200,7,13] gul:f64[4,1,200,7,13] gum:f64[4,1,200,7,13] gun:f64[4,1,200,7,13]
              guo:f64[4,1,200,7,13] gup:f64[4,1,200,7,13] guq:f64[4,1,200,7,13] gur:f64[4,1,200,7,13]
              gus:f64[4,1,200,7,13] gut:f64[4,1,200,7,13] guu:f64[4,1,200,7,13] guv:f64[4,1,200,7,13]
              guw:f64[4,1,200,7,13] gux:f64[4,1,200,7,18,3] guy:f64[4,1,200,7,13]
              guz:f64[4,1,200,7,13] gva:f64[4,1,200,7,13] gvb:f64[4,1,200,7,13,4]
              gvc:f64[4,1,200,7,13] gvd:f64[4,1,200,7,13] gve:f64[4,1,200,7,13] gvf:f64[4,1,200,7,13]
              gvg:f64[4,1,200,7,13] gvh:f64[4,1,200,7,13] gvi:f64[4,1,200,7,13,3,3]
              gvj:f64[4,1,13,200,7,3,3] gvk:f64[4,1,200,7,13,3,3] gvl:f64[4,1,200,7,13,3,3]
              gvm:f64[4,1,200,7,13,3] gvn:f64[4,1,200,7,13,3,3] gvo:f64[4,1,200,7,13]
              gvp:f64[4,1,200,7,13] gvq:f64[4,1,200,7,13] gvr:f64[4,1,200,7,13] gvs:f64[4,1,200,7,13]
              gvt:f64[4,1,200,7,13] gvu:f64[4,1,200,7,13,3] gvv:f64[4,1,200,7,13]
              gvw:f64[4,1,200,7,13] gvx:f64[4,1,200,7,13] gvy:f64[4,1,200,7,13] gvz:f64[4,1,200,7,13]
              gwa:f64[4,1,200,7,13] gwb:f64[4,1,200,7,13] gwc:f64[4,1,200,7,13] gwd:f64[4,1,200,7,13]
              gwe:f64[4,1,200,7,13] gwf:f64[4,1,200,7,13] gwg:f64[4,1,200,7,13] gwh:f64[4,1,200,7,13]
              gwi:f64[4,1,200,7,13] gwj:f64[4,1,200,7,13] gwk:f64[4,1,200,7,13] gwl:f64[4,1,200,7,13]
              gwm:f64[4,1,200,7,13] gwn:f64[4,1,200,7,1,3] gwo:f64[4,1,200,7,1,3]
              gwp:f64[4,1,200,7,1,1] gwq:f64[4,1,200,7,1] gwr:f64[4,1,200,7,1,1]
              gws:f64[4,1,200,7,1,3] gwt:f64[4,1,200,7,1,1] gwu:f64[4,1,200,7,1]
              gwv:f64[4,1,200,7,1] gww:f64[4,1,200,7,1] gwx:f64[4,1,200,7,1] gwy:f64[4,1,200,7,1]
              gwz:f64[4,1,200,7,1] gxa:f64[4,1,200,7,4,3] gxb:f64[4,1,200,7,4,3]
              gxc:f64[4,1,200,7,4,1] gxd:f64[4,1,200,7,4] gxe:f64[4,1,200,7,4,1]
              gxf:f64[4,1,200,7,4,3] gxg:f64[4,1,200,7,4,1] gxh:f64[4,1,200,7,4]
              gxi:f64[4,1,200,7,4] gxj:f64[4,1,200,7,4] gxk:f64[4,1,200,7,4] gxl:f64[4,1,200,7,4]
              gxm:f64[4,1,200,7,4] gxn:f64[4,1,200,7,4,3] gxo:f64[4,1,200,7,4,3]
              gxp:f64[4,1,200,7,4,1] gxq:f64[4,1,200,7,4] gxr:f64[4,1,200,7,4,1]
              gxs:f64[4,1,200,7,4,3] gxt:f64[4,1,200,7,4,1] gxu:f64[4,1,200,7,4]
              gxv:f64[4,1,200,7,4] gxw:f64[4,1,200,7,4] gxx:f64[4,1,200,7,4] gxy:f64[4,1,200,7,4]
              gxz:f64[4,1,200,7,4] gya:f64[4,1,200,7,4,3] gyb:f64[4,1,200,7,4,3]
              gyc:f64[4,1,200,7,4,1] gyd:f64[4,1,200,7,4] gye:f64[4,1,200,7,4,1]
              gyf:f64[4,1,200,7,4,3] gyg:f64[4,1,200,7,4,1] gyh:f64[4,1,200,7,4]
              gyi:f64[4,1,200,7,4] gyj:f64[4,1,200,7,4] gyk:f64[4,1,200,7,4] gyl:f64[4,1,200,7,4]
              gym:f64[4,1,200,7,4] gyn:f64[4,1,200,7,4] gyo:f64[4,1,200,7,4] gyp:f64[4,1,200,7,4]
              gyq:f64[4,1,200,7,4] gyr:f64[4,1,200,7,4] gys:f64[4,1,200,7,4] gyt:f64[4,1,200,7,4,3]
              gyu:f64[4,1,200,7,4,3] gyv:f64[4,1,200,7,4,1] gyw:f64[4,1,200,7,4]
              gyx:f64[4,1,200,7,4,1] gyy:f64[4,1,200,7,4,3] gyz:f64[4,1,200,7,4,1]
              gza:f64[4,1,200,7,4] gzb:f64[4,1,200,7,4] gzc:f64[4,1,200,7,4] gzd:f64[4,1,200,7,4]
              gze:f64[4,1,200,7,4] gzf:f64[4,1,200,7,4] gzg:f64[4,1,200,7,4] gzh:f64[4,1,200,7,4]
              gzi:f64[4,1,200,7,4] gzj:f64[4,1,200,7,4] gzk:f64[4,1,200,7,4] gzl:f64[4,1,200,7,4]
              gzm:f64[4,1,200,7,4,3] gzn:f64[4,1,200,7,4,3] gzo:f64[4,1,200,7,4,1]
              gzp:f64[4,1,200,7,4] gzq:f64[4,1,200,7,4,1] gzr:f64[4,1,200,7,4,3]
              gzs:f64[4,1,200,7,4,1] gzt:f64[4,1,200,7,4] gzu:f64[4,1,200,7,4] gzv:f64[4,1,200,7,4]
              gzw:f64[4,1,200,7,4] gzx:f64[4,1,200,7,4] gzy:f64[4,1,200,7,4] gzz:f64[4,1,200,7,4]
              haa:f64[4,1,200,7,4] hab:f64[4,1,200,7,4] hac:f64[4,1,200,7,4] had:f64[4,1,200,7,4]
              hae:f64[4,1,200,7,4] haf:f64[4,1,200,7,4,3] hag:f64[4,1,200,7,4,3]
              hah:f64[4,1,200,7,4,1] hai:f64[4,1,200,7,4] haj:f64[4,1,200,7,4,1]
              hak:f64[4,1,200,7,4,3] hal:f64[4,1,200,7,4,1] ham:f64[4,1,200,7,4]
              han:f64[4,1,200,7,4] hao:f64[4,1,200,7,4] hap:f64[4,1,200,7,4] haq:f64[4,1,200,7,4]
              har:f64[4,1,200,7,4] has:f64[4,1,200,7,18,3] hat:f64[4,1,200,7,18]
              hau:f64[4,1,200,7,18] hav:f64[4,1,200,7,18] haw:f64[4,1,200,7,18] hax:f64[4,1,200,7,18]
              hay:f64[4,1,200,7,18] haz:f64[4,1,200,7,18,3] hba:f64[4,1,200,7,18,3,3]
              hbb:f64[4,1,200,7,18] hbc:f64[4,1,200,7,18] hbd:f64[4,1,200,7,18] hbe:f64[4,1,200,7,18]
              hbf:f64[4,1,200,7,18] hbg:f64[4,1,200,7,18] hbh:f64[4,1,200,7,18,18]
              hbi:f64[4,1,200,7,18,18] hbj:f64[4,1,200,7,18,18] hbk:f64[4,1,4,200,7,18,18]
              hbl:f64[4,1,4,200,7,18,18] hbm:f64[4,1,4,200,7,18,18] hbn:f64[4,1,4,200,7,18]
              hbo:f64[4,1,4,200,7,18,18] hbp:f64[4,1,4,200,7,12] hbq:bool[4,1,4,200,7,12]
              hbr:f64[4,1,4,200,7,12] hbs:f64[4,1,4,200,7,12] hbt:f64[4,1,4,200,7,12]
              hbu:f64[4,1,4,200,7,12] hbv:bool[4,1,4,200,7,12] hbw:bool[4,1,4,200,7,12]
              hbx:bool[4,1,4,200,7,3] hby:bool[4,1,4,200,7] hbz:f64[4,1,4,200,7,3]
              hca:f64[4,1,4,200,7,3] hcb:f64[4,1,4,200,7,1] hcc:f64[4,1,4,200,7]
              hcd:f64[4,1,4,200,7,1] hce:f64[4,1,4,200,7,3] hcf:f64[4,1,4,200,7,1]
              hcg:f64[4,1,4,200,7] hch:f64[4,1,4,200,7] hci:f64[4,1,4,200,7] hcj:f64[4,1,4,200,7]
              hck:f64[4,1,4,200,7] hcl:f64[4,1,4,200,7] hcm:f64[4,1,4,200,7,3] hcn:f64[4,1,4,200,7,3]
              hco:f64[4,1,4,200,7,1] hcp:f64[4,1,4,200,7] hcq:f64[4,1,4,200,7,1]
              hcr:f64[4,1,4,200,7,3] hcs:f64[4,1,4,200,7,1] hct:f64[4,1,4,200,7]
              hcu:f64[4,1,4,200,7] hcv:f64[4,1,4,200,7] hcw:f64[4,1,4,200,7] hcx:f64[4,1,4,200,7]
              hcy:f64[4,1,4,200,7] hcz:f64[4,1,4,200,7] hda:f64[4,1,4,200,7] hdb:f64[4,1,4,200,7]
              hdc:bool[4,1,4,200,7] hdd:f64[4,1,4,200,7] hde:f64[4,1,4,200,7] hdf:f64[4,1,4,200,7]
              hdg:f64[4,1,4,200,7] hdh:f64[4,1,4,200,7] hdi:bool[4,1,4,200,7,3] hdj:bool[4,1,4,200,7]
              hdk:bool[4,1,4,200,7] hdl:f64[4,1,4,200,7] hdm:f64[4,1,4,200,7] hdn:f64[4,1,4,200,7]
              hdo:f64[4,1,4,200,7] hdp:f64[4,1,4,200,7] hdq:bool[4,1,4,200,7,3] hdr:bool[4,1,4,200,7]
              hds:bool[4,1,4,200,7] hdt:f64[4,1,4,200,7] hdu:f64[4,1,4,200,7] hdv:f64[4,1,4,200,7]
              hdw:f64[4,1,4,200,7] hdx:f64[4,1,4,200,7] hdy:bool[4,1,4,200,7,3] hdz:bool[4,1,4,200,7]
              hea:bool[4,1,4,200,7] heb:f64[4,1,4,200,7] hec:f64[4,1,4,200,7] hed:f64[4,1,4,200,7]
              hee:f64[4,1,4,200,7] hef:f64[4,1,4,200,7] heg:f64[4,1,4,200,7] heh:f64[4,1,4,200,7]
              hei:f64[4,1,4,200,7] hej:f64[4,1,4,200,7] hek:f64[4,1,4,200,7] hel:f64[4,1,4,200,7]
              hem:f64[4,1,4,200,7] hen:f64[4,1,4,200,7] heo:f64[4,1,4,200,7] hep:f64[4,1,4,200,7]
              heq:f64[4,1,4,200,7] her:f64[4,1,4,200,7] hes:f64[4,1,4,200,7] het:f64[4,1,4,200,7]
              heu:f64[4,1,4,200,7] hev:f64[4,1,4,200,7] hew:f64[4,1,4,200,7] hex:f64[4,1,4,200,7]
              hey:f64[4,1,4,200,7] hez:f64[4,1,4,200,7] hfa:f64[4,1,4,200,7] hfb:f64[4,1,4,200,7]
              hfc:f64[4,1,4,200,7] hfd:f64[4,1,4,200,7] hfe:f64[4,1,4,200,7] hff:f64[4,1,4,200,7]
              hfg:f64[4,1,4,200,7] hfh:f64[4,1,4,200,7] hfi:f64[4,1,4,200,7] hfj:f64[4,1,4,200,7]
              hfk:f64[4,1,4,200,7] hfl:f64[4,1,4,200,7] hfm:f64[4,1,4,200,7] hfn:f64[4,1,4,200,7]
              hfo:f64[4,1,4,200,7] hfp:f64[4,1,4,200,7] hfq:f64[4,1,4,200,7] hfr:f64[4,1,4,200,7]
              hfs:f64[4,1,4,200,7] hft:f64[4,1,4,200,7] hfu:f64[4,1,4,200,7] hfv:f64[4,1,4,200,7]
              hfw:f64[4,1,4,200,7] hfx:f64[4,1,4,200,7] hfy:f64[4,1,4,200,7] hfz:f64[4,1,4,200,7]
              hga:f64[4,1,4,200,7] hgb:f64[4,1,4,200,7] hgc:f64[4,1,4,200,7] hgd:f64[4,1,4,200,7]
              hge:f64[4,1,4,200,7] hgf:f64[4,1,4,200,7] hgg:f64[4,1,4,200,7] hgh:f64[4,1,4,200,7]
              hgi:f64[4,1,4,200,7] hgj:f64[4,1,4,200,7] hgk:f64[4,1,4,200,7] hgl:f64[4,1,4,200,7]
              hgm:f64[4,1,4,200,7] hgn:f64[4,1,4,200,7] hgo:f64[4,1,4,200,7] hgp:f64[4,1,4,200,7]
              hgq:f64[4,1,4,200,7] hgr:f64[4,1,4,200,7] hgs:f64[4,1,4,200,7] hgt:f64[4,1,4,200,7]
              hgu:f64[4,1,4,200,7] hgv:f64[4,1,4,200,7] hgw:f64[4,1,4,200,7] hgx:f64[4,1,4,200,7]
              hgy:f64[4,1,4,200,7] hgz:f64[4,1,4,200,7] hha:f64[4,1,4,200,7] hhb:f64[4,1,4,200,7]
              hhc:f64[4,1,4,200,7] hhd:f64[4,1,4,200,7] hhe:f64[4,1,4,200,7] hhf:f64[4,1,4,200,7]
              hhg:f64[4,1,4,200,7] hhh:f64[4,1,4,200,7] hhi:f64[4,1,4,200,7] hhj:f64[4,1,4,200,7]
              hhk:f64[4,1,4,200,7] hhl:f64[4,1,4,200,7] hhm:f64[4,1,4,200,7] hhn:f64[4,1,4,200,7]
              hho:f64[4,1,4,200,7] hhp:f64[4,1,4,200,7] hhq:f64[4,1,4,200,7] hhr:f64[4,1,4,200,7]
              hhs:f64[4,1,4,200,7] hht:f64[4,1,4,200,7] hhu:f64[4,1,4,200,7] hhv:f64[4,1,4,200,7]
              hhw:f64[4,1,4,200,7] hhx:f64[4,1,4,200,7] hhy:f64[4,1,4,200,7] hhz:f64[4,1,4,200,7]
              hia:f64[4,1,4,200,7] hib:f64[4,1,4,200,7] hic:f64[4,1,4,200,7] hid:f64[4,1,4,200,7]
              hie:f64[4,1,4,200,7] hif:f64[4,1,4,200,7] hig:f64[4,1,4,200,7] hih:f64[4,1,4,200,7]
              hii:f64[4,1,4,200,7] hij:f64[4,1,4,200,7] hik:f64[4,1,4,200,7] hil:f64[4,1,4,200,7]
              him:f64[4,1,4,200,7] hin:f64[4,1,4,200,7] hio:f64[4,1,4,200,7] hip:f64[4,1,4,200,7]
              hiq:f64[4,1,4,200,7] hir:f64[4,1,4,200,7] his:f64[4,1,4,200,7] hit:f64[4,1,4,200,7]
              hiu:f64[4,1,4,200,7] hiv:f64[4,1,4,200,7] hiw:f64[4,1,4,200,7] hix:f64[4,1,4,200,7]
              hiy:f64[4,1,4,200,7] hiz:f64[4,1,4,200,7] hja:f64[4,1,4,200,7] hjb:f64[4,1,4,200,7]
              hjc:f64[4,1,4,200,7] hjd:f64[4,1,4,200,7] hje:f64[4,1,4,200,7,12] hjf:f64[4,1,4,200,7,12]
              hjg:f64[4,1,4,200,7,12] hjh:f64[4,1,4,200,7,12] hji:f64[4,1,4,200,7,12]
              hjj:f64[4,1,4,200,7,12] hjk:f64[4,1,4,200,7,12] hjl:f64[4,1,4,200,7,12]
              hjm:f64[4,1,4,200,7,1] hjn:f64[4,1,4,200,7,1] hjo:f64[4,1,4,200,7,1,3]
              hjp:f64[4,1,4,200,7,1] hjq:f64[4,1,4,200,7,1] hjr:f64[4,1,4,200,7,1,1]
              hjs:f64[4,1,4,200,7,1,1] hjt:f64[4,1,4,200,7,1] hju:f64[4,1,4,200,7,1]
              hjv:f64[4,1,4,200,7,1] hjw:f64[4,1,4,200,7,1] hjx:f64[4,1,4,200,7,1]
              hjy:f64[4,1,4,200,7,1] hjz:f64[4,1,4,200,7,1] hka:f64[4,1,4,200,7,1]
              hkb:f64[4,1,4,200,7,1] hkc:f64[4,1,4,200,7,1] hkd:f64[4,1,4,200,7,1]
              hke:f64[4,1,4,200,7,1] hkf:f64[4,1,4,200,7,1] hkg:f64[4,1,4,200,7,1]
              hkh:f64[4,1,4,200,7,1] hki:f64[4,1,4,200,7,1] hkj:f64[4,1,4,200,7,1]
              hkk:f64[4,1,4,200,7,1] hkl:f64[4,1,4,200,7,1] hkm:f64[4,1,4,200,7,1]
              hkn:f64[4,1,4,200,7,1] hko:f64[4,1,4,200,7,1] hkp:f64[4,1,4,200,7,1]
              hkq:f64[4,1,4,200,7,1] hkr:f64[4,1,4,200,7,1] hks:f64[4,1,4,200,7,1]
              hkt:f64[4,1,4,200,7,1] hku:f64[4,1,4,200,7,1] hkv:f64[4,1,4,200,7,1]
              hkw:f64[4,1,4,200,7,1] hkx:f64[4,1,4,200,7,1] hky:f64[4,1,4,200,7,1]
              hkz:f64[4,1,4,200,7,1] hla:f64[4,1,4,200,7,1] hlb:f64[4,1,4,200,7,1]
              hlc:f64[4,1,4,200,7,1] hld:f64[4,1,4,200,7,1] hle:f64[4,1,4,200,7,1]
              hlf:f64[4,1,4,200,7,1] hlg:f64[4,1,4,200,7,1,1] hlh:f64[4,1,4,200,7,1,4]
              hli:f64[4,1,4,200,7,1] hlj:f64[4,1,4,200,7,1,1] hlk:f64[4,1,200,7,3]
              hll:f64[4,1,200,7,3] hlm:f64[4,1,200,7,1] hln:f64[4,1,200,7] hlo:f64[4,1,200,7,1]
              hlp:f64[4,1,200,7,3] hlq:f64[4,1,200,7,1] hlr:f64[4,1,200,7] hls:f64[4,1,200,7]
              hlt:f64[4,1,200,7] hlu:f64[4,1,200,7] hlv:f64[4,1,200,7] hlw:f64[4,1,200,7]
              hlx:f64[4,1,200,7,3] hly:f64[4,1,200,7,3] hlz:f64[4,1,200,7,1] hma:f64[4,1,200,7]
              hmb:f64[4,1,200,7,1] hmc:f64[4,1,200,7,3] hmd:f64[4,1,200,7,1] hme:f64[4,1,200,7]
              hmf:f64[4,1,200,7] hmg:f64[4,1,200,7] hmh:f64[4,1,200,7] hmi:f64[4,1,200,7]
              hmj:f64[4,1,200,7] hmk:f64[4,1,200,7] hml:f64[4,1,200,7] hmm:f64[4,1,200,7]
              hmn:f64[4,1,200,7] hmo:f64[4,1,200,7] hmp:f64[4,200,7,36] hmq:f64[4,200,7,36] = scan[
              _split_transpose=False
              jaxpr={ lambda ; hmr:f64[1,1,18,18] hms:bool[200,7,18,18] hmt:f64[200,7,18,18]
                  hmu:bool[200,7,18,18] hmv:f64[200,7,18,18] hmw:bool[200,7,18,18]
                  hmx:f64[200,7,18,18] hmy:f64[200,7,18,18] hmz:f64[200,7,18] hna:i32[12,1]
                  hnb:f64[1,1,12] hnc:f64[200,7,12] hnd:f64[200,7,12] hne:bool[200,7,12]
                  hnf:f64[200,7,12] hng:f64[200,7,12] hnh:f64[200,7,12] hni:f64[200,7,12]
                  hnj:bool[200,7,12] hnk:bool[200,7,12] hnl:f64[1,1,12] hnm:f64[1,1,12]
                  hnn:f64[1,1,12] hno:f64[1,1,12] hnp:f64[1,1,12] hnq:f64[1,1,12]
                  hnr:f64[1,1,12] hns:f64[1,1,12] hnt:f64[1,1,12] hnu:f64[1,1,12]
                  hnv:f64[1,1,12] hnw:f64[1,1,3] hnx:f64[1,1,4] hny:i32[1] hnz:i32[1]
                  hoa:i32[1] hob:i32[1] hoc:i32[1] hod:i32[1] hoe:i32[1] hof:i32[1]
                  hog:i32[1] hoh:i32[1] hoi:i32[1] hoj:i32[1] hok:f64[1,1,36] hol:f64[1,1,36]
                  hom:f64[1,1,36] hon:f64[1,1,36] hoo:f64[] hop:f64[] hoq:bool[]
                  hor:bool[200,7] hos:bool[200,7] hot:f64[] hou:f64[] hov:f64[] how:f64[]
                  hox:f64[] hoy:f64[] hoz:f64[] hpa:f64[] hpb:f64[200,7,1] hpc:f64[1,1,3]
                  hpd:f64[] hpe:f64[] hpf:bool[] hpg:bool[200,7] hph:bool[200,7]
                  hpi:f64[] hpj:f64[] hpk:f64[] hpl:f64[] hpm:f64[] hpn:f64[] hpo:f64[]
                  hpp:f64[] hpq:f64[200,7,1] hpr:f64[1,1,3] hps:f64[] hpt:f64[] hpu:bool[]
                  hpv:bool[200,7] hpw:bool[200,7] hpx:f64[] hpy:f64[] hpz:f64[] hqa:f64[]
                  hqb:f64[] hqc:f64[] hqd:f64[] hqe:f64[] hqf:f64[200,7,1] hqg:f64[1,1,3]
                  hqh:f64[] hqi:f64[] hqj:bool[] hqk:bool[200,7] hql:bool[200,7]
                  hqm:f64[] hqn:f64[] hqo:f64[] hqp:f64[] hqq:f64[] hqr:f64[] hqs:f64[]
                  hqt:f64[] hqu:f64[200,7,1] hqv:f64[] hqw:f64[] hqx:f64[] hqy:f64[]
                  hqz:f64[] hra:f64[] hrb:f64[] hrc:f64[200,7] hrd:f64[200,7] hre:f64[200,7]
                  hrf:f64[200,7] hrg:f64[] hrh:f64[200,7] hri:f64[200,7] hrj:f64[200,7]
                  hrk:f64[200,7] hrl:f64[] hrm:f64[] hrn:f64[] hro:f64[] hrp:f64[]
                  hrq:f64[] hrr:f64[] hrs:f64[200,7] hrt:f64[200,7] hru:f64[200,7]
                  hrv:f64[200,7] hrw:f64[] hrx:f64[200,7] hry:f64[200,7] hrz:f64[200,7]
                  hsa:f64[200,7] hsb:f64[] hsc:f64[] hsd:f64[] hse:f64[] hsf:f64[]
                  hsg:f64[] hsh:f64[] hsi:f64[200,7] hsj:f64[200,7] hsk:f64[200,7]
                  hsl:f64[200,7] hsm:f64[] hsn:f64[200,7] hso:f64[200,7] hsp:f64[200,7]
                  hsq:f64[200,7] hsr:f64[] hss:f64[] hst:f64[] hsu:f64[] hsv:f64[]
                  hsw:f64[] hsx:f64[] hsy:f64[200,7] hsz:f64[200,7] hta:f64[200,7]
                  htb:f64[200,7] htc:f64[] htd:f64[200,7] hte:f64[200,7] htf:f64[200,7]
                  htg:f64[200,7] hth:f64[1,1,12] hti:f64[200,7,12] htj:f64[200,7,12]
                  htk:f64[200,7,12] htl:f64[200,7,12] htm:f64[1,1,12] htn:f64[200,7,12]
                  hto:f64[200,7,12] htp:f64[200,7,12] htq:f64[200,7,12] htr:f64[1,1,12]
                  hts:f64[1,1,12] htt:f64[1,1,12] htu:f64[200,7,12] htv:f64[200,7,12]
                  htw:f64[200,7,12] htx:f64[200,7,12] hty:f64[1,1,12] htz:f64[200,7,12]
                  hua:f64[200,7,12] hub:f64[200,7,12] huc:f64[200,7,12] hud:f64[1,1,12]
                  hue:i32[12,1] huf:f64[1,1,12] hug:i32[12,1] huh:f64[1,1,12] hui:f64[1,1,12]
                  huj:f64[200,7,12] huk:f64[200,7,12] hul:f64[200,7,12] hum:f64[200,7,12]
                  hun:f64[1,1,12] huo:f64[200,7,12] hup:f64[200,7,12] huq:f64[200,7,12]
                  hur:f64[200,7,12] hus:f64[1,1,12] hut:f64[200,7,6] huu:f64[200,7,19]
                  huv:i32[1] huw:f64[1,1,36] hux:f64[1,1,36] huy:i32[1] huz:f64[1,1,12]
                  hva:f64[1,1,18] hvb:f64[200,7,18] hvc:i32[1] hvd:i32[1] hve:i32[1]
                  hvf:i32[1] hvg:i32[1] hvh:i32[1] hvi:i32[1] hvj:i32[1] hvk:f64[1,1,4]
                  hvl:i32[1] hvm:i32[1] hvn:i32[1] hvo:i32[1] hvp:i32[1] hvq:i32[1]
                  hvr:i32[1] hvs:f64[1,1,13,1] hvt:f64[200,7,1,3] hvu:i32[6,1] hvv:f64[18,3]
                  hvw:f64[1,1,13] hvx:f64[1,1,12] hvy:f64[1,1,12] hvz:f64[1,1,12]
                  hwa:f64[] hwb:f64[] hwc:bool[] hwd:bool[] hwe:f64[200,7,12,4] hwf:f64[200,7,12]
                  hwg:i64[1] hwh:f64[1,1,13] hwi:f64[1,1,13] hwj:f64[1,1,13] hwk:f64[1,1,13]
                  hwl:f64[1,1,13] hwm:f64[1,1,13] hwn:f64[1,1,13] hwo:f64[1,1,13]
                  hwp:f64[1,1,13] hwq:f64[1,1,13] hwr:f64[1,1,13] hws:f64[1,1,13]
                  hwt:f64[1,1,13] hwu:f64[1,1,13] hwv:f64[1,1,13] hww:i64[4,1] hwx:i64[4,1]
                  hwy:i64[4,1] hwz:i64[4,1] hxa:i64[13,1] hxb:f64[] hxc:f64[] hxd:bool[]
                  hxe:bool[] hxf:f64[200,7,13,4] hxg:f64[200,7,13] hxh:f64[200,7,1,4]
                  hxi:i32[13,1] hxj:f64[1,1,13] hxk:f64[1,1,13] hxl:f64[1,1,13] hxm:f64[1,1,13]
                  hxn:f64[1,1,13] hxo:f64[1,1,13] hxp:f64[1,1,13] hxq:f64[1,1,13]
                  hxr:f64[1,1,13] hxs:f64[1,1,13] hxt:f64[1,1,13] hxu:f64[1,1,13]
                  hxv:f64[1,1,13] hxw:f64[1,1,13] hxx:f64[1,1,13] hxy:f64[1,1,13]
                  hxz:f64[1,1,13] hya:f64[1,1,13] hyb:f64[1,1,13] hyc:f64[1,1,13]
                  hyd:f64[1,1,13] hye:f64[1,1,13] hyf:f64[1,1,13] hyg:f64[1,1,13]
                  hyh:f64[1,1,13] hyi:f64[1,1,13] hyj:f64[1,1,13] hyk:f64[1,1,13]
                  hyl:f64[1,1,13] hym:f64[1,1,13] hyn:f64[1,1,13] hyo:f64[1,1,13]
                  hyp:i64[18,1] hyq:f64[18,3] hyr:f64[1,1,18,3] hys:i32[1] hyt:f64[1,1,18]
                  hyu:i32[1] hyv:f64[1,1,18] hyw:f64[1,1,18] hyx:i32[1] hyy:f64[1,1,18]
                  hyz:f64[1,1,18] hza:f64[1,1,18] hzb:f64[1,1,18,3] hzc:f64[1,1,18,1]
                  hzd:f64[1,1,18,1] hze:f64[1,1,18] hzf:i32[1] hzg:f64[1,1,18] hzh:i32[1]
                  hzi:f64[1,1,18] hzj:i32[1] hzk:f64[1,1,18] hzl:f64[1,1,18] hzm:f64[1,1,18]
                  hzn:f64[18,3] hzo:f64[1,1,18,3] hzp:f64[200,7,13,3] hzq:i32[13,1]
                  hzr:f64[1,1,13,1] hzs:f64[1,1,13,3] hzt:f64[13,3] hzu:f64[1,1,12,3]
                  hzv:i64[1] hzw:f64[1,1,13,3] hzx:f64[1,1,13,3] hzy:f64[13,3] hzz:f64[1,1,13,3]
                  iaa:i32[1] iab:f64[1,1,13] iac:i32[1] iad:f64[1,1,13] iae:f64[1,1,13]
                  iaf:i32[1] iag:f64[1,1,13] iah:f64[1,1,13] iai:f64[1,1,13] iaj:f64[1,1,13,3]
                  iak:f64[1,1,13,1] ial:f64[1,1,13,1] iam:f64[1,1,13] ian:i32[1]
                  iao:f64[1,1,13] iap:i32[1] iaq:f64[1,1,13] iar:i32[1] ias:f64[1,1,13]
                  iat:f64[1,1,13] iau:f64[1,1,13] iav:i64[4,1] iaw:i64[4,1] iax:i32[1]
                  iay:i32[1] iaz:i32[1] iba:i32[1] ibb:i32[1] ibc:i32[1] ibd:i64[4,1]
                  ibe:i32[1] ibf:i32[1] ibg:i32[1] ibh:i32[1] ibi:i32[1] ibj:i32[1]
                  ibk:i64[4,1] ibl:i32[1] ibm:i32[1] ibn:i32[1] ibo:i32[1] ibp:i32[1]
                  ibq:i32[1] ibr:i64[13,1] ibs:f64[13,3] ibt:f64[1,1,13,3] ibu:i32[1]
                  ibv:f64[1,1,13] ibw:i32[1] ibx:f64[1,1,13] iby:f64[1,1,13] ibz:i32[1]
                  ica:f64[1,1,13] icb:f64[1,1,13] icc:f64[1,1,13] icd:i32[13,1] ice:f64[1,1,13,1]
                  icf:f64[200,7,1,3] icg:i32[13,1] ich:f64[13,3] ici:f64[1,1,13,3]
                  icj:i32[1] ick:f64[1,1,13] icl:i32[1] icm:f64[1,1,13] icn:f64[1,1,13]
                  ico:i32[1] icp:f64[1,1,13] icq:f64[1,1,13] icr:f64[1,1,13] ics:f64[1,1,13,3]
                  ict:i32[1] icu:f64[1,1,13] icv:i32[1] icw:f64[1,1,13] icx:f64[1,1,13]
                  icy:i32[1] icz:f64[1,1,13] ida:f64[1,1,13] idb:f64[1,1,13] idc:i64[18,1]
                  idd:i32[1] ide:i32[1] idf:i32[1] idg:i32[1] idh:i32[1] idi:i32[1]
                  idj:f64[1,1,18,3] idk:f64[1,1,18,1] idl:f64[1,1,18,1] idm:f64[1,1,18]
                  idn:i32[1] ido:f64[1,1,18] idp:i32[1] idq:f64[1,1,18] idr:i32[1]
                  ids:f64[1,1,18] idt:f64[1,1,18] idu:f64[1,1,18] idv:i32[1] idw:i32[1]
                  idx:i32[1] idy:i32[1] idz:i32[1] iea:i32[1] ieb:i32[1] iec:i32[1]
                  ied:i32[1] iee:i32[1] ief:i32[1] ieg:i32[1] ieh:i32[1] iei:f64[200,7,1,3,3]
                  iej:f64[200,7,1,3] iek:i32[6,1] iel:i64[4,1] iem:i32[4,1] ien:i64[4,1]
                  ieo:i32[4,1] iep:i64[4,1] ieq:i32[4,1] ier:i64[4,1] ies:i64[13,1]
                  iet:f64[200,7,1,3] ieu:i32[13,1] iev:i32[1] iew:i32[1] iex:i32[1]
                  iey:i32[1] iez:i32[1] ifa:i32[1] ifb:f64[200,7,1,3] ifc:i32[6,1]
                  ifd:i64[4,1] ife:i32[4,1] iff:i64[4,1] ifg:i32[4,1] ifh:i64[4,1]
                  ifi:i32[4,1] ifj:i64[4,1] ifk:i64[13,1] ifl:f64[200,7,1,3] ifm:i32[13,1]
                  ifn:i32[1] ifo:i32[1] ifp:i32[1] ifq:i32[1] ifr:i32[1] ifs:i32[1]
                  ift:i64[4,1] ifu:i32[4,1] ifv:i64[4,1] ifw:i64[4,1] ifx:i32[4,1]
                  ify:i64[4,1] ifz:i64[4,1] iga:i32[4,1] igb:i64[4,1] igc:i64[4,1]
                  igd:i64[13,1] ige:f64[1,1,13,1] igf:f64[200,7,1,3] igg:i32[6,1]
                  igh:i32[1] igi:i32[1] igj:i32[1] igk:i32[1] igl:i32[1] igm:i32[1]
                  ign:i32[1] igo:f64[200,7,1,3,3] igp:i32[1] igq:i32[1] igr:i32[1]
                  igs:i32[1] igt:i32[1] igu:i32[1] igv:i64[4,1] igw:i32[4,1] igx:i64[4,1]
                  igy:i32[4,1] igz:i64[4,1] iha:i32[4,1] ihb:i64[4,1] ihc:i64[13,1]
                  ihd:i32[1] ihe:i32[1] ihf:i32[1] ihg:i32[1] ihh:i32[1] ihi:i32[1]
                  ihj:f64[1,1,13,1] ihk:i32[1] ihl:i32[1] ihm:i32[1] ihn:i32[1] iho:i32[1]
                  ihp:i32[1] ihq:i32[1] ihr:i32[1] ihs:i32[1] iht:i32[1] ihu:i32[1]
                  ihv:i32[1] ihw:f64[200,7,1,3] ihx:i32[4,1] ihy:i64[4,1] ihz:f64[200,7,4,3]
                  iia:i32[4,1] iib:i64[4,1] iic:f64[200,7,4,3] iid:i32[4,1] iie:i64[4,1]
                  iif:i64[13,1] iig:i64[18,1] iih:f64[1,1,13] iii:f64[1,1,13] iij:f64[1,1,13]
                  iik:f64[1,1,13] iil:f64[1,1,13] iim:f64[1,1,13] iin:f64[1,1,13]
                  iio:f64[1,1,13] iip:f64[1,1,13] iiq:f64[1,1,13] iir:f64[1,1,13]
                  iis:f64[1,1,13] iit:f64[1,1,13] iiu:f64[1,1,13] iiv:f64[1,1,13]
                  iiw:f64[1,1,13] iix:f64[13,3,3] iiy:i32[1] iiz:f64[1,1,1,3] ija:i32[1]
                  ijb:f64[1,1,1,3] ijc:f64[1,1,1,3] ijd:i32[1] ije:f64[1,1,1,3] ijf:f64[1,1,1,3]
                  ijg:f64[1,1,1,3] ijh:f64[1,1,13,1,1] iji:i32[1] ijj:i32[1] ijk:i32[1]
                  ijl:i32[1] ijm:i32[1] ijn:i32[1] ijo:i32[1] ijp:i32[1] ijq:i32[1]
                  ijr:i32[1] ijs:i32[1] ijt:i32[1] iju:i32[1] ijv:i32[1] ijw:i32[1]
                  ijx:i32[1] ijy:i32[1] ijz:i32[1] ika:i32[1] ikb:i32[1] ikc:i32[1]
                  ikd:i32[1] ike:i32[1] ikf:i32[1] ikg:f64[200,7,1,3] ikh:i32[4,1]
                  iki:i64[4,1] ikj:f64[200,7,4,3] ikk:i32[4,1] ikl:i64[4,1] ikm:f64[200,7,4,3]
                  ikn:i32[4,1] iko:i64[4,1] ikp:i64[13,1] ikq:i64[18,1] ikr:f64[1,1,18]
                  iks:f64[1,1,12,3] ikt:i64[1] iku:i32[1] ikv:i32[1] ikw:i32[1] ikx:i32[1]
                  iky:i32[1] ikz:i32[1] ila:i64[4,1] ilb:i64[4,1] ilc:i32[1] ild:i32[1]
                  ile:i32[1] ilf:i32[1] ilg:i32[1] ilh:i32[1] ili:i64[4,1] ilj:i32[1]
                  ilk:i32[1] ill:i32[1] ilm:i32[1] iln:i32[1] ilo:i32[1] ilp:i64[4,1]
                  ilq:i32[1] ilr:i32[1] ils:i32[1] ilt:i32[1] ilu:i32[1] ilv:i32[1]
                  ilw:f64[1,1,12,3] ilx:i64[1] ily:i32[1] ilz:i32[1] ima:i32[1] imb:i32[1]
                  imc:i32[1] imd:i32[1] ime:i64[4,1] imf:i32[1] img:i32[1] imh:i32[1]
                  imi:i32[1] imj:i32[1] imk:i32[1] iml:i32[1] imm:i32[1] imn:i32[1]
                  imo:i32[1] imp:i32[1] imq:i32[1] imr:i64[4,1] ims:i32[1] imt:i32[1]
                  imu:i32[1] imv:i32[1] imw:i32[1] imx:i32[1] imy:i32[1] imz:i32[1]
                  ina:i32[1] inb:i32[1] inc:i32[1] ind:i32[1] ine:i64[4,1] inf:i32[1]
                  ing:i32[1] inh:i32[1] ini:i32[1] inj:i32[1] ink:i32[1] inl:f64[1,1,18,1]
                  inm:f64[200,7,1,3] inn:i32[4,1] ino:i64[4,1] inp:f64[200,7,4,3]
                  inq:i32[4,1] inr:i64[4,1] ins:f64[200,7,4,3] int:i32[4,1] inu:i64[4,1]
                  inv:i64[13,1] inw:i64[18,1] inx:i32[1] iny:i32[1] inz:i32[1] ioa:i32[1]
                  iob:i32[1] ioc:i32[1] iod:f64[200,7,1,3,3] ioe:i32[4,1] iof:i64[4,1]
                  iog:f64[200,7,4,3,3] ioh:i32[4,1] ioi:i64[4,1] ioj:f64[200,7,4,3,3]
                  iok:i32[4,1] iol:i64[4,1] iom:i64[13,1] ion:i64[18,1] ioo:i32[1]
                  iop:i32[1] ioq:i32[1] ior:i32[1] ios:i32[1] iot:i32[1] iou:f64[1,1,18,18]
                  iov:bool[200,7,18,18] iow:f64[200,7,18,18] iox:bool[200,7,18,18]
                  ioy:f64[200,7,18,18] ioz:f64[1,1,18,18] ipa:bool[200,7,18,18] ipb:f64[200,7,18,18]
                  ipc:bool[200,7,18,18] ipd:f64[200,7,18,18] ipe:bool[200,7,18,18]
                  ipf:f64[200,7,18,18] ipg:f64[200,7,18,18] iph:f64[1,1,4] ipi:i32[1]
                  ipj:i32[1] ipk:i32[1] ipl:i32[1] ipm:i32[1] ipn:i32[1] ipo:i32[1]
                  ipp:i32[1] ipq:i32[1] ipr:i32[1] ips:i32[1] ipt:i32[1] ipu:i32[1]
                  ipv:f64[1,1,36] ipw:f64[1,1,36] ipx:i32[1] ipy:f64[1,1,36] ipz:f64[1,1,36]
                  iqa:f64[1,1,36] iqb:f64[1,1,36] iqc:f64[1,1,36] iqd:f64[1,1,36]
                  iqe:f64[200,7,1] iqf:f64[200,7,1] iqg:f64[1,1,9] iqh:f64[1,1,9]
                  iqi:f64[200,7,1] iqj:f64[200,7,1] iqk:f64[200,7,1] iql:f64[200,7,1]
                  iqm:f64[1,1,180] iqn:f64[1,1,180] iqo:f64[1,1,9] iqp:f64[1,1,9]
                  iqq:f64[7,189,400] iqr:f64[1,7,400] iqs:f64[7,400,400] iqt:f64[1,7,400]
                  iqu:f64[7,400,400] iqv:f64[1,7,400] iqw:f64[7,400,400] iqx:f64[1,7,400]
                  iqy:f64[7,400,54] iqz:f64[1,7,54] ira:f64[1,1,36] irb:f64[1,1,36]
                  irc:f64[1,1,36] ird:f64[200,7,36] ire:f64[] irf:f64[200,7,36] irg:f64[1,1,36]
                  irh:f64[200,7,36] iri:f64[] irj:f64[200,7,36] irk:f64[200,7,180]
                  irl:f64[200,7,9]. let
                  irm:f64[200,7,9] = mul iqg irl
                  irn:f64[200,7,9] = div irm 2.0
                  iro:f64[200,7,9] = add irn iqh
                  irp:f64[200,7,1] = slice[
                    limit_indices=(200, 7, 9)
                    start_indices=(0, 0, 8)
                    strides=None
                  ] iro
                  irq:f64[200,7] = squeeze[dimensions=(2,)] irp
                  irr:f64[200,7,1] = broadcast_in_dim[
                    broadcast_dimensions=(0, 1)
                    shape=(200, 7, 1)
                  ] irq
                  irs:f64[200,7,3] = concatenate[dimension=2] iqe iqf irr
                  irt:f64[200,7,1,3] = reshape[
                    dimensions=None
                    new_sizes=(200, 7, 1, 3)
                  ] irs
                  iru:f64[200,7,3] = squeeze[dimensions=(2,)] irt
                  irv:f64[200,7,4,3] = broadcast_in_dim[
                    broadcast_dimensions=(0, 1, 3)
                    shape=(200, 7, 4, 3)
                  ] iru
                  irw:f64[200,7,12] = reshape[
                    dimensions=None
                    new_sizes=(200, 7, 12)
                  ] irv
                  irx:f64[200,7,8] = slice[
                    limit_indices=(200, 7, 8)
                    start_indices=(0, 0, 0)
                    strides=None
                  ] iro
                  iry:f64[200,7,1] = slice[
                    limit_indices=(200, 7, 1)
                    start_indices=(0, 0, 0)
                    strides=None
                  ] irx
                  irz:f64[200,7] = squeeze[dimensions=(2,)] iry
                  isa:f64[200,7,1] = broadcast_in_dim[
                    broadcast_dimensions=(0, 1)
                    shape=(200, 7, 1)
                  ] irz
                  isb:f64[200,7,1] = slice[
                    limit_indices=(200, 7, 5)
                    start_indices=(0, 0, 4)
                    strides=None
                  ] irx
                  isc:f64[200,7] = squeeze[dimensions=(2,)] isb
                  isd:f64[200,7,1] = broadcast_in_dim[
                    broadcast_dimensions=(0, 1)
                    shape=(200, 7, 1)
                  ] isc
                  ise:f64[200,7,1] = slice[
                    limit_indices=(200, 7, 2)
                    start_indices=(0, 0, 1)
                    strides=None
                  ] irx
                  isf:f64[200,7] = squeeze[dimensions=(2,)] ise
                  isg:f64[200,7,1] = broadcast_in_dim[
                    broadcast_dimensions=(0, 1)
                    shape=(200, 7, 1)
                  ] isf
                  ish:f64[200,7,1] = slice[
                    limit_indices=(200, 7, 6)
                    start_indices=(0, 0, 5)
                    strides=None
                  ] irx
                  isi:f64[200,7] = squeeze[dimensions=(2,)] ish
                  isj:f64[200,7,1] = broadcast_in_dim[
                    broadcast_dimensions=(0, 1)
                    shape=(200, 7, 1)
                  ] isi
                  isk:f64[200,7,1] = slice[
                    limit_indices=(200, 7, 3)
                    start_indices=(0, 0, 2)
                    strides=None
                  ] irx
                  isl:f64[200,7] = squeeze[dimensions=(2,)] isk
                  ism:f64[200,7,1] = broadcast_in_dim[
                    broadcast_dimensions=(0, 1)
                    shape=(200, 7, 1)
                  ] isl
                  isn:f64[200,7,1] = slice[
                    limit_indices=(200, 7, 7)
                    start_indices=(0, 0, 6)
                    strides=None
                  ] irx
                  iso:f64[200,7] = squeeze[dimensions=(2,)] isn
                  isp:f64[200,7,1] = broadcast_in_dim[
                    broadcast_dimensions=(0, 1)
                    shape=(200, 7, 1)
                  ] iso
                  isq:f64[200,7,1] = slice[
                    limit_indices=(200, 7, 4)
                    start_indices=(0, 0, 3)
                    strides=None
                  ] irx
                  isr:f64[200,7] = squeeze[dimensions=(2,)] isq
                  iss:f64[200,7,1] = broadcast_in_dim[
                    broadcast_dimensions=(0, 1)
                    shape=(200, 7, 1)
                  ] isr
                  ist:f64[200,7,1] = slice[
                    limit_indices=(200, 7, 8)
                    start_indices=(0, 0, 7)
                    strides=None
                  ] irx
                  isu:f64[200,7] = squeeze[dimensions=(2,)] ist
                  isv:f64[200,7,1] = broadcast_in_dim[
                    broadcast_dimensions=(0, 1)
                    shape=(200, 7, 1)
                  ] isu
                  isw:f64[200,7,12] = concatenate[dimension=2] isa isd iqi isg isj
                    iqj ism isp iqk iss isv iql
                  isx:f64[200,7,180] = sub irk iqm
                  isy:f64[200,7,180] = div isx iqn
                  isz:f64[200,7,9] = sub irl iqo
                  ita:f64[200,7,9] = div isz iqp
                  itb:f64[200,7,189] = concatenate[dimension=2] isy ita
                  itc:f64[7,200,400] = dot_general[
                    dimension_numbers=(([2], [1]), ([1], [0]))
                    preferred_element_type=float64
                  ] itb iqq
                  itd:f64[200,7,400] = transpose[permutation=(1, 0, 2)] itc
                  ite:f64[200,7,400] = add itd iqr
                  itf:f64[200,7,400] itg:f64[200,7,400] ith:f64[200,7,400] = pjit[
                    name=silu
                    jaxpr=silu
                  ] ite
                  iti:f64[7,200,400] = dot_general[
                    dimension_numbers=(([2], [1]), ([1], [0]))
                    preferred_element_type=float64
                  ] itf iqs
                  itj:f64[200,7,400] = transpose[permutation=(1, 0, 2)] iti
                  itk:f64[200,7,400] = add itj iqt
                  itl:f64[200,7,400] itm:f64[200,7,400] itn:f64[200,7,400] = pjit[
                    name=silu
                    jaxpr=silu
                  ] itk
                  ito:f64[7,200,400] = dot_general[
                    dimension_numbers=(([2], [1]), ([1], [0]))
                    preferred_element_type=float64
                  ] itl iqu
                  itp:f64[200,7,400] = transpose[permutation=(1, 0, 2)] ito
                  itq:f64[200,7,400] = add itp iqv
                  itr:f64[200,7,400] its:f64[200,7,400] itt:f64[200,7,400] = pjit[
                    name=silu
                    jaxpr=silu
                  ] itq
                  itu:f64[7,200,400] = dot_general[
                    dimension_numbers=(([2], [1]), ([1], [0]))
                    preferred_element_type=float64
                  ] itr iqw
                  itv:f64[200,7,400] = transpose[permutation=(1, 0, 2)] itu
                  itw:f64[200,7,400] = add itv iqx
                  itx:f64[200,7,400] ity:f64[200,7,400] itz:f64[200,7,400] = pjit[
                    name=silu
                    jaxpr=silu
                  ] itw
                  iua:f64[7,200,54] = dot_general[
                    dimension_numbers=(([2], [1]), ([1], [0]))
                    preferred_element_type=float64
                  ] itx iqy
                  iub:f64[200,7,54] = transpose[permutation=(1, 0, 2)] iua
                  iuc:f64[200,7,54] = add iub iqz
                  iud:f64[200,7,18] = slice[
                    limit_indices=(200, 7, 18)
                    start_indices=(0, 0, 0)
                    strides=None
                  ] iuc
                  _:f64[200,7,18] iue:f64[4,200,7,18] = scan[
                    _split_transpose=False
                    jaxpr={ lambda ; iuf:f64[200,7,18]. let  in (iuf, iuf) }
                    length=4
                    linear=(False,)
                    num_carry=1
                    num_consts=0
                    reverse=False
                    unroll=1
                  ] iud
                  iug:f64[200,7,36] = slice[
                    limit_indices=(200, 7, 36)
                    start_indices=(0, 0, 0)
                    strides=None
                  ] irk
                  iuh:f64[200,7,36] iui:f64[1,200,7,3] iuj:f64[1,200,7,3] iuk:f64[1,200,7,1]
                    iul:f64[1,200,7] ium:f64[1,200,7,1] iun:f64[1,200,7,3] iuo:f64[1,200,7,1]
                    iup:f64[1,200,7] iuq:f64[1,200,7] iur:f64[1,200,7] ius:f64[1,200,7]
                    iut:f64[1,200,7] iuu:f64[1,200,7] iuv:f64[1,200,7,3] iuw:f64[1,200,7,3]
                    iux:f64[1,200,7,1] iuy:f64[1,200,7] iuz:f64[1,200,7,1] iva:f64[1,200,7,3]
                    ivb:f64[1,200,7,1] ivc:f64[1,200,7] ivd:f64[1,200,7] ive:f64[1,200,7]
                    ivf:f64[1,200,7] ivg:f64[1,200,7] ivh:f64[1,200,7] ivi:f64[1,200,7,12]
                    ivj:f64[1,200,7,12] ivk:f64[1,200,7,12] ivl:f64[1,200,7,12] ivm:f64[1,200,7,12,1]
                    ivn:bool[1,200,7,12,4] ivo:f64[1,200,7,12,4] ivp:f64[1,200,7,12]
                    ivq:bool[1,200,7,12] ivr:f64[1,200,7,12,4] ivs:f64[1,200,7,12,1]
                    ivt:f64[1,200,7,13,3] ivu:f64[1,200,7,13,1] ivv:f64[1,200,7,13]
                    ivw:f64[1,200,7,13,3] ivx:f64[1,200,7,13,1] ivy:f64[1,200,7,4,3]
                    ivz:f64[1,200,7,4,3] iwa:f64[1,200,7,4,1] iwb:f64[1,200,7,4]
                    iwc:f64[1,200,7,4,1] iwd:f64[1,200,7,4,3] iwe:f64[1,200,7,4,1]
                    iwf:f64[1,200,7,4] iwg:f64[1,200,7,4] iwh:f64[1,200,7,4] iwi:f64[1,200,7,4]
                    iwj:f64[1,200,7,4] iwk:f64[1,200,7,4] iwl:f64[1,200,7,4] iwm:f64[1,200,7,4]
                    iwn:f64[1,200,7,4] iwo:f64[1,200,7,4] iwp:f64[1,200,7,4] iwq:f64[1,200,7,4]
                    iwr:f64[1,200,7,4] iws:f64[1,200,7,4] iwt:f64[1,200,7,4] iwu:f64[1,200,7,4]
                    iwv:f64[1,200,7,4] iww:f64[1,200,7,4] iwx:f64[1,200,7,4] iwy:f64[1,200,7,4]
                    iwz:f64[1,200,7,4] ixa:f64[1,200,7,4] ixb:f64[1,200,7,4] ixc:f64[1,200,7,4]
                    ixd:f64[1,200,7,4] ixe:f64[1,200,7,4] ixf:f64[1,200,7,4] ixg:f64[1,200,7,4]
                    ixh:f64[1,200,7,4] ixi:f64[1,200,7,4] ixj:f64[1,200,7,4] ixk:f64[1,200,7,4]
                    ixl:f64[1,200,7,4] ixm:f64[1,200,7,4] ixn:f64[1,200,7,4] ixo:f64[1,200,7,4]
                    ixp:f64[1,200,7,4] ixq:f64[1,200,7,4] ixr:f64[1,200,7,4,3] ixs:f64[1,200,7,4,3]
                    ixt:f64[1,200,7,4,1] ixu:f64[1,200,7,4] ixv:f64[1,200,7,4,1]
                    ixw:f64[1,200,7,4,3] ixx:f64[1,200,7,4,1] ixy:f64[1,200,7,4]
                    ixz:f64[1,200,7,4] iya:f64[1,200,7,4] iyb:f64[1,200,7,4] iyc:f64[1,200,7,4]
                    iyd:f64[1,200,7,4] iye:f64[1,200,7,4] iyf:f64[1,200,7,4] iyg:f64[1,200,7,4]
                    iyh:f64[1,200,7,4] iyi:f64[1,200,7,4] iyj:f64[1,200,7,4] iyk:f64[1,200,7,4]
                    iyl:f64[1,200,7,4] iym:f64[1,200,7,4] iyn:f64[1,200,7,4] iyo:f64[1,200,7,4]
                    iyp:f64[1,200,7,4] iyq:f64[1,200,7,4] iyr:f64[1,200,7,4] iys:f64[1,200,7,4]
                    iyt:f64[1,200,7,4] iyu:f64[1,200,7,4] iyv:f64[1,200,7,4] iyw:f64[1,200,7,4]
                    iyx:f64[1,200,7,4] iyy:f64[1,200,7,4] iyz:f64[1,200,7,4] iza:f64[1,200,7,4]
                    izb:f64[1,200,7,4] izc:f64[1,200,7,4] izd:f64[1,200,7,4] ize:f64[1,200,7,4]
                    izf:f64[1,200,7,4] izg:f64[1,200,7,4] izh:f64[1,200,7,4] izi:f64[1,200,7,4]
                    izj:f64[1,200,7,4] izk:f64[1,200,7,4,3] izl:f64[1,200,7,4,3]
                    izm:f64[1,200,7,4,1] izn:f64[1,200,7,4] izo:f64[1,200,7,4,1]
                    izp:f64[1,200,7,4,3] izq:f64[1,200,7,4,1] izr:f64[1,200,7,4]
                    izs:f64[1,200,7,4] izt:f64[1,200,7,4] izu:f64[1,200,7,4] izv:f64[1,200,7,4]
                    izw:f64[1,200,7,4] izx:f64[1,200,7,4] izy:f64[1,200,7,4] izz:f64[1,200,7,4]
                    jaa:f64[1,200,7,4] jab:f64[1,200,7,4] jac:f64[1,200,7,4] jad:f64[1,200,7,4]
                    jae:f64[1,200,7,4] jaf:f64[1,200,7,4] jag:f64[1,200,7,4] jah:f64[1,200,7,4]
                    jai:f64[1,200,7,4] jaj:f64[1,200,7,4] jak:f64[1,200,7,4] jal:f64[1,200,7,4]
                    jam:f64[1,200,7,4] jan:f64[1,200,7,4] jao:f64[1,200,7,4] jap:f64[1,200,7,4]
                    jaq:f64[1,200,7,4] jar:f64[1,200,7,4] jas:f64[1,200,7,4] jat:f64[1,200,7,4]
                    jau:f64[1,200,7,4] jav:f64[1,200,7,4] jaw:f64[1,200,7,4] jax:f64[1,200,7,4]
                    jay:f64[1,200,7,4] jaz:f64[1,200,7,4] jba:f64[1,200,7,4] jbb:f64[1,200,7,4]
                    jbc:f64[1,200,7,4] jbd:f64[1,200,7,13,1] jbe:bool[1,200,7,13,4]
                    jbf:f64[1,200,7,13,4] jbg:f64[1,200,7,13] jbh:bool[1,200,7,13]
                    jbi:f64[1,200,7,13,4] jbj:f64[1,200,7,13,1] jbk:f64[1,200,7,13,3]
                    jbl:f64[1,200,7,13,1] jbm:f64[1,200,7,13] jbn:f64[1,200,7,13,3]
                    jbo:f64[1,200,7,13,1] jbp:f64[1,200,7,13,3] jbq:f64[1,200,7,13,1]
                    jbr:f64[1,200,7,13] jbs:f64[1,200,7,13,3] jbt:f64[1,200,7,13,1]
                    jbu:f64[1,200,7,13,3] jbv:f64[1,200,7,13,1] jbw:f64[1,200,7,13]
                    jbx:f64[1,200,7,13,3] jby:f64[1,200,7,13,1] jbz:f64[1,200,7,18,3]
                    jca:f64[1,200,7,18,1] jcb:f64[1,200,7,18] jcc:f64[1,200,7,18,3]
                    jcd:f64[1,200,7,18,1] jce:f64[1,200,7,18] jcf:f64[1,200,7,18]
                    jcg:f64[1,200,7,18] jch:f64[1,200,7,18] jci:f64[1,200,7,18] jcj:f64[1,200,7,18]
                    jck:f64[1,200,7,18,3] jcl:f64[1,200,7,18,3] jcm:f64[1,200,7,18,1]
                    jcn:f64[1,200,7,18,3] jco:f64[1,200,7,1,6] jcp:f64[1,200,7,1,1]
                    jcq:f64[1,200,7,1,6] jcr:f64[1,200,7,1,1] jcs:f64[1,200,7,1,6]
                    jct:f64[1,200,7,1,1] jcu:f64[1,200,7,1,1] jcv:f64[1,200,7,1,1]
                    jcw:f64[1,200,7,1,1] jcx:f64[1,200,7,18,1] jcy:f64[1,200,7,1,6]
                    jcz:f64[1,200,7,1,1] jda:f64[1,200,7,1,6] jdb:f64[1,200,7,1,1]
                    jdc:f64[1,200,7,1,6] jdd:f64[1,200,7,1,1] jde:f64[1,200,7,1,1]
                    jdf:f64[1,200,7,1,1] jdg:f64[1,200,7,1,1] jdh:f64[1,200,7,12]
                    jdi:f64[1,200,7,12] jdj:f64[1,200,7,12] jdk:f64[1,200,7,12] jdl:f64[1,200,7,12]
                    jdm:f64[1,200,7,12] jdn:f64[1,200,7,12] jdo:f64[1,200,7,12] jdp:f64[1,200,7,12]
                    jdq:f64[1,200,7,12] jdr:f64[1,200,7,12] jds:f64[1,200,7,12] jdt:f64[1,200,7,6,1]
                    jdu:f64[1,200,7,6,3] jdv:f64[1,200,7,4,1] jdw:f64[1,200,7,4,3]
                    jdx:f64[1,200,7,4,1] jdy:f64[1,200,7,4,3] jdz:f64[1,200,7,4,1]
                    jea:f64[1,200,7,4,3] jeb:f64[1,200,7,1,6] jec:f64[1,200,7,1,1]
                    jed:f64[1,200,7,1,6] jee:f64[1,200,7,1,1] jef:f64[1,200,7,1,6]
                    jeg:f64[1,200,7,1,1] jeh:f64[1,200,7,1,1] jei:f64[1,200,7,1,1]
                    jej:f64[1,200,7,1,1] jek:f64[1,200,7,12] jel:f64[1,200,7,12]
                    jem:f64[1,200,7,12] jen:f64[1,200,7,12] jeo:f64[1,200,7,12] jep:f64[1,200,7,12]
                    jeq:f64[1,200,7,6,1] jer:f64[1,200,7,6,3] jes:f64[1,200,7,4,1]
                    jet:f64[1,200,7,4,3] jeu:f64[1,200,7,4,1] jev:f64[1,200,7,4,3]
                    jew:f64[1,200,7,4,1] jex:f64[1,200,7,4,3] jey:f64[1,200,7,13]
                    jez:f64[1,200,7,13] jfa:f64[1,200,7,13] jfb:f64[1,200,7,13] jfc:f64[1,200,7,13]
                    jfd:f64[1,200,7,13] jfe:f64[1,200,7,13] jff:f64[1,200,7,13] jfg:f64[1,200,7,13]
                    jfh:f64[1,200,7,13] jfi:f64[1,200,7,13] jfj:f64[1,200,7,13] jfk:f64[1,200,7,13]
                    jfl:f64[1,200,7,13] jfm:f64[1,200,7,13] jfn:f64[1,200,7,13] jfo:f64[1,200,7,13]
                    jfp:f64[1,200,7,13] jfq:f64[1,200,7,18,3] jfr:f64[1,200,7,13]
                    jfs:f64[1,200,7,13] jft:f64[1,200,7,13] jfu:f64[1,200,7,13,4]
                    jfv:f64[1,200,7,13] jfw:f64[1,200,7,13] jfx:f64[1,200,7,13] jfy:f64[1,200,7,13]
                    jfz:f64[1,200,7,13] jga:f64[1,200,7,13] jgb:f64[1,200,7,13,3,3]
                    jgc:f64[1,13,200,7,3,3] jgd:f64[1,200,7,13,3,3] jge:f64[1,200,7,13,3,3]
                    jgf:f64[1,200,7,13,3] jgg:f64[1,200,7,13,3,3] jgh:f64[1,200,7,13]
                    jgi:f64[1,200,7,13] jgj:f64[1,200,7,13] jgk:f64[1,200,7,13] jgl:f64[1,200,7,13]
                    jgm:f64[1,200,7,13] jgn:f64[1,200,7,13,3] jgo:f64[1,200,7,13]
                    jgp:f64[1,200,7,13] jgq:f64[1,200,7,13] jgr:f64[1,200,7,13] jgs:f64[1,200,7,13]
                    jgt:f64[1,200,7,13] jgu:f64[1,200,7,13] jgv:f64[1,200,7,13] jgw:f64[1,200,7,13]
                    jgx:f64[1,200,7,13] jgy:f64[1,200,7,13] jgz:f64[1,200,7,13] jha:f64[1,200,7,13]
                    jhb:f64[1,200,7,13] jhc:f64[1,200,7,13] jhd:f64[1,200,7,13] jhe:f64[1,200,7,13]
                    jhf:f64[1,200,7,13] jhg:f64[1,200,7,1,3] jhh:f64[1,200,7,1,3]
                    jhi:f64[1,200,7,1,1] jhj:f64[1,200,7,1] jhk:f64[1,200,7,1,1]
                    jhl:f64[1,200,7,1,3] jhm:f64[1,200,7,1,1] jhn:f64[1,200,7,1]
                    jho:f64[1,200,7,1] jhp:f64[1,200,7,1] jhq:f64[1,200,7,1] jhr:f64[1,200,7,1]
                    jhs:f64[1,200,7,1] jht:f64[1,200,7,4,3] jhu:f64[1,200,7,4,3]
                    jhv:f64[1,200,7,4,1] jhw:f64[1,200,7,4] jhx:f64[1,200,7,4,1]
                    jhy:f64[1,200,7,4,3] jhz:f64[1,200,7,4,1] jia:f64[1,200,7,4]
                    jib:f64[1,200,7,4] jic:f64[1,200,7,4] jid:f64[1,200,7,4] jie:f64[1,200,7,4]
                    jif:f64[1,200,7,4] jig:f64[1,200,7,4,3] jih:f64[1,200,7,4,3]
                    jii:f64[1,200,7,4,1] jij:f64[1,200,7,4] jik:f64[1,200,7,4,1]
                    jil:f64[1,200,7,4,3] jim:f64[1,200,7,4,1] jin:f64[1,200,7,4]
                    jio:f64[1,200,7,4] jip:f64[1,200,7,4] jiq:f64[1,200,7,4] jir:f64[1,200,7,4]
                    jis:f64[1,200,7,4] jit:f64[1,200,7,4,3] jiu:f64[1,200,7,4,3]
                    jiv:f64[1,200,7,4,1] jiw:f64[1,200,7,4] jix:f64[1,200,7,4,1]
                    jiy:f64[1,200,7,4,3] jiz:f64[1,200,7,4,1] jja:f64[1,200,7,4]
                    jjb:f64[1,200,7,4] jjc:f64[1,200,7,4] jjd:f64[1,200,7,4] jje:f64[1,200,7,4]
                    jjf:f64[1,200,7,4] jjg:f64[1,200,7,4] jjh:f64[1,200,7,4] jji:f64[1,200,7,4]
                    jjj:f64[1,200,7,4] jjk:f64[1,200,7,4] jjl:f64[1,200,7,4] jjm:f64[1,200,7,4,3]
                    jjn:f64[1,200,7,4,3] jjo:f64[1,200,7,4,1] jjp:f64[1,200,7,4]
                    jjq:f64[1,200,7,4,1] jjr:f64[1,200,7,4,3] jjs:f64[1,200,7,4,1]
                    jjt:f64[1,200,7,4] jju:f64[1,200,7,4] jjv:f64[1,200,7,4] jjw:f64[1,200,7,4]
                    jjx:f64[1,200,7,4] jjy:f64[1,200,7,4] jjz:f64[1,200,7,4] jka:f64[1,200,7,4]
                    jkb:f64[1,200,7,4] jkc:f64[1,200,7,4] jkd:f64[1,200,7,4] jke:f64[1,200,7,4]
                    jkf:f64[1,200,7,4,3] jkg:f64[1,200,7,4,3] jkh:f64[1,200,7,4,1]
                    jki:f64[1,200,7,4] jkj:f64[1,200,7,4,1] jkk:f64[1,200,7,4,3]
                    jkl:f64[1,200,7,4,1] jkm:f64[1,200,7,4] jkn:f64[1,200,7,4] jko:f64[1,200,7,4]
                    jkp:f64[1,200,7,4] jkq:f64[1,200,7,4] jkr:f64[1,200,7,4] jks:f64[1,200,7,4]
                    jkt:f64[1,200,7,4] jku:f64[1,200,7,4] jkv:f64[1,200,7,4] jkw:f64[1,200,7,4]
                    jkx:f64[1,200,7,4] jky:f64[1,200,7,4,3] jkz:f64[1,200,7,4,3]
                    jla:f64[1,200,7,4,1] jlb:f64[1,200,7,4] jlc:f64[1,200,7,4,1]
                    jld:f64[1,200,7,4,3] jle:f64[1,200,7,4,1] jlf:f64[1,200,7,4]
                    jlg:f64[1,200,7,4] jlh:f64[1,200,7,4] jli:f64[1,200,7,4] jlj:f64[1,200,7,4]
                    jlk:f64[1,200,7,4] jll:f64[1,200,7,18,3] jlm:f64[1,200,7,18]
                    jln:f64[1,200,7,18] jlo:f64[1,200,7,18] jlp:f64[1,200,7,18] jlq:f64[1,200,7,18]
                    jlr:f64[1,200,7,18] jls:f64[1,200,7,18,3] jlt:f64[1,200,7,18,3,3]
                    jlu:f64[1,200,7,18] jlv:f64[1,200,7,18] jlw:f64[1,200,7,18] jlx:f64[1,200,7,18]
                    jly:f64[1,200,7,18] jlz:f64[1,200,7,18] jma:f64[1,200,7,18,18]
                    jmb:f64[1,200,7,18,18] jmc:f64[1,200,7,18,18] jmd:f64[1,4,200,7,18,18]
                    jme:f64[1,4,200,7,18,18] jmf:f64[1,4,200,7,18,18] jmg:f64[1,4,200,7,18]
                    jmh:f64[1,4,200,7,18,18] jmi:f64[1,4,200,7,12] jmj:bool[1,4,200,7,12]
                    jmk:f64[1,4,200,7,12] jml:f64[1,4,200,7,12] jmm:f64[1,4,200,7,12]
                    jmn:f64[1,4,200,7,12] jmo:bool[1,4,200,7,12] jmp:bool[1,4,200,7,12]
                    jmq:bool[1,4,200,7,3] jmr:bool[1,4,200,7] jms:f64[1,4,200,7,3]
                    jmt:f64[1,4,200,7,3] jmu:f64[1,4,200,7,1] jmv:f64[1,4,200,7]
                    jmw:f64[1,4,200,7,1] jmx:f64[1,4,200,7,3] jmy:f64[1,4,200,7,1]
                    jmz:f64[1,4,200,7] jna:f64[1,4,200,7] jnb:f64[1,4,200,7] jnc:f64[1,4,200,7]
                    jnd:f64[1,4,200,7] jne:f64[1,4,200,7] jnf:f64[1,4,200,7,3] jng:f64[1,4,200,7,3]
                    jnh:f64[1,4,200,7,1] jni:f64[1,4,200,7] jnj:f64[1,4,200,7,1]
                    jnk:f64[1,4,200,7,3] jnl:f64[1,4,200,7,1] jnm:f64[1,4,200,7]
                    jnn:f64[1,4,200,7] jno:f64[1,4,200,7] jnp:f64[1,4,200,7] jnq:f64[1,4,200,7]
                    jnr:f64[1,4,200,7] jns:f64[1,4,200,7] jnt:f64[1,4,200,7] jnu:f64[1,4,200,7]
                    jnv:bool[1,4,200,7] jnw:f64[1,4,200,7] jnx:f64[1,4,200,7] jny:f64[1,4,200,7]
                    jnz:f64[1,4,200,7] joa:f64[1,4,200,7] job:bool[1,4,200,7,3] joc:bool[1,4,200,7]
                    jod:bool[1,4,200,7] joe:f64[1,4,200,7] jof:f64[1,4,200,7] jog:f64[1,4,200,7]
                    joh:f64[1,4,200,7] joi:f64[1,4,200,7] joj:bool[1,4,200,7,3] jok:bool[1,4,200,7]
                    jol:bool[1,4,200,7] jom:f64[1,4,200,7] jon:f64[1,4,200,7] joo:f64[1,4,200,7]
                    jop:f64[1,4,200,7] joq:f64[1,4,200,7] jor:bool[1,4,200,7,3] jos:bool[1,4,200,7]
                    jot:bool[1,4,200,7] jou:f64[1,4,200,7] jov:f64[1,4,200,7] jow:f64[1,4,200,7]
                    jox:f64[1,4,200,7] joy:f64[1,4,200,7] joz:f64[1,4,200,7] jpa:f64[1,4,200,7]
                    jpb:f64[1,4,200,7] jpc:f64[1,4,200,7] jpd:f64[1,4,200,7] jpe:f64[1,4,200,7]
                    jpf:f64[1,4,200,7] jpg:f64[1,4,200,7] jph:f64[1,4,200,7] jpi:f64[1,4,200,7]
                    jpj:f64[1,4,200,7] jpk:f64[1,4,200,7] jpl:f64[1,4,200,7] jpm:f64[1,4,200,7]
                    jpn:f64[1,4,200,7] jpo:f64[1,4,200,7] jpp:f64[1,4,200,7] jpq:f64[1,4,200,7]
                    jpr:f64[1,4,200,7] jps:f64[1,4,200,7] jpt:f64[1,4,200,7] jpu:f64[1,4,200,7]
                    jpv:f64[1,4,200,7] jpw:f64[1,4,200,7] jpx:f64[1,4,200,7] jpy:f64[1,4,200,7]
                    jpz:f64[1,4,200,7] jqa:f64[1,4,200,7] jqb:f64[1,4,200,7] jqc:f64[1,4,200,7]
                    jqd:f64[1,4,200,7] jqe:f64[1,4,200,7] jqf:f64[1,4,200,7] jqg:f64[1,4,200,7]
                    jqh:f64[1,4,200,7] jqi:f64[1,4,200,7] jqj:f64[1,4,200,7] jqk:f64[1,4,200,7]
                    jql:f64[1,4,200,7] jqm:f64[1,4,200,7] jqn:f64[1,4,200,7] jqo:f64[1,4,200,7]
                    jqp:f64[1,4,200,7] jqq:f64[1,4,200,7] jqr:f64[1,4,200,7] jqs:f64[1,4,200,7]
                    jqt:f64[1,4,200,7] jqu:f64[1,4,200,7] jqv:f64[1,4,200,7] jqw:f64[1,4,200,7]
                    jqx:f64[1,4,200,7] jqy:f64[1,4,200,7] jqz:f64[1,4,200,7] jra:f64[1,4,200,7]
                    jrb:f64[1,4,200,7] jrc:f64[1,4,200,7] jrd:f64[1,4,200,7] jre:f64[1,4,200,7]
                    jrf:f64[1,4,200,7] jrg:f64[1,4,200,7] jrh:f64[1,4,200,7] jri:f64[1,4,200,7]
                    jrj:f64[1,4,200,7] jrk:f64[1,4,200,7] jrl:f64[1,4,200,7] jrm:f64[1,4,200,7]
                    jrn:f64[1,4,200,7] jro:f64[1,4,200,7] jrp:f64[1,4,200,7] jrq:f64[1,4,200,7]
                    jrr:f64[1,4,200,7] jrs:f64[1,4,200,7] jrt:f64[1,4,200,7] jru:f64[1,4,200,7]
                    jrv:f64[1,4,200,7] jrw:f64[1,4,200,7] jrx:f64[1,4,200,7] jry:f64[1,4,200,7]
                    jrz:f64[1,4,200,7] jsa:f64[1,4,200,7] jsb:f64[1,4,200,7] jsc:f64[1,4,200,7]
                    jsd:f64[1,4,200,7] jse:f64[1,4,200,7] jsf:f64[1,4,200,7] jsg:f64[1,4,200,7]
                    jsh:f64[1,4,200,7] jsi:f64[1,4,200,7] jsj:f64[1,4,200,7] jsk:f64[1,4,200,7]
                    jsl:f64[1,4,200,7] jsm:f64[1,4,200,7] jsn:f64[1,4,200,7] jso:f64[1,4,200,7]
                    jsp:f64[1,4,200,7] jsq:f64[1,4,200,7] jsr:f64[1,4,200,7] jss:f64[1,4,200,7]
                    jst:f64[1,4,200,7] jsu:f64[1,4,200,7] jsv:f64[1,4,200,7] jsw:f64[1,4,200,7]
                    jsx:f64[1,4,200,7] jsy:f64[1,4,200,7] jsz:f64[1,4,200,7] jta:f64[1,4,200,7]
                    jtb:f64[1,4,200,7] jtc:f64[1,4,200,7] jtd:f64[1,4,200,7] jte:f64[1,4,200,7]
                    jtf:f64[1,4,200,7] jtg:f64[1,4,200,7] jth:f64[1,4,200,7] jti:f64[1,4,200,7]
                    jtj:f64[1,4,200,7] jtk:f64[1,4,200,7] jtl:f64[1,4,200,7] jtm:f64[1,4,200,7]
                    jtn:f64[1,4,200,7] jto:f64[1,4,200,7] jtp:f64[1,4,200,7] jtq:f64[1,4,200,7]
                    jtr:f64[1,4,200,7] jts:f64[1,4,200,7] jtt:f64[1,4,200,7] jtu:f64[1,4,200,7]
                    jtv:f64[1,4,200,7] jtw:f64[1,4,200,7] jtx:f64[1,4,200,7,12] jty:f64[1,4,200,7,12]
                    jtz:f64[1,4,200,7,12] jua:f64[1,4,200,7,12] jub:f64[1,4,200,7,12]
                    juc:f64[1,4,200,7,12] jud:f64[1,4,200,7,12] jue:f64[1,4,200,7,12]
                    juf:f64[1,4,200,7,1] jug:f64[1,4,200,7,1] juh:f64[1,4,200,7,1,3]
                    jui:f64[1,4,200,7,1] juj:f64[1,4,200,7,1] juk:f64[1,4,200,7,1,1]
                    jul:f64[1,4,200,7,1,1] jum:f64[1,4,200,7,1] jun:f64[1,4,200,7,1]
                    juo:f64[1,4,200,7,1] jup:f64[1,4,200,7,1] juq:f64[1,4,200,7,1]
                    jur:f64[1,4,200,7,1] jus:f64[1,4,200,7,1] jut:f64[1,4,200,7,1]
                    juu:f64[1,4,200,7,1] juv:f64[1,4,200,7,1] juw:f64[1,4,200,7,1]
                    jux:f64[1,4,200,7,1] juy:f64[1,4,200,7,1] juz:f64[1,4,200,7,1]
                    jva:f64[1,4,200,7,1] jvb:f64[1,4,200,7,1] jvc:f64[1,4,200,7,1]
                    jvd:f64[1,4,200,7,1] jve:f64[1,4,200,7,1] jvf:f64[1,4,200,7,1]
                    jvg:f64[1,4,200,7,1] jvh:f64[1,4,200,7,1] jvi:f64[1,4,200,7,1]
                    jvj:f64[1,4,200,7,1] jvk:f64[1,4,200,7,1] jvl:f64[1,4,200,7,1]
                    jvm:f64[1,4,200,7,1] jvn:f64[1,4,200,7,1] jvo:f64[1,4,200,7,1]
                    jvp:f64[1,4,200,7,1] jvq:f64[1,4,200,7,1] jvr:f64[1,4,200,7,1]
                    jvs:f64[1,4,200,7,1] jvt:f64[1,4,200,7,1] jvu:f64[1,4,200,7,1]
                    jvv:f64[1,4,200,7,1] jvw:f64[1,4,200,7,1] jvx:f64[1,4,200,7,1]
                    jvy:f64[1,4,200,7,1] jvz:f64[1,4,200,7,1,1] jwa:f64[1,4,200,7,1,4]
                    jwb:f64[1,4,200,7,1] jwc:f64[1,4,200,7,1,1] jwd:f64[1,200,7,3]
                    jwe:f64[1,200,7,3] jwf:f64[1,200,7,1] jwg:f64[1,200,7] jwh:f64[1,200,7,1]
                    jwi:f64[1,200,7,3] jwj:f64[1,200,7,1] jwk:f64[1,200,7] jwl:f64[1,200,7]
                    jwm:f64[1,200,7] jwn:f64[1,200,7] jwo:f64[1,200,7] jwp:f64[1,200,7]
                    jwq:f64[1,200,7,3] jwr:f64[1,200,7,3] jws:f64[1,200,7,1] jwt:f64[1,200,7]
                    jwu:f64[1,200,7,1] jwv:f64[1,200,7,3] jww:f64[1,200,7,1] jwx:f64[1,200,7]
                    jwy:f64[1,200,7] jwz:f64[1,200,7] jxa:f64[1,200,7] jxb:f64[1,200,7]
                    jxc:f64[1,200,7] jxd:f64[1,200,7] jxe:f64[1,200,7] jxf:f64[1,200,7]
                    jxg:f64[1,200,7] jxh:f64[1,200,7] = scan[
                    _split_transpose=False
                    jaxpr={ lambda ; jxi:f64[1,1,18,18] jxj:bool[200,7,18,18] jxk:f64[200,7,18,18]
                        jxl:bool[200,7,18,18] jxm:f64[200,7,18,18] jxn:bool[200,7,18,18]
                        jxo:f64[200,7,18,18] jxp:f64[200,7,18,18] jxq:f64[200,7,18]
                        jxr:i32[12,1] jxs:f64[1,1,12] jxt:f64[200,7,12] jxu:f64[200,7,12]
                        jxv:bool[200,7,12] jxw:f64[200,7,12] jxx:f64[200,7,12] jxy:f64[200,7,12]
                        jxz:f64[200,7,12] jya:bool[200,7,12] jyb:bool[200,7,12] jyc:f64[1,1,12]
                        jyd:f64[1,1,12] jye:f64[1,1,12] jyf:f64[1,1,12] jyg:f64[1,1,12]
                        jyh:f64[1,1,12] jyi:f64[1,1,12] jyj:f64[1,1,12] jyk:f64[1,1,12]
                        jyl:f64[1,1,12] jym:f64[1,1,12] jyn:f64[1,1,3] jyo:f64[1,1,4]
                        jyp:i32[1] jyq:i32[1] jyr:i32[1] jys:i32[1] jyt:i32[1] jyu:i32[1]
                        jyv:i32[1] jyw:i32[1] jyx:i32[1] jyy:i32[1] jyz:i32[1] jza:i32[1]
                        jzb:f64[1,1,36] jzc:f64[1,1,36] jzd:f64[1,1,36] jze:f64[1,1,36]
                        jzf:f64[] jzg:f64[] jzh:bool[] jzi:bool[200,7] jzj:bool[200,7]
                        jzk:f64[] jzl:f64[] jzm:f64[] jzn:f64[] jzo:f64[] jzp:f64[]
                        jzq:f64[] jzr:f64[] jzs:f64[200,7,1] jzt:f64[1,1,3] jzu:f64[]
                        jzv:f64[] jzw:bool[] jzx:bool[200,7] jzy:bool[200,7] jzz:f64[]
                        kaa:f64[] kab:f64[] kac:f64[] kad:f64[] kae:f64[] kaf:f64[]
                        kag:f64[] kah:f64[200,7,1] kai:f64[1,1,3] kaj:f64[] kak:f64[]
                        kal:bool[] kam:bool[200,7] kan:bool[200,7] kao:f64[] kap:f64[]
                        kaq:f64[] kar:f64[] kas:f64[] kat:f64[] kau:f64[] kav:f64[]
                        kaw:f64[200,7,1] kax:f64[1,1,3] kay:f64[] kaz:f64[] kba:bool[]
                        kbb:bool[200,7] kbc:bool[200,7] kbd:f64[] kbe:f64[] kbf:f64[]
                        kbg:f64[] kbh:f64[] kbi:f64[] kbj:f64[] kbk:f64[] kbl:f64[200,7,1]
                        kbm:f64[] kbn:f64[] kbo:f64[] kbp:f64[] kbq:f64[] kbr:f64[]
                        kbs:f64[] kbt:f64[200,7] kbu:f64[200,7] kbv:f64[200,7] kbw:f64[200,7]
                        kbx:f64[] kby:f64[200,7] kbz:f64[200,7] kca:f64[200,7] kcb:f64[200,7]
                        kcc:f64[] kcd:f64[] kce:f64[] kcf:f64[] kcg:f64[] kch:f64[]
                        kci:f64[] kcj:f64[200,7] kck:f64[200,7] kcl:f64[200,7] kcm:f64[200,7]
                        kcn:f64[] kco:f64[200,7] kcp:f64[200,7] kcq:f64[200,7] kcr:f64[200,7]
                        kcs:f64[] kct:f64[] kcu:f64[] kcv:f64[] kcw:f64[] kcx:f64[]
                        kcy:f64[] kcz:f64[200,7] kda:f64[200,7] kdb:f64[200,7] kdc:f64[200,7]
                        kdd:f64[] kde:f64[200,7] kdf:f64[200,7] kdg:f64[200,7] kdh:f64[200,7]
                        kdi:f64[] kdj:f64[] kdk:f64[] kdl:f64[] kdm:f64[] kdn:f64[]
                        kdo:f64[] kdp:f64[200,7] kdq:f64[200,7] kdr:f64[200,7] kds:f64[200,7]
                        kdt:f64[] kdu:f64[200,7] kdv:f64[200,7] kdw:f64[200,7] kdx:f64[200,7]
                        kdy:f64[1,1,12] kdz:f64[200,7,12] kea:f64[200,7,12] keb:f64[200,7,12]
                        kec:f64[200,7,12] ked:f64[1,1,12] kee:f64[200,7,12] kef:f64[200,7,12]
                        keg:f64[200,7,12] keh:f64[200,7,12] kei:f64[1,1,12] kej:f64[1,1,12]
                        kek:f64[1,1,12] kel:f64[200,7,12] kem:f64[200,7,12] ken:f64[200,7,12]
                        keo:f64[200,7,12] kep:f64[1,1,12] keq:f64[200,7,12] ker:f64[200,7,12]
                        kes:f64[200,7,12] ket:f64[200,7,12] keu:f64[1,1,12] kev:i32[12,1]
                        kew:f64[1,1,12] kex:i32[12,1] key:f64[1,1,12] kez:f64[1,1,12]
                        kfa:f64[200,7,12] kfb:f64[200,7,12] kfc:f64[200,7,12] kfd:f64[200,7,12]
                        kfe:f64[1,1,12] kff:f64[200,7,12] kfg:f64[200,7,12] kfh:f64[200,7,12]
                        kfi:f64[200,7,12] kfj:f64[1,1,12] kfk:f64[200,7,6] kfl:f64[200,7,19]
                        kfm:i32[1] kfn:f64[1,1,36] kfo:f64[1,1,36] kfp:i32[1] kfq:f64[1,1,12]
                        kfr:f64[1,1,18] kfs:f64[200,7,18] kft:i32[1] kfu:i32[1] kfv:i32[1]
                        kfw:i32[1] kfx:i32[1] kfy:i32[1] kfz:i32[1] kga:i32[1] kgb:f64[1,1,4]
                        kgc:i32[1] kgd:i32[1] kge:i32[1] kgf:i32[1] kgg:i32[1] kgh:i32[1]
                        kgi:i32[1] kgj:f64[1,1,13,1] kgk:f64[200,7,1,3] kgl:i32[6,1]
                        kgm:f64[18,3] kgn:f64[1,1,13] kgo:f64[1,1,12] kgp:f64[1,1,12]
                        kgq:f64[1,1,12] kgr:f64[] kgs:f64[] kgt:bool[] kgu:bool[]
                        kgv:f64[200,7,12,4] kgw:f64[200,7,12] kgx:i64[1] kgy:f64[1,1,13]
                        kgz:f64[1,1,13] kha:f64[1,1,13] khb:f64[1,1,13] khc:f64[1,1,13]
                        khd:f64[1,1,13] khe:f64[1,1,13] khf:f64[1,1,13] khg:f64[1,1,13]
                        khh:f64[1,1,13] khi:f64[1,1,13] khj:f64[1,1,13] khk:f64[1,1,13]
                        khl:f64[1,1,13] khm:f64[1,1,13] khn:i64[4,1] kho:i64[4,1]
                        khp:i64[4,1] khq:i64[4,1] khr:i64[13,1] khs:f64[] kht:f64[]
                        khu:bool[] khv:bool[] khw:f64[200,7,13,4] khx:f64[200,7,13]
                        khy:f64[200,7,1,4] khz:i32[13,1] kia:f64[1,1,13] kib:f64[1,1,13]
                        kic:f64[1,1,13] kid:f64[1,1,13] kie:f64[1,1,13] kif:f64[1,1,13]
                        kig:f64[1,1,13] kih:f64[1,1,13] kii:f64[1,1,13] kij:f64[1,1,13]
                        kik:f64[1,1,13] kil:f64[1,1,13] kim:f64[1,1,13] kin:f64[1,1,13]
                        kio:f64[1,1,13] kip:f64[1,1,13] kiq:f64[1,1,13] kir:f64[1,1,13]
                        kis:f64[1,1,13] kit:f64[1,1,13] kiu:f64[1,1,13] kiv:f64[1,1,13]
                        kiw:f64[1,1,13] kix:f64[1,1,13] kiy:f64[1,1,13] kiz:f64[1,1,13]
                        kja:f64[1,1,13] kjb:f64[1,1,13] kjc:f64[1,1,13] kjd:f64[1,1,13]
                        kje:f64[1,1,13] kjf:f64[1,1,13] kjg:i64[18,1] kjh:f64[18,3]
                        kji:f64[1,1,18,3] kjj:i32[1] kjk:f64[1,1,18] kjl:i32[1] kjm:f64[1,1,18]
                        kjn:f64[1,1,18] kjo:i32[1] kjp:f64[1,1,18] kjq:f64[1,1,18]
                        kjr:f64[1,1,18] kjs:f64[1,1,18,3] kjt:f64[1,1,18,1] kju:f64[1,1,18,1]
                        kjv:f64[1,1,18] kjw:i32[1] kjx:f64[1,1,18] kjy:i32[1] kjz:f64[1,1,18]
                        kka:i32[1] kkb:f64[1,1,18] kkc:f64[1,1,18] kkd:f64[1,1,18]
                        kke:f64[18,3] kkf:f64[1,1,18,3] kkg:f64[200,7,13,3] kkh:i32[13,1]
                        kki:f64[1,1,13,1] kkj:f64[1,1,13,3] kkk:f64[13,3] kkl:f64[1,1,12,3]
                        kkm:i64[1] kkn:f64[1,1,13,3] kko:f64[1,1,13,3] kkp:f64[13,3]
                        kkq:f64[1,1,13,3] kkr:i32[1] kks:f64[1,1,13] kkt:i32[1] kku:f64[1,1,13]
                        kkv:f64[1,1,13] kkw:i32[1] kkx:f64[1,1,13] kky:f64[1,1,13]
                        kkz:f64[1,1,13] kla:f64[1,1,13,3] klb:f64[1,1,13,1] klc:f64[1,1,13,1]
                        kld:f64[1,1,13] kle:i32[1] klf:f64[1,1,13] klg:i32[1] klh:f64[1,1,13]
                        kli:i32[1] klj:f64[1,1,13] klk:f64[1,1,13] kll:f64[1,1,13]
                        klm:i64[4,1] kln:i64[4,1] klo:i32[1] klp:i32[1] klq:i32[1]
                        klr:i32[1] kls:i32[1] klt:i32[1] klu:i64[4,1] klv:i32[1]
                        klw:i32[1] klx:i32[1] kly:i32[1] klz:i32[1] kma:i32[1] kmb:i64[4,1]
                        kmc:i32[1] kmd:i32[1] kme:i32[1] kmf:i32[1] kmg:i32[1] kmh:i32[1]
                        kmi:i64[13,1] kmj:f64[13,3] kmk:f64[1,1,13,3] kml:i32[1]
                        kmm:f64[1,1,13] kmn:i32[1] kmo:f64[1,1,13] kmp:f64[1,1,13]
                        kmq:i32[1] kmr:f64[1,1,13] kms:f64[1,1,13] kmt:f64[1,1,13]
                        kmu:i32[13,1] kmv:f64[1,1,13,1] kmw:f64[200,7,1,3] kmx:i32[13,1]
                        kmy:f64[13,3] kmz:f64[1,1,13,3] kna:i32[1] knb:f64[1,1,13]
                        knc:i32[1] knd:f64[1,1,13] kne:f64[1,1,13] knf:i32[1] kng:f64[1,1,13]
                        knh:f64[1,1,13] kni:f64[1,1,13] knj:f64[1,1,13,3] knk:i32[1]
                        knl:f64[1,1,13] knm:i32[1] knn:f64[1,1,13] kno:f64[1,1,13]
                        knp:i32[1] knq:f64[1,1,13] knr:f64[1,1,13] kns:f64[1,1,13]
                        knt:i64[18,1] knu:i32[1] knv:i32[1] knw:i32[1] knx:i32[1]
                        kny:i32[1] knz:i32[1] koa:f64[1,1,18,3] kob:f64[1,1,18,1]
                        koc:f64[1,1,18,1] kod:f64[1,1,18] koe:i32[1] kof:f64[1,1,18]
                        kog:i32[1] koh:f64[1,1,18] koi:i32[1] koj:f64[1,1,18] kok:f64[1,1,18]
                        kol:f64[1,1,18] kom:i32[1] kon:i32[1] koo:i32[1] kop:i32[1]
                        koq:i32[1] kor:i32[1] kos:i32[1] kot:i32[1] kou:i32[1] kov:i32[1]
                        kow:i32[1] kox:i32[1] koy:i32[1] koz:f64[200,7,1,3,3] kpa:f64[200,7,1,3]
                        kpb:i32[6,1] kpc:i64[4,1] kpd:i32[4,1] kpe:i64[4,1] kpf:i32[4,1]
                        kpg:i64[4,1] kph:i32[4,1] kpi:i64[4,1] kpj:i64[13,1] kpk:f64[200,7,1,3]
                        kpl:i32[13,1] kpm:i32[1] kpn:i32[1] kpo:i32[1] kpp:i32[1]
                        kpq:i32[1] kpr:i32[1] kps:f64[200,7,1,3] kpt:i32[6,1] kpu:i64[4,1]
                        kpv:i32[4,1] kpw:i64[4,1] kpx:i32[4,1] kpy:i64[4,1] kpz:i32[4,1]
                        kqa:i64[4,1] kqb:i64[13,1] kqc:f64[200,7,1,3] kqd:i32[13,1]
                        kqe:i32[1] kqf:i32[1] kqg:i32[1] kqh:i32[1] kqi:i32[1] kqj:i32[1]
                        kqk:i64[4,1] kql:i32[4,1] kqm:i64[4,1] kqn:i64[4,1] kqo:i32[4,1]
                        kqp:i64[4,1] kqq:i64[4,1] kqr:i32[4,1] kqs:i64[4,1] kqt:i64[4,1]
                        kqu:i64[13,1] kqv:f64[1,1,13,1] kqw:f64[200,7,1,3] kqx:i32[6,1]
                        kqy:i32[1] kqz:i32[1] kra:i32[1] krb:i32[1] krc:i32[1] krd:i32[1]
                        kre:i32[1] krf:f64[200,7,1,3,3] krg:i32[1] krh:i32[1] kri:i32[1]
                        krj:i32[1] krk:i32[1] krl:i32[1] krm:i64[4,1] krn:i32[4,1]
                        kro:i64[4,1] krp:i32[4,1] krq:i64[4,1] krr:i32[4,1] krs:i64[4,1]
                        krt:i64[13,1] kru:i32[1] krv:i32[1] krw:i32[1] krx:i32[1]
                        kry:i32[1] krz:i32[1] ksa:f64[1,1,13,1] ksb:i32[1] ksc:i32[1]
                        ksd:i32[1] kse:i32[1] ksf:i32[1] ksg:i32[1] ksh:i32[1] ksi:i32[1]
                        ksj:i32[1] ksk:i32[1] ksl:i32[1] ksm:i32[1] ksn:f64[200,7,1,3]
                        kso:i32[4,1] ksp:i64[4,1] ksq:f64[200,7,4,3] ksr:i32[4,1]
                        kss:i64[4,1] kst:f64[200,7,4,3] ksu:i32[4,1] ksv:i64[4,1]
                        ksw:i64[13,1] ksx:i64[18,1] ksy:f64[1,1,13] ksz:f64[1,1,13]
                        kta:f64[1,1,13] ktb:f64[1,1,13] ktc:f64[1,1,13] ktd:f64[1,1,13]
                        kte:f64[1,1,13] ktf:f64[1,1,13] ktg:f64[1,1,13] kth:f64[1,1,13]
                        kti:f64[1,1,13] ktj:f64[1,1,13] ktk:f64[1,1,13] ktl:f64[1,1,13]
                        ktm:f64[1,1,13] ktn:f64[1,1,13] kto:f64[13,3,3] ktp:i32[1]
                        ktq:f64[1,1,1,3] ktr:i32[1] kts:f64[1,1,1,3] ktt:f64[1,1,1,3]
                        ktu:i32[1] ktv:f64[1,1,1,3] ktw:f64[1,1,1,3] ktx:f64[1,1,1,3]
                        kty:f64[1,1,13,1,1] ktz:i32[1] kua:i32[1] kub:i32[1] kuc:i32[1]
                        kud:i32[1] kue:i32[1] kuf:i32[1] kug:i32[1] kuh:i32[1] kui:i32[1]
                        kuj:i32[1] kuk:i32[1] kul:i32[1] kum:i32[1] kun:i32[1] kuo:i32[1]
                        kup:i32[1] kuq:i32[1] kur:i32[1] kus:i32[1] kut:i32[1] kuu:i32[1]
                        kuv:i32[1] kuw:i32[1] kux:f64[200,7,1,3] kuy:i32[4,1] kuz:i64[4,1]
                        kva:f64[200,7,4,3] kvb:i32[4,1] kvc:i64[4,1] kvd:f64[200,7,4,3]
                        kve:i32[4,1] kvf:i64[4,1] kvg:i64[13,1] kvh:i64[18,1] kvi:f64[1,1,18]
                        kvj:f64[1,1,12,3] kvk:i64[1] kvl:i32[1] kvm:i32[1] kvn:i32[1]
                        kvo:i32[1] kvp:i32[1] kvq:i32[1] kvr:i64[4,1] kvs:i64[4,1]
                        kvt:i32[1] kvu:i32[1] kvv:i32[1] kvw:i32[1] kvx:i32[1] kvy:i32[1]
                        kvz:i64[4,1] kwa:i32[1] kwb:i32[1] kwc:i32[1] kwd:i32[1]
                        kwe:i32[1] kwf:i32[1] kwg:i64[4,1] kwh:i32[1] kwi:i32[1]
                        kwj:i32[1] kwk:i32[1] kwl:i32[1] kwm:i32[1] kwn:f64[1,1,12,3]
                        kwo:i64[1] kwp:i32[1] kwq:i32[1] kwr:i32[1] kws:i32[1] kwt:i32[1]
                        kwu:i32[1] kwv:i64[4,1] kww:i32[1] kwx:i32[1] kwy:i32[1]
                        kwz:i32[1] kxa:i32[1] kxb:i32[1] kxc:i32[1] kxd:i32[1] kxe:i32[1]
                        kxf:i32[1] kxg:i32[1] kxh:i32[1] kxi:i64[4,1] kxj:i32[1]
                        kxk:i32[1] kxl:i32[1] kxm:i32[1] kxn:i32[1] kxo:i32[1] kxp:i32[1]
                        kxq:i32[1] kxr:i32[1] kxs:i32[1] kxt:i32[1] kxu:i32[1] kxv:i64[4,1]
                        kxw:i32[1] kxx:i32[1] kxy:i32[1] kxz:i32[1] kya:i32[1] kyb:i32[1]
                        kyc:f64[1,1,18,1] kyd:f64[200,7,1,3] kye:i32[4,1] kyf:i64[4,1]
                        kyg:f64[200,7,4,3] kyh:i32[4,1] kyi:i64[4,1] kyj:f64[200,7,4,3]
                        kyk:i32[4,1] kyl:i64[4,1] kym:i64[13,1] kyn:i64[18,1] kyo:i32[1]
                        kyp:i32[1] kyq:i32[1] kyr:i32[1] kys:i32[1] kyt:i32[1] kyu:f64[200,7,1,3,3]
                        kyv:i32[4,1] kyw:i64[4,1] kyx:f64[200,7,4,3,3] kyy:i32[4,1]
                        kyz:i64[4,1] kza:f64[200,7,4,3,3] kzb:i32[4,1] kzc:i64[4,1]
                        kzd:i64[13,1] kze:i64[18,1] kzf:i32[1] kzg:i32[1] kzh:i32[1]
                        kzi:i32[1] kzj:i32[1] kzk:i32[1] kzl:f64[1,1,18,18] kzm:bool[200,7,18,18]
                        kzn:f64[200,7,18,18] kzo:bool[200,7,18,18] kzp:f64[200,7,18,18]
                        kzq:f64[1,1,18,18] kzr:bool[200,7,18,18] kzs:f64[200,7,18,18]
                        kzt:bool[200,7,18,18] kzu:f64[200,7,18,18] kzv:bool[200,7,18,18]
                        kzw:f64[200,7,18,18] kzx:f64[200,7,18,18] kzy:f64[1,1,4]
                        kzz:i32[1] laa:i32[1] lab:i32[1] lac:i32[1] lad:i32[1] lae:i32[1]
                        laf:i32[1] lag:i32[1] lah:i32[1] lai:i32[1] laj:i32[1] lak:i32[1]
                        lal:i32[1] lam:f64[1,1,36] lan:f64[1,1,36] lao:i32[1] lap:f64[1,1,36]
                        laq:f64[1,1,36] lar:f64[1,1,36] las:f64[1,1,36] lat:f64[1,1,36]
                        lau:f64[1,1,36] lav:f64[200,7,12] law:f64[200,7,12] lax:f64[4,200,7,18]
                        lay:f64[200,7,36]. let
                        laz:f64[200,7,36] = add lay 1.0
                        lba:f64[200,7,36] = mul laz kfn
                        lbb:f64[200,7,36] = div lba 2.0
                        lbc:f64[200,7,36] = add lbb kfo
                        lbd:f64[200,7,4] = slice[
                          limit_indices=(200, 7, 4)
                          start_indices=(0, 0, 0)
                          strides=None
                        ] lbc
                        lbe:f64[200,7,19] = scatter[
                          dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(), scatter_dims_to_operand_dims=(2,))
                          indices_are_sorted=True
                          mode=GatherScatterMode.FILL_OR_DROP
                          unique_indices=True
                          update_consts=()
                          update_jaxpr=None
                        ] kfl kfm lbd
                        lbf:f64[200,7,12] = slice[
                          limit_indices=(200, 7, 16)
                          start_indices=(0, 0, 4)
                          strides=None
                        ] lbc
                        lbg:f64[200,7,19] = scatter[
                          dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(), scatter_dims_to_operand_dims=(2,))
                          indices_are_sorted=True
                          mode=GatherScatterMode.FILL_OR_DROP
                          unique_indices=True
                          update_consts=()
                          update_jaxpr=None
                        ] lbe kfp lbf
                        lbh:f64[200,7,12] = slice[
                          limit_indices=(200, 7, 19)
                          start_indices=(0, 0, 7)
                          strides=None
                        ] lbg
                        lbi:f64[200,7,12] = neg lbh
                        lbj:f64[200,7,12] = mul lbi kfq
                        lbk:f64[200,7,18] = concatenate[dimension=2] kfk lbj
                        lbl:f64[200,7,4] = slice[
                          limit_indices=(200, 7, 4)
                          start_indices=(0, 0, 0)
                          strides=None
                        ] lbc
                        lbm:f64[200,7,3] = slice[
                          limit_indices=(200, 7, 4)
                          start_indices=(0, 0, 1)
                          strides=None
                        ] lbl
                        lbn:f64[200,7,3] = slice[
                          limit_indices=(200, 7, 19)
                          start_indices=(0, 0, 16)
                          strides=None
                        ] lbc
                        lbo:f64[200,7] = dot_general[
                          dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
                          preferred_element_type=float64
                        ] lbm lbn
                        lbp:f64[200,7,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1)
                          shape=(200, 7, 1)
                        ] lbo
                        lbq:f64[200,7,3] = mul lbp lbm
                        lbr:f64[200,7,3] = mul 2.0 lbq
                        lbs:f64[200,7,1] = slice[
                          limit_indices=(200, 7, 1)
                          start_indices=(0, 0, 0)
                          strides=None
                        ] lbl
                        lbt:f64[200,7] = squeeze[dimensions=(2,)] lbs
                        lbu:f64[200,7] = mul lbt lbt
                        lbv:f64[200,7] = dot_general[
                          dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
                          preferred_element_type=float64
                        ] lbm lbm
                        lbw:f64[200,7] = sub lbu lbv
                        lbx:f64[200,7,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1)
                          shape=(200, 7, 1)
                        ] lbw
                        lby:f64[200,7,3] = mul lbx lbn
                        lbz:f64[200,7,3] = add lbr lby
                        lca:f64[200,7] = mul 2.0 lbt
                        lcb:f64[200,7,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1)
                          shape=(200, 7, 1)
                        ] lca
                        lcc:f64[200,7,3] lcd:f64[200,7] lce:f64[200,7] lcf:f64[200,7]
                          lcg:f64[200,7] lch:f64[200,7] lci:f64[200,7] = pjit[
                          name=cross
                          jaxpr=cross10
                        ] lbm lbn kfu kfv kfw kfx kfy kfz
                        lcj:f64[200,7,3] = mul lcb lcc
                        lck:f64[200,7,3] = add lbz lcj
                        lcl:f64[200,7,18] = scatter[
                          dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(), scatter_dims_to_operand_dims=(2,))
                          indices_are_sorted=True
                          mode=GatherScatterMode.FILL_OR_DROP
                          unique_indices=True
                          update_consts=()
                          update_jaxpr=None
                        ] kfs kft lck
                        lcm:f64[200,7,4] = mul lbl kgb
                        lcn:f64[200,7,3] = slice[
                          limit_indices=(200, 7, 4)
                          start_indices=(0, 0, 1)
                          strides=None
                        ] lcm
                        lco:f64[200,7,3] = slice[
                          limit_indices=(200, 7, 22)
                          start_indices=(0, 0, 19)
                          strides=None
                        ] lbc
                        lcp:f64[200,7] = dot_general[
                          dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
                          preferred_element_type=float64
                        ] lcn lco
                        lcq:f64[200,7,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1)
                          shape=(200, 7, 1)
                        ] lcp
                        lcr:f64[200,7,3] = mul lcq lcn
                        lcs:f64[200,7,3] = mul 2.0 lcr
                        lct:f64[200,7,1] = slice[
                          limit_indices=(200, 7, 1)
                          start_indices=(0, 0, 0)
                          strides=None
                        ] lcm
                        lcu:f64[200,7] = squeeze[dimensions=(2,)] lct
                        lcv:f64[200,7] = mul lcu lcu
                        lcw:f64[200,7] = dot_general[
                          dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
                          preferred_element_type=float64
                        ] lcn lcn
                        lcx:f64[200,7] = sub lcv lcw
                        lcy:f64[200,7,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1)
                          shape=(200, 7, 1)
                        ] lcx
                        lcz:f64[200,7,3] = mul lcy lco
                        lda:f64[200,7,3] = add lcs lcz
                        ldb:f64[200,7] = mul 2.0 lcu
                        ldc:f64[200,7,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1)
                          shape=(200, 7, 1)
                        ] ldb
                        ldd:f64[200,7,3] lde:f64[200,7] ldf:f64[200,7] ldg:f64[200,7]
                          ldh:f64[200,7] ldi:f64[200,7] ldj:f64[200,7] = pjit[
                          name=cross
                          jaxpr=cross10
                        ] lcn lco kgc kgd kge kgf kgg kgh
                        ldk:f64[200,7,3] = mul ldc ldd
                        ldl:f64[200,7,3] = add lda ldk
                        ldm:f64[200,7,18] = scatter[
                          dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(), scatter_dims_to_operand_dims=(2,))
                          indices_are_sorted=True
                          mode=GatherScatterMode.FILL_OR_DROP
                          unique_indices=True
                          update_consts=()
                          update_jaxpr=None
                        ] lcl kga ldl
                        ldn:f64[200,7,12] = slice[
                          limit_indices=(200, 7, 34)
                          start_indices=(0, 0, 22)
                          strides=None
                        ] lbc
                        ldo:f64[200,7,18] = scatter[
                          dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(), scatter_dims_to_operand_dims=(2,))
                          indices_are_sorted=True
                          mode=GatherScatterMode.FILL_OR_DROP
                          unique_indices=True
                          update_consts=()
                          update_jaxpr=None
                        ] ldm kgi ldn
                        ldp:f64[200,7,18] = mul kfr ldo
                        ldq:f64[200,7,18] = sub lbk ldp
                        ldr:f64[200,7,7] = slice[
                          limit_indices=(200, 7, 7)
                          start_indices=(0, 0, 0)
                          strides=None
                        ] lbg
                        lds:f64[200,7,1,7] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 1, 7)
                        ] ldr
                        ldt:f64[200,7,1,4] = slice[
                          limit_indices=(200, 7, 1, 7)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] lds
                        ldu:f64[200,7,12] = slice[
                          limit_indices=(200, 7, 19)
                          start_indices=(0, 0, 7)
                          strides=None
                        ] lbg
                        ldv:f64[200,7,12] = div ldu 2.0
                        ldw:f64[200,7,12] = cos ldv
                        ldx:f64[200,7,12,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 12, 1)
                        ] ldw
                        ldy:f64[200,7,12] = div ldu 2.0
                        ldz:f64[200,7,12] = sin ldy
                        lea:f64[200,7,12] = mul kgo ldz
                        leb:f64[200,7,12,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 12, 1)
                        ] lea
                        lec:f64[200,7,12] = div ldu 2.0
                        led:f64[200,7,12] = sin lec
                        lee:f64[200,7,12] = mul kgp led
                        lef:f64[200,7,12,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 12, 1)
                        ] lee
                        leg:f64[200,7,12] = div ldu 2.0
                        leh:f64[200,7,12] = sin leg
                        lei:f64[200,7,12] = mul kgq leh
                        lej:f64[200,7,12,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 12, 1)
                        ] lei
                        lek:f64[200,7,12,4] = concatenate[dimension=3] ldx leb lef
                          lej
                        lel:bool[200,7,12] = pjit[
                          name=allclose
                          jaxpr={ lambda ; lem:f64[200,7,12,4] len:f64[] leo:f64[]
                              lep:bool[] leq:bool[]. let
                              ler:bool[200,7,12,4] = pjit[
                                name=isclose
                                jaxpr={ lambda ; les:f64[200,7,12,4] let:f64[] leu:f64[]
                                    lev:bool[] lew:bool[]. let
                                    lex:f64[200,7,12,4] = sub les let
                                    ley:f64[200,7,12,4] = abs lex
                                    lez:bool[200,7,12,4] = le ley leu
                                    lfa:bool[200,7,12,4] = pjit[
                                      name=isinf
                                      jaxpr={ lambda ; lfb:f64[200,7,12,4]. let
                                          lfc:f64[200,7,12,4] = abs lfb
                                          lfd:bool[200,7,12,4] = eq lfc inf
                                        in (lfd,) }
                                    ] les
                                    lfe:bool[200,7,12,4] = or lfa lev
                                    lff:bool[200,7,12,4] = not lfe
                                    lfg:bool[200,7,12,4] = and lez lff
                                    lfh:bool[200,7,12,4] = and lfa lev
                                    lfi:bool[200,7,12,4] = eq les let
                                    lfj:bool[200,7,12,4] = and lfh lfi
                                    lfk:bool[200,7,12,4] = or lfg lfj
                                    lfl:bool[200,7,12,4] = ne les les
                                    lfm:bool[200,7,12,4] = or lfl lew
                                    lfn:bool[200,7,12,4] = not lfm
                                    lfo:bool[200,7,12,4] = and lfk lfn
                                  in (lfo,) }
                              ] lem len leo lep leq
                              lfp:bool[200,7,12] = reduce_and[axes=(3,)] ler
                            in (lfp,) }
                        ] lek kgr kgs kgt kgu
                        lfq:f64[200,7,12,4] lfr:bool[200,7,12,4] = pjit[
                          name=_where
                          jaxpr={ lambda ; lfs:bool[200,7,12] lft:f64[200,7,12,4]
                              lfu:f64[200,7,12,4]. let
                              lfv:bool[200,7,12,4] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1, 2)
                                shape=(200, 7, 12, 4)
                              ] lfs
                              lfw:f64[200,7,12,4] = select_n lfv lft lfu
                            in (lfw, lfv) }
                        ] lel lek kgv
                        lfx:f64[200,7,12] lfy:f64[200,7,12] = pjit[
                          name=norm
                          jaxpr={ lambda ; lfz:f64[200,7,12,4]. let
                              lga:f64[200,7,12,4] = mul lfz lfz
                              lgb:f64[200,7,12] = reduce_sum[axes=(3,)] lga
                              lgc:f64[200,7,12] = sqrt lgb
                              lgd:f64[200,7,12] = div 0.5 lgc
                            in (lgc, lgd) }
                        ] lfq
                        lge:f64[200,7,12] = pjit[
                          name=_where
                          jaxpr={ lambda ; lgf:bool[200,7,12] lgg:f64[200,7,12] lgh:f64[200,7,12]. let
                              lgi:f64[200,7,12] = select_n lgf lgg lgh
                            in (lgi,) }
                        ] lel lfx kgw
                        lgj:bool[200,7,12] = eq lge 0.0
                        lgk:f64[200,7,12] = convert_element_type[
                          new_dtype=float64
                          weak_type=True
                        ] lgj
                        lgl:f64[200,7,12] = mul 1e-06 lgk
                        lgm:f64[200,7,12] = convert_element_type[
                          new_dtype=float64
                          weak_type=False
                        ] lgl
                        lgn:f64[200,7,12] = add lge lgm
                        lgo:f64[200,7,12,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 12, 1)
                        ] lgn
                        lgp:f64[200,7,12,4] = div lek lgo
                        lgq:f64[200,7,12,1,4] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 12, 1, 4)
                        ] lgp
                        lgr:f64[200,7,12,4] = pjit[
                          name=_take
                          jaxpr={ lambda ; lgs:f64[200,7,12,1,4] lgt:i64[1]. let
                              lgu:f64[200,7,12,4] = gather[
                                dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2, 3), collapsed_slice_dims=(3,), start_index_map=(3,))
                                fill_value=None
                                indices_are_sorted=False
                                mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                slice_sizes=(200, 7, 12, 1, 4)
                                unique_indices=False
                              ] lgs lgt
                            in (lgu,) }
                        ] lgq kgx
                        lgv:f64[200,7,13,4] = concatenate[dimension=2] ldt lgr
                        lgw:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] lgv
                        lgx:f64[200,7,13] = squeeze[dimensions=(3,)] lgw
                        lgy:f64[200,7,13] = mul kgn lgx
                        lgz:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] lgv
                        lha:f64[200,7,13] = squeeze[dimensions=(3,)] lgz
                        lhb:f64[200,7,13] = mul kgy lha
                        lhc:f64[200,7,13] = sub lgy lhb
                        lhd:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] lgv
                        lhe:f64[200,7,13] = squeeze[dimensions=(3,)] lhd
                        lhf:f64[200,7,13] = mul kgz lhe
                        lhg:f64[200,7,13] = sub lhc lhf
                        lhh:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] lgv
                        lhi:f64[200,7,13] = squeeze[dimensions=(3,)] lhh
                        lhj:f64[200,7,13] = mul kha lhi
                        lhk:f64[200,7,13] = sub lhg lhj
                        lhl:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] lhk
                        lhm:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] lgv
                        lhn:f64[200,7,13] = squeeze[dimensions=(3,)] lhm
                        lho:f64[200,7,13] = mul khb lhn
                        lhp:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] lgv
                        lhq:f64[200,7,13] = squeeze[dimensions=(3,)] lhp
                        lhr:f64[200,7,13] = mul khc lhq
                        lhs:f64[200,7,13] = add lho lhr
                        lht:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] lgv
                        lhu:f64[200,7,13] = squeeze[dimensions=(3,)] lht
                        lhv:f64[200,7,13] = mul khd lhu
                        lhw:f64[200,7,13] = add lhs lhv
                        lhx:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] lgv
                        lhy:f64[200,7,13] = squeeze[dimensions=(3,)] lhx
                        lhz:f64[200,7,13] = mul khe lhy
                        lia:f64[200,7,13] = sub lhw lhz
                        lib:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] lia
                        lic:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] lgv
                        lid:f64[200,7,13] = squeeze[dimensions=(3,)] lic
                        lie:f64[200,7,13] = mul khf lid
                        lif:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] lgv
                        lig:f64[200,7,13] = squeeze[dimensions=(3,)] lif
                        lih:f64[200,7,13] = mul khg lig
                        lii:f64[200,7,13] = sub lie lih
                        lij:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] lgv
                        lik:f64[200,7,13] = squeeze[dimensions=(3,)] lij
                        lil:f64[200,7,13] = mul khh lik
                        lim:f64[200,7,13] = add lii lil
                        lin:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] lgv
                        lio:f64[200,7,13] = squeeze[dimensions=(3,)] lin
                        lip:f64[200,7,13] = mul khi lio
                        liq:f64[200,7,13] = add lim lip
                        lir:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] liq
                        lis:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] lgv
                        lit:f64[200,7,13] = squeeze[dimensions=(3,)] lis
                        liu:f64[200,7,13] = mul khj lit
                        liv:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] lgv
                        liw:f64[200,7,13] = squeeze[dimensions=(3,)] liv
                        lix:f64[200,7,13] = mul khk liw
                        liy:f64[200,7,13] = add liu lix
                        liz:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] lgv
                        lja:f64[200,7,13] = squeeze[dimensions=(3,)] liz
                        ljb:f64[200,7,13] = mul khl lja
                        ljc:f64[200,7,13] = sub liy ljb
                        ljd:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] lgv
                        lje:f64[200,7,13] = squeeze[dimensions=(3,)] ljd
                        ljf:f64[200,7,13] = mul khm lje
                        ljg:f64[200,7,13] = add ljc ljf
                        ljh:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] ljg
                        lji:f64[200,7,13,4] = concatenate[dimension=3] lhl lib lir
                          ljh
                        ljj:f64[200,7,1,4] = slice[
                          limit_indices=(200, 7, 1, 4)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] lji
                        ljk:f64[200,7,4,4] = pjit[
                          name=_take
                          jaxpr={ lambda ; ljl:f64[200,7,1,4] ljm:i64[4,1]. let
                              ljn:f64[200,7,4,4] = gather[
                                dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 3), collapsed_slice_dims=(2,), start_index_map=(2,))
                                fill_value=None
                                indices_are_sorted=False
                                mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                slice_sizes=(200, 7, 1, 4)
                                unique_indices=False
                              ] ljl ljm
                            in (ljn,) }
                        ] ljj khn
                        ljo:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] ljk
                        ljp:f64[200,7,4] = squeeze[dimensions=(3,)] ljo
                        ljq:f64[200,7,4,4] = pjit[name=_take jaxpr=_take13] lji kho
                        ljr:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] ljq
                        ljs:f64[200,7,4] = squeeze[dimensions=(3,)] ljr
                        ljt:f64[200,7,4] = mul ljp ljs
                        lju:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] ljk
                        ljv:f64[200,7,4] = squeeze[dimensions=(3,)] lju
                        ljw:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] ljq
                        ljx:f64[200,7,4] = squeeze[dimensions=(3,)] ljw
                        ljy:f64[200,7,4] = mul ljv ljx
                        ljz:f64[200,7,4] = sub ljt ljy
                        lka:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] ljk
                        lkb:f64[200,7,4] = squeeze[dimensions=(3,)] lka
                        lkc:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] ljq
                        lkd:f64[200,7,4] = squeeze[dimensions=(3,)] lkc
                        lke:f64[200,7,4] = mul lkb lkd
                        lkf:f64[200,7,4] = sub ljz lke
                        lkg:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] ljk
                        lkh:f64[200,7,4] = squeeze[dimensions=(3,)] lkg
                        lki:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] ljq
                        lkj:f64[200,7,4] = squeeze[dimensions=(3,)] lki
                        lkk:f64[200,7,4] = mul lkh lkj
                        lkl:f64[200,7,4] = sub lkf lkk
                        lkm:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] lkl
                        lkn:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] ljk
                        lko:f64[200,7,4] = squeeze[dimensions=(3,)] lkn
                        lkp:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] ljq
                        lkq:f64[200,7,4] = squeeze[dimensions=(3,)] lkp
                        lkr:f64[200,7,4] = mul lko lkq
                        lks:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] ljk
                        lkt:f64[200,7,4] = squeeze[dimensions=(3,)] lks
                        lku:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] ljq
                        lkv:f64[200,7,4] = squeeze[dimensions=(3,)] lku
                        lkw:f64[200,7,4] = mul lkt lkv
                        lkx:f64[200,7,4] = add lkr lkw
                        lky:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] ljk
                        lkz:f64[200,7,4] = squeeze[dimensions=(3,)] lky
                        lla:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] ljq
                        llb:f64[200,7,4] = squeeze[dimensions=(3,)] lla
                        llc:f64[200,7,4] = mul lkz llb
                        lld:f64[200,7,4] = add lkx llc
                        lle:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] ljk
                        llf:f64[200,7,4] = squeeze[dimensions=(3,)] lle
                        llg:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] ljq
                        llh:f64[200,7,4] = squeeze[dimensions=(3,)] llg
                        lli:f64[200,7,4] = mul llf llh
                        llj:f64[200,7,4] = sub lld lli
                        llk:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] llj
                        lll:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] ljk
                        llm:f64[200,7,4] = squeeze[dimensions=(3,)] lll
                        lln:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] ljq
                        llo:f64[200,7,4] = squeeze[dimensions=(3,)] lln
                        llp:f64[200,7,4] = mul llm llo
                        llq:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] ljk
                        llr:f64[200,7,4] = squeeze[dimensions=(3,)] llq
                        lls:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] ljq
                        llt:f64[200,7,4] = squeeze[dimensions=(3,)] lls
                        llu:f64[200,7,4] = mul llr llt
                        llv:f64[200,7,4] = sub llp llu
                        llw:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] ljk
                        llx:f64[200,7,4] = squeeze[dimensions=(3,)] llw
                        lly:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] ljq
                        llz:f64[200,7,4] = squeeze[dimensions=(3,)] lly
                        lma:f64[200,7,4] = mul llx llz
                        lmb:f64[200,7,4] = add llv lma
                        lmc:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] ljk
                        lmd:f64[200,7,4] = squeeze[dimensions=(3,)] lmc
                        lme:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] ljq
                        lmf:f64[200,7,4] = squeeze[dimensions=(3,)] lme
                        lmg:f64[200,7,4] = mul lmd lmf
                        lmh:f64[200,7,4] = add lmb lmg
                        lmi:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] lmh
                        lmj:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] ljk
                        lmk:f64[200,7,4] = squeeze[dimensions=(3,)] lmj
                        lml:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] ljq
                        lmm:f64[200,7,4] = squeeze[dimensions=(3,)] lml
                        lmn:f64[200,7,4] = mul lmk lmm
                        lmo:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] ljk
                        lmp:f64[200,7,4] = squeeze[dimensions=(3,)] lmo
                        lmq:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] ljq
                        lmr:f64[200,7,4] = squeeze[dimensions=(3,)] lmq
                        lms:f64[200,7,4] = mul lmp lmr
                        lmt:f64[200,7,4] = add lmn lms
                        lmu:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] ljk
                        lmv:f64[200,7,4] = squeeze[dimensions=(3,)] lmu
                        lmw:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] ljq
                        lmx:f64[200,7,4] = squeeze[dimensions=(3,)] lmw
                        lmy:f64[200,7,4] = mul lmv lmx
                        lmz:f64[200,7,4] = sub lmt lmy
                        lna:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] ljk
                        lnb:f64[200,7,4] = squeeze[dimensions=(3,)] lna
                        lnc:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] ljq
                        lnd:f64[200,7,4] = squeeze[dimensions=(3,)] lnc
                        lne:f64[200,7,4] = mul lnb lnd
                        lnf:f64[200,7,4] = add lmz lne
                        lng:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] lnf
                        lnh:f64[200,7,4,4] = concatenate[dimension=3] lkm llk lmi
                          lng
                        lni:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] lnh
                        lnj:f64[200,7,4] = squeeze[dimensions=(3,)] lni
                        lnk:f64[200,7,4,4] = pjit[name=_take jaxpr=_take13] lji khp
                        lnl:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] lnk
                        lnm:f64[200,7,4] = squeeze[dimensions=(3,)] lnl
                        lnn:f64[200,7,4] = mul lnj lnm
                        lno:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] lnh
                        lnp:f64[200,7,4] = squeeze[dimensions=(3,)] lno
                        lnq:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] lnk
                        lnr:f64[200,7,4] = squeeze[dimensions=(3,)] lnq
                        lns:f64[200,7,4] = mul lnp lnr
                        lnt:f64[200,7,4] = sub lnn lns
                        lnu:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] lnh
                        lnv:f64[200,7,4] = squeeze[dimensions=(3,)] lnu
                        lnw:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] lnk
                        lnx:f64[200,7,4] = squeeze[dimensions=(3,)] lnw
                        lny:f64[200,7,4] = mul lnv lnx
                        lnz:f64[200,7,4] = sub lnt lny
                        loa:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] lnh
                        lob:f64[200,7,4] = squeeze[dimensions=(3,)] loa
                        loc:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] lnk
                        lod:f64[200,7,4] = squeeze[dimensions=(3,)] loc
                        loe:f64[200,7,4] = mul lob lod
                        lof:f64[200,7,4] = sub lnz loe
                        log:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] lof
                        loh:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] lnh
                        loi:f64[200,7,4] = squeeze[dimensions=(3,)] loh
                        loj:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] lnk
                        lok:f64[200,7,4] = squeeze[dimensions=(3,)] loj
                        lol:f64[200,7,4] = mul loi lok
                        lom:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] lnh
                        lon:f64[200,7,4] = squeeze[dimensions=(3,)] lom
                        loo:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] lnk
                        lop:f64[200,7,4] = squeeze[dimensions=(3,)] loo
                        loq:f64[200,7,4] = mul lon lop
                        lor:f64[200,7,4] = add lol loq
                        los:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] lnh
                        lot:f64[200,7,4] = squeeze[dimensions=(3,)] los
                        lou:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] lnk
                        lov:f64[200,7,4] = squeeze[dimensions=(3,)] lou
                        low:f64[200,7,4] = mul lot lov
                        lox:f64[200,7,4] = add lor low
                        loy:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] lnh
                        loz:f64[200,7,4] = squeeze[dimensions=(3,)] loy
                        lpa:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] lnk
                        lpb:f64[200,7,4] = squeeze[dimensions=(3,)] lpa
                        lpc:f64[200,7,4] = mul loz lpb
                        lpd:f64[200,7,4] = sub lox lpc
                        lpe:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] lpd
                        lpf:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] lnh
                        lpg:f64[200,7,4] = squeeze[dimensions=(3,)] lpf
                        lph:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] lnk
                        lpi:f64[200,7,4] = squeeze[dimensions=(3,)] lph
                        lpj:f64[200,7,4] = mul lpg lpi
                        lpk:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] lnh
                        lpl:f64[200,7,4] = squeeze[dimensions=(3,)] lpk
                        lpm:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] lnk
                        lpn:f64[200,7,4] = squeeze[dimensions=(3,)] lpm
                        lpo:f64[200,7,4] = mul lpl lpn
                        lpp:f64[200,7,4] = sub lpj lpo
                        lpq:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] lnh
                        lpr:f64[200,7,4] = squeeze[dimensions=(3,)] lpq
                        lps:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] lnk
                        lpt:f64[200,7,4] = squeeze[dimensions=(3,)] lps
                        lpu:f64[200,7,4] = mul lpr lpt
                        lpv:f64[200,7,4] = add lpp lpu
                        lpw:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] lnh
                        lpx:f64[200,7,4] = squeeze[dimensions=(3,)] lpw
                        lpy:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] lnk
                        lpz:f64[200,7,4] = squeeze[dimensions=(3,)] lpy
                        lqa:f64[200,7,4] = mul lpx lpz
                        lqb:f64[200,7,4] = add lpv lqa
                        lqc:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] lqb
                        lqd:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] lnh
                        lqe:f64[200,7,4] = squeeze[dimensions=(3,)] lqd
                        lqf:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] lnk
                        lqg:f64[200,7,4] = squeeze[dimensions=(3,)] lqf
                        lqh:f64[200,7,4] = mul lqe lqg
                        lqi:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] lnh
                        lqj:f64[200,7,4] = squeeze[dimensions=(3,)] lqi
                        lqk:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] lnk
                        lql:f64[200,7,4] = squeeze[dimensions=(3,)] lqk
                        lqm:f64[200,7,4] = mul lqj lql
                        lqn:f64[200,7,4] = add lqh lqm
                        lqo:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] lnh
                        lqp:f64[200,7,4] = squeeze[dimensions=(3,)] lqo
                        lqq:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] lnk
                        lqr:f64[200,7,4] = squeeze[dimensions=(3,)] lqq
                        lqs:f64[200,7,4] = mul lqp lqr
                        lqt:f64[200,7,4] = sub lqn lqs
                        lqu:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] lnh
                        lqv:f64[200,7,4] = squeeze[dimensions=(3,)] lqu
                        lqw:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] lnk
                        lqx:f64[200,7,4] = squeeze[dimensions=(3,)] lqw
                        lqy:f64[200,7,4] = mul lqv lqx
                        lqz:f64[200,7,4] = add lqt lqy
                        lra:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] lqz
                        lrb:f64[200,7,4,4] = concatenate[dimension=3] log lpe lqc
                          lra
                        lrc:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] lrb
                        lrd:f64[200,7,4] = squeeze[dimensions=(3,)] lrc
                        lre:f64[200,7,4,4] = pjit[name=_take jaxpr=_take13] lji khq
                        lrf:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] lre
                        lrg:f64[200,7,4] = squeeze[dimensions=(3,)] lrf
                        lrh:f64[200,7,4] = mul lrd lrg
                        lri:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] lrb
                        lrj:f64[200,7,4] = squeeze[dimensions=(3,)] lri
                        lrk:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] lre
                        lrl:f64[200,7,4] = squeeze[dimensions=(3,)] lrk
                        lrm:f64[200,7,4] = mul lrj lrl
                        lrn:f64[200,7,4] = sub lrh lrm
                        lro:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] lrb
                        lrp:f64[200,7,4] = squeeze[dimensions=(3,)] lro
                        lrq:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] lre
                        lrr:f64[200,7,4] = squeeze[dimensions=(3,)] lrq
                        lrs:f64[200,7,4] = mul lrp lrr
                        lrt:f64[200,7,4] = sub lrn lrs
                        lru:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] lrb
                        lrv:f64[200,7,4] = squeeze[dimensions=(3,)] lru
                        lrw:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] lre
                        lrx:f64[200,7,4] = squeeze[dimensions=(3,)] lrw
                        lry:f64[200,7,4] = mul lrv lrx
                        lrz:f64[200,7,4] = sub lrt lry
                        lsa:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] lrz
                        lsb:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] lrb
                        lsc:f64[200,7,4] = squeeze[dimensions=(3,)] lsb
                        lsd:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] lre
                        lse:f64[200,7,4] = squeeze[dimensions=(3,)] lsd
                        lsf:f64[200,7,4] = mul lsc lse
                        lsg:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] lrb
                        lsh:f64[200,7,4] = squeeze[dimensions=(3,)] lsg
                        lsi:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] lre
                        lsj:f64[200,7,4] = squeeze[dimensions=(3,)] lsi
                        lsk:f64[200,7,4] = mul lsh lsj
                        lsl:f64[200,7,4] = add lsf lsk
                        lsm:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] lrb
                        lsn:f64[200,7,4] = squeeze[dimensions=(3,)] lsm
                        lso:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] lre
                        lsp:f64[200,7,4] = squeeze[dimensions=(3,)] lso
                        lsq:f64[200,7,4] = mul lsn lsp
                        lsr:f64[200,7,4] = add lsl lsq
                        lss:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] lrb
                        lst:f64[200,7,4] = squeeze[dimensions=(3,)] lss
                        lsu:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] lre
                        lsv:f64[200,7,4] = squeeze[dimensions=(3,)] lsu
                        lsw:f64[200,7,4] = mul lst lsv
                        lsx:f64[200,7,4] = sub lsr lsw
                        lsy:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] lsx
                        lsz:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] lrb
                        lta:f64[200,7,4] = squeeze[dimensions=(3,)] lsz
                        ltb:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] lre
                        ltc:f64[200,7,4] = squeeze[dimensions=(3,)] ltb
                        ltd:f64[200,7,4] = mul lta ltc
                        lte:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] lrb
                        ltf:f64[200,7,4] = squeeze[dimensions=(3,)] lte
                        ltg:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] lre
                        lth:f64[200,7,4] = squeeze[dimensions=(3,)] ltg
                        lti:f64[200,7,4] = mul ltf lth
                        ltj:f64[200,7,4] = sub ltd lti
                        ltk:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] lrb
                        ltl:f64[200,7,4] = squeeze[dimensions=(3,)] ltk
                        ltm:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] lre
                        ltn:f64[200,7,4] = squeeze[dimensions=(3,)] ltm
                        lto:f64[200,7,4] = mul ltl ltn
                        ltp:f64[200,7,4] = add ltj lto
                        ltq:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] lrb
                        ltr:f64[200,7,4] = squeeze[dimensions=(3,)] ltq
                        lts:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] lre
                        ltt:f64[200,7,4] = squeeze[dimensions=(3,)] lts
                        ltu:f64[200,7,4] = mul ltr ltt
                        ltv:f64[200,7,4] = add ltp ltu
                        ltw:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] ltv
                        ltx:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] lrb
                        lty:f64[200,7,4] = squeeze[dimensions=(3,)] ltx
                        ltz:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] lre
                        lua:f64[200,7,4] = squeeze[dimensions=(3,)] ltz
                        lub:f64[200,7,4] = mul lty lua
                        luc:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] lrb
                        lud:f64[200,7,4] = squeeze[dimensions=(3,)] luc
                        lue:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] lre
                        luf:f64[200,7,4] = squeeze[dimensions=(3,)] lue
                        lug:f64[200,7,4] = mul lud luf
                        luh:f64[200,7,4] = add lub lug
                        lui:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] lrb
                        luj:f64[200,7,4] = squeeze[dimensions=(3,)] lui
                        luk:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] lre
                        lul:f64[200,7,4] = squeeze[dimensions=(3,)] luk
                        lum:f64[200,7,4] = mul luj lul
                        lun:f64[200,7,4] = sub luh lum
                        luo:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] lrb
                        lup:f64[200,7,4] = squeeze[dimensions=(3,)] luo
                        luq:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] lre
                        lur:f64[200,7,4] = squeeze[dimensions=(3,)] luq
                        lus:f64[200,7,4] = mul lup lur
                        lut:f64[200,7,4] = add lun lus
                        luu:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] lut
                        luv:f64[200,7,4,4] = concatenate[dimension=3] lsa lsy ltw
                          luu
                        luw:f64[200,7,13,4] = concatenate[dimension=2] ljj lnh lrb
                          luv
                        lux:f64[200,7,13,4] = pjit[
                          name=_take
                          jaxpr={ lambda ; luy:f64[200,7,13,4] luz:i64[13,1]. let
                              lva:f64[200,7,13,4] = gather[
                                dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 3), collapsed_slice_dims=(2,), start_index_map=(2,))
                                fill_value=None
                                indices_are_sorted=False
                                mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                slice_sizes=(200, 7, 1, 4)
                                unique_indices=False
                              ] luy luz
                            in (lva,) }
                        ] luw khr
                        lvb:bool[200,7,13] = pjit[
                          name=allclose
                          jaxpr={ lambda ; lvc:f64[200,7,13,4] lvd:f64[] lve:f64[]
                              lvf:bool[] lvg:bool[]. let
                              lvh:bool[200,7,13,4] = pjit[
                                name=isclose
                                jaxpr={ lambda ; lvi:f64[200,7,13,4] lvj:f64[] lvk:f64[]
                                    lvl:bool[] lvm:bool[]. let
                                    lvn:f64[200,7,13,4] = sub lvi lvj
                                    lvo:f64[200,7,13,4] = abs lvn
                                    lvp:bool[200,7,13,4] = le lvo lvk
                                    lvq:bool[200,7,13,4] = pjit[
                                      name=isinf
                                      jaxpr={ lambda ; lvr:f64[200,7,13,4]. let
                                          lvs:f64[200,7,13,4] = abs lvr
                                          lvt:bool[200,7,13,4] = eq lvs inf
                                        in (lvt,) }
                                    ] lvi
                                    lvu:bool[200,7,13,4] = or lvq lvl
                                    lvv:bool[200,7,13,4] = not lvu
                                    lvw:bool[200,7,13,4] = and lvp lvv
                                    lvx:bool[200,7,13,4] = and lvq lvl
                                    lvy:bool[200,7,13,4] = eq lvi lvj
                                    lvz:bool[200,7,13,4] = and lvx lvy
                                    lwa:bool[200,7,13,4] = or lvw lvz
                                    lwb:bool[200,7,13,4] = ne lvi lvi
                                    lwc:bool[200,7,13,4] = or lwb lvm
                                    lwd:bool[200,7,13,4] = not lwc
                                    lwe:bool[200,7,13,4] = and lwa lwd
                                  in (lwe,) }
                              ] lvc lvd lve lvf lvg
                              lwf:bool[200,7,13] = reduce_and[axes=(3,)] lvh
                            in (lwf,) }
                        ] lux khs kht khu khv
                        lwg:f64[200,7,13,4] lwh:bool[200,7,13,4] = pjit[
                          name=_where
                          jaxpr={ lambda ; lwi:bool[200,7,13] lwj:f64[200,7,13,4]
                              lwk:f64[200,7,13,4]. let
                              lwl:bool[200,7,13,4] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1, 2)
                                shape=(200, 7, 13, 4)
                              ] lwi
                              lwm:f64[200,7,13,4] = select_n lwl lwj lwk
                            in (lwm, lwl) }
                        ] lvb lux khw
                        lwn:f64[200,7,13] lwo:f64[200,7,13] = pjit[
                          name=norm
                          jaxpr={ lambda ; lwp:f64[200,7,13,4]. let
                              lwq:f64[200,7,13,4] = mul lwp lwp
                              lwr:f64[200,7,13] = reduce_sum[axes=(3,)] lwq
                              lws:f64[200,7,13] = sqrt lwr
                              lwt:f64[200,7,13] = div 0.5 lws
                            in (lws, lwt) }
                        ] lwg
                        lwu:f64[200,7,13] = pjit[
                          name=_where
                          jaxpr={ lambda ; lwv:bool[200,7,13] lww:f64[200,7,13] lwx:f64[200,7,13]. let
                              lwy:f64[200,7,13] = select_n lwv lww lwx
                            in (lwy,) }
                        ] lvb lwn khx
                        lwz:bool[200,7,13] = eq lwu 0.0
                        lxa:f64[200,7,13] = convert_element_type[
                          new_dtype=float64
                          weak_type=True
                        ] lwz
                        lxb:f64[200,7,13] = mul 1e-06 lxa
                        lxc:f64[200,7,13] = convert_element_type[
                          new_dtype=float64
                          weak_type=False
                        ] lxb
                        lxd:f64[200,7,13] = add lwu lxc
                        lxe:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] lxd
                        lxf:f64[200,7,13,4] = div lux lxe
                        lxg:f64[200,7,14,4] = concatenate[dimension=2] lxf khy
                        lxh:f64[200,7,13,4] = pjit[
                          name=_take
                          jaxpr={ lambda ; lxi:f64[200,7,14,4] lxj:i32[13,1]. let
                              lxk:f64[200,7,13,4] = gather[
                                dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 3), collapsed_slice_dims=(2,), start_index_map=(2,))
                                fill_value=None
                                indices_are_sorted=False
                                mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                slice_sizes=(200, 7, 1, 4)
                                unique_indices=False
                              ] lxi lxj
                            in (lxk,) }
                        ] lxg khz
                        lxl:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] lxh
                        lxm:f64[200,7,13] = squeeze[dimensions=(3,)] lxl
                        lxn:f64[200,7,13] = mul lxm kia
                        lxo:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] lxh
                        lxp:f64[200,7,13] = squeeze[dimensions=(3,)] lxo
                        lxq:f64[200,7,13] = mul lxp kib
                        lxr:f64[200,7,13] = sub lxn lxq
                        lxs:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] lxh
                        lxt:f64[200,7,13] = squeeze[dimensions=(3,)] lxs
                        lxu:f64[200,7,13] = mul lxt kic
                        lxv:f64[200,7,13] = sub lxr lxu
                        lxw:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] lxh
                        lxx:f64[200,7,13] = squeeze[dimensions=(3,)] lxw
                        lxy:f64[200,7,13] = mul lxx kid
                        lxz:f64[200,7,13] = sub lxv lxy
                        lya:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] lxz
                        lyb:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] lxh
                        lyc:f64[200,7,13] = squeeze[dimensions=(3,)] lyb
                        lyd:f64[200,7,13] = mul lyc kie
                        lye:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] lxh
                        lyf:f64[200,7,13] = squeeze[dimensions=(3,)] lye
                        lyg:f64[200,7,13] = mul lyf kif
                        lyh:f64[200,7,13] = add lyd lyg
                        lyi:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] lxh
                        lyj:f64[200,7,13] = squeeze[dimensions=(3,)] lyi
                        lyk:f64[200,7,13] = mul lyj kig
                        lyl:f64[200,7,13] = add lyh lyk
                        lym:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] lxh
                        lyn:f64[200,7,13] = squeeze[dimensions=(3,)] lym
                        lyo:f64[200,7,13] = mul lyn kih
                        lyp:f64[200,7,13] = sub lyl lyo
                        lyq:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] lyp
                        lyr:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] lxh
                        lys:f64[200,7,13] = squeeze[dimensions=(3,)] lyr
                        lyt:f64[200,7,13] = mul lys kii
                        lyu:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] lxh
                        lyv:f64[200,7,13] = squeeze[dimensions=(3,)] lyu
                        lyw:f64[200,7,13] = mul lyv kij
                        lyx:f64[200,7,13] = sub lyt lyw
                        lyy:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] lxh
                        lyz:f64[200,7,13] = squeeze[dimensions=(3,)] lyy
                        lza:f64[200,7,13] = mul lyz kik
                        lzb:f64[200,7,13] = add lyx lza
                        lzc:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] lxh
                        lzd:f64[200,7,13] = squeeze[dimensions=(3,)] lzc
                        lze:f64[200,7,13] = mul lzd kil
                        lzf:f64[200,7,13] = add lzb lze
                        lzg:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] lzf
                        lzh:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] lxh
                        lzi:f64[200,7,13] = squeeze[dimensions=(3,)] lzh
                        lzj:f64[200,7,13] = mul lzi kim
                        lzk:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] lxh
                        lzl:f64[200,7,13] = squeeze[dimensions=(3,)] lzk
                        lzm:f64[200,7,13] = mul lzl kin
                        lzn:f64[200,7,13] = add lzj lzm
                        lzo:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] lxh
                        lzp:f64[200,7,13] = squeeze[dimensions=(3,)] lzo
                        lzq:f64[200,7,13] = mul lzp kio
                        lzr:f64[200,7,13] = sub lzn lzq
                        lzs:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] lxh
                        lzt:f64[200,7,13] = squeeze[dimensions=(3,)] lzs
                        lzu:f64[200,7,13] = mul lzt kip
                        lzv:f64[200,7,13] = add lzr lzu
                        lzw:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] lzv
                        lzx:f64[200,7,13,4] = concatenate[dimension=3] lya lyq lzg
                          lzw
                        lzy:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] lzx
                        lzz:f64[200,7,13] = squeeze[dimensions=(3,)] lzy
                        maa:f64[200,7,13] = mul lzz kiq
                        mab:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] lzx
                        mac:f64[200,7,13] = squeeze[dimensions=(3,)] mab
                        mad:f64[200,7,13] = mul mac kir
                        mae:f64[200,7,13] = sub maa mad
                        maf:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] lzx
                        mag:f64[200,7,13] = squeeze[dimensions=(3,)] maf
                        mah:f64[200,7,13] = mul mag kis
                        mai:f64[200,7,13] = sub mae mah
                        maj:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] lzx
                        mak:f64[200,7,13] = squeeze[dimensions=(3,)] maj
                        mal:f64[200,7,13] = mul mak kit
                        mam:f64[200,7,13] = sub mai mal
                        man:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] mam
                        mao:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] lzx
                        map:f64[200,7,13] = squeeze[dimensions=(3,)] mao
                        maq:f64[200,7,13] = mul map kiu
                        mar:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] lzx
                        mas:f64[200,7,13] = squeeze[dimensions=(3,)] mar
                        mat:f64[200,7,13] = mul mas kiv
                        mau:f64[200,7,13] = add maq mat
                        mav:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] lzx
                        maw:f64[200,7,13] = squeeze[dimensions=(3,)] mav
                        max:f64[200,7,13] = mul maw kiw
                        may:f64[200,7,13] = add mau max
                        maz:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] lzx
                        mba:f64[200,7,13] = squeeze[dimensions=(3,)] maz
                        mbb:f64[200,7,13] = mul mba kix
                        mbc:f64[200,7,13] = sub may mbb
                        mbd:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] mbc
                        mbe:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] lzx
                        mbf:f64[200,7,13] = squeeze[dimensions=(3,)] mbe
                        mbg:f64[200,7,13] = mul mbf kiy
                        mbh:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] lzx
                        mbi:f64[200,7,13] = squeeze[dimensions=(3,)] mbh
                        mbj:f64[200,7,13] = mul mbi kiz
                        mbk:f64[200,7,13] = sub mbg mbj
                        mbl:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] lzx
                        mbm:f64[200,7,13] = squeeze[dimensions=(3,)] mbl
                        mbn:f64[200,7,13] = mul mbm kja
                        mbo:f64[200,7,13] = add mbk mbn
                        mbp:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] lzx
                        mbq:f64[200,7,13] = squeeze[dimensions=(3,)] mbp
                        mbr:f64[200,7,13] = mul mbq kjb
                        mbs:f64[200,7,13] = add mbo mbr
                        mbt:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] mbs
                        mbu:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] lzx
                        mbv:f64[200,7,13] = squeeze[dimensions=(3,)] mbu
                        mbw:f64[200,7,13] = mul mbv kjc
                        mbx:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] lzx
                        mby:f64[200,7,13] = squeeze[dimensions=(3,)] mbx
                        mbz:f64[200,7,13] = mul mby kjd
                        mca:f64[200,7,13] = add mbw mbz
                        mcb:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] lzx
                        mcc:f64[200,7,13] = squeeze[dimensions=(3,)] mcb
                        mcd:f64[200,7,13] = mul mcc kje
                        mce:f64[200,7,13] = sub mca mcd
                        mcf:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] lzx
                        mcg:f64[200,7,13] = squeeze[dimensions=(3,)] mcf
                        mch:f64[200,7,13] = mul mcg kjf
                        mci:f64[200,7,13] = add mce mch
                        mcj:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] mci
                        mck:f64[200,7,13,4] = concatenate[dimension=3] man mbd mbt
                          mcj
                        mcl:f64[200,7,18,4] = pjit[
                          name=_take
                          jaxpr={ lambda ; mcm:f64[200,7,13,4] mcn:i64[18,1]. let
                              mco:f64[200,7,18,4] = gather[
                                dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 3), collapsed_slice_dims=(2,), start_index_map=(2,))
                                fill_value=None
                                indices_are_sorted=False
                                mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                slice_sizes=(200, 7, 1, 4)
                                unique_indices=False
                              ] mcm mcn
                            in (mco,) }
                        ] mck kjg
                        mcp:f64[200,7,18,3] = slice[
                          limit_indices=(200, 7, 18, 4)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] mcl
                        mcq:f64[18,200,7] = dot_general[
                          dimension_numbers=(([3], [1]), ([2], [0]))
                          preferred_element_type=float64
                        ] mcp kjh
                        mcr:f64[200,7,18] = transpose[permutation=(1, 2, 0)] mcq
                        mcs:f64[200,7,18,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 18, 1)
                        ] mcr
                        mct:f64[200,7,18,3] = mul mcs mcp
                        mcu:f64[200,7,18,3] = mul 2.0 mct
                        mcv:f64[200,7,18,1] = slice[
                          limit_indices=(200, 7, 18, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] mcl
                        mcw:f64[200,7,18] = squeeze[dimensions=(3,)] mcv
                        mcx:f64[200,7,18] = mul mcw mcw
                        mcy:f64[200,7,18] = dot_general[
                          dimension_numbers=(([3], [3]), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] mcp mcp
                        mcz:f64[200,7,18] = sub mcx mcy
                        mda:f64[200,7,18,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 18, 1)
                        ] mcz
                        mdb:f64[200,7,18,3] = mul mda kji
                        mdc:f64[200,7,18,3] = add mcu mdb
                        mdd:f64[200,7,18] = mul 2.0 mcw
                        mde:f64[200,7,18,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 18, 1)
                        ] mdd
                        mdf:f64[200,7,18,3] = pjit[
                          name=cross
                          jaxpr={ lambda ; mdg:f64[200,7,18,3] mdh:i32[1] mdi:f64[1,1,18]
                              mdj:i32[1] mdk:f64[1,1,18] mdl:f64[1,1,18] mdm:i32[1]
                              mdn:f64[1,1,18] mdo:f64[1,1,18] mdp:f64[1,1,18]. let
                              mdq:f64[200,7,18] = gather[
                                dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
                                fill_value=None
                                indices_are_sorted=True
                                mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                slice_sizes=(200, 7, 18, 1)
                                unique_indices=True
                              ] mdg mdh
                              mdr:f64[200,7,18] = mul mdq mdi
                              mds:f64[200,7,18] = gather[
                                dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
                                fill_value=None
                                indices_are_sorted=True
                                mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                slice_sizes=(200, 7, 18, 1)
                                unique_indices=True
                              ] mdg mdj
                              mdt:f64[200,7,18] = mul mds mdk
                              mdu:f64[200,7,18] = sub mdr mdt
                              mdv:f64[200,7,18,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1, 2)
                                shape=(200, 7, 18, 1)
                              ] mdu
                              mdw:f64[200,7,18] = mul mds mdl
                              mdx:f64[200,7,18] = gather[
                                dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
                                fill_value=None
                                indices_are_sorted=True
                                mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                slice_sizes=(200, 7, 18, 1)
                                unique_indices=True
                              ] mdg mdm
                              mdy:f64[200,7,18] = mul mdx mdn
                              mdz:f64[200,7,18] = sub mdw mdy
                              mea:f64[200,7,18,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1, 2)
                                shape=(200, 7, 18, 1)
                              ] mdz
                              meb:f64[200,7,18] = mul mdx mdo
                              mec:f64[200,7,18] = mul mdq mdp
                              med:f64[200,7,18] = sub meb mec
                              mee:f64[200,7,18,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1, 2)
                                shape=(200, 7, 18, 1)
                              ] med
                              mef:f64[200,7,18,3] = concatenate[dimension=3] mdv
                                mea mee
                            in (mef,) }
                        ] mcp kjj kjk kjl kjm kjn kjo kjp kjq kjr
                        meg:f64[200,7,18,3] = mul mde mdf
                        meh:f64[200,7,18,3] = add mdc meg
                        mei:f64[18,200,7] = dot_general[
                          dimension_numbers=(([1], [3]), ([0], [2]))
                          preferred_element_type=float64
                        ] kgm meh
                        mej:f64[200,7,18] = transpose[permutation=(1, 2, 0)] mei
                        mek:f64[200,7,18,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 18, 1)
                        ] mej
                        mel:f64[200,7,18,3] = mul mek kjs
                        mem:f64[200,7,18,3] = mul 2.0 mel
                        men:f64[200,7,18,3] = mul kjt meh
                        meo:f64[200,7,18,3] = add mem men
                        mep:f64[200,7,18,3] = pjit[name=cross jaxpr=cross11] meh
                          kjv kjw kjx kjy kjz kka kkb kkc kkd
                        meq:f64[200,7,18,3] = mul kju mep
                        mer:f64[200,7,18,3] = add meo meq
                        mes:f64[200,7,18,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 18, 1)
                        ] ldo
                        met:f64[200,7,18,3] = mul mer mes
                        meu:f64[200,7,6,3] = slice[
                          limit_indices=(200, 7, 6, 3)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] met
                        mev:f64[200,7,1,6,3] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 1, 6, 3)
                        ] meu
                        mew:f64[200,7,1,3,3] = slice[
                          limit_indices=(200, 7, 1, 3, 3)
                          start_indices=(0, 0, 0, 0, 0)
                          strides=None
                        ] mev
                        mex:f64[200,7,1,3] = reduce_sum[axes=(3,)] mew
                        mey:f64[200,7,1,3] = slice[
                          limit_indices=(200, 7, 1, 3)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] lds
                        mez:f64[200,7,12,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 12, 1)
                        ] ldu
                        mfa:f64[200,7,12,3] = mul kkl mez
                        mfb:f64[200,7,12,1,3] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 12, 1, 3)
                        ] mfa
                        mfc:f64[200,7,12,3] = pjit[name=_take jaxpr=_take14] mfb
                          kkm
                        mfd:f64[200,7,13,3] = concatenate[dimension=2] mey mfc
                        mfe:f64[200,7,13,3] = add mfd kkn
                        mff:f64[200,7,13,3] = slice[
                          limit_indices=(200, 7, 13, 4)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] lgv
                        mfg:f64[13,200,7] = dot_general[
                          dimension_numbers=(([3], [1]), ([2], [0]))
                          preferred_element_type=float64
                        ] mff kkp
                        mfh:f64[200,7,13] = transpose[permutation=(1, 2, 0)] mfg
                        mfi:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] mfh
                        mfj:f64[200,7,13,3] = mul mfi mff
                        mfk:f64[200,7,13,3] = mul 2.0 mfj
                        mfl:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] lgv
                        mfm:f64[200,7,13] = squeeze[dimensions=(3,)] mfl
                        mfn:f64[200,7,13] = mul mfm mfm
                        mfo:f64[200,7,13] = dot_general[
                          dimension_numbers=(([3], [3]), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] mff mff
                        mfp:f64[200,7,13] = sub mfn mfo
                        mfq:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] mfp
                        mfr:f64[200,7,13,3] = mul mfq kkq
                        mfs:f64[200,7,13,3] = add mfk mfr
                        mft:f64[200,7,13] = mul 2.0 mfm
                        mfu:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] mft
                        mfv:f64[200,7,13,3] = pjit[name=cross jaxpr=cross12] mff
                          kkr kks kkt kku kkv kkw kkx kky kkz
                        mfw:f64[200,7,13,3] = mul mfu mfv
                        mfx:f64[200,7,13,3] = add mfs mfw
                        mfy:f64[200,7,13,3] = add kko mfx
                        mfz:f64[200,7,13,3] = sub mfe mfy
                        mga:f64[13,200,7] = dot_general[
                          dimension_numbers=(([1], [3]), ([0], [2]))
                          preferred_element_type=float64
                        ] kkk mfz
                        mgb:f64[200,7,13] = transpose[permutation=(1, 2, 0)] mga
                        mgc:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] mgb
                        mgd:f64[200,7,13,3] = mul mgc kla
                        mge:f64[200,7,13,3] = mul 2.0 mgd
                        mgf:f64[200,7,13,3] = mul klb mfz
                        mgg:f64[200,7,13,3] = add mge mgf
                        mgh:f64[200,7,13,3] = pjit[
                          name=cross
                          jaxpr={ lambda ; mgi:f64[200,7,13,3] mgj:f64[1,1,13] mgk:i32[1]
                              mgl:f64[1,1,13] mgm:i32[1] mgn:f64[1,1,13] mgo:i32[1]
                              mgp:f64[1,1,13] mgq:f64[1,1,13] mgr:f64[1,1,13]. let
                              mgs:f64[200,7,13] = gather[
                                dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
                                fill_value=None
                                indices_are_sorted=True
                                mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                slice_sizes=(200, 7, 13, 1)
                                unique_indices=True
                              ] mgi mgk
                              mgt:f64[200,7,13] = mul mgj mgs
                              mgu:f64[200,7,13] = gather[
                                dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
                                fill_value=None
                                indices_are_sorted=True
                                mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                slice_sizes=(200, 7, 13, 1)
                                unique_indices=True
                              ] mgi mgm
                              mgv:f64[200,7,13] = mul mgl mgu
                              mgw:f64[200,7,13] = sub mgt mgv
                              mgx:f64[200,7,13,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1, 2)
                                shape=(200, 7, 13, 1)
                              ] mgw
                              mgy:f64[200,7,13] = gather[
                                dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
                                fill_value=None
                                indices_are_sorted=True
                                mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                slice_sizes=(200, 7, 13, 1)
                                unique_indices=True
                              ] mgi mgo
                              mgz:f64[200,7,13] = mul mgn mgy
                              mha:f64[200,7,13] = mul mgp mgs
                              mhb:f64[200,7,13] = sub mgz mha
                              mhc:f64[200,7,13,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1, 2)
                                shape=(200, 7, 13, 1)
                              ] mhb
                              mhd:f64[200,7,13] = mul mgq mgu
                              mhe:f64[200,7,13] = mul mgr mgy
                              mhf:f64[200,7,13] = sub mhd mhe
                              mhg:f64[200,7,13,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1, 2)
                                shape=(200, 7, 13, 1)
                              ] mhf
                              mhh:f64[200,7,13,3] = concatenate[dimension=3] mgx
                                mhc mhg
                            in (mhh,) }
                        ] mfz kld kle klf klg klh kli klj klk kll
                        mhi:f64[200,7,13,3] = mul klc mgh
                        mhj:f64[200,7,13,3] = add mgg mhi
                        mhk:f64[200,7,13,3] = add kkj mhj
                        mhl:f64[200,7,1,3] = slice[
                          limit_indices=(200, 7, 1, 3)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] mhk
                        mhm:f64[200,7,4,3] = pjit[name=_take jaxpr=_take15] mhl klm
                        mhn:f64[200,7,4,3] = slice[
                          limit_indices=(200, 7, 4, 4)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] ljk
                        mho:f64[200,7,4,3] = pjit[name=_take jaxpr=_take16] mhk kln
                        mhp:f64[200,7,4] = dot_general[
                          dimension_numbers=(([3], [3]), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] mhn mho
                        mhq:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] mhp
                        mhr:f64[200,7,4,3] = mul mhq mhn
                        mhs:f64[200,7,4,3] = mul 2.0 mhr
                        mht:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] ljk
                        mhu:f64[200,7,4] = squeeze[dimensions=(3,)] mht
                        mhv:f64[200,7,4] = mul mhu mhu
                        mhw:f64[200,7,4] = dot_general[
                          dimension_numbers=(([3], [3]), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] mhn mhn
                        mhx:f64[200,7,4] = sub mhv mhw
                        mhy:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] mhx
                        mhz:f64[200,7,4,3] = mul mhy mho
                        mia:f64[200,7,4,3] = add mhs mhz
                        mib:f64[200,7,4] = mul 2.0 mhu
                        mic:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] mib
                        mid:f64[200,7,4,3] mie:f64[200,7,4] mif:f64[200,7,4] mig:f64[200,7,4]
                          mih:f64[200,7,4] mii:f64[200,7,4] mij:f64[200,7,4] = pjit[
                          name=cross
                          jaxpr=cross13
                        ] mhn mho klo klp klq klr kls klt
                        mik:f64[200,7,4,3] = mul mic mid
                        mil:f64[200,7,4,3] = add mia mik
                        mim:f64[200,7,4,3] = add mhm mil
                        min:f64[200,7,4,3] = slice[
                          limit_indices=(200, 7, 4, 4)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] lnh
                        mio:f64[200,7,4,3] = pjit[name=_take jaxpr=_take16] mhk klu
                        mip:f64[200,7,4] = dot_general[
                          dimension_numbers=(([3], [3]), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] min mio
                        miq:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] mip
                        mir:f64[200,7,4,3] = mul miq min
                        mis:f64[200,7,4,3] = mul 2.0 mir
                        mit:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] lnh
                        miu:f64[200,7,4] = squeeze[dimensions=(3,)] mit
                        miv:f64[200,7,4] = mul miu miu
                        miw:f64[200,7,4] = dot_general[
                          dimension_numbers=(([3], [3]), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] min min
                        mix:f64[200,7,4] = sub miv miw
                        miy:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] mix
                        miz:f64[200,7,4,3] = mul miy mio
                        mja:f64[200,7,4,3] = add mis miz
                        mjb:f64[200,7,4] = mul 2.0 miu
                        mjc:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] mjb
                        mjd:f64[200,7,4,3] mje:f64[200,7,4] mjf:f64[200,7,4] mjg:f64[200,7,4]
                          mjh:f64[200,7,4] mji:f64[200,7,4] mjj:f64[200,7,4] = pjit[
                          name=cross
                          jaxpr=cross13
                        ] min mio klv klw klx kly klz kma
                        mjk:f64[200,7,4,3] = mul mjc mjd
                        mjl:f64[200,7,4,3] = add mja mjk
                        mjm:f64[200,7,4,3] = add mim mjl
                        mjn:f64[200,7,4,3] = slice[
                          limit_indices=(200, 7, 4, 4)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] lrb
                        mjo:f64[200,7,4,3] = pjit[name=_take jaxpr=_take16] mhk kmb
                        mjp:f64[200,7,4] = dot_general[
                          dimension_numbers=(([3], [3]), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] mjn mjo
                        mjq:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] mjp
                        mjr:f64[200,7,4,3] = mul mjq mjn
                        mjs:f64[200,7,4,3] = mul 2.0 mjr
                        mjt:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] lrb
                        mju:f64[200,7,4] = squeeze[dimensions=(3,)] mjt
                        mjv:f64[200,7,4] = mul mju mju
                        mjw:f64[200,7,4] = dot_general[
                          dimension_numbers=(([3], [3]), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] mjn mjn
                        mjx:f64[200,7,4] = sub mjv mjw
                        mjy:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] mjx
                        mjz:f64[200,7,4,3] = mul mjy mjo
                        mka:f64[200,7,4,3] = add mjs mjz
                        mkb:f64[200,7,4] = mul 2.0 mju
                        mkc:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] mkb
                        mkd:f64[200,7,4,3] mke:f64[200,7,4] mkf:f64[200,7,4] mkg:f64[200,7,4]
                          mkh:f64[200,7,4] mki:f64[200,7,4] mkj:f64[200,7,4] = pjit[
                          name=cross
                          jaxpr=cross13
                        ] mjn mjo kmc kmd kme kmf kmg kmh
                        mkk:f64[200,7,4,3] = mul mkc mkd
                        mkl:f64[200,7,4,3] = add mka mkk
                        mkm:f64[200,7,4,3] = add mjm mkl
                        mkn:f64[200,7,13,3] = concatenate[dimension=2] mhl mim mjm
                          mkm
                        mko:f64[200,7,13,3] = pjit[name=_take jaxpr=_take17] mkn
                          kmi
                        mkp:f64[200,7,13,3] = slice[
                          limit_indices=(200, 7, 13, 4)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] lxf
                        mkq:f64[13,200,7] = dot_general[
                          dimension_numbers=(([3], [1]), ([2], [0]))
                          preferred_element_type=float64
                        ] mkp kmj
                        mkr:f64[200,7,13] = transpose[permutation=(1, 2, 0)] mkq
                        mks:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] mkr
                        mkt:f64[200,7,13,3] = mul mks mkp
                        mku:f64[200,7,13,3] = mul 2.0 mkt
                        mkv:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] lxf
                        mkw:f64[200,7,13] = squeeze[dimensions=(3,)] mkv
                        mkx:f64[200,7,13] = mul mkw mkw
                        mky:f64[200,7,13] = dot_general[
                          dimension_numbers=(([3], [3]), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] mkp mkp
                        mkz:f64[200,7,13] = sub mkx mky
                        mla:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] mkz
                        mlb:f64[200,7,13,3] = mul mla kmk
                        mlc:f64[200,7,13,3] = add mku mlb
                        mld:f64[200,7,13] = mul 2.0 mkw
                        mle:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] mld
                        mlf:f64[200,7,13,3] = pjit[name=cross jaxpr=cross12] mkp
                          kml kmm kmn kmo kmp kmq kmr kms kmt
                        mlg:f64[200,7,13,3] = mul mle mlf
                        mlh:f64[200,7,13,3] = add mlc mlg
                        mli:f64[200,7,13,3] = add mko mlh
                        mlj:f64[200,7,13,3] = mul kki mli
                        mlk:f64[200,7,13,3] = scatter-add[
                          dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          unique_indices=False
                          update_consts=()
                          update_jaxpr=jaxpr
                        ] kkg kkh mlj
                        mll:f64[200,7,13,3] = gather[
                          dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 3), collapsed_slice_dims=(2,), start_index_map=(2,))
                          fill_value=None
                          indices_are_sorted=False
                          mode=GatherScatterMode.PROMISE_IN_BOUNDS
                          slice_sizes=(200, 7, 1, 3)
                          unique_indices=False
                        ] mlk kmu
                        mlm:f64[200,7,13,3] = div mll kmv
                        mln:f64[200,7,14,3] = concatenate[dimension=2] mko kmw
                        mlo:f64[200,7,13,3] = pjit[name=_take jaxpr=_take18] mln
                          kmx
                        mlp:f64[200,7,13,3] = slice[
                          limit_indices=(200, 7, 13, 4)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] lxh
                        mlq:f64[13,200,7] = dot_general[
                          dimension_numbers=(([3], [1]), ([2], [0]))
                          preferred_element_type=float64
                        ] mlp kmy
                        mlr:f64[200,7,13] = transpose[permutation=(1, 2, 0)] mlq
                        mls:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] mlr
                        mlt:f64[200,7,13,3] = mul mls mlp
                        mlu:f64[200,7,13,3] = mul 2.0 mlt
                        mlv:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] lxh
                        mlw:f64[200,7,13] = squeeze[dimensions=(3,)] mlv
                        mlx:f64[200,7,13] = mul mlw mlw
                        mly:f64[200,7,13] = dot_general[
                          dimension_numbers=(([3], [3]), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] mlp mlp
                        mlz:f64[200,7,13] = sub mlx mly
                        mma:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] mlz
                        mmb:f64[200,7,13,3] = mul mma kmz
                        mmc:f64[200,7,13,3] = add mlu mmb
                        mmd:f64[200,7,13] = mul 2.0 mlw
                        mme:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] mmd
                        mmf:f64[200,7,13,3] = pjit[name=cross jaxpr=cross12] mlp
                          kna knb knc knd kne knf kng knh kni
                        mmg:f64[200,7,13,3] = mul mme mmf
                        mmh:f64[200,7,13,3] = add mmc mmg
                        mmi:f64[200,7,13,3] = add mlo mmh
                        mmj:f64[200,7,13,3] = slice[
                          limit_indices=(200, 7, 13, 4)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] lzx
                        mmk:f64[13,200,7] = dot_general[
                          dimension_numbers=(([3], [1]), ([2], [0]))
                          preferred_element_type=float64
                        ] mmj kkp
                        mml:f64[200,7,13] = transpose[permutation=(1, 2, 0)] mmk
                        mmm:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] mml
                        mmn:f64[200,7,13,3] = mul mmm mmj
                        mmo:f64[200,7,13,3] = mul 2.0 mmn
                        mmp:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] lzx
                        mmq:f64[200,7,13] = squeeze[dimensions=(3,)] mmp
                        mmr:f64[200,7,13] = mul mmq mmq
                        mms:f64[200,7,13] = dot_general[
                          dimension_numbers=(([3], [3]), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] mmj mmj
                        mmt:f64[200,7,13] = sub mmr mms
                        mmu:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] mmt
                        mmv:f64[200,7,13,3] = mul mmu knj
                        mmw:f64[200,7,13,3] = add mmo mmv
                        mmx:f64[200,7,13] = mul 2.0 mmq
                        mmy:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] mmx
                        mmz:f64[200,7,13,3] = pjit[name=cross jaxpr=cross12] mmj
                          knk knl knm knn kno knp knq knr kns
                        mna:f64[200,7,13,3] = mul mmy mmz
                        mnb:f64[200,7,13,3] = add mmw mna
                        mnc:f64[200,7,13,3] = add mmi mnb
                        mnd:f64[200,7,13,3] = sub mlm mnc
                        mne:f64[200,7,18,3] = pjit[name=_take jaxpr=_take19] mnd
                          knt
                        mnf:f64[200,7,18,3] mng:f64[200,7,18] mnh:f64[200,7,18] mni:f64[200,7,18]
                          mnj:f64[200,7,18] mnk:f64[200,7,18] mnl:f64[200,7,18] = pjit[
                          name=cross
                          jaxpr=cross14
                        ] mne meh knu knv knw knx kny knz
                        mnm:f64[200,7,18,3] = sub kkf mnf
                        mnn:f64[18,200,7] = dot_general[
                          dimension_numbers=(([1], [3]), ([0], [2]))
                          preferred_element_type=float64
                        ] kke mnm
                        mno:f64[200,7,18] = transpose[permutation=(1, 2, 0)] mnn
                        mnp:f64[200,7,18,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 18, 1)
                        ] mno
                        mnq:f64[200,7,18,3] = mul mnp koa
                        mnr:f64[200,7,18,3] = mul 2.0 mnq
                        mns:f64[200,7,18,3] = mul kob mnm
                        mnt:f64[200,7,18,3] = add mnr mns
                        mnu:f64[200,7,18,3] = pjit[name=cross jaxpr=cross11] mnm
                          kod koe kof kog koh koi koj kok kol
                        mnv:f64[200,7,18,3] = mul koc mnu
                        mnw:f64[200,7,18,3] = add mnt mnv
                        mnx:f64[200,7,6,3] = slice[
                          limit_indices=(200, 7, 6, 3)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] mnw
                        mny:f64[200,7,1,6,3] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 1, 6, 3)
                        ] mnx
                        mnz:f64[200,7,1,6,3] moa:f64[200,7,1,6] mob:f64[200,7,1,1]
                          moc:f64[200,7,1,6] mod:f64[200,7,1,1] moe:f64[200,7,1,6]
                          mof:f64[200,7,1,1] mog:f64[200,7,1,1] moh:f64[200,7,1,1]
                          moi:f64[200,7,1,1] = pjit[name=cross jaxpr=cross15] mex
                          mny kom kon koo kop koq kor
                        moj:f64[200,7,18,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 18, 1)
                        ] ldo
                        mok:f64[200,7,18,3] = mul mnw moj
                        mol:f64[200,7,6,3] = slice[
                          limit_indices=(200, 7, 6, 3)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] mok
                        mom:f64[200,7,1,6,3] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 1, 6, 3)
                        ] mol
                        mon:f64[200,7,1,3,3] = slice[
                          limit_indices=(200, 7, 1, 3, 3)
                          start_indices=(0, 0, 0, 0, 0)
                          strides=None
                        ] mom
                        moo:f64[200,7,1,3] = reduce_sum[axes=(3,)] mon
                        mop:f64[200,7,6,3] = slice[
                          limit_indices=(200, 7, 6, 3)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] mer
                        moq:f64[200,7,1,6,3] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 1, 6, 3)
                        ] mop
                        mor:f64[200,7,1,6,3] mos:f64[200,7,1,6] mot:f64[200,7,1,1]
                          mou:f64[200,7,1,6] mov:f64[200,7,1,1] mow:f64[200,7,1,6]
                          mox:f64[200,7,1,1] moy:f64[200,7,1,1] moz:f64[200,7,1,1]
                          mpa:f64[200,7,1,1] = pjit[name=cross jaxpr=cross15] moo
                          moq kos kot kou kov kow kox
                        mpb:f64[200,7,1,6,3] = add mnz mor
                        mpc:f64[200,7,1,6,3] = scatter[
                          dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2, 3, 4), inserted_window_dims=(), scatter_dims_to_operand_dims=(3,))
                          indices_are_sorted=True
                          mode=GatherScatterMode.FILL_OR_DROP
                          unique_indices=True
                          update_consts=()
                          update_jaxpr=None
                        ] mpb koy koz
                        mpd:f64[200,7,6,3] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 6, 3)
                        ] mpc
                        mpe:f64[200,7,6,3] = slice[
                          limit_indices=(200, 7, 6, 3)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] met
                        mpf:f64[200,7,1,3] = scatter-add[
                          dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          unique_indices=False
                          update_consts=()
                          update_jaxpr=jaxpr
                        ] kpa kpb mpe
                        mpg:f64[200,7,4,3] = pjit[name=_take jaxpr=_take15] mpf kpc
                        mph:f64[200,7,4,3] = pjit[name=_take jaxpr=_take20] met kpe
                        mpi:f64[200,7,4,3] = scatter-add[
                          dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          unique_indices=False
                          update_consts=()
                          update_jaxpr=jaxpr
                        ] mpg kpd mph
                        mpj:f64[200,7,4,3] = pjit[name=_take jaxpr=_take20] met kpg
                        mpk:f64[200,7,4,3] = scatter-add[
                          dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          unique_indices=False
                          update_consts=()
                          update_jaxpr=jaxpr
                        ] mpi kpf mpj
                        mpl:f64[200,7,4,3] = pjit[name=_take jaxpr=_take20] met kpi
                        mpm:f64[200,7,4,3] = scatter-add[
                          dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          unique_indices=False
                          update_consts=()
                          update_jaxpr=jaxpr
                        ] mpk kph mpl
                        mpn:f64[200,7,13,3] = concatenate[dimension=2] mpf mpi mpk
                          mpm
                        mpo:f64[200,7,13,3] = pjit[name=_take jaxpr=_take17] mpn
                          kpj
                        mpp:f64[200,7,14,3] = concatenate[dimension=2] mpo kpk
                        mpq:f64[200,7,13,3] = pjit[name=_take jaxpr=_take18] mpp
                          kpl
                        mpr:f64[200,7,12,3] = slice[
                          limit_indices=(200, 7, 13, 3)
                          start_indices=(0, 0, 1, 0)
                          strides=None
                        ] mpq
                        mps:f64[200,7,12,3] = slice[
                          limit_indices=(200, 7, 18, 3)
                          start_indices=(0, 0, 6, 0)
                          strides=None
                        ] mnw
                        mpt:f64[200,7,12,3] mpu:f64[200,7,12] mpv:f64[200,7,12] mpw:f64[200,7,12]
                          mpx:f64[200,7,12] mpy:f64[200,7,12] mpz:f64[200,7,12] = pjit[
                          name=cross
                          jaxpr=cross16
                        ] mpr mps kpm kpn kpo kpp kpq kpr
                        mqa:f64[200,7,6,3] = slice[
                          limit_indices=(200, 7, 6, 3)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] mok
                        mqb:f64[200,7,1,3] = scatter-add[
                          dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          unique_indices=False
                          update_consts=()
                          update_jaxpr=jaxpr
                        ] kps kpt mqa
                        mqc:f64[200,7,4,3] = pjit[name=_take jaxpr=_take15] mqb kpu
                        mqd:f64[200,7,4,3] = pjit[name=_take jaxpr=_take20] mok kpw
                        mqe:f64[200,7,4,3] = scatter-add[
                          dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          unique_indices=False
                          update_consts=()
                          update_jaxpr=jaxpr
                        ] mqc kpv mqd
                        mqf:f64[200,7,4,3] = pjit[name=_take jaxpr=_take20] mok kpy
                        mqg:f64[200,7,4,3] = scatter-add[
                          dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          unique_indices=False
                          update_consts=()
                          update_jaxpr=jaxpr
                        ] mqe kpx mqf
                        mqh:f64[200,7,4,3] = pjit[name=_take jaxpr=_take20] mok kqa
                        mqi:f64[200,7,4,3] = scatter-add[
                          dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          unique_indices=False
                          update_consts=()
                          update_jaxpr=jaxpr
                        ] mqg kpz mqh
                        mqj:f64[200,7,13,3] = concatenate[dimension=2] mqb mqe mqg
                          mqi
                        mqk:f64[200,7,13,3] = pjit[name=_take jaxpr=_take17] mqj
                          kqb
                        mql:f64[200,7,14,3] = concatenate[dimension=2] mqk kqc
                        mqm:f64[200,7,13,3] = pjit[name=_take jaxpr=_take18] mql
                          kqd
                        mqn:f64[200,7,12,3] = slice[
                          limit_indices=(200, 7, 13, 3)
                          start_indices=(0, 0, 1, 0)
                          strides=None
                        ] mqm
                        mqo:f64[200,7,12,3] = slice[
                          limit_indices=(200, 7, 18, 3)
                          start_indices=(0, 0, 6, 0)
                          strides=None
                        ] mer
                        mqp:f64[200,7,12,3] mqq:f64[200,7,12] mqr:f64[200,7,12] mqs:f64[200,7,12]
                          mqt:f64[200,7,12] mqu:f64[200,7,12] mqv:f64[200,7,12] = pjit[
                          name=cross
                          jaxpr=cross16
                        ] mqn mqo kqe kqf kqg kqh kqi kqj
                        mqw:f64[200,7,12,3] = add mpt mqp
                        mqx:f64[200,7,18,3] = concatenate[dimension=2] mpd mqw
                        mqy:f64[200,7,6,3] = slice[
                          limit_indices=(200, 7, 6, 3)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] mqx
                        mqz:f64[200,7,6] = slice[
                          limit_indices=(200, 7, 6)
                          start_indices=(0, 0, 0)
                          strides=None
                        ] ldo
                        mra:f64[200,7,6,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 6, 1)
                        ] mqz
                        mrb:f64[200,7,6,3] = mul mqy mra
                        mrc:f64[200,7,1,3] = scatter-add[
                          dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          unique_indices=False
                          update_consts=()
                          update_jaxpr=jaxpr
                        ] kgk kgl mrb
                        mrd:f64[200,7,4,3] = pjit[name=_take jaxpr=_take15] mrc kqk
                        mre:f64[200,7,4,3] = pjit[name=_take jaxpr=_take20] mqx kqm
                        mrf:f64[200,7,4] = pjit[name=_take jaxpr=_take21] ldo kqn
                        mrg:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] mrf
                        mrh:f64[200,7,4,3] = mul mre mrg
                        mri:f64[200,7,4,3] = scatter-add[
                          dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          unique_indices=False
                          update_consts=()
                          update_jaxpr=jaxpr
                        ] mrd kql mrh
                        mrj:f64[200,7,4,3] = pjit[name=_take jaxpr=_take20] mqx kqp
                        mrk:f64[200,7,4] = pjit[name=_take jaxpr=_take21] ldo kqq
                        mrl:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] mrk
                        mrm:f64[200,7,4,3] = mul mrj mrl
                        mrn:f64[200,7,4,3] = scatter-add[
                          dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          unique_indices=False
                          update_consts=()
                          update_jaxpr=jaxpr
                        ] mri kqo mrm
                        mro:f64[200,7,4,3] = pjit[name=_take jaxpr=_take20] mqx kqs
                        mrp:f64[200,7,4] = pjit[name=_take jaxpr=_take21] ldo kqt
                        mrq:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] mrp
                        mrr:f64[200,7,4,3] = mul mro mrq
                        mrs:f64[200,7,4,3] = scatter-add[
                          dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          unique_indices=False
                          update_consts=()
                          update_jaxpr=jaxpr
                        ] mrn kqr mrr
                        mrt:f64[200,7,13,3] = concatenate[dimension=2] mrc mri mrn
                          mrs
                        mru:f64[200,7,13,3] = pjit[name=_take jaxpr=_take17] mrt
                          kqu
                        mrv:f64[200,7,13,3] = mul kgj mru
                        mrw:f64[200,7,13,3] = sub mli mlm
                        mrx:f64[200,7,13,3] = mul mrw kqv
                        mry:f64[200,7,1,6,3] mrz:f64[200,7,1,6] msa:f64[200,7,1,1]
                          msb:f64[200,7,1,6] msc:f64[200,7,1,1] msd:f64[200,7,1,6]
                          mse:f64[200,7,1,1] msf:f64[200,7,1,1] msg:f64[200,7,1,1]
                          msh:f64[200,7,1,1] = pjit[name=cross jaxpr=cross15] mex
                          moq kqy kqz kra krb krc krd
                        msi:f64[200,7,1,6,3] = scatter[
                          dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2, 3, 4), inserted_window_dims=(), scatter_dims_to_operand_dims=(3,))
                          indices_are_sorted=True
                          mode=GatherScatterMode.FILL_OR_DROP
                          unique_indices=True
                          update_consts=()
                          update_jaxpr=None
                        ] mry kre krf
                        msj:f64[200,7,6,3] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 6, 3)
                        ] msi
                        msk:f64[200,7,12,3] msl:f64[200,7,12] msm:f64[200,7,12] msn:f64[200,7,12]
                          mso:f64[200,7,12] msp:f64[200,7,12] msq:f64[200,7,12] = pjit[
                          name=cross
                          jaxpr=cross16
                        ] mpr mqo krg krh kri krj krk krl
                        msr:f64[200,7,18,3] = concatenate[dimension=2] msj msk
                        mss:f64[200,7,6,3] = slice[
                          limit_indices=(200, 7, 6, 3)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] msr
                        mst:f64[200,7,6,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 6, 1)
                        ] mqz
                        msu:f64[200,7,6,3] = mul mss mst
                        msv:f64[200,7,1,3] = scatter-add[
                          dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          unique_indices=False
                          update_consts=()
                          update_jaxpr=jaxpr
                        ] kqw kqx msu
                        msw:f64[200,7,4,3] = pjit[name=_take jaxpr=_take15] msv krm
                        msx:f64[200,7,4,3] = pjit[name=_take jaxpr=_take20] msr kro
                        msy:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] mrf
                        msz:f64[200,7,4,3] = mul msx msy
                        mta:f64[200,7,4,3] = scatter-add[
                          dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          unique_indices=False
                          update_consts=()
                          update_jaxpr=jaxpr
                        ] msw krn msz
                        mtb:f64[200,7,4,3] = pjit[name=_take jaxpr=_take20] msr krq
                        mtc:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] mrk
                        mtd:f64[200,7,4,3] = mul mtb mtc
                        mte:f64[200,7,4,3] = scatter-add[
                          dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          unique_indices=False
                          update_consts=()
                          update_jaxpr=jaxpr
                        ] mta krp mtd
                        mtf:f64[200,7,4,3] = pjit[name=_take jaxpr=_take20] msr krs
                        mtg:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] mrp
                        mth:f64[200,7,4,3] = mul mtf mtg
                        mti:f64[200,7,4,3] = scatter-add[
                          dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          unique_indices=False
                          update_consts=()
                          update_jaxpr=jaxpr
                        ] mte krr mth
                        mtj:f64[200,7,13,3] = concatenate[dimension=2] msv mta mte
                          mti
                        mtk:f64[200,7,13,3] = pjit[name=_take jaxpr=_take17] mtj
                          krt
                        mtl:f64[200,7,13,3] mtm:f64[200,7,13] mtn:f64[200,7,13] mto:f64[200,7,13]
                          mtp:f64[200,7,13] mtq:f64[200,7,13] mtr:f64[200,7,13] = pjit[
                          name=cross
                          jaxpr=cross17
                        ] mrx mtk kru krv krw krx kry krz
                        mts:f64[200,7,13,3] = sub mrv mtl
                        mtt:f64[200,7,13,3] = mul ksa mqk
                        mtu:f64[200,7,13,3] mtv:f64[200,7,13] mtw:f64[200,7,13] mtx:f64[200,7,13]
                          mty:f64[200,7,13] mtz:f64[200,7,13] mua:f64[200,7,13] = pjit[
                          name=cross
                          jaxpr=cross17
                        ] mrx mpo ksb ksc ksd kse ksf ksg
                        mub:f64[200,7,13,3] = sub mtt mtu
                        muc:f64[200,7,13,3] mud:f64[200,7,13] mue:f64[200,7,13] muf:f64[200,7,13]
                          mug:f64[200,7,13] muh:f64[200,7,13] mui:f64[200,7,13] = pjit[
                          name=cross
                          jaxpr=cross17
                        ] mpo mub ksh ksi ksj ksk ksl ksm
                        muj:f64[200,7,13,3] = add mts muc
                        muk:f64[200,7,1,3] = slice[
                          limit_indices=(200, 7, 1, 3)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] muj
                        mul:f64[200,7,4,3] = pjit[name=_take jaxpr=_take16] muj ksp
                        mum:f64[200,7,4,3] = pjit[name=_take jaxpr=_take16] muj kss
                        mun:f64[200,7,4,3] = pjit[name=_take jaxpr=_take16] muj ksv
                        muo:f64[200,7,4,3] = scatter-add[
                          dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          unique_indices=False
                          update_consts=()
                          update_jaxpr=jaxpr
                        ] kst ksu mun
                        mup:f64[200,7,4,3] = add mum muo
                        muq:f64[200,7,4,3] = scatter-add[
                          dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          unique_indices=False
                          update_consts=()
                          update_jaxpr=jaxpr
                        ] ksq ksr mup
                        mur:f64[200,7,4,3] = add mul muq
                        mus:f64[200,7,1,3] = scatter-add[
                          dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          unique_indices=False
                          update_consts=()
                          update_jaxpr=jaxpr
                        ] ksn kso mur
                        mut:f64[200,7,1,3] = add muk mus
                        muu:f64[200,7,13,3] = concatenate[dimension=2] mut mur mup
                          mun
                        muv:f64[200,7,13,3] = pjit[name=_take jaxpr=_take17] muu
                          ksw
                        muw:f64[200,7,18,3] = pjit[name=_take jaxpr=_take19] muv
                          ksx
                        mux:f64[200,7,18] = dot_general[
                          dimension_numbers=(([3], [3]), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] mnw muw
                        muy:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] lxf
                        muz:f64[200,7,13] = squeeze[dimensions=(3,)] muy
                        mva:f64[200,7,13] = mul muz ksy
                        mvb:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] lxf
                        mvc:f64[200,7,13] = squeeze[dimensions=(3,)] mvb
                        mvd:f64[200,7,13] = mul mvc ksz
                        mve:f64[200,7,13] = sub mva mvd
                        mvf:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] lxf
                        mvg:f64[200,7,13] = squeeze[dimensions=(3,)] mvf
                        mvh:f64[200,7,13] = mul mvg kta
                        mvi:f64[200,7,13] = sub mve mvh
                        mvj:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] lxf
                        mvk:f64[200,7,13] = squeeze[dimensions=(3,)] mvj
                        mvl:f64[200,7,13] = mul mvk ktb
                        mvm:f64[200,7,13] = sub mvi mvl
                        mvn:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] mvm
                        mvo:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] lxf
                        mvp:f64[200,7,13] = squeeze[dimensions=(3,)] mvo
                        mvq:f64[200,7,13] = mul mvp ktc
                        mvr:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] lxf
                        mvs:f64[200,7,13] = squeeze[dimensions=(3,)] mvr
                        mvt:f64[200,7,13] = mul mvs ktd
                        mvu:f64[200,7,13] = add mvq mvt
                        mvv:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] lxf
                        mvw:f64[200,7,13] = squeeze[dimensions=(3,)] mvv
                        mvx:f64[200,7,13] = mul mvw kte
                        mvy:f64[200,7,13] = add mvu mvx
                        mvz:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] lxf
                        mwa:f64[200,7,13] = squeeze[dimensions=(3,)] mvz
                        mwb:f64[200,7,13] = mul mwa ktf
                        mwc:f64[200,7,13] = sub mvy mwb
                        mwd:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] mwc
                        mwe:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] lxf
                        mwf:f64[200,7,13] = squeeze[dimensions=(3,)] mwe
                        mwg:f64[200,7,13] = mul mwf ktg
                        mwh:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] lxf
                        mwi:f64[200,7,13] = squeeze[dimensions=(3,)] mwh
                        mwj:f64[200,7,13] = mul mwi kth
                        mwk:f64[200,7,13] = sub mwg mwj
                        mwl:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] lxf
                        mwm:f64[200,7,13] = squeeze[dimensions=(3,)] mwl
                        mwn:f64[200,7,13] = mul mwm kti
                        mwo:f64[200,7,13] = add mwk mwn
                        mwp:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] lxf
                        mwq:f64[200,7,13] = squeeze[dimensions=(3,)] mwp
                        mwr:f64[200,7,13] = mul mwq ktj
                        mws:f64[200,7,13] = add mwo mwr
                        mwt:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] mws
                        mwu:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] lxf
                        mwv:f64[200,7,13] = squeeze[dimensions=(3,)] mwu
                        mww:f64[200,7,13] = mul mwv ktk
                        mwx:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] lxf
                        mwy:f64[200,7,13] = squeeze[dimensions=(3,)] mwx
                        mwz:f64[200,7,13] = mul mwy ktl
                        mxa:f64[200,7,13] = add mww mwz
                        mxb:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] lxf
                        mxc:f64[200,7,13] = squeeze[dimensions=(3,)] mxb
                        mxd:f64[200,7,13] = mul mxc ktm
                        mxe:f64[200,7,13] = sub mxa mxd
                        mxf:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] lxf
                        mxg:f64[200,7,13] = squeeze[dimensions=(3,)] mxf
                        mxh:f64[200,7,13] = mul mxg ktn
                        mxi:f64[200,7,13] = add mxe mxh
                        mxj:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] mxi
                        mxk:f64[200,7,13,4] = concatenate[dimension=3] mvn mwd mwt
                          mxj
                        mxl:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=(1, 1, 1, 1)
                        ] mxk
                        mxm:f64[200,7,13] = squeeze[dimensions=(3,)] mxl
                        mxn:f64[200,7,13] = dot_general[
                          dimension_numbers=(([3], [3]), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] mxk mxk
                        mxo:f64[200,7,13] = div 2.0 mxn
                        mxp:f64[200,7,13] = mul mxm mxo
                        mxq:f64[200,7,13] = mul mxm mxp
                        mxr:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=(1, 1, 1, 1)
                        ] mxk
                        mxs:f64[200,7,13] = squeeze[dimensions=(3,)] mxr
                        mxt:f64[200,7,13] = mul mxs mxo
                        mxu:f64[200,7,13] = mul mxs mxt
                        mxv:f64[200,7,13] = add mxq mxu
                        mxw:f64[200,7,13] = sub 1.0 mxv
                        mxx:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] mxw
                        mxy:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=(1, 1, 1, 1)
                        ] mxk
                        mxz:f64[200,7,13] = squeeze[dimensions=(3,)] mxy
                        mya:f64[200,7,13] = mul mxz mxp
                        myb:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=(1, 1, 1, 1)
                        ] mxk
                        myc:f64[200,7,13] = squeeze[dimensions=(3,)] myb
                        myd:f64[200,7,13] = mul myc mxt
                        mye:f64[200,7,13] = sub mya myd
                        myf:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] mye
                        myg:f64[200,7,13] = mul mxz mxt
                        myh:f64[200,7,13] = mul myc mxp
                        myi:f64[200,7,13] = add myg myh
                        myj:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] myi
                        myk:f64[200,7,13,3] = concatenate[dimension=3] mxx myf myj
                        myl:f64[200,7,13,1,3] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2, 4)
                          shape=(200, 7, 13, 1, 3)
                        ] myk
                        mym:f64[200,7,13] = add mya myd
                        myn:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] mym
                        myo:f64[200,7,13] = mul mxz mxo
                        myp:f64[200,7,13] = mul mxz myo
                        myq:f64[200,7,13] = add myp mxu
                        myr:f64[200,7,13] = sub 1.0 myq
                        mys:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] myr
                        myt:f64[200,7,13] = mul mxm mxt
                        myu:f64[200,7,13] = mul myc myo
                        myv:f64[200,7,13] = sub myt myu
                        myw:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] myv
                        myx:f64[200,7,13,3] = concatenate[dimension=3] myn mys myw
                        myy:f64[200,7,13,1,3] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2, 4)
                          shape=(200, 7, 13, 1, 3)
                        ] myx
                        myz:f64[200,7,13] = sub myg myh
                        mza:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] myz
                        mzb:f64[200,7,13] = add myt myu
                        mzc:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] mzb
                        mzd:f64[200,7,13] = add myp mxq
                        mze:f64[200,7,13] = sub 1.0 mzd
                        mzf:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] mze
                        mzg:f64[200,7,13,3] = concatenate[dimension=3] mza mzc mzf
                        mzh:f64[200,7,13,1,3] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2, 4)
                          shape=(200, 7, 13, 1, 3)
                        ] mzg
                        mzi:f64[200,7,13,3,3] = concatenate[dimension=3] myl myy
                          mzh
                        mzj:f64[13,200,7,3,3] = dot_general[
                          dimension_numbers=(([4], [1]), ([2], [0]))
                          preferred_element_type=float64
                        ] mzi kto
                        mzk:f64[200,7,13,3,3] = transpose[
                          permutation=(0, 1, 2, 4, 3)
                        ] mzi
                        mzl:f64[200,7,13,3,3] = dot_general[
                          dimension_numbers=(([4], [3]), ([1, 2, 0], [0, 1, 2]))
                          preferred_element_type=float64
                        ] mzj mzk
                        mzm:f64[200,7,13,3,3] = pjit[
                          name=cross
                          jaxpr={ lambda ; mzn:f64[200,7,13,3] mzo:i32[1] mzp:f64[1,1,1,3]
                              mzq:i32[1] mzr:f64[1,1,1,3] mzs:f64[1,1,1,3] mzt:i32[1]
                              mzu:f64[1,1,1,3] mzv:f64[1,1,1,3] mzw:f64[1,1,1,3]. let
                              mzx:f64[200,7,13] = gather[
                                dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
                                fill_value=None
                                indices_are_sorted=True
                                mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                slice_sizes=(200, 7, 13, 1)
                                unique_indices=True
                              ] mzn mzo
                              mzy:f64[200,7,13,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1, 2)
                                shape=(200, 7, 13, 1)
                              ] mzx
                              mzz:f64[200,7,13,3] = mul mzy mzp
                              naa:f64[200,7,13] = gather[
                                dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
                                fill_value=None
                                indices_are_sorted=True
                                mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                slice_sizes=(200, 7, 13, 1)
                                unique_indices=True
                              ] mzn mzq
                              nab:f64[200,7,13,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1, 2)
                                shape=(200, 7, 13, 1)
                              ] naa
                              nac:f64[200,7,13,3] = mul nab mzr
                              nad:f64[200,7,13,3] = sub mzz nac
                              nae:f64[200,7,13,1,3] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1, 2, 4)
                                shape=(200, 7, 13, 1, 3)
                              ] nad
                              naf:f64[200,7,13,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1, 2)
                                shape=(200, 7, 13, 1)
                              ] naa
                              nag:f64[200,7,13,3] = mul naf mzs
                              nah:f64[200,7,13] = gather[
                                dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
                                fill_value=None
                                indices_are_sorted=True
                                mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                slice_sizes=(200, 7, 13, 1)
                                unique_indices=True
                              ] mzn mzt
                              nai:f64[200,7,13,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1, 2)
                                shape=(200, 7, 13, 1)
                              ] nah
                              naj:f64[200,7,13,3] = mul nai mzu
                              nak:f64[200,7,13,3] = sub nag naj
                              nal:f64[200,7,13,1,3] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1, 2, 4)
                                shape=(200, 7, 13, 1, 3)
                              ] nak
                              nam:f64[200,7,13,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1, 2)
                                shape=(200, 7, 13, 1)
                              ] nah
                              nan:f64[200,7,13,3] = mul nam mzv
                              nao:f64[200,7,13,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1, 2)
                                shape=(200, 7, 13, 1)
                              ] mzx
                              nap:f64[200,7,13,3] = mul nao mzw
                              naq:f64[200,7,13,3] = sub nan nap
                              nar:f64[200,7,13,1,3] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1, 2, 4)
                                shape=(200, 7, 13, 1, 3)
                              ] naq
                              nas:f64[200,7,13,3,3] = concatenate[dimension=3] nae
                                nal nar
                              nat:f64[200,7,13,3,3] = transpose[
                                permutation=(0, 1, 2, 4, 3)
                              ] nas
                            in (nat,) }
                        ] mrw ktp ktq ktr kts ktt ktu ktv ktw ktx
                        nau:f64[200,7,13,3,3] = transpose[
                          permutation=(0, 1, 2, 4, 3)
                        ] mzm
                        nav:f64[200,7,13,3,3] = dot_general[
                          dimension_numbers=(([4], [3]), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] mzm nau
                        naw:f64[200,7,13,3,3] = mul nav kty
                        nax:f64[200,7,13,3,3] = add mzl naw
                        nay:f64[200,7,13,3] = dot_general[
                          dimension_numbers=(([4], [3]), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] nax mtk
                        naz:f64[200,7,13,3] nba:f64[200,7,13] nbb:f64[200,7,13] nbc:f64[200,7,13]
                          nbd:f64[200,7,13] nbe:f64[200,7,13] nbf:f64[200,7,13] = pjit[
                          name=cross
                          jaxpr=cross17
                        ] mrx mru ktz kua kub kuc kud kue
                        nbg:f64[200,7,13,3] = add nay naz
                        nbh:f64[200,7,13,3] = dot_general[
                          dimension_numbers=(([4], [3]), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] nax mpo
                        nbi:f64[200,7,13,3] nbj:f64[200,7,13] nbk:f64[200,7,13] nbl:f64[200,7,13]
                          nbm:f64[200,7,13] nbn:f64[200,7,13] nbo:f64[200,7,13] = pjit[
                          name=cross
                          jaxpr=cross17
                        ] mrx mqk kuf kug kuh kui kuj kuk
                        nbp:f64[200,7,13,3] = add nbh nbi
                        nbq:f64[200,7,13,3] nbr:f64[200,7,13] nbs:f64[200,7,13] nbt:f64[200,7,13]
                          nbu:f64[200,7,13] nbv:f64[200,7,13] nbw:f64[200,7,13] = pjit[
                          name=cross
                          jaxpr=cross17
                        ] mpo nbp kul kum kun kuo kup kuq
                        nbx:f64[200,7,13,3] nby:f64[200,7,13] nbz:f64[200,7,13] nca:f64[200,7,13]
                          ncb:f64[200,7,13] ncc:f64[200,7,13] ncd:f64[200,7,13] = pjit[
                          name=cross
                          jaxpr=cross17
                        ] mqk mub kur kus kut kuu kuv kuw
                        nce:f64[200,7,13,3] = add nbq nbx
                        ncf:f64[200,7,13,3] = add nbg nce
                        ncg:f64[200,7,1,3] = slice[
                          limit_indices=(200, 7, 1, 3)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] ncf
                        nch:f64[200,7,4,3] = pjit[name=_take jaxpr=_take16] ncf kuz
                        nci:f64[200,7,4,3] = pjit[name=_take jaxpr=_take16] ncf kvc
                        ncj:f64[200,7,4,3] = pjit[name=_take jaxpr=_take16] ncf kvf
                        nck:f64[200,7,4,3] = scatter-add[
                          dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          unique_indices=False
                          update_consts=()
                          update_jaxpr=jaxpr
                        ] kvd kve ncj
                        ncl:f64[200,7,4,3] = add nci nck
                        ncm:f64[200,7,4,3] = scatter-add[
                          dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          unique_indices=False
                          update_consts=()
                          update_jaxpr=jaxpr
                        ] kva kvb ncl
                        ncn:f64[200,7,4,3] = add nch ncm
                        nco:f64[200,7,1,3] = scatter-add[
                          dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          unique_indices=False
                          update_consts=()
                          update_jaxpr=jaxpr
                        ] kux kuy ncn
                        ncp:f64[200,7,1,3] = add ncg nco
                        ncq:f64[200,7,13,3] = concatenate[dimension=2] ncp ncn ncl
                          ncj
                        ncr:f64[200,7,13,3] = pjit[name=_take jaxpr=_take17] ncq
                          kvg
                        ncs:f64[200,7,18,3] = pjit[name=_take jaxpr=_take19] ncr
                          kvh
                        nct:f64[200,7,18] = dot_general[
                          dimension_numbers=(([3], [3]), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] mer ncs
                        ncu:f64[200,7,18] = add mux nct
                        ncv:f64[200,7,18] = sub ldq ncu
                        ncw:f64[200,7,18] = add ncv kvi
                        ncx:f64[200,7,1] = slice[
                          limit_indices=(200, 7, 35)
                          start_indices=(0, 0, 34)
                          strides=None
                        ] lbc
                        ncy:f64[200,7] = squeeze[dimensions=(2,)] ncx
                        ncz:f64[200,7,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1)
                          shape=(200, 7, 1)
                        ] ncy
                        nda:f64[200,7,1] = slice[
                          limit_indices=(200, 7, 36)
                          start_indices=(0, 0, 35)
                          strides=None
                        ] lbc
                        ndb:f64[200,7] = squeeze[dimensions=(2,)] nda
                        ndc:f64[200,7,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1)
                          shape=(200, 7, 1)
                        ] ndb
                        ndd:f64[200,7,2] = concatenate[dimension=2] ncz ndc
                        nde:f64[200,7,1,3] = slice[
                          limit_indices=(200, 7, 1, 4)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] ljj
                        ndf:f64[200,7,6] = slice[
                          limit_indices=(200, 7, 6)
                          start_indices=(0, 0, 0)
                          strides=None
                        ] ldo
                        ndg:f64[200,7,1,6] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 1, 6)
                        ] ndf
                        ndh:f64[200,7,1,3] = slice[
                          limit_indices=(200, 7, 1, 6)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] ndg
                        ndi:f64[200,7,12] = slice[
                          limit_indices=(200, 7, 18)
                          start_indices=(0, 0, 6)
                          strides=None
                        ] ldo
                        ndj:f64[200,7,12,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 12, 1)
                        ] ndi
                        ndk:f64[200,7,12,3] = mul kvj ndj
                        ndl:f64[200,7,12,1,3] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 12, 1, 3)
                        ] ndk
                        ndm:f64[200,7,12,3] = pjit[name=_take jaxpr=_take14] ndl
                          kvk
                        ndn:f64[200,7,13,3] = concatenate[dimension=2] ndh ndm
                        ndo:f64[200,7,1,3] = slice[
                          limit_indices=(200, 7, 1, 3)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] ndn
                        ndp:f64[200,7,1] = dot_general[
                          dimension_numbers=(([3], [3]), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] nde ndo
                        ndq:f64[200,7,1,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 1, 1)
                        ] ndp
                        ndr:f64[200,7,1,3] = mul ndq nde
                        nds:f64[200,7,1,3] = mul 2.0 ndr
                        ndt:f64[200,7,1,1] = slice[
                          limit_indices=(200, 7, 1, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] ljj
                        ndu:f64[200,7,1] = squeeze[dimensions=(3,)] ndt
                        ndv:f64[200,7,1] = mul ndu ndu
                        ndw:f64[200,7,1] = dot_general[
                          dimension_numbers=(([3], [3]), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] nde nde
                        ndx:f64[200,7,1] = sub ndv ndw
                        ndy:f64[200,7,1,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 1, 1)
                        ] ndx
                        ndz:f64[200,7,1,3] = mul ndy ndo
                        nea:f64[200,7,1,3] = add nds ndz
                        neb:f64[200,7,1] = mul 2.0 ndu
                        nec:f64[200,7,1,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 1, 1)
                        ] neb
                        ned:f64[200,7,1,3] nee:f64[200,7,1] nef:f64[200,7,1] neg:f64[200,7,1]
                          neh:f64[200,7,1] nei:f64[200,7,1] nej:f64[200,7,1] = pjit[
                          name=cross
                          jaxpr={ lambda ; nek:f64[200,7,1,3] nel:f64[200,7,1,3]
                              nem:i32[1] nen:i32[1] neo:i32[1] nep:i32[1] neq:i32[1]
                              ner:i32[1]. let
                              nes:f64[200,7,1] = gather[
                                dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
                                fill_value=None
                                indices_are_sorted=True
                                mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                slice_sizes=(200, 7, 1, 1)
                                unique_indices=True
                              ] nek nem
                              net:f64[200,7,1] = gather[
                                dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
                                fill_value=None
                                indices_are_sorted=True
                                mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                slice_sizes=(200, 7, 1, 1)
                                unique_indices=True
                              ] nel nen
                              neu:f64[200,7,1] = mul nes net
                              nev:f64[200,7,1] = gather[
                                dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
                                fill_value=None
                                indices_are_sorted=True
                                mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                slice_sizes=(200, 7, 1, 1)
                                unique_indices=True
                              ] nek neo
                              new:f64[200,7,1] = gather[
                                dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
                                fill_value=None
                                indices_are_sorted=True
                                mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                slice_sizes=(200, 7, 1, 1)
                                unique_indices=True
                              ] nel nep
                              nex:f64[200,7,1] = mul nev new
                              ney:f64[200,7,1] = sub neu nex
                              nez:f64[200,7,1,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1, 2)
                                shape=(200, 7, 1, 1)
                              ] ney
                              nfa:f64[200,7,1] = gather[
                                dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
                                fill_value=None
                                indices_are_sorted=True
                                mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                slice_sizes=(200, 7, 1, 1)
                                unique_indices=True
                              ] nel neq
                              nfb:f64[200,7,1] = mul nev nfa
                              nfc:f64[200,7,1] = gather[
                                dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
                                fill_value=None
                                indices_are_sorted=True
                                mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                slice_sizes=(200, 7, 1, 1)
                                unique_indices=True
                              ] nek ner
                              nfd:f64[200,7,1] = mul nfc net
                              nfe:f64[200,7,1] = sub nfb nfd
                              nff:f64[200,7,1,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1, 2)
                                shape=(200, 7, 1, 1)
                              ] nfe
                              nfg:f64[200,7,1] = mul nfc new
                              nfh:f64[200,7,1] = mul nes nfa
                              nfi:f64[200,7,1] = sub nfg nfh
                              nfj:f64[200,7,1,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1, 2)
                                shape=(200, 7, 1, 1)
                              ] nfi
                              nfk:f64[200,7,1,3] = concatenate[dimension=3] nez nff
                                nfj
                            in (nfk, net, nes, new, nev, nfa, nfc) }
                        ] nde ndo kvl kvm kvn kvo kvp kvq
                        nfl:f64[200,7,1,3] = mul nec ned
                        nfm:f64[200,7,1,3] = add nea nfl
                        nfn:f64[200,7,4,3] = pjit[name=_take jaxpr=_take15] nfm kvr
                        nfo:f64[200,7,4,3] = slice[
                          limit_indices=(200, 7, 4, 4)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] lnh
                        nfp:f64[200,7,4,3] = pjit[name=_take jaxpr=_take16] ndn kvs
                        nfq:f64[200,7,4] = dot_general[
                          dimension_numbers=(([3], [3]), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] nfo nfp
                        nfr:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] nfq
                        nfs:f64[200,7,4,3] = mul nfr nfo
                        nft:f64[200,7,4,3] = mul 2.0 nfs
                        nfu:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] lnh
                        nfv:f64[200,7,4] = squeeze[dimensions=(3,)] nfu
                        nfw:f64[200,7,4] = mul nfv nfv
                        nfx:f64[200,7,4] = dot_general[
                          dimension_numbers=(([3], [3]), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] nfo nfo
                        nfy:f64[200,7,4] = sub nfw nfx
                        nfz:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] nfy
                        nga:f64[200,7,4,3] = mul nfz nfp
                        ngb:f64[200,7,4,3] = add nft nga
                        ngc:f64[200,7,4] = mul 2.0 nfv
                        ngd:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] ngc
                        nge:f64[200,7,4,3] ngf:f64[200,7,4] ngg:f64[200,7,4] ngh:f64[200,7,4]
                          ngi:f64[200,7,4] ngj:f64[200,7,4] ngk:f64[200,7,4] = pjit[
                          name=cross
                          jaxpr=cross13
                        ] nfo nfp kvt kvu kvv kvw kvx kvy
                        ngl:f64[200,7,4,3] = mul ngd nge
                        ngm:f64[200,7,4,3] = add ngb ngl
                        ngn:f64[200,7,4,3] = add nfn ngm
                        ngo:f64[200,7,4,3] = slice[
                          limit_indices=(200, 7, 4, 4)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] lrb
                        ngp:f64[200,7,4,3] = pjit[name=_take jaxpr=_take16] ndn kvz
                        ngq:f64[200,7,4] = dot_general[
                          dimension_numbers=(([3], [3]), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] ngo ngp
                        ngr:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] ngq
                        ngs:f64[200,7,4,3] = mul ngr ngo
                        ngt:f64[200,7,4,3] = mul 2.0 ngs
                        ngu:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] lrb
                        ngv:f64[200,7,4] = squeeze[dimensions=(3,)] ngu
                        ngw:f64[200,7,4] = mul ngv ngv
                        ngx:f64[200,7,4] = dot_general[
                          dimension_numbers=(([3], [3]), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] ngo ngo
                        ngy:f64[200,7,4] = sub ngw ngx
                        ngz:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] ngy
                        nha:f64[200,7,4,3] = mul ngz ngp
                        nhb:f64[200,7,4,3] = add ngt nha
                        nhc:f64[200,7,4] = mul 2.0 ngv
                        nhd:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] nhc
                        nhe:f64[200,7,4,3] nhf:f64[200,7,4] nhg:f64[200,7,4] nhh:f64[200,7,4]
                          nhi:f64[200,7,4] nhj:f64[200,7,4] nhk:f64[200,7,4] = pjit[
                          name=cross
                          jaxpr=cross13
                        ] ngo ngp kwa kwb kwc kwd kwe kwf
                        nhl:f64[200,7,4,3] = mul nhd nhe
                        nhm:f64[200,7,4,3] = add nhb nhl
                        nhn:f64[200,7,4,3] = add ngn nhm
                        nho:f64[200,7,4,3] = slice[
                          limit_indices=(200, 7, 4, 4)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] luv
                        nhp:f64[200,7,4,3] = pjit[name=_take jaxpr=_take16] ndn kwg
                        nhq:f64[200,7,4] = dot_general[
                          dimension_numbers=(([3], [3]), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] nho nhp
                        nhr:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] nhq
                        nhs:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] luv
                        nht:f64[200,7,4] = squeeze[dimensions=(3,)] nhs
                        nhu:f64[200,7,4] = mul nht nht
                        nhv:f64[200,7,4] = dot_general[
                          dimension_numbers=(([3], [3]), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] nho nho
                        nhw:f64[200,7,4] = sub nhu nhv
                        nhx:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] nhw
                        nhy:f64[200,7,4] = mul 2.0 nht
                        nhz:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] nhy
                        nia:f64[200,7,4,3] nib:f64[200,7,4] nic:f64[200,7,4] nid:f64[200,7,4]
                          nie:f64[200,7,4] nif:f64[200,7,4] nig:f64[200,7,4] = pjit[
                          name=cross
                          jaxpr=cross13
                        ] nho nhp kwh kwi kwj kwk kwl kwm
                        nih:f64[200,7,1,3] = slice[
                          limit_indices=(200, 7, 1, 3)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] ndg
                        nii:f64[200,7,12,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 12, 1)
                        ] ndi
                        nij:f64[200,7,12,3] = mul kwn nii
                        nik:f64[200,7,12,1,3] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 12, 1, 3)
                        ] nij
                        nil:f64[200,7,12,3] = pjit[name=_take jaxpr=_take14] nik
                          kwo
                        nim:f64[200,7,13,3] = concatenate[dimension=2] nih nil
                        nin:f64[200,7,4,3] = sub mim mhm
                        nio:f64[200,7,4] nip:f64[200,7,4] niq:f64[200,7,4] nir:f64[200,7,4]
                          nis:f64[200,7,4] nit:f64[200,7,4] = pjit[
                          name=cross
                          jaxpr=cross18
                        ] nfn nin kwp kwq kwr kws kwt kwu
                        niu:f64[200,7,4,3] = slice[
                          limit_indices=(200, 7, 4, 4)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] ljk
                        niv:f64[200,7,4,3] = pjit[name=_take jaxpr=_take16] nim kwv
                        niw:f64[200,7,4] = dot_general[
                          dimension_numbers=(([3], [3]), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] niu niv
                        nix:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] niw
                        niy:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] ljk
                        niz:f64[200,7,4] = squeeze[dimensions=(3,)] niy
                        nja:f64[200,7,4] = mul niz niz
                        njb:f64[200,7,4] = dot_general[
                          dimension_numbers=(([3], [3]), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] niu niu
                        njc:f64[200,7,4] = sub nja njb
                        njd:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] njc
                        nje:f64[200,7,4] = mul 2.0 niz
                        njf:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] nje
                        njg:f64[200,7,4,3] njh:f64[200,7,4] nji:f64[200,7,4] njj:f64[200,7,4]
                          njk:f64[200,7,4] njl:f64[200,7,4] njm:f64[200,7,4] = pjit[
                          name=cross
                          jaxpr=cross13
                        ] niu niv kww kwx kwy kwz kxa kxb
                        njn:f64[200,7,4,3] = sub mjm mim
                        njo:f64[200,7,4] njp:f64[200,7,4] njq:f64[200,7,4] njr:f64[200,7,4]
                          njs:f64[200,7,4] njt:f64[200,7,4] = pjit[
                          name=cross
                          jaxpr=cross18
                        ] ngn njn kxc kxd kxe kxf kxg kxh
                        nju:f64[200,7,4,3] = slice[
                          limit_indices=(200, 7, 4, 4)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] lnh
                        njv:f64[200,7,4,3] = pjit[name=_take jaxpr=_take16] nim kxi
                        njw:f64[200,7,4] = dot_general[
                          dimension_numbers=(([3], [3]), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] nju njv
                        njx:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] njw
                        njy:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] lnh
                        njz:f64[200,7,4] = squeeze[dimensions=(3,)] njy
                        nka:f64[200,7,4] = mul njz njz
                        nkb:f64[200,7,4] = dot_general[
                          dimension_numbers=(([3], [3]), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] nju nju
                        nkc:f64[200,7,4] = sub nka nkb
                        nkd:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] nkc
                        nke:f64[200,7,4] = mul 2.0 njz
                        nkf:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] nke
                        nkg:f64[200,7,4,3] nkh:f64[200,7,4] nki:f64[200,7,4] nkj:f64[200,7,4]
                          nkk:f64[200,7,4] nkl:f64[200,7,4] nkm:f64[200,7,4] = pjit[
                          name=cross
                          jaxpr=cross13
                        ] nju njv kxj kxk kxl kxm kxn kxo
                        nkn:f64[200,7,4,3] = sub mkm mjm
                        nko:f64[200,7,4] nkp:f64[200,7,4] nkq:f64[200,7,4] nkr:f64[200,7,4]
                          nks:f64[200,7,4] nkt:f64[200,7,4] = pjit[
                          name=cross
                          jaxpr=cross18
                        ] nhn nkn kxp kxq kxr kxs kxt kxu
                        nku:f64[200,7,4,3] = slice[
                          limit_indices=(200, 7, 4, 4)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] lrb
                        nkv:f64[200,7,4,3] = pjit[name=_take jaxpr=_take16] nim kxv
                        nkw:f64[200,7,4] = dot_general[
                          dimension_numbers=(([3], [3]), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] nku nkv
                        nkx:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] nkw
                        nky:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] lrb
                        nkz:f64[200,7,4] = squeeze[dimensions=(3,)] nky
                        nla:f64[200,7,4] = mul nkz nkz
                        nlb:f64[200,7,4] = dot_general[
                          dimension_numbers=(([3], [3]), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] nku nku
                        nlc:f64[200,7,4] = sub nla nlb
                        nld:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] nlc
                        nle:f64[200,7,4] = mul 2.0 nkz
                        nlf:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] nle
                        nlg:f64[200,7,4,3] nlh:f64[200,7,4] nli:f64[200,7,4] nlj:f64[200,7,4]
                          nlk:f64[200,7,4] nll:f64[200,7,4] nlm:f64[200,7,4] = pjit[
                          name=cross
                          jaxpr=cross13
                        ] nku nkv kxw kxx kxy kxz kya kyb
                        nln:f64[200,7,18,3] = mul kyc mnw
                        nlo:f64[200,7,1,3] = slice[
                          limit_indices=(200, 7, 1, 3)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] mrx
                        nlp:f64[200,7,4,3] = pjit[name=_take jaxpr=_take16] mrx kyf
                        nlq:f64[200,7,4,3] = pjit[name=_take jaxpr=_take16] mrx kyi
                        nlr:f64[200,7,4,3] = pjit[name=_take jaxpr=_take16] mrx kyl
                        nls:f64[200,7,4,3] = scatter-add[
                          dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          unique_indices=False
                          update_consts=()
                          update_jaxpr=jaxpr
                        ] kyj kyk nlr
                        nlt:f64[200,7,4,3] = add nlq nls
                        nlu:f64[200,7,4,3] = scatter-add[
                          dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          unique_indices=False
                          update_consts=()
                          update_jaxpr=jaxpr
                        ] kyg kyh nlt
                        nlv:f64[200,7,4,3] = add nlp nlu
                        nlw:f64[200,7,1,3] = scatter-add[
                          dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          unique_indices=False
                          update_consts=()
                          update_jaxpr=jaxpr
                        ] kyd kye nlv
                        nlx:f64[200,7,1,3] = add nlo nlw
                        nly:f64[200,7,13,3] = concatenate[dimension=2] nlx nlv nlt
                          nlr
                        nlz:f64[200,7,13,3] = pjit[name=_take jaxpr=_take17] nly
                          kym
                        nma:f64[200,7,18,3] = pjit[
                          name=_take
                          jaxpr={ lambda ; nmb:f64[200,7,13,3] nmc:i64[18,1]. let
                              nmd:f64[200,7,18,3] = gather[
                                dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 3), collapsed_slice_dims=(2,), start_index_map=(2,))
                                fill_value=None
                                indices_are_sorted=False
                                mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                slice_sizes=(200, 7, 1, 3)
                                unique_indices=False
                              ] nmb nmc
                            in (nmd,) }
                        ] nlz kyn
                        nme:f64[200,7,18,3] nmf:f64[200,7,18] nmg:f64[200,7,18] nmh:f64[200,7,18]
                          nmi:f64[200,7,18] nmj:f64[200,7,18] nmk:f64[200,7,18] = pjit[
                          name=cross
                          jaxpr=cross14
                        ] nma mer kyo kyp kyq kyr kys kyt
                        nml:f64[200,7,18,3] = sub nln nme
                        nmm:f64[200,7,18,18] = dot_general[
                          dimension_numbers=(([3], [3]), ([0, 1], [0, 1]))
                          preferred_element_type=float64
                        ] mnw nml
                        nmn:f64[200,7,1,3,3] = slice[
                          limit_indices=(200, 7, 1, 3, 3)
                          start_indices=(0, 0, 0, 0, 0)
                          strides=None
                        ] nax
                        nmo:f64[200,7,4,3,3] = pjit[name=_take jaxpr=_take22] nax
                          kyw
                        nmp:f64[200,7,4,3,3] = pjit[name=_take jaxpr=_take22] nax
                          kyz
                        nmq:f64[200,7,4,3,3] = pjit[name=_take jaxpr=_take22] nax
                          kzc
                        nmr:f64[200,7,4,3,3] = scatter-add[
                          dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3, 4), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          unique_indices=False
                          update_consts=()
                          update_jaxpr=jaxpr
                        ] kza kzb nmq
                        nms:f64[200,7,4,3,3] = add nmp nmr
                        nmt:f64[200,7,4,3,3] = scatter-add[
                          dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3, 4), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          unique_indices=False
                          update_consts=()
                          update_jaxpr=jaxpr
                        ] kyx kyy nms
                        nmu:f64[200,7,4,3,3] = add nmo nmt
                        nmv:f64[200,7,1,3,3] = scatter-add[
                          dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3, 4), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          unique_indices=False
                          update_consts=()
                          update_jaxpr=jaxpr
                        ] kyu kyv nmu
                        nmw:f64[200,7,1,3,3] = add nmn nmv
                        nmx:f64[200,7,13,3,3] = concatenate[dimension=2] nmw nmu
                          nms nmq
                        nmy:f64[200,7,13,3,3] = pjit[
                          name=_take
                          jaxpr={ lambda ; nmz:f64[200,7,13,3,3] nna:i64[13,1]. let
                              nnb:f64[200,7,13,3,3] = gather[
                                dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 3, 4), collapsed_slice_dims=(2,), start_index_map=(2,))
                                fill_value=None
                                indices_are_sorted=False
                                mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                slice_sizes=(200, 7, 1, 3, 3)
                                unique_indices=False
                              ] nmz nna
                            in (nnb,) }
                        ] nmx kzd
                        nnc:f64[200,7,18,3,3] = pjit[
                          name=_take
                          jaxpr={ lambda ; nnd:f64[200,7,13,3,3] nne:i64[18,1]. let
                              nnf:f64[200,7,18,3,3] = gather[
                                dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 3, 4), collapsed_slice_dims=(2,), start_index_map=(2,))
                                fill_value=None
                                indices_are_sorted=False
                                mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                slice_sizes=(200, 7, 1, 3, 3)
                                unique_indices=False
                              ] nnd nne
                            in (nnf,) }
                        ] nmy kze
                        nng:f64[200,7,18,3] = dot_general[
                          dimension_numbers=(([4], [3]), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] nnc mer
                        nnh:f64[200,7,18,3] nni:f64[200,7,18] nnj:f64[200,7,18] nnk:f64[200,7,18]
                          nnl:f64[200,7,18] nnm:f64[200,7,18] nnn:f64[200,7,18] = pjit[
                          name=cross
                          jaxpr=cross14
                        ] nma mnw kzf kzg kzh kzi kzj kzk
                        nno:f64[200,7,18,3] = add nng nnh
                        nnp:f64[200,7,18,18] = dot_general[
                          dimension_numbers=(([3], [3]), ([0, 1], [0, 1]))
                          preferred_element_type=float64
                        ] mer nno
                        nnq:f64[200,7,18,18] = add nmm nnp
                        nnr:f64[200,7,18,18] = transpose[
                          permutation=(0, 1, 3, 2)
                        ] nnq
                        nns:f64[200,7,18,18] = mul nnr kzl
                        nnt:f64[200,7,18,18] = pjit[
                          name=tril
                          jaxpr={ lambda ; nnu:f64[200,7,18,18] nnv:bool[200,7,18,18]
                              nnw:f64[200,7,18,18]. let
                              nnx:f64[200,7,18,18] = select_n nnv nnw nnu
                            in (nnx,) }
                        ] nns kzm kzn
                        nny:f64[200,7,18,18] = pjit[
                          name=tril
                          jaxpr={ lambda ; nnz:f64[200,7,18,18] noa:bool[200,7,18,18]
                              nob:f64[200,7,18,18]. let
                              noc:f64[200,7,18,18] = select_n noa nob nnz
                            in (noc,) }
                        ] nns kzo kzp
                        nod:f64[200,7,18,18] = transpose[
                          permutation=(0, 1, 3, 2)
                        ] nny
                        noe:f64[200,7,18,18] = add nnt nod
                        nof:f64[200,7,18,18] = add noe kzq
                        nog:f64[200,7,18,18] noh:f64[200,7,18,18] = pjit[
                          name=_solve
                          jaxpr={ lambda ; noi:f64[200,7,18,18] noj:bool[200,7,18,18]
                              nok:f64[200,7,18,18] nol:bool[200,7,18,18] nom:f64[200,7,18,18]
                              non:bool[200,7,18,18] noo:f64[200,7,18,18] nop:f64[200,7,18,18]. let
                              noq:f64[200,7,18,18] = stop_gradient noi
                              nor:f64[200,7,18,18] = pjit[
                                name=_cholesky
                                jaxpr={ lambda ; nos:f64[200,7,18,18] not:bool[200,7,18,18]
                                    nou:f64[200,7,18,18] nov:bool[200,7,18,18] now:f64[200,7,18,18]
                                    nox:bool[200,7,18,18] noy:f64[200,7,18,18]. let
                                    noz:f64[200,7,18,18] = transpose[
                                      permutation=(0, 1, 3, 2)
                                    ] nos
                                    npa:f64[200,7,18,18] = transpose[
                                      permutation=(0, 1, 3, 2)
                                    ] noz
                                    npb:f64[200,7,18,18] = add noz npa
                                    npc:f64[200,7,18,18] = div npb 2.0
                                    npd:f64[200,7,18,18] = transpose[
                                      permutation=(0, 1, 3, 2)
                                    ] npc
                                    npe:f64[200,7,18,18] = add npc npd
                                    npf:f64[200,7,18,18] = div npe 2.0
                                    npg:f64[200,7,18,18] = cholesky npf
                                    nph:f64[200,7,18,18] = pjit[
                                      name=tril
                                      jaxpr={ lambda ; npi:f64[200,7,18,18] npj:bool[200,7,18,18]
                                          npk:f64[200,7,18,18]. let
                                          npl:f64[200,7,18,18] = select_n npj npk
                                            npi
                                        in (npl,) }
                                    ] npg not nou
                                    npm:f64[200,7,18,18] = pjit[
                                      name=tril
                                      jaxpr={ lambda ; npn:f64[200,7,18,18] npo:bool[200,7,18,18]
                                          npp:f64[200,7,18,18]. let
                                          npq:f64[200,7,18,18] = select_n npo npp
                                            npn
                                        in (npq,) }
                                    ] nph nov now
                                    npr:f64[200,7,18,18] = pjit[
                                      name=tril
                                      jaxpr={ lambda ; nps:f64[200,7,18,18] npt:bool[200,7,18,18]
                                          npu:f64[200,7,18,18]. let
                                          npv:f64[200,7,18,18] = select_n npt npu
                                            nps
                                        in (npv,) }
                                    ] npm nox noy
                                    npw:f64[200,7,18,18] = transpose[
                                      permutation=(0, 1, 3, 2)
                                    ] npr
                                  in (npw,) }
                              ] noq noj nok nol nom non noo
                              npx:f64[200,7,18,18] = custom_linear_solve[
                                const_lengths=_LinearSolveTuple(matvec=1, vecmat=1, solve=1, transpose_solve=1)
                                jaxprs=_LinearSolveTuple(matvec={ lambda ; a:f64[200,7,18,18] b:f64[200,7,18,18]. let
    c:f64[200,7,18,18] = dot_general[
      dimension_numbers=(([3], [3]), ([0, 1], [0, 1]))
      precision=(Precision.HIGHEST, Precision.HIGHEST)
    ] a b
    d:f64[200,7,18,18] = transpose[permutation=(0, 1, 3, 2)] c
  in (d,) }, vecmat={ lambda ; a:f64[200,7,18,18] b:f64[200,7,18,18]. let
    c:f64[200,7,18,18] = dot_general[
      dimension_numbers=(([3], [3]), ([0, 1], [0, 1]))
      precision=(Precision.HIGHEST, Precision.HIGHEST)
    ] a b
    d:f64[200,7,18,18] = transpose[permutation=(0, 1, 3, 2)] c
  in (d,) }, solve={ lambda ; a:f64[200,7,18,18] b:f64[200,7,18,18]. let
    c:f64[200,7,18,18] = pjit[
      name=_cho_solve
      jaxpr={ lambda ; d:f64[200,7,18,18] e:f64[200,7,18,18]. let
          f:f64[200,7,18,18,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2, 3)
            shape=(200, 7, 18, 18, 1)
          ] e
          g:f64[200,7,18,1,18] = transpose[permutation=(0, 1, 3, 4, 2)] f
          h:f64[200,7,18,18] = reshape[
            dimensions=None
            new_sizes=(200, 7, 18, 18)
          ] g
          i:f64[200,7,18,18] = triangular_solve[
            conjugate_a=False
            left_side=True
            lower=False
            transpose_a=True
            unit_diagonal=False
          ] d h
          j:f64[200,7,18,1,18] = reshape[
            dimensions=None
            new_sizes=(200, 7, 18, 1, 18)
          ] i
          k:f64[200,7,18,1,18] = slice[
            limit_indices=(200, 7, 18, 1, 18)
            start_indices=(0, 0, 0, 0, 0)
            strides=None
          ] j
          l:f64[200,7,18,18,1] = transpose[permutation=(0, 1, 4, 2, 3)] k
          m:f64[200,7,18,18] = squeeze[dimensions=(4,)] l
          n:f64[200,7,18,18,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2, 3)
            shape=(200, 7, 18, 18, 1)
          ] m
          o:f64[200,7,18,1,18] = transpose[permutation=(0, 1, 3, 4, 2)] n
          p:f64[200,7,18,18] = reshape[
            dimensions=None
            new_sizes=(200, 7, 18, 18)
          ] o
          q:f64[200,7,18,18] = triangular_solve[
            conjugate_a=False
            left_side=True
            lower=False
            transpose_a=False
            unit_diagonal=False
          ] d p
          r:f64[200,7,18,1,18] = reshape[
            dimensions=None
            new_sizes=(200, 7, 18, 1, 18)
          ] q
          s:f64[200,7,18,1,18] = slice[
            limit_indices=(200, 7, 18, 1, 18)
            start_indices=(0, 0, 0, 0, 0)
            strides=None
          ] r
          t:f64[200,7,18,18,1] = transpose[permutation=(0, 1, 4, 2, 3)] s
          u:f64[200,7,18,18] = squeeze[dimensions=(4,)] t
        in (u,) }
    ] a b
  in (c,) }, transpose_solve={ lambda ; a:f64[200,7,18,18] b:f64[200,7,18,18]. let
    c:f64[200,7,18,18] = pjit[
      name=_cho_solve
      jaxpr={ lambda ; d:f64[200,7,18,18] e:f64[200,7,18,18]. let
          f:f64[200,7,18,18,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2, 3)
            shape=(200, 7, 18, 18, 1)
          ] e
          g:f64[200,7,18,1,18] = transpose[permutation=(0, 1, 3, 4, 2)] f
          h:f64[200,7,18,18] = reshape[
            dimensions=None
            new_sizes=(200, 7, 18, 18)
          ] g
          i:f64[200,7,18,18] = triangular_solve[
            conjugate_a=False
            left_side=True
            lower=False
            transpose_a=True
            unit_diagonal=False
          ] d h
          j:f64[200,7,18,1,18] = reshape[
            dimensions=None
            new_sizes=(200, 7, 18, 1, 18)
          ] i
          k:f64[200,7,18,1,18] = slice[
            limit_indices=(200, 7, 18, 1, 18)
            start_indices=(0, 0, 0, 0, 0)
            strides=None
          ] j
          l:f64[200,7,18,18,1] = transpose[permutation=(0, 1, 4, 2, 3)] k
          m:f64[200,7,18,18] = squeeze[dimensions=(4,)] l
          n:f64[200,7,18,18,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2, 3)
            shape=(200, 7, 18, 18, 1)
          ] m
          o:f64[200,7,18,1,18] = transpose[permutation=(0, 1, 3, 4, 2)] n
          p:f64[200,7,18,18] = reshape[
            dimensions=None
            new_sizes=(200, 7, 18, 18)
          ] o
          q:f64[200,7,18,18] = triangular_solve[
            conjugate_a=False
            left_side=True
            lower=False
            transpose_a=False
            unit_diagonal=False
          ] d p
          r:f64[200,7,18,1,18] = reshape[
            dimensions=None
            new_sizes=(200, 7, 18, 1, 18)
          ] q
          s:f64[200,7,18,1,18] = slice[
            limit_indices=(200, 7, 18, 1, 18)
            start_indices=(0, 0, 0, 0, 0)
            strides=None
          ] r
          t:f64[200,7,18,18,1] = transpose[permutation=(0, 1, 4, 2, 3)] s
          u:f64[200,7,18,18] = squeeze[dimensions=(4,)] t
        in (u,) }
    ] a b
  in (c,) })
                              ] noi noi nor nor nop
                            in (nor, npx) }
                        ] nof kzr kzs kzt kzu kzv kzw kzx
                        npy:f64[200,7,19] npz:f64[200,7,18] _:f64[200,7,18,18] nqa:f64[4,200,7,18,18]
                          nqb:f64[4,200,7,18,18] nqc:f64[4,200,7,18,18] nqd:f64[4,200,7,18]
                          nqe:f64[4,200,7,18,18] nqf:f64[4,200,7,12] nqg:bool[4,200,7,12]
                          nqh:f64[4,200,7,12] nqi:f64[4,200,7,12] nqj:f64[4,200,7,12]
                          nqk:f64[4,200,7,12] nql:bool[4,200,7,12] nqm:bool[4,200,7,12]
                          nqn:bool[4,200,7,3] nqo:bool[4,200,7] nqp:f64[4,200,7,3]
                          nqq:f64[4,200,7,3] nqr:f64[4,200,7,1] nqs:f64[4,200,7]
                          nqt:f64[4,200,7,1] nqu:f64[4,200,7,3] nqv:f64[4,200,7,1]
                          nqw:f64[4,200,7] nqx:f64[4,200,7] nqy:f64[4,200,7] nqz:f64[4,200,7]
                          nra:f64[4,200,7] nrb:f64[4,200,7] nrc:f64[4,200,7,3] nrd:f64[4,200,7,3]
                          nre:f64[4,200,7,1] nrf:f64[4,200,7] nrg:f64[4,200,7,1]
                          nrh:f64[4,200,7,3] nri:f64[4,200,7,1] nrj:f64[4,200,7]
                          nrk:f64[4,200,7] nrl:f64[4,200,7] nrm:f64[4,200,7] nrn:f64[4,200,7]
                          nro:f64[4,200,7] nrp:f64[4,200,7] nrq:f64[4,200,7] nrr:f64[4,200,7]
                          nrs:bool[4,200,7] nrt:f64[4,200,7] nru:f64[4,200,7] nrv:f64[4,200,7]
                          nrw:f64[4,200,7] nrx:f64[4,200,7] nry:bool[4,200,7,3] nrz:bool[4,200,7]
                          nsa:bool[4,200,7] nsb:f64[4,200,7] nsc:f64[4,200,7] nsd:f64[4,200,7]
                          nse:f64[4,200,7] nsf:f64[4,200,7] nsg:bool[4,200,7,3] nsh:bool[4,200,7]
                          nsi:bool[4,200,7] nsj:f64[4,200,7] nsk:f64[4,200,7] nsl:f64[4,200,7]
                          nsm:f64[4,200,7] nsn:f64[4,200,7] nso:bool[4,200,7,3] nsp:bool[4,200,7]
                          nsq:bool[4,200,7] nsr:f64[4,200,7] nss:f64[4,200,7] nst:f64[4,200,7]
                          nsu:f64[4,200,7] nsv:f64[4,200,7] nsw:f64[4,200,7] nsx:f64[4,200,7]
                          nsy:f64[4,200,7] nsz:f64[4,200,7] nta:f64[4,200,7] ntb:f64[4,200,7]
                          ntc:f64[4,200,7] ntd:f64[4,200,7] nte:f64[4,200,7] ntf:f64[4,200,7]
                          ntg:f64[4,200,7] nth:f64[4,200,7] nti:f64[4,200,7] ntj:f64[4,200,7]
                          ntk:f64[4,200,7] ntl:f64[4,200,7] ntm:f64[4,200,7] ntn:f64[4,200,7]
                          nto:f64[4,200,7] ntp:f64[4,200,7] ntq:f64[4,200,7] ntr:f64[4,200,7]
                          nts:f64[4,200,7] ntt:f64[4,200,7] ntu:f64[4,200,7] ntv:f64[4,200,7]
                          ntw:f64[4,200,7] ntx:f64[4,200,7] nty:f64[4,200,7] ntz:f64[4,200,7]
                          nua:f64[4,200,7] nub:f64[4,200,7] nuc:f64[4,200,7] nud:f64[4,200,7]
                          nue:f64[4,200,7] nuf:f64[4,200,7] nug:f64[4,200,7] nuh:f64[4,200,7]
                          nui:f64[4,200,7] nuj:f64[4,200,7] nuk:f64[4,200,7] nul:f64[4,200,7]
                          num:f64[4,200,7] nun:f64[4,200,7] nuo:f64[4,200,7] nup:f64[4,200,7]
                          nuq:f64[4,200,7] nur:f64[4,200,7] nus:f64[4,200,7] nut:f64[4,200,7]
                          nuu:f64[4,200,7] nuv:f64[4,200,7] nuw:f64[4,200,7] nux:f64[4,200,7]
                          nuy:f64[4,200,7] nuz:f64[4,200,7] nva:f64[4,200,7] nvb:f64[4,200,7]
                          nvc:f64[4,200,7] nvd:f64[4,200,7] nve:f64[4,200,7] nvf:f64[4,200,7]
                          nvg:f64[4,200,7] nvh:f64[4,200,7] nvi:f64[4,200,7] nvj:f64[4,200,7]
                          nvk:f64[4,200,7] nvl:f64[4,200,7] nvm:f64[4,200,7] nvn:f64[4,200,7]
                          nvo:f64[4,200,7] nvp:f64[4,200,7] nvq:f64[4,200,7] nvr:f64[4,200,7]
                          nvs:f64[4,200,7] nvt:f64[4,200,7] nvu:f64[4,200,7] nvv:f64[4,200,7]
                          nvw:f64[4,200,7] nvx:f64[4,200,7] nvy:f64[4,200,7] nvz:f64[4,200,7]
                          nwa:f64[4,200,7] nwb:f64[4,200,7] nwc:f64[4,200,7] nwd:f64[4,200,7]
                          nwe:f64[4,200,7] nwf:f64[4,200,7] nwg:f64[4,200,7] nwh:f64[4,200,7]
                          nwi:f64[4,200,7] nwj:f64[4,200,7] nwk:f64[4,200,7] nwl:f64[4,200,7]
                          nwm:f64[4,200,7] nwn:f64[4,200,7] nwo:f64[4,200,7] nwp:f64[4,200,7]
                          nwq:f64[4,200,7] nwr:f64[4,200,7] nws:f64[4,200,7] nwt:f64[4,200,7]
                          nwu:f64[4,200,7] nwv:f64[4,200,7] nww:f64[4,200,7] nwx:f64[4,200,7]
                          nwy:f64[4,200,7] nwz:f64[4,200,7] nxa:f64[4,200,7] nxb:f64[4,200,7]
                          nxc:f64[4,200,7] nxd:f64[4,200,7] nxe:f64[4,200,7] nxf:f64[4,200,7]
                          nxg:f64[4,200,7] nxh:f64[4,200,7] nxi:f64[4,200,7] nxj:f64[4,200,7]
                          nxk:f64[4,200,7] nxl:f64[4,200,7] nxm:f64[4,200,7] nxn:f64[4,200,7]
                          nxo:f64[4,200,7] nxp:f64[4,200,7] nxq:f64[4,200,7] nxr:f64[4,200,7]
                          nxs:f64[4,200,7] nxt:f64[4,200,7] nxu:f64[4,200,7,12] nxv:f64[4,200,7,12]
                          nxw:f64[4,200,7,12] nxx:f64[4,200,7,12] nxy:f64[4,200,7,12]
                          nxz:f64[4,200,7,12] nya:f64[4,200,7,12] nyb:f64[4,200,7,12]
                          nyc:f64[4,200,7,1] nyd:f64[4,200,7,1] nye:f64[4,200,7,1,3]
                          nyf:f64[4,200,7,1] nyg:f64[4,200,7,1] nyh:f64[4,200,7,1,1]
                          nyi:f64[4,200,7,1,1] nyj:f64[4,200,7,1] nyk:f64[4,200,7,1]
                          nyl:f64[4,200,7,1] nym:f64[4,200,7,1] nyn:f64[4,200,7,1]
                          nyo:f64[4,200,7,1] nyp:f64[4,200,7,1] nyq:f64[4,200,7,1]
                          nyr:f64[4,200,7,1] nys:f64[4,200,7,1] nyt:f64[4,200,7,1]
                          nyu:f64[4,200,7,1] nyv:f64[4,200,7,1] nyw:f64[4,200,7,1]
                          nyx:f64[4,200,7,1] nyy:f64[4,200,7,1] nyz:f64[4,200,7,1]
                          nza:f64[4,200,7,1] nzb:f64[4,200,7,1] nzc:f64[4,200,7,1]
                          nzd:f64[4,200,7,1] nze:f64[4,200,7,1] nzf:f64[4,200,7,1]
                          nzg:f64[4,200,7,1] nzh:f64[4,200,7,1] nzi:f64[4,200,7,1]
                          nzj:f64[4,200,7,1] nzk:f64[4,200,7,1] nzl:f64[4,200,7,1]
                          nzm:f64[4,200,7,1] nzn:f64[4,200,7,1] nzo:f64[4,200,7,1]
                          nzp:f64[4,200,7,1] nzq:f64[4,200,7,1] nzr:f64[4,200,7,1]
                          nzs:f64[4,200,7,1] nzt:f64[4,200,7,1] nzu:f64[4,200,7,1]
                          nzv:f64[4,200,7,1] nzw:f64[4,200,7,1,1] nzx:f64[4,200,7,1,4]
                          nzy:f64[4,200,7,1] nzz:f64[4,200,7,1,1] = scan[
                          _split_transpose=False
                          jaxpr={ lambda ; oaa:f64[1,1,18,18] oab:bool[200,7,18,18]
                              oac:f64[200,7,18,18] oad:bool[200,7,18,18] oae:f64[200,7,18,18]
                              oaf:bool[200,7,18,18] oag:f64[200,7,18,18] oah:f64[200,7,18,18]
                              oai:f64[200,7,18] oaj:i32[12,1] oak:f64[1,1,12] oal:f64[200,7,12]
                              oam:f64[200,7,12] oan:bool[200,7,12] oao:f64[200,7,12]
                              oap:f64[200,7,12] oaq:f64[200,7,12] oar:f64[200,7,12]
                              oas:bool[200,7,12] oat:bool[200,7,12] oau:f64[1,1,12]
                              oav:f64[1,1,12] oaw:f64[1,1,12] oax:f64[1,1,12] oay:f64[1,1,12]
                              oaz:f64[1,1,12] oba:f64[1,1,12] obb:f64[1,1,12] obc:f64[1,1,12]
                              obd:f64[1,1,12] obe:f64[1,1,12] obf:f64[1,1,3] obg:f64[1,1,4]
                              obh:i32[1] obi:i32[1] obj:i32[1] obk:i32[1] obl:i32[1]
                              obm:i32[1] obn:i32[1] obo:i32[1] obp:i32[1] obq:i32[1]
                              obr:i32[1] obs:i32[1] obt:f64[1,1,36] obu:f64[1,1,36]
                              obv:f64[1,1,36] obw:f64[1,1,36] obx:f64[] oby:f64[]
                              obz:bool[] oca:bool[200,7] ocb:bool[200,7] occ:f64[]
                              ocd:f64[] oce:f64[] ocf:f64[] ocg:f64[] och:f64[] oci:f64[]
                              ocj:f64[] ock:f64[200,7,1] ocl:f64[1,1,3] ocm:f64[]
                              ocn:f64[] oco:bool[] ocp:bool[200,7] ocq:bool[200,7]
                              ocr:f64[] ocs:f64[] oct:f64[] ocu:f64[] ocv:f64[] ocw:f64[]
                              ocx:f64[] ocy:f64[] ocz:f64[200,7,1] oda:f64[1,1,3]
                              odb:f64[] odc:f64[] odd:bool[] ode:bool[200,7] odf:bool[200,7]
                              odg:f64[] odh:f64[] odi:f64[] odj:f64[] odk:f64[] odl:f64[]
                              odm:f64[] odn:f64[] odo:f64[200,7,1] odp:f64[1,1,3]
                              odq:f64[] odr:f64[] ods:bool[] odt:bool[200,7] odu:bool[200,7]
                              odv:f64[] odw:f64[] odx:f64[] ody:f64[] odz:f64[] oea:f64[]
                              oeb:f64[] oec:f64[] oed:f64[200,7,1] oee:f64[] oef:f64[]
                              oeg:f64[] oeh:f64[] oei:f64[] oej:f64[] oek:f64[] oel:f64[200,7]
                              oem:f64[200,7] oen:f64[200,7] oeo:f64[200,7] oep:f64[]
                              oeq:f64[200,7] oer:f64[200,7] oes:f64[200,7] oet:f64[200,7]
                              oeu:f64[] oev:f64[] oew:f64[] oex:f64[] oey:f64[] oez:f64[]
                              ofa:f64[] ofb:f64[200,7] ofc:f64[200,7] ofd:f64[200,7]
                              ofe:f64[200,7] off:f64[] ofg:f64[200,7] ofh:f64[200,7]
                              ofi:f64[200,7] ofj:f64[200,7] ofk:f64[] ofl:f64[] ofm:f64[]
                              ofn:f64[] ofo:f64[] ofp:f64[] ofq:f64[] ofr:f64[200,7]
                              ofs:f64[200,7] oft:f64[200,7] ofu:f64[200,7] ofv:f64[]
                              ofw:f64[200,7] ofx:f64[200,7] ofy:f64[200,7] ofz:f64[200,7]
                              oga:f64[] ogb:f64[] ogc:f64[] ogd:f64[] oge:f64[] ogf:f64[]
                              ogg:f64[] ogh:f64[200,7] ogi:f64[200,7] ogj:f64[200,7]
                              ogk:f64[200,7] ogl:f64[] ogm:f64[200,7] ogn:f64[200,7]
                              ogo:f64[200,7] ogp:f64[200,7] ogq:f64[1,1,12] ogr:f64[200,7,12]
                              ogs:f64[200,7,12] ogt:f64[200,7,12] ogu:f64[200,7,12]
                              ogv:f64[1,1,12] ogw:f64[200,7,12] ogx:f64[200,7,12]
                              ogy:f64[200,7,12] ogz:f64[200,7,12] oha:f64[1,1,12]
                              ohb:f64[1,1,12] ohc:f64[1,1,12] ohd:f64[200,7,12] ohe:f64[200,7,12]
                              ohf:f64[200,7,12] ohg:f64[200,7,12] ohh:f64[1,1,12]
                              ohi:f64[200,7,12] ohj:f64[200,7,12] ohk:f64[200,7,12]
                              ohl:f64[200,7,12] ohm:f64[1,1,12] ohn:i32[12,1] oho:f64[1,1,12]
                              ohp:i32[12,1] ohq:f64[1,1,12] ohr:f64[1,1,12] ohs:f64[200,7,12]
                              oht:f64[200,7,12] ohu:f64[200,7,12] ohv:f64[200,7,12]
                              ohw:f64[1,1,12] ohx:f64[200,7,12] ohy:f64[200,7,12]
                              ohz:f64[200,7,12] oia:f64[200,7,12] oib:f64[1,1,12]
                              oic:f64[200,7,12] oid:f64[200,7,12] oie:f64[200,7,18]
                              oif:f64[200,7,2] oig:f64[200,7,19] oih:f64[200,7,18]
                              oii:f64[200,7,18,18] oij:f64[200,7,18]. let
                              oik:f64[200,7,7] = slice[
                                limit_indices=(200, 7, 7)
                                start_indices=(0, 0, 0)
                                strides=None
                              ] oig
                              oil:f64[200,7,1,7] = reshape[
                                dimensions=None
                                new_sizes=(200, 7, 1, 7)
                              ] oik
                              oim:f64[200,7,1,3] = slice[
                                limit_indices=(200, 7, 1, 3)
                                start_indices=(0, 0, 0, 0)
                                strides=None
                              ] oil
                              oin:f64[200,7,18,18] = add oii oaa
                              oio:f64[200,7,18,18] oip:f64[200,7,18,18] oiq:f64[200,7,18,18] = pjit[
                                name=_solve
                                jaxpr={ lambda ; oir:f64[200,7,18,18] ois:bool[200,7,18,18]
                                    oit:f64[200,7,18,18] oiu:bool[200,7,18,18] oiv:f64[200,7,18,18]
                                    oiw:bool[200,7,18,18] oix:f64[200,7,18,18] oiy:f64[200,7,18,18]. let
                                    oiz:f64[200,7,18,18] = stop_gradient oir
                                    oja:f64[200,7,18,18] = pjit[
                                      name=_cholesky
                                      jaxpr={ lambda ; ojb:f64[200,7,18,18] ojc:bool[200,7,18,18]
                                          ojd:f64[200,7,18,18] oje:bool[200,7,18,18]
                                          ojf:f64[200,7,18,18] ojg:bool[200,7,18,18]
                                          ojh:f64[200,7,18,18]. let
                                          oji:f64[200,7,18,18] = transpose[
                                            permutation=(0, 1, 3, 2)
                                          ] ojb
                                          ojj:f64[200,7,18,18] = transpose[
                                            permutation=(0, 1, 3, 2)
                                          ] oji
                                          ojk:f64[200,7,18,18] = add oji ojj
                                          ojl:f64[200,7,18,18] = div ojk 2.0
                                          ojm:f64[200,7,18,18] = transpose[
                                            permutation=(0, 1, 3, 2)
                                          ] ojl
                                          ojn:f64[200,7,18,18] = add ojl ojm
                                          ojo:f64[200,7,18,18] = div ojn 2.0
                                          ojp:f64[200,7,18,18] = cholesky ojo
                                          ojq:f64[200,7,18,18] = pjit[
                                            name=tril
                                            jaxpr={ lambda ; ojr:f64[200,7,18,18]
                                                ojs:bool[200,7,18,18] ojt:f64[200,7,18,18]. let
                                                oju:f64[200,7,18,18] = select_n ojs
                                                  ojt ojr
                                              in (oju,) }
                                          ] ojp ojc ojd
                                          ojv:f64[200,7,18,18] = pjit[
                                            name=tril
                                            jaxpr={ lambda ; ojw:f64[200,7,18,18]
                                                ojx:bool[200,7,18,18] ojy:f64[200,7,18,18]. let
                                                ojz:f64[200,7,18,18] = select_n ojx
                                                  ojy ojw
                                              in (ojz,) }
                                          ] ojq oje ojf
                                          oka:f64[200,7,18,18] = pjit[
                                            name=tril
                                            jaxpr={ lambda ; okb:f64[200,7,18,18]
                                                okc:bool[200,7,18,18] okd:f64[200,7,18,18]. let
                                                oke:f64[200,7,18,18] = select_n okc
                                                  okd okb
                                              in (oke,) }
                                          ] ojv ojg ojh
                                          okf:f64[200,7,18,18] = transpose[
                                            permutation=(0, 1, 3, 2)
                                          ] oka
                                        in (okf,) }
                                    ] oiz ois oit oiu oiv oiw oix
                                    okg:f64[200,7,18,18] = custom_linear_solve[
                                      const_lengths=_LinearSolveTuple(matvec=1, vecmat=1, solve=1, transpose_solve=1)
                                      jaxprs=_LinearSolveTuple(matvec={ lambda ; a:f64[200,7,18,18] b:f64[200,7,18,18]. let
    c:f64[200,7,18,18] = dot_general[
      dimension_numbers=(([3], [3]), ([0, 1], [0, 1]))
      precision=(Precision.HIGHEST, Precision.HIGHEST)
    ] a b
    d:f64[200,7,18,18] = transpose[permutation=(0, 1, 3, 2)] c
  in (d,) }, vecmat={ lambda ; a:f64[200,7,18,18] b:f64[200,7,18,18]. let
    c:f64[200,7,18,18] = dot_general[
      dimension_numbers=(([3], [3]), ([0, 1], [0, 1]))
      precision=(Precision.HIGHEST, Precision.HIGHEST)
    ] a b
    d:f64[200,7,18,18] = transpose[permutation=(0, 1, 3, 2)] c
  in (d,) }, solve={ lambda ; a:f64[200,7,18,18] b:f64[200,7,18,18]. let
    c:f64[200,7,18,18] = pjit[
      name=_cho_solve
      jaxpr={ lambda ; d:f64[200,7,18,18] e:f64[200,7,18,18]. let
          f:f64[200,7,18,18,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2, 3)
            shape=(200, 7, 18, 18, 1)
          ] e
          g:f64[200,7,18,1,18] = transpose[permutation=(0, 1, 3, 4, 2)] f
          h:f64[200,7,18,18] = reshape[
            dimensions=None
            new_sizes=(200, 7, 18, 18)
          ] g
          i:f64[200,7,18,18] = triangular_solve[
            conjugate_a=False
            left_side=True
            lower=False
            transpose_a=True
            unit_diagonal=False
          ] d h
          j:f64[200,7,18,1,18] = reshape[
            dimensions=None
            new_sizes=(200, 7, 18, 1, 18)
          ] i
          k:f64[200,7,18,1,18] = slice[
            limit_indices=(200, 7, 18, 1, 18)
            start_indices=(0, 0, 0, 0, 0)
            strides=None
          ] j
          l:f64[200,7,18,18,1] = transpose[permutation=(0, 1, 4, 2, 3)] k
          m:f64[200,7,18,18] = squeeze[dimensions=(4,)] l
          n:f64[200,7,18,18,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2, 3)
            shape=(200, 7, 18, 18, 1)
          ] m
          o:f64[200,7,18,1,18] = transpose[permutation=(0, 1, 3, 4, 2)] n
          p:f64[200,7,18,18] = reshape[
            dimensions=None
            new_sizes=(200, 7, 18, 18)
          ] o
          q:f64[200,7,18,18] = triangular_solve[
            conjugate_a=False
            left_side=True
            lower=False
            transpose_a=False
            unit_diagonal=False
          ] d p
          r:f64[200,7,18,1,18] = reshape[
            dimensions=None
            new_sizes=(200, 7, 18, 1, 18)
          ] q
          s:f64[200,7,18,1,18] = slice[
            limit_indices=(200, 7, 18, 1, 18)
            start_indices=(0, 0, 0, 0, 0)
            strides=None
          ] r
          t:f64[200,7,18,18,1] = transpose[permutation=(0, 1, 4, 2, 3)] s
          u:f64[200,7,18,18] = squeeze[dimensions=(4,)] t
        in (u,) }
    ] a b
  in (c,) }, transpose_solve={ lambda ; a:f64[200,7,18,18] b:f64[200,7,18,18]. let
    c:f64[200,7,18,18] = pjit[
      name=_cho_solve
      jaxpr={ lambda ; d:f64[200,7,18,18] e:f64[200,7,18,18]. let
          f:f64[200,7,18,18,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2, 3)
            shape=(200, 7, 18, 18, 1)
          ] e
          g:f64[200,7,18,1,18] = transpose[permutation=(0, 1, 3, 4, 2)] f
          h:f64[200,7,18,18] = reshape[
            dimensions=None
            new_sizes=(200, 7, 18, 18)
          ] g
          i:f64[200,7,18,18] = triangular_solve[
            conjugate_a=False
            left_side=True
            lower=False
            transpose_a=True
            unit_diagonal=False
          ] d h
          j:f64[200,7,18,1,18] = reshape[
            dimensions=None
            new_sizes=(200, 7, 18, 1, 18)
          ] i
          k:f64[200,7,18,1,18] = slice[
            limit_indices=(200, 7, 18, 1, 18)
            start_indices=(0, 0, 0, 0, 0)
            strides=None
          ] j
          l:f64[200,7,18,18,1] = transpose[permutation=(0, 1, 4, 2, 3)] k
          m:f64[200,7,18,18] = squeeze[dimensions=(4,)] l
          n:f64[200,7,18,18,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2, 3)
            shape=(200, 7, 18, 18, 1)
          ] m
          o:f64[200,7,18,1,18] = transpose[permutation=(0, 1, 3, 4, 2)] n
          p:f64[200,7,18,18] = reshape[
            dimensions=None
            new_sizes=(200, 7, 18, 18)
          ] o
          q:f64[200,7,18,18] = triangular_solve[
            conjugate_a=False
            left_side=True
            lower=False
            transpose_a=False
            unit_diagonal=False
          ] d p
          r:f64[200,7,18,1,18] = reshape[
            dimensions=None
            new_sizes=(200, 7, 18, 1, 18)
          ] q
          s:f64[200,7,18,1,18] = slice[
            limit_indices=(200, 7, 18, 1, 18)
            start_indices=(0, 0, 0, 0, 0)
            strides=None
          ] r
          t:f64[200,7,18,18,1] = transpose[permutation=(0, 1, 4, 2, 3)] s
          u:f64[200,7,18,18] = squeeze[dimensions=(4,)] t
        in (u,) }
    ] a b
  in (c,) })
                                    ] oir oir oja oja oiy
                                    okh:f64[200,7,18,18] = transpose[
                                      permutation=(0, 1, 3, 2)
                                    ] okg
                                  in (okh, oja, okg) }
                              ] oin oab oac oad oae oaf oag oah
                              oki:f64[200,7,12] = slice[
                                limit_indices=(200, 7, 19)
                                start_indices=(0, 0, 7)
                                strides=None
                              ] oig
                              okj:f64[200,7,4] = slice[
                                limit_indices=(200, 7, 7)
                                start_indices=(0, 0, 3)
                                strides=None
                              ] oig
                              okk:f64[200,7,4] = mul okj obg
                              okl:f64[200,7,3] = slice[
                                limit_indices=(200, 7, 4)
                                start_indices=(0, 0, 1)
                                strides=None
                              ] okk
                              okm:f64[200,7,3] = slice[
                                limit_indices=(200, 7, 3)
                                start_indices=(0, 0, 0)
                                strides=None
                              ] oih
                              okn:f64[200,7] = dot_general[
                                dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
                                preferred_element_type=float64
                              ] okl okm
                              oko:f64[200,7,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1)
                                shape=(200, 7, 1)
                              ] okn
                              okp:f64[200,7,3] = mul oko okl
                              okq:f64[200,7,3] = mul 2.0 okp
                              okr:f64[200,7,1] = slice[
                                limit_indices=(200, 7, 1)
                                start_indices=(0, 0, 0)
                                strides=None
                              ] okk
                              oks:f64[200,7] = squeeze[dimensions=(2,)] okr
                              okt:f64[200,7] = mul oks oks
                              oku:f64[200,7] = dot_general[
                                dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
                                preferred_element_type=float64
                              ] okl okl
                              okv:f64[200,7] = sub okt oku
                              okw:f64[200,7,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1)
                                shape=(200, 7, 1)
                              ] okv
                              okx:f64[200,7,3] = mul okw okm
                              oky:f64[200,7,3] = add okq okx
                              okz:f64[200,7] = mul 2.0 oks
                              ola:f64[200,7,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1)
                                shape=(200, 7, 1)
                              ] okz
                              olb:f64[200,7,3] olc:f64[200,7] old:f64[200,7] ole:f64[200,7]
                                olf:f64[200,7] olg:f64[200,7] olh:f64[200,7] = pjit[
                                name=cross
                                jaxpr=cross27
                              ] okl okm obh obi obj obk obl obm
                              oli:f64[200,7,3] = mul ola olb
                              olj:f64[200,7,3] = add oky oli
                              olk:f64[200,7,3] = slice[
                                limit_indices=(200, 7, 4)
                                start_indices=(0, 0, 1)
                                strides=None
                              ] okj
                              oll:f64[200,7,3] = slice[
                                limit_indices=(200, 7, 6)
                                start_indices=(0, 0, 3)
                                strides=None
                              ] oih
                              olm:f64[200,7] = dot_general[
                                dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
                                preferred_element_type=float64
                              ] olk oll
                              oln:f64[200,7,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1)
                                shape=(200, 7, 1)
                              ] olm
                              olo:f64[200,7,3] = mul oln olk
                              olp:f64[200,7,3] = mul 2.0 olo
                              olq:f64[200,7,1] = slice[
                                limit_indices=(200, 7, 1)
                                start_indices=(0, 0, 0)
                                strides=None
                              ] okj
                              olr:f64[200,7] = squeeze[dimensions=(2,)] olq
                              ols:f64[200,7] = mul olr olr
                              olt:f64[200,7] = dot_general[
                                dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
                                preferred_element_type=float64
                              ] olk olk
                              olu:f64[200,7] = sub ols olt
                              olv:f64[200,7,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1)
                                shape=(200, 7, 1)
                              ] olu
                              olw:f64[200,7,3] = mul olv oll
                              olx:f64[200,7,3] = add olp olw
                              oly:f64[200,7] = mul 2.0 olr
                              olz:f64[200,7,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1)
                                shape=(200, 7, 1)
                              ] oly
                              oma:f64[200,7,3] omb:f64[200,7] omc:f64[200,7] omd:f64[200,7]
                                ome:f64[200,7] omf:f64[200,7] omg:f64[200,7] = pjit[
                                name=cross
                                jaxpr=cross27
                              ] olk oll obn obo obp obq obr obs
                              omh:f64[200,7,3] = mul olz oma
                              omi:f64[200,7,3] = add olx omh
                              omj:f64[200,7,12] = slice[
                                limit_indices=(200, 7, 18)
                                start_indices=(0, 0, 6)
                                strides=None
                              ] oih
                              omk:f64[200,7,34] = concatenate[dimension=2] okj oki
                                olj omi omj
                              oml:f64[200,7,36] = concatenate[dimension=2] omk oif
                              omm:f64[200,7,36] = sub oml obt
                              omn:f64[200,7,36] = mul 2.0 omm
                              omo:f64[200,7,36] = div omn obu
                              omp:f64[200,7,36] = sub omo 1.0
                              omq:f64[200,7,36] = add omp 1.0
                              omr:f64[200,7,36] = mul omq obv
                              oms:f64[200,7,36] = div omr 2.0
                              omt:f64[200,7,36] = add oms obw
                              omu:f64[200,7,1] = slice[
                                limit_indices=(200, 7, 36)
                                start_indices=(0, 0, 35)
                                strides=None
                              ] omt
                              omv:f64[200,7] = squeeze[dimensions=(2,)] omu
                              omw:f64[200,7,1] = slice[
                                limit_indices=(200, 7, 35)
                                start_indices=(0, 0, 34)
                                strides=None
                              ] omt
                              omx:f64[200,7] = squeeze[dimensions=(2,)] omw
                              omy:f64[200,7] = atan2 omv omx
                              omz:f64[200,7] = div omy 6.283185307179586
                              ona:f64[200,7] = add omz 0.5
                              onb:f64[200,7] = add ona obx
                              onc:f64[200,7] ond:bool[200,7] = pjit[
                                name=remainder
                                jaxpr=remainder9
                              ] onb oby obz
                              one:bool[200,7] = lt onc 0.5
                              onf:bool[200,7] = select_n one oca ocb
                              ong:bool[200,7,3] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1)
                                shape=(200, 7, 3)
                              ] onf
                              onh:f64[200,7] = sub onc 0.5
                              oni:f64[200,7] = div onh 0.5
                              onj:f64[200,7] = div onc 0.5
                              onk:f64[200,7] = select_n onf oni onj
                              onl:f64[200,7] = mul 6.283185307179586 onk
                              onm:f64[200,7] = mul 6.283185307179586 onk
                              onn:f64[200,7] = sin onm
                              ono:f64[200,7] = sub onl onn
                              onp:f64[200,7] = mul occ ono
                              onq:f64[200,7] = add onp ocd
                              onr:f64[200,7,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1)
                                shape=(200, 7, 1)
                              ] onq
                              ons:f64[200,7] = mul 6.283185307179586 onk
                              ont:f64[200,7] = mul 6.283185307179586 onk
                              onu:f64[200,7] = sin ont
                              onv:f64[200,7] = sub ons onu
                              onw:f64[200,7] = mul oce onv
                              onx:f64[200,7] = add onw ocf
                              ony:f64[200,7,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1)
                                shape=(200, 7, 1)
                              ] onx
                              onz:f64[200,7] = mul 6.283185307179586 onk
                              ooa:f64[200,7] = cos onz
                              oob:f64[200,7] = sub 1.0 ooa
                              ooc:f64[200,7] = mul 0.04 oob
                              ood:f64[200,7,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1)
                                shape=(200, 7, 1)
                              ] ooc
                              ooe:f64[200,7,3] = concatenate[dimension=2] onr ony
                                ood
                              oof:f64[200,7] = mul 6.283185307179586 onk
                              oog:f64[200,7] = mul 6.283185307179586 onk
                              ooh:f64[200,7] = sin oog
                              ooi:f64[200,7] = sub oof ooh
                              ooj:f64[200,7] = mul ocg ooi
                              ook:f64[200,7] = add ooj och
                              ool:f64[200,7,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1)
                                shape=(200, 7, 1)
                              ] ook
                              oom:f64[200,7] = mul 6.283185307179586 onk
                              oon:f64[200,7] = mul 6.283185307179586 onk
                              ooo:f64[200,7] = sin oon
                              oop:f64[200,7] = sub oom ooo
                              ooq:f64[200,7] = mul oci oop
                              oor:f64[200,7] = add ooq ocj
                              oos:f64[200,7,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1)
                                shape=(200, 7, 1)
                              ] oor
                              oot:f64[200,7,3] = concatenate[dimension=2] ool oos
                                ock
                              oou:f64[200,7,3] = select_n ong ooe oot
                              oov:f64[200,7,3] = add obf oou
                              oow:f64[200,7] = div omy 6.283185307179586
                              oox:f64[200,7] = add oow 0.5
                              ooy:f64[200,7] = add oox ocm
                              ooz:f64[200,7] opa:bool[200,7] = pjit[
                                name=remainder
                                jaxpr=remainder9
                              ] ooy ocn oco
                              opb:bool[200,7] = lt ooz 0.5
                              opc:bool[200,7] = select_n opb ocp ocq
                              opd:bool[200,7,3] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1)
                                shape=(200, 7, 3)
                              ] opc
                              ope:f64[200,7] = sub ooz 0.5
                              opf:f64[200,7] = div ope 0.5
                              opg:f64[200,7] = div ooz 0.5
                              oph:f64[200,7] = select_n opc opf opg
                              opi:f64[200,7] = mul 6.283185307179586 oph
                              opj:f64[200,7] = mul 6.283185307179586 oph
                              opk:f64[200,7] = sin opj
                              opl:f64[200,7] = sub opi opk
                              opm:f64[200,7] = mul ocr opl
                              opn:f64[200,7] = add opm ocs
                              opo:f64[200,7,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1)
                                shape=(200, 7, 1)
                              ] opn
                              opp:f64[200,7] = mul 6.283185307179586 oph
                              opq:f64[200,7] = mul 6.283185307179586 oph
                              opr:f64[200,7] = sin opq
                              ops:f64[200,7] = sub opp opr
                              opt:f64[200,7] = mul oct ops
                              opu:f64[200,7] = add opt ocu
                              opv:f64[200,7,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1)
                                shape=(200, 7, 1)
                              ] opu
                              opw:f64[200,7] = mul 6.283185307179586 oph
                              opx:f64[200,7] = cos opw
                              opy:f64[200,7] = sub 1.0 opx
                              opz:f64[200,7] = mul 0.04 opy
                              oqa:f64[200,7,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1)
                                shape=(200, 7, 1)
                              ] opz
                              oqb:f64[200,7,3] = concatenate[dimension=2] opo opv
                                oqa
                              oqc:f64[200,7] = mul 6.283185307179586 oph
                              oqd:f64[200,7] = mul 6.283185307179586 oph
                              oqe:f64[200,7] = sin oqd
                              oqf:f64[200,7] = sub oqc oqe
                              oqg:f64[200,7] = mul ocv oqf
                              oqh:f64[200,7] = add oqg ocw
                              oqi:f64[200,7,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1)
                                shape=(200, 7, 1)
                              ] oqh
                              oqj:f64[200,7] = mul 6.283185307179586 oph
                              oqk:f64[200,7] = mul 6.283185307179586 oph
                              oql:f64[200,7] = sin oqk
                              oqm:f64[200,7] = sub oqj oql
                              oqn:f64[200,7] = mul ocx oqm
                              oqo:f64[200,7] = add oqn ocy
                              oqp:f64[200,7,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1)
                                shape=(200, 7, 1)
                              ] oqo
                              oqq:f64[200,7,3] = concatenate[dimension=2] oqi oqp
                                ocz
                              oqr:f64[200,7,3] = select_n opd oqb oqq
                              oqs:f64[200,7,3] = add ocl oqr
                              oqt:f64[200,7] = div omy 6.283185307179586
                              oqu:f64[200,7] = add oqt 0.5
                              oqv:f64[200,7] = add oqu odb
                              oqw:f64[200,7] oqx:bool[200,7] = pjit[
                                name=remainder
                                jaxpr=remainder9
                              ] oqv odc odd
                              oqy:bool[200,7] = lt oqw 0.5
                              oqz:bool[200,7] = select_n oqy ode odf
                              ora:bool[200,7,3] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1)
                                shape=(200, 7, 3)
                              ] oqz
                              orb:f64[200,7] = sub oqw 0.5
                              orc:f64[200,7] = div orb 0.5
                              ord:f64[200,7] = div oqw 0.5
                              ore:f64[200,7] = select_n oqz orc ord
                              orf:f64[200,7] = mul 6.283185307179586 ore
                              org:f64[200,7] = mul 6.283185307179586 ore
                              orh:f64[200,7] = sin org
                              ori:f64[200,7] = sub orf orh
                              orj:f64[200,7] = mul odg ori
                              ork:f64[200,7] = add orj odh
                              orl:f64[200,7,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1)
                                shape=(200, 7, 1)
                              ] ork
                              orm:f64[200,7] = mul 6.283185307179586 ore
                              orn:f64[200,7] = mul 6.283185307179586 ore
                              oro:f64[200,7] = sin orn
                              orp:f64[200,7] = sub orm oro
                              orq:f64[200,7] = mul odi orp
                              orr:f64[200,7] = add orq odj
                              ors:f64[200,7,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1)
                                shape=(200, 7, 1)
                              ] orr
                              ort:f64[200,7] = mul 6.283185307179586 ore
                              oru:f64[200,7] = cos ort
                              orv:f64[200,7] = sub 1.0 oru
                              orw:f64[200,7] = mul 0.04 orv
                              orx:f64[200,7,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1)
                                shape=(200, 7, 1)
                              ] orw
                              ory:f64[200,7,3] = concatenate[dimension=2] orl ors
                                orx
                              orz:f64[200,7] = mul 6.283185307179586 ore
                              osa:f64[200,7] = mul 6.283185307179586 ore
                              osb:f64[200,7] = sin osa
                              osc:f64[200,7] = sub orz osb
                              osd:f64[200,7] = mul odk osc
                              ose:f64[200,7] = add osd odl
                              osf:f64[200,7,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1)
                                shape=(200, 7, 1)
                              ] ose
                              osg:f64[200,7] = mul 6.283185307179586 ore
                              osh:f64[200,7] = mul 6.283185307179586 ore
                              osi:f64[200,7] = sin osh
                              osj:f64[200,7] = sub osg osi
                              osk:f64[200,7] = mul odm osj
                              osl:f64[200,7] = add osk odn
                              osm:f64[200,7,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1)
                                shape=(200, 7, 1)
                              ] osl
                              osn:f64[200,7,3] = concatenate[dimension=2] osf osm
                                odo
                              oso:f64[200,7,3] = select_n ora ory osn
                              osp:f64[200,7,3] = add oda oso
                              osq:f64[200,7] = div omy 6.283185307179586
                              osr:f64[200,7] = add osq 0.5
                              oss:f64[200,7] = add osr odq
                              ost:f64[200,7] osu:bool[200,7] = pjit[
                                name=remainder
                                jaxpr=remainder9
                              ] oss odr ods
                              osv:bool[200,7] = lt ost 0.5
                              osw:bool[200,7] = select_n osv odt odu
                              osx:bool[200,7,3] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1)
                                shape=(200, 7, 3)
                              ] osw
                              osy:f64[200,7] = sub ost 0.5
                              osz:f64[200,7] = div osy 0.5
                              ota:f64[200,7] = div ost 0.5
                              otb:f64[200,7] = select_n osw osz ota
                              otc:f64[200,7] = mul 6.283185307179586 otb
                              otd:f64[200,7] = mul 6.283185307179586 otb
                              ote:f64[200,7] = sin otd
                              otf:f64[200,7] = sub otc ote
                              otg:f64[200,7] = mul odv otf
                              oth:f64[200,7] = add otg odw
                              oti:f64[200,7,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1)
                                shape=(200, 7, 1)
                              ] oth
                              otj:f64[200,7] = mul 6.283185307179586 otb
                              otk:f64[200,7] = mul 6.283185307179586 otb
                              otl:f64[200,7] = sin otk
                              otm:f64[200,7] = sub otj otl
                              otn:f64[200,7] = mul odx otm
                              oto:f64[200,7] = add otn ody
                              otp:f64[200,7,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1)
                                shape=(200, 7, 1)
                              ] oto
                              otq:f64[200,7] = mul 6.283185307179586 otb
                              otr:f64[200,7] = cos otq
                              ots:f64[200,7] = sub 1.0 otr
                              ott:f64[200,7] = mul 0.04 ots
                              otu:f64[200,7,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1)
                                shape=(200, 7, 1)
                              ] ott
                              otv:f64[200,7,3] = concatenate[dimension=2] oti otp
                                otu
                              otw:f64[200,7] = mul 6.283185307179586 otb
                              otx:f64[200,7] = mul 6.283185307179586 otb
                              oty:f64[200,7] = sin otx
                              otz:f64[200,7] = sub otw oty
                              oua:f64[200,7] = mul odz otz
                              oub:f64[200,7] = add oua oea
                              ouc:f64[200,7,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1)
                                shape=(200, 7, 1)
                              ] oub
                              oud:f64[200,7] = mul 6.283185307179586 otb
                              oue:f64[200,7] = mul 6.283185307179586 otb
                              ouf:f64[200,7] = sin oue
                              oug:f64[200,7] = sub oud ouf
                              ouh:f64[200,7] = mul oeb oug
                              oui:f64[200,7] = add ouh oec
                              ouj:f64[200,7,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1)
                                shape=(200, 7, 1)
                              ] oui
                              ouk:f64[200,7,3] = concatenate[dimension=2] ouc ouj
                                oed
                              oul:f64[200,7,3] = select_n osx otv ouk
                              oum:f64[200,7,3] = add odp oul
                              oun:f64[200,7,12] = concatenate[dimension=2] oov oqs
                                osp oum
                              ouo:f64[200,7,12] = sub oun oic
                              oup:f64[200,7,12] = add ouo oid
                              ouq:f64[200,7,3] = slice[
                                limit_indices=(200, 7, 3)
                                start_indices=(0, 0, 0)
                                strides=None
                              ] oup
                              our:f64[200,7,1] = slice[
                                limit_indices=(200, 7, 3)
                                start_indices=(0, 0, 2)
                                strides=None
                              ] ouq
                              ous:f64[200,7] = squeeze[dimensions=(2,)] our
                              out:f64[200,7] = mul ous oee
                              ouu:f64[200,7,1] = slice[
                                limit_indices=(200, 7, 2)
                                start_indices=(0, 0, 1)
                                strides=None
                              ] ouq
                              ouv:f64[200,7] = squeeze[dimensions=(2,)] ouu
                              ouw:f64[200,7] = sub ouv oef
                              oux:f64[200,7] = integer_pow[y=2] ouw
                              ouy:f64[200,7] = integer_pow[y=2] ous
                              ouz:f64[200,7] = add oux ouy
                              ova:f64[200,7] = sub ouz oeg
                              ovb:f64[200,7] = sqrt ova
                              ovc:f64[200,7] = mul ouw ovb
                              ovd:f64[200,7] = add out ovc
                              ove:f64[200,7] = mul ouw oeh
                              ovf:f64[200,7] = mul ous ovb
                              ovg:f64[200,7] = sub ove ovf
                              ovh:f64[200,7] = atan2 ovd ovg
                              ovi:f64[200,7,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1)
                                shape=(200, 7, 1)
                              ] ovh
                              ovj:f64[200,7,1] = slice[
                                limit_indices=(200, 7, 1)
                                start_indices=(0, 0, 0)
                                strides=None
                              ] ouq
                              ovk:f64[200,7] = squeeze[dimensions=(2,)] ovj
                              ovl:f64[200,7] = sub ovk oei
                              ovm:f64[200,7] = integer_pow[y=2] ovl
                              ovn:f64[200,7] = integer_pow[y=2] ouw
                              ovo:f64[200,7] = add ovm ovn
                              ovp:f64[200,7] = integer_pow[y=2] ous
                              ovq:f64[200,7] = add ovo ovp
                              ovr:f64[200,7] = sqrt ovq
                              ovs:f64[200,7] = integer_pow[y=2] ovr
                              ovt:f64[200,7] = sub ovs 0.006889000000000001
                              ovu:f64[200,7] = sqrt ovt
                              ovv:f64[200,7] = integer_pow[y=2] ovu
                              ovw:f64[200,7] = sub 0.125 ovv
                              ovx:f64[200,7] = div ovw oej
                              ovy:f64[200,7] ovz:f64[200,7] owa:f64[200,7] = pjit[
                                name=clip
                                jaxpr=clip2
                              ] ovx oek oel oem oen oeo oep oeq oer oes oet
                              owb:f64[200,7] = acos ovy
                              owc:f64[200,7] = sub 3.141592653589793 owb
                              owd:f64[200,7] = neg owc
                              owe:f64[200,7] = sin owd
                              owf:f64[200,7] = mul -0.25 owe
                              owg:f64[200,7] = sin ovh
                              owh:f64[200,7] = mul ouw owg
                              owi:f64[200,7] = cos ovh
                              owj:f64[200,7] = mul ous owi
                              owk:f64[200,7] = sub owh owj
                              owl:f64[200,7] = mul owf owk
                              owm:f64[200,7] = cos owd
                              own:f64[200,7] = mul -0.25 owm
                              owo:f64[200,7] = add -0.25 own
                              owp:f64[200,7] = mul owo ovl
                              owq:f64[200,7] = add owl owp
                              owr:f64[200,7] = mul owf ovl
                              ows:f64[200,7] = mul owo owk
                              owt:f64[200,7] = sub owr ows
                              owu:f64[200,7] = atan2 owq owt
                              owv:f64[200,7,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1)
                                shape=(200, 7, 1)
                              ] owu
                              oww:f64[200,7,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1)
                                shape=(200, 7, 1)
                              ] owd
                              owx:f64[200,7,3] = concatenate[dimension=2] ovi owv
                                oww
                              owy:f64[200,7,3] = slice[
                                limit_indices=(200, 7, 6)
                                start_indices=(0, 0, 3)
                                strides=None
                              ] oup
                              owz:f64[200,7,1] = slice[
                                limit_indices=(200, 7, 3)
                                start_indices=(0, 0, 2)
                                strides=None
                              ] owy
                              oxa:f64[200,7] = squeeze[dimensions=(2,)] owz
                              oxb:f64[200,7] = mul oxa oeu
                              oxc:f64[200,7,1] = slice[
                                limit_indices=(200, 7, 2)
                                start_indices=(0, 0, 1)
                                strides=None
                              ] owy
                              oxd:f64[200,7] = squeeze[dimensions=(2,)] oxc
                              oxe:f64[200,7] = sub oxd oev
                              oxf:f64[200,7] = integer_pow[y=2] oxe
                              oxg:f64[200,7] = integer_pow[y=2] oxa
                              oxh:f64[200,7] = add oxf oxg
                              oxi:f64[200,7] = sub oxh oew
                              oxj:f64[200,7] = sqrt oxi
                              oxk:f64[200,7] = mul oxe oxj
                              oxl:f64[200,7] = add oxb oxk
                              oxm:f64[200,7] = mul oxe oex
                              oxn:f64[200,7] = mul oxa oxj
                              oxo:f64[200,7] = sub oxm oxn
                              oxp:f64[200,7] = atan2 oxl oxo
                              oxq:f64[200,7,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1)
                                shape=(200, 7, 1)
                              ] oxp
                              oxr:f64[200,7,1] = slice[
                                limit_indices=(200, 7, 1)
                                start_indices=(0, 0, 0)
                                strides=None
                              ] owy
                              oxs:f64[200,7] = squeeze[dimensions=(2,)] oxr
                              oxt:f64[200,7] = sub oxs oey
                              oxu:f64[200,7] = integer_pow[y=2] oxt
                              oxv:f64[200,7] = integer_pow[y=2] oxe
                              oxw:f64[200,7] = add oxu oxv
                              oxx:f64[200,7] = integer_pow[y=2] oxa
                              oxy:f64[200,7] = add oxw oxx
                              oxz:f64[200,7] = sqrt oxy
                              oya:f64[200,7] = integer_pow[y=2] oxz
                              oyb:f64[200,7] = sub oya 0.006889000000000001
                              oyc:f64[200,7] = sqrt oyb
                              oyd:f64[200,7] = integer_pow[y=2] oyc
                              oye:f64[200,7] = sub 0.125 oyd
                              oyf:f64[200,7] = div oye oez
                              oyg:f64[200,7] oyh:f64[200,7] oyi:f64[200,7] = pjit[
                                name=clip
                                jaxpr=clip2
                              ] oyf ofa ofb ofc ofd ofe off ofg ofh ofi ofj
                              oyj:f64[200,7] = acos oyg
                              oyk:f64[200,7] = sub 3.141592653589793 oyj
                              oyl:f64[200,7] = neg oyk
                              oym:f64[200,7] = sin oyl
                              oyn:f64[200,7] = mul -0.25 oym
                              oyo:f64[200,7] = sin oxp
                              oyp:f64[200,7] = mul oxe oyo
                              oyq:f64[200,7] = cos oxp
                              oyr:f64[200,7] = mul oxa oyq
                              oys:f64[200,7] = sub oyp oyr
                              oyt:f64[200,7] = mul oyn oys
                              oyu:f64[200,7] = cos oyl
                              oyv:f64[200,7] = mul -0.25 oyu
                              oyw:f64[200,7] = add -0.25 oyv
                              oyx:f64[200,7] = mul oyw oxt
                              oyy:f64[200,7] = add oyt oyx
                              oyz:f64[200,7] = mul oyn oxt
                              oza:f64[200,7] = mul oyw oys
                              ozb:f64[200,7] = sub oyz oza
                              ozc:f64[200,7] = atan2 oyy ozb
                              ozd:f64[200,7,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1)
                                shape=(200, 7, 1)
                              ] ozc
                              oze:f64[200,7,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1)
                                shape=(200, 7, 1)
                              ] oyl
                              ozf:f64[200,7,3] = concatenate[dimension=2] oxq ozd
                                oze
                              ozg:f64[200,7,3] = slice[
                                limit_indices=(200, 7, 9)
                                start_indices=(0, 0, 6)
                                strides=None
                              ] oup
                              ozh:f64[200,7,1] = slice[
                                limit_indices=(200, 7, 3)
                                start_indices=(0, 0, 2)
                                strides=None
                              ] ozg
                              ozi:f64[200,7] = squeeze[dimensions=(2,)] ozh
                              ozj:f64[200,7] = mul ozi ofk
                              ozk:f64[200,7,1] = slice[
                                limit_indices=(200, 7, 2)
                                start_indices=(0, 0, 1)
                                strides=None
                              ] ozg
                              ozl:f64[200,7] = squeeze[dimensions=(2,)] ozk
                              ozm:f64[200,7] = sub ozl ofl
                              ozn:f64[200,7] = integer_pow[y=2] ozm
                              ozo:f64[200,7] = integer_pow[y=2] ozi
                              ozp:f64[200,7] = add ozn ozo
                              ozq:f64[200,7] = sub ozp ofm
                              ozr:f64[200,7] = sqrt ozq
                              ozs:f64[200,7] = mul ozm ozr
                              ozt:f64[200,7] = add ozj ozs
                              ozu:f64[200,7] = mul ozm ofn
                              ozv:f64[200,7] = mul ozi ozr
                              ozw:f64[200,7] = sub ozu ozv
                              ozx:f64[200,7] = atan2 ozt ozw
                              ozy:f64[200,7,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1)
                                shape=(200, 7, 1)
                              ] ozx
                              ozz:f64[200,7,1] = slice[
                                limit_indices=(200, 7, 1)
                                start_indices=(0, 0, 0)
                                strides=None
                              ] ozg
                              paa:f64[200,7] = squeeze[dimensions=(2,)] ozz
                              pab:f64[200,7] = sub paa ofo
                              pac:f64[200,7] = integer_pow[y=2] pab
                              pad:f64[200,7] = integer_pow[y=2] ozm
                              pae:f64[200,7] = add pac pad
                              paf:f64[200,7] = integer_pow[y=2] ozi
                              pag:f64[200,7] = add pae paf
                              pah:f64[200,7] = sqrt pag
                              pai:f64[200,7] = integer_pow[y=2] pah
                              paj:f64[200,7] = sub pai 0.006889000000000001
                              pak:f64[200,7] = sqrt paj
                              pal:f64[200,7] = integer_pow[y=2] pak
                              pam:f64[200,7] = sub 0.125 pal
                              pan:f64[200,7] = div pam ofp
                              pao:f64[200,7] pap:f64[200,7] paq:f64[200,7] = pjit[
                                name=clip
                                jaxpr=clip2
                              ] pan ofq ofr ofs oft ofu ofv ofw ofx ofy ofz
                              par:f64[200,7] = acos pao
                              pas:f64[200,7] = sub 3.141592653589793 par
                              pat:f64[200,7] = neg pas
                              pau:f64[200,7] = sin pat
                              pav:f64[200,7] = mul -0.25 pau
                              paw:f64[200,7] = sin ozx
                              pax:f64[200,7] = mul ozm paw
                              pay:f64[200,7] = cos ozx
                              paz:f64[200,7] = mul ozi pay
                              pba:f64[200,7] = sub pax paz
                              pbb:f64[200,7] = mul pav pba
                              pbc:f64[200,7] = cos pat
                              pbd:f64[200,7] = mul -0.25 pbc
                              pbe:f64[200,7] = add -0.25 pbd
                              pbf:f64[200,7] = mul pbe pab
                              pbg:f64[200,7] = add pbb pbf
                              pbh:f64[200,7] = mul pav pab
                              pbi:f64[200,7] = mul pbe pba
                              pbj:f64[200,7] = sub pbh pbi
                              pbk:f64[200,7] = atan2 pbg pbj
                              pbl:f64[200,7,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1)
                                shape=(200, 7, 1)
                              ] pbk
                              pbm:f64[200,7,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1)
                                shape=(200, 7, 1)
                              ] pat
                              pbn:f64[200,7,3] = concatenate[dimension=2] ozy pbl
                                pbm
                              pbo:f64[200,7,3] = slice[
                                limit_indices=(200, 7, 12)
                                start_indices=(0, 0, 9)
                                strides=None
                              ] oup
                              pbp:f64[200,7,1] = slice[
                                limit_indices=(200, 7, 3)
                                start_indices=(0, 0, 2)
                                strides=None
                              ] pbo
                              pbq:f64[200,7] = squeeze[dimensions=(2,)] pbp
                              pbr:f64[200,7] = mul pbq oga
                              pbs:f64[200,7,1] = slice[
                                limit_indices=(200, 7, 2)
                                start_indices=(0, 0, 1)
                                strides=None
                              ] pbo
                              pbt:f64[200,7] = squeeze[dimensions=(2,)] pbs
                              pbu:f64[200,7] = sub pbt ogb
                              pbv:f64[200,7] = integer_pow[y=2] pbu
                              pbw:f64[200,7] = integer_pow[y=2] pbq
                              pbx:f64[200,7] = add pbv pbw
                              pby:f64[200,7] = sub pbx ogc
                              pbz:f64[200,7] = sqrt pby
                              pca:f64[200,7] = mul pbu pbz
                              pcb:f64[200,7] = add pbr pca
                              pcc:f64[200,7] = mul pbu ogd
                              pcd:f64[200,7] = mul pbq pbz
                              pce:f64[200,7] = sub pcc pcd
                              pcf:f64[200,7] = atan2 pcb pce
                              pcg:f64[200,7,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1)
                                shape=(200, 7, 1)
                              ] pcf
                              pch:f64[200,7,1] = slice[
                                limit_indices=(200, 7, 1)
                                start_indices=(0, 0, 0)
                                strides=None
                              ] pbo
                              pci:f64[200,7] = squeeze[dimensions=(2,)] pch
                              pcj:f64[200,7] = sub pci oge
                              pck:f64[200,7] = integer_pow[y=2] pcj
                              pcl:f64[200,7] = integer_pow[y=2] pbu
                              pcm:f64[200,7] = add pck pcl
                              pcn:f64[200,7] = integer_pow[y=2] pbq
                              pco:f64[200,7] = add pcm pcn
                              pcp:f64[200,7] = sqrt pco
                              pcq:f64[200,7] = integer_pow[y=2] pcp
                              pcr:f64[200,7] = sub pcq 0.006889000000000001
                              pcs:f64[200,7] = sqrt pcr
                              pct:f64[200,7] = integer_pow[y=2] pcs
                              pcu:f64[200,7] = sub 0.125 pct
                              pcv:f64[200,7] = div pcu ogf
                              pcw:f64[200,7] pcx:f64[200,7] pcy:f64[200,7] = pjit[
                                name=clip
                                jaxpr=clip2
                              ] pcv ogg ogh ogi ogj ogk ogl ogm ogn ogo ogp
                              pcz:f64[200,7] = acos pcw
                              pda:f64[200,7] = sub 3.141592653589793 pcz
                              pdb:f64[200,7] = neg pda
                              pdc:f64[200,7] = sin pdb
                              pdd:f64[200,7] = mul -0.25 pdc
                              pde:f64[200,7] = sin pcf
                              pdf:f64[200,7] = mul pbu pde
                              pdg:f64[200,7] = cos pcf
                              pdh:f64[200,7] = mul pbq pdg
                              pdi:f64[200,7] = sub pdf pdh
                              pdj:f64[200,7] = mul pdd pdi
                              pdk:f64[200,7] = cos pdb
                              pdl:f64[200,7] = mul -0.25 pdk
                              pdm:f64[200,7] = add -0.25 pdl
                              pdn:f64[200,7] = mul pdm pcj
                              pdo:f64[200,7] = add pdj pdn
                              pdp:f64[200,7] = mul pdd pcj
                              pdq:f64[200,7] = mul pdm pdi
                              pdr:f64[200,7] = sub pdp pdq
                              pds:f64[200,7] = atan2 pdo pdr
                              pdt:f64[200,7,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1)
                                shape=(200, 7, 1)
                              ] pds
                              pdu:f64[200,7,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1)
                                shape=(200, 7, 1)
                              ] pdb
                              pdv:f64[200,7,3] = concatenate[dimension=2] pcg pdt
                                pdu
                              pdw:f64[200,7,12] = concatenate[dimension=2] owx ozf
                                pbn pdv
                              pdx:f64[200,7,12] pdy:f64[200,7,12] pdz:f64[200,7,12] = pjit[
                                name=clip
                                jaxpr=clip3
                              ] pdw ogq ogr ogs ogt ogu ogv ogw ogx ogy ogz
                              pea:f64[200,7,12] peb:f64[200,7,12] pec:bool[200,7,12]
                                ped:f64[200,7,12] pee:f64[200,7,12] pef:f64[200,7,12]
                                peg:f64[200,7,12] peh:bool[200,7,12] pei:bool[200,7,12] = cond[
                                branches=(
                                  { lambda ; pej:f64[200,7,12] pek:f64[200,7,12]
                                      pel:bool[200,7,12] pem:f64[200,7,12] pen:f64[200,7,12]
                                      peo:f64[200,7,12] pep:f64[200,7,12] peq:bool[200,7,12]
                                      per:bool[200,7,12] pes_:f64[1,1,12] pet_:f64[1,1,12]
                                      peu_:f64[1,1,12] pev_:f64[1,1,12] pew_:f64[1,1,12]
                                      pex_:f64[1,1,12] pey_:f64[1,1,12] pez_:f64[1,1,12]
                                      pfa_:f64[1,1,12] pfb_:f64[1,1,12] pfc_:f64[1,1,12]
                                      pfd:f64[200,7,36] pfe:f64[200,7,12]. let
                                    in (pej, pek, pel, pem, pen, peo, pep, peq, per) }
                                  { lambda ; pff_:f64[200,7,12] pfg:f64[200,7,12]
                                      pfh_:bool[200,7,12] pfi:f64[200,7,12] pfj_:f64[200,7,12]
                                      pfk_:f64[200,7,12] pfl_:f64[200,7,12] pfm_:bool[200,7,12]
                                      pfn_:bool[200,7,12] pfo:f64[1,1,12] pfp:f64[1,1,12]
                                      pfq:f64[1,1,12] pfr:f64[1,1,12] pfs:f64[1,1,12]
                                      pft:f64[1,1,12] pfu:f64[1,1,12] pfv:f64[1,1,12]
                                      pfw:f64[1,1,12] pfx:f64[1,1,12] pfy:f64[1,1,12]
                                      pfz:f64[200,7,36] pga:f64[200,7,12]. let
                                      pgb:f64[200,7,12] = slice[
                                        limit_indices=(200, 7, 16)
                                        start_indices=(0, 0, 4)
                                        strides=None
                                      ] pfz
                                      pgc:f64[200,7,12] = sub pga pgb
                                      pgd:f64[200,7,12] = mul pfo pgc
                                      pge:f64[200,7,12] = slice[
                                        limit_indices=(200, 7, 34)
                                        start_indices=(0, 0, 22)
                                        strides=None
                                      ] pfz
                                      pgf:f64[200,7,12] = sub pfq pge
                                      pgg:f64[200,7,12] = mul pfp pgf
                                      pgh:f64[200,7,12] = add pgd pgg
                                      pgi:bool[200,7,12] = lt pgh pfr
                                      pgj:f64[200,7,12] = sub pfu pge
                                      pgk:f64[200,7,12] = mul pft pgj
                                      pgl:f64[200,7,12] = sub pfs pgk
                                      pgm:f64[200,7,12] = sub pga pgb
                                      pgn:bool[200,7,12] = ne pgm 0.0
                                      pgo:f64[200,7,12] = sub pga pgb
                                      pgp:f64[200,7,12] = pjit[
                                        name=_where
                                        jaxpr={ lambda ; pgq:bool[200,7,12] pgr:f64[200,7,12]
                                            pgs:f64[200,7,12]. let
                                            pgt:f64[200,7,12] = select_n pgq pgs
                                              pgr
                                          in (pgt,) }
                                      ] pgn pgo pfg
                                      pgu:f64[200,7,12] = div pgl pgp
                                      pgv:bool[200,7,12] = gt pgh pfv
                                      pgw:f64[200,7,12] = sub pfy pge
                                      pgx:f64[200,7,12] = mul pfx pgw
                                      pgy:f64[200,7,12] = sub pfw pgx
                                      pgz:f64[200,7,12] = div pgy pgp
                                      pha:f64[200,7,12] = pjit[
                                        name=_where
                                        jaxpr={ lambda ; phb:bool[200,7,12] phc:f64[200,7,12]
                                            phd:f64[200,7,12]. let
                                            phe:f64[200,7,12] = select_n phb phd
                                              phc
                                          in (phe,) }
                                      ] pgv pgz pfi
                                      phf:f64[200,7,12] = pjit[
                                        name=_where
                                        jaxpr={ lambda ; phg:bool[200,7,12] phh:f64[200,7,12]
                                            phi:f64[200,7,12]. let
                                            phj:f64[200,7,12] = select_n phg phi
                                              phh
                                          in (phj,) }
                                      ] pgi pgu pha
                                      phk:f64[200,7,12] = integer_pow[y=-2] pgp
                                      phl:f64[200,7,12] = integer_pow[y=-2] pgp
                                    in (phf, pgp, pgn, pgl, phk, pgy, phl, pgv, pgi) }
                                )
                                linear=(False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False)
                              ] 1 oal oam oan oao oap oaq oar oas oat oau oav oaw
                                oax oay oaz oba obb obc obd obe omt pdx
                              phm:f64[200,7,12] = convert_element_type[
                                new_dtype=float64
                                weak_type=False
                              ] pea
                              phn:f64[200,7,12] = slice[
                                limit_indices=(200, 7, 16)
                                start_indices=(0, 0, 4)
                                strides=None
                              ] omt
                              pho:f64[200,7,12] = sub pdx phn
                              php:f64[200,7,12] = mul phm pho
                              phq:f64[200,7,12] = slice[
                                limit_indices=(200, 7, 34)
                                start_indices=(0, 0, 22)
                                strides=None
                              ] omt
                              phr:f64[200,7,12] = sub ohb phq
                              phs:f64[200,7,12] = mul oha phr
                              pht:f64[200,7,12] = add php phs
                              phu:f64[200,7,12] phv:f64[200,7,12] phw:f64[200,7,12] = pjit[
                                name=clip
                                jaxpr=clip3
                              ] pht ohc ohd ohe ohf ohg ohh ohi ohj ohk ohl
                              phx:f64[200,7,12] = mul oak phu
                              phy:f64[200,7,12] = gather[
                                dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
                                fill_value=None
                                indices_are_sorted=False
                                mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                slice_sizes=(200, 7, 1)
                                unique_indices=False
                              ] oig ohn
                              phz:f64[200,7,12] = mul phy oho
                              pia:f64[200,7,12] = gather[
                                dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
                                fill_value=None
                                indices_are_sorted=False
                                mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                slice_sizes=(200, 7, 1)
                                unique_indices=False
                              ] oih ohp
                              pib:f64[200,7,12] = mul pia ohq
                              pic:f64[200,7,12] = add phz pib
                              pid:f64[200,7,12] = mul ohm pic
                              pie:f64[200,7,12] = add phx pid
                              pif:f64[200,7,12] pig:f64[200,7,12] pih:f64[200,7,12] = pjit[
                                name=clip
                                jaxpr=clip3
                              ] pie ohr ohs oht ohu ohv ohw ohx ohy ohz oia
                              pii:f64[200,7,12] = mul pif oib
                              pij:f64[200,7,18] = scatter-add[
                                dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
                                indices_are_sorted=False
                                mode=GatherScatterMode.FILL_OR_DROP
                                unique_indices=False
                                update_consts=()
                                update_jaxpr=jaxpr
                              ] oai oaj pii
                              pik:f64[200,7,18] = add oie pij
                              pil:f64[200,7,18] = add pik oij
                              pim:f64[200,7,18] = dot_general[
                                dimension_numbers=(([3], [2]), ([0, 1], [0, 1]))
                                preferred_element_type=float64
                              ] oio pil
                              pin:f64[200,7,18] = mul pim 0.0025
                              pio:f64[200,7,18] = add oih pin
                              pip:f64[200,7,6] = slice[
                                limit_indices=(200, 7, 6)
                                start_indices=(0, 0, 0)
                                strides=None
                              ] pio
                              piq:f64[200,7,1,6] = reshape[
                                dimensions=None
                                new_sizes=(200, 7, 1, 6)
                              ] pip
                              pir:f64[200,7,1,3] = slice[
                                limit_indices=(200, 7, 1, 3)
                                start_indices=(0, 0, 0, 0)
                                strides=None
                              ] piq
                              pis:f64[200,7,1,3] = mul pir 0.0025
                              pit:f64[200,7,1,3] = add oim pis
                              piu:f64[200,7,1,4] = slice[
                                limit_indices=(200, 7, 1, 7)
                                start_indices=(0, 0, 0, 3)
                                strides=None
                              ] oil
                              piv:f64[200,7,1,1] = slice[
                                limit_indices=(200, 7, 1, 1)
                                start_indices=(0, 0, 0, 0)
                                strides=None
                              ] piu
                              piw:f64[200,7,1] = squeeze[dimensions=(3,)] piv
                              pix:f64[200,7,1,3] = slice[
                                limit_indices=(200, 7, 1, 6)
                                start_indices=(0, 0, 0, 3)
                                strides=None
                              ] piq
                              piy:f64[200,7,1] piz:f64[200,7,1] = pjit[
                                name=norm
                                jaxpr={ lambda ; pja:f64[200,7,1,3]. let
                                    pjb:f64[200,7,1,3] = mul pja pja
                                    pjc:f64[200,7,1] = reduce_sum[axes=(3,)] pjb
                                    pjd:f64[200,7,1] = sqrt pjc
                                    pje:f64[200,7,1] = div 0.5 pjd
                                  in (pjd, pje) }
                              ] pix
                              pjf:f64[200,7,1] = add piy 1e-08
                              pjg:f64[200,7,1] = mul 0.0025 pjf
                              pjh:f64[200,7,1] = div pjg 2.0
                              pji:f64[200,7,1] = cos pjh
                              pjj:f64[200,7,1,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1, 2)
                                shape=(200, 7, 1, 1)
                              ] pji
                              pjk:f64[200,7,1,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1, 2)
                                shape=(200, 7, 1, 1)
                              ] pjf
                              pjl:f64[200,7,1,3] = div pix pjk
                              pjm:f64[200,7,1,1] = slice[
                                limit_indices=(200, 7, 1, 1)
                                start_indices=(0, 0, 0, 0)
                                strides=None
                              ] pjl
                              pjn:f64[200,7,1] = squeeze[dimensions=(3,)] pjm
                              pjo:f64[200,7,1] = div pjg 2.0
                              pjp:f64[200,7,1] = sin pjo
                              pjq:f64[200,7,1] = mul pjn pjp
                              pjr:f64[200,7,1,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1, 2)
                                shape=(200, 7, 1, 1)
                              ] pjq
                              pjs:f64[200,7,1,1] = slice[
                                limit_indices=(200, 7, 1, 2)
                                start_indices=(0, 0, 0, 1)
                                strides=None
                              ] pjl
                              pjt:f64[200,7,1] = squeeze[dimensions=(3,)] pjs
                              pju:f64[200,7,1] = div pjg 2.0
                              pjv:f64[200,7,1] = sin pju
                              pjw:f64[200,7,1] = mul pjt pjv
                              pjx:f64[200,7,1,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1, 2)
                                shape=(200, 7, 1, 1)
                              ] pjw
                              pjy:f64[200,7,1,1] = slice[
                                limit_indices=(200, 7, 1, 3)
                                start_indices=(0, 0, 0, 2)
                                strides=None
                              ] pjl
                              pjz:f64[200,7,1] = squeeze[dimensions=(3,)] pjy
                              pka:f64[200,7,1] = div pjg 2.0
                              pkb:f64[200,7,1] = sin pka
                              pkc:f64[200,7,1] = mul pjz pkb
                              pkd:f64[200,7,1,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1, 2)
                                shape=(200, 7, 1, 1)
                              ] pkc
                              pke:f64[200,7,1,4] = concatenate[dimension=3] pjj pjr
                                pjx pkd
                              pkf:f64[200,7,1,1] = slice[
                                limit_indices=(200, 7, 1, 1)
                                start_indices=(0, 0, 0, 0)
                                strides=None
                              ] pke
                              pkg:f64[200,7,1] = squeeze[dimensions=(3,)] pkf
                              pkh:f64[200,7,1] = mul piw pkg
                              pki:f64[200,7,1,1] = slice[
                                limit_indices=(200, 7, 1, 2)
                                start_indices=(0, 0, 0, 1)
                                strides=None
                              ] piu
                              pkj:f64[200,7,1] = squeeze[dimensions=(3,)] pki
                              pkk:f64[200,7,1,1] = slice[
                                limit_indices=(200, 7, 1, 2)
                                start_indices=(0, 0, 0, 1)
                                strides=None
                              ] pke
                              pkl:f64[200,7,1] = squeeze[dimensions=(3,)] pkk
                              pkm:f64[200,7,1] = mul pkj pkl
                              pkn:f64[200,7,1] = sub pkh pkm
                              pko:f64[200,7,1,1] = slice[
                                limit_indices=(200, 7, 1, 3)
                                start_indices=(0, 0, 0, 2)
                                strides=None
                              ] piu
                              pkp:f64[200,7,1] = squeeze[dimensions=(3,)] pko
                              pkq:f64[200,7,1,1] = slice[
                                limit_indices=(200, 7, 1, 3)
                                start_indices=(0, 0, 0, 2)
                                strides=None
                              ] pke
                              pkr:f64[200,7,1] = squeeze[dimensions=(3,)] pkq
                              pks:f64[200,7,1] = mul pkp pkr
                              pkt:f64[200,7,1] = sub pkn pks
                              pku:f64[200,7,1,1] = slice[
                                limit_indices=(200, 7, 1, 4)
                                start_indices=(0, 0, 0, 3)
                                strides=None
                              ] piu
                              pkv:f64[200,7,1] = squeeze[dimensions=(3,)] pku
                              pkw:f64[200,7,1,1] = slice[
                                limit_indices=(200, 7, 1, 4)
                                start_indices=(0, 0, 0, 3)
                                strides=None
                              ] pke
                              pkx:f64[200,7,1] = squeeze[dimensions=(3,)] pkw
                              pky:f64[200,7,1] = mul pkv pkx
                              pkz:f64[200,7,1] = sub pkt pky
                              pla:f64[200,7,1,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1, 2)
                                shape=(200, 7, 1, 1)
                              ] pkz
                              plb:f64[200,7,1,1] = slice[
                                limit_indices=(200, 7, 1, 1)
                                start_indices=(0, 0, 0, 0)
                                strides=None
                              ] piu
                              plc:f64[200,7,1] = squeeze[dimensions=(3,)] plb
                              pld:f64[200,7,1,1] = slice[
                                limit_indices=(200, 7, 1, 2)
                                start_indices=(0, 0, 0, 1)
                                strides=None
                              ] pke
                              ple:f64[200,7,1] = squeeze[dimensions=(3,)] pld
                              plf:f64[200,7,1] = mul plc ple
                              plg:f64[200,7,1,1] = slice[
                                limit_indices=(200, 7, 1, 2)
                                start_indices=(0, 0, 0, 1)
                                strides=None
                              ] piu
                              plh:f64[200,7,1] = squeeze[dimensions=(3,)] plg
                              pli:f64[200,7,1,1] = slice[
                                limit_indices=(200, 7, 1, 1)
                                start_indices=(0, 0, 0, 0)
                                strides=None
                              ] pke
                              plj:f64[200,7,1] = squeeze[dimensions=(3,)] pli
                              plk:f64[200,7,1] = mul plh plj
                              pll:f64[200,7,1] = add plf plk
                              plm:f64[200,7,1,1] = slice[
                                limit_indices=(200, 7, 1, 3)
                                start_indices=(0, 0, 0, 2)
                                strides=None
                              ] piu
                              pln:f64[200,7,1] = squeeze[dimensions=(3,)] plm
                              plo:f64[200,7,1,1] = slice[
                                limit_indices=(200, 7, 1, 4)
                                start_indices=(0, 0, 0, 3)
                                strides=None
                              ] pke
                              plp:f64[200,7,1] = squeeze[dimensions=(3,)] plo
                              plq:f64[200,7,1] = mul pln plp
                              plr:f64[200,7,1] = add pll plq
                              pls:f64[200,7,1,1] = slice[
                                limit_indices=(200, 7, 1, 4)
                                start_indices=(0, 0, 0, 3)
                                strides=None
                              ] piu
                              plt:f64[200,7,1] = squeeze[dimensions=(3,)] pls
                              plu:f64[200,7,1,1] = slice[
                                limit_indices=(200, 7, 1, 3)
                                start_indices=(0, 0, 0, 2)
                                strides=None
                              ] pke
                              plv:f64[200,7,1] = squeeze[dimensions=(3,)] plu
                              plw:f64[200,7,1] = mul plt plv
                              plx:f64[200,7,1] = sub plr plw
                              ply:f64[200,7,1,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1, 2)
                                shape=(200, 7, 1, 1)
                              ] plx
                              plz:f64[200,7,1,1] = slice[
                                limit_indices=(200, 7, 1, 1)
                                start_indices=(0, 0, 0, 0)
                                strides=None
                              ] piu
                              pma:f64[200,7,1] = squeeze[dimensions=(3,)] plz
                              pmb:f64[200,7,1,1] = slice[
                                limit_indices=(200, 7, 1, 3)
                                start_indices=(0, 0, 0, 2)
                                strides=None
                              ] pke
                              pmc:f64[200,7,1] = squeeze[dimensions=(3,)] pmb
                              pmd:f64[200,7,1] = mul pma pmc
                              pme:f64[200,7,1,1] = slice[
                                limit_indices=(200, 7, 1, 2)
                                start_indices=(0, 0, 0, 1)
                                strides=None
                              ] piu
                              pmf:f64[200,7,1] = squeeze[dimensions=(3,)] pme
                              pmg:f64[200,7,1,1] = slice[
                                limit_indices=(200, 7, 1, 4)
                                start_indices=(0, 0, 0, 3)
                                strides=None
                              ] pke
                              pmh:f64[200,7,1] = squeeze[dimensions=(3,)] pmg
                              pmi:f64[200,7,1] = mul pmf pmh
                              pmj:f64[200,7,1] = sub pmd pmi
                              pmk:f64[200,7,1,1] = slice[
                                limit_indices=(200, 7, 1, 3)
                                start_indices=(0, 0, 0, 2)
                                strides=None
                              ] piu
                              pml:f64[200,7,1] = squeeze[dimensions=(3,)] pmk
                              pmm:f64[200,7,1,1] = slice[
                                limit_indices=(200, 7, 1, 1)
                                start_indices=(0, 0, 0, 0)
                                strides=None
                              ] pke
                              pmn:f64[200,7,1] = squeeze[dimensions=(3,)] pmm
                              pmo:f64[200,7,1] = mul pml pmn
                              pmp:f64[200,7,1] = add pmj pmo
                              pmq:f64[200,7,1,1] = slice[
                                limit_indices=(200, 7, 1, 4)
                                start_indices=(0, 0, 0, 3)
                                strides=None
                              ] piu
                              pmr:f64[200,7,1] = squeeze[dimensions=(3,)] pmq
                              pms:f64[200,7,1,1] = slice[
                                limit_indices=(200, 7, 1, 2)
                                start_indices=(0, 0, 0, 1)
                                strides=None
                              ] pke
                              pmt:f64[200,7,1] = squeeze[dimensions=(3,)] pms
                              pmu:f64[200,7,1] = mul pmr pmt
                              pmv:f64[200,7,1] = add pmp pmu
                              pmw:f64[200,7,1,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1, 2)
                                shape=(200, 7, 1, 1)
                              ] pmv
                              pmx:f64[200,7,1,1] = slice[
                                limit_indices=(200, 7, 1, 1)
                                start_indices=(0, 0, 0, 0)
                                strides=None
                              ] piu
                              pmy:f64[200,7,1] = squeeze[dimensions=(3,)] pmx
                              pmz:f64[200,7,1,1] = slice[
                                limit_indices=(200, 7, 1, 4)
                                start_indices=(0, 0, 0, 3)
                                strides=None
                              ] pke
                              pna:f64[200,7,1] = squeeze[dimensions=(3,)] pmz
                              pnb:f64[200,7,1] = mul pmy pna
                              pnc:f64[200,7,1,1] = slice[
                                limit_indices=(200, 7, 1, 2)
                                start_indices=(0, 0, 0, 1)
                                strides=None
                              ] piu
                              pnd:f64[200,7,1] = squeeze[dimensions=(3,)] pnc
                              pne:f64[200,7,1,1] = slice[
                                limit_indices=(200, 7, 1, 3)
                                start_indices=(0, 0, 0, 2)
                                strides=None
                              ] pke
                              pnf:f64[200,7,1] = squeeze[dimensions=(3,)] pne
                              png:f64[200,7,1] = mul pnd pnf
                              pnh:f64[200,7,1] = add pnb png
                              pni:f64[200,7,1,1] = slice[
                                limit_indices=(200, 7, 1, 3)
                                start_indices=(0, 0, 0, 2)
                                strides=None
                              ] piu
                              pnj:f64[200,7,1] = squeeze[dimensions=(3,)] pni
                              pnk:f64[200,7,1,1] = slice[
                                limit_indices=(200, 7, 1, 2)
                                start_indices=(0, 0, 0, 1)
                                strides=None
                              ] pke
                              pnl:f64[200,7,1] = squeeze[dimensions=(3,)] pnk
                              pnm:f64[200,7,1] = mul pnj pnl
                              pnn:f64[200,7,1] = sub pnh pnm
                              pno:f64[200,7,1,1] = slice[
                                limit_indices=(200, 7, 1, 4)
                                start_indices=(0, 0, 0, 3)
                                strides=None
                              ] piu
                              pnp:f64[200,7,1] = squeeze[dimensions=(3,)] pno
                              pnq:f64[200,7,1,1] = slice[
                                limit_indices=(200, 7, 1, 1)
                                start_indices=(0, 0, 0, 0)
                                strides=None
                              ] pke
                              pnr:f64[200,7,1] = squeeze[dimensions=(3,)] pnq
                              pns:f64[200,7,1] = mul pnp pnr
                              pnt:f64[200,7,1] = add pnn pns
                              pnu:f64[200,7,1,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1, 2)
                                shape=(200, 7, 1, 1)
                              ] pnt
                              pnv:f64[200,7,1,4] = concatenate[dimension=3] pla ply
                                pmw pnu
                              pnw:f64[200,7,1] pnx:f64[200,7,1] = pjit[
                                name=norm
                                jaxpr={ lambda ; pny:f64[200,7,1,4]. let
                                    pnz:f64[200,7,1,4] = mul pny pny
                                    poa:f64[200,7,1] = reduce_sum[axes=(3,)] pnz
                                    pob:f64[200,7,1] = sqrt poa
                                    poc:f64[200,7,1] = div 0.5 pob
                                  in (pob, poc) }
                              ] pnv
                              pod:f64[200,7,1,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1, 2)
                                shape=(200, 7, 1, 1)
                              ] pnw
                              poe:f64[200,7,1,4] = div pnv pod
                              pof:f64[200,7,1,7] = concatenate[dimension=3] pit poe
                              pog:f64[200,7,7] = reshape[
                                dimensions=None
                                new_sizes=(200, 7, 7)
                              ] pof
                              poh:f64[200,7,12] = slice[
                                limit_indices=(200, 7, 19)
                                start_indices=(0, 0, 7)
                                strides=None
                              ] oig
                              poi:f64[200,7,12,1] = reshape[
                                dimensions=None
                                new_sizes=(200, 7, 12, 1)
                              ] poh
                              poj:f64[200,7,12] = slice[
                                limit_indices=(200, 7, 18)
                                start_indices=(0, 0, 6)
                                strides=None
                              ] pio
                              pok:f64[200,7,12,1] = reshape[
                                dimensions=None
                                new_sizes=(200, 7, 12, 1)
                              ] poj
                              pol:f64[200,7,12,1] = mul pok 0.0025
                              pom:f64[200,7,12,1] = add poi pol
                              pon:f64[200,7,12] = reshape[
                                dimensions=None
                                new_sizes=(200, 7, 12)
                              ] pom
                              poo:f64[200,7,19] = concatenate[dimension=2] pog pon
                              pop:f64[200,7] = integer_pow[y=2] omv
                              poq:f64[200,7] = integer_pow[y=2] omx
                              por:f64[200,7] = add pop poq
                              pos:f64[200,7] = div omx por
                              pot:f64[200,7] = neg omv
                              pou:f64[200,7] = integer_pow[y=2] omv
                              pov:f64[200,7] = integer_pow[y=2] omx
                              pow:f64[200,7] = add pou pov
                              pox:f64[200,7] = cos onm
                              poy:f64[200,7] = cos ont
                              poz:f64[200,7] = sin onz
                              ppa:f64[200,7] = cos oog
                              ppb:f64[200,7] = cos oon
                              ppc:f64[200,7] = cos opj
                              ppd:f64[200,7] = cos opq
                              ppe:f64[200,7] = sin opw
                              ppf:f64[200,7] = cos oqd
                              ppg:f64[200,7] = cos oqk
                              pph:f64[200,7] = cos org
                              ppi:f64[200,7] = cos orn
                              ppj:f64[200,7] = sin ort
                              ppk:f64[200,7] = cos osa
                              ppl:f64[200,7] = cos osh
                              ppm:f64[200,7] = cos otd
                              ppn:f64[200,7] = cos otk
                              ppo:f64[200,7] = sin otq
                              ppp:f64[200,7] = cos otx
                              ppq:f64[200,7] = cos oue
                              ppr:f64[200,7] = integer_pow[y=1] ouw
                              pps:f64[200,7] = mul 2.0 ppr
                              ppt:f64[200,7] = integer_pow[y=1] ous
                              ppu:f64[200,7] = mul 2.0 ppt
                              ppv:f64[200,7] = div 0.5 ovb
                              ppw:f64[200,7] = integer_pow[y=2] ovd
                              ppx:f64[200,7] = integer_pow[y=2] ovg
                              ppy:f64[200,7] = add ppw ppx
                              ppz:f64[200,7] = div ovg ppy
                              pqa:f64[200,7] = neg ovd
                              pqb:f64[200,7] = integer_pow[y=2] ovd
                              pqc:f64[200,7] = integer_pow[y=2] ovg
                              pqd:f64[200,7] = add pqb pqc
                              pqe:f64[200,7] = integer_pow[y=1] ovl
                              pqf:f64[200,7] = mul 2.0 pqe
                              pqg:f64[200,7] = integer_pow[y=1] ouw
                              pqh:f64[200,7] = mul 2.0 pqg
                              pqi:f64[200,7] = integer_pow[y=1] ous
                              pqj:f64[200,7] = mul 2.0 pqi
                              pqk:f64[200,7] = div 0.5 ovr
                              pql:f64[200,7] = integer_pow[y=1] ovr
                              pqm:f64[200,7] = mul 2.0 pql
                              pqn:f64[200,7] = div 0.5 ovu
                              pqo:f64[200,7] = integer_pow[y=1] ovu
                              pqp:f64[200,7] = mul 2.0 pqo
                              pqq:f64[200,7] = integer_pow[y=2] ovy
                              pqr:f64[200,7] = sub 1.0 pqq
                              pqs:f64[200,7] = rsqrt pqr
                              pqt:f64[200,7] = neg pqs
                              pqu:f64[200,7] = cos owd
                              pqv:f64[200,7] = cos ovh
                              pqw:f64[200,7] = sin ovh
                              pqx:f64[200,7] = sin owd
                              pqy:f64[200,7] = integer_pow[y=2] owq
                              pqz:f64[200,7] = integer_pow[y=2] owt
                              pra:f64[200,7] = add pqy pqz
                              prb:f64[200,7] = div owt pra
                              prc:f64[200,7] = neg owq
                              prd:f64[200,7] = integer_pow[y=2] owq
                              pre:f64[200,7] = integer_pow[y=2] owt
                              prf:f64[200,7] = add prd pre
                              prg:f64[200,7] = integer_pow[y=1] oxe
                              prh:f64[200,7] = mul 2.0 prg
                              pri:f64[200,7] = integer_pow[y=1] oxa
                              prj:f64[200,7] = mul 2.0 pri
                              prk:f64[200,7] = div 0.5 oxj
                              prl:f64[200,7] = integer_pow[y=2] oxl
                              prm:f64[200,7] = integer_pow[y=2] oxo
                              prn:f64[200,7] = add prl prm
                              pro:f64[200,7] = div oxo prn
                              prp:f64[200,7] = neg oxl
                              prq:f64[200,7] = integer_pow[y=2] oxl
                              prr:f64[200,7] = integer_pow[y=2] oxo
                              prs:f64[200,7] = add prq prr
                              prt:f64[200,7] = integer_pow[y=1] oxt
                              pru:f64[200,7] = mul 2.0 prt
                              prv:f64[200,7] = integer_pow[y=1] oxe
                              prw:f64[200,7] = mul 2.0 prv
                              prx:f64[200,7] = integer_pow[y=1] oxa
                              pry:f64[200,7] = mul 2.0 prx
                              prz:f64[200,7] = div 0.5 oxz
                              psa:f64[200,7] = integer_pow[y=1] oxz
                              psb:f64[200,7] = mul 2.0 psa
                              psc:f64[200,7] = div 0.5 oyc
                              psd:f64[200,7] = integer_pow[y=1] oyc
                              pse:f64[200,7] = mul 2.0 psd
                              psf:f64[200,7] = integer_pow[y=2] oyg
                              psg:f64[200,7] = sub 1.0 psf
                              psh:f64[200,7] = rsqrt psg
                              psi:f64[200,7] = neg psh
                              psj:f64[200,7] = cos oyl
                              psk:f64[200,7] = cos oxp
                              psl:f64[200,7] = sin oxp
                              psm:f64[200,7] = sin oyl
                              psn:f64[200,7] = integer_pow[y=2] oyy
                              pso:f64[200,7] = integer_pow[y=2] ozb
                              psp:f64[200,7] = add psn pso
                              psq:f64[200,7] = div ozb psp
                              psr:f64[200,7] = neg oyy
                              pss:f64[200,7] = integer_pow[y=2] oyy
                              pst:f64[200,7] = integer_pow[y=2] ozb
                              psu:f64[200,7] = add pss pst
                              psv:f64[200,7] = integer_pow[y=1] ozm
                              psw:f64[200,7] = mul 2.0 psv
                              psx:f64[200,7] = integer_pow[y=1] ozi
                              psy:f64[200,7] = mul 2.0 psx
                              psz:f64[200,7] = div 0.5 ozr
                              pta:f64[200,7] = integer_pow[y=2] ozt
                              ptb:f64[200,7] = integer_pow[y=2] ozw
                              ptc:f64[200,7] = add pta ptb
                              ptd:f64[200,7] = div ozw ptc
                              pte:f64[200,7] = neg ozt
                              ptf:f64[200,7] = integer_pow[y=2] ozt
                              ptg:f64[200,7] = integer_pow[y=2] ozw
                              pth:f64[200,7] = add ptf ptg
                              pti:f64[200,7] = integer_pow[y=1] pab
                              ptj:f64[200,7] = mul 2.0 pti
                              ptk:f64[200,7] = integer_pow[y=1] ozm
                              ptl:f64[200,7] = mul 2.0 ptk
                              ptm:f64[200,7] = integer_pow[y=1] ozi
                              ptn:f64[200,7] = mul 2.0 ptm
                              pto:f64[200,7] = div 0.5 pah
                              ptp:f64[200,7] = integer_pow[y=1] pah
                              ptq:f64[200,7] = mul 2.0 ptp
                              ptr:f64[200,7] = div 0.5 pak
                              pts:f64[200,7] = integer_pow[y=1] pak
                              ptt:f64[200,7] = mul 2.0 pts
                              ptu:f64[200,7] = integer_pow[y=2] pao
                              ptv:f64[200,7] = sub 1.0 ptu
                              ptw:f64[200,7] = rsqrt ptv
                              ptx:f64[200,7] = neg ptw
                              pty:f64[200,7] = cos pat
                              ptz:f64[200,7] = cos ozx
                              pua:f64[200,7] = sin ozx
                              pub:f64[200,7] = sin pat
                              puc:f64[200,7] = integer_pow[y=2] pbg
                              pud:f64[200,7] = integer_pow[y=2] pbj
                              pue:f64[200,7] = add puc pud
                              puf:f64[200,7] = div pbj pue
                              pug:f64[200,7] = neg pbg
                              puh:f64[200,7] = integer_pow[y=2] pbg
                              pui:f64[200,7] = integer_pow[y=2] pbj
                              puj:f64[200,7] = add puh pui
                              puk:f64[200,7] = integer_pow[y=1] pbu
                              pul:f64[200,7] = mul 2.0 puk
                              pum:f64[200,7] = integer_pow[y=1] pbq
                              pun:f64[200,7] = mul 2.0 pum
                              puo:f64[200,7] = div 0.5 pbz
                              pup:f64[200,7] = integer_pow[y=2] pcb
                              puq:f64[200,7] = integer_pow[y=2] pce
                              pur:f64[200,7] = add pup puq
                              pus:f64[200,7] = div pce pur
                              put:f64[200,7] = neg pcb
                              puu:f64[200,7] = integer_pow[y=2] pcb
                              puv:f64[200,7] = integer_pow[y=2] pce
                              puw:f64[200,7] = add puu puv
                              pux:f64[200,7] = integer_pow[y=1] pcj
                              puy:f64[200,7] = mul 2.0 pux
                              puz:f64[200,7] = integer_pow[y=1] pbu
                              pva:f64[200,7] = mul 2.0 puz
                              pvb:f64[200,7] = integer_pow[y=1] pbq
                              pvc:f64[200,7] = mul 2.0 pvb
                              pvd:f64[200,7] = div 0.5 pcp
                              pve:f64[200,7] = integer_pow[y=1] pcp
                              pvf:f64[200,7] = mul 2.0 pve
                              pvg:f64[200,7] = div 0.5 pcs
                              pvh:f64[200,7] = integer_pow[y=1] pcs
                              pvi:f64[200,7] = mul 2.0 pvh
                              pvj:f64[200,7] = integer_pow[y=2] pcw
                              pvk:f64[200,7] = sub 1.0 pvj
                              pvl:f64[200,7] = rsqrt pvk
                              pvm:f64[200,7] = neg pvl
                              pvn:f64[200,7] = cos pdb
                              pvo:f64[200,7] = cos pcf
                              pvp:f64[200,7] = sin pcf
                              pvq:f64[200,7] = sin pdb
                              pvr:f64[200,7] = integer_pow[y=2] pdo
                              pvs:f64[200,7] = integer_pow[y=2] pdr
                              pvt:f64[200,7] = add pvr pvs
                              pvu:f64[200,7] = div pdr pvt
                              pvv:f64[200,7] = neg pdo
                              pvw:f64[200,7] = integer_pow[y=2] pdo
                              pvx:f64[200,7] = integer_pow[y=2] pdr
                              pvy:f64[200,7] = add pvw pvx
                              pvz:f64[200,7,1] = sin pjh
                              pwa:f64[200,7,1,1] = integer_pow[y=-2] pjk
                              pwb:f64[200,7,1] = cos pjo
                              pwc:f64[200,7,1] = cos pju
                              pwd:f64[200,7,1] = cos pka
                              pwe:f64[200,7,1,1] = integer_pow[y=-2] pod
                            in (poo, pio, oii, oin, oip, oiq, pil, oio, peb, pec,
                              ped, pee, pef, peg, peh, pei, ong, onf, okm, okl, oko,
                              oks, okw, olb, ola, olc, old, ole, olf, olg, olh, oll,
                              olk, oln, olr, olv, oma, olz, omb, omc, omd, ome, omf,
                              omg, pos, pot, pow, ond, pox, poy, poz, ppa, ppb, opd,
                              opc, opa, ppc, ppd, ppe, ppf, ppg, ora, oqz, oqx, pph,
                              ppi, ppj, ppk, ppl, osx, osw, osu, ppm, ppn, ppo, ppp,
                              ppq, ovb, ouw, pps, ppu, ppv, ppz, ous, pqa, pqd, pqf,
                              pqh, pqj, pqk, pqm, pqn, pqp, ovz, owa, pqt, pqu, owk,
                              owf, owg, pqv, owi, pqw, pqx, ovl, owo, prb, prc, prf,
                              oxj, oxe, prh, prj, prk, pro, oxa, prp, prs, pru, prw,
                              pry, prz, psb, psc, pse, oyh, oyi, psi, psj, oys, oyn,
                              oyo, psk, oyq, psl, psm, oxt, oyw, psq, psr, psu, ozr,
                              ozm, psw, psy, psz, ptd, ozi, pte, pth, ptj, ptl, ptn,
                              pto, ptq, ptr, ptt, pap, paq, ptx, pty, pba, pav, paw,
                              ptz, pay, pua, pub, pab, pbe, puf, pug, puj, pbz, pbu,
                              pul, pun, puo, pus, pbq, put, puw, puy, pva, pvc, pvd,
                              pvf, pvg, pvi, pcx, pcy, pvm, pvn, pdi, pdd, pde, pvo,
                              pdg, pvp, pvq, pcj, pdm, pvu, pvv, pvy, pdy, pdz, pho,
                              phm, phv, phw, pig, pih, pkg, piw, pix, piz, pvz, pjk,
                              pwa, pjp, pjn, pwb, pjv, pjt, pwc, pkb, pjz, pwd, pkl,
                              pkj, pkr, pkp, pkx, pkv, ple, plc, plj, plh, plp, pln,
                              plv, plt, pmc, pma, pmh, pmf, pmn, pml, pmt, pmr, pna,
                              pmy, pnf, pnd, pnl, pnj, pnr, pnp, pod, pnv, pnx, pwe) }
                          length=4
                          linear=(False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False)
                          num_carry=3
                          num_consts=214
                          reverse=False
                          unroll=1
                        ] jxi jxj jxk jxl jxm jxn jxo jxp jxq jxr jxs jxt jxu jxv
                          jxw jxx jxy jxz jya jyb jyc jyd jye jyf jyg jyh jyi jyj
                          jyk jyl jym jyn jyo jyp jyq jyr jys jyt jyu jyv jyw jyx
                          jyy jyz jza jzb jzc jzd jze jzf jzg jzh jzi jzj jzk jzl
                          jzm jzn jzo jzp jzq jzr jzs jzt jzu jzv jzw jzx jzy jzz
                          kaa kab kac kad kae kaf kag kah kai kaj kak kal kam kan
                          kao kap kaq kar kas kat kau kav kaw kax kay kaz kba kbb
                          kbc kbd kbe kbf kbg kbh kbi kbj kbk kbl kbm kbn kbo kbp
                          kbq kbr kbs kbt kbu kbv kbw kbx kby kbz kca kcb kcc kcd
                          kce kcf kcg kch kci kcj kck kcl kcm kcn kco kcp kcq kcr
                          kcs kct kcu kcv kcw kcx kcy kcz kda kdb kdc kdd kde kdf
                          kdg kdh kdi kdj kdk kdl kdm kdn kdo kdp kdq kdr kds kdt
                          kdu kdv kdw kdx kdy kdz kea keb kec ked kee kef keg keh
                          kei kej kek kel kem ken keo kep keq ker kes ket keu kev
                          kew kex key kez kfa kfb kfc kfd kfe kff kfg kfh kfi kfj
                          lav law ncw ndd lbg ldo nof lax
                        pwf:f64[200,7,12] = slice[
                          limit_indices=(200, 7, 19)
                          start_indices=(0, 0, 7)
                          strides=None
                        ] npy
                        pwg:f64[200,7,4] = slice[
                          limit_indices=(200, 7, 7)
                          start_indices=(0, 0, 3)
                          strides=None
                        ] npy
                        pwh:f64[200,7,4] = mul pwg kzy
                        pwi:f64[200,7,3] = slice[
                          limit_indices=(200, 7, 4)
                          start_indices=(0, 0, 1)
                          strides=None
                        ] pwh
                        pwj:f64[200,7,3] = slice[
                          limit_indices=(200, 7, 3)
                          start_indices=(0, 0, 0)
                          strides=None
                        ] npz
                        pwk:f64[200,7] = dot_general[
                          dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
                          preferred_element_type=float64
                        ] pwi pwj
                        pwl:f64[200,7,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1)
                          shape=(200, 7, 1)
                        ] pwk
                        pwm:f64[200,7,3] = mul pwl pwi
                        pwn:f64[200,7,3] = mul 2.0 pwm
                        pwo:f64[200,7,1] = slice[
                          limit_indices=(200, 7, 1)
                          start_indices=(0, 0, 0)
                          strides=None
                        ] pwh
                        pwp:f64[200,7] = squeeze[dimensions=(2,)] pwo
                        pwq:f64[200,7] = mul pwp pwp
                        pwr:f64[200,7] = dot_general[
                          dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
                          preferred_element_type=float64
                        ] pwi pwi
                        pws:f64[200,7] = sub pwq pwr
                        pwt:f64[200,7,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1)
                          shape=(200, 7, 1)
                        ] pws
                        pwu:f64[200,7,3] = mul pwt pwj
                        pwv:f64[200,7,3] = add pwn pwu
                        pww:f64[200,7] = mul 2.0 pwp
                        pwx:f64[200,7,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1)
                          shape=(200, 7, 1)
                        ] pww
                        pwy:f64[200,7,3] pwz:f64[200,7] pxa:f64[200,7] pxb:f64[200,7]
                          pxc:f64[200,7] pxd:f64[200,7] pxe:f64[200,7] = pjit[
                          name=cross
                          jaxpr=cross10
                        ] pwi pwj kzz laa lab lac lad lae
                        pxf:f64[200,7,3] = mul pwx pwy
                        pxg:f64[200,7,3] = add pwv pxf
                        pxh:f64[200,7,3] = slice[
                          limit_indices=(200, 7, 4)
                          start_indices=(0, 0, 1)
                          strides=None
                        ] pwg
                        pxi:f64[200,7,3] = slice[
                          limit_indices=(200, 7, 6)
                          start_indices=(0, 0, 3)
                          strides=None
                        ] npz
                        pxj:f64[200,7] = dot_general[
                          dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
                          preferred_element_type=float64
                        ] pxh pxi
                        pxk:f64[200,7,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1)
                          shape=(200, 7, 1)
                        ] pxj
                        pxl:f64[200,7,3] = mul pxk pxh
                        pxm:f64[200,7,3] = mul 2.0 pxl
                        pxn:f64[200,7,1] = slice[
                          limit_indices=(200, 7, 1)
                          start_indices=(0, 0, 0)
                          strides=None
                        ] pwg
                        pxo:f64[200,7] = squeeze[dimensions=(2,)] pxn
                        pxp:f64[200,7] = mul pxo pxo
                        pxq:f64[200,7] = dot_general[
                          dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
                          preferred_element_type=float64
                        ] pxh pxh
                        pxr:f64[200,7] = sub pxp pxq
                        pxs:f64[200,7,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1)
                          shape=(200, 7, 1)
                        ] pxr
                        pxt:f64[200,7,3] = mul pxs pxi
                        pxu:f64[200,7,3] = add pxm pxt
                        pxv:f64[200,7] = mul 2.0 pxo
                        pxw:f64[200,7,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1)
                          shape=(200, 7, 1)
                        ] pxv
                        pxx:f64[200,7,3] pxy:f64[200,7] pxz:f64[200,7] pya:f64[200,7]
                          pyb:f64[200,7] pyc:f64[200,7] pyd:f64[200,7] = pjit[
                          name=cross
                          jaxpr=cross10
                        ] pxh pxi laf lag lah lai laj lak
                        pye:f64[200,7,3] = mul pxw pxx
                        pyf:f64[200,7,3] = add pxu pye
                        pyg:f64[200,7,12] = slice[
                          limit_indices=(200, 7, 18)
                          start_indices=(0, 0, 6)
                          strides=None
                        ] npz
                        pyh:f64[200,7,34] = concatenate[dimension=2] pwg pwf pxg
                          pyf pyg
                        pyi:f64[200,7,36] = add lay 1.0
                        pyj:f64[200,7,36] = mul pyi lam
                        pyk:f64[200,7,36] = div pyj 2.0
                        pyl:f64[200,7,36] = add pyk lan
                        pym:f64[200,7,1] = slice[
                          limit_indices=(200, 7, 36)
                          start_indices=(0, 0, 35)
                          strides=None
                        ] pyl
                        pyn:f64[200,7] = squeeze[dimensions=(2,)] pym
                        pyo:f64[200,7,1] = slice[
                          limit_indices=(200, 7, 35)
                          start_indices=(0, 0, 34)
                          strides=None
                        ] pyl
                        pyp:f64[200,7] = squeeze[dimensions=(2,)] pyo
                        pyq:f64[200,7] = atan2 pyn pyp
                        pyr:f64[200,7] = add pyq 0.12566370614359174
                        pys:f64[200,7] = cos pyr
                        pyt:f64[200,7,36] = scatter[
                          dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
                          indices_are_sorted=True
                          mode=GatherScatterMode.FILL_OR_DROP
                          unique_indices=True
                          update_consts=()
                          update_jaxpr=None
                        ] pyl lal pys
                        pyu:f64[200,7] = sin pyr
                        pyv:f64[200,7,36] = scatter[
                          dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
                          indices_are_sorted=True
                          mode=GatherScatterMode.FILL_OR_DROP
                          unique_indices=True
                          update_consts=()
                          update_jaxpr=None
                        ] pyt lao pyu
                        pyw:f64[200,7,36] = sub pyv lap
                        pyx:f64[200,7,36] = mul 2.0 pyw
                        pyy:f64[200,7,36] = div pyx laq
                        pyz:f64[200,7,36] = sub pyy 1.0
                        pza:f64[200,7,36] = add pyz 1.0
                        pzb:f64[200,7,36] = mul pza lar
                        pzc:f64[200,7,36] = div pzb 2.0
                        pzd:f64[200,7,36] = add pzc las
                        pze:f64[200,7,1] = slice[
                          limit_indices=(200, 7, 35)
                          start_indices=(0, 0, 34)
                          strides=None
                        ] pzd
                        pzf:f64[200,7] = squeeze[dimensions=(2,)] pze
                        pzg:f64[200,7,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1)
                          shape=(200, 7, 1)
                        ] pzf
                        pzh:f64[200,7,1] = slice[
                          limit_indices=(200, 7, 36)
                          start_indices=(0, 0, 35)
                          strides=None
                        ] pzd
                        pzi:f64[200,7] = squeeze[dimensions=(2,)] pzh
                        pzj:f64[200,7,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1)
                          shape=(200, 7, 1)
                        ] pzi
                        pzk:f64[200,7,2] = concatenate[dimension=2] pzg pzj
                        pzl:f64[200,7,36] = concatenate[dimension=2] pyh pzk
                        pzm:f64[200,7,36] = sub pzl lat
                        pzn:f64[200,7,36] = mul 2.0 pzm
                        pzo:f64[200,7,36] = div pzn lau
                        pzp:f64[200,7,36] = sub pzo 1.0
                        pzq:f64[200,7,12] = sin ldv
                        pzr:f64[200,7,12] = cos ldy
                        pzs:f64[200,7,12] = cos lec
                        pzt:f64[200,7,12] = cos leg
                        pzu:f64[200,7,12,1] = integer_pow[y=-2] lgo
                        pzv:f64[200,7,13,1] = integer_pow[y=-2] lxe
                        pzw:f64[200,7,13] = integer_pow[y=-2] mxn
                        pzx:f64[200,7] = integer_pow[y=2] pyn
                        pzy:f64[200,7] = integer_pow[y=2] pyp
                        pzz:f64[200,7] = add pzx pzy
                        qaa:f64[200,7] = div pyp pzz
                        qab:f64[200,7] = neg pyn
                        qac:f64[200,7] = integer_pow[y=2] pyn
                        qad:f64[200,7] = integer_pow[y=2] pyp
                        qae:f64[200,7] = add qac qad
                        qaf:f64[200,7] = sin pyr
                        qag:f64[200,7] = cos pyr
                      in (pzp, lbn, lbm, lbp, lbt, lbx, lcc, lcb, lcd, lce, lcf,
                        lcg, lch, lci, lco, lcn, lcq, lcu, lcy, ldd, ldc, lde, ldf,
                        ldg, ldh, ldi, ldj, pzq, pzr, pzs, pzt, lgo, lfr, lfq, lfy,
                        lel, lek, pzu, mff, mfi, mfm, mfv, mfu, mho, mhn, mhq, mhu,
                        mhy, mid, mic, mie, mif, mig, mih, mii, mij, ljs, ljp, ljx,
                        ljv, lkd, lkb, lkj, lkh, lkq, lko, lkv, lkt, llb, lkz, llh,
                        llf, llo, llm, llt, llr, llz, llx, lmf, lmd, lmm, lmk, lmr,
                        lmp, lmx, lmv, lnd, lnb, mio, min, miq, miu, miy, mjd, mjc,
                        mje, mjf, mjg, mjh, mji, mjj, lnm, lnj, lnr, lnp, lnx, lnv,
                        lod, lob, lok, loi, lop, lon, lov, lot, lpb, loz, lpi, lpg,
                        lpn, lpl, lpt, lpr, lpz, lpx, lqg, lqe, lql, lqj, lqr, lqp,
                        lqx, lqv, mjo, mjn, mjq, mju, mjy, mkd, mkc, mke, mkf, mkg,
                        mkh, mki, mkj, lrg, lrd, lrl, lrj, lrr, lrp, lrx, lrv, lse,
                        lsc, lsj, lsh, lsp, lsn, lsv, lst, ltc, lta, lth, ltf, ltn,
                        ltl, ltt, ltr, lua, lty, luf, lud, lul, luj, lur, lup, lxe,
                        lwh, lwg, lwo, lvb, lux, pzv, mkp, mks, mkw, mlf, mle, mlp,
                        mls, mlw, mmf, mme, mmj, mmm, mmq, mmz, mmy, mcp, mcs, mcw,
                        mdf, mde, mng, mnh, mni, mnj, mnk, mnl, muw, mnw, mes, mer,
                        moa, mob, moc, mod, moe, mof, mog, moh, moi, moj, mos, mot,
                        mou, mov, mow, mox, moy, moz, mpa, mpu, mpv, mpw, mpx, mpy,
                        mpz, mqq, mqr, mqs, mqt, mqu, mqv, mra, mqy, mrg, mre, mrl,
                        mrj, mrq, mro, mrz, msa, msb, msc, msd, mse, msf, msg, msh,
                        msl, msm, msn, mso, msp, msq, mst, mss, msy, msx, mtc, mtb,
                        mtg, mtf, mtm, mtn, mto, mtp, mtq, mtr, mtv, mtw, mtx, mty,
                        mtz, mua, mud, mue, muf, mug, muh, mui, ncs, mxp, mxm, mxo,
                        mxk, pzw, mxt, mxs, mxz, myc, myo, mzk, mzj, nau, mzm, mtk,
                        nax, nba, nbb, nbc, nbd, nbe, nbf, mpo, nbj, nbk, nbl, nbm,
                        nbn, nbo, nbr, nbs, nbt, nbu, nbv, nbw, nby, nbz, nca, ncb,
                        ncc, ncd, ndo, nde, ndq, ndu, ndy, ned, nec, nee, nef, neg,
                        neh, nei, nej, nfp, nfo, nfr, nfv, nfz, nge, ngd, ngf, ngg,
                        ngh, ngi, ngj, ngk, ngp, ngo, ngr, ngv, ngz, nhe, nhd, nhf,
                        nhg, nhh, nhi, nhj, nhk, nhp, nho, nhr, nht, nhx, nia, nhz,
                        nib, nic, nid, nie, nif, nig, nio, nip, niq, nir, nis, nit,
                        niv, niu, nix, niz, njd, njg, njf, njh, nji, njj, njk, njl,
                        njm, njo, njp, njq, njr, njs, njt, njv, nju, njx, njz, nkd,
                        nkg, nkf, nkh, nki, nkj, nkk, nkl, nkm, nko, nkp, nkq, nkr,
                        nks, nkt, nkv, nku, nkx, nkz, nld, nlg, nlf, nlh, nli, nlj,
                        nlk, nll, nlm, nml, nmf, nmg, nmh, nmi, nmj, nmk, nno, nnc,
                        nni, nnj, nnk, nnl, nnm, nnn, nof, nog, noh, nqa, nqb, nqc,
                        nqd, nqe, nqf, nqg, nqh, nqi, nqj, nqk, nql, nqm, nqn, nqo,
                        nqp, nqq, nqr, nqs, nqt, nqu, nqv, nqw, nqx, nqy, nqz, nra,
                        nrb, nrc, nrd, nre, nrf, nrg, nrh, nri, nrj, nrk, nrl, nrm,
                        nrn, nro, nrp, nrq, nrr, nrs, nrt, nru, nrv, nrw, nrx, nry,
                        nrz, nsa, nsb, nsc, nsd, nse, nsf, nsg, nsh, nsi, nsj, nsk,
                        nsl, nsm, nsn, nso, nsp, nsq, nsr, nss, nst, nsu, nsv, nsw,
                        nsx, nsy, nsz, nta, ntb, ntc, ntd, nte, ntf, ntg, nth, nti,
                        ntj, ntk, ntl, ntm, ntn, nto, ntp, ntq, ntr, nts, ntt, ntu,
                        ntv, ntw, ntx, nty, ntz, nua, nub, nuc, nud, nue, nuf, nug,
                        nuh, nui, nuj, nuk, nul, num, nun, nuo, nup, nuq, nur, nus,
                        nut, nuu, nuv, nuw, nux, nuy, nuz, nva, nvb, nvc, nvd, nve,
                        nvf, nvg, nvh, nvi, nvj, nvk, nvl, nvm, nvn, nvo, nvp, nvq,
                        nvr, nvs, nvt, nvu, nvv, nvw, nvx, nvy, nvz, nwa, nwb, nwc,
                        nwd, nwe, nwf, nwg, nwh, nwi, nwj, nwk, nwl, nwm, nwn, nwo,
                        nwp, nwq, nwr, nws, nwt, nwu, nwv, nww, nwx, nwy, nwz, nxa,
                        nxb, nxc, nxd, nxe, nxf, nxg, nxh, nxi, nxj, nxk, nxl, nxm,
                        nxn, nxo, nxp, nxq, nxr, nxs, nxt, nxu, nxv, nxw, nxx, nxy,
                        nxz, nya, nyb, nyc, nyd, nye, nyf, nyg, nyh, nyi, nyj, nyk,
                        nyl, nym, nyn, nyo, nyp, nyq, nyr, nys, nyt, nyu, nyv, nyw,
                        nyx, nyy, nyz, nza, nzb, nzc, nzd, nze, nzf, nzg, nzh, nzi,
                        nzj, nzk, nzl, nzm, nzn, nzo, nzp, nzq, nzr, nzs, nzt, nzu,
                        nzv, nzw, nzx, nzy, nzz, pwj, pwi, pwl, pwp, pwt, pwy, pwx,
                        pwz, pxa, pxb, pxc, pxd, pxe, pxi, pxh, pxk, pxo, pxs, pxx,
                        pxw, pxy, pxz, pya, pyb, pyc, pyd, qaa, qab, qae, qaf, qag) }
                    length=1
                    linear=(False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False)
                    num_carry=1
                    num_consts=770
                    reverse=False
                    unroll=1
                  ] hmr hms hmt hmu hmv hmw hmx hmy hmz hna hnb hnc hnd hne hnf hng
                    hnh hni hnj hnk hnl hnm hnn hno hnp hnq hnr hns hnt hnu hnv hnw
                    hnx hny hnz hoa hob hoc hod hoe hof hog hoh hoi hoj hok hol hom
                    hon hoo hop hoq hor hos hot hou hov how hox hoy hoz hpa hpb hpc
                    hpd hpe hpf hpg hph hpi hpj hpk hpl hpm hpn hpo hpp hpq hpr hps
                    hpt hpu hpv hpw hpx hpy hpz hqa hqb hqc hqd hqe hqf hqg hqh hqi
                    hqj hqk hql hqm hqn hqo hqp hqq hqr hqs hqt hqu hqv hqw hqx hqy
                    hqz hra hrb hrc hrd hre hrf hrg hrh hri hrj hrk hrl hrm hrn hro
                    hrp hrq hrr hrs hrt hru hrv hrw hrx hry hrz hsa hsb hsc hsd hse
                    hsf hsg hsh hsi hsj hsk hsl hsm hsn hso hsp hsq hsr hss hst hsu
                    hsv hsw hsx hsy hsz hta htb htc htd hte htf htg hth hti htj htk
                    htl htm htn hto htp htq htr hts htt htu htv htw htx hty htz hua
                    hub huc hud hue huf hug huh hui huj huk hul hum hun huo hup huq
                    hur hus hut huu huv huw hux huy huz hva hvb hvc hvd hve hvf hvg
                    hvh hvi hvj hvk hvl hvm hvn hvo hvp hvq hvr hvs hvt hvu hvv hvw
                    hvx hvy hvz hwa hwb hwc hwd hwe hwf hwg hwh hwi hwj hwk hwl hwm
                    hwn hwo hwp hwq hwr hws hwt hwu hwv hww hwx hwy hwz hxa hxb hxc
                    hxd hxe hxf hxg hxh hxi hxj hxk hxl hxm hxn hxo hxp hxq hxr hxs
                    hxt hxu hxv hxw hxx hxy hxz hya hyb hyc hyd hye hyf hyg hyh hyi
                    hyj hyk hyl hym hyn hyo hyp hyq hyr hys hyt hyu hyv hyw hyx hyy
                    hyz hza hzb hzc hzd hze hzf hzg hzh hzi hzj hzk hzl hzm hzn hzo
                    hzp hzq hzr hzs hzt hzu hzv hzw hzx hzy hzz iaa iab iac iad iae
                    iaf iag iah iai iaj iak ial iam ian iao iap iaq iar ias iat iau
                    iav iaw iax iay iaz iba ibb ibc ibd ibe ibf ibg ibh ibi ibj ibk
                    ibl ibm ibn ibo ibp ibq ibr ibs ibt ibu ibv ibw ibx iby ibz ica
                    icb icc icd ice icf icg ich ici icj ick icl icm icn ico icp icq
                    icr ics ict icu icv icw icx icy icz ida idb idc idd ide idf idg
                    idh idi idj idk idl idm idn ido idp idq idr ids idt idu idv idw
                    idx idy idz iea ieb iec ied iee ief ieg ieh iei iej iek iel iem
                    ien ieo iep ieq ier ies iet ieu iev iew iex iey iez ifa ifb ifc
                    ifd ife iff ifg ifh ifi ifj ifk ifl ifm ifn ifo ifp ifq ifr ifs
                    ift ifu ifv ifw ifx ify ifz iga igb igc igd ige igf igg igh igi
                    igj igk igl igm ign igo igp igq igr igs igt igu igv igw igx igy
                    igz iha ihb ihc ihd ihe ihf ihg ihh ihi ihj ihk ihl ihm ihn iho
                    ihp ihq ihr ihs iht ihu ihv ihw ihx ihy ihz iia iib iic iid iie
                    iif iig iih iii iij iik iil iim iin iio iip iiq iir iis iit iiu
                    iiv iiw iix iiy iiz ija ijb ijc ijd ije ijf ijg ijh iji ijj ijk
                    ijl ijm ijn ijo ijp ijq ijr ijs ijt iju ijv ijw ijx ijy ijz ika
                    ikb ikc ikd ike ikf ikg ikh iki ikj ikk ikl ikm ikn iko ikp ikq
                    ikr iks ikt iku ikv ikw ikx iky ikz ila ilb ilc ild ile ilf ilg
                    ilh ili ilj ilk ill ilm iln ilo ilp ilq ilr ils ilt ilu ilv ilw
                    ilx ily ilz ima imb imc imd ime imf img imh imi imj imk iml imm
                    imn imo imp imq imr ims imt imu imv imw imx imy imz ina inb inc
                    ind ine inf ing inh ini inj ink inl inm inn ino inp inq inr ins
                    int inu inv inw inx iny inz ioa iob ioc iod ioe iof iog ioh ioi
                    ioj iok iol iom ion ioo iop ioq ior ios iot iou iov iow iox ioy
                    ioz ipa ipb ipc ipd ipe ipf ipg iph ipi ipj ipk ipl ipm ipn ipo
                    ipp ipq ipr ips ipt ipu ipv ipw ipx ipy ipz iqa iqb iqc iqd irw
                    isw iue iug
                  qah:f64[200,7,144] = slice[
                    limit_indices=(200, 7, 144)
                    start_indices=(0, 0, 0)
                    strides=None
                  ] irk
                  qai:f64[200,7,180] = concatenate[dimension=2] iuh qah
                  qaj:f64[200,7,36] = slice[
                    limit_indices=(200, 7, 54)
                    start_indices=(0, 0, 18)
                    strides=None
                  ] iuc
                  qak:f64[200,7,36] = sub irc qaj
                  qal:f64[200,7,36] qam:f64[200,7,36] = pjit[
                    name=softplus
                    jaxpr=softplus1
                  ] qak ird ire irf
                  qan:f64[200,7,36] = sub irb qal
                  qao:f64[200,7,36] = sub qan irg
                  qap:f64[200,7,36] qaq:f64[200,7,36] = pjit[
                    name=softplus
                    jaxpr=softplus1
                  ] qao irh iri irj
                  qar:f64[200,7,36] = add ira qap
                in (qai, iuh, qar, itb, itg, ite, ith, itf, itm, itk, itn, itl, its,
                  itq, itt, itr, ity, itw, itz, itx, iui, iuj, iuk, iul, ium, iun,
                  iuo, iup, iuq, iur, ius, iut, iuu, iuv, iuw, iux, iuy, iuz, iva,
                  ivb, ivc, ivd, ive, ivf, ivg, ivh, ivi, ivj, ivk, ivl, ivm, ivn,
                  ivo, ivp, ivq, ivr, ivs, ivt, ivu, ivv, ivw, ivx, ivy, ivz, iwa,
                  iwb, iwc, iwd, iwe, iwf, iwg, iwh, iwi, iwj, iwk, iwl, iwm, iwn,
                  iwo, iwp, iwq, iwr, iws, iwt, iwu, iwv, iww, iwx, iwy, iwz, ixa,
                  ixb, ixc, ixd, ixe, ixf, ixg, ixh, ixi, ixj, ixk, ixl, ixm, ixn,
                  ixo, ixp, ixq, ixr, ixs, ixt, ixu, ixv, ixw, ixx, ixy, ixz, iya,
                  iyb, iyc, iyd, iye, iyf, iyg, iyh, iyi, iyj, iyk, iyl, iym, iyn,
                  iyo, iyp, iyq, iyr, iys, iyt, iyu, iyv, iyw, iyx, iyy, iyz, iza,
                  izb, izc, izd, ize, izf, izg, izh, izi, izj, izk, izl, izm, izn,
                  izo, izp, izq, izr, izs, izt, izu, izv, izw, izx, izy, izz, jaa,
                  jab, jac, jad, jae, jaf, jag, jah, jai, jaj, jak, jal, jam, jan,
                  jao, jap, jaq, jar, jas, jat, jau, jav, jaw, jax, jay, jaz, jba,
                  jbb, jbc, jbd, jbe, jbf, jbg, jbh, jbi, jbj, jbk, jbl, jbm, jbn,
                  jbo, jbp, jbq, jbr, jbs, jbt, jbu, jbv, jbw, jbx, jby, jbz, jca,
                  jcb, jcc, jcd, jce, jcf, jcg, jch, jci, jcj, jck, jcl, jcm, jcn,
                  jco, jcp, jcq, jcr, jcs, jct, jcu, jcv, jcw, jcx, jcy, jcz, jda,
                  jdb, jdc, jdd, jde, jdf, jdg, jdh, jdi, jdj, jdk, jdl, jdm, jdn,
                  jdo, jdp, jdq, jdr, jds, jdt, jdu, jdv, jdw, jdx, jdy, jdz, jea,
                  jeb, jec, jed, jee, jef, jeg, jeh, jei, jej, jek, jel, jem, jen,
                  jeo, jep, jeq, jer, jes, jet, jeu, jev, jew, jex, jey, jez, jfa,
                  jfb, jfc, jfd, jfe, jff, jfg, jfh, jfi, jfj, jfk, jfl, jfm, jfn,
                  jfo, jfp, jfq, jfr, jfs, jft, jfu, jfv, jfw, jfx, jfy, jfz, jga,
                  jgb, jgc, jgd, jge, jgf, jgg, jgh, jgi, jgj, jgk, jgl, jgm, jgn,
                  jgo, jgp, jgq, jgr, jgs, jgt, jgu, jgv, jgw, jgx, jgy, jgz, jha,
                  jhb, jhc, jhd, jhe, jhf, jhg, jhh, jhi, jhj, jhk, jhl, jhm, jhn,
                  jho, jhp, jhq, jhr, jhs, jht, jhu, jhv, jhw, jhx, jhy, jhz, jia,
                  jib, jic, jid, jie, jif, jig, jih, jii, jij, jik, jil, jim, jin,
                  jio, jip, jiq, jir, jis, jit, jiu, jiv, jiw, jix, jiy, jiz, jja,
                  jjb, jjc, jjd, jje, jjf, jjg, jjh, jji, jjj, jjk, jjl, jjm, jjn,
                  jjo, jjp, jjq, jjr, jjs, jjt, jju, jjv, jjw, jjx, jjy, jjz, jka,
                  jkb, jkc, jkd, jke, jkf, jkg, jkh, jki, jkj, jkk, jkl, jkm, jkn,
                  jko, jkp, jkq, jkr, jks, jkt, jku, jkv, jkw, jkx, jky, jkz, jla,
                  jlb, jlc, jld, jle, jlf, jlg, jlh, jli, jlj, jlk, jll, jlm, jln,
                  jlo, jlp, jlq, jlr, jls, jlt, jlu, jlv, jlw, jlx, jly, jlz, jma,
                  jmb, jmc, jmd, jme, jmf, jmg, jmh, jmi, jmj, jmk, jml, jmm, jmn,
                  jmo, jmp, jmq, jmr, jms, jmt, jmu, jmv, jmw, jmx, jmy, jmz, jna,
                  jnb, jnc, jnd, jne, jnf, jng, jnh, jni, jnj, jnk, jnl, jnm, jnn,
                  jno, jnp, jnq, jnr, jns, jnt, jnu, jnv, jnw, jnx, jny, jnz, joa,
                  job, joc, jod, joe, jof, jog, joh, joi, joj, jok, jol, jom, jon,
                  joo, jop, joq, jor, jos, jot, jou, jov, jow, jox, joy, joz, jpa,
                  jpb, jpc, jpd, jpe, jpf, jpg, jph, jpi, jpj, jpk, jpl, jpm, jpn,
                  jpo, jpp, jpq, jpr, jps, jpt, jpu, jpv, jpw, jpx, jpy, jpz, jqa,
                  jqb, jqc, jqd, jqe, jqf, jqg, jqh, jqi, jqj, jqk, jql, jqm, jqn,
                  jqo, jqp, jqq, jqr, jqs, jqt, jqu, jqv, jqw, jqx, jqy, jqz, jra,
                  jrb, jrc, jrd, jre, jrf, jrg, jrh, jri, jrj, jrk, jrl, jrm, jrn,
                  jro, jrp, jrq, jrr, jrs, jrt, jru, jrv, jrw, jrx, jry, jrz, jsa,
                  jsb, jsc, jsd, jse, jsf, jsg, jsh, jsi, jsj, jsk, jsl, jsm, jsn,
                  jso, jsp, jsq, jsr, jss, jst, jsu, jsv, jsw, jsx, jsy, jsz, jta,
                  jtb, jtc, jtd, jte, jtf, jtg, jth, jti, jtj, jtk, jtl, jtm, jtn,
                  jto, jtp, jtq, jtr, jts, jtt, jtu, jtv, jtw, jtx, jty, jtz, jua,
                  jub, juc, jud, jue, juf, jug, juh, jui, juj, juk, jul, jum, jun,
                  juo, jup, juq, jur, jus, jut, juu, juv, juw, jux, juy, juz, jva,
                  jvb, jvc, jvd, jve, jvf, jvg, jvh, jvi, jvj, jvk, jvl, jvm, jvn,
                  jvo, jvp, jvq, jvr, jvs, jvt, jvu, jvv, jvw, jvx, jvy, jvz, jwa,
                  jwb, jwc, jwd, jwe, jwf, jwg, jwh, jwi, jwj, jwk, jwl, jwm, jwn,
                  jwo, jwp, jwq, jwr, jws, jwt, jwu, jwv, jww, jwx, jwy, jwz, jxa,
                  jxb, jxc, jxd, jxe, jxf, jxg, jxh, qam, qaq) }
              length=4
              linear=(False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False)
              num_carry=1
              num_consts=799
              reverse=False
              unroll=1
            ] gaz gbf gbg gbh gbi gbj gbk gbl gav gat fzy gfw gfx gfy gfz gga ggb
              ggc ggd gge ggf ggg ggh ggi ggj ggk ggl ggm ggn ggo ggp fon ewa ewb
              ewc ewd ewe ewf ewg ewh ewi ewj ewk ewl ewm ewq ewx exe exi exl exm
              exn exq exr fkn fkj fkt fkp fmj fmf fmp fml fms fop ext exu exv exy
              exz fkz fkv flf flb fmy fmu fne fna fnh for eyb eyc eyd eyg eyh fll
              flh flr fln fnn fnj fnt fnp fnw fot eyj eyk eyl eyo eyp flx flt fmd
              flz foc fny foi foe fol fpt fpp fps fpu fpo fpx fqd fqg fqh fqi fqj
              fqf fqk fql fqm fqn fqv fqr fqu fqw fqq fqz frf fri frj frk frl frh
              frm frn fro frp frx frt frw fry frs fsb fsh fsk fsl fsm fsn fsj fso
              fsp fsq fsr fsz fsv fsy fta fsu ftd ftj ftm ftn fto ftp ftl ftq ftr
              fts ftt fuc fud fue fuf fug fuh fui fuj fuk ful fyu fys fzh fzi fzj
              fzk fzl fzm fzn fzo fzp fzq fzw fyy fzs fzc fzu gad gae gaf gag gah
              gai gaj gak gal gam gao epe cxo cxm cww cxa cxp epc epg cyi cyg cxq
              cxr cxs cxt cxu cxv cyj cxy cxz cya cyb cyc cyd cye cyk esc epz epx
              eba ddh cyq cyu cyy cyz cza czb czc czu czz dam ddl ddp ddt ddx deb
              def dej den der dev dez dfd dfh dfl dfp dgh dgd dhm dio djq djw djx
              djy djz dkr dkw dqy dra drs drw dsa dse dsi dsm dsq dsu dsy dtc dtg
              dtk dto dts dtw dua dup dut dux dvb dvf dvj dvn dvr dvv dvz dwd dwh
              dwl dwp dwt dwx dyz dyx dze dzf dzg dzh dzi dzj dzk dzl dzm dzn ebc
              ebi ebv ebk ebl ebm ebn ebo ebp ebq ebr ebs ecg ecd dof dod dob ddd
              dbk dag dal dbh dbf cmy dau dav daw dax day daz dba dbb dbc dbd dbm
              dbs ddb dbu dbv dbw dbx dby dbz dca dcb dcc dgg dgc dgn dgo dgp dgq
              dgr dgs dhl dhp dhq dhr dhs dht dhu din dir dis dit diu div diw djp
              cnw dld dle dlf dlg dlh dli dlj dlk dll dlm dom dou dqw dqz cnb drf
              drg drh dri drj drk drl drm drn dro duc dud due duf dug duh dui duj
              duk dul eao ebw ebx eby ebz eca ecb eci eco edb ecq ecr ecs ect ecu
              ecv ecw ecx ecy efs eft efu efv efw efx efy efz ega egb egc egd egq
              egt edl edj edw eec edt eep eei efc eev efi efn efq egu egv egw egx
              egy egz eds edq edx eeh edu eeu eej efh eew efj efp efr eha ehb ehc
              ehd ehe ehf eqf eqp eqb eqc erd eqr eqs err erf erg ert dqr eps epq
              ege egf egg egh egi egj egl ego ehg ehh ehi ehj ehk ehl eqe eqk eqa
              eqy eqq erm ere ers esd ese esf esg esh esi esr ess est esu esv esw
              esx esy esz eta etb etc etd evr evp eul evb euz ett euj euh etr evt
              evv dlq dlu dly dmc dmg dmk dmo dms dmw dna dne dni dnm dnq dnu dny
              crq dpb dpc dpd dpe dpf dpg dph dpi dpj dqo eru erv erw erx ery erz
              esj esk esl esm esn eso ete etf etg eth eti etj etk etl etm etn eto
              etp evj evh euk eut eur ets eub etz etq evs evu evx dai daq dfq dfr
              dfs dft dfu dfv dgl dge dhf dhg dhh dhi dhj dhk dhn dih dii dij dik
              dil dim dip djj djk djl djm djn djo dak dar dgt dgu dgv dgw dgx dgy
              dgf dgz dha dhb dhc dhd dhe dhv dhw dhx dhy dhz dia dho dib dic did
              die dif dig dix diy diz dja djb djc diq djd dje djf djg djh dji ely
              ejz ejx eiq eja eiy ehp ehz ehx ehm ekr elc elz ema emb emc emd eme
              ekh ekf eir eji ejg ehq eih eif ehn eks elg elq elr els elt elu elv
              emu emv emw eng enh eob eoh eoi eoj eok eol eom eon gey gez gfa gfb
              gfc gfd gfe gff gfg gfh gfi gfj gfk cvo cvj cvn cvp cvt cwa cxh cxl
              gfo gfv foy foz cwh cwp fpi fpj fpk fpl cud cuf cuh cuj crs cuo crt
              cup cru cuq crv cur crw cus cvc cux cut cuu cuv cuw cuy cuz cva cvb
              cua cub
            qas:f64[200,4,7,36] = transpose[permutation=(1, 0, 2, 3)] giw
            qat:f64[200,4,7,36] = transpose[permutation=(1, 0, 2, 3)] gix
            qau:f64[200,4,7,36] = slice[
              limit_indices=(200, 4, 7, 36)
              start_indices=(0, 0, 0, 0)
              strides=None
            ] crx
            qav:f64[200,4,7,36] = sub qas qau
            qaw:f64[200,4,7] = pjit[
              name=_cumulative_reduction
              jaxpr={ lambda ; qax:f64[200,4,7]. let
                  qay:f64[200,4,7] = cumprod[axis=1 reverse=False] qax
                in (qay,) }
            ] cry
            qaz:bool[200,4,7] = eq qaw 0.0
            qba:bool[200,4,7,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(200, 4, 7, 1)
            ] qaz
            qbb:f64[200,4,7,36] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(200, 4, 7, 36)
            ] 0.0
            qbc:f64[200,4,7,36] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(200, 4, 7, 36)
            ] 1.0
            qbd:f64[200,4,7,36] = pjit[
              name=_where
              jaxpr={ lambda ; qbe:bool[200,4,7,1] qbf:f64[200,4,7,36] qbg:f64[200,4,7,36]. let
                  qbh:bool[200,4,7] = squeeze[dimensions=(3,)] qbe
                  qbi:bool[200,4,7,36] = broadcast_in_dim[
                    broadcast_dimensions=(0, 1, 2)
                    shape=(200, 4, 7, 36)
                  ] qbh
                  qbj:f64[200,4,7,36] = select_n qbi qbg qbf
                in (qbj,) }
            ] qba qbb qbc
            qbk:f64[200,4,7,36] = mul qbd qav
            qbl:f64[200,4,7,36] = integer_pow[y=2] qbk
            qbm:f64[7] = reduce_sum[axes=(0, 1, 3)] qbl
            qbn:f64[7] = div qbm 28800.0
            qbo:f64[200,4,7,36] = neg qat
            qbp:f64[200,4,7,36] = exp qbo
            qbq:f64[200,4,7,36] = integer_pow[y=2] qbk
            qbr:f64[200,4,7,36] = integer_pow[y=1] qbk
            qbs:f64[200,4,7,36] = mul 2.0 qbr
            qbt:f64[200,4,7,36] = mul qbp qbq
            qbu:f64[7] = reduce_sum[axes=(0, 1, 3)] qbt
            qbv:f64[7] = div qbu 28800.0
            qbw:f64[200,4,7,36] = mul qbd qat
            qbx:f64[7] = reduce_sum[axes=(0, 1, 3)] qbw
            qby:f64[7] = div qbx 28800.0
            qbz:f64[] = reduce_sum[axes=(0,)] qbv
            qca:f64[] = reduce_sum[axes=(0,)] qby
            qcb:f64[] = add qbz qca
            qcc:f64[7,189,400] = integer_pow[y=2] crs
            qcd:f64[7,189,400] = integer_pow[y=1] crs
            qce:f64[7,189,400] = mul 2.0 qcd
            qcf:f64[] = reduce_sum[axes=(0, 1, 2)] qcc
            qcg:f64[] = mul 1.25e-05 qcf
            qch:f64[] = add qcb qcg
            qci:f64[7,400,400] = integer_pow[y=2] crt
            qcj:f64[7,400,400] = integer_pow[y=1] crt
            qck:f64[7,400,400] = mul 2.0 qcj
            qcl:f64[] = reduce_sum[axes=(0, 1, 2)] qci
            qcm:f64[] = mul 2.5e-05 qcl
            qcn:f64[] = add qch qcm
            qco:f64[7,400,400] = integer_pow[y=2] cru
            qcp:f64[7,400,400] = integer_pow[y=1] cru
            qcq:f64[7,400,400] = mul 2.0 qcp
            qcr:f64[] = reduce_sum[axes=(0, 1, 2)] qco
            qcs:f64[] = mul 3.75e-05 qcr
            qct:f64[] = add qcn qcs
            qcu:f64[7,400,400] = integer_pow[y=2] crv
            qcv:f64[7,400,400] = integer_pow[y=1] crv
            qcw:f64[7,400,400] = mul 2.0 qcv
            qcx:f64[] = reduce_sum[axes=(0, 1, 2)] qcu
            qcy:f64[] = mul 3.75e-05 qcx
            qcz:f64[] = add qct qcy
            qda:f64[7,400,54] = integer_pow[y=2] crw
            qdb:f64[7,400,54] = integer_pow[y=1] crw
            qdc:f64[7,400,54] = mul 2.0 qdb
            qdd:f64[] = reduce_sum[axes=(0, 1, 2)] qda
            qde:f64[] = mul 5e-05 qdd
            qdf:f64[] = add qcz qde
            qdg:f64[] = mul 5e-05 1.0
            qdh:f64[7,400,54] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(7, 400, 54)
            ] qdg
            qdi:f64[7,400,54] = mul qdh qdc
            qdj:f64[] = mul 3.75e-05 1.0
            qdk:f64[7,400,400] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(7, 400, 400)
            ] qdj
            qdl:f64[7,400,400] = mul qdk qcw
            qdm:f64[] = mul 3.75e-05 1.0
            qdn:f64[7,400,400] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(7, 400, 400)
            ] qdm
            qdo:f64[7,400,400] = mul qdn qcq
            qdp:f64[] = mul 2.5e-05 1.0
            qdq:f64[7,400,400] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(7, 400, 400)
            ] qdp
            qdr:f64[7,400,400] = mul qdq qck
            qds:f64[] = mul 1.25e-05 1.0
            qdt:f64[7,189,400] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(7, 189, 400)
            ] qds
            qdu:f64[7,189,400] = mul qdt qce
            qdv:f64[7] = broadcast_in_dim[broadcast_dimensions=() shape=(7,)] 1.0
            qdw:f64[7] = div qdv 28800.0
            qdx:f64[200,4,7,36] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(200, 4, 7, 36)
            ] qdw
            qdy:f64[200,4,7,36] = mul qbd qdx
            qdz:f64[7] = broadcast_in_dim[broadcast_dimensions=() shape=(7,)] 1.0
            qea:f64[7] = div qdz 28800.0
            qeb:f64[200,4,7,36] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(200, 4, 7, 36)
            ] qea
            qec:f64[200,4,7,36] = mul qbp qeb
            qed:f64[200,4,7,36] = mul qeb qbq
            qee:f64[200,4,7,36] = mul qec qbs
            qef:f64[200,4,7,36] = mul qbd qee
            qeg:f64[4,200,7,36] = transpose[permutation=(1, 0, 2, 3)] qef
            qeh:f64[200,4,7,36] = mul qed qbp
            qei:f64[200,4,7,36] = neg qeh
            qej:f64[200,4,7,36] = add_any qdy qei
            qek:f64[4,200,7,36] = transpose[permutation=(1, 0, 2, 3)] qej
            qel:f64[200,7,180] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(200, 7, 180)
            ] 0.0
            qem:f64[7,189,400] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(7, 189, 400)
            ] 0.0
            qen:f64[7,400] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(7, 400)
            ] 0.0
            qeo:f64[7,400,400] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(7, 400, 400)
            ] 0.0
            qep:f64[7,400] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(7, 400)
            ] 0.0
            qeq:f64[7,400,400] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(7, 400, 400)
            ] 0.0
            qer:f64[7,400] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(7, 400)
            ] 0.0
            qes:f64[7,400,400] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(7, 400, 400)
            ] 0.0
            qet:f64[7,400] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(7, 400)
            ] 0.0
            qeu:f64[7,400,54] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(7, 400, 54)
            ] 0.0
            qev:f64[7,54] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(7, 54)
            ] 0.0
            qew:f64[7,189,400] qex:f64[7,400] qey:f64[7,400,400] qez:f64[7,400] qfa:f64[7,400,400]
              qfb:f64[7,400] qfc:f64[7,400,400] qfd:f64[7,400] qfe:f64[7,400,54]
              qff:f64[7,54] _:f64[200,7,180] = scan[
              _split_transpose=False
              jaxpr={ lambda ; qfg:i32[12,1] qfh:f64[1,1,12] qfi:f64[1,1,12] qfj:f64[1,1,12]
                  qfk:f64[] qfl:f64[1,1,4] qfm:i32[1] qfn:i32[1] qfo:i32[1] qfp:i32[1]
                  qfq:i32[1] qfr:i32[1] qfs:i32[1] qft:i32[1] qfu:i32[1] qfv:i32[1]
                  qfw:i32[1] qfx:i32[1] qfy:f64[1,1,36] qfz:f64[1,1,36] qga:f64[]
                  qgb:f64[] qgc:f64[] qgd:f64[] qge:f64[] qgf:f64[] qgg:f64[] qgh:f64[]
                  qgi:f64[] qgj:f64[] qgk:f64[] qgl:f64[] qgm:f64[] qgn:f64[] qgo:f64[]
                  qgp:f64[] qgq:f64[] qgr:f64[] qgs:f64[] qgt:f64[] qgu:f64[] qgv:f64[]
                  qgw:f64[] qgx:f64[] qgy:f64[] qgz:f64[] qha:f64[] qhb:f64[1,1,12]
                  qhc:f64[1,1,12] qhd:i32[12,1] qhe:f64[1,1,12] qhf:i32[12,1] qhg:f64[1,1,12]
                  qhh:f64[1,1,12] qhi:i32[1] qhj:f64[1,1,36] qhk:i32[1] qhl:f64[1,1,12]
                  qhm:f64[1,1,18] qhn:i32[1] qho:i32[1] qhp:i32[1] qhq:i32[1] qhr:i32[1]
                  qhs:i32[1] qht:i32[1] qhu:i32[1] qhv:f64[1,1,4] qhw:i32[1] qhx:i32[1]
                  qhy:i32[1] qhz:i32[1] qia:i32[1] qib:i32[1] qic:i32[1] qid:f64[18,3]
                  qie:i32[13,1] qif:f64[1,1,13,1] qig:f64[13,3] qih:f64[1,1,12,3]
                  qii:i64[1] qij:f64[1,1,12] qik:f64[1,1,12] qil:f64[1,1,12] qim:i64[1]
                  qin:f64[13,3] qio:f64[1,1,13,3] qip:i32[1] qiq:f64[1,1,13] qir:i32[1]
                  qis:f64[1,1,13] qit:f64[1,1,13] qiu:i32[1] qiv:f64[1,1,13] qiw:f64[1,1,13]
                  qix:f64[1,1,13] qiy:f64[1,1,13,3] qiz:f64[1,1,13,1] qja:f64[1,1,13,1]
                  qjb:f64[1,1,13] qjc:i32[1] qjd:f64[1,1,13] qje:i32[1] qjf:f64[1,1,13]
                  qjg:i32[1] qjh:f64[1,1,13] qji:f64[1,1,13] qjj:f64[1,1,13] qjk:i64[4,1]
                  qjl:f64[1,1,13] qjm:f64[1,1,13] qjn:f64[1,1,13] qjo:f64[1,1,13]
                  qjp:f64[1,1,13] qjq:f64[1,1,13] qjr:f64[1,1,13] qjs:f64[1,1,13]
                  qjt:f64[1,1,13] qju:f64[1,1,13] qjv:f64[1,1,13] qjw:f64[1,1,13]
                  qjx:f64[1,1,13] qjy:f64[1,1,13] qjz:f64[1,1,13] qka:f64[1,1,13]
                  qkb:i64[4,1] qkc:i64[4,1] qkd:i32[1] qke:i32[1] qkf:i32[1] qkg:i32[1]
                  qkh:i32[1] qki:i32[1] qkj:i64[4,1] qkk:i64[4,1] qkl:i32[1] qkm:i32[1]
                  qkn:i32[1] qko:i32[1] qkp:i32[1] qkq:i32[1] qkr:i64[4,1] qks:i64[4,1]
                  qkt:i32[1] qku:i32[1] qkv:i32[1] qkw:i32[1] qkx:i32[1] qky:i32[1]
                  qkz:i64[13,1] qla:i64[4,1] qlb:i64[13,1] qlc:f64[13,3] qld:f64[1,1,13,3]
                  qle:i32[1] qlf:f64[1,1,13] qlg:i32[1] qlh:f64[1,1,13] qli:f64[1,1,13]
                  qlj:i32[1] qlk:f64[1,1,13] qll:f64[1,1,13] qlm:f64[1,1,13] qln:i32[13,1]
                  qlo:f64[1,1,13,1] qlp:i32[13,1] qlq:i32[13,1] qlr:f64[13,3] qls:f64[1,1,13,3]
                  qlt:i32[1] qlu:f64[1,1,13] qlv:i32[1] qlw:f64[1,1,13] qlx:f64[1,1,13]
                  qly:i32[1] qlz:f64[1,1,13] qma:f64[1,1,13] qmb:f64[1,1,13] qmc:f64[1,1,13]
                  qmd:f64[1,1,13] qme:f64[1,1,13] qmf:f64[1,1,13] qmg:f64[1,1,13]
                  qmh:f64[1,1,13] qmi:f64[1,1,13] qmj:f64[1,1,13] qmk:f64[1,1,13]
                  qml:f64[1,1,13] qmm:f64[1,1,13] qmn:f64[1,1,13] qmo:f64[1,1,13]
                  qmp:f64[1,1,13] qmq:f64[1,1,13] qmr:f64[1,1,13] qms:f64[1,1,13,3]
                  qmt:i32[1] qmu:f64[1,1,13] qmv:i32[1] qmw:f64[1,1,13] qmx:f64[1,1,13]
                  qmy:i32[1] qmz:f64[1,1,13] qna:f64[1,1,13] qnb:f64[1,1,13] qnc:i64[18,1]
                  qnd:f64[1,1,13] qne:f64[1,1,13] qnf:f64[1,1,13] qng:f64[1,1,13]
                  qnh:f64[1,1,13] qni:f64[1,1,13] qnj:f64[1,1,13] qnk:f64[1,1,13]
                  qnl:f64[1,1,13] qnm:f64[1,1,13] qnn:f64[1,1,13] qno:f64[1,1,13]
                  qnp:f64[1,1,13] qnq:f64[1,1,13] qnr:f64[1,1,13] qns:f64[1,1,13]
                  qnt:i64[18,1] qnu:f64[18,3] qnv:f64[1,1,18,3] qnw:i32[1] qnx:f64[1,1,18]
                  qny:i32[1] qnz:f64[1,1,18] qoa:f64[1,1,18] qob:i32[1] qoc:f64[1,1,18]
                  qod:f64[1,1,18] qoe:f64[1,1,18] qof:i32[1] qog:i32[1] qoh:i32[1]
                  qoi:i32[1] qoj:i32[1] qok:i32[1] qol:f64[1,1,18,3] qom:f64[1,1,18,1]
                  qon:f64[1,1,18,1] qoo:f64[1,1,18] qop:i32[1] qoq:f64[1,1,18] qor:i32[1]
                  qos:f64[1,1,18] qot:i32[1] qou:f64[1,1,18] qov:f64[1,1,18] qow:f64[1,1,18]
                  qox:f64[1,1,13,1] qoy:i32[6,1] qoz:f64[18,3] qpa:f64[1,1,18,3]
                  qpb:f64[1,1,18,1] qpc:f64[1,1,18,1] qpd:f64[1,1,18] qpe:i32[1]
                  qpf:f64[1,1,18] qpg:i32[1] qph:f64[1,1,18] qpi:i32[1] qpj:f64[1,1,18]
                  qpk:f64[1,1,18] qpl:f64[1,1,18] qpm:i32[1] qpn:i32[1] qpo:i32[1]
                  qpp:i32[1] qpq:i32[1] qpr:i32[1] qps:i32[1] qpt:i32[1] qpu:i32[1]
                  qpv:i32[1] qpw:i32[1] qpx:i32[1] qpy:i32[1] qpz:i32[6,1] qqa:i64[4,1]
                  qqb:i32[4,1] qqc:i64[4,1] qqd:i32[4,1] qqe:i64[4,1] qqf:i32[4,1]
                  qqg:i64[4,1] qqh:i64[13,1] qqi:i32[13,1] qqj:i32[1] qqk:i32[1]
                  qql:i32[1] qqm:i32[1] qqn:i32[1] qqo:i32[1] qqp:i32[6,1] qqq:i64[4,1]
                  qqr:i32[4,1] qqs:i64[4,1] qqt:i32[4,1] qqu:i64[4,1] qqv:i32[4,1]
                  qqw:i64[4,1] qqx:i64[13,1] qqy:i32[13,1] qqz:i32[1] qra:i32[1]
                  qrb:i32[1] qrc:i32[1] qrd:i32[1] qre:i32[1] qrf:i64[4,1] qrg:i32[4,1]
                  qrh:i64[4,1] qri:i64[4,1] qrj:i32[4,1] qrk:i64[4,1] qrl:i64[4,1]
                  qrm:i32[4,1] qrn:i64[4,1] qro:i64[4,1] qrp:i64[13,1] qrq:f64[1,1,13,1]
                  qrr:i32[6,1] qrs:i32[1] qrt:i32[1] qru:i32[1] qrv:i32[1] qrw:i32[1]
                  qrx:i32[1] qry:i32[1] qrz:i32[1] qsa:i32[1] qsb:i32[1] qsc:i32[1]
                  qsd:i32[1] qse:i32[1] qsf:i64[4,1] qsg:i32[4,1] qsh:i64[4,1] qsi:i32[4,1]
                  qsj:i64[4,1] qsk:i32[4,1] qsl:i64[4,1] qsm:i64[13,1] qsn:i32[1]
                  qso:i32[1] qsp:i32[1] qsq:i32[1] qsr:i32[1] qss:i32[1] qst:f64[1,1,13,1]
                  qsu:i32[1] qsv:i32[1] qsw:i32[1] qsx:i32[1] qsy:i32[1] qsz:i32[1]
                  qta:i32[1] qtb:i32[1] qtc:i32[1] qtd:i32[1] qte:i32[1] qtf:i32[1]
                  qtg:i32[4,1] qth:i64[4,1] qti:i32[4,1] qtj:i64[4,1] qtk:i32[4,1]
                  qtl:i64[4,1] qtm:i64[13,1] qtn:i64[18,1] qto:f64[1,1,13] qtp:f64[1,1,13]
                  qtq:f64[1,1,13] qtr:f64[1,1,13] qts:f64[1,1,13] qtt:f64[1,1,13]
                  qtu:f64[1,1,13] qtv:f64[1,1,13] qtw:f64[1,1,13] qtx:f64[1,1,13]
                  qty:f64[1,1,13] qtz:f64[1,1,13] qua:f64[1,1,13] qub:f64[1,1,13]
                  quc:f64[1,1,13] qud:f64[1,1,13] que:f64[13,3,3] quf:i32[1] qug:f64[1,1,1,3]
                  quh:i32[1] qui:f64[1,1,1,3] quj:f64[1,1,1,3] quk:i32[1] qul:f64[1,1,1,3]
                  qum:f64[1,1,1,3] qun:f64[1,1,1,3] quo:f64[1,1,13,1,1] qup:i32[1]
                  quq:i32[1] qur:i32[1] qus:i32[1] qut:i32[1] quu:i32[1] quv:i32[1]
                  quw:i32[1] qux:i32[1] quy:i32[1] quz:i32[1] qva:i32[1] qvb:i32[1]
                  qvc:i32[1] qvd:i32[1] qve:i32[1] qvf:i32[1] qvg:i32[1] qvh:i32[1]
                  qvi:i32[1] qvj:i32[1] qvk:i32[1] qvl:i32[1] qvm:i32[1] qvn:i32[4,1]
                  qvo:i64[4,1] qvp:i32[4,1] qvq:i64[4,1] qvr:i32[4,1] qvs:i64[4,1]
                  qvt:i64[13,1] qvu:i64[18,1] qvv:f64[1,1,12,3] qvw:i64[1] qvx:i32[1]
                  qvy:i32[1] qvz:i32[1] qwa:i32[1] qwb:i32[1] qwc:i32[1] qwd:i64[4,1]
                  qwe:i64[4,1] qwf:i32[1] qwg:i32[1] qwh:i32[1] qwi:i32[1] qwj:i32[1]
                  qwk:i32[1] qwl:i64[4,1] qwm:i32[1] qwn:i32[1] qwo:i32[1] qwp:i32[1]
                  qwq:i32[1] qwr:i32[1] qws:i64[4,1] qwt:i32[1] qwu:i32[1] qwv:i32[1]
                  qww:i32[1] qwx:i32[1] qwy:i32[1] qwz:i64[13,1] qxa:f64[1,1,12,3]
                  qxb:i64[1] qxc:i64[4,1] qxd:i32[1] qxe:i32[1] qxf:i32[1] qxg:i32[1]
                  qxh:i32[1] qxi:i32[1] qxj:i64[4,1] qxk:i32[1] qxl:i32[1] qxm:i32[1]
                  qxn:i32[1] qxo:i32[1] qxp:i32[1] qxq:i32[1] qxr:i32[1] qxs:i32[1]
                  qxt:i32[1] qxu:i32[1] qxv:i32[1] qxw:i64[4,1] qxx:i32[1] qxy:i32[1]
                  qxz:i32[1] qya:i32[1] qyb:i32[1] qyc:i32[1] qyd:i32[1] qye:i32[1]
                  qyf:i32[1] qyg:i32[1] qyh:i32[1] qyi:i32[1] qyj:i64[4,1] qyk:i32[1]
                  qyl:i32[1] qym:i32[1] qyn:i32[1] qyo:i32[1] qyp:i32[1] qyq:i64[13,1]
                  qyr:f64[1,1,18,1] qys:i32[4,1] qyt:i64[4,1] qyu:i32[4,1] qyv:i64[4,1]
                  qyw:i32[4,1] qyx:i64[4,1] qyy:i64[13,1] qyz:i64[18,1] qza:i32[1]
                  qzb:i32[1] qzc:i32[1] qzd:i32[1] qze:i32[1] qzf:i32[1] qzg:i32[4,1]
                  qzh:i64[4,1] qzi:i32[4,1] qzj:i64[4,1] qzk:i32[4,1] qzl:i64[4,1]
                  qzm:i64[13,1] qzn:i64[18,1] qzo:i32[1] qzp:i32[1] qzq:i32[1] qzr:i32[1]
                  qzs:i32[1] qzt:i32[1] qzu:f64[1,1,18,18] qzv:bool[200,7,18,18]
                  qzw:bool[200,7,18,18] qzx:f64[1,1,4] qzy:i32[1] qzz:i32[1] raa:i32[1]
                  rab:i32[1] rac:i32[1] rad:i32[1] rae:i32[1] raf:i32[1] rag:i32[1]
                  rah:i32[1] rai:i32[1] raj:i32[1] rak:i32[1] ral:f64[1,1,36] ram:i32[1]
                  ran:f64[1,1,36] rao:f64[1,1,36] rap:f64[1,1,36] raq:f64[1,1,180]
                  rar:f64[7,189,400] ras:f64[7,400,400] rat:f64[7,400,400] rau:f64[7,400,400]
                  rav:f64[7,400,54] raw:f64[7,189,400] rax:f64[7,400] ray:f64[7,400,400]
                  raz:f64[7,400] rba:f64[7,400,400] rbb:f64[7,400] rbc:f64[7,400,400]
                  rbd:f64[7,400] rbe:f64[7,400,54] rbf:f64[7,54] rbg:f64[200,7,180]
                  rbh:f64[200,7,36] rbi:f64[200,7,36] rbj:f64[200,7,189] rbk:f64[200,7,400]
                  rbl:f64[200,7,400] rbm:f64[200,7,400] rbn:f64[200,7,400] rbo:f64[200,7,400]
                  rbp:f64[200,7,400] rbq:f64[200,7,400] rbr:f64[200,7,400] rbs:f64[200,7,400]
                  rbt:f64[200,7,400] rbu:f64[200,7,400] rbv:f64[200,7,400] rbw:f64[200,7,400]
                  rbx:f64[200,7,400] rby:f64[200,7,400] rbz:f64[200,7,400] rca:f64[1,200,7,3]
                  rcb:f64[1,200,7,3] rcc:f64[1,200,7,1] rcd:f64[1,200,7] rce:f64[1,200,7,1]
                  rcf:f64[1,200,7,3] rcg:f64[1,200,7,1] rch:f64[1,200,7] rci:f64[1,200,7]
                  rcj:f64[1,200,7] rck:f64[1,200,7] rcl:f64[1,200,7] rcm:f64[1,200,7]
                  rcn:f64[1,200,7,3] rco:f64[1,200,7,3] rcp:f64[1,200,7,1] rcq:f64[1,200,7]
                  rcr:f64[1,200,7,1] rcs:f64[1,200,7,3] rct:f64[1,200,7,1] rcu:f64[1,200,7]
                  rcv:f64[1,200,7] rcw:f64[1,200,7] rcx:f64[1,200,7] rcy:f64[1,200,7]
                  rcz:f64[1,200,7] rda:f64[1,200,7,12] rdb:f64[1,200,7,12] rdc:f64[1,200,7,12]
                  rdd:f64[1,200,7,12] rde:f64[1,200,7,12,1] rdf:bool[1,200,7,12,4]
                  rdg:f64[1,200,7,12,4] rdh:f64[1,200,7,12] rdi:bool[1,200,7,12]
                  rdj:f64[1,200,7,12,4] rdk:f64[1,200,7,12,1] rdl:f64[1,200,7,13,3]
                  rdm:f64[1,200,7,13,1] rdn:f64[1,200,7,13] rdo:f64[1,200,7,13,3]
                  rdp:f64[1,200,7,13,1] rdq:f64[1,200,7,4,3] rdr:f64[1,200,7,4,3]
                  rds:f64[1,200,7,4,1] rdt:f64[1,200,7,4] rdu:f64[1,200,7,4,1] rdv:f64[1,200,7,4,3]
                  rdw:f64[1,200,7,4,1] rdx:f64[1,200,7,4] rdy:f64[1,200,7,4] rdz:f64[1,200,7,4]
                  rea:f64[1,200,7,4] reb:f64[1,200,7,4] rec:f64[1,200,7,4] red:f64[1,200,7,4]
                  ree:f64[1,200,7,4] ref:f64[1,200,7,4] reg:f64[1,200,7,4] reh:f64[1,200,7,4]
                  rei:f64[1,200,7,4] rej:f64[1,200,7,4] rek:f64[1,200,7,4] rel:f64[1,200,7,4]
                  rem:f64[1,200,7,4] ren:f64[1,200,7,4] reo:f64[1,200,7,4] rep:f64[1,200,7,4]
                  req:f64[1,200,7,4] rer:f64[1,200,7,4] res:f64[1,200,7,4] ret:f64[1,200,7,4]
                  reu:f64[1,200,7,4] rev:f64[1,200,7,4] rew:f64[1,200,7,4] rex:f64[1,200,7,4]
                  rey:f64[1,200,7,4] rez:f64[1,200,7,4] rfa:f64[1,200,7,4] rfb:f64[1,200,7,4]
                  rfc:f64[1,200,7,4] rfd:f64[1,200,7,4] rfe:f64[1,200,7,4] rff:f64[1,200,7,4]
                  rfg:f64[1,200,7,4] rfh:f64[1,200,7,4] rfi:f64[1,200,7,4] rfj:f64[1,200,7,4,3]
                  rfk:f64[1,200,7,4,3] rfl:f64[1,200,7,4,1] rfm:f64[1,200,7,4] rfn:f64[1,200,7,4,1]
                  rfo:f64[1,200,7,4,3] rfp:f64[1,200,7,4,1] rfq:f64[1,200,7,4] rfr:f64[1,200,7,4]
                  rfs:f64[1,200,7,4] rft:f64[1,200,7,4] rfu:f64[1,200,7,4] rfv:f64[1,200,7,4]
                  rfw:f64[1,200,7,4] rfx:f64[1,200,7,4] rfy:f64[1,200,7,4] rfz:f64[1,200,7,4]
                  rga:f64[1,200,7,4] rgb:f64[1,200,7,4] rgc:f64[1,200,7,4] rgd:f64[1,200,7,4]
                  rge:f64[1,200,7,4] rgf:f64[1,200,7,4] rgg:f64[1,200,7,4] rgh:f64[1,200,7,4]
                  rgi:f64[1,200,7,4] rgj:f64[1,200,7,4] rgk:f64[1,200,7,4] rgl:f64[1,200,7,4]
                  rgm:f64[1,200,7,4] rgn:f64[1,200,7,4] rgo:f64[1,200,7,4] rgp:f64[1,200,7,4]
                  rgq:f64[1,200,7,4] rgr:f64[1,200,7,4] rgs:f64[1,200,7,4] rgt:f64[1,200,7,4]
                  rgu:f64[1,200,7,4] rgv:f64[1,200,7,4] rgw:f64[1,200,7,4] rgx:f64[1,200,7,4]
                  rgy:f64[1,200,7,4] rgz:f64[1,200,7,4] rha:f64[1,200,7,4] rhb:f64[1,200,7,4]
                  rhc:f64[1,200,7,4,3] rhd:f64[1,200,7,4,3] rhe:f64[1,200,7,4,1]
                  rhf:f64[1,200,7,4] rhg:f64[1,200,7,4,1] rhh:f64[1,200,7,4,3] rhi:f64[1,200,7,4,1]
                  rhj:f64[1,200,7,4] rhk:f64[1,200,7,4] rhl:f64[1,200,7,4] rhm:f64[1,200,7,4]
                  rhn:f64[1,200,7,4] rho:f64[1,200,7,4] rhp:f64[1,200,7,4] rhq:f64[1,200,7,4]
                  rhr:f64[1,200,7,4] rhs:f64[1,200,7,4] rht:f64[1,200,7,4] rhu:f64[1,200,7,4]
                  rhv:f64[1,200,7,4] rhw:f64[1,200,7,4] rhx:f64[1,200,7,4] rhy:f64[1,200,7,4]
                  rhz:f64[1,200,7,4] ria:f64[1,200,7,4] rib:f64[1,200,7,4] ric:f64[1,200,7,4]
                  rid:f64[1,200,7,4] rie:f64[1,200,7,4] rif:f64[1,200,7,4] rig:f64[1,200,7,4]
                  rih:f64[1,200,7,4] rii:f64[1,200,7,4] rij:f64[1,200,7,4] rik:f64[1,200,7,4]
                  ril:f64[1,200,7,4] rim:f64[1,200,7,4] rin:f64[1,200,7,4] rio:f64[1,200,7,4]
                  rip:f64[1,200,7,4] riq:f64[1,200,7,4] rir:f64[1,200,7,4] ris:f64[1,200,7,4]
                  rit:f64[1,200,7,4] riu:f64[1,200,7,4] riv:f64[1,200,7,13,1] riw:bool[1,200,7,13,4]
                  rix:f64[1,200,7,13,4] riy:f64[1,200,7,13] riz:bool[1,200,7,13]
                  rja:f64[1,200,7,13,4] rjb:f64[1,200,7,13,1] rjc:f64[1,200,7,13,3]
                  rjd:f64[1,200,7,13,1] rje:f64[1,200,7,13] rjf:f64[1,200,7,13,3]
                  rjg:f64[1,200,7,13,1] rjh:f64[1,200,7,13,3] rji:f64[1,200,7,13,1]
                  rjj:f64[1,200,7,13] rjk:f64[1,200,7,13,3] rjl:f64[1,200,7,13,1]
                  rjm:f64[1,200,7,13,3] rjn:f64[1,200,7,13,1] rjo:f64[1,200,7,13]
                  rjp:f64[1,200,7,13,3] rjq:f64[1,200,7,13,1] rjr:f64[1,200,7,18,3]
                  rjs:f64[1,200,7,18,1] rjt:f64[1,200,7,18] rju:f64[1,200,7,18,3]
                  rjv:f64[1,200,7,18,1] rjw:f64[1,200,7,18] rjx:f64[1,200,7,18] rjy:f64[1,200,7,18]
                  rjz:f64[1,200,7,18] rka:f64[1,200,7,18] rkb:f64[1,200,7,18] rkc:f64[1,200,7,18,3]
                  rkd:f64[1,200,7,18,3] rke:f64[1,200,7,18,1] rkf:f64[1,200,7,18,3]
                  rkg:f64[1,200,7,1,6] rkh:f64[1,200,7,1,1] rki:f64[1,200,7,1,6]
                  rkj:f64[1,200,7,1,1] rkk:f64[1,200,7,1,6] rkl:f64[1,200,7,1,1]
                  rkm:f64[1,200,7,1,1] rkn:f64[1,200,7,1,1] rko:f64[1,200,7,1,1]
                  rkp:f64[1,200,7,18,1] rkq:f64[1,200,7,1,6] rkr:f64[1,200,7,1,1]
                  rks:f64[1,200,7,1,6] rkt:f64[1,200,7,1,1] rku:f64[1,200,7,1,6]
                  rkv:f64[1,200,7,1,1] rkw:f64[1,200,7,1,1] rkx:f64[1,200,7,1,1]
                  rky:f64[1,200,7,1,1] rkz:f64[1,200,7,12] rla:f64[1,200,7,12] rlb:f64[1,200,7,12]
                  rlc:f64[1,200,7,12] rld:f64[1,200,7,12] rle:f64[1,200,7,12] rlf:f64[1,200,7,12]
                  rlg:f64[1,200,7,12] rlh:f64[1,200,7,12] rli:f64[1,200,7,12] rlj:f64[1,200,7,12]
                  rlk:f64[1,200,7,12] rll:f64[1,200,7,6,1] rlm:f64[1,200,7,6,3] rln:f64[1,200,7,4,1]
                  rlo:f64[1,200,7,4,3] rlp:f64[1,200,7,4,1] rlq:f64[1,200,7,4,3]
                  rlr:f64[1,200,7,4,1] rls:f64[1,200,7,4,3] rlt:f64[1,200,7,1,6]
                  rlu:f64[1,200,7,1,1] rlv:f64[1,200,7,1,6] rlw:f64[1,200,7,1,1]
                  rlx:f64[1,200,7,1,6] rly:f64[1,200,7,1,1] rlz:f64[1,200,7,1,1]
                  rma:f64[1,200,7,1,1] rmb:f64[1,200,7,1,1] rmc:f64[1,200,7,12] rmd:f64[1,200,7,12]
                  rme:f64[1,200,7,12] rmf:f64[1,200,7,12] rmg:f64[1,200,7,12] rmh:f64[1,200,7,12]
                  rmi:f64[1,200,7,6,1] rmj:f64[1,200,7,6,3] rmk:f64[1,200,7,4,1]
                  rml:f64[1,200,7,4,3] rmm:f64[1,200,7,4,1] rmn:f64[1,200,7,4,3]
                  rmo:f64[1,200,7,4,1] rmp:f64[1,200,7,4,3] rmq:f64[1,200,7,13] rmr:f64[1,200,7,13]
                  rms:f64[1,200,7,13] rmt:f64[1,200,7,13] rmu:f64[1,200,7,13] rmv:f64[1,200,7,13]
                  rmw:f64[1,200,7,13] rmx:f64[1,200,7,13] rmy:f64[1,200,7,13] rmz:f64[1,200,7,13]
                  rna:f64[1,200,7,13] rnb:f64[1,200,7,13] rnc:f64[1,200,7,13] rnd:f64[1,200,7,13]
                  rne:f64[1,200,7,13] rnf:f64[1,200,7,13] rng:f64[1,200,7,13] rnh:f64[1,200,7,13]
                  rni:f64[1,200,7,18,3] rnj:f64[1,200,7,13] rnk:f64[1,200,7,13] rnl:f64[1,200,7,13]
                  rnm:f64[1,200,7,13,4] rnn:f64[1,200,7,13] rno:f64[1,200,7,13] rnp:f64[1,200,7,13]
                  rnq:f64[1,200,7,13] rnr:f64[1,200,7,13] rns:f64[1,200,7,13] rnt:f64[1,200,7,13,3,3]
                  rnu:f64[1,13,200,7,3,3] rnv:f64[1,200,7,13,3,3] rnw:f64[1,200,7,13,3,3]
                  rnx:f64[1,200,7,13,3] rny:f64[1,200,7,13,3,3] rnz:f64[1,200,7,13]
                  roa:f64[1,200,7,13] rob:f64[1,200,7,13] roc:f64[1,200,7,13] rod:f64[1,200,7,13]
                  roe:f64[1,200,7,13] rof:f64[1,200,7,13,3] rog:f64[1,200,7,13] roh:f64[1,200,7,13]
                  roi:f64[1,200,7,13] roj:f64[1,200,7,13] rok:f64[1,200,7,13] rol:f64[1,200,7,13]
                  rom:f64[1,200,7,13] ron:f64[1,200,7,13] roo:f64[1,200,7,13] rop:f64[1,200,7,13]
                  roq:f64[1,200,7,13] ror:f64[1,200,7,13] ros:f64[1,200,7,13] rot:f64[1,200,7,13]
                  rou:f64[1,200,7,13] rov:f64[1,200,7,13] row:f64[1,200,7,13] rox:f64[1,200,7,13]
                  roy:f64[1,200,7,1,3] roz:f64[1,200,7,1,3] rpa:f64[1,200,7,1,1]
                  rpb:f64[1,200,7,1] rpc:f64[1,200,7,1,1] rpd:f64[1,200,7,1,3] rpe:f64[1,200,7,1,1]
                  rpf:f64[1,200,7,1] rpg:f64[1,200,7,1] rph:f64[1,200,7,1] rpi:f64[1,200,7,1]
                  rpj:f64[1,200,7,1] rpk:f64[1,200,7,1] rpl:f64[1,200,7,4,3] rpm:f64[1,200,7,4,3]
                  rpn:f64[1,200,7,4,1] rpo:f64[1,200,7,4] rpp:f64[1,200,7,4,1] rpq:f64[1,200,7,4,3]
                  rpr:f64[1,200,7,4,1] rps:f64[1,200,7,4] rpt:f64[1,200,7,4] rpu:f64[1,200,7,4]
                  rpv:f64[1,200,7,4] rpw:f64[1,200,7,4] rpx:f64[1,200,7,4] rpy:f64[1,200,7,4,3]
                  rpz:f64[1,200,7,4,3] rqa:f64[1,200,7,4,1] rqb:f64[1,200,7,4] rqc:f64[1,200,7,4,1]
                  rqd:f64[1,200,7,4,3] rqe:f64[1,200,7,4,1] rqf:f64[1,200,7,4] rqg:f64[1,200,7,4]
                  rqh:f64[1,200,7,4] rqi:f64[1,200,7,4] rqj:f64[1,200,7,4] rqk:f64[1,200,7,4]
                  rql:f64[1,200,7,4,3] rqm:f64[1,200,7,4,3] rqn:f64[1,200,7,4,1]
                  rqo:f64[1,200,7,4] rqp:f64[1,200,7,4,1] rqq:f64[1,200,7,4,3] rqr:f64[1,200,7,4,1]
                  rqs:f64[1,200,7,4] rqt:f64[1,200,7,4] rqu:f64[1,200,7,4] rqv:f64[1,200,7,4]
                  rqw:f64[1,200,7,4] rqx:f64[1,200,7,4] rqy:f64[1,200,7,4] rqz:f64[1,200,7,4]
                  rra:f64[1,200,7,4] rrb:f64[1,200,7,4] rrc:f64[1,200,7,4] rrd:f64[1,200,7,4]
                  rre:f64[1,200,7,4,3] rrf:f64[1,200,7,4,3] rrg:f64[1,200,7,4,1]
                  rrh:f64[1,200,7,4] rri:f64[1,200,7,4,1] rrj:f64[1,200,7,4,3] rrk:f64[1,200,7,4,1]
                  rrl:f64[1,200,7,4] rrm:f64[1,200,7,4] rrn:f64[1,200,7,4] rro:f64[1,200,7,4]
                  rrp:f64[1,200,7,4] rrq:f64[1,200,7,4] rrr:f64[1,200,7,4] rrs:f64[1,200,7,4]
                  rrt:f64[1,200,7,4] rru:f64[1,200,7,4] rrv:f64[1,200,7,4] rrw:f64[1,200,7,4]
                  rrx:f64[1,200,7,4,3] rry:f64[1,200,7,4,3] rrz:f64[1,200,7,4,1]
                  rsa:f64[1,200,7,4] rsb:f64[1,200,7,4,1] rsc:f64[1,200,7,4,3] rsd:f64[1,200,7,4,1]
                  rse:f64[1,200,7,4] rsf:f64[1,200,7,4] rsg:f64[1,200,7,4] rsh:f64[1,200,7,4]
                  rsi:f64[1,200,7,4] rsj:f64[1,200,7,4] rsk:f64[1,200,7,4] rsl:f64[1,200,7,4]
                  rsm:f64[1,200,7,4] rsn:f64[1,200,7,4] rso:f64[1,200,7,4] rsp:f64[1,200,7,4]
                  rsq:f64[1,200,7,4,3] rsr:f64[1,200,7,4,3] rss:f64[1,200,7,4,1]
                  rst:f64[1,200,7,4] rsu:f64[1,200,7,4,1] rsv:f64[1,200,7,4,3] rsw:f64[1,200,7,4,1]
                  rsx:f64[1,200,7,4] rsy:f64[1,200,7,4] rsz:f64[1,200,7,4] rta:f64[1,200,7,4]
                  rtb:f64[1,200,7,4] rtc:f64[1,200,7,4] rtd:f64[1,200,7,18,3] rte:f64[1,200,7,18]
                  rtf:f64[1,200,7,18] rtg:f64[1,200,7,18] rth:f64[1,200,7,18] rti:f64[1,200,7,18]
                  rtj:f64[1,200,7,18] rtk:f64[1,200,7,18,3] rtl:f64[1,200,7,18,3,3]
                  rtm:f64[1,200,7,18] rtn:f64[1,200,7,18] rto:f64[1,200,7,18] rtp:f64[1,200,7,18]
                  rtq:f64[1,200,7,18] rtr:f64[1,200,7,18] rts:f64[1,200,7,18,18]
                  rtt:f64[1,200,7,18,18] rtu:f64[1,200,7,18,18] rtv:f64[1,4,200,7,18,18]
                  rtw:f64[1,4,200,7,18,18] rtx:f64[1,4,200,7,18,18] rty:f64[1,4,200,7,18]
                  rtz:f64[1,4,200,7,18,18] rua:f64[1,4,200,7,12] rub:bool[1,4,200,7,12]
                  ruc:f64[1,4,200,7,12] rud:f64[1,4,200,7,12] rue:f64[1,4,200,7,12]
                  ruf:f64[1,4,200,7,12] rug:bool[1,4,200,7,12] ruh:bool[1,4,200,7,12]
                  rui:bool[1,4,200,7,3] ruj:bool[1,4,200,7] ruk:f64[1,4,200,7,3]
                  rul:f64[1,4,200,7,3] rum:f64[1,4,200,7,1] run:f64[1,4,200,7] ruo:f64[1,4,200,7,1]
                  rup:f64[1,4,200,7,3] ruq:f64[1,4,200,7,1] rur:f64[1,4,200,7] rus:f64[1,4,200,7]
                  rut:f64[1,4,200,7] ruu:f64[1,4,200,7] ruv:f64[1,4,200,7] ruw:f64[1,4,200,7]
                  rux:f64[1,4,200,7,3] ruy:f64[1,4,200,7,3] ruz:f64[1,4,200,7,1]
                  rva:f64[1,4,200,7] rvb:f64[1,4,200,7,1] rvc:f64[1,4,200,7,3] rvd:f64[1,4,200,7,1]
                  rve:f64[1,4,200,7] rvf:f64[1,4,200,7] rvg:f64[1,4,200,7] rvh:f64[1,4,200,7]
                  rvi:f64[1,4,200,7] rvj:f64[1,4,200,7] rvk:f64[1,4,200,7] rvl:f64[1,4,200,7]
                  rvm:f64[1,4,200,7] rvn:bool[1,4,200,7] rvo:f64[1,4,200,7] rvp:f64[1,4,200,7]
                  rvq:f64[1,4,200,7] rvr:f64[1,4,200,7] rvs:f64[1,4,200,7] rvt:bool[1,4,200,7,3]
                  rvu:bool[1,4,200,7] rvv:bool[1,4,200,7] rvw:f64[1,4,200,7] rvx:f64[1,4,200,7]
                  rvy:f64[1,4,200,7] rvz:f64[1,4,200,7] rwa:f64[1,4,200,7] rwb:bool[1,4,200,7,3]
                  rwc:bool[1,4,200,7] rwd:bool[1,4,200,7] rwe:f64[1,4,200,7] rwf:f64[1,4,200,7]
                  rwg:f64[1,4,200,7] rwh:f64[1,4,200,7] rwi:f64[1,4,200,7] rwj:bool[1,4,200,7,3]
                  rwk:bool[1,4,200,7] rwl:bool[1,4,200,7] rwm:f64[1,4,200,7] rwn:f64[1,4,200,7]
                  rwo:f64[1,4,200,7] rwp:f64[1,4,200,7] rwq:f64[1,4,200,7] rwr:f64[1,4,200,7]
                  rws:f64[1,4,200,7] rwt:f64[1,4,200,7] rwu:f64[1,4,200,7] rwv:f64[1,4,200,7]
                  rww:f64[1,4,200,7] rwx:f64[1,4,200,7] rwy:f64[1,4,200,7] rwz:f64[1,4,200,7]
                  rxa:f64[1,4,200,7] rxb:f64[1,4,200,7] rxc:f64[1,4,200,7] rxd:f64[1,4,200,7]
                  rxe:f64[1,4,200,7] rxf:f64[1,4,200,7] rxg:f64[1,4,200,7] rxh:f64[1,4,200,7]
                  rxi:f64[1,4,200,7] rxj:f64[1,4,200,7] rxk:f64[1,4,200,7] rxl:f64[1,4,200,7]
                  rxm:f64[1,4,200,7] rxn:f64[1,4,200,7] rxo:f64[1,4,200,7] rxp:f64[1,4,200,7]
                  rxq:f64[1,4,200,7] rxr:f64[1,4,200,7] rxs:f64[1,4,200,7] rxt:f64[1,4,200,7]
                  rxu:f64[1,4,200,7] rxv:f64[1,4,200,7] rxw:f64[1,4,200,7] rxx:f64[1,4,200,7]
                  rxy:f64[1,4,200,7] rxz:f64[1,4,200,7] rya:f64[1,4,200,7] ryb:f64[1,4,200,7]
                  ryc:f64[1,4,200,7] ryd:f64[1,4,200,7] rye:f64[1,4,200,7] ryf:f64[1,4,200,7]
                  ryg:f64[1,4,200,7] ryh:f64[1,4,200,7] ryi:f64[1,4,200,7] ryj:f64[1,4,200,7]
                  ryk:f64[1,4,200,7] ryl:f64[1,4,200,7] rym:f64[1,4,200,7] ryn:f64[1,4,200,7]
                  ryo:f64[1,4,200,7] ryp:f64[1,4,200,7] ryq:f64[1,4,200,7] ryr:f64[1,4,200,7]
                  rys:f64[1,4,200,7] ryt:f64[1,4,200,7] ryu:f64[1,4,200,7] ryv:f64[1,4,200,7]
                  ryw:f64[1,4,200,7] ryx:f64[1,4,200,7] ryy:f64[1,4,200,7] ryz:f64[1,4,200,7]
                  rza:f64[1,4,200,7] rzb:f64[1,4,200,7] rzc:f64[1,4,200,7] rzd:f64[1,4,200,7]
                  rze:f64[1,4,200,7] rzf:f64[1,4,200,7] rzg:f64[1,4,200,7] rzh:f64[1,4,200,7]
                  rzi:f64[1,4,200,7] rzj:f64[1,4,200,7] rzk:f64[1,4,200,7] rzl:f64[1,4,200,7]
                  rzm:f64[1,4,200,7] rzn:f64[1,4,200,7] rzo:f64[1,4,200,7] rzp:f64[1,4,200,7]
                  rzq:f64[1,4,200,7] rzr:f64[1,4,200,7] rzs:f64[1,4,200,7] rzt:f64[1,4,200,7]
                  rzu:f64[1,4,200,7] rzv:f64[1,4,200,7] rzw:f64[1,4,200,7] rzx:f64[1,4,200,7]
                  rzy:f64[1,4,200,7] rzz:f64[1,4,200,7] saa:f64[1,4,200,7] sab:f64[1,4,200,7]
                  sac:f64[1,4,200,7] sad:f64[1,4,200,7] sae:f64[1,4,200,7] saf:f64[1,4,200,7]
                  sag:f64[1,4,200,7] sah:f64[1,4,200,7] sai:f64[1,4,200,7] saj:f64[1,4,200,7]
                  sak:f64[1,4,200,7] sal:f64[1,4,200,7] sam:f64[1,4,200,7] san:f64[1,4,200,7]
                  sao:f64[1,4,200,7] sap:f64[1,4,200,7] saq:f64[1,4,200,7] sar:f64[1,4,200,7]
                  sas:f64[1,4,200,7] sat:f64[1,4,200,7] sau:f64[1,4,200,7] sav:f64[1,4,200,7]
                  saw:f64[1,4,200,7] sax:f64[1,4,200,7] say:f64[1,4,200,7] saz:f64[1,4,200,7]
                  sba:f64[1,4,200,7] sbb:f64[1,4,200,7] sbc:f64[1,4,200,7] sbd:f64[1,4,200,7]
                  sbe:f64[1,4,200,7] sbf:f64[1,4,200,7] sbg:f64[1,4,200,7] sbh:f64[1,4,200,7]
                  sbi:f64[1,4,200,7] sbj:f64[1,4,200,7] sbk:f64[1,4,200,7] sbl:f64[1,4,200,7]
                  sbm:f64[1,4,200,7] sbn:f64[1,4,200,7] sbo:f64[1,4,200,7] sbp:f64[1,4,200,7,12]
                  sbq:f64[1,4,200,7,12] sbr:f64[1,4,200,7,12] sbs:f64[1,4,200,7,12]
                  sbt:f64[1,4,200,7,12] sbu:f64[1,4,200,7,12] sbv:f64[1,4,200,7,12]
                  sbw:f64[1,4,200,7,12] sbx:f64[1,4,200,7,1] sby:f64[1,4,200,7,1]
                  sbz:f64[1,4,200,7,1,3] sca:f64[1,4,200,7,1] scb:f64[1,4,200,7,1]
                  scc:f64[1,4,200,7,1,1] scd:f64[1,4,200,7,1,1] sce:f64[1,4,200,7,1]
                  scf:f64[1,4,200,7,1] scg:f64[1,4,200,7,1] sch:f64[1,4,200,7,1]
                  sci:f64[1,4,200,7,1] scj:f64[1,4,200,7,1] sck:f64[1,4,200,7,1]
                  scl:f64[1,4,200,7,1] scm:f64[1,4,200,7,1] scn:f64[1,4,200,7,1]
                  sco:f64[1,4,200,7,1] scp:f64[1,4,200,7,1] scq:f64[1,4,200,7,1]
                  scr:f64[1,4,200,7,1] scs:f64[1,4,200,7,1] sct:f64[1,4,200,7,1]
                  scu:f64[1,4,200,7,1] scv:f64[1,4,200,7,1] scw:f64[1,4,200,7,1]
                  scx:f64[1,4,200,7,1] scy:f64[1,4,200,7,1] scz:f64[1,4,200,7,1]
                  sda:f64[1,4,200,7,1] sdb:f64[1,4,200,7,1] sdc:f64[1,4,200,7,1]
                  sdd:f64[1,4,200,7,1] sde:f64[1,4,200,7,1] sdf:f64[1,4,200,7,1]
                  sdg:f64[1,4,200,7,1] sdh:f64[1,4,200,7,1] sdi:f64[1,4,200,7,1]
                  sdj:f64[1,4,200,7,1] sdk:f64[1,4,200,7,1] sdl:f64[1,4,200,7,1]
                  sdm:f64[1,4,200,7,1] sdn:f64[1,4,200,7,1] sdo:f64[1,4,200,7,1]
                  sdp:f64[1,4,200,7,1] sdq:f64[1,4,200,7,1] sdr:f64[1,4,200,7,1,1]
                  sds:f64[1,4,200,7,1,4] sdt:f64[1,4,200,7,1] sdu:f64[1,4,200,7,1,1]
                  sdv:f64[1,200,7,3] sdw:f64[1,200,7,3] sdx:f64[1,200,7,1] sdy:f64[1,200,7]
                  sdz:f64[1,200,7,1] sea:f64[1,200,7,3] seb:f64[1,200,7,1] sec:f64[1,200,7]
                  sed:f64[1,200,7] see:f64[1,200,7] sef:f64[1,200,7] seg:f64[1,200,7]
                  seh:f64[1,200,7] sei:f64[1,200,7,3] sej:f64[1,200,7,3] sek:f64[1,200,7,1]
                  sel:f64[1,200,7] sem:f64[1,200,7,1] sen:f64[1,200,7,3] seo:f64[1,200,7,1]
                  sep:f64[1,200,7] seq:f64[1,200,7] ser:f64[1,200,7] ses:f64[1,200,7]
                  set:f64[1,200,7] seu:f64[1,200,7] sev:f64[1,200,7] sew:f64[1,200,7]
                  sex:f64[1,200,7] sey:f64[1,200,7] sez:f64[1,200,7] sfa:f64[200,7,36]
                  sfb:f64[200,7,36]. let
                  sfc:f64[200,7,36] = pjit[name=softplus jaxpr=softplus2] sfb rbi
                  sfd:f64[200,7,36] = neg sfc
                  sfe:f64[200,7,36] = pjit[name=softplus jaxpr=softplus2] sfa sfd
                  sff:f64[200,7,36] = neg sfe
                  sfg:f64[200,7,54] = pad[
                    padding_config=((0, 0, 0), (0, 0, 0), (18, 0, 0))
                  ] sff 0.0
                  sfh:f64[200,7,36] = slice[
                    limit_indices=(200, 7, 36)
                    start_indices=(0, 0, 0)
                    strides=None
                  ] rbg
                  sfi:f64[200,7,144] = slice[
                    limit_indices=(200, 7, 180)
                    start_indices=(0, 0, 36)
                    strides=None
                  ] rbg
                  sfj:f64[200,7,36] = add_any rbh sfh
                  sfk:f64[200,7,180] = pad[
                    padding_config=((0, 0, 0), (0, 0, 0), (0, 36, 0))
                  ] sfi 0.0
                  sfl:f64[200,7,18] = broadcast_in_dim[
                    broadcast_dimensions=()
                    shape=(200, 7, 18)
                  ] 0.0
                  sfm:f64[200,7,18] sfn:f64[200,7,36] = scan[
                    _split_transpose=False
                    jaxpr={ lambda ; sfo:i32[12,1] sfp:f64[1,1,12] sfq:f64[1,1,12]
                        sfr:f64[1,1,12] sfs:f64[] sft:f64[1,1,4] sfu:i32[1] sfv:i32[1]
                        sfw:i32[1] sfx:i32[1] sfy:i32[1] sfz:i32[1] sga:i32[1] sgb:i32[1]
                        sgc:i32[1] sgd:i32[1] sge:i32[1] sgf:i32[1] sgg:f64[1,1,36]
                        sgh:f64[1,1,36] sgi:f64[] sgj:f64[] sgk:f64[] sgl:f64[] sgm:f64[]
                        sgn:f64[] sgo:f64[] sgp:f64[] sgq:f64[] sgr:f64[] sgs:f64[]
                        sgt:f64[] sgu:f64[] sgv:f64[] sgw:f64[] sgx:f64[] sgy:f64[]
                        sgz:f64[] sha:f64[] shb:f64[] shc:f64[] shd:f64[] she:f64[]
                        shf:f64[] shg:f64[] shh:f64[] shi:f64[] shj:f64[1,1,12] shk:f64[1,1,12]
                        shl:i32[12,1] shm:f64[1,1,12] shn:i32[12,1] sho:f64[1,1,12]
                        shp:f64[1,1,12] shq:i32[1] shr:f64[1,1,36] shs:i32[1] sht:f64[1,1,12]
                        shu:f64[1,1,18] shv:i32[1] shw:i32[1] shx:i32[1] shy:i32[1]
                        shz:i32[1] sia:i32[1] sib:i32[1] sic:i32[1] sid:f64[1,1,4]
                        sie:i32[1] sif:i32[1] sig:i32[1] sih:i32[1] sii:i32[1] sij:i32[1]
                        sik:i32[1] sil:f64[18,3] sim:i32[13,1] sin:f64[1,1,13,1]
                        sio:f64[13,3] sip:f64[1,1,12,3] siq:i64[1] sir:f64[1,1,12]
                        sis:f64[1,1,12] sit:f64[1,1,12] siu:i64[1] siv:f64[13,3]
                        siw:f64[1,1,13,3] six:i32[1] siy:f64[1,1,13] siz:i32[1] sja:f64[1,1,13]
                        sjb:f64[1,1,13] sjc:i32[1] sjd:f64[1,1,13] sje:f64[1,1,13]
                        sjf:f64[1,1,13] sjg:f64[1,1,13,3] sjh:f64[1,1,13,1] sji:f64[1,1,13,1]
                        sjj:f64[1,1,13] sjk:i32[1] sjl:f64[1,1,13] sjm:i32[1] sjn:f64[1,1,13]
                        sjo:i32[1] sjp:f64[1,1,13] sjq:f64[1,1,13] sjr:f64[1,1,13]
                        sjs:i64[4,1] sjt:f64[1,1,13] sju:f64[1,1,13] sjv:f64[1,1,13]
                        sjw:f64[1,1,13] sjx:f64[1,1,13] sjy:f64[1,1,13] sjz:f64[1,1,13]
                        ska:f64[1,1,13] skb:f64[1,1,13] skc:f64[1,1,13] skd:f64[1,1,13]
                        ske:f64[1,1,13] skf:f64[1,1,13] skg:f64[1,1,13] skh:f64[1,1,13]
                        ski:f64[1,1,13] skj:i64[4,1] skk:i64[4,1] skl:i32[1] skm:i32[1]
                        skn:i32[1] sko:i32[1] skp:i32[1] skq:i32[1] skr:i64[4,1]
                        sks:i64[4,1] skt:i32[1] sku:i32[1] skv:i32[1] skw:i32[1]
                        skx:i32[1] sky:i32[1] skz:i64[4,1] sla:i64[4,1] slb:i32[1]
                        slc:i32[1] sld:i32[1] sle:i32[1] slf:i32[1] slg:i32[1] slh:i64[13,1]
                        sli:i64[4,1] slj:i64[13,1] slk:f64[13,3] sll:f64[1,1,13,3]
                        slm:i32[1] sln:f64[1,1,13] slo:i32[1] slp:f64[1,1,13] slq:f64[1,1,13]
                        slr:i32[1] sls:f64[1,1,13] slt:f64[1,1,13] slu:f64[1,1,13]
                        slv:i32[13,1] slw:f64[1,1,13,1] slx:i32[13,1] sly:i32[13,1]
                        slz:f64[13,3] sma:f64[1,1,13,3] smb:i32[1] smc:f64[1,1,13]
                        smd:i32[1] sme:f64[1,1,13] smf:f64[1,1,13] smg:i32[1] smh:f64[1,1,13]
                        smi:f64[1,1,13] smj:f64[1,1,13] smk:f64[1,1,13] sml:f64[1,1,13]
                        smm:f64[1,1,13] smn:f64[1,1,13] smo:f64[1,1,13] smp:f64[1,1,13]
                        smq:f64[1,1,13] smr:f64[1,1,13] sms:f64[1,1,13] smt:f64[1,1,13]
                        smu:f64[1,1,13] smv:f64[1,1,13] smw:f64[1,1,13] smx:f64[1,1,13]
                        smy:f64[1,1,13] smz:f64[1,1,13] sna:f64[1,1,13,3] snb:i32[1]
                        snc:f64[1,1,13] snd:i32[1] sne:f64[1,1,13] snf:f64[1,1,13]
                        sng:i32[1] snh:f64[1,1,13] sni:f64[1,1,13] snj:f64[1,1,13]
                        snk:i64[18,1] snl:f64[1,1,13] snm:f64[1,1,13] snn:f64[1,1,13]
                        sno:f64[1,1,13] snp:f64[1,1,13] snq:f64[1,1,13] snr:f64[1,1,13]
                        sns:f64[1,1,13] snt:f64[1,1,13] snu:f64[1,1,13] snv:f64[1,1,13]
                        snw:f64[1,1,13] snx:f64[1,1,13] sny:f64[1,1,13] snz:f64[1,1,13]
                        soa:f64[1,1,13] sob:i64[18,1] soc:f64[18,3] sod:f64[1,1,18,3]
                        soe:i32[1] sof:f64[1,1,18] sog:i32[1] soh:f64[1,1,18] soi:f64[1,1,18]
                        soj:i32[1] sok:f64[1,1,18] sol:f64[1,1,18] som:f64[1,1,18]
                        son:i32[1] soo:i32[1] sop:i32[1] soq:i32[1] sor:i32[1] sos:i32[1]
                        sot:f64[1,1,18,3] sou:f64[1,1,18,1] sov:f64[1,1,18,1] sow:f64[1,1,18]
                        sox:i32[1] soy:f64[1,1,18] soz:i32[1] spa:f64[1,1,18] spb:i32[1]
                        spc:f64[1,1,18] spd:f64[1,1,18] spe:f64[1,1,18] spf:f64[1,1,13,1]
                        spg:i32[6,1] sph:f64[18,3] spi:f64[1,1,18,3] spj:f64[1,1,18,1]
                        spk:f64[1,1,18,1] spl:f64[1,1,18] spm:i32[1] spn:f64[1,1,18]
                        spo:i32[1] spp:f64[1,1,18] spq:i32[1] spr:f64[1,1,18] sps:f64[1,1,18]
                        spt:f64[1,1,18] spu:i32[1] spv:i32[1] spw:i32[1] spx:i32[1]
                        spy:i32[1] spz:i32[1] sqa:i32[1] sqb:i32[1] sqc:i32[1] sqd:i32[1]
                        sqe:i32[1] sqf:i32[1] sqg:i32[1] sqh:i32[6,1] sqi:i64[4,1]
                        sqj:i32[4,1] sqk:i64[4,1] sql:i32[4,1] sqm:i64[4,1] sqn:i32[4,1]
                        sqo:i64[4,1] sqp:i64[13,1] sqq:i32[13,1] sqr:i32[1] sqs:i32[1]
                        sqt:i32[1] squ:i32[1] sqv:i32[1] sqw:i32[1] sqx:i32[6,1]
                        sqy:i64[4,1] sqz:i32[4,1] sra:i64[4,1] srb:i32[4,1] src:i64[4,1]
                        srd:i32[4,1] sre:i64[4,1] srf:i64[13,1] srg:i32[13,1] srh:i32[1]
                        sri:i32[1] srj:i32[1] srk:i32[1] srl:i32[1] srm:i32[1] srn:i64[4,1]
                        sro:i32[4,1] srp:i64[4,1] srq:i64[4,1] srr:i32[4,1] srs:i64[4,1]
                        srt:i64[4,1] sru:i32[4,1] srv:i64[4,1] srw:i64[4,1] srx:i64[13,1]
                        sry:f64[1,1,13,1] srz:i32[6,1] ssa:i32[1] ssb:i32[1] ssc:i32[1]
                        ssd:i32[1] sse:i32[1] ssf:i32[1] ssg:i32[1] ssh:i32[1] ssi:i32[1]
                        ssj:i32[1] ssk:i32[1] ssl:i32[1] ssm:i32[1] ssn:i64[4,1]
                        sso:i32[4,1] ssp:i64[4,1] ssq:i32[4,1] ssr:i64[4,1] sss:i32[4,1]
                        sst:i64[4,1] ssu:i64[13,1] ssv:i32[1] ssw:i32[1] ssx:i32[1]
                        ssy:i32[1] ssz:i32[1] sta:i32[1] stb:f64[1,1,13,1] stc:i32[1]
                        std:i32[1] ste:i32[1] stf:i32[1] stg:i32[1] sth:i32[1] sti:i32[1]
                        stj:i32[1] stk:i32[1] stl:i32[1] stm:i32[1] stn:i32[1] sto:i32[4,1]
                        stp:i64[4,1] stq:i32[4,1] str:i64[4,1] sts:i32[4,1] stt:i64[4,1]
                        stu:i64[13,1] stv:i64[18,1] stw:f64[1,1,13] stx:f64[1,1,13]
                        sty:f64[1,1,13] stz:f64[1,1,13] sua:f64[1,1,13] sub:f64[1,1,13]
                        suc:f64[1,1,13] sud:f64[1,1,13] sue:f64[1,1,13] suf:f64[1,1,13]
                        sug:f64[1,1,13] suh:f64[1,1,13] sui:f64[1,1,13] suj:f64[1,1,13]
                        suk:f64[1,1,13] sul:f64[1,1,13] sum:f64[13,3,3] sun:i32[1]
                        suo:f64[1,1,1,3] sup:i32[1] suq:f64[1,1,1,3] sur:f64[1,1,1,3]
                        sus:i32[1] sut:f64[1,1,1,3] suu:f64[1,1,1,3] suv:f64[1,1,1,3]
                        suw:f64[1,1,13,1,1] sux:i32[1] suy:i32[1] suz:i32[1] sva:i32[1]
                        svb:i32[1] svc:i32[1] svd:i32[1] sve:i32[1] svf:i32[1] svg:i32[1]
                        svh:i32[1] svi:i32[1] svj:i32[1] svk:i32[1] svl:i32[1] svm:i32[1]
                        svn:i32[1] svo:i32[1] svp:i32[1] svq:i32[1] svr:i32[1] svs:i32[1]
                        svt:i32[1] svu:i32[1] svv:i32[4,1] svw:i64[4,1] svx:i32[4,1]
                        svy:i64[4,1] svz:i32[4,1] swa:i64[4,1] swb:i64[13,1] swc:i64[18,1]
                        swd:f64[1,1,12,3] swe:i64[1] swf:i32[1] swg:i32[1] swh:i32[1]
                        swi:i32[1] swj:i32[1] swk:i32[1] swl:i64[4,1] swm:i64[4,1]
                        swn:i32[1] swo:i32[1] swp:i32[1] swq:i32[1] swr:i32[1] sws:i32[1]
                        swt:i64[4,1] swu:i32[1] swv:i32[1] sww:i32[1] swx:i32[1]
                        swy:i32[1] swz:i32[1] sxa:i64[4,1] sxb:i32[1] sxc:i32[1]
                        sxd:i32[1] sxe:i32[1] sxf:i32[1] sxg:i32[1] sxh:i64[13,1]
                        sxi:f64[1,1,12,3] sxj:i64[1] sxk:i64[4,1] sxl:i32[1] sxm:i32[1]
                        sxn:i32[1] sxo:i32[1] sxp:i32[1] sxq:i32[1] sxr:i64[4,1]
                        sxs:i32[1] sxt:i32[1] sxu:i32[1] sxv:i32[1] sxw:i32[1] sxx:i32[1]
                        sxy:i32[1] sxz:i32[1] sya:i32[1] syb:i32[1] syc:i32[1] syd:i32[1]
                        sye:i64[4,1] syf:i32[1] syg:i32[1] syh:i32[1] syi:i32[1]
                        syj:i32[1] syk:i32[1] syl:i32[1] sym:i32[1] syn:i32[1] syo:i32[1]
                        syp:i32[1] syq:i32[1] syr:i64[4,1] sys:i32[1] syt:i32[1]
                        syu:i32[1] syv:i32[1] syw:i32[1] syx:i32[1] syy:i64[13,1]
                        syz:f64[1,1,18,1] sza:i32[4,1] szb:i64[4,1] szc:i32[4,1]
                        szd:i64[4,1] sze:i32[4,1] szf:i64[4,1] szg:i64[13,1] szh:i64[18,1]
                        szi:i32[1] szj:i32[1] szk:i32[1] szl:i32[1] szm:i32[1] szn:i32[1]
                        szo:i32[4,1] szp:i64[4,1] szq:i32[4,1] szr:i64[4,1] szs:i32[4,1]
                        szt:i64[4,1] szu:i64[13,1] szv:i64[18,1] szw:i32[1] szx:i32[1]
                        szy:i32[1] szz:i32[1] taa:i32[1] tab:i32[1] tac:f64[1,1,18,18]
                        tad:bool[200,7,18,18] tae:bool[200,7,18,18] taf:f64[1,1,4]
                        tag:i32[1] tah:i32[1] tai:i32[1] taj:i32[1] tak:i32[1] tal:i32[1]
                        tam:i32[1] tan:i32[1] tao:i32[1] tap:i32[1] taq:i32[1] tar:i32[1]
                        tas:i32[1] tat:f64[1,1,36] tau:i32[1] tav:f64[1,1,36] taw:f64[1,1,36]
                        tax:f64[1,1,36] tay:f64[200,7,18] taz:f64[200,7,36] tba:f64[200,7,3]
                        tbb:f64[200,7,3] tbc:f64[200,7,1] tbd:f64[200,7] tbe:f64[200,7,1]
                        tbf:f64[200,7,3] tbg:f64[200,7,1] tbh:f64[200,7] tbi:f64[200,7]
                        tbj:f64[200,7] tbk:f64[200,7] tbl:f64[200,7] tbm:f64[200,7]
                        tbn:f64[200,7,3] tbo:f64[200,7,3] tbp:f64[200,7,1] tbq:f64[200,7]
                        tbr:f64[200,7,1] tbs:f64[200,7,3] tbt:f64[200,7,1] tbu:f64[200,7]
                        tbv:f64[200,7] tbw:f64[200,7] tbx:f64[200,7] tby:f64[200,7]
                        tbz:f64[200,7] tca:f64[200,7,12] tcb:f64[200,7,12] tcc:f64[200,7,12]
                        tcd:f64[200,7,12] tce:f64[200,7,12,1] tcf:bool[200,7,12,4]
                        tcg:f64[200,7,12,4] tch:f64[200,7,12] tci:bool[200,7,12]
                        tcj:f64[200,7,12,4] tck:f64[200,7,12,1] tcl:f64[200,7,13,3]
                        tcm:f64[200,7,13,1] tcn:f64[200,7,13] tco:f64[200,7,13,3]
                        tcp:f64[200,7,13,1] tcq:f64[200,7,4,3] tcr:f64[200,7,4,3]
                        tcs:f64[200,7,4,1] tct:f64[200,7,4] tcu:f64[200,7,4,1] tcv:f64[200,7,4,3]
                        tcw:f64[200,7,4,1] tcx:f64[200,7,4] tcy:f64[200,7,4] tcz:f64[200,7,4]
                        tda:f64[200,7,4] tdb:f64[200,7,4] tdc:f64[200,7,4] tdd:f64[200,7,4]
                        tde:f64[200,7,4] tdf:f64[200,7,4] tdg:f64[200,7,4] tdh:f64[200,7,4]
                        tdi:f64[200,7,4] tdj:f64[200,7,4] tdk:f64[200,7,4] tdl:f64[200,7,4]
                        tdm:f64[200,7,4] tdn:f64[200,7,4] tdo:f64[200,7,4] tdp:f64[200,7,4]
                        tdq:f64[200,7,4] tdr:f64[200,7,4] tds:f64[200,7,4] tdt:f64[200,7,4]
                        tdu:f64[200,7,4] tdv:f64[200,7,4] tdw:f64[200,7,4] tdx:f64[200,7,4]
                        tdy:f64[200,7,4] tdz:f64[200,7,4] tea:f64[200,7,4] teb:f64[200,7,4]
                        tec:f64[200,7,4] ted:f64[200,7,4] tee:f64[200,7,4] tef:f64[200,7,4]
                        teg:f64[200,7,4] teh:f64[200,7,4] tei:f64[200,7,4] tej:f64[200,7,4,3]
                        tek:f64[200,7,4,3] tel:f64[200,7,4,1] tem:f64[200,7,4] ten:f64[200,7,4,1]
                        teo:f64[200,7,4,3] tep:f64[200,7,4,1] teq:f64[200,7,4] ter:f64[200,7,4]
                        tes:f64[200,7,4] tet:f64[200,7,4] teu:f64[200,7,4] tev:f64[200,7,4]
                        tew:f64[200,7,4] tex:f64[200,7,4] tey:f64[200,7,4] tez:f64[200,7,4]
                        tfa:f64[200,7,4] tfb:f64[200,7,4] tfc:f64[200,7,4] tfd:f64[200,7,4]
                        tfe:f64[200,7,4] tff:f64[200,7,4] tfg:f64[200,7,4] tfh:f64[200,7,4]
                        tfi:f64[200,7,4] tfj:f64[200,7,4] tfk:f64[200,7,4] tfl:f64[200,7,4]
                        tfm:f64[200,7,4] tfn:f64[200,7,4] tfo:f64[200,7,4] tfp:f64[200,7,4]
                        tfq:f64[200,7,4] tfr:f64[200,7,4] tfs:f64[200,7,4] tft:f64[200,7,4]
                        tfu:f64[200,7,4] tfv:f64[200,7,4] tfw:f64[200,7,4] tfx:f64[200,7,4]
                        tfy:f64[200,7,4] tfz:f64[200,7,4] tga:f64[200,7,4] tgb:f64[200,7,4]
                        tgc:f64[200,7,4,3] tgd:f64[200,7,4,3] tge:f64[200,7,4,1]
                        tgf:f64[200,7,4] tgg:f64[200,7,4,1] tgh:f64[200,7,4,3] tgi:f64[200,7,4,1]
                        tgj:f64[200,7,4] tgk:f64[200,7,4] tgl:f64[200,7,4] tgm:f64[200,7,4]
                        tgn:f64[200,7,4] tgo:f64[200,7,4] tgp:f64[200,7,4] tgq:f64[200,7,4]
                        tgr:f64[200,7,4] tgs:f64[200,7,4] tgt:f64[200,7,4] tgu:f64[200,7,4]
                        tgv:f64[200,7,4] tgw:f64[200,7,4] tgx:f64[200,7,4] tgy:f64[200,7,4]
                        tgz:f64[200,7,4] tha:f64[200,7,4] thb:f64[200,7,4] thc:f64[200,7,4]
                        thd:f64[200,7,4] the:f64[200,7,4] thf:f64[200,7,4] thg:f64[200,7,4]
                        thh:f64[200,7,4] thi:f64[200,7,4] thj:f64[200,7,4] thk:f64[200,7,4]
                        thl:f64[200,7,4] thm:f64[200,7,4] thn:f64[200,7,4] tho:f64[200,7,4]
                        thp:f64[200,7,4] thq:f64[200,7,4] thr:f64[200,7,4] ths:f64[200,7,4]
                        tht:f64[200,7,4] thu:f64[200,7,4] thv:f64[200,7,13,1] thw:bool[200,7,13,4]
                        thx:f64[200,7,13,4] thy:f64[200,7,13] thz:bool[200,7,13]
                        tia:f64[200,7,13,4] tib:f64[200,7,13,1] tic:f64[200,7,13,3]
                        tid:f64[200,7,13,1] tie:f64[200,7,13] tif:f64[200,7,13,3]
                        tig:f64[200,7,13,1] tih:f64[200,7,13,3] tii:f64[200,7,13,1]
                        tij:f64[200,7,13] tik:f64[200,7,13,3] til:f64[200,7,13,1]
                        tim:f64[200,7,13,3] tin:f64[200,7,13,1] tio:f64[200,7,13]
                        tip:f64[200,7,13,3] tiq:f64[200,7,13,1] tir:f64[200,7,18,3]
                        tis:f64[200,7,18,1] tit:f64[200,7,18] tiu:f64[200,7,18,3]
                        tiv:f64[200,7,18,1] tiw:f64[200,7,18] tix:f64[200,7,18] tiy:f64[200,7,18]
                        tiz:f64[200,7,18] tja:f64[200,7,18] tjb:f64[200,7,18] tjc:f64[200,7,18,3]
                        tjd:f64[200,7,18,3] tje:f64[200,7,18,1] tjf:f64[200,7,18,3]
                        tjg:f64[200,7,1,6] tjh:f64[200,7,1,1] tji:f64[200,7,1,6]
                        tjj:f64[200,7,1,1] tjk:f64[200,7,1,6] tjl:f64[200,7,1,1]
                        tjm:f64[200,7,1,1] tjn:f64[200,7,1,1] tjo:f64[200,7,1,1]
                        tjp:f64[200,7,18,1] tjq:f64[200,7,1,6] tjr:f64[200,7,1,1]
                        tjs:f64[200,7,1,6] tjt:f64[200,7,1,1] tju:f64[200,7,1,6]
                        tjv:f64[200,7,1,1] tjw:f64[200,7,1,1] tjx:f64[200,7,1,1]
                        tjy:f64[200,7,1,1] tjz:f64[200,7,12] tka:f64[200,7,12] tkb:f64[200,7,12]
                        tkc:f64[200,7,12] tkd:f64[200,7,12] tke:f64[200,7,12] tkf:f64[200,7,12]
                        tkg:f64[200,7,12] tkh:f64[200,7,12] tki:f64[200,7,12] tkj:f64[200,7,12]
                        tkk:f64[200,7,12] tkl:f64[200,7,6,1] tkm:f64[200,7,6,3] tkn:f64[200,7,4,1]
                        tko:f64[200,7,4,3] tkp:f64[200,7,4,1] tkq:f64[200,7,4,3]
                        tkr:f64[200,7,4,1] tks:f64[200,7,4,3] tkt:f64[200,7,1,6]
                        tku:f64[200,7,1,1] tkv:f64[200,7,1,6] tkw:f64[200,7,1,1]
                        tkx:f64[200,7,1,6] tky:f64[200,7,1,1] tkz:f64[200,7,1,1]
                        tla:f64[200,7,1,1] tlb:f64[200,7,1,1] tlc:f64[200,7,12] tld:f64[200,7,12]
                        tle:f64[200,7,12] tlf:f64[200,7,12] tlg:f64[200,7,12] tlh:f64[200,7,12]
                        tli:f64[200,7,6,1] tlj:f64[200,7,6,3] tlk:f64[200,7,4,1]
                        tll:f64[200,7,4,3] tlm:f64[200,7,4,1] tln:f64[200,7,4,3]
                        tlo:f64[200,7,4,1] tlp:f64[200,7,4,3] tlq:f64[200,7,13] tlr:f64[200,7,13]
                        tls:f64[200,7,13] tlt:f64[200,7,13] tlu:f64[200,7,13] tlv:f64[200,7,13]
                        tlw:f64[200,7,13] tlx:f64[200,7,13] tly:f64[200,7,13] tlz:f64[200,7,13]
                        tma:f64[200,7,13] tmb:f64[200,7,13] tmc:f64[200,7,13] tmd:f64[200,7,13]
                        tme:f64[200,7,13] tmf:f64[200,7,13] tmg:f64[200,7,13] tmh:f64[200,7,13]
                        tmi:f64[200,7,18,3] tmj:f64[200,7,13] tmk:f64[200,7,13] tml:f64[200,7,13]
                        tmm:f64[200,7,13,4] tmn:f64[200,7,13] tmo:f64[200,7,13] tmp:f64[200,7,13]
                        tmq:f64[200,7,13] tmr:f64[200,7,13] tms:f64[200,7,13] tmt:f64[200,7,13,3,3]
                        tmu:f64[13,200,7,3,3] tmv:f64[200,7,13,3,3] tmw:f64[200,7,13,3,3]
                        tmx:f64[200,7,13,3] tmy:f64[200,7,13,3,3] tmz:f64[200,7,13]
                        tna:f64[200,7,13] tnb:f64[200,7,13] tnc:f64[200,7,13] tnd:f64[200,7,13]
                        tne:f64[200,7,13] tnf:f64[200,7,13,3] tng:f64[200,7,13] tnh:f64[200,7,13]
                        tni:f64[200,7,13] tnj:f64[200,7,13] tnk:f64[200,7,13] tnl:f64[200,7,13]
                        tnm:f64[200,7,13] tnn:f64[200,7,13] tno:f64[200,7,13] tnp:f64[200,7,13]
                        tnq:f64[200,7,13] tnr:f64[200,7,13] tns:f64[200,7,13] tnt:f64[200,7,13]
                        tnu:f64[200,7,13] tnv:f64[200,7,13] tnw:f64[200,7,13] tnx:f64[200,7,13]
                        tny:f64[200,7,1,3] tnz:f64[200,7,1,3] toa:f64[200,7,1,1]
                        tob:f64[200,7,1] toc:f64[200,7,1,1] tod:f64[200,7,1,3] toe:f64[200,7,1,1]
                        tof:f64[200,7,1] tog:f64[200,7,1] toh:f64[200,7,1] toi:f64[200,7,1]
                        toj:f64[200,7,1] tok:f64[200,7,1] tol:f64[200,7,4,3] tom:f64[200,7,4,3]
                        ton:f64[200,7,4,1] too:f64[200,7,4] top:f64[200,7,4,1] toq:f64[200,7,4,3]
                        tor:f64[200,7,4,1] tos:f64[200,7,4] tot:f64[200,7,4] tou:f64[200,7,4]
                        tov:f64[200,7,4] tow:f64[200,7,4] tox:f64[200,7,4] toy:f64[200,7,4,3]
                        toz:f64[200,7,4,3] tpa:f64[200,7,4,1] tpb:f64[200,7,4] tpc:f64[200,7,4,1]
                        tpd:f64[200,7,4,3] tpe:f64[200,7,4,1] tpf:f64[200,7,4] tpg:f64[200,7,4]
                        tph:f64[200,7,4] tpi:f64[200,7,4] tpj:f64[200,7,4] tpk:f64[200,7,4]
                        tpl:f64[200,7,4,3] tpm:f64[200,7,4,3] tpn:f64[200,7,4,1]
                        tpo:f64[200,7,4] tpp:f64[200,7,4,1] tpq:f64[200,7,4,3] tpr:f64[200,7,4,1]
                        tps:f64[200,7,4] tpt:f64[200,7,4] tpu:f64[200,7,4] tpv:f64[200,7,4]
                        tpw:f64[200,7,4] tpx:f64[200,7,4] tpy:f64[200,7,4] tpz:f64[200,7,4]
                        tqa:f64[200,7,4] tqb:f64[200,7,4] tqc:f64[200,7,4] tqd:f64[200,7,4]
                        tqe:f64[200,7,4,3] tqf:f64[200,7,4,3] tqg:f64[200,7,4,1]
                        tqh:f64[200,7,4] tqi:f64[200,7,4,1] tqj:f64[200,7,4,3] tqk:f64[200,7,4,1]
                        tql:f64[200,7,4] tqm:f64[200,7,4] tqn:f64[200,7,4] tqo:f64[200,7,4]
                        tqp:f64[200,7,4] tqq:f64[200,7,4] tqr:f64[200,7,4] tqs:f64[200,7,4]
                        tqt:f64[200,7,4] tqu:f64[200,7,4] tqv:f64[200,7,4] tqw:f64[200,7,4]
                        tqx:f64[200,7,4,3] tqy:f64[200,7,4,3] tqz:f64[200,7,4,1]
                        tra:f64[200,7,4] trb:f64[200,7,4,1] trc:f64[200,7,4,3] trd:f64[200,7,4,1]
                        tre:f64[200,7,4] trf:f64[200,7,4] trg:f64[200,7,4] trh:f64[200,7,4]
                        tri:f64[200,7,4] trj:f64[200,7,4] trk:f64[200,7,4] trl:f64[200,7,4]
                        trm:f64[200,7,4] trn:f64[200,7,4] tro:f64[200,7,4] trp:f64[200,7,4]
                        trq:f64[200,7,4,3] trr:f64[200,7,4,3] trs:f64[200,7,4,1]
                        trt:f64[200,7,4] tru:f64[200,7,4,1] trv:f64[200,7,4,3] trw:f64[200,7,4,1]
                        trx:f64[200,7,4] try:f64[200,7,4] trz:f64[200,7,4] tsa:f64[200,7,4]
                        tsb:f64[200,7,4] tsc:f64[200,7,4] tsd:f64[200,7,18,3] tse:f64[200,7,18]
                        tsf:f64[200,7,18] tsg:f64[200,7,18] tsh:f64[200,7,18] tsi:f64[200,7,18]
                        tsj:f64[200,7,18] tsk:f64[200,7,18,3] tsl:f64[200,7,18,3,3]
                        tsm:f64[200,7,18] tsn:f64[200,7,18] tso:f64[200,7,18] tsp:f64[200,7,18]
                        tsq:f64[200,7,18] tsr:f64[200,7,18] tss:f64[200,7,18,18]
                        tst:f64[200,7,18,18] tsu:f64[200,7,18,18] tsv:f64[4,200,7,18,18]
                        tsw:f64[4,200,7,18,18] tsx:f64[4,200,7,18,18] tsy:f64[4,200,7,18]
                        tsz:f64[4,200,7,18,18] tta:f64[4,200,7,12] ttb:bool[4,200,7,12]
                        ttc:f64[4,200,7,12] ttd:f64[4,200,7,12] tte:f64[4,200,7,12]
                        ttf:f64[4,200,7,12] ttg:bool[4,200,7,12] tth:bool[4,200,7,12]
                        tti:bool[4,200,7,3] ttj:bool[4,200,7] ttk:f64[4,200,7,3]
                        ttl:f64[4,200,7,3] ttm:f64[4,200,7,1] ttn:f64[4,200,7] tto:f64[4,200,7,1]
                        ttp:f64[4,200,7,3] ttq:f64[4,200,7,1] ttr:f64[4,200,7] tts:f64[4,200,7]
                        ttt:f64[4,200,7] ttu:f64[4,200,7] ttv:f64[4,200,7] ttw:f64[4,200,7]
                        ttx:f64[4,200,7,3] tty:f64[4,200,7,3] ttz:f64[4,200,7,1]
                        tua:f64[4,200,7] tub:f64[4,200,7,1] tuc:f64[4,200,7,3] tud:f64[4,200,7,1]
                        tue:f64[4,200,7] tuf:f64[4,200,7] tug:f64[4,200,7] tuh:f64[4,200,7]
                        tui:f64[4,200,7] tuj:f64[4,200,7] tuk:f64[4,200,7] tul:f64[4,200,7]
                        tum:f64[4,200,7] tun:bool[4,200,7] tuo:f64[4,200,7] tup:f64[4,200,7]
                        tuq:f64[4,200,7] tur:f64[4,200,7] tus:f64[4,200,7] tut:bool[4,200,7,3]
                        tuu:bool[4,200,7] tuv:bool[4,200,7] tuw:f64[4,200,7] tux:f64[4,200,7]
                        tuy:f64[4,200,7] tuz:f64[4,200,7] tva:f64[4,200,7] tvb:bool[4,200,7,3]
                        tvc:bool[4,200,7] tvd:bool[4,200,7] tve:f64[4,200,7] tvf:f64[4,200,7]
                        tvg:f64[4,200,7] tvh:f64[4,200,7] tvi:f64[4,200,7] tvj:bool[4,200,7,3]
                        tvk:bool[4,200,7] tvl:bool[4,200,7] tvm:f64[4,200,7] tvn:f64[4,200,7]
                        tvo:f64[4,200,7] tvp:f64[4,200,7] tvq:f64[4,200,7] tvr:f64[4,200,7]
                        tvs:f64[4,200,7] tvt:f64[4,200,7] tvu:f64[4,200,7] tvv:f64[4,200,7]
                        tvw:f64[4,200,7] tvx:f64[4,200,7] tvy:f64[4,200,7] tvz:f64[4,200,7]
                        twa:f64[4,200,7] twb:f64[4,200,7] twc:f64[4,200,7] twd:f64[4,200,7]
                        twe:f64[4,200,7] twf:f64[4,200,7] twg:f64[4,200,7] twh:f64[4,200,7]
                        twi:f64[4,200,7] twj:f64[4,200,7] twk:f64[4,200,7] twl:f64[4,200,7]
                        twm:f64[4,200,7] twn:f64[4,200,7] two:f64[4,200,7] twp:f64[4,200,7]
                        twq:f64[4,200,7] twr:f64[4,200,7] tws:f64[4,200,7] twt:f64[4,200,7]
                        twu:f64[4,200,7] twv:f64[4,200,7] tww:f64[4,200,7] twx:f64[4,200,7]
                        twy:f64[4,200,7] twz:f64[4,200,7] txa:f64[4,200,7] txb:f64[4,200,7]
                        txc:f64[4,200,7] txd:f64[4,200,7] txe:f64[4,200,7] txf:f64[4,200,7]
                        txg:f64[4,200,7] txh:f64[4,200,7] txi:f64[4,200,7] txj:f64[4,200,7]
                        txk:f64[4,200,7] txl:f64[4,200,7] txm:f64[4,200,7] txn:f64[4,200,7]
                        txo:f64[4,200,7] txp:f64[4,200,7] txq:f64[4,200,7] txr:f64[4,200,7]
                        txs:f64[4,200,7] txt:f64[4,200,7] txu:f64[4,200,7] txv:f64[4,200,7]
                        txw:f64[4,200,7] txx:f64[4,200,7] txy:f64[4,200,7] txz:f64[4,200,7]
                        tya:f64[4,200,7] tyb:f64[4,200,7] tyc:f64[4,200,7] tyd:f64[4,200,7]
                        tye:f64[4,200,7] tyf:f64[4,200,7] tyg:f64[4,200,7] tyh:f64[4,200,7]
                        tyi:f64[4,200,7] tyj:f64[4,200,7] tyk:f64[4,200,7] tyl:f64[4,200,7]
                        tym:f64[4,200,7] tyn:f64[4,200,7] tyo:f64[4,200,7] typ:f64[4,200,7]
                        tyq:f64[4,200,7] tyr:f64[4,200,7] tys:f64[4,200,7] tyt:f64[4,200,7]
                        tyu:f64[4,200,7] tyv:f64[4,200,7] tyw:f64[4,200,7] tyx:f64[4,200,7]
                        tyy:f64[4,200,7] tyz:f64[4,200,7] tza:f64[4,200,7] tzb:f64[4,200,7]
                        tzc:f64[4,200,7] tzd:f64[4,200,7] tze:f64[4,200,7] tzf:f64[4,200,7]
                        tzg:f64[4,200,7] tzh:f64[4,200,7] tzi:f64[4,200,7] tzj:f64[4,200,7]
                        tzk:f64[4,200,7] tzl:f64[4,200,7] tzm:f64[4,200,7] tzn:f64[4,200,7]
                        tzo:f64[4,200,7] tzp:f64[4,200,7] tzq:f64[4,200,7] tzr:f64[4,200,7]
                        tzs:f64[4,200,7] tzt:f64[4,200,7] tzu:f64[4,200,7] tzv:f64[4,200,7]
                        tzw:f64[4,200,7] tzx:f64[4,200,7] tzy:f64[4,200,7] tzz:f64[4,200,7]
                        uaa:f64[4,200,7] uab:f64[4,200,7] uac:f64[4,200,7] uad:f64[4,200,7]
                        uae:f64[4,200,7] uaf:f64[4,200,7] uag:f64[4,200,7] uah:f64[4,200,7]
                        uai:f64[4,200,7] uaj:f64[4,200,7] uak:f64[4,200,7] ual:f64[4,200,7]
                        uam:f64[4,200,7] uan:f64[4,200,7] uao:f64[4,200,7] uap:f64[4,200,7,12]
                        uaq:f64[4,200,7,12] uar:f64[4,200,7,12] uas:f64[4,200,7,12]
                        uat:f64[4,200,7,12] uau:f64[4,200,7,12] uav:f64[4,200,7,12]
                        uaw:f64[4,200,7,12] uax:f64[4,200,7,1] uay:f64[4,200,7,1]
                        uaz:f64[4,200,7,1,3] uba:f64[4,200,7,1] ubb:f64[4,200,7,1]
                        ubc:f64[4,200,7,1,1] ubd:f64[4,200,7,1,1] ube:f64[4,200,7,1]
                        ubf:f64[4,200,7,1] ubg:f64[4,200,7,1] ubh:f64[4,200,7,1]
                        ubi:f64[4,200,7,1] ubj:f64[4,200,7,1] ubk:f64[4,200,7,1]
                        ubl:f64[4,200,7,1] ubm:f64[4,200,7,1] ubn:f64[4,200,7,1]
                        ubo:f64[4,200,7,1] ubp:f64[4,200,7,1] ubq:f64[4,200,7,1]
                        ubr:f64[4,200,7,1] ubs:f64[4,200,7,1] ubt:f64[4,200,7,1]
                        ubu:f64[4,200,7,1] ubv:f64[4,200,7,1] ubw:f64[4,200,7,1]
                        ubx:f64[4,200,7,1] uby:f64[4,200,7,1] ubz:f64[4,200,7,1]
                        uca:f64[4,200,7,1] ucb:f64[4,200,7,1] ucc:f64[4,200,7,1]
                        ucd:f64[4,200,7,1] uce:f64[4,200,7,1] ucf:f64[4,200,7,1]
                        ucg:f64[4,200,7,1] uch:f64[4,200,7,1] uci:f64[4,200,7,1]
                        ucj:f64[4,200,7,1] uck:f64[4,200,7,1] ucl:f64[4,200,7,1]
                        ucm:f64[4,200,7,1] ucn:f64[4,200,7,1] uco:f64[4,200,7,1]
                        ucp:f64[4,200,7,1] ucq:f64[4,200,7,1] ucr:f64[4,200,7,1,1]
                        ucs:f64[4,200,7,1,4] uct:f64[4,200,7,1] ucu:f64[4,200,7,1,1]
                        ucv:f64[200,7,3] ucw:f64[200,7,3] ucx:f64[200,7,1] ucy:f64[200,7]
                        ucz:f64[200,7,1] uda:f64[200,7,3] udb:f64[200,7,1] udc:f64[200,7]
                        udd:f64[200,7] ude:f64[200,7] udf:f64[200,7] udg:f64[200,7]
                        udh:f64[200,7] udi:f64[200,7,3] udj:f64[200,7,3] udk:f64[200,7,1]
                        udl:f64[200,7] udm:f64[200,7,1] udn:f64[200,7,3] udo:f64[200,7,1]
                        udp:f64[200,7] udq:f64[200,7] udr:f64[200,7] uds:f64[200,7]
                        udt:f64[200,7] udu:f64[200,7] udv:f64[200,7] udw:f64[200,7]
                        udx:f64[200,7] udy:f64[200,7] udz:f64[200,7]. let
                        uea:f64[200,7,36] = div taz tax
                        ueb:f64[200,7,36] = mul 2.0 uea
                        uec:f64[200,7,34] = slice[
                          limit_indices=(200, 7, 34)
                          start_indices=(0, 0, 0)
                          strides=None
                        ] ueb
                        ued:f64[200,7,2] = slice[
                          limit_indices=(200, 7, 36)
                          start_indices=(0, 0, 34)
                          strides=None
                        ] ueb
                        uee:f64[200,7,1] = slice[
                          limit_indices=(200, 7, 1)
                          start_indices=(0, 0, 0)
                          strides=None
                        ] ued
                        uef:f64[200,7,1] = slice[
                          limit_indices=(200, 7, 2)
                          start_indices=(0, 0, 1)
                          strides=None
                        ] ued
                        ueg:f64[200,7] = reduce_sum[axes=(2,)] uef
                        ueh:f64[200,7,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1)
                          shape=(200, 7, 1)
                        ] ueg
                        uei:f64[200,7,36] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (35, 0, 0))
                        ] ueh 0.0
                        uej:f64[200,7] = reduce_sum[axes=(2,)] uee
                        uek:f64[200,7,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1)
                          shape=(200, 7, 1)
                        ] uej
                        uel:f64[200,7,36] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (34, 1, 0))
                        ] uek 0.0
                        uem:f64[200,7,36] = add_any uei uel
                        uen:f64[200,7,36] = div uem 2.0
                        ueo:f64[200,7,36] = mul uen taw
                        uep:f64[200,7,36] = div ueo tav
                        ueq:f64[200,7,36] = mul 2.0 uep
                        uer:f64[200,7] = broadcast_in_dim[
                          broadcast_dimensions=()
                          shape=(200, 7)
                        ] 0.0
                        ues:f64[200,7,36] = scatter[
                          dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
                          indices_are_sorted=True
                          mode=GatherScatterMode.FILL_OR_DROP
                          unique_indices=True
                          update_consts=()
                          update_jaxpr=None
                        ] ueq tau uer
                        uet:f64[200,7] = gather[
                          dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
                          fill_value=0
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          slice_sizes=(200, 7, 1)
                          unique_indices=False
                        ] ueq tau
                        ueu:f64[200,7] = mul uet udz
                        uev:f64[200,7] = broadcast_in_dim[
                          broadcast_dimensions=()
                          shape=(200, 7)
                        ] 0.0
                        uew:f64[200,7,36] = scatter[
                          dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
                          indices_are_sorted=True
                          mode=GatherScatterMode.FILL_OR_DROP
                          unique_indices=True
                          update_consts=()
                          update_jaxpr=None
                        ] ues tas uev
                        uex:f64[200,7] = gather[
                          dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
                          fill_value=0
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          slice_sizes=(200, 7, 1)
                          unique_indices=False
                        ] ues tas
                        uey:f64[200,7] = neg uex
                        uez:f64[200,7] = mul uey udy
                        ufa:f64[200,7] = add_any ueu uez
                        ufb:f64[200,7] = div ufa udx
                        ufc:f64[200,7] = mul ufb udw
                        ufd:f64[200,7,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1)
                          shape=(200, 7, 1)
                        ] ufc
                        ufe:f64[200,7,36] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (34, 1, 0))
                        ] ufd 0.0
                        uff:f64[200,7,36] = add_any uew ufe
                        ufg:f64[200,7] = mul ufa udv
                        ufh:f64[200,7,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1)
                          shape=(200, 7, 1)
                        ] ufg
                        ufi:f64[200,7,36] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (35, 0, 0))
                        ] ufh 0.0
                        ufj:f64[200,7,36] = add_any uff ufi
                        ufk:f64[200,7,36] = div ufj 2.0
                        ufl:f64[200,7,36] = mul ufk tat
                        ufm:f64[200,7,4] = slice[
                          limit_indices=(200, 7, 4)
                          start_indices=(0, 0, 0)
                          strides=None
                        ] uec
                        ufn:f64[200,7,12] = slice[
                          limit_indices=(200, 7, 16)
                          start_indices=(0, 0, 4)
                          strides=None
                        ] uec
                        ufo:f64[200,7,3] = slice[
                          limit_indices=(200, 7, 19)
                          start_indices=(0, 0, 16)
                          strides=None
                        ] uec
                        ufp:f64[200,7,3] = slice[
                          limit_indices=(200, 7, 22)
                          start_indices=(0, 0, 19)
                          strides=None
                        ] uec
                        ufq:f64[200,7,12] = slice[
                          limit_indices=(200, 7, 34)
                          start_indices=(0, 0, 22)
                          strides=None
                        ] uec
                        ufr:f64[200,7,18] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (6, 0, 0))
                        ] ufq 0.0
                        ufs:f64[200,7,3] = mul udo ufp
                        uft:f64[200,7,3] ufu:f64[200,7,3] = pjit[
                          name=cross
                          jaxpr=cross19
                        ] tam udp udq tan tao udr uds tap udt taq tar udu ufs
                        ufv:f64[200,7,3] = mul ufp udn
                        ufw:f64[200,7] = reduce_sum[axes=(2,)] ufv
                        ufx:f64[200,7,1] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 1)
                        ] ufw
                        ufy:f64[200,7] = reduce_sum[axes=(2,)] ufx
                        ufz:f64[200,7] = mul 2.0 ufy
                        uga:f64[200,7,3] = mul udm ufp
                        ugb:f64[200,7,3] = add_any ufu uga
                        ugc:f64[200,7,3] = mul ufp udi
                        ugd:f64[200,7] = reduce_sum[axes=(2,)] ugc
                        uge:f64[200,7,1] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 1)
                        ] ugd
                        ugf:f64[200,7] = reduce_sum[axes=(2,)] uge
                        ugg:f64[200,7] = neg ugf
                        ugh:f64[200,7,3] = dot_general[
                          dimension_numbers=(([], []), ([0, 1], [0, 1]))
                          preferred_element_type=float64
                        ] ugg udj
                        ugi:f64[200,7,3] = add_any uft ugh
                        ugj:f64[200,7,3] = dot_general[
                          dimension_numbers=(([], []), ([0, 1], [0, 1]))
                          preferred_element_type=float64
                        ] ugg udj
                        ugk:f64[200,7,3] = add_any ugi ugj
                        ugl:f64[200,7] = mul udl ugf
                        ugm:f64[200,7] = add_any ufz ugl
                        ugn:f64[200,7] = mul ugf udl
                        ugo:f64[200,7] = add_any ugm ugn
                        ugp:f64[200,7,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1)
                          shape=(200, 7, 1)
                        ] ugo
                        ugq:f64[200,7,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 3, 0))
                        ] ugp 0.0
                        ugr:f64[200,7,4] = add_any ufm ugq
                        ugs:f64[200,7,3] = mul 2.0 ufp
                        ugt:f64[200,7,3] = mul udk ugs
                        ugu:f64[200,7,3] = add_any ugk ugt
                        ugv:f64[200,7,3] = mul ugs udj
                        ugw:f64[200,7] = reduce_sum[axes=(2,)] ugv
                        ugx:f64[200,7,1] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 1)
                        ] ugw
                        ugy:f64[200,7] = reduce_sum[axes=(2,)] ugx
                        ugz:f64[200,7,3] = dot_general[
                          dimension_numbers=(([], []), ([0, 1], [0, 1]))
                          preferred_element_type=float64
                        ] ugy udj
                        uha:f64[200,7,3] = add_any ugb ugz
                        uhb:f64[200,7,18] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (3, 12, 0))
                        ] uha 0.0
                        uhc:f64[200,7,18] = add_any ufr uhb
                        uhd:f64[200,7,3] = dot_general[
                          dimension_numbers=(([], []), ([0, 1], [0, 1]))
                          preferred_element_type=float64
                        ] ugy udi
                        uhe:f64[200,7,3] = add_any ugu uhd
                        uhf:f64[200,7,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (1, 0, 0))
                        ] uhe 0.0
                        uhg:f64[200,7,4] = add_any ugr uhf
                        uhh:f64[200,7,3] = mul udb ufo
                        uhi:f64[200,7,3] uhj:f64[200,7,3] = pjit[
                          name=cross
                          jaxpr=cross19
                        ] tag udc udd tah tai ude udf taj udg tak tal udh uhh
                        uhk:f64[200,7,3] = mul ufo uda
                        uhl:f64[200,7] = reduce_sum[axes=(2,)] uhk
                        uhm:f64[200,7,1] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 1)
                        ] uhl
                        uhn:f64[200,7] = reduce_sum[axes=(2,)] uhm
                        uho:f64[200,7] = mul 2.0 uhn
                        uhp:f64[200,7,3] = mul ucz ufo
                        uhq:f64[200,7,3] = add_any uhj uhp
                        uhr:f64[200,7,3] = mul ufo ucv
                        uhs:f64[200,7] = reduce_sum[axes=(2,)] uhr
                        uht:f64[200,7,1] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 1)
                        ] uhs
                        uhu:f64[200,7] = reduce_sum[axes=(2,)] uht
                        uhv:f64[200,7] = neg uhu
                        uhw:f64[200,7,3] = dot_general[
                          dimension_numbers=(([], []), ([0, 1], [0, 1]))
                          preferred_element_type=float64
                        ] uhv ucw
                        uhx:f64[200,7,3] = add_any uhi uhw
                        uhy:f64[200,7,3] = dot_general[
                          dimension_numbers=(([], []), ([0, 1], [0, 1]))
                          preferred_element_type=float64
                        ] uhv ucw
                        uhz:f64[200,7,3] = add_any uhx uhy
                        uia:f64[200,7] = mul ucy uhu
                        uib:f64[200,7] = add_any uho uia
                        uic:f64[200,7] = mul uhu ucy
                        uid:f64[200,7] = add_any uib uic
                        uie:f64[200,7,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1)
                          shape=(200, 7, 1)
                        ] uid
                        uif:f64[200,7,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 3, 0))
                        ] uie 0.0
                        uig:f64[200,7,3] = mul 2.0 ufo
                        uih:f64[200,7,3] = mul ucx uig
                        uii:f64[200,7,3] = add_any uhz uih
                        uij:f64[200,7,3] = mul uig ucw
                        uik:f64[200,7] = reduce_sum[axes=(2,)] uij
                        uil:f64[200,7,1] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 1)
                        ] uik
                        uim:f64[200,7] = reduce_sum[axes=(2,)] uil
                        uin:f64[200,7,3] = dot_general[
                          dimension_numbers=(([], []), ([0, 1], [0, 1]))
                          preferred_element_type=float64
                        ] uim ucw
                        uio:f64[200,7,3] = add_any uhq uin
                        uip:f64[200,7,18] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 15, 0))
                        ] uio 0.0
                        uiq:f64[200,7,18] = add_any uhc uip
                        uir:f64[200,7,3] = dot_general[
                          dimension_numbers=(([], []), ([0, 1], [0, 1]))
                          preferred_element_type=float64
                        ] uim ucv
                        uis:f64[200,7,3] = add_any uii uir
                        uit:f64[200,7,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (1, 0, 0))
                        ] uis 0.0
                        uiu:f64[200,7,4] = add_any uif uit
                        uiv:f64[200,7,4] = mul uiu taf
                        uiw:f64[200,7,4] = add_any uhg uiv
                        uix:f64[200,7,19] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (3, 12, 0))
                        ] uiw 0.0
                        uiy:f64[200,7,19] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (7, 0, 0))
                        ] ufn 0.0
                        uiz:f64[200,7,19] = add_any uix uiy
                        uja:f64[200,7,13,3] = broadcast_in_dim[
                          broadcast_dimensions=()
                          shape=(200, 7, 13, 3)
                        ] 0.0
                        ujb:f64[200,7,13,4] = broadcast_in_dim[
                          broadcast_dimensions=()
                          shape=(200, 7, 13, 4)
                        ] 0.0
                        ujc:f64[200,7,13,3] = broadcast_in_dim[
                          broadcast_dimensions=()
                          shape=(200, 7, 13, 3)
                        ] 0.0
                        ujd:f64[200,7,13,3] = broadcast_in_dim[
                          broadcast_dimensions=()
                          shape=(200, 7, 13, 3)
                        ] 0.0
                        uje:f64[200,7,13,3] = broadcast_in_dim[
                          broadcast_dimensions=()
                          shape=(200, 7, 13, 3)
                        ] 0.0
                        ujf:f64[200,7,13,3] = broadcast_in_dim[
                          broadcast_dimensions=()
                          shape=(200, 7, 13, 3)
                        ] 0.0
                        ujg:f64[200,7,13,4] = broadcast_in_dim[
                          broadcast_dimensions=()
                          shape=(200, 7, 13, 4)
                        ] 0.0
                        ujh:f64[200,7,13,3,3] = broadcast_in_dim[
                          broadcast_dimensions=()
                          shape=(200, 7, 13, 3, 3)
                        ] 0.0
                        uji:f64[200,7,13,3] = broadcast_in_dim[
                          broadcast_dimensions=()
                          shape=(200, 7, 13, 3)
                        ] 0.0
                        ujj:f64[200,7,13,3] = broadcast_in_dim[
                          broadcast_dimensions=()
                          shape=(200, 7, 13, 3)
                        ] 0.0
                        ujk:f64[200,7,18,3] = broadcast_in_dim[
                          broadcast_dimensions=()
                          shape=(200, 7, 18, 3)
                        ] 0.0
                        ujl:f64[200,7,18,3] = broadcast_in_dim[
                          broadcast_dimensions=()
                          shape=(200, 7, 18, 3)
                        ] 0.0
                        ujm:f64[200,7,18,3] = broadcast_in_dim[
                          broadcast_dimensions=()
                          shape=(200, 7, 18, 3)
                        ] 0.0
                        ujn:f64[200,7,18,3] = broadcast_in_dim[
                          broadcast_dimensions=()
                          shape=(200, 7, 18, 3)
                        ] 0.0
                        ujo:f64[200,7,18,18] = broadcast_in_dim[
                          broadcast_dimensions=()
                          shape=(200, 7, 18, 18)
                        ] 0.0
                        ujp:f64[200,7,18,18] = broadcast_in_dim[
                          broadcast_dimensions=()
                          shape=(200, 7, 18, 18)
                        ] 0.0
                        ujq:f64[200,7,18] = broadcast_in_dim[
                          broadcast_dimensions=()
                          shape=(200, 7, 18)
                        ] 0.0
                        ujr:f64[200,7,18] = broadcast_in_dim[
                          broadcast_dimensions=()
                          shape=(200, 7, 18)
                        ] 0.0
                        ujs:f64[200,7,18] = broadcast_in_dim[
                          broadcast_dimensions=()
                          shape=(200, 7, 18)
                        ] 0.0
                        ujt:f64[200,7,36] = broadcast_in_dim[
                          broadcast_dimensions=()
                          shape=(200, 7, 36)
                        ] 0.0
                        uju:f64[200,7,18] = broadcast_in_dim[
                          broadcast_dimensions=()
                          shape=(200, 7, 18)
                        ] 0.0
                        ujv:f64[200,7,36] ujw:f64[200,7,18] ujx:f64[200,7,19] ujy:f64[200,7,18]
                          ujz:f64[200,7,13,3] uka:f64[200,7,13,4] ukb:f64[200,7,13,3]
                          ukc:f64[200,7,13,3] ukd:f64[200,7,13,3] uke:f64[200,7,13,3]
                          ukf:f64[200,7,13,4] ukg:f64[200,7,13,3,3] ukh:f64[200,7,13,3]
                          uki:f64[200,7,13,3] ukj:f64[200,7,18,3] ukk:f64[200,7,18,3]
                          ukl:f64[200,7,18,3] ukm:f64[200,7,18,3] ukn:f64[200,7,18,18]
                          uko:f64[200,7,18,18] _:f64[200,7,18] ukp:f64[200,7,18]
                          _:f64[200,7,18] = scan[
                          _split_transpose=False
                          jaxpr={ lambda ; ukq:i32[12,1] ukr:f64[1,1,12] uks:f64[1,1,12]
                              ukt:f64[1,1,12] uku:f64[] ukv:f64[1,1,4] ukw:i32[1]
                              ukx:i32[1] uky:i32[1] ukz:i32[1] ula:i32[1] ulb:i32[1]
                              ulc:i32[1] uld:i32[1] ule:i32[1] ulf:i32[1] ulg:i32[1]
                              ulh:i32[1] uli:f64[1,1,36] ulj:f64[1,1,36] ulk:f64[]
                              ull:f64[] ulm:f64[] uln:f64[] ulo:f64[] ulp:f64[] ulq:f64[]
                              ulr:f64[] uls:f64[] ult:f64[] ulu:f64[] ulv:f64[] ulw:f64[]
                              ulx:f64[] uly:f64[] ulz:f64[] uma:f64[] umb:f64[] umc:f64[]
                              umd:f64[] ume:f64[] umf:f64[] umg:f64[] umh:f64[] umi:f64[]
                              umj:f64[] umk:f64[] uml:f64[1,1,12] umm:f64[1,1,12]
                              umn:i32[12,1] umo:f64[1,1,12] ump:i32[12,1] umq:f64[1,1,12]
                              umr:f64[1,1,12] ums:f64[200,7,36] umt:f64[200,7,18]
                              umu:f64[200,7,19] umv:f64[200,7,18] umw:f64[200,7,13,3]
                              umx:f64[200,7,13,4] umy:f64[200,7,13,3] umz:f64[200,7,13,3]
                              una:f64[200,7,13,3] unb:f64[200,7,13,3] unc:f64[200,7,13,4]
                              und:f64[200,7,13,3,3] une:f64[200,7,13,3] unf:f64[200,7,13,3]
                              ung:f64[200,7,18,3] unh:f64[200,7,18,3] uni:f64[200,7,18,3]
                              unj:f64[200,7,18,3] unk:f64[200,7,18,18] unl:f64[200,7,18,18]
                              unm:f64[200,7,18] unn:f64[200,7,18] uno:f64[200,7,18]
                              unp:f64[200,7,18,18] unq:f64[200,7,18,18] unr:f64[200,7,18,18]
                              uns:f64[200,7,18] unt:f64[200,7,18,18] unu:f64[200,7,12]
                              unv:bool[200,7,12] unw:f64[200,7,12] unx:f64[200,7,12]
                              uny:f64[200,7,12] unz:f64[200,7,12] uoa:bool[200,7,12]
                              uob:bool[200,7,12] uoc:bool[200,7,3] uod:bool[200,7]
                              uoe:f64[200,7,3] uof:f64[200,7,3] uog:f64[200,7,1]
                              uoh:f64[200,7] uoi:f64[200,7,1] uoj:f64[200,7,3] uok:f64[200,7,1]
                              uol:f64[200,7] uom:f64[200,7] uon:f64[200,7] uoo:f64[200,7]
                              uop:f64[200,7] uoq:f64[200,7] uor:f64[200,7,3] uos:f64[200,7,3]
                              uot:f64[200,7,1] uou:f64[200,7] uov:f64[200,7,1] uow:f64[200,7,3]
                              uox:f64[200,7,1] uoy:f64[200,7] uoz:f64[200,7] upa:f64[200,7]
                              upb:f64[200,7] upc:f64[200,7] upd:f64[200,7] upe:f64[200,7]
                              upf:f64[200,7] upg:f64[200,7] uph:bool[200,7] upi:f64[200,7]
                              upj:f64[200,7] upk:f64[200,7] upl:f64[200,7] upm:f64[200,7]
                              upn:bool[200,7,3] upo:bool[200,7] upp:bool[200,7] upq:f64[200,7]
                              upr:f64[200,7] ups:f64[200,7] upt:f64[200,7] upu:f64[200,7]
                              upv:bool[200,7,3] upw:bool[200,7] upx:bool[200,7] upy:f64[200,7]
                              upz:f64[200,7] uqa:f64[200,7] uqb:f64[200,7] uqc:f64[200,7]
                              uqd:bool[200,7,3] uqe:bool[200,7] uqf:bool[200,7] uqg:f64[200,7]
                              uqh:f64[200,7] uqi:f64[200,7] uqj:f64[200,7] uqk:f64[200,7]
                              uql:f64[200,7] uqm:f64[200,7] uqn:f64[200,7] uqo:f64[200,7]
                              uqp:f64[200,7] uqq:f64[200,7] uqr:f64[200,7] uqs:f64[200,7]
                              uqt:f64[200,7] uqu:f64[200,7] uqv:f64[200,7] uqw:f64[200,7]
                              uqx:f64[200,7] uqy:f64[200,7] uqz:f64[200,7] ura:f64[200,7]
                              urb:f64[200,7] urc:f64[200,7] urd:f64[200,7] ure:f64[200,7]
                              urf:f64[200,7] urg:f64[200,7] urh:f64[200,7] uri:f64[200,7]
                              urj:f64[200,7] urk:f64[200,7] url:f64[200,7] urm:f64[200,7]
                              urn:f64[200,7] uro:f64[200,7] urp:f64[200,7] urq:f64[200,7]
                              urr:f64[200,7] urs:f64[200,7] urt:f64[200,7] uru:f64[200,7]
                              urv:f64[200,7] urw:f64[200,7] urx:f64[200,7] ury:f64[200,7]
                              urz:f64[200,7] usa:f64[200,7] usb:f64[200,7] usc:f64[200,7]
                              usd:f64[200,7] use:f64[200,7] usf:f64[200,7] usg:f64[200,7]
                              ush:f64[200,7] usi:f64[200,7] usj:f64[200,7] usk:f64[200,7]
                              usl:f64[200,7] usm:f64[200,7] usn:f64[200,7] uso:f64[200,7]
                              usp:f64[200,7] usq:f64[200,7] usr:f64[200,7] uss:f64[200,7]
                              ust:f64[200,7] usu:f64[200,7] usv:f64[200,7] usw:f64[200,7]
                              usx:f64[200,7] usy:f64[200,7] usz:f64[200,7] uta:f64[200,7]
                              utb:f64[200,7] utc:f64[200,7] utd:f64[200,7] ute:f64[200,7]
                              utf:f64[200,7] utg:f64[200,7] uth:f64[200,7] uti:f64[200,7]
                              utj:f64[200,7] utk:f64[200,7] utl:f64[200,7] utm:f64[200,7]
                              utn:f64[200,7] uto:f64[200,7] utp:f64[200,7] utq:f64[200,7]
                              utr:f64[200,7] uts:f64[200,7] utt:f64[200,7] utu:f64[200,7]
                              utv:f64[200,7] utw:f64[200,7] utx:f64[200,7] uty:f64[200,7]
                              utz:f64[200,7] uua:f64[200,7] uub:f64[200,7] uuc:f64[200,7]
                              uud:f64[200,7] uue:f64[200,7] uuf:f64[200,7] uug:f64[200,7]
                              uuh:f64[200,7] uui:f64[200,7] uuj:f64[200,7] uuk:f64[200,7]
                              uul:f64[200,7] uum:f64[200,7] uun:f64[200,7] uuo:f64[200,7]
                              uup:f64[200,7] uuq:f64[200,7] uur:f64[200,7] uus:f64[200,7]
                              uut:f64[200,7] uuu:f64[200,7] uuv:f64[200,7] uuw:f64[200,7]
                              uux:f64[200,7] uuy:f64[200,7] uuz:f64[200,7] uva:f64[200,7]
                              uvb:f64[200,7] uvc:f64[200,7] uvd:f64[200,7] uve:f64[200,7]
                              uvf:f64[200,7] uvg:f64[200,7] uvh:f64[200,7] uvi:f64[200,7]
                              uvj:f64[200,7,12] uvk:f64[200,7,12] uvl:f64[200,7,12]
                              uvm:f64[200,7,12] uvn:f64[200,7,12] uvo:f64[200,7,12]
                              uvp:f64[200,7,12] uvq:f64[200,7,12] uvr:f64[200,7,1]
                              uvs:f64[200,7,1] uvt:f64[200,7,1,3] uvu:f64[200,7,1]
                              uvv:f64[200,7,1] uvw:f64[200,7,1,1] uvx:f64[200,7,1,1]
                              uvy:f64[200,7,1] uvz:f64[200,7,1] uwa:f64[200,7,1]
                              uwb:f64[200,7,1] uwc:f64[200,7,1] uwd:f64[200,7,1]
                              uwe:f64[200,7,1] uwf:f64[200,7,1] uwg:f64[200,7,1]
                              uwh:f64[200,7,1] uwi:f64[200,7,1] uwj:f64[200,7,1]
                              uwk:f64[200,7,1] uwl:f64[200,7,1] uwm:f64[200,7,1]
                              uwn:f64[200,7,1] uwo:f64[200,7,1] uwp:f64[200,7,1]
                              uwq:f64[200,7,1] uwr:f64[200,7,1] uws:f64[200,7,1]
                              uwt:f64[200,7,1] uwu:f64[200,7,1] uwv:f64[200,7,1]
                              uww:f64[200,7,1] uwx:f64[200,7,1] uwy:f64[200,7,1]
                              uwz:f64[200,7,1] uxa:f64[200,7,1] uxb:f64[200,7,1]
                              uxc:f64[200,7,1] uxd:f64[200,7,1] uxe:f64[200,7,1]
                              uxf:f64[200,7,1] uxg:f64[200,7,1] uxh:f64[200,7,1]
                              uxi:f64[200,7,1] uxj:f64[200,7,1] uxk:f64[200,7,1]
                              uxl:f64[200,7,1,1] uxm:f64[200,7,1,4] uxn:f64[200,7,1]
                              uxo:f64[200,7,1,1]. let
                              uxp:f64[200,7,7] = slice[
                                limit_indices=(200, 7, 7)
                                start_indices=(0, 0, 0)
                                strides=None
                              ] umu
                              uxq:f64[200,7,12] = slice[
                                limit_indices=(200, 7, 19)
                                start_indices=(0, 0, 7)
                                strides=None
                              ] umu
                              uxr:f64[200,7,12,1] = reshape[
                                dimensions=None
                                new_sizes=(200, 7, 12, 1)
                              ] uxq
                              uxs:f64[200,7,12,1] = mul uxr 0.0025
                              uxt:f64[200,7,12] = reshape[
                                dimensions=None
                                new_sizes=(200, 7, 12)
                              ] uxs
                              uxu:f64[200,7,18] = pad[
                                padding_config=((0, 0, 0), (0, 0, 0), (6, 0, 0))
                              ] uxt 0.0
                              uxv:f64[200,7,18] = add_any umv uxu
                              uxw:f64[200,7,12] = reshape[
                                dimensions=None
                                new_sizes=(200, 7, 12)
                              ] uxr
                              uxx:f64[200,7,19] = pad[
                                padding_config=((0, 0, 0), (0, 0, 0), (7, 0, 0))
                              ] uxw 0.0
                              uxy:f64[200,7,1,7] = reshape[
                                dimensions=None
                                new_sizes=(200, 7, 1, 7)
                              ] uxp
                              uxz:f64[200,7,1,3] = slice[
                                limit_indices=(200, 7, 1, 3)
                                start_indices=(0, 0, 0, 0)
                                strides=None
                              ] uxy
                              uya:f64[200,7,1,4] = slice[
                                limit_indices=(200, 7, 1, 7)
                                start_indices=(0, 0, 0, 3)
                                strides=None
                              ] uxy
                              uyb:f64[200,7,1,4] = mul uya uxo
                              uyc:f64[200,7,1,4] = mul uyb uxm
                              uyd:f64[200,7,1] = reduce_sum[axes=(3,)] uyc
                              uye:f64[200,7,1,1] = reshape[
                                dimensions=None
                                new_sizes=(200, 7, 1, 1)
                              ] uyd
                              uyf:f64[200,7,1,1] = neg uye
                              uyg:f64[200,7] = reduce_sum[axes=(2, 3)] uyf
                              uyh:f64[200,7,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1)
                                shape=(200, 7, 1)
                              ] uyg
                              uyi:f64[200,7,1,4] = pjit[
                                name=norm
                                jaxpr={ lambda ; uyj:f64[200,7,1,4] uyk:f64[200,7,1]
                                    uyl:f64[200,7,1]. let
                                    uym:f64[200,7,1] = mul uyl uyk
                                    uyn:f64[200,7,1,4] = broadcast_in_dim[
                                      broadcast_dimensions=(0, 1, 2)
                                      shape=(200, 7, 1, 4)
                                    ] uym
                                    uyo:f64[200,7,1,4] = mul uyj uyn
                                    uyp:f64[200,7,1,4] = mul uyn uyj
                                    uyq:f64[200,7,1,4] = add_any uyo uyp
                                  in (uyq,) }
                              ] uxm uxn uyh
                              uyr:f64[200,7,1,4] = div uya uxl
                              uys:f64[200,7,1,4] = add_any uyi uyr
                              uyt:f64[200,7,1,1] = slice[
                                limit_indices=(200, 7, 1, 1)
                                start_indices=(0, 0, 0, 0)
                                strides=None
                              ] uys
                              uyu:f64[200,7,1,1] = slice[
                                limit_indices=(200, 7, 1, 2)
                                start_indices=(0, 0, 0, 1)
                                strides=None
                              ] uys
                              uyv:f64[200,7,1,1] = slice[
                                limit_indices=(200, 7, 1, 3)
                                start_indices=(0, 0, 0, 2)
                                strides=None
                              ] uys
                              uyw:f64[200,7,1,1] = slice[
                                limit_indices=(200, 7, 1, 4)
                                start_indices=(0, 0, 0, 3)
                                strides=None
                              ] uys
                              uyx:f64[200,7] = reduce_sum[axes=(2, 3)] uyw
                              uyy:f64[200,7,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1)
                                shape=(200, 7, 1)
                              ] uyx
                              uyz:f64[200,7,1] = mul uxk uyy
                              uza:f64[200,7,1,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1, 2)
                                shape=(200, 7, 1, 1)
                              ] uyz
                              uzb:f64[200,7,1,4] = pad[
                                padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 3, 0))
                              ] uza 0.0
                              uzc:f64[200,7,1] = mul uyy uxj
                              uzd:f64[200,7,1,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1, 2)
                                shape=(200, 7, 1, 1)
                              ] uzc
                              uze:f64[200,7,1,4] = pad[
                                padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (3, 0, 0))
                              ] uzd 0.0
                              uzf:f64[200,7,1] = neg uyy
                              uzg:f64[200,7,1] = mul uxi uzf
                              uzh:f64[200,7,1,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1, 2)
                                shape=(200, 7, 1, 1)
                              ] uzg
                              uzi:f64[200,7,1,4] = pad[
                                padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (1, 2, 0))
                              ] uzh 0.0
                              uzj:f64[200,7,1,4] = add_any uzb uzi
                              uzk:f64[200,7,1] = mul uzf uxh
                              uzl:f64[200,7,1,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1, 2)
                                shape=(200, 7, 1, 1)
                              ] uzk
                              uzm:f64[200,7,1,4] = pad[
                                padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (2, 1, 0))
                              ] uzl 0.0
                              uzn:f64[200,7,1,4] = add_any uze uzm
                              uzo:f64[200,7,1] = mul uxg uyy
                              uzp:f64[200,7,1,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1, 2)
                                shape=(200, 7, 1, 1)
                              ] uzo
                              uzq:f64[200,7,1,4] = pad[
                                padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (2, 1, 0))
                              ] uzp 0.0
                              uzr:f64[200,7,1,4] = add_any uzj uzq
                              uzs:f64[200,7,1] = mul uyy uxf
                              uzt:f64[200,7,1,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1, 2)
                                shape=(200, 7, 1, 1)
                              ] uzs
                              uzu:f64[200,7,1,4] = pad[
                                padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (1, 2, 0))
                              ] uzt 0.0
                              uzv:f64[200,7,1,4] = add_any uzn uzu
                              uzw:f64[200,7,1] = mul uxe uyy
                              uzx:f64[200,7,1,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1, 2)
                                shape=(200, 7, 1, 1)
                              ] uzw
                              uzy:f64[200,7,1,4] = pad[
                                padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (3, 0, 0))
                              ] uzx 0.0
                              uzz:f64[200,7,1,4] = add_any uzr uzy
                              vaa:f64[200,7,1] = mul uyy uxd
                              vab:f64[200,7,1,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1, 2)
                                shape=(200, 7, 1, 1)
                              ] vaa
                              vac:f64[200,7,1,4] = pad[
                                padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 3, 0))
                              ] vab 0.0
                              vad:f64[200,7,1,4] = add_any uzv vac
                              vae:f64[200,7] = reduce_sum[axes=(2, 3)] uyv
                              vaf:f64[200,7,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1)
                                shape=(200, 7, 1)
                              ] vae
                              vag:f64[200,7,1] = mul uxc vaf
                              vah:f64[200,7,1,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1, 2)
                                shape=(200, 7, 1, 1)
                              ] vag
                              vai:f64[200,7,1,4] = pad[
                                padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (1, 2, 0))
                              ] vah 0.0
                              vaj:f64[200,7,1,4] = add_any uzz vai
                              vak:f64[200,7,1] = mul vaf uxb
                              val:f64[200,7,1,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1, 2)
                                shape=(200, 7, 1, 1)
                              ] vak
                              vam:f64[200,7,1,4] = pad[
                                padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (3, 0, 0))
                              ] val 0.0
                              van:f64[200,7,1,4] = add_any vad vam
                              vao:f64[200,7,1] = mul uxa vaf
                              vap:f64[200,7,1,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1, 2)
                                shape=(200, 7, 1, 1)
                              ] vao
                              vaq:f64[200,7,1,4] = pad[
                                padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 3, 0))
                              ] vap 0.0
                              var:f64[200,7,1,4] = add_any vaj vaq
                              vas:f64[200,7,1] = mul vaf uwz
                              vat:f64[200,7,1,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1, 2)
                                shape=(200, 7, 1, 1)
                              ] vas
                              vau:f64[200,7,1,4] = pad[
                                padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (2, 1, 0))
                              ] vat 0.0
                              vav:f64[200,7,1,4] = add_any van vau
                              vaw:f64[200,7,1] = neg vaf
                              vax:f64[200,7,1] = mul uwy vaw
                              vay:f64[200,7,1,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1, 2)
                                shape=(200, 7, 1, 1)
                              ] vax
                              vaz:f64[200,7,1,4] = pad[
                                padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (3, 0, 0))
                              ] vay 0.0
                              vba:f64[200,7,1,4] = add_any var vaz
                              vbb:f64[200,7,1] = mul vaw uwx
                              vbc:f64[200,7,1,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1, 2)
                                shape=(200, 7, 1, 1)
                              ] vbb
                              vbd:f64[200,7,1,4] = pad[
                                padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (1, 2, 0))
                              ] vbc 0.0
                              vbe:f64[200,7,1,4] = add_any vav vbd
                              vbf:f64[200,7,1] = mul uww vaf
                              vbg:f64[200,7,1,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1, 2)
                                shape=(200, 7, 1, 1)
                              ] vbf
                              vbh:f64[200,7,1,4] = pad[
                                padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (2, 1, 0))
                              ] vbg 0.0
                              vbi:f64[200,7,1,4] = add_any vba vbh
                              vbj:f64[200,7,1] = mul vaf uwv
                              vbk:f64[200,7,1,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1, 2)
                                shape=(200, 7, 1, 1)
                              ] vbj
                              vbl:f64[200,7,1,4] = pad[
                                padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 3, 0))
                              ] vbk 0.0
                              vbm:f64[200,7,1,4] = add_any vbe vbl
                              vbn:f64[200,7] = reduce_sum[axes=(2, 3)] uyu
                              vbo:f64[200,7,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1)
                                shape=(200, 7, 1)
                              ] vbn
                              vbp:f64[200,7,1] = neg vbo
                              vbq:f64[200,7,1] = mul uwu vbp
                              vbr:f64[200,7,1,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1, 2)
                                shape=(200, 7, 1, 1)
                              ] vbq
                              vbs:f64[200,7,1,4] = pad[
                                padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (2, 1, 0))
                              ] vbr 0.0
                              vbt:f64[200,7,1,4] = add_any vbi vbs
                              vbu:f64[200,7,1] = mul vbp uwt
                              vbv:f64[200,7,1,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1, 2)
                                shape=(200, 7, 1, 1)
                              ] vbu
                              vbw:f64[200,7,1,4] = pad[
                                padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (3, 0, 0))
                              ] vbv 0.0
                              vbx:f64[200,7,1,4] = add_any vbm vbw
                              vby:f64[200,7,1] = mul uws vbo
                              vbz:f64[200,7,1,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1, 2)
                                shape=(200, 7, 1, 1)
                              ] vby
                              vca:f64[200,7,1,4] = pad[
                                padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (3, 0, 0))
                              ] vbz 0.0
                              vcb:f64[200,7,1,4] = add_any vbt vca
                              vcc:f64[200,7,1] = mul vbo uwr
                              vcd:f64[200,7,1,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1, 2)
                                shape=(200, 7, 1, 1)
                              ] vcc
                              vce:f64[200,7,1,4] = pad[
                                padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (2, 1, 0))
                              ] vcd 0.0
                              vcf:f64[200,7,1,4] = add_any vbx vce
                              vcg:f64[200,7,1] = mul uwq vbo
                              vch:f64[200,7,1,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1, 2)
                                shape=(200, 7, 1, 1)
                              ] vcg
                              vci:f64[200,7,1,4] = pad[
                                padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 3, 0))
                              ] vch 0.0
                              vcj:f64[200,7,1,4] = add_any vcb vci
                              vck:f64[200,7,1] = mul vbo uwp
                              vcl:f64[200,7,1,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1, 2)
                                shape=(200, 7, 1, 1)
                              ] vck
                              vcm:f64[200,7,1,4] = pad[
                                padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (1, 2, 0))
                              ] vcl 0.0
                              vcn:f64[200,7,1,4] = add_any vcf vcm
                              vco:f64[200,7,1] = mul uwo vbo
                              vcp:f64[200,7,1,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1, 2)
                                shape=(200, 7, 1, 1)
                              ] vco
                              vcq:f64[200,7,1,4] = pad[
                                padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (1, 2, 0))
                              ] vcp 0.0
                              vcr:f64[200,7,1,4] = add_any vcj vcq
                              vcs:f64[200,7,1] = mul vbo uwn
                              vct:f64[200,7,1,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1, 2)
                                shape=(200, 7, 1, 1)
                              ] vcs
                              vcu:f64[200,7,1,4] = pad[
                                padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 3, 0))
                              ] vct 0.0
                              vcv:f64[200,7,1,4] = add_any vcn vcu
                              vcw:f64[200,7] = reduce_sum[axes=(2, 3)] uyt
                              vcx:f64[200,7,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1)
                                shape=(200, 7, 1)
                              ] vcw
                              vcy:f64[200,7,1] = neg vcx
                              vcz:f64[200,7,1] = mul uwm vcy
                              vda:f64[200,7,1,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1, 2)
                                shape=(200, 7, 1, 1)
                              ] vcz
                              vdb:f64[200,7,1,4] = pad[
                                padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (3, 0, 0))
                              ] vda 0.0
                              vdc:f64[200,7,1,4] = add_any vcr vdb
                              vdd:f64[200,7,1] = mul vcy uwl
                              vde:f64[200,7,1,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1, 2)
                                shape=(200, 7, 1, 1)
                              ] vdd
                              vdf:f64[200,7,1,4] = pad[
                                padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (3, 0, 0))
                              ] vde 0.0
                              vdg:f64[200,7,1,4] = add_any vcv vdf
                              vdh:f64[200,7,1] = neg vcx
                              vdi:f64[200,7,1] = mul uwk vdh
                              vdj:f64[200,7,1,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1, 2)
                                shape=(200, 7, 1, 1)
                              ] vdi
                              vdk:f64[200,7,1,4] = pad[
                                padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (2, 1, 0))
                              ] vdj 0.0
                              vdl:f64[200,7,1,4] = add_any vdc vdk
                              vdm:f64[200,7,1] = mul vdh uwj
                              vdn:f64[200,7,1,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1, 2)
                                shape=(200, 7, 1, 1)
                              ] vdm
                              vdo:f64[200,7,1,4] = pad[
                                padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (2, 1, 0))
                              ] vdn 0.0
                              vdp:f64[200,7,1,4] = add_any vdg vdo
                              vdq:f64[200,7,1] = neg vcx
                              vdr:f64[200,7,1] = mul uwi vdq
                              vds:f64[200,7,1,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1, 2)
                                shape=(200, 7, 1, 1)
                              ] vdr
                              vdt:f64[200,7,1,4] = pad[
                                padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (1, 2, 0))
                              ] vds 0.0
                              vdu:f64[200,7,1,4] = add_any vdl vdt
                              vdv:f64[200,7,1] = mul vdq uwh
                              vdw:f64[200,7,1,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1, 2)
                                shape=(200, 7, 1, 1)
                              ] vdv
                              vdx:f64[200,7,1,4] = pad[
                                padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (1, 2, 0))
                              ] vdw 0.0
                              vdy:f64[200,7,1,4] = add_any vdp vdx
                              vdz:f64[200,7,1] = mul uvs vcx
                              vea:f64[200,7,1,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1, 2)
                                shape=(200, 7, 1, 1)
                              ] vdz
                              veb:f64[200,7,1,4] = pad[
                                padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 3, 0))
                              ] vea 0.0
                              vec:f64[200,7,1,4] = add_any vdu veb
                              ved:f64[200,7,1,1] = slice[
                                limit_indices=(200, 7, 1, 1)
                                start_indices=(0, 0, 0, 0)
                                strides=None
                              ] vec
                              vee:f64[200,7,1,1] = slice[
                                limit_indices=(200, 7, 1, 2)
                                start_indices=(0, 0, 0, 1)
                                strides=None
                              ] vec
                              vef:f64[200,7,1,1] = slice[
                                limit_indices=(200, 7, 1, 3)
                                start_indices=(0, 0, 0, 2)
                                strides=None
                              ] vec
                              veg:f64[200,7,1,1] = slice[
                                limit_indices=(200, 7, 1, 4)
                                start_indices=(0, 0, 0, 3)
                                strides=None
                              ] vec
                              veh:f64[200,7] = reduce_sum[axes=(2, 3)] veg
                              vei:f64[200,7,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1)
                                shape=(200, 7, 1)
                              ] veh
                              vej:f64[200,7,1] = mul uwf vei
                              vek:f64[200,7,1] = mul vej uwg
                              vel:f64[200,7,1] = div vek 2.0
                              vem:f64[200,7,1] = mul vei uwe
                              ven:f64[200,7,1,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1, 2)
                                shape=(200, 7, 1, 1)
                              ] vem
                              veo:f64[200,7,1,3] = pad[
                                padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (2, 0, 0))
                              ] ven 0.0
                              vep:f64[200,7] = reduce_sum[axes=(2, 3)] vef
                              veq:f64[200,7,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1)
                                shape=(200, 7, 1)
                              ] vep
                              ver:f64[200,7,1] = mul uwc veq
                              ves:f64[200,7,1] = mul ver uwd
                              vet:f64[200,7,1] = div ves 2.0
                              veu:f64[200,7,1] = add_any vel vet
                              vev:f64[200,7,1] = mul veq uwb
                              vew:f64[200,7,1,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1, 2)
                                shape=(200, 7, 1, 1)
                              ] vev
                              vex:f64[200,7,1,3] = pad[
                                padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (1, 1, 0))
                              ] vew 0.0
                              vey:f64[200,7,1,3] = add_any veo vex
                              vez:f64[200,7] = reduce_sum[axes=(2, 3)] vee
                              vfa:f64[200,7,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1)
                                shape=(200, 7, 1)
                              ] vez
                              vfb:f64[200,7,1] = mul uvz vfa
                              vfc:f64[200,7,1] = mul vfb uwa
                              vfd:f64[200,7,1] = div vfc 2.0
                              vfe:f64[200,7,1] = add_any veu vfd
                              vff:f64[200,7,1] = mul vfa uvy
                              vfg:f64[200,7,1,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1, 2)
                                shape=(200, 7, 1, 1)
                              ] vff
                              vfh:f64[200,7,1,3] = pad[
                                padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 2, 0))
                              ] vfg 0.0
                              vfi:f64[200,7,1,3] = add_any vey vfh
                              vfj:f64[200,7,1,3] = mul vfi uvx
                              vfk:f64[200,7,1,3] = mul vfj uvt
                              vfl:f64[200,7,1] = reduce_sum[axes=(3,)] vfk
                              vfm:f64[200,7,1,1] = reshape[
                                dimensions=None
                                new_sizes=(200, 7, 1, 1)
                              ] vfl
                              vfn:f64[200,7,1,1] = neg vfm
                              vfo:f64[200,7] = reduce_sum[axes=(2, 3)] vfn
                              vfp:f64[200,7,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1)
                                shape=(200, 7, 1)
                              ] vfo
                              vfq:f64[200,7,1,3] = div vfi uvw
                              vfr:f64[200,7] = reduce_sum[axes=(2, 3)] ved
                              vfs:f64[200,7,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1)
                                shape=(200, 7, 1)
                              ] vfr
                              vft:f64[200,7,1] = neg vfs
                              vfu:f64[200,7,1] = mul vft uvv
                              vfv:f64[200,7,1] = div vfu 2.0
                              vfw:f64[200,7,1] = add_any vfe vfv
                              vfx:f64[200,7,1] = mul 0.0025 vfw
                              vfy:f64[200,7,1] = add_any vfp vfx
                              vfz:f64[200,7,1,3] = pjit[
                                name=norm
                                jaxpr={ lambda ; vga:f64[200,7,1,3] vgb:f64[200,7,1]
                                    vgc:f64[200,7,1]. let
                                    vgd:f64[200,7,1] = mul vgc vgb
                                    vge:f64[200,7,1,3] = broadcast_in_dim[
                                      broadcast_dimensions=(0, 1, 2)
                                      shape=(200, 7, 1, 3)
                                    ] vgd
                                    vgf:f64[200,7,1,3] = mul vga vge
                                    vgg:f64[200,7,1,3] = mul vge vga
                                    vgh:f64[200,7,1,3] = add_any vgf vgg
                                  in (vgh,) }
                              ] uvt uvu vfy
                              vgi:f64[200,7,1,3] = add_any vfq vfz
                              vgj:f64[200,7,1,6] = pad[
                                padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (3, 0, 0))
                              ] vgi 0.0
                              vgk:f64[200,7,1] = mul vcx uvr
                              vgl:f64[200,7,1,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1, 2)
                                shape=(200, 7, 1, 1)
                              ] vgk
                              vgm:f64[200,7,1,4] = pad[
                                padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 3, 0))
                              ] vgl 0.0
                              vgn:f64[200,7,1,4] = add_any vdy vgm
                              vgo:f64[200,7,1,7] = pad[
                                padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (3, 0, 0))
                              ] vgn 0.0
                              vgp:f64[200,7,1,3] = mul uxz 0.0025
                              vgq:f64[200,7,1,6] = pad[
                                padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 3, 0))
                              ] vgp 0.0
                              vgr:f64[200,7,1,6] = add_any vgj vgq
                              vgs:f64[200,7,6] = reshape[
                                dimensions=None
                                new_sizes=(200, 7, 6)
                              ] vgr
                              vgt:f64[200,7,18] = pad[
                                padding_config=((0, 0, 0), (0, 0, 0), (0, 12, 0))
                              ] vgs 0.0
                              vgu:f64[200,7,18] = add_any uxv vgt
                              vgv:f64[200,7,18] = mul vgu 0.0025
                              vgw:f64[200,7,18] = add_any uno vgv
                              vgx:f64[200,7,18] = dot_general[
                                dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
                                preferred_element_type=float64
                              ] vgw unt
                              vgy:f64[200,7,18] = add_any unm vgx
                              vgz:f64[200,7,18] = add_any unn vgx
                              vha:f64[200,7,12] = gather[
                                dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
                                fill_value=0
                                indices_are_sorted=False
                                mode=GatherScatterMode.FILL_OR_DROP
                                slice_sizes=(200, 7, 1)
                                unique_indices=False
                              ] vgy ukq
                              vhb:f64[200,7,12] = mul vha umr
                              vhc:f64[200,7,12] = pjit[name=clip jaxpr=clip4] uvp
                                uvq vhb
                              vhd:f64[200,7,12] = mul umm vhc
                              vhe:f64[200,7,12] = mul vhd umq
                              vhf:f64[200,7,18] = broadcast_in_dim[
                                broadcast_dimensions=()
                                shape=(200, 7, 18)
                              ] 0.0
                              vhg:f64[200,7,18] = scatter-add[
                                dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
                                indices_are_sorted=False
                                mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                unique_indices=False
                                update_consts=()
                                update_jaxpr=jaxpr
                              ] vhf ump vhe
                              vhh:f64[200,7,18] = add_any vgu vhg
                              vhi:f64[200,7,12] = mul vhd umo
                              vhj:f64[200,7,19] = broadcast_in_dim[
                                broadcast_dimensions=()
                                shape=(200, 7, 19)
                              ] 0.0
                              vhk:f64[200,7,19] = scatter-add[
                                dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
                                indices_are_sorted=False
                                mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                unique_indices=False
                                update_consts=()
                                update_jaxpr=jaxpr
                              ] vhj umn vhi
                              vhl:f64[200,7,19] = add_any uxx vhk
                              vhm:f64[200,7,12] = mul ukr vhc
                              vhn:f64[200,7,12] = pjit[name=clip jaxpr=clip4] uvn
                                uvo vhm
                              vho:f64[200,7,12] = mul uml vhn
                              vhp:f64[200,7,12] = neg vho
                              vhq:f64[200,7,36] = pad[
                                padding_config=((0, 0, 0), (0, 0, 0), (22, 2, 0))
                              ] vhp 0.0
                              vhr:f64[200,7,12] = mul uvm vhn
                              vhs:f64[200,7,12] = neg vhr
                              vht:f64[200,7,36] = pad[
                                padding_config=((0, 0, 0), (0, 0, 0), (4, 20, 0))
                              ] vhs 0.0
                              vhu:f64[200,7,36] = add_any vhq vht
                              vhv:f64[200,7,12] = mul vhn uvl
                              vhw:f64[200,7,12] = convert_element_type[
                                new_dtype=float64
                                weak_type=True
                              ] vhv
                              vhx:f64[200,7,36] vhy:f64[200,7,12] = cond[
                                branches=(
                                  { lambda ; vhz:f64[1,1,12] via:f64[200,7,12] vib:bool[200,7,12]
                                      vic:f64[200,7,12] vid:f64[200,7,12] vie:f64[1,1,12]
                                      vif:f64[200,7,12] vig:f64[200,7,12] vih:bool[200,7,12]
                                      vii:bool[200,7,12] vij:f64[200,7,12]. let
                                      vik:f64[200,7,36] = broadcast_in_dim[
                                        broadcast_dimensions=()
                                        shape=(200, 7, 36)
                                      ] 0.0
                                      vil:f64[200,7,12] = broadcast_in_dim[
                                        broadcast_dimensions=()
                                        shape=(200, 7, 12)
                                      ] 0.0
                                    in (vik, vil) }
                                  { lambda ; vim:f64[1,1,12] vin:f64[200,7,12] vio:bool[200,7,12]
                                      vip:f64[200,7,12] viq:f64[200,7,12] vir:f64[1,1,12]
                                      vis:f64[200,7,12] vit:f64[200,7,12] viu:bool[200,7,12]
                                      viv:bool[200,7,12] viw:f64[200,7,12]. let
                                      vix:f64[200,7,12] viy:f64[200,7,12] = pjit[
                                        name=_where
                                        jaxpr={ lambda ; viz:bool[200,7,12] vja:f64[200,7,12]. let
                                            vjb:f64[200,7,12] = broadcast_in_dim[
                                              broadcast_dimensions=()
                                              shape=(200, 7, 12)
                                            ] 0.0
                                            vjc:f64[200,7,12] = select_n viz vja
                                              vjb
                                            vjd:f64[200,7,12] = select_n viz vjb
                                              vja
                                          in (vjd, vjc) }
                                      ] viv viw
                                      vje:f64[200,7,12] = pjit[
                                        name=_where
                                        jaxpr={ lambda ; vjf:bool[200,7,12] vjg:f64[200,7,12]. let
                                            vjh:f64[200,7,12] = broadcast_in_dim[
                                              broadcast_dimensions=()
                                              shape=(200, 7, 12)
                                            ] 0.0
                                            vji:f64[200,7,12] = select_n vjf vjh
                                              vjg
                                          in (vji,) }
                                      ] viu viy
                                      vjj:f64[200,7,12] = mul vje vit
                                      vjk:f64[200,7,12] = mul vjj vis
                                      vjl:f64[200,7,12] = neg vjk
                                      vjm:f64[200,7,12] = div vje vin
                                      vjn:f64[200,7,12] = neg vjm
                                      vjo:f64[200,7,12] = mul vir vjn
                                      vjp:f64[200,7,12] = neg vjo
                                      vjq:f64[200,7,12] = mul vix viq
                                      vjr:f64[200,7,12] = mul vjq vip
                                      vjs:f64[200,7,12] = neg vjr
                                      vjt:f64[200,7,12] = add_any vjl vjs
                                      vju:f64[200,7,12] = pjit[
                                        name=_where
                                        jaxpr={ lambda ; vjv:bool[200,7,12] vjw:f64[200,7,12]. let
                                            vjx:f64[200,7,12] = broadcast_in_dim[
                                              broadcast_dimensions=()
                                              shape=(200, 7, 12)
                                            ] 0.0
                                            vjy:f64[200,7,12] = select_n vjv vjx
                                              vjw
                                          in (vjy,) }
                                      ] vio vjt
                                      vjz:f64[200,7,12] = neg vju
                                      vka:f64[200,7,36] = pad[
                                        padding_config=((0, 0, 0), (0, 0, 0), (4, 20, 0))
                                      ] vjz 0.0
                                      vkb:f64[200,7,12] = div vix vin
                                      vkc:f64[200,7,12] = neg vkb
                                      vkd:f64[200,7,12] = mul vim vkc
                                      vke:f64[200,7,12] = neg vkd
                                      vkf:f64[200,7,12] = add_any vjp vke
                                      vkg:f64[200,7,36] = pad[
                                        padding_config=((0, 0, 0), (0, 0, 0), (22, 2, 0))
                                      ] vkf 0.0
                                      vkh:f64[200,7,36] = add_any vka vkg
                                    in (vkh, vju) }
                                )
                                linear=(False, False, False, False, False, False, False, False, False, False, True)
                              ] 1 uks unu unv unw unx ukt uny unz uoa uob vhw
                              vki:f64[200,7,36] = add_any vhu vhx
                              vkj:f64[200,7,12] = add_any vhr vhy
                              vkk:f64[200,7,12] = pjit[name=clip jaxpr=clip4] uvj
                                uvk vkj
                              vkl:f64[200,7,3] = slice[
                                limit_indices=(200, 7, 3)
                                start_indices=(0, 0, 0)
                                strides=None
                              ] vkk
                              vkm:f64[200,7,3] = slice[
                                limit_indices=(200, 7, 6)
                                start_indices=(0, 0, 3)
                                strides=None
                              ] vkk
                              vkn:f64[200,7,3] = slice[
                                limit_indices=(200, 7, 9)
                                start_indices=(0, 0, 6)
                                strides=None
                              ] vkk
                              vko:f64[200,7,3] = slice[
                                limit_indices=(200, 7, 12)
                                start_indices=(0, 0, 9)
                                strides=None
                              ] vkk
                              vkp:f64[200,7,1] = slice[
                                limit_indices=(200, 7, 1)
                                start_indices=(0, 0, 0)
                                strides=None
                              ] vko
                              vkq:f64[200,7,1] = slice[
                                limit_indices=(200, 7, 2)
                                start_indices=(0, 0, 1)
                                strides=None
                              ] vko
                              vkr:f64[200,7,1] = slice[
                                limit_indices=(200, 7, 3)
                                start_indices=(0, 0, 2)
                                strides=None
                              ] vko
                              vks:f64[200,7] = reduce_sum[axes=(2,)] vkr
                              vkt:f64[200,7] = reduce_sum[axes=(2,)] vkq
                              vku:f64[200,7] = div vkt uvi
                              vkv:f64[200,7] = mul vku uvh
                              vkw:f64[200,7] = neg vkv
                              vkx:f64[200,7] = mul uvf vkw
                              vky:f64[200,7] = mul vkw uux
                              vkz:f64[200,7] = mul uuy vkv
                              vla:f64[200,7] = mul vkv uve
                              vlb:f64[200,7] = mul vkt uvg
                              vlc:f64[200,7] = mul uvf vlb
                              vld:f64[200,7] = add_any vkz vlc
                              vle:f64[200,7] = mul vlb uve
                              vlf:f64[200,7] = add_any vky vle
                              vlg:f64[200,7] = mul -0.25 vlf
                              vlh:f64[200,7] = neg vlg
                              vli:f64[200,7] = mul vlh uvd
                              vlj:f64[200,7] = add_any vks vli
                              vlk:f64[200,7] = mul uuy vlb
                              vll:f64[200,7] = add_any vkx vlk
                              vlm:f64[200,7] = neg vll
                              vln:f64[200,7] = mul uuj vlm
                              vlo:f64[200,7] = neg vln
                              vlp:f64[200,7] = mul vlo uvc
                              vlq:f64[200,7] = mul vlm uvb
                              vlr:f64[200,7] = mul uue vll
                              vls:f64[200,7] = mul vlr uva
                              vlt:f64[200,7] = add_any vlp vls
                              vlu:f64[200,7] = mul vll uuz
                              vlv:f64[200,7] = mul vlb uux
                              vlw:f64[200,7] = add_any vla vlv
                              vlx:f64[200,7] = mul -0.25 vlw
                              vly:f64[200,7] = mul vlx uuw
                              vlz:f64[200,7] = add_any vlj vly
                              vma:f64[200,7] = neg vlz
                              vmb:f64[200,7] = neg vma
                              vmc:f64[200,7] = mul vmb uuv
                              vmd:f64[200,7] = pjit[name=clip jaxpr=clip5] uut uuu
                                vmc
                              vme:f64[200,7] = div vmd umk
                              vmf:f64[200,7] = neg vme
                              vmg:f64[200,7] = mul vmf uus
                              vmh:f64[200,7] = mul vmg uur
                              vmi:f64[200,7] = mul vmh uuq
                              vmj:f64[200,7] = mul vmi uup
                              vmk:f64[200,7] = mul vmj uuo
                              vml:f64[200,7] = add_any vlq vmk
                              vmm:f64[200,7] = mul vmj uun
                              vmn:f64[200,7] = add_any vlu vmm
                              vmo:f64[200,7] = mul vmj uum
                              vmp:f64[200,7] = add_any vld vmo
                              vmq:f64[200,7,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1)
                                shape=(200, 7, 1)
                              ] vmp
                              vmr:f64[200,7,3] = pad[
                                padding_config=((0, 0, 0), (0, 0, 0), (0, 2, 0))
                              ] vmq 0.0
                              vms:f64[200,7] = reduce_sum[axes=(2,)] vkp
                              vmt:f64[200,7] = add_any vlt vms
                              vmu:f64[200,7] = div vmt uul
                              vmv:f64[200,7] = mul vmu uuk
                              vmw:f64[200,7] = neg vmv
                              vmx:f64[200,7] = mul uuj vmw
                              vmy:f64[200,7] = mul vmw uud
                              vmz:f64[200,7] = add_any vml vmy
                              vna:f64[200,7] = mul vmv umj
                              vnb:f64[200,7] = add_any vmn vna
                              vnc:f64[200,7] = mul vmt uui
                              vnd:f64[200,7] = mul uue vnc
                              vne:f64[200,7] = add_any vmx vnd
                              vnf:f64[200,7] = mul vne uuh
                              vng:f64[200,7] = mul vnf uug
                              vnh:f64[200,7] = add_any vmz vng
                              vni:f64[200,7] = mul vnf uuf
                              vnj:f64[200,7] = add_any vnb vni
                              vnk:f64[200,7] = mul vnc uud
                              vnl:f64[200,7] = add_any vnj vnk
                              vnm:f64[200,7,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1)
                                shape=(200, 7, 1)
                              ] vnl
                              vnn:f64[200,7,3] = pad[
                                padding_config=((0, 0, 0), (0, 0, 0), (1, 1, 0))
                              ] vnm 0.0
                              vno:f64[200,7,3] = add_any vmr vnn
                              vnp:f64[200,7] = mul vnc umi
                              vnq:f64[200,7] = add_any vnh vnp
                              vnr:f64[200,7,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1)
                                shape=(200, 7, 1)
                              ] vnq
                              vns:f64[200,7,3] = pad[
                                padding_config=((0, 0, 0), (0, 0, 0), (2, 0, 0))
                              ] vnr 0.0
                              vnt:f64[200,7,3] = add_any vno vns
                              vnu:f64[200,7,12] = pad[
                                padding_config=((0, 0, 0), (0, 0, 0), (9, 0, 0))
                              ] vnt 0.0
                              vnv:f64[200,7,1] = slice[
                                limit_indices=(200, 7, 1)
                                start_indices=(0, 0, 0)
                                strides=None
                              ] vkn
                              vnw:f64[200,7,1] = slice[
                                limit_indices=(200, 7, 2)
                                start_indices=(0, 0, 1)
                                strides=None
                              ] vkn
                              vnx:f64[200,7,1] = slice[
                                limit_indices=(200, 7, 3)
                                start_indices=(0, 0, 2)
                                strides=None
                              ] vkn
                              vny:f64[200,7] = reduce_sum[axes=(2,)] vnx
                              vnz:f64[200,7] = reduce_sum[axes=(2,)] vnw
                              voa:f64[200,7] = div vnz uuc
                              vob:f64[200,7] = mul voa uub
                              voc:f64[200,7] = neg vob
                              vod:f64[200,7] = mul utz voc
                              voe:f64[200,7] = mul voc utr
                              vof:f64[200,7] = mul uts vob
                              vog:f64[200,7] = mul vob uty
                              voh:f64[200,7] = mul vnz uua
                              voi:f64[200,7] = mul utz voh
                              voj:f64[200,7] = add_any vof voi
                              vok:f64[200,7] = mul voh uty
                              vol:f64[200,7] = add_any voe vok
                              vom:f64[200,7] = mul -0.25 vol
                              von:f64[200,7] = neg vom
                              voo:f64[200,7] = mul von utx
                              vop:f64[200,7] = add_any vny voo
                              voq:f64[200,7] = mul uts voh
                              vor:f64[200,7] = add_any vod voq
                              vos:f64[200,7] = neg vor
                              vot:f64[200,7] = mul utd vos
                              vou:f64[200,7] = neg vot
                              vov:f64[200,7] = mul vou utw
                              vow:f64[200,7] = mul vos utv
                              vox:f64[200,7] = mul usy vor
                              voy:f64[200,7] = mul vox utu
                              voz:f64[200,7] = add_any vov voy
                              vpa:f64[200,7] = mul vor utt
                              vpb:f64[200,7] = mul voh utr
                              vpc:f64[200,7] = add_any vog vpb
                              vpd:f64[200,7] = mul -0.25 vpc
                              vpe:f64[200,7] = mul vpd utq
                              vpf:f64[200,7] = add_any vop vpe
                              vpg:f64[200,7] = neg vpf
                              vph:f64[200,7] = neg vpg
                              vpi:f64[200,7] = mul vph utp
                              vpj:f64[200,7] = pjit[name=clip jaxpr=clip5] utn uto
                                vpi
                              vpk:f64[200,7] = div vpj umh
                              vpl:f64[200,7] = neg vpk
                              vpm:f64[200,7] = mul vpl utm
                              vpn:f64[200,7] = mul vpm utl
                              vpo:f64[200,7] = mul vpn utk
                              vpp:f64[200,7] = mul vpo utj
                              vpq:f64[200,7] = mul vpp uti
                              vpr:f64[200,7] = add_any vow vpq
                              vps:f64[200,7] = mul vpp uth
                              vpt:f64[200,7] = add_any vpa vps
                              vpu:f64[200,7] = mul vpp utg
                              vpv:f64[200,7] = add_any voj vpu
                              vpw:f64[200,7,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1)
                                shape=(200, 7, 1)
                              ] vpv
                              vpx:f64[200,7,3] = pad[
                                padding_config=((0, 0, 0), (0, 0, 0), (0, 2, 0))
                              ] vpw 0.0
                              vpy:f64[200,7] = reduce_sum[axes=(2,)] vnv
                              vpz:f64[200,7] = add_any voz vpy
                              vqa:f64[200,7] = div vpz utf
                              vqb:f64[200,7] = mul vqa ute
                              vqc:f64[200,7] = neg vqb
                              vqd:f64[200,7] = mul utd vqc
                              vqe:f64[200,7] = mul vqc usx
                              vqf:f64[200,7] = add_any vpr vqe
                              vqg:f64[200,7] = mul vqb umg
                              vqh:f64[200,7] = add_any vpt vqg
                              vqi:f64[200,7] = mul vpz utc
                              vqj:f64[200,7] = mul usy vqi
                              vqk:f64[200,7] = add_any vqd vqj
                              vql:f64[200,7] = mul vqk utb
                              vqm:f64[200,7] = mul vql uta
                              vqn:f64[200,7] = add_any vqf vqm
                              vqo:f64[200,7] = mul vql usz
                              vqp:f64[200,7] = add_any vqh vqo
                              vqq:f64[200,7] = mul vqi usx
                              vqr:f64[200,7] = add_any vqp vqq
                              vqs:f64[200,7,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1)
                                shape=(200, 7, 1)
                              ] vqr
                              vqt:f64[200,7,3] = pad[
                                padding_config=((0, 0, 0), (0, 0, 0), (1, 1, 0))
                              ] vqs 0.0
                              vqu:f64[200,7,3] = add_any vpx vqt
                              vqv:f64[200,7] = mul vqi umf
                              vqw:f64[200,7] = add_any vqn vqv
                              vqx:f64[200,7,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1)
                                shape=(200, 7, 1)
                              ] vqw
                              vqy:f64[200,7,3] = pad[
                                padding_config=((0, 0, 0), (0, 0, 0), (2, 0, 0))
                              ] vqx 0.0
                              vqz:f64[200,7,3] = add_any vqu vqy
                              vra:f64[200,7,12] = pad[
                                padding_config=((0, 0, 0), (0, 0, 0), (6, 3, 0))
                              ] vqz 0.0
                              vrb:f64[200,7,12] = add_any vnu vra
                              vrc:f64[200,7,1] = slice[
                                limit_indices=(200, 7, 1)
                                start_indices=(0, 0, 0)
                                strides=None
                              ] vkm
                              vrd:f64[200,7,1] = slice[
                                limit_indices=(200, 7, 2)
                                start_indices=(0, 0, 1)
                                strides=None
                              ] vkm
                              vre:f64[200,7,1] = slice[
                                limit_indices=(200, 7, 3)
                                start_indices=(0, 0, 2)
                                strides=None
                              ] vkm
                              vrf:f64[200,7] = reduce_sum[axes=(2,)] vre
                              vrg:f64[200,7] = reduce_sum[axes=(2,)] vrd
                              vrh:f64[200,7] = div vrg usw
                              vri:f64[200,7] = mul vrh usv
                              vrj:f64[200,7] = neg vri
                              vrk:f64[200,7] = mul ust vrj
                              vrl:f64[200,7] = mul vrj usl
                              vrm:f64[200,7] = mul usm vri
                              vrn:f64[200,7] = mul vri uss
                              vro:f64[200,7] = mul vrg usu
                              vrp:f64[200,7] = mul ust vro
                              vrq:f64[200,7] = add_any vrm vrp
                              vrr:f64[200,7] = mul vro uss
                              vrs:f64[200,7] = add_any vrl vrr
                              vrt:f64[200,7] = mul -0.25 vrs
                              vru:f64[200,7] = neg vrt
                              vrv:f64[200,7] = mul vru usr
                              vrw:f64[200,7] = add_any vrf vrv
                              vrx:f64[200,7] = mul usm vro
                              vry:f64[200,7] = add_any vrk vrx
                              vrz:f64[200,7] = neg vry
                              vsa:f64[200,7] = mul urx vrz
                              vsb:f64[200,7] = neg vsa
                              vsc:f64[200,7] = mul vsb usq
                              vsd:f64[200,7] = mul vrz usp
                              vse:f64[200,7] = mul urs vry
                              vsf:f64[200,7] = mul vse uso
                              vsg:f64[200,7] = add_any vsc vsf
                              vsh:f64[200,7] = mul vry usn
                              vsi:f64[200,7] = mul vro usl
                              vsj:f64[200,7] = add_any vrn vsi
                              vsk:f64[200,7] = mul -0.25 vsj
                              vsl:f64[200,7] = mul vsk usk
                              vsm:f64[200,7] = add_any vrw vsl
                              vsn:f64[200,7] = neg vsm
                              vso:f64[200,7] = neg vsn
                              vsp:f64[200,7] = mul vso usj
                              vsq:f64[200,7] = pjit[name=clip jaxpr=clip5] ush usi
                                vsp
                              vsr:f64[200,7] = div vsq ume
                              vss:f64[200,7] = neg vsr
                              vst:f64[200,7] = mul vss usg
                              vsu:f64[200,7] = mul vst usf
                              vsv:f64[200,7] = mul vsu use
                              vsw:f64[200,7] = mul vsv usd
                              vsx:f64[200,7] = mul vsw usc
                              vsy:f64[200,7] = add_any vsd vsx
                              vsz:f64[200,7] = mul vsw usb
                              vta:f64[200,7] = add_any vsh vsz
                              vtb:f64[200,7] = mul vsw usa
                              vtc:f64[200,7] = add_any vrq vtb
                              vtd:f64[200,7,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1)
                                shape=(200, 7, 1)
                              ] vtc
                              vte:f64[200,7,3] = pad[
                                padding_config=((0, 0, 0), (0, 0, 0), (0, 2, 0))
                              ] vtd 0.0
                              vtf:f64[200,7] = reduce_sum[axes=(2,)] vrc
                              vtg:f64[200,7] = add_any vsg vtf
                              vth:f64[200,7] = div vtg urz
                              vti:f64[200,7] = mul vth ury
                              vtj:f64[200,7] = neg vti
                              vtk:f64[200,7] = mul urx vtj
                              vtl:f64[200,7] = mul vtj urr
                              vtm:f64[200,7] = add_any vsy vtl
                              vtn:f64[200,7] = mul vti umd
                              vto:f64[200,7] = add_any vta vtn
                              vtp:f64[200,7] = mul vtg urw
                              vtq:f64[200,7] = mul urs vtp
                              vtr:f64[200,7] = add_any vtk vtq
                              vts:f64[200,7] = mul vtr urv
                              vtt:f64[200,7] = mul vts uru
                              vtu:f64[200,7] = add_any vtm vtt
                              vtv:f64[200,7] = mul vts urt
                              vtw:f64[200,7] = add_any vto vtv
                              vtx:f64[200,7] = mul vtp urr
                              vty:f64[200,7] = add_any vtw vtx
                              vtz:f64[200,7,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1)
                                shape=(200, 7, 1)
                              ] vty
                              vua:f64[200,7,3] = pad[
                                padding_config=((0, 0, 0), (0, 0, 0), (1, 1, 0))
                              ] vtz 0.0
                              vub:f64[200,7,3] = add_any vte vua
                              vuc:f64[200,7] = mul vtp umc
                              vud:f64[200,7] = add_any vtu vuc
                              vue:f64[200,7,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1)
                                shape=(200, 7, 1)
                              ] vud
                              vuf:f64[200,7,3] = pad[
                                padding_config=((0, 0, 0), (0, 0, 0), (2, 0, 0))
                              ] vue 0.0
                              vug:f64[200,7,3] = add_any vub vuf
                              vuh:f64[200,7,12] = pad[
                                padding_config=((0, 0, 0), (0, 0, 0), (3, 6, 0))
                              ] vug 0.0
                              vui:f64[200,7,12] = add_any vrb vuh
                              vuj:f64[200,7,1] = slice[
                                limit_indices=(200, 7, 1)
                                start_indices=(0, 0, 0)
                                strides=None
                              ] vkl
                              vuk:f64[200,7,1] = slice[
                                limit_indices=(200, 7, 2)
                                start_indices=(0, 0, 1)
                                strides=None
                              ] vkl
                              vul:f64[200,7,1] = slice[
                                limit_indices=(200, 7, 3)
                                start_indices=(0, 0, 2)
                                strides=None
                              ] vkl
                              vum:f64[200,7] = reduce_sum[axes=(2,)] vul
                              vun:f64[200,7] = reduce_sum[axes=(2,)] vuk
                              vuo:f64[200,7] = div vun urq
                              vup:f64[200,7] = mul vuo urp
                              vuq:f64[200,7] = neg vup
                              vur:f64[200,7] = mul urn vuq
                              vus:f64[200,7] = mul vuq urf
                              vut:f64[200,7] = mul urg vup
                              vuu:f64[200,7] = mul vup urm
                              vuv:f64[200,7] = mul vun uro
                              vuw:f64[200,7] = mul urn vuv
                              vux:f64[200,7] = add_any vut vuw
                              vuy:f64[200,7] = mul vuv urm
                              vuz:f64[200,7] = add_any vus vuy
                              vva:f64[200,7] = mul -0.25 vuz
                              vvb:f64[200,7] = neg vva
                              vvc:f64[200,7] = mul vvb url
                              vvd:f64[200,7] = add_any vum vvc
                              vve:f64[200,7] = mul urg vuv
                              vvf:f64[200,7] = add_any vur vve
                              vvg:f64[200,7] = neg vvf
                              vvh:f64[200,7] = mul uqr vvg
                              vvi:f64[200,7] = neg vvh
                              vvj:f64[200,7] = mul vvi urk
                              vvk:f64[200,7] = mul vvg urj
                              vvl:f64[200,7] = mul uqm vvf
                              vvm:f64[200,7] = mul vvl uri
                              vvn:f64[200,7] = add_any vvj vvm
                              vvo:f64[200,7] = mul vvf urh
                              vvp:f64[200,7] = mul vuv urf
                              vvq:f64[200,7] = add_any vuu vvp
                              vvr:f64[200,7] = mul -0.25 vvq
                              vvs:f64[200,7] = mul vvr ure
                              vvt:f64[200,7] = add_any vvd vvs
                              vvu:f64[200,7] = neg vvt
                              vvv:f64[200,7] = neg vvu
                              vvw:f64[200,7] = mul vvv urd
                              vvx:f64[200,7] = pjit[name=clip jaxpr=clip5] urb urc
                                vvw
                              vvy:f64[200,7] = div vvx umb
                              vvz:f64[200,7] = neg vvy
                              vwa:f64[200,7] = mul vvz ura
                              vwb:f64[200,7] = mul vwa uqz
                              vwc:f64[200,7] = mul vwb uqy
                              vwd:f64[200,7] = mul vwc uqx
                              vwe:f64[200,7] = mul vwd uqw
                              vwf:f64[200,7] = add_any vvk vwe
                              vwg:f64[200,7] = mul vwd uqv
                              vwh:f64[200,7] = add_any vvo vwg
                              vwi:f64[200,7] = mul vwd uqu
                              vwj:f64[200,7] = add_any vux vwi
                              vwk:f64[200,7,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1)
                                shape=(200, 7, 1)
                              ] vwj
                              vwl:f64[200,7,3] = pad[
                                padding_config=((0, 0, 0), (0, 0, 0), (0, 2, 0))
                              ] vwk 0.0
                              vwm:f64[200,7] = reduce_sum[axes=(2,)] vuj
                              vwn:f64[200,7] = add_any vvn vwm
                              vwo:f64[200,7] = div vwn uqt
                              vwp:f64[200,7] = mul vwo uqs
                              vwq:f64[200,7] = neg vwp
                              vwr:f64[200,7] = mul uqr vwq
                              vws:f64[200,7] = mul vwq uql
                              vwt:f64[200,7] = add_any vwf vws
                              vwu:f64[200,7] = mul vwp uma
                              vwv:f64[200,7] = add_any vwh vwu
                              vww:f64[200,7] = mul vwn uqq
                              vwx:f64[200,7] = mul uqm vww
                              vwy:f64[200,7] = add_any vwr vwx
                              vwz:f64[200,7] = mul vwy uqp
                              vxa:f64[200,7] = mul vwz uqo
                              vxb:f64[200,7] = add_any vwt vxa
                              vxc:f64[200,7] = mul vwz uqn
                              vxd:f64[200,7] = add_any vwv vxc
                              vxe:f64[200,7] = mul vww uql
                              vxf:f64[200,7] = add_any vxd vxe
                              vxg:f64[200,7,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1)
                                shape=(200, 7, 1)
                              ] vxf
                              vxh:f64[200,7,3] = pad[
                                padding_config=((0, 0, 0), (0, 0, 0), (1, 1, 0))
                              ] vxg 0.0
                              vxi:f64[200,7,3] = add_any vwl vxh
                              vxj:f64[200,7] = mul vww ulz
                              vxk:f64[200,7] = add_any vxb vxj
                              vxl:f64[200,7,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1)
                                shape=(200, 7, 1)
                              ] vxk
                              vxm:f64[200,7,3] = pad[
                                padding_config=((0, 0, 0), (0, 0, 0), (2, 0, 0))
                              ] vxl 0.0
                              vxn:f64[200,7,3] = add_any vxi vxm
                              vxo:f64[200,7,12] = pad[
                                padding_config=((0, 0, 0), (0, 0, 0), (0, 9, 0))
                              ] vxn 0.0
                              vxp:f64[200,7,12] = add_any vui vxo
                              vxq:f64[200,7,3] = slice[
                                limit_indices=(200, 7, 3)
                                start_indices=(0, 0, 0)
                                strides=None
                              ] vxp
                              vxr:f64[200,7,3] = slice[
                                limit_indices=(200, 7, 6)
                                start_indices=(0, 0, 3)
                                strides=None
                              ] vxp
                              vxs:f64[200,7,3] = slice[
                                limit_indices=(200, 7, 9)
                                start_indices=(0, 0, 6)
                                strides=None
                              ] vxp
                              vxt:f64[200,7,3] = slice[
                                limit_indices=(200, 7, 12)
                                start_indices=(0, 0, 9)
                                strides=None
                              ] vxp
                              vxu:f64[200,7,3] = broadcast_in_dim[
                                broadcast_dimensions=()
                                shape=(200, 7, 3)
                              ] 0.0
                              vxv:f64[200,7,3] = select_n uqd vxt vxu
                              vxw:f64[200,7,3] = select_n uqd vxu vxt
                              vxx:f64[200,7,1] = slice[
                                limit_indices=(200, 7, 1)
                                start_indices=(0, 0, 0)
                                strides=None
                              ] vxw
                              vxy:f64[200,7,1] = slice[
                                limit_indices=(200, 7, 2)
                                start_indices=(0, 0, 1)
                                strides=None
                              ] vxw
                              vxz:f64[200,7] = reduce_sum[axes=(2,)] vxy
                              vya:f64[200,7] = mul uly vxz
                              vyb:f64[200,7] = neg vya
                              vyc:f64[200,7] = mul vyb uqk
                              vyd:f64[200,7] = mul 6.283185307179586 vyc
                              vye:f64[200,7] = mul 6.283185307179586 vya
                              vyf:f64[200,7] = add_any vyd vye
                              vyg:f64[200,7] = reduce_sum[axes=(2,)] vxx
                              vyh:f64[200,7] = mul ulx vyg
                              vyi:f64[200,7] = neg vyh
                              vyj:f64[200,7] = mul vyi uqj
                              vyk:f64[200,7] = mul 6.283185307179586 vyj
                              vyl:f64[200,7] = add_any vyf vyk
                              vym:f64[200,7] = mul 6.283185307179586 vyh
                              vyn:f64[200,7] = add_any vyl vym
                              vyo:f64[200,7,1] = slice[
                                limit_indices=(200, 7, 1)
                                start_indices=(0, 0, 0)
                                strides=None
                              ] vxv
                              vyp:f64[200,7,1] = slice[
                                limit_indices=(200, 7, 2)
                                start_indices=(0, 0, 1)
                                strides=None
                              ] vxv
                              vyq:f64[200,7,1] = slice[
                                limit_indices=(200, 7, 3)
                                start_indices=(0, 0, 2)
                                strides=None
                              ] vxv
                              vyr:f64[200,7] = reduce_sum[axes=(2,)] vyq
                              vys:f64[200,7] = mul 0.04 vyr
                              vyt:f64[200,7] = neg vys
                              vyu:f64[200,7] = neg vyt
                              vyv:f64[200,7] = mul vyu uqi
                              vyw:f64[200,7] = mul 6.283185307179586 vyv
                              vyx:f64[200,7] = add_any vyn vyw
                              vyy:f64[200,7] = reduce_sum[axes=(2,)] vyp
                              vyz:f64[200,7] = mul ulw vyy
                              vza:f64[200,7] = neg vyz
                              vzb:f64[200,7] = mul vza uqh
                              vzc:f64[200,7] = mul 6.283185307179586 vzb
                              vzd:f64[200,7] = add_any vyx vzc
                              vze:f64[200,7] = mul 6.283185307179586 vyz
                              vzf:f64[200,7] = add_any vzd vze
                              vzg:f64[200,7] = reduce_sum[axes=(2,)] vyo
                              vzh:f64[200,7] = mul ulv vzg
                              vzi:f64[200,7] = neg vzh
                              vzj:f64[200,7] = mul vzi uqg
                              vzk:f64[200,7] = mul 6.283185307179586 vzj
                              vzl:f64[200,7] = add_any vzf vzk
                              vzm:f64[200,7] = mul 6.283185307179586 vzh
                              vzn:f64[200,7] = add_any vzl vzm
                              vzo:f64[200,7] = broadcast_in_dim[
                                broadcast_dimensions=()
                                shape=(200, 7)
                              ] 0.0
                              vzp:f64[200,7] = select_n uqe vzn vzo
                              vzq:f64[200,7] = select_n uqe vzo vzn
                              vzr:f64[200,7] = div vzq 0.5
                              vzs:f64[200,7] = div vzp 0.5
                              vzt:f64[200,7] = add_any vzr vzs
                              vzu:f64[200,7] = pjit[
                                name=remainder
                                jaxpr=remainder10
                              ] uqf vzt
                              vzv:f64[200,7] = div vzu 6.283185307179586
                              vzw:f64[200,7,3] = broadcast_in_dim[
                                broadcast_dimensions=()
                                shape=(200, 7, 3)
                              ] 0.0
                              vzx:f64[200,7,3] = select_n upv vxs vzw
                              vzy:f64[200,7,3] = select_n upv vzw vxs
                              vzz:f64[200,7,1] = slice[
                                limit_indices=(200, 7, 1)
                                start_indices=(0, 0, 0)
                                strides=None
                              ] vzy
                              waa:f64[200,7,1] = slice[
                                limit_indices=(200, 7, 2)
                                start_indices=(0, 0, 1)
                                strides=None
                              ] vzy
                              wab:f64[200,7] = reduce_sum[axes=(2,)] waa
                              wac:f64[200,7] = mul ulu wab
                              wad:f64[200,7] = neg wac
                              wae:f64[200,7] = mul wad uqc
                              waf:f64[200,7] = mul 6.283185307179586 wae
                              wag:f64[200,7] = mul 6.283185307179586 wac
                              wah:f64[200,7] = add_any waf wag
                              wai:f64[200,7] = reduce_sum[axes=(2,)] vzz
                              waj:f64[200,7] = mul ult wai
                              wak:f64[200,7] = neg waj
                              wal:f64[200,7] = mul wak uqb
                              wam:f64[200,7] = mul 6.283185307179586 wal
                              wan:f64[200,7] = add_any wah wam
                              wao:f64[200,7] = mul 6.283185307179586 waj
                              wap:f64[200,7] = add_any wan wao
                              waq:f64[200,7,1] = slice[
                                limit_indices=(200, 7, 1)
                                start_indices=(0, 0, 0)
                                strides=None
                              ] vzx
                              war:f64[200,7,1] = slice[
                                limit_indices=(200, 7, 2)
                                start_indices=(0, 0, 1)
                                strides=None
                              ] vzx
                              was:f64[200,7,1] = slice[
                                limit_indices=(200, 7, 3)
                                start_indices=(0, 0, 2)
                                strides=None
                              ] vzx
                              wat:f64[200,7] = reduce_sum[axes=(2,)] was
                              wau:f64[200,7] = mul 0.04 wat
                              wav:f64[200,7] = neg wau
                              waw:f64[200,7] = neg wav
                              wax:f64[200,7] = mul waw uqa
                              way:f64[200,7] = mul 6.283185307179586 wax
                              waz:f64[200,7] = add_any wap way
                              wba:f64[200,7] = reduce_sum[axes=(2,)] war
                              wbb:f64[200,7] = mul uls wba
                              wbc:f64[200,7] = neg wbb
                              wbd:f64[200,7] = mul wbc upz
                              wbe:f64[200,7] = mul 6.283185307179586 wbd
                              wbf:f64[200,7] = add_any waz wbe
                              wbg:f64[200,7] = mul 6.283185307179586 wbb
                              wbh:f64[200,7] = add_any wbf wbg
                              wbi:f64[200,7] = reduce_sum[axes=(2,)] waq
                              wbj:f64[200,7] = mul ulr wbi
                              wbk:f64[200,7] = neg wbj
                              wbl:f64[200,7] = mul wbk upy
                              wbm:f64[200,7] = mul 6.283185307179586 wbl
                              wbn:f64[200,7] = add_any wbh wbm
                              wbo:f64[200,7] = mul 6.283185307179586 wbj
                              wbp:f64[200,7] = add_any wbn wbo
                              wbq:f64[200,7] = broadcast_in_dim[
                                broadcast_dimensions=()
                                shape=(200, 7)
                              ] 0.0
                              wbr:f64[200,7] = select_n upw wbp wbq
                              wbs:f64[200,7] = select_n upw wbq wbp
                              wbt:f64[200,7] = div wbs 0.5
                              wbu:f64[200,7] = div wbr 0.5
                              wbv:f64[200,7] = add_any wbt wbu
                              wbw:f64[200,7] = pjit[
                                name=remainder
                                jaxpr=remainder10
                              ] upx wbv
                              wbx:f64[200,7] = div wbw 6.283185307179586
                              wby:f64[200,7] = add_any vzv wbx
                              wbz:f64[200,7,3] = broadcast_in_dim[
                                broadcast_dimensions=()
                                shape=(200, 7, 3)
                              ] 0.0
                              wca:f64[200,7,3] = select_n upn vxr wbz
                              wcb:f64[200,7,3] = select_n upn wbz vxr
                              wcc:f64[200,7,1] = slice[
                                limit_indices=(200, 7, 1)
                                start_indices=(0, 0, 0)
                                strides=None
                              ] wcb
                              wcd:f64[200,7,1] = slice[
                                limit_indices=(200, 7, 2)
                                start_indices=(0, 0, 1)
                                strides=None
                              ] wcb
                              wce:f64[200,7] = reduce_sum[axes=(2,)] wcd
                              wcf:f64[200,7] = mul ulq wce
                              wcg:f64[200,7] = neg wcf
                              wch:f64[200,7] = mul wcg upu
                              wci:f64[200,7] = mul 6.283185307179586 wch
                              wcj:f64[200,7] = mul 6.283185307179586 wcf
                              wck:f64[200,7] = add_any wci wcj
                              wcl:f64[200,7] = reduce_sum[axes=(2,)] wcc
                              wcm:f64[200,7] = mul ulp wcl
                              wcn:f64[200,7] = neg wcm
                              wco:f64[200,7] = mul wcn upt
                              wcp:f64[200,7] = mul 6.283185307179586 wco
                              wcq:f64[200,7] = add_any wck wcp
                              wcr:f64[200,7] = mul 6.283185307179586 wcm
                              wcs:f64[200,7] = add_any wcq wcr
                              wct:f64[200,7,1] = slice[
                                limit_indices=(200, 7, 1)
                                start_indices=(0, 0, 0)
                                strides=None
                              ] wca
                              wcu:f64[200,7,1] = slice[
                                limit_indices=(200, 7, 2)
                                start_indices=(0, 0, 1)
                                strides=None
                              ] wca
                              wcv:f64[200,7,1] = slice[
                                limit_indices=(200, 7, 3)
                                start_indices=(0, 0, 2)
                                strides=None
                              ] wca
                              wcw:f64[200,7] = reduce_sum[axes=(2,)] wcv
                              wcx:f64[200,7] = mul 0.04 wcw
                              wcy:f64[200,7] = neg wcx
                              wcz:f64[200,7] = neg wcy
                              wda:f64[200,7] = mul wcz ups
                              wdb:f64[200,7] = mul 6.283185307179586 wda
                              wdc:f64[200,7] = add_any wcs wdb
                              wdd:f64[200,7] = reduce_sum[axes=(2,)] wcu
                              wde:f64[200,7] = mul ulo wdd
                              wdf:f64[200,7] = neg wde
                              wdg:f64[200,7] = mul wdf upr
                              wdh:f64[200,7] = mul 6.283185307179586 wdg
                              wdi:f64[200,7] = add_any wdc wdh
                              wdj:f64[200,7] = mul 6.283185307179586 wde
                              wdk:f64[200,7] = add_any wdi wdj
                              wdl:f64[200,7] = reduce_sum[axes=(2,)] wct
                              wdm:f64[200,7] = mul uln wdl
                              wdn:f64[200,7] = neg wdm
                              wdo:f64[200,7] = mul wdn upq
                              wdp:f64[200,7] = mul 6.283185307179586 wdo
                              wdq:f64[200,7] = add_any wdk wdp
                              wdr:f64[200,7] = mul 6.283185307179586 wdm
                              wds:f64[200,7] = add_any wdq wdr
                              wdt:f64[200,7] = broadcast_in_dim[
                                broadcast_dimensions=()
                                shape=(200, 7)
                              ] 0.0
                              wdu:f64[200,7] = select_n upo wds wdt
                              wdv:f64[200,7] = select_n upo wdt wds
                              wdw:f64[200,7] = div wdv 0.5
                              wdx:f64[200,7] = div wdu 0.5
                              wdy:f64[200,7] = add_any wdw wdx
                              wdz:f64[200,7] = pjit[
                                name=remainder
                                jaxpr=remainder10
                              ] upp wdy
                              wea:f64[200,7] = div wdz 6.283185307179586
                              web:f64[200,7] = add_any wby wea
                              wec:f64[200,7,3] = broadcast_in_dim[
                                broadcast_dimensions=()
                                shape=(200, 7, 3)
                              ] 0.0
                              wed:f64[200,7,3] = select_n uoc vxq wec
                              wee:f64[200,7,3] = select_n uoc wec vxq
                              wef:f64[200,7,1] = slice[
                                limit_indices=(200, 7, 1)
                                start_indices=(0, 0, 0)
                                strides=None
                              ] wee
                              weg:f64[200,7,1] = slice[
                                limit_indices=(200, 7, 2)
                                start_indices=(0, 0, 1)
                                strides=None
                              ] wee
                              weh:f64[200,7] = reduce_sum[axes=(2,)] weg
                              wei:f64[200,7] = mul ulm weh
                              wej:f64[200,7] = neg wei
                              wek:f64[200,7] = mul wej upm
                              wel:f64[200,7] = mul 6.283185307179586 wek
                              wem:f64[200,7] = mul 6.283185307179586 wei
                              wen:f64[200,7] = add_any wel wem
                              weo:f64[200,7] = reduce_sum[axes=(2,)] wef
                              wep:f64[200,7] = mul ull weo
                              weq:f64[200,7] = neg wep
                              wer:f64[200,7] = mul weq upl
                              wes:f64[200,7] = mul 6.283185307179586 wer
                              wet:f64[200,7] = add_any wen wes
                              weu:f64[200,7] = mul 6.283185307179586 wep
                              wev:f64[200,7] = add_any wet weu
                              wew:f64[200,7,1] = slice[
                                limit_indices=(200, 7, 1)
                                start_indices=(0, 0, 0)
                                strides=None
                              ] wed
                              wex:f64[200,7,1] = slice[
                                limit_indices=(200, 7, 2)
                                start_indices=(0, 0, 1)
                                strides=None
                              ] wed
                              wey:f64[200,7,1] = slice[
                                limit_indices=(200, 7, 3)
                                start_indices=(0, 0, 2)
                                strides=None
                              ] wed
                              wez:f64[200,7] = reduce_sum[axes=(2,)] wey
                              wfa:f64[200,7] = mul 0.04 wez
                              wfb:f64[200,7] = neg wfa
                              wfc:f64[200,7] = neg wfb
                              wfd:f64[200,7] = mul wfc upk
                              wfe:f64[200,7] = mul 6.283185307179586 wfd
                              wff:f64[200,7] = add_any wev wfe
                              wfg:f64[200,7] = reduce_sum[axes=(2,)] wex
                              wfh:f64[200,7] = mul ulk wfg
                              wfi:f64[200,7] = neg wfh
                              wfj:f64[200,7] = mul wfi upj
                              wfk:f64[200,7] = mul 6.283185307179586 wfj
                              wfl:f64[200,7] = add_any wff wfk
                              wfm:f64[200,7] = mul 6.283185307179586 wfh
                              wfn:f64[200,7] = add_any wfl wfm
                              wfo:f64[200,7] = reduce_sum[axes=(2,)] wew
                              wfp:f64[200,7] = mul uku wfo
                              wfq:f64[200,7] = neg wfp
                              wfr:f64[200,7] = mul wfq upi
                              wfs:f64[200,7] = mul 6.283185307179586 wfr
                              wft:f64[200,7] = add_any wfn wfs
                              wfu:f64[200,7] = mul 6.283185307179586 wfp
                              wfv:f64[200,7] = add_any wft wfu
                              wfw:f64[200,7] = broadcast_in_dim[
                                broadcast_dimensions=()
                                shape=(200, 7)
                              ] 0.0
                              wfx:f64[200,7] = select_n uod wfv wfw
                              wfy:f64[200,7] = select_n uod wfw wfv
                              wfz:f64[200,7] = div wfy 0.5
                              wga:f64[200,7] = div wfx 0.5
                              wgb:f64[200,7] = add_any wfz wga
                              wgc:f64[200,7] = pjit[
                                name=remainder
                                jaxpr=remainder10
                              ] uph wgb
                              wgd:f64[200,7] = div wgc 6.283185307179586
                              wge:f64[200,7] = add_any web wgd
                              wgf:f64[200,7] = div wge upg
                              wgg:f64[200,7] = mul wgf upf
                              wgh:f64[200,7,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1)
                                shape=(200, 7, 1)
                              ] wgg
                              wgi:f64[200,7,36] = pad[
                                padding_config=((0, 0, 0), (0, 0, 0), (34, 1, 0))
                              ] wgh 0.0
                              wgj:f64[200,7,36] = add_any vki wgi
                              wgk:f64[200,7] = mul wge upe
                              wgl:f64[200,7,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1)
                                shape=(200, 7, 1)
                              ] wgk
                              wgm:f64[200,7,36] = pad[
                                padding_config=((0, 0, 0), (0, 0, 0), (35, 0, 0))
                              ] wgl 0.0
                              wgn:f64[200,7,36] = add_any wgj wgm
                              wgo:f64[200,7,36] = div wgn 2.0
                              wgp:f64[200,7,36] = mul wgo ulj
                              wgq:f64[200,7,36] = div wgp uli
                              wgr:f64[200,7,36] = mul 2.0 wgq
                              wgs:f64[200,7,34] = slice[
                                limit_indices=(200, 7, 34)
                                start_indices=(0, 0, 0)
                                strides=None
                              ] wgr
                              wgt:f64[200,7,2] = slice[
                                limit_indices=(200, 7, 36)
                                start_indices=(0, 0, 34)
                                strides=None
                              ] wgr
                              wgu:f64[200,7,1] = slice[
                                limit_indices=(200, 7, 1)
                                start_indices=(0, 0, 0)
                                strides=None
                              ] wgt
                              wgv:f64[200,7,1] = slice[
                                limit_indices=(200, 7, 2)
                                start_indices=(0, 0, 1)
                                strides=None
                              ] wgt
                              wgw:f64[200,7] = reduce_sum[axes=(2,)] wgv
                              wgx:f64[200,7,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1)
                                shape=(200, 7, 1)
                              ] wgw
                              wgy:f64[200,7,36] = pad[
                                padding_config=((0, 0, 0), (0, 0, 0), (35, 0, 0))
                              ] wgx 0.0
                              wgz:f64[200,7] = reduce_sum[axes=(2,)] wgu
                              wha:f64[200,7,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1)
                                shape=(200, 7, 1)
                              ] wgz
                              whb:f64[200,7,36] = pad[
                                padding_config=((0, 0, 0), (0, 0, 0), (34, 1, 0))
                              ] wha 0.0
                              whc:f64[200,7,36] = add_any wgy whb
                              whd:f64[200,7,4] = slice[
                                limit_indices=(200, 7, 4)
                                start_indices=(0, 0, 0)
                                strides=None
                              ] wgs
                              whe:f64[200,7,12] = slice[
                                limit_indices=(200, 7, 16)
                                start_indices=(0, 0, 4)
                                strides=None
                              ] wgs
                              whf:f64[200,7,3] = slice[
                                limit_indices=(200, 7, 19)
                                start_indices=(0, 0, 16)
                                strides=None
                              ] wgs
                              whg:f64[200,7,3] = slice[
                                limit_indices=(200, 7, 22)
                                start_indices=(0, 0, 19)
                                strides=None
                              ] wgs
                              whh:f64[200,7,12] = slice[
                                limit_indices=(200, 7, 34)
                                start_indices=(0, 0, 22)
                                strides=None
                              ] wgs
                              whi:f64[200,7,18] = pad[
                                padding_config=((0, 0, 0), (0, 0, 0), (6, 0, 0))
                              ] whh 0.0
                              whj:f64[200,7,18] = add_any vhh whi
                              whk:f64[200,7,3] = mul uox whg
                              whl:f64[200,7,3] whm:f64[200,7,3] = pjit[
                                name=cross
                                jaxpr=cross28
                              ] ulc uoy uoz uld ule upa upb ulf upc ulg ulh upd whk
                              whn:f64[200,7,3] = mul whg uow
                              who:f64[200,7] = reduce_sum[axes=(2,)] whn
                              whp:f64[200,7,1] = reshape[
                                dimensions=None
                                new_sizes=(200, 7, 1)
                              ] who
                              whq:f64[200,7] = reduce_sum[axes=(2,)] whp
                              whr:f64[200,7] = mul 2.0 whq
                              whs:f64[200,7,3] = mul uov whg
                              wht:f64[200,7,3] = add_any whm whs
                              whu:f64[200,7,3] = mul whg uor
                              whv:f64[200,7] = reduce_sum[axes=(2,)] whu
                              whw:f64[200,7,1] = reshape[
                                dimensions=None
                                new_sizes=(200, 7, 1)
                              ] whv
                              whx:f64[200,7] = reduce_sum[axes=(2,)] whw
                              why:f64[200,7] = neg whx
                              whz:f64[200,7,3] = dot_general[
                                dimension_numbers=(([], []), ([0, 1], [0, 1]))
                                preferred_element_type=float64
                              ] why uos
                              wia:f64[200,7,3] = add_any whl whz
                              wib:f64[200,7,3] = dot_general[
                                dimension_numbers=(([], []), ([0, 1], [0, 1]))
                                preferred_element_type=float64
                              ] why uos
                              wic:f64[200,7,3] = add_any wia wib
                              wid:f64[200,7] = mul uou whx
                              wie:f64[200,7] = add_any whr wid
                              wif:f64[200,7] = mul whx uou
                              wig:f64[200,7] = add_any wie wif
                              wih:f64[200,7,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1)
                                shape=(200, 7, 1)
                              ] wig
                              wii:f64[200,7,4] = pad[
                                padding_config=((0, 0, 0), (0, 0, 0), (0, 3, 0))
                              ] wih 0.0
                              wij:f64[200,7,4] = add_any whd wii
                              wik:f64[200,7,3] = mul 2.0 whg
                              wil:f64[200,7,3] = mul uot wik
                              wim:f64[200,7,3] = add_any wic wil
                              win:f64[200,7,3] = mul wik uos
                              wio:f64[200,7] = reduce_sum[axes=(2,)] win
                              wip:f64[200,7,1] = reshape[
                                dimensions=None
                                new_sizes=(200, 7, 1)
                              ] wio
                              wiq:f64[200,7] = reduce_sum[axes=(2,)] wip
                              wir:f64[200,7,3] = dot_general[
                                dimension_numbers=(([], []), ([0, 1], [0, 1]))
                                preferred_element_type=float64
                              ] wiq uos
                              wis:f64[200,7,3] = add_any wht wir
                              wit:f64[200,7,18] = pad[
                                padding_config=((0, 0, 0), (0, 0, 0), (3, 12, 0))
                              ] wis 0.0
                              wiu:f64[200,7,18] = add_any whj wit
                              wiv:f64[200,7,3] = dot_general[
                                dimension_numbers=(([], []), ([0, 1], [0, 1]))
                                preferred_element_type=float64
                              ] wiq uor
                              wiw:f64[200,7,3] = add_any wim wiv
                              wix:f64[200,7,4] = pad[
                                padding_config=((0, 0, 0), (0, 0, 0), (1, 0, 0))
                              ] wiw 0.0
                              wiy:f64[200,7,4] = add_any wij wix
                              wiz:f64[200,7,3] = mul uok whf
                              wja:f64[200,7,3] wjb:f64[200,7,3] = pjit[
                                name=cross
                                jaxpr=cross28
                              ] ukw uol uom ukx uky uon uoo ukz uop ula ulb uoq wiz
                              wjc:f64[200,7,3] = mul whf uoj
                              wjd:f64[200,7] = reduce_sum[axes=(2,)] wjc
                              wje:f64[200,7,1] = reshape[
                                dimensions=None
                                new_sizes=(200, 7, 1)
                              ] wjd
                              wjf:f64[200,7] = reduce_sum[axes=(2,)] wje
                              wjg:f64[200,7] = mul 2.0 wjf
                              wjh:f64[200,7,3] = mul uoi whf
                              wji:f64[200,7,3] = add_any wjb wjh
                              wjj:f64[200,7,3] = mul whf uoe
                              wjk:f64[200,7] = reduce_sum[axes=(2,)] wjj
                              wjl:f64[200,7,1] = reshape[
                                dimensions=None
                                new_sizes=(200, 7, 1)
                              ] wjk
                              wjm:f64[200,7] = reduce_sum[axes=(2,)] wjl
                              wjn:f64[200,7] = neg wjm
                              wjo:f64[200,7,3] = dot_general[
                                dimension_numbers=(([], []), ([0, 1], [0, 1]))
                                preferred_element_type=float64
                              ] wjn uof
                              wjp:f64[200,7,3] = add_any wja wjo
                              wjq:f64[200,7,3] = dot_general[
                                dimension_numbers=(([], []), ([0, 1], [0, 1]))
                                preferred_element_type=float64
                              ] wjn uof
                              wjr:f64[200,7,3] = add_any wjp wjq
                              wjs:f64[200,7] = mul uoh wjm
                              wjt:f64[200,7] = add_any wjg wjs
                              wju:f64[200,7] = mul wjm uoh
                              wjv:f64[200,7] = add_any wjt wju
                              wjw:f64[200,7,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1)
                                shape=(200, 7, 1)
                              ] wjv
                              wjx:f64[200,7,4] = pad[
                                padding_config=((0, 0, 0), (0, 0, 0), (0, 3, 0))
                              ] wjw 0.0
                              wjy:f64[200,7,3] = mul 2.0 whf
                              wjz:f64[200,7,3] = mul uog wjy
                              wka:f64[200,7,3] = add_any wjr wjz
                              wkb:f64[200,7,3] = mul wjy uof
                              wkc:f64[200,7] = reduce_sum[axes=(2,)] wkb
                              wkd:f64[200,7,1] = reshape[
                                dimensions=None
                                new_sizes=(200, 7, 1)
                              ] wkc
                              wke:f64[200,7] = reduce_sum[axes=(2,)] wkd
                              wkf:f64[200,7,3] = dot_general[
                                dimension_numbers=(([], []), ([0, 1], [0, 1]))
                                preferred_element_type=float64
                              ] wke uof
                              wkg:f64[200,7,3] = add_any wji wkf
                              wkh:f64[200,7,18] = pad[
                                padding_config=((0, 0, 0), (0, 0, 0), (0, 15, 0))
                              ] wkg 0.0
                              wki:f64[200,7,18] = add_any wiu wkh
                              wkj:f64[200,7,3] = dot_general[
                                dimension_numbers=(([], []), ([0, 1], [0, 1]))
                                preferred_element_type=float64
                              ] wke uoe
                              wkk:f64[200,7,3] = add_any wka wkj
                              wkl:f64[200,7,4] = pad[
                                padding_config=((0, 0, 0), (0, 0, 0), (1, 0, 0))
                              ] wkk 0.0
                              wkm:f64[200,7,4] = add_any wjx wkl
                              wkn:f64[200,7,4] = mul wkm ukv
                              wko:f64[200,7,4] = add_any wiy wkn
                              wkp:f64[200,7,19] = pad[
                                padding_config=((0, 0, 0), (0, 0, 0), (3, 12, 0))
                              ] wko 0.0
                              wkq:f64[200,7,19] = add_any vhl wkp
                              wkr:f64[200,7,19] = pad[
                                padding_config=((0, 0, 0), (0, 0, 0), (7, 0, 0))
                              ] whe 0.0
                              wks:f64[200,7,19] = add_any wkq wkr
                              wkt:f64[200,7,18,18] = dot_general[
                                dimension_numbers=(([], []), ([0, 1], [0, 1]))
                                preferred_element_type=float64
                              ] vgw uns
                              wku:f64[200,7,18,18] = pjit[
                                name=_solve
                                jaxpr={ lambda ; wkv:f64[200,7,18,18] wkw:f64[200,7,18,18]
                                    wkx:f64[200,7,18,18] wky:f64[200,7,18,18]. let
                                    wkz:f64[200,7,18,18] = transpose[
                                      permutation=(0, 1, 3, 2)
                                    ] wky
                                    wla:f64[200,7,18,18] = custom_linear_solve[
                                      const_lengths=_LinearSolveTuple(matvec=1, vecmat=1, solve=1, transpose_solve=1)
                                      jaxprs=_LinearSolveTuple(matvec={ lambda ; a:f64[200,7,18,18] b:f64[200,7,18,18]. let
    c:f64[200,7,18,18] = dot_general[
      dimension_numbers=(([3], [3]), ([0, 1], [0, 1]))
      precision=(Precision.HIGHEST, Precision.HIGHEST)
    ] a b
    d:f64[200,7,18,18] = transpose[permutation=(0, 1, 3, 2)] c
  in (d,) }, vecmat={ lambda ; a:f64[200,7,18,18] b:f64[200,7,18,18]. let
    c:f64[200,7,18,18] = dot_general[
      dimension_numbers=(([3], [3]), ([0, 1], [0, 1]))
      precision=(Precision.HIGHEST, Precision.HIGHEST)
    ] a b
    d:f64[200,7,18,18] = transpose[permutation=(0, 1, 3, 2)] c
  in (d,) }, solve={ lambda ; a:f64[200,7,18,18] b:f64[200,7,18,18]. let
    c:f64[200,7,18,18] = pjit[
      name=_cho_solve
      jaxpr={ lambda ; d:f64[200,7,18,18] e:f64[200,7,18,18]. let
          f:f64[200,7,18,18,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2, 3)
            shape=(200, 7, 18, 18, 1)
          ] e
          g:f64[200,7,18,1,18] = transpose[permutation=(0, 1, 3, 4, 2)] f
          h:f64[200,7,18,18] = reshape[
            dimensions=None
            new_sizes=(200, 7, 18, 18)
          ] g
          i:f64[200,7,18,18] = triangular_solve[
            conjugate_a=False
            left_side=True
            lower=False
            transpose_a=True
            unit_diagonal=False
          ] d h
          j:f64[200,7,18,1,18] = reshape[
            dimensions=None
            new_sizes=(200, 7, 18, 1, 18)
          ] i
          k:f64[200,7,18,1,18] = slice[
            limit_indices=(200, 7, 18, 1, 18)
            start_indices=(0, 0, 0, 0, 0)
            strides=None
          ] j
          l:f64[200,7,18,18,1] = transpose[permutation=(0, 1, 4, 2, 3)] k
          m:f64[200,7,18,18] = squeeze[dimensions=(4,)] l
          n:f64[200,7,18,18,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2, 3)
            shape=(200, 7, 18, 18, 1)
          ] m
          o:f64[200,7,18,1,18] = transpose[permutation=(0, 1, 3, 4, 2)] n
          p:f64[200,7,18,18] = reshape[
            dimensions=None
            new_sizes=(200, 7, 18, 18)
          ] o
          q:f64[200,7,18,18] = triangular_solve[
            conjugate_a=False
            left_side=True
            lower=False
            transpose_a=False
            unit_diagonal=False
          ] d p
          r:f64[200,7,18,1,18] = reshape[
            dimensions=None
            new_sizes=(200, 7, 18, 1, 18)
          ] q
          s:f64[200,7,18,1,18] = slice[
            limit_indices=(200, 7, 18, 1, 18)
            start_indices=(0, 0, 0, 0, 0)
            strides=None
          ] r
          t:f64[200,7,18,18,1] = transpose[permutation=(0, 1, 4, 2, 3)] s
          u:f64[200,7,18,18] = squeeze[dimensions=(4,)] t
        in (u,) }
    ] a b
  in (c,) }, transpose_solve={ lambda ; a:f64[200,7,18,18] b:f64[200,7,18,18]. let
    c:f64[200,7,18,18] = pjit[
      name=_cho_solve
      jaxpr={ lambda ; d:f64[200,7,18,18] e:f64[200,7,18,18]. let
          f:f64[200,7,18,18,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2, 3)
            shape=(200, 7, 18, 18, 1)
          ] e
          g:f64[200,7,18,1,18] = transpose[permutation=(0, 1, 3, 4, 2)] f
          h:f64[200,7,18,18] = reshape[
            dimensions=None
            new_sizes=(200, 7, 18, 18)
          ] g
          i:f64[200,7,18,18] = triangular_solve[
            conjugate_a=False
            left_side=True
            lower=False
            transpose_a=True
            unit_diagonal=False
          ] d h
          j:f64[200,7,18,1,18] = reshape[
            dimensions=None
            new_sizes=(200, 7, 18, 1, 18)
          ] i
          k:f64[200,7,18,1,18] = slice[
            limit_indices=(200, 7, 18, 1, 18)
            start_indices=(0, 0, 0, 0, 0)
            strides=None
          ] j
          l:f64[200,7,18,18,1] = transpose[permutation=(0, 1, 4, 2, 3)] k
          m:f64[200,7,18,18] = squeeze[dimensions=(4,)] l
          n:f64[200,7,18,18,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2, 3)
            shape=(200, 7, 18, 18, 1)
          ] m
          o:f64[200,7,18,1,18] = transpose[permutation=(0, 1, 3, 4, 2)] n
          p:f64[200,7,18,18] = reshape[
            dimensions=None
            new_sizes=(200, 7, 18, 18)
          ] o
          q:f64[200,7,18,18] = triangular_solve[
            conjugate_a=False
            left_side=True
            lower=False
            transpose_a=False
            unit_diagonal=False
          ] d p
          r:f64[200,7,18,1,18] = reshape[
            dimensions=None
            new_sizes=(200, 7, 18, 1, 18)
          ] q
          s:f64[200,7,18,1,18] = slice[
            limit_indices=(200, 7, 18, 1, 18)
            start_indices=(0, 0, 0, 0, 0)
            strides=None
          ] r
          t:f64[200,7,18,18,1] = transpose[permutation=(0, 1, 4, 2, 3)] s
          u:f64[200,7,18,18] = squeeze[dimensions=(4,)] t
        in (u,) }
    ] a b
  in (c,) })
                                    ] wkv wkv wkw wkw wkz
                                    wlb:f64[200,7,18,18] = neg wla
                                    wlc:f64[200,7,18,18] = transpose[
                                      permutation=(0, 1, 3, 2)
                                    ] wlb
                                    wld:f64[200,7,18,18] = dot_general[
                                      dimension_numbers=(([3], [2]), ([0, 1], [0, 1]))
                                      precision=(Precision.HIGHEST, Precision.HIGHEST)
                                    ] wlc wkx
                                  in (wld,) }
                              ] unp unq unr wkt
                              wle:f64[200,7,18,18] = add_any unk wku
                              wlf:f64[200,7,1,7] = pad[
                                padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 4, 0))
                              ] uxz 0.0
                              wlg:f64[200,7,1,7] = add_any vgo wlf
                              wlh:f64[200,7,7] = reshape[
                                dimensions=None
                                new_sizes=(200, 7, 7)
                              ] wlg
                              wli:f64[200,7,19] = pad[
                                padding_config=((0, 0, 0), (0, 0, 0), (0, 12, 0))
                              ] wlh 0.0
                              wlj:f64[200,7,19] = add_any wks wli
                              wlk:f64[200,7,18] = broadcast_in_dim[
                                broadcast_dimensions=()
                                shape=(200, 7, 18)
                              ] 0.0
                              wll:f64[200,7,18] = broadcast_in_dim[
                                broadcast_dimensions=()
                                shape=(200, 7, 18)
                              ] 0.0
                              wlm:f64[200,7,36] = add_any ums whc
                              wln:f64[200,7,18] = add_any umt vgy
                            in (wlm, wln, wlj, wki, umw, umx, umy, umz, una, unb,
                              unc, und, une, unf, ung, unh, uni, unj, wle, unl, wlk,
                              vgz, wll) }
                          length=4
                          linear=(False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False)
                          num_carry=23
                          num_consts=54
                          reverse=True
                          unroll=1
                        ] sfo sfp sfq sfr sfs sft sfu sfv sfw sfx sfy sfz sga sgb
                          sgc sgd sge sgf sgg sgh sgi sgj sgk sgl sgm sgn sgo sgp
                          sgq sgr sgs sgt sgu sgv sgw sgx sgy sgz sha shb shc shd
                          she shf shg shh shi shj shk shl shm shn sho shp ujt uju
                          uiz uiq uja ujb ujc ujd uje ujf ujg ujh uji ujj ujk ujl
                          ujm ujn ujo ujp ujq ujr ujs tsv tsw tsx tsy tsz tta ttb
                          ttc ttd tte ttf ttg tth tti ttj ttk ttl ttm ttn tto ttp
                          ttq ttr tts ttt ttu ttv ttw ttx tty ttz tua tub tuc tud
                          tue tuf tug tuh tui tuj tuk tul tum tun tuo tup tuq tur
                          tus tut tuu tuv tuw tux tuy tuz tva tvb tvc tvd tve tvf
                          tvg tvh tvi tvj tvk tvl tvm tvn tvo tvp tvq tvr tvs tvt
                          tvu tvv tvw tvx tvy tvz twa twb twc twd twe twf twg twh
                          twi twj twk twl twm twn two twp twq twr tws twt twu twv
                          tww twx twy twz txa txb txc txd txe txf txg txh txi txj
                          txk txl txm txn txo txp txq txr txs txt txu txv txw txx
                          txy txz tya tyb tyc tyd tye tyf tyg tyh tyi tyj tyk tyl
                          tym tyn tyo typ tyq tyr tys tyt tyu tyv tyw tyx tyy tyz
                          tza tzb tzc tzd tze tzf tzg tzh tzi tzj tzk tzl tzm tzn
                          tzo tzp tzq tzr tzs tzt tzu tzv tzw tzx tzy tzz uaa uab
                          uac uad uae uaf uag uah uai uaj uak ual uam uan uao uap
                          uaq uar uas uat uau uav uaw uax uay uaz uba ubb ubc ubd
                          ube ubf ubg ubh ubi ubj ubk ubl ubm ubn ubo ubp ubq ubr
                          ubs ubt ubu ubv ubw ubx uby ubz uca ucb ucc ucd uce ucf
                          ucg uch uci ucj uck ucl ucm ucn uco ucp ucq ucr ucs uct
                          ucu
                        wlo:f64[200,7,18,18] = pjit[
                          name=_solve
                          jaxpr={ lambda ; wlp:f64[200,7,18,18] wlq:f64[200,7,18,18]
                              wlr:f64[200,7,18,18] wls:f64[200,7,18,18]. let
                              wlt:f64[200,7,18,18] = transpose[
                                permutation=(0, 1, 3, 2)
                              ] wls
                              wlu:f64[200,7,18,18] = custom_linear_solve[
                                const_lengths=_LinearSolveTuple(matvec=1, vecmat=1, solve=1, transpose_solve=1)
                                jaxprs=_LinearSolveTuple(matvec={ lambda ; a:f64[200,7,18,18] b:f64[200,7,18,18]. let
    c:f64[200,7,18,18] = dot_general[
      dimension_numbers=(([3], [3]), ([0, 1], [0, 1]))
      precision=(Precision.HIGHEST, Precision.HIGHEST)
    ] a b
    d:f64[200,7,18,18] = transpose[permutation=(0, 1, 3, 2)] c
  in (d,) }, vecmat={ lambda ; a:f64[200,7,18,18] b:f64[200,7,18,18]. let
    c:f64[200,7,18,18] = dot_general[
      dimension_numbers=(([3], [3]), ([0, 1], [0, 1]))
      precision=(Precision.HIGHEST, Precision.HIGHEST)
    ] a b
    d:f64[200,7,18,18] = transpose[permutation=(0, 1, 3, 2)] c
  in (d,) }, solve={ lambda ; a:f64[200,7,18,18] b:f64[200,7,18,18]. let
    c:f64[200,7,18,18] = pjit[
      name=_cho_solve
      jaxpr={ lambda ; d:f64[200,7,18,18] e:f64[200,7,18,18]. let
          f:f64[200,7,18,18,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2, 3)
            shape=(200, 7, 18, 18, 1)
          ] e
          g:f64[200,7,18,1,18] = transpose[permutation=(0, 1, 3, 4, 2)] f
          h:f64[200,7,18,18] = reshape[
            dimensions=None
            new_sizes=(200, 7, 18, 18)
          ] g
          i:f64[200,7,18,18] = triangular_solve[
            conjugate_a=False
            left_side=True
            lower=False
            transpose_a=True
            unit_diagonal=False
          ] d h
          j:f64[200,7,18,1,18] = reshape[
            dimensions=None
            new_sizes=(200, 7, 18, 1, 18)
          ] i
          k:f64[200,7,18,1,18] = slice[
            limit_indices=(200, 7, 18, 1, 18)
            start_indices=(0, 0, 0, 0, 0)
            strides=None
          ] j
          l:f64[200,7,18,18,1] = transpose[permutation=(0, 1, 4, 2, 3)] k
          m:f64[200,7,18,18] = squeeze[dimensions=(4,)] l
          n:f64[200,7,18,18,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2, 3)
            shape=(200, 7, 18, 18, 1)
          ] m
          o:f64[200,7,18,1,18] = transpose[permutation=(0, 1, 3, 4, 2)] n
          p:f64[200,7,18,18] = reshape[
            dimensions=None
            new_sizes=(200, 7, 18, 18)
          ] o
          q:f64[200,7,18,18] = triangular_solve[
            conjugate_a=False
            left_side=True
            lower=False
            transpose_a=False
            unit_diagonal=False
          ] d p
          r:f64[200,7,18,1,18] = reshape[
            dimensions=None
            new_sizes=(200, 7, 18, 1, 18)
          ] q
          s:f64[200,7,18,1,18] = slice[
            limit_indices=(200, 7, 18, 1, 18)
            start_indices=(0, 0, 0, 0, 0)
            strides=None
          ] r
          t:f64[200,7,18,18,1] = transpose[permutation=(0, 1, 4, 2, 3)] s
          u:f64[200,7,18,18] = squeeze[dimensions=(4,)] t
        in (u,) }
    ] a b
  in (c,) }, transpose_solve={ lambda ; a:f64[200,7,18,18] b:f64[200,7,18,18]. let
    c:f64[200,7,18,18] = pjit[
      name=_cho_solve
      jaxpr={ lambda ; d:f64[200,7,18,18] e:f64[200,7,18,18]. let
          f:f64[200,7,18,18,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2, 3)
            shape=(200, 7, 18, 18, 1)
          ] e
          g:f64[200,7,18,1,18] = transpose[permutation=(0, 1, 3, 4, 2)] f
          h:f64[200,7,18,18] = reshape[
            dimensions=None
            new_sizes=(200, 7, 18, 18)
          ] g
          i:f64[200,7,18,18] = triangular_solve[
            conjugate_a=False
            left_side=True
            lower=False
            transpose_a=True
            unit_diagonal=False
          ] d h
          j:f64[200,7,18,1,18] = reshape[
            dimensions=None
            new_sizes=(200, 7, 18, 1, 18)
          ] i
          k:f64[200,7,18,1,18] = slice[
            limit_indices=(200, 7, 18, 1, 18)
            start_indices=(0, 0, 0, 0, 0)
            strides=None
          ] j
          l:f64[200,7,18,18,1] = transpose[permutation=(0, 1, 4, 2, 3)] k
          m:f64[200,7,18,18] = squeeze[dimensions=(4,)] l
          n:f64[200,7,18,18,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2, 3)
            shape=(200, 7, 18, 18, 1)
          ] m
          o:f64[200,7,18,1,18] = transpose[permutation=(0, 1, 3, 4, 2)] n
          p:f64[200,7,18,18] = reshape[
            dimensions=None
            new_sizes=(200, 7, 18, 18)
          ] o
          q:f64[200,7,18,18] = triangular_solve[
            conjugate_a=False
            left_side=True
            lower=False
            transpose_a=False
            unit_diagonal=False
          ] d p
          r:f64[200,7,18,1,18] = reshape[
            dimensions=None
            new_sizes=(200, 7, 18, 1, 18)
          ] q
          s:f64[200,7,18,1,18] = slice[
            limit_indices=(200, 7, 18, 1, 18)
            start_indices=(0, 0, 0, 0, 0)
            strides=None
          ] r
          t:f64[200,7,18,18,1] = transpose[permutation=(0, 1, 4, 2, 3)] s
          u:f64[200,7,18,18] = squeeze[dimensions=(4,)] t
        in (u,) }
    ] a b
  in (c,) })
                              ] wlp wlp wlq wlq wlt
                              wlv:f64[200,7,18,18] = neg wlu
                              wlw:f64[200,7,18,18] = transpose[
                                permutation=(0, 1, 3, 2)
                              ] wlv
                              wlx:f64[200,7,18,18] = dot_general[
                                dimension_numbers=(([3], [2]), ([0, 1], [0, 1]))
                                precision=(Precision.HIGHEST, Precision.HIGHEST)
                              ] wlw wlr
                            in (wlx,) }
                        ] tss tst tsu uko
                        wly:f64[200,7,18,18] = add_any ukn wlo
                        wlz:f64[200,7,18,18] = transpose[
                          permutation=(0, 1, 3, 2)
                        ] wly
                        wma:f64[200,7,18,18] = pjit[
                          name=tril
                          jaxpr={ lambda ; wmb:bool[200,7,18,18] wmc:f64[200,7,18,18]. let
                              wmd:f64[200,7,18,18] = broadcast_in_dim[
                                broadcast_dimensions=()
                                shape=(200, 7, 18, 18)
                              ] 0.0
                              wme:f64[200,7,18,18] = select_n wmb wmd wmc
                            in (wme,) }
                        ] tae wlz
                        wmf:f64[200,7,18,18] = pjit[
                          name=tril
                          jaxpr={ lambda ; wmg:bool[200,7,18,18] wmh:f64[200,7,18,18]. let
                              wmi:f64[200,7,18,18] = broadcast_in_dim[
                                broadcast_dimensions=()
                                shape=(200, 7, 18, 18)
                              ] 0.0
                              wmj:f64[200,7,18,18] = select_n wmg wmi wmh
                            in (wmj,) }
                        ] tad wly
                        wmk:f64[200,7,18,18] = add_any wma wmf
                        wml:f64[200,7,18,18] = mul wmk tac
                        wmm:f64[200,7,18,18] = transpose[
                          permutation=(0, 1, 3, 2)
                        ] wml
                        wmn:f64[200,7,18,3] = dot_general[
                          dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
                          preferred_element_type=float64
                        ] wmm tjf
                        wmo:f64[200,7,18,3] wmp:f64[200,7,18,3] = pjit[
                          name=cross
                          jaxpr=cross20
                        ] szw tsm tsn szx szy tso tsp szz tsq taa tab tsr wmn
                        wmq:f64[200,7,18,3] = add_any ukk wmp
                        wmr:f64[200,7,18,3] = dot_general[
                          dimension_numbers=(([3], [3]), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] wmn tsl
                        wms:f64[200,7,18,3] = add_any ukj wmr
                        wmt:f64[200,7,18,3,3] = dot_general[
                          dimension_numbers=(([], []), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] wmn tjf
                        wmu:f64[200,7,13,3,3] = pjit[
                          name=_take
                          jaxpr={ lambda ; wmv:i64[18,1] wmw:f64[200,7,18,3,3]. let
                              wmx:f64[200,7,13,3,3] = broadcast_in_dim[
                                broadcast_dimensions=()
                                shape=(200, 7, 13, 3, 3)
                              ] 0.0
                              wmy:f64[200,7,13,3,3] = scatter-add[
                                dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3, 4), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
                                indices_are_sorted=False
                                mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                unique_indices=False
                                update_consts=()
                                update_jaxpr=jaxpr
                              ] wmx wmv wmw
                            in (wmy,) }
                        ] szv wmt
                        wmz:f64[200,7,13,3,3] = pjit[
                          name=_take
                          jaxpr={ lambda ; wna:i64[13,1] wnb:f64[200,7,13,3,3]. let
                              wnc:f64[200,7,13,3,3] = broadcast_in_dim[
                                broadcast_dimensions=()
                                shape=(200, 7, 13, 3, 3)
                              ] 0.0
                              wnd:f64[200,7,13,3,3] = scatter-add[
                                dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3, 4), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
                                indices_are_sorted=False
                                mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                unique_indices=False
                                update_consts=()
                                update_jaxpr=jaxpr
                              ] wnc wna wnb
                            in (wnd,) }
                        ] szu wmu
                        wne:f64[200,7,1,3,3] = slice[
                          limit_indices=(200, 7, 1, 3, 3)
                          start_indices=(0, 0, 0, 0, 0)
                          strides=None
                        ] wmz
                        wnf:f64[200,7,4,3,3] = slice[
                          limit_indices=(200, 7, 5, 3, 3)
                          start_indices=(0, 0, 1, 0, 0)
                          strides=None
                        ] wmz
                        wng:f64[200,7,4,3,3] = slice[
                          limit_indices=(200, 7, 9, 3, 3)
                          start_indices=(0, 0, 5, 0, 0)
                          strides=None
                        ] wmz
                        wnh:f64[200,7,4,3,3] = slice[
                          limit_indices=(200, 7, 13, 3, 3)
                          start_indices=(0, 0, 9, 0, 0)
                          strides=None
                        ] wmz
                        wni:f64[200,7,4,3,3] = gather[
                          dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 3, 4), collapsed_slice_dims=(2,), start_index_map=(2,))
                          fill_value=0
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          slice_sizes=(200, 7, 1, 3, 3)
                          unique_indices=False
                        ] wne szo
                        wnj:f64[200,7,4,3,3] = add_any wnf wni
                        wnk:f64[200,7,4,3,3] = gather[
                          dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 3, 4), collapsed_slice_dims=(2,), start_index_map=(2,))
                          fill_value=0
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          slice_sizes=(200, 7, 1, 3, 3)
                          unique_indices=False
                        ] wnj szq
                        wnl:f64[200,7,4,3,3] = add_any wng wnk
                        wnm:f64[200,7,4,3,3] = gather[
                          dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 3, 4), collapsed_slice_dims=(2,), start_index_map=(2,))
                          fill_value=0
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          slice_sizes=(200, 7, 1, 3, 3)
                          unique_indices=False
                        ] wnl szs
                        wnn:f64[200,7,4,3,3] = add_any wnh wnm
                        wno:f64[200,7,13,3,3] = pjit[name=_take jaxpr=_take23] szt
                          wnn
                        wnp:f64[200,7,13,3,3] = add_any ukg wno
                        wnq:f64[200,7,13,3,3] = pjit[name=_take jaxpr=_take23] szr
                          wnl
                        wnr:f64[200,7,13,3,3] = add_any wnp wnq
                        wns:f64[200,7,13,3,3] = pjit[name=_take jaxpr=_take23] szp
                          wnj
                        wnt:f64[200,7,13,3,3] = add_any wnr wns
                        wnu:f64[200,7,13,3,3] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 12, 0), (0, 0, 0), (0, 0, 0))
                        ] wne 0.0
                        wnv:f64[200,7,13,3,3] = add_any wnt wnu
                        wnw:f64[200,7,18,3] = dot_general[
                          dimension_numbers=(([3], [2]), ([0, 1], [0, 1]))
                          preferred_element_type=float64
                        ] wmm tsk
                        wnx:f64[200,7,18,3] = add_any wms wnw
                        wny:f64[200,7,18,3] = dot_general[
                          dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
                          preferred_element_type=float64
                        ] wmm tjd
                        wnz:f64[200,7,18,3] = neg wny
                        woa:f64[200,7,18,3] wob:f64[200,7,18,3] = pjit[
                          name=cross
                          jaxpr=cross20
                        ] szi tse tsf szj szk tsg tsh szl tsi szm szn tsj wnz
                        woc:f64[200,7,18,3] = add_any wmo woa
                        wod:f64[200,7,18,3] = add_any wnx wob
                        woe:f64[200,7,13,3] = pjit[
                          name=_take
                          jaxpr={ lambda ; wof:i64[18,1] wog:f64[200,7,18,3]. let
                              woh:f64[200,7,13,3] = broadcast_in_dim[
                                broadcast_dimensions=()
                                shape=(200, 7, 13, 3)
                              ] 0.0
                              woi:f64[200,7,13,3] = scatter-add[
                                dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
                                indices_are_sorted=False
                                mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                unique_indices=False
                                update_consts=()
                                update_jaxpr=jaxpr
                              ] woh wof wog
                            in (woi,) }
                        ] szh woc
                        woj:f64[200,7,13,3] = pjit[name=_take jaxpr=_take24] szg
                          woe
                        wok:f64[200,7,1,3] = slice[
                          limit_indices=(200, 7, 1, 3)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] woj
                        wol:f64[200,7,4,3] = slice[
                          limit_indices=(200, 7, 5, 3)
                          start_indices=(0, 0, 1, 0)
                          strides=None
                        ] woj
                        wom:f64[200,7,4,3] = slice[
                          limit_indices=(200, 7, 9, 3)
                          start_indices=(0, 0, 5, 0)
                          strides=None
                        ] woj
                        won:f64[200,7,4,3] = slice[
                          limit_indices=(200, 7, 13, 3)
                          start_indices=(0, 0, 9, 0)
                          strides=None
                        ] woj
                        woo:f64[200,7,4,3] = gather[
                          dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 3), collapsed_slice_dims=(2,), start_index_map=(2,))
                          fill_value=0
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          slice_sizes=(200, 7, 1, 3)
                          unique_indices=False
                        ] wok sza
                        wop:f64[200,7,4,3] = add_any wol woo
                        woq:f64[200,7,4,3] = gather[
                          dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 3), collapsed_slice_dims=(2,), start_index_map=(2,))
                          fill_value=0
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          slice_sizes=(200, 7, 1, 3)
                          unique_indices=False
                        ] wop szc
                        wor:f64[200,7,4,3] = add_any wom woq
                        wos:f64[200,7,4,3] = gather[
                          dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 3), collapsed_slice_dims=(2,), start_index_map=(2,))
                          fill_value=0
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          slice_sizes=(200, 7, 1, 3)
                          unique_indices=False
                        ] wor sze
                        wot:f64[200,7,4,3] = add_any won wos
                        wou:f64[200,7,13,3] = pjit[name=_take jaxpr=_take25] szf
                          wot
                        wov:f64[200,7,13,3] = add_any uke wou
                        wow:f64[200,7,13,3] = pjit[name=_take jaxpr=_take25] szd
                          wor
                        wox:f64[200,7,13,3] = add_any wov wow
                        woy:f64[200,7,13,3] = pjit[name=_take jaxpr=_take25] szb
                          wop
                        woz:f64[200,7,13,3] = add_any wox woy
                        wpa:f64[200,7,13,3] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 12, 0), (0, 0, 0))
                        ] wok 0.0
                        wpb:f64[200,7,13,3] = add_any woz wpa
                        wpc:f64[200,7,18,3] = mul syz wny
                        wpd:f64[200,7,18,3] = add_any wmq wpc
                        wpe:f64[200,7,18,3] = dot_general[
                          dimension_numbers=(([3], [2]), ([0, 1], [0, 1]))
                          preferred_element_type=float64
                        ] wmm tsd
                        wpf:f64[200,7,18,3] = add_any wpd wpe
                        wpg:f64[200,7,13,3] = pjit[name=_take jaxpr=_take24] syy
                          ukc
                        wph:f64[200,7,1,3] = slice[
                          limit_indices=(200, 7, 1, 3)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] wpg
                        wpi:f64[200,7,4,3] = slice[
                          limit_indices=(200, 7, 5, 3)
                          start_indices=(0, 0, 1, 0)
                          strides=None
                        ] wpg
                        wpj:f64[200,7,4,3] = slice[
                          limit_indices=(200, 7, 9, 3)
                          start_indices=(0, 0, 5, 0)
                          strides=None
                        ] wpg
                        wpk:f64[200,7,4,3] = slice[
                          limit_indices=(200, 7, 13, 3)
                          start_indices=(0, 0, 9, 0)
                          strides=None
                        ] wpg
                        wpl:f64[200,7,4,3] = mul trw wpk
                        wpm:f64[200,7,4,3] wpn:f64[200,7,4,3] = pjit[
                          name=cross
                          jaxpr=cross21
                        ] sys trx try syt syu trz tsa syv tsb syw syx tsc wpl
                        wpo:f64[200,7,4,3] = mul wpk trv
                        wpp:f64[200,7,4] = reduce_sum[axes=(3,)] wpo
                        wpq:f64[200,7,4,1] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 4, 1)
                        ] wpp
                        wpr:f64[200,7,4] = reduce_sum[axes=(3,)] wpq
                        wps:f64[200,7,4] = mul 2.0 wpr
                        wpt:f64[200,7,4,3] = mul tru wpk
                        wpu:f64[200,7,4,3] = add_any wpn wpt
                        wpv:f64[200,7,4,3] = mul wpk trq
                        wpw:f64[200,7,4] = reduce_sum[axes=(3,)] wpv
                        wpx:f64[200,7,4,1] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 4, 1)
                        ] wpw
                        wpy:f64[200,7,4] = reduce_sum[axes=(3,)] wpx
                        wpz:f64[200,7,4] = neg wpy
                        wqa:f64[200,7,4,3] = dot_general[
                          dimension_numbers=(([], []), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] wpz trr
                        wqb:f64[200,7,4,3] = add_any wpm wqa
                        wqc:f64[200,7,4,3] = dot_general[
                          dimension_numbers=(([], []), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] wpz trr
                        wqd:f64[200,7,4,3] = add_any wqb wqc
                        wqe:f64[200,7,4] = mul trt wpy
                        wqf:f64[200,7,4] = add_any wps wqe
                        wqg:f64[200,7,4] = mul wpy trt
                        wqh:f64[200,7,4] = add_any wqf wqg
                        wqi:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] wqh
                        wqj:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 3, 0))
                        ] wqi 0.0
                        wqk:f64[200,7,4,3] = mul 2.0 wpk
                        wql:f64[200,7,4,3] = mul trs wqk
                        wqm:f64[200,7,4,3] = add_any wqd wql
                        wqn:f64[200,7,4,3] = mul wqk trr
                        wqo:f64[200,7,4] = reduce_sum[axes=(3,)] wqn
                        wqp:f64[200,7,4,1] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 4, 1)
                        ] wqo
                        wqq:f64[200,7,4] = reduce_sum[axes=(3,)] wqp
                        wqr:f64[200,7,4,3] = dot_general[
                          dimension_numbers=(([], []), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] wqq trr
                        wqs:f64[200,7,4,3] = add_any wpu wqr
                        wqt:f64[200,7,13,3] = pjit[name=_take jaxpr=_take25] syr
                          wqs
                        wqu:f64[200,7,4,3] = dot_general[
                          dimension_numbers=(([], []), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] wqq trq
                        wqv:f64[200,7,4,3] = add_any wqm wqu
                        wqw:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (1, 0, 0))
                        ] wqv 0.0
                        wqx:f64[200,7,4,4] = add_any wqj wqw
                        wqy:f64[200,7,4,3] = add_any wpj wpk
                        wqz:f64[200,7,4,3] wra:f64[200,7,4,3] = pjit[
                          name=cross
                          jaxpr=cross21
                        ] syl trk trl sym syn trm trn syo tro syp syq trp wpk
                        wrb:f64[200,7,4,3] = neg wra
                        wrc:f64[200,7,4,3] = mul trd wqy
                        wrd:f64[200,7,4,3] wre:f64[200,7,4,3] = pjit[
                          name=cross
                          jaxpr=cross21
                        ] syf tre trf syg syh trg trh syi tri syj syk trj wrc
                        wrf:f64[200,7,4,3] = mul wqy trc
                        wrg:f64[200,7,4] = reduce_sum[axes=(3,)] wrf
                        wrh:f64[200,7,4,1] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 4, 1)
                        ] wrg
                        wri:f64[200,7,4] = reduce_sum[axes=(3,)] wrh
                        wrj:f64[200,7,4] = mul 2.0 wri
                        wrk:f64[200,7,4,3] = mul trb wqy
                        wrl:f64[200,7,4,3] = add_any wre wrk
                        wrm:f64[200,7,4,3] = mul wqy tqx
                        wrn:f64[200,7,4] = reduce_sum[axes=(3,)] wrm
                        wro:f64[200,7,4,1] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 4, 1)
                        ] wrn
                        wrp:f64[200,7,4] = reduce_sum[axes=(3,)] wro
                        wrq:f64[200,7,4] = neg wrp
                        wrr:f64[200,7,4,3] = dot_general[
                          dimension_numbers=(([], []), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] wrq tqy
                        wrs:f64[200,7,4,3] = add_any wrd wrr
                        wrt:f64[200,7,4,3] = dot_general[
                          dimension_numbers=(([], []), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] wrq tqy
                        wru:f64[200,7,4,3] = add_any wrs wrt
                        wrv:f64[200,7,4] = mul tra wrp
                        wrw:f64[200,7,4] = add_any wrj wrv
                        wrx:f64[200,7,4] = mul wrp tra
                        wry:f64[200,7,4] = add_any wrw wrx
                        wrz:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] wry
                        wsa:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 3, 0))
                        ] wrz 0.0
                        wsb:f64[200,7,4,3] = mul 2.0 wqy
                        wsc:f64[200,7,4,3] = mul tqz wsb
                        wsd:f64[200,7,4,3] = add_any wru wsc
                        wse:f64[200,7,4,3] = mul wsb tqy
                        wsf:f64[200,7,4] = reduce_sum[axes=(3,)] wse
                        wsg:f64[200,7,4,1] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 4, 1)
                        ] wsf
                        wsh:f64[200,7,4] = reduce_sum[axes=(3,)] wsg
                        wsi:f64[200,7,4,3] = dot_general[
                          dimension_numbers=(([], []), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] wsh tqy
                        wsj:f64[200,7,4,3] = add_any wrl wsi
                        wsk:f64[200,7,13,3] = pjit[name=_take jaxpr=_take25] sye
                          wsj
                        wsl:f64[200,7,13,3] = add_any wqt wsk
                        wsm:f64[200,7,4,3] = dot_general[
                          dimension_numbers=(([], []), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] wsh tqx
                        wsn:f64[200,7,4,3] = add_any wsd wsm
                        wso:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (1, 0, 0))
                        ] wsn 0.0
                        wsp:f64[200,7,4,4] = add_any wsa wso
                        wsq:f64[200,7,4,3] = add_any wpi wqy
                        wsr:f64[200,7,4,3] wss:f64[200,7,4,3] = pjit[
                          name=cross
                          jaxpr=cross21
                        ] sxy tqr tqs sxz sya tqt tqu syb tqv syc syd tqw wqy
                        wst:f64[200,7,4,3] = neg wss
                        wsu:f64[200,7,4,3] = add_any wrb wss
                        wsv:f64[200,7,4,3] = mul tqk wsq
                        wsw:f64[200,7,4,3] wsx:f64[200,7,4,3] = pjit[
                          name=cross
                          jaxpr=cross21
                        ] sxs tql tqm sxt sxu tqn tqo sxv tqp sxw sxx tqq wsv
                        wsy:f64[200,7,4,3] = mul wsq tqj
                        wsz:f64[200,7,4] = reduce_sum[axes=(3,)] wsy
                        wta:f64[200,7,4,1] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 4, 1)
                        ] wsz
                        wtb:f64[200,7,4] = reduce_sum[axes=(3,)] wta
                        wtc:f64[200,7,4] = mul 2.0 wtb
                        wtd:f64[200,7,4,3] = mul tqi wsq
                        wte:f64[200,7,4,3] = add_any wsx wtd
                        wtf:f64[200,7,4,3] = mul wsq tqe
                        wtg:f64[200,7,4] = reduce_sum[axes=(3,)] wtf
                        wth:f64[200,7,4,1] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 4, 1)
                        ] wtg
                        wti:f64[200,7,4] = reduce_sum[axes=(3,)] wth
                        wtj:f64[200,7,4] = neg wti
                        wtk:f64[200,7,4,3] = dot_general[
                          dimension_numbers=(([], []), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] wtj tqf
                        wtl:f64[200,7,4,3] = add_any wsw wtk
                        wtm:f64[200,7,4,3] = dot_general[
                          dimension_numbers=(([], []), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] wtj tqf
                        wtn:f64[200,7,4,3] = add_any wtl wtm
                        wto:f64[200,7,4] = mul tqh wti
                        wtp:f64[200,7,4] = add_any wtc wto
                        wtq:f64[200,7,4] = mul wti tqh
                        wtr:f64[200,7,4] = add_any wtp wtq
                        wts:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] wtr
                        wtt:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 3, 0))
                        ] wts 0.0
                        wtu:f64[200,7,4,3] = mul 2.0 wsq
                        wtv:f64[200,7,4,3] = mul tqg wtu
                        wtw:f64[200,7,4,3] = add_any wtn wtv
                        wtx:f64[200,7,4,3] = mul wtu tqf
                        wty:f64[200,7,4] = reduce_sum[axes=(3,)] wtx
                        wtz:f64[200,7,4,1] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 4, 1)
                        ] wty
                        wua:f64[200,7,4] = reduce_sum[axes=(3,)] wtz
                        wub:f64[200,7,4,3] = dot_general[
                          dimension_numbers=(([], []), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] wua tqf
                        wuc:f64[200,7,4,3] = add_any wte wub
                        wud:f64[200,7,13,3] = pjit[name=_take jaxpr=_take25] sxr
                          wuc
                        wue:f64[200,7,13,3] = add_any wsl wud
                        wuf:f64[200,7,4,3] = dot_general[
                          dimension_numbers=(([], []), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] wua tqe
                        wug:f64[200,7,4,3] = add_any wtw wuf
                        wuh:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (1, 0, 0))
                        ] wug 0.0
                        wui:f64[200,7,4,4] = add_any wtt wuh
                        wuj:f64[200,7,4,3] wuk:f64[200,7,4,3] = pjit[
                          name=cross
                          jaxpr=cross21
                        ] sxl tpy tpz sxm sxn tqa tqb sxo tqc sxp sxq tqd wsq
                        wul:f64[200,7,4,3] = neg wuk
                        wum:f64[200,7,4,3] = add_any wst wuk
                        wun:f64[200,7,1,3] = pjit[name=_take jaxpr=_take26] sxk wsq
                        wuo:f64[200,7,1,3] = add_any wph wun
                        wup:f64[200,7,13,3] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 12, 0), (0, 0, 0))
                        ] wuo 0.0
                        wuq:f64[200,7,13,3] = add_any wue wup
                        wur:f64[200,7,1,3] = slice[
                          limit_indices=(200, 7, 1, 3)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] wuq
                        wus:f64[200,7,12,3] = slice[
                          limit_indices=(200, 7, 13, 3)
                          start_indices=(0, 0, 1, 0)
                          strides=None
                        ] wuq
                        wut:f64[200,7,12,1,3] = pjit[name=_take jaxpr=_take27] sxj
                          wus
                        wuu:f64[200,7,12,3] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 12, 3)
                        ] wut
                        wuv:f64[200,7,12,3] = mul sxi wuu
                        wuw:f64[200,7,12] = reduce_sum[axes=(3,)] wuv
                        wux:f64[200,7,12,1] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 12, 1)
                        ] wuw
                        wuy:f64[200,7,12] = reduce_sum[axes=(3,)] wux
                        wuz:f64[200,7,1,6] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 3, 0))
                        ] wur 0.0
                        wva:f64[200,7,13,3] = pjit[name=_take jaxpr=_take24] sxh
                          ukb
                        wvb:f64[200,7,1,3] = slice[
                          limit_indices=(200, 7, 1, 3)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] wva
                        wvc:f64[200,7,4,3] = slice[
                          limit_indices=(200, 7, 5, 3)
                          start_indices=(0, 0, 1, 0)
                          strides=None
                        ] wva
                        wvd:f64[200,7,4,3] = slice[
                          limit_indices=(200, 7, 9, 3)
                          start_indices=(0, 0, 5, 0)
                          strides=None
                        ] wva
                        wve:f64[200,7,4,3] = slice[
                          limit_indices=(200, 7, 13, 3)
                          start_indices=(0, 0, 9, 0)
                          strides=None
                        ] wva
                        wvf:f64[200,7,4,3] = add_any wsr wvc
                        wvg:f64[200,7,4,3] = add_any wqz wvd
                        wvh:f64[200,7,4,3] = add_any wvg wve
                        wvi:f64[200,7,4,3] = mul tpr wve
                        wvj:f64[200,7,4,3] wvk:f64[200,7,4,3] = pjit[
                          name=cross
                          jaxpr=cross21
                        ] sxb tps tpt sxc sxd tpu tpv sxe tpw sxf sxg tpx wvi
                        wvl:f64[200,7,4,3] = mul wve tpq
                        wvm:f64[200,7,4] = reduce_sum[axes=(3,)] wvl
                        wvn:f64[200,7,4,1] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 4, 1)
                        ] wvm
                        wvo:f64[200,7,4] = reduce_sum[axes=(3,)] wvn
                        wvp:f64[200,7,4] = mul 2.0 wvo
                        wvq:f64[200,7,4,3] = mul tpp wve
                        wvr:f64[200,7,4,3] = add_any wvk wvq
                        wvs:f64[200,7,4,3] = mul wve tpl
                        wvt:f64[200,7,4] = reduce_sum[axes=(3,)] wvs
                        wvu:f64[200,7,4,1] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 4, 1)
                        ] wvt
                        wvv:f64[200,7,4] = reduce_sum[axes=(3,)] wvu
                        wvw:f64[200,7,4] = neg wvv
                        wvx:f64[200,7,4,3] = dot_general[
                          dimension_numbers=(([], []), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] wvw tpm
                        wvy:f64[200,7,4,3] = add_any wvj wvx
                        wvz:f64[200,7,4,3] = dot_general[
                          dimension_numbers=(([], []), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] wvw tpm
                        wwa:f64[200,7,4,3] = add_any wvy wvz
                        wwb:f64[200,7,4] = mul tpo wvv
                        wwc:f64[200,7,4] = add_any wvp wwb
                        wwd:f64[200,7,4] = mul wvv tpo
                        wwe:f64[200,7,4] = add_any wwc wwd
                        wwf:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] wwe
                        wwg:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 3, 0))
                        ] wwf 0.0
                        wwh:f64[200,7,4,3] = mul 2.0 wve
                        wwi:f64[200,7,4,3] = mul tpn wwh
                        wwj:f64[200,7,4,3] = add_any wwa wwi
                        wwk:f64[200,7,4,3] = mul wwh tpm
                        wwl:f64[200,7,4] = reduce_sum[axes=(3,)] wwk
                        wwm:f64[200,7,4,1] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 4, 1)
                        ] wwl
                        wwn:f64[200,7,4] = reduce_sum[axes=(3,)] wwm
                        wwo:f64[200,7,4,3] = dot_general[
                          dimension_numbers=(([], []), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] wwn tpm
                        wwp:f64[200,7,4,3] = add_any wvr wwo
                        wwq:f64[200,7,13,3] = pjit[name=_take jaxpr=_take25] sxa
                          wwp
                        wwr:f64[200,7,4,3] = dot_general[
                          dimension_numbers=(([], []), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] wwn tpl
                        wws:f64[200,7,4,3] = add_any wwj wwr
                        wwt:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (1, 0, 0))
                        ] wws 0.0
                        wwu:f64[200,7,4,4] = add_any wwg wwt
                        wwv:f64[200,7,4,3] = add_any wvf wvh
                        www:f64[200,7,4,3] = mul tpe wvh
                        wwx:f64[200,7,4,3] wwy:f64[200,7,4,3] = pjit[
                          name=cross
                          jaxpr=cross21
                        ] swu tpf tpg swv sww tph tpi swx tpj swy swz tpk www
                        wwz:f64[200,7,4,3] = mul wvh tpd
                        wxa:f64[200,7,4] = reduce_sum[axes=(3,)] wwz
                        wxb:f64[200,7,4,1] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 4, 1)
                        ] wxa
                        wxc:f64[200,7,4] = reduce_sum[axes=(3,)] wxb
                        wxd:f64[200,7,4] = mul 2.0 wxc
                        wxe:f64[200,7,4,3] = mul tpc wvh
                        wxf:f64[200,7,4,3] = add_any wwy wxe
                        wxg:f64[200,7,4,3] = mul wvh toy
                        wxh:f64[200,7,4] = reduce_sum[axes=(3,)] wxg
                        wxi:f64[200,7,4,1] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 4, 1)
                        ] wxh
                        wxj:f64[200,7,4] = reduce_sum[axes=(3,)] wxi
                        wxk:f64[200,7,4] = neg wxj
                        wxl:f64[200,7,4,3] = dot_general[
                          dimension_numbers=(([], []), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] wxk toz
                        wxm:f64[200,7,4,3] = add_any wwx wxl
                        wxn:f64[200,7,4,3] = dot_general[
                          dimension_numbers=(([], []), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] wxk toz
                        wxo:f64[200,7,4,3] = add_any wxm wxn
                        wxp:f64[200,7,4] = mul tpb wxj
                        wxq:f64[200,7,4] = add_any wxd wxp
                        wxr:f64[200,7,4] = mul wxj tpb
                        wxs:f64[200,7,4] = add_any wxq wxr
                        wxt:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] wxs
                        wxu:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 3, 0))
                        ] wxt 0.0
                        wxv:f64[200,7,4,4] = add_any wqx wxu
                        wxw:f64[200,7,4,3] = mul 2.0 wvh
                        wxx:f64[200,7,4,3] = mul tpa wxw
                        wxy:f64[200,7,4,3] = add_any wxo wxx
                        wxz:f64[200,7,4,3] = mul wxw toz
                        wya:f64[200,7,4] = reduce_sum[axes=(3,)] wxz
                        wyb:f64[200,7,4,1] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 4, 1)
                        ] wya
                        wyc:f64[200,7,4] = reduce_sum[axes=(3,)] wyb
                        wyd:f64[200,7,4,3] = dot_general[
                          dimension_numbers=(([], []), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] wyc toz
                        wye:f64[200,7,4,3] = add_any wxf wyd
                        wyf:f64[200,7,13,3] = pjit[name=_take jaxpr=_take25] swt
                          wye
                        wyg:f64[200,7,13,3] = add_any wwq wyf
                        wyh:f64[200,7,4,3] = dot_general[
                          dimension_numbers=(([], []), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] wyc toy
                        wyi:f64[200,7,4,3] = add_any wxy wyh
                        wyj:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (1, 0, 0))
                        ] wyi 0.0
                        wyk:f64[200,7,4,4] = add_any wxv wyj
                        wyl:f64[200,7,4,3] = add_any wuj wwv
                        wym:f64[200,7,4,3] = mul tor wwv
                        wyn:f64[200,7,4,3] wyo:f64[200,7,4,3] = pjit[
                          name=cross
                          jaxpr=cross21
                        ] swn tos tot swo swp tou tov swq tow swr sws tox wym
                        wyp:f64[200,7,4,3] = mul wwv toq
                        wyq:f64[200,7,4] = reduce_sum[axes=(3,)] wyp
                        wyr:f64[200,7,4,1] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 4, 1)
                        ] wyq
                        wys:f64[200,7,4] = reduce_sum[axes=(3,)] wyr
                        wyt:f64[200,7,4] = mul 2.0 wys
                        wyu:f64[200,7,4,3] = mul top wwv
                        wyv:f64[200,7,4,3] = add_any wyo wyu
                        wyw:f64[200,7,4,3] = mul wwv tol
                        wyx:f64[200,7,4] = reduce_sum[axes=(3,)] wyw
                        wyy:f64[200,7,4,1] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 4, 1)
                        ] wyx
                        wyz:f64[200,7,4] = reduce_sum[axes=(3,)] wyy
                        wza:f64[200,7,4] = neg wyz
                        wzb:f64[200,7,4,3] = dot_general[
                          dimension_numbers=(([], []), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] wza tom
                        wzc:f64[200,7,4,3] = add_any wyn wzb
                        wzd:f64[200,7,4,3] = dot_general[
                          dimension_numbers=(([], []), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] wza tom
                        wze:f64[200,7,4,3] = add_any wzc wzd
                        wzf:f64[200,7,4] = mul too wyz
                        wzg:f64[200,7,4] = add_any wyt wzf
                        wzh:f64[200,7,4] = mul wyz too
                        wzi:f64[200,7,4] = add_any wzg wzh
                        wzj:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] wzi
                        wzk:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 3, 0))
                        ] wzj 0.0
                        wzl:f64[200,7,4,4] = add_any wsp wzk
                        wzm:f64[200,7,4,3] = mul 2.0 wwv
                        wzn:f64[200,7,4,3] = mul ton wzm
                        wzo:f64[200,7,4,3] = add_any wze wzn
                        wzp:f64[200,7,4,3] = mul wzm tom
                        wzq:f64[200,7,4] = reduce_sum[axes=(3,)] wzp
                        wzr:f64[200,7,4,1] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 4, 1)
                        ] wzq
                        wzs:f64[200,7,4] = reduce_sum[axes=(3,)] wzr
                        wzt:f64[200,7,4,3] = dot_general[
                          dimension_numbers=(([], []), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] wzs tom
                        wzu:f64[200,7,4,3] = add_any wyv wzt
                        wzv:f64[200,7,13,3] = pjit[name=_take jaxpr=_take25] swm
                          wzu
                        wzw:f64[200,7,13,3] = add_any wyg wzv
                        wzx:f64[200,7,4,3] = dot_general[
                          dimension_numbers=(([], []), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] wzs tol
                        wzy:f64[200,7,4,3] = add_any wzo wzx
                        wzz:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (1, 0, 0))
                        ] wzy 0.0
                        xaa:f64[200,7,4,4] = add_any wzl wzz
                        xab:f64[200,7,1,3] = pjit[name=_take jaxpr=_take26] swl wyl
                        xac:f64[200,7,1,3] = add_any wvb xab
                        xad:f64[200,7,1,3] = mul toe xac
                        xae:f64[200,7,1,3] xaf:f64[200,7,1,3] = pjit[
                          name=cross
                          jaxpr={ lambda ; xag:i32[1] xah:f64[200,7,1] xai:f64[200,7,1]
                              xaj:i32[1] xak:i32[1] xal:f64[200,7,1] xam:f64[200,7,1]
                              xan:i32[1] xao:f64[200,7,1] xap:i32[1] xaq:i32[1] xar:f64[200,7,1]
                              xas:f64[200,7,1,3]. let
                              xat:f64[200,7,1,1] = slice[
                                limit_indices=(200, 7, 1, 1)
                                start_indices=(0, 0, 0, 0)
                                strides=None
                              ] xas
                              xau:f64[200,7,1,1] = slice[
                                limit_indices=(200, 7, 1, 2)
                                start_indices=(0, 0, 0, 1)
                                strides=None
                              ] xas
                              xav:f64[200,7,1,1] = slice[
                                limit_indices=(200, 7, 1, 3)
                                start_indices=(0, 0, 0, 2)
                                strides=None
                              ] xas
                              xaw:f64[200,7] = reduce_sum[axes=(2, 3)] xav
                              xax:f64[200,7,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1)
                                shape=(200, 7, 1)
                              ] xaw
                              xay:f64[200,7,1] = neg xax
                              xaz:f64[200,7,1] = mul xai xay
                              xba:f64[200,7,1] = mul xay xao
                              xbb:f64[200,7,1] = mul xar xax
                              xbc:f64[200,7,1] = mul xax xal
                              xbd:f64[200,7] = reduce_sum[axes=(2, 3)] xau
                              xbe:f64[200,7,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1)
                                shape=(200, 7, 1)
                              ] xbd
                              xbf:f64[200,7,1] = neg xbe
                              xbg:f64[200,7,1] = mul xar xbf
                              xbh:f64[200,7,1] = mul xbf xah
                              xbi:f64[200,7,1] = add_any xbc xbh
                              xbj:f64[200,7,1,3] = broadcast_in_dim[
                                broadcast_dimensions=()
                                shape=(200, 7, 1, 3)
                              ] 0.0
                              xbk:f64[200,7,1,3] = scatter-add[
                                dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(3,), scatter_dims_to_operand_dims=(3,))
                                indices_are_sorted=True
                                mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                unique_indices=True
                                update_consts=()
                                update_jaxpr=jaxpr
                              ] xbj xaq xbi
                              xbl:f64[200,7,1] = mul xam xbe
                              xbm:f64[200,7,1] = add_any xaz xbl
                              xbn:f64[200,7,1,3] = broadcast_in_dim[
                                broadcast_dimensions=()
                                shape=(200, 7, 1, 3)
                              ] 0.0
                              xbo:f64[200,7,1,3] = scatter-add[
                                dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(3,), scatter_dims_to_operand_dims=(3,))
                                indices_are_sorted=True
                                mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                unique_indices=True
                                update_consts=()
                                update_jaxpr=jaxpr
                              ] xbn xap xbm
                              xbp:f64[200,7,1] = mul xbe xao
                              xbq:f64[200,7] = reduce_sum[axes=(2, 3)] xat
                              xbr:f64[200,7,1] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1)
                                shape=(200, 7, 1)
                              ] xbq
                              xbs:f64[200,7,1] = neg xbr
                              xbt:f64[200,7,1] = mul xam xbs
                              xbu:f64[200,7,1] = add_any xbb xbt
                              xbv:f64[200,7,1,3] = broadcast_in_dim[
                                broadcast_dimensions=()
                                shape=(200, 7, 1, 3)
                              ] 0.0
                              xbw:f64[200,7,1,3] = scatter-add[
                                dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(3,), scatter_dims_to_operand_dims=(3,))
                                indices_are_sorted=True
                                mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                unique_indices=True
                                update_consts=()
                                update_jaxpr=jaxpr
                              ] xbv xan xbu
                              xbx:f64[200,7,1,3] = add_any xbo xbw
                              xby:f64[200,7,1] = mul xbs xal
                              xbz:f64[200,7,1] = add_any xbp xby
                              xca:f64[200,7,1,3] = broadcast_in_dim[
                                broadcast_dimensions=()
                                shape=(200, 7, 1, 3)
                              ] 0.0
                              xcb:f64[200,7,1,3] = scatter-add[
                                dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(3,), scatter_dims_to_operand_dims=(3,))
                                indices_are_sorted=True
                                mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                unique_indices=True
                                update_consts=()
                                update_jaxpr=jaxpr
                              ] xca xak xbz
                              xcc:f64[200,7,1,3] = add_any xbk xcb
                              xcd:f64[200,7,1] = mul xai xbr
                              xce:f64[200,7,1] = add_any xbg xcd
                              xcf:f64[200,7,1,3] = broadcast_in_dim[
                                broadcast_dimensions=()
                                shape=(200, 7, 1, 3)
                              ] 0.0
                              xcg:f64[200,7,1,3] = scatter-add[
                                dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(3,), scatter_dims_to_operand_dims=(3,))
                                indices_are_sorted=True
                                mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                unique_indices=True
                                update_consts=()
                                update_jaxpr=jaxpr
                              ] xcf xaj xce
                              xch:f64[200,7,1,3] = add_any xbx xcg
                              xci:f64[200,7,1] = mul xbr xah
                              xcj:f64[200,7,1] = add_any xba xci
                              xck:f64[200,7,1,3] = broadcast_in_dim[
                                broadcast_dimensions=()
                                shape=(200, 7, 1, 3)
                              ] 0.0
                              xcl:f64[200,7,1,3] = scatter-add[
                                dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(3,), scatter_dims_to_operand_dims=(3,))
                                indices_are_sorted=True
                                mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                unique_indices=True
                                update_consts=()
                                update_jaxpr=jaxpr
                              ] xck xag xcj
                              xcm:f64[200,7,1,3] = add_any xcc xcl
                            in (xcm, xch) }
                        ] swf tof tog swg swh toh toi swi toj swj swk tok xad
                        xcn:f64[200,7,1,3] = mul xac tod
                        xco:f64[200,7,1] = reduce_sum[axes=(3,)] xcn
                        xcp:f64[200,7,1,1] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 1, 1)
                        ] xco
                        xcq:f64[200,7] = reduce_sum[axes=(2, 3)] xcp
                        xcr:f64[200,7,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1)
                          shape=(200, 7, 1)
                        ] xcq
                        xcs:f64[200,7,1] = mul 2.0 xcr
                        xct:f64[200,7,1,3] = mul toc xac
                        xcu:f64[200,7,1,3] = add_any xaf xct
                        xcv:f64[200,7,1,3] = mul xac tny
                        xcw:f64[200,7,1] = reduce_sum[axes=(3,)] xcv
                        xcx:f64[200,7,1,1] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 1, 1)
                        ] xcw
                        xcy:f64[200,7] = reduce_sum[axes=(2, 3)] xcx
                        xcz:f64[200,7,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1)
                          shape=(200, 7, 1)
                        ] xcy
                        xda:f64[200,7,1] = neg xcz
                        xdb:f64[200,7,1,3] = dot_general[
                          dimension_numbers=(([], []), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] xda tnz
                        xdc:f64[200,7,1,3] = add_any xae xdb
                        xdd:f64[200,7,1,3] = dot_general[
                          dimension_numbers=(([], []), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] xda tnz
                        xde:f64[200,7,1,3] = add_any xdc xdd
                        xdf:f64[200,7,1] = mul tob xcz
                        xdg:f64[200,7,1] = add_any xcs xdf
                        xdh:f64[200,7,1] = mul xcz tob
                        xdi:f64[200,7,1] = add_any xdg xdh
                        xdj:f64[200,7,1,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 1, 1)
                        ] xdi
                        xdk:f64[200,7,1,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 3, 0))
                        ] xdj 0.0
                        xdl:f64[200,7,1,3] = mul 2.0 xac
                        xdm:f64[200,7,1,3] = mul toa xdl
                        xdn:f64[200,7,1,3] = add_any xde xdm
                        xdo:f64[200,7,1,3] = mul xdl tnz
                        xdp:f64[200,7,1] = reduce_sum[axes=(3,)] xdo
                        xdq:f64[200,7,1,1] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 1, 1)
                        ] xdp
                        xdr:f64[200,7] = reduce_sum[axes=(2, 3)] xdq
                        xds:f64[200,7,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1)
                          shape=(200, 7, 1)
                        ] xdr
                        xdt:f64[200,7,1,3] = dot_general[
                          dimension_numbers=(([], []), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] xds tnz
                        xdu:f64[200,7,1,3] = add_any xcu xdt
                        xdv:f64[200,7,13,3] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 12, 0), (0, 0, 0))
                        ] xdu 0.0
                        xdw:f64[200,7,13,3] = add_any wzw xdv
                        xdx:f64[200,7,1,3] = slice[
                          limit_indices=(200, 7, 1, 3)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] xdw
                        xdy:f64[200,7,12,3] = slice[
                          limit_indices=(200, 7, 13, 3)
                          start_indices=(0, 0, 1, 0)
                          strides=None
                        ] xdw
                        xdz:f64[200,7,12,1,3] = pjit[name=_take jaxpr=_take27] swe
                          xdy
                        xea:f64[200,7,12,3] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 12, 3)
                        ] xdz
                        xeb:f64[200,7,12,3] = mul swd xea
                        xec:f64[200,7,12] = reduce_sum[axes=(3,)] xeb
                        xed:f64[200,7,12,1] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 12, 1)
                        ] xec
                        xee:f64[200,7,12] = reduce_sum[axes=(3,)] xed
                        xef:f64[200,7,12] = add_any wuy xee
                        xeg:f64[200,7,18] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (6, 0, 0))
                        ] xef 0.0
                        xeh:f64[200,7,18] = add_any ujy xeg
                        xei:f64[200,7,1,6] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (3, 0, 0))
                        ] xdx 0.0
                        xej:f64[200,7,1,6] = add_any wuz xei
                        xek:f64[200,7,6] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 6)
                        ] xej
                        xel:f64[200,7,18] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 12, 0))
                        ] xek 0.0
                        xem:f64[200,7,18] = add_any xeh xel
                        xen:f64[200,7,1,3] = dot_general[
                          dimension_numbers=(([], []), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] xds tny
                        xeo:f64[200,7,1,3] = add_any xdn xen
                        xep:f64[200,7,1,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (1, 0, 0))
                        ] xeo 0.0
                        xeq:f64[200,7,1,4] = add_any xdk xep
                        xer:f64[200,7,18] = neg ujw
                        xes:f64[200,7,18,3] = dot_general[
                          dimension_numbers=(([], []), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] xer tjf
                        xet:f64[200,7,13,3] = pjit[name=_take jaxpr=_take28] swc
                          xes
                        xeu:f64[200,7,13,3] = pjit[name=_take jaxpr=_take24] swb
                          xet
                        xev:f64[200,7,1,3] = slice[
                          limit_indices=(200, 7, 1, 3)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] xeu
                        xew:f64[200,7,4,3] = slice[
                          limit_indices=(200, 7, 5, 3)
                          start_indices=(0, 0, 1, 0)
                          strides=None
                        ] xeu
                        xex:f64[200,7,4,3] = slice[
                          limit_indices=(200, 7, 9, 3)
                          start_indices=(0, 0, 5, 0)
                          strides=None
                        ] xeu
                        xey:f64[200,7,4,3] = slice[
                          limit_indices=(200, 7, 13, 3)
                          start_indices=(0, 0, 9, 0)
                          strides=None
                        ] xeu
                        xez:f64[200,7,4,3] = gather[
                          dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 3), collapsed_slice_dims=(2,), start_index_map=(2,))
                          fill_value=0
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          slice_sizes=(200, 7, 1, 3)
                          unique_indices=False
                        ] xev svv
                        xfa:f64[200,7,4,3] = add_any xew xez
                        xfb:f64[200,7,4,3] = gather[
                          dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 3), collapsed_slice_dims=(2,), start_index_map=(2,))
                          fill_value=0
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          slice_sizes=(200, 7, 1, 3)
                          unique_indices=False
                        ] xfa svx
                        xfc:f64[200,7,4,3] = add_any xex xfb
                        xfd:f64[200,7,4,3] = gather[
                          dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 3), collapsed_slice_dims=(2,), start_index_map=(2,))
                          fill_value=0
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          slice_sizes=(200, 7, 1, 3)
                          unique_indices=False
                        ] xfc svz
                        xfe:f64[200,7,4,3] = add_any xey xfd
                        xff:f64[200,7,13,3] = pjit[name=_take jaxpr=_take25] swa
                          xfe
                        xfg:f64[200,7,13,3] = pjit[name=_take jaxpr=_take25] svy
                          xfc
                        xfh:f64[200,7,13,3] = add_any xff xfg
                        xfi:f64[200,7,13,3] = pjit[name=_take jaxpr=_take25] svw
                          xfa
                        xfj:f64[200,7,13,3] = add_any xfh xfi
                        xfk:f64[200,7,13,3] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 12, 0), (0, 0, 0))
                        ] xev 0.0
                        xfl:f64[200,7,13,3] = add_any xfj xfk
                        xfm:f64[200,7,13,3] xfn:f64[200,7,13,3] = pjit[
                          name=cross
                          jaxpr=cross22
                        ] svp tns tnt svq svr tnu tnv svs tnw svt svu tnx xfl
                        xfo:f64[200,7,13,3] = add_any uki xfm
                        xfp:f64[200,7,13,3] xfq:f64[200,7,13,3] = pjit[
                          name=cross
                          jaxpr=cross22
                        ] svj tnm tnn svk svl tno tnp svm tnq svn svo tnr xfl
                        xfr:f64[200,7,13,3] = add_any ukh xfp
                        xfs:f64[200,7,13,3] xft:f64[200,7,13,3] = pjit[
                          name=cross
                          jaxpr=cross22
                        ] svd tng tnh sve svf tni tnj svg tnk svh svi tnl xfq
                        xfu:f64[200,7,13,3] = add_any wpb xfs
                        xfv:f64[200,7,13,3] = add_any xfo xft
                        xfw:f64[200,7,13,3] = dot_general[
                          dimension_numbers=(([3], [3]), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] xfq tmy
                        xfx:f64[200,7,13,3] = add_any xfr xfw
                        xfy:f64[200,7,13,3,3] = dot_general[
                          dimension_numbers=(([], []), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] xfq tnf
                        xfz:f64[200,7,13,3,3] = add_any wnv xfy
                        xga:f64[200,7,13,3] xgb:f64[200,7,13,3] = pjit[
                          name=cross
                          jaxpr=cross22
                        ] sux tmz tna suy suz tnb tnc sva tnd svb svc tne xfl
                        xgc:f64[200,7,13,3] = add_any xfu xga
                        xgd:f64[200,7,13,3] = dot_general[
                          dimension_numbers=(([3], [3]), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] xfl tmy
                        xge:f64[200,7,13,3,3] = dot_general[
                          dimension_numbers=(([], []), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] xfl tmx
                        xgf:f64[200,7,13,3,3] = add_any xfz xge
                        xgg:f64[200,7,13,3,3] = mul xgf suw
                        xgh:f64[200,7,13,3,3] = dot_general[
                          dimension_numbers=(([3], [3]), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] xgg tmw
                        xgi:f64[200,7,13,3,3] = transpose[
                          permutation=(0, 1, 2, 4, 3)
                        ] xgh
                        xgj:f64[200,7,13,3,3] = transpose[
                          permutation=(0, 1, 2, 4, 3)
                        ] xgi
                        xgk:f64[200,7,13,3,3] = dot_general[
                          dimension_numbers=(([4], [4]), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] xgg tmv
                        xgl:f64[200,7,13,3,3] = add_any xgj xgk
                        xgm:f64[200,7,13,3] = pjit[
                          name=cross
                          jaxpr={ lambda ; xgn:i32[1] xgo:f64[1,1,1,3] xgp:i32[1]
                              xgq:f64[1,1,1,3] xgr:f64[1,1,1,3] xgs:i32[1] xgt:f64[1,1,1,3]
                              xgu:f64[1,1,1,3] xgv:f64[1,1,1,3] xgw:f64[200,7,13,3,3]. let
                              xgx:f64[200,7,13,3,3] = transpose[
                                permutation=(0, 1, 2, 4, 3)
                              ] xgw
                              xgy:f64[200,7,13,1,3] = slice[
                                limit_indices=(200, 7, 13, 1, 3)
                                start_indices=(0, 0, 0, 0, 0)
                                strides=None
                              ] xgx
                              xgz:f64[200,7,13,1,3] = slice[
                                limit_indices=(200, 7, 13, 2, 3)
                                start_indices=(0, 0, 0, 1, 0)
                                strides=None
                              ] xgx
                              xha:f64[200,7,13,1,3] = slice[
                                limit_indices=(200, 7, 13, 3, 3)
                                start_indices=(0, 0, 0, 2, 0)
                                strides=None
                              ] xgx
                              xhb:f64[200,7,13,3] = reduce_sum[axes=(3,)] xha
                              xhc:f64[200,7,13,3] = neg xhb
                              xhd:f64[200,7,13,3] = mul xhc xgv
                              xhe:f64[200,7,13] = reduce_sum[axes=(3,)] xhd
                              xhf:f64[200,7,13,1] = reshape[
                                dimensions=None
                                new_sizes=(200, 7, 13, 1)
                              ] xhe
                              xhg:f64[200,7,13] = reduce_sum[axes=(3,)] xhf
                              xhh:f64[200,7,13,3] = mul xhb xgu
                              xhi:f64[200,7,13] = reduce_sum[axes=(3,)] xhh
                              xhj:f64[200,7,13,1] = reshape[
                                dimensions=None
                                new_sizes=(200, 7, 13, 1)
                              ] xhi
                              xhk:f64[200,7,13] = reduce_sum[axes=(3,)] xhj
                              xhl:f64[200,7,13,3] = reduce_sum[axes=(3,)] xgz
                              xhm:f64[200,7,13,3] = neg xhl
                              xhn:f64[200,7,13,3] = mul xhm xgt
                              xho:f64[200,7,13] = reduce_sum[axes=(3,)] xhn
                              xhp:f64[200,7,13,1] = reshape[
                                dimensions=None
                                new_sizes=(200, 7, 13, 1)
                              ] xho
                              xhq:f64[200,7,13] = reduce_sum[axes=(3,)] xhp
                              xhr:f64[200,7,13] = add_any xhk xhq
                              xhs:f64[200,7,13,3] = broadcast_in_dim[
                                broadcast_dimensions=()
                                shape=(200, 7, 13, 3)
                              ] 0.0
                              xht:f64[200,7,13,3] = scatter-add[
                                dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(3,), scatter_dims_to_operand_dims=(3,))
                                indices_are_sorted=True
                                mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                unique_indices=True
                                update_consts=()
                                update_jaxpr=jaxpr
                              ] xhs xgs xhr
                              xhu:f64[200,7,13,3] = mul xhl xgr
                              xhv:f64[200,7,13] = reduce_sum[axes=(3,)] xhu
                              xhw:f64[200,7,13,1] = reshape[
                                dimensions=None
                                new_sizes=(200, 7, 13, 1)
                              ] xhv
                              xhx:f64[200,7,13] = reduce_sum[axes=(3,)] xhw
                              xhy:f64[200,7,13,3] = reduce_sum[axes=(3,)] xgy
                              xhz:f64[200,7,13,3] = neg xhy
                              xia:f64[200,7,13,3] = mul xhz xgq
                              xib:f64[200,7,13] = reduce_sum[axes=(3,)] xia
                              xic:f64[200,7,13,1] = reshape[
                                dimensions=None
                                new_sizes=(200, 7, 13, 1)
                              ] xib
                              xid:f64[200,7,13] = reduce_sum[axes=(3,)] xic
                              xie:f64[200,7,13] = add_any xhx xid
                              xif:f64[200,7,13,3] = broadcast_in_dim[
                                broadcast_dimensions=()
                                shape=(200, 7, 13, 3)
                              ] 0.0
                              xig:f64[200,7,13,3] = scatter-add[
                                dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(3,), scatter_dims_to_operand_dims=(3,))
                                indices_are_sorted=True
                                mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                unique_indices=True
                                update_consts=()
                                update_jaxpr=jaxpr
                              ] xif xgp xie
                              xih:f64[200,7,13,3] = add_any xht xig
                              xii:f64[200,7,13,3] = mul xhy xgo
                              xij:f64[200,7,13] = reduce_sum[axes=(3,)] xii
                              xik:f64[200,7,13,1] = reshape[
                                dimensions=None
                                new_sizes=(200, 7, 13, 1)
                              ] xij
                              xil:f64[200,7,13] = reduce_sum[axes=(3,)] xik
                              xim:f64[200,7,13] = add_any xhg xil
                              xin:f64[200,7,13,3] = broadcast_in_dim[
                                broadcast_dimensions=()
                                shape=(200, 7, 13, 3)
                              ] 0.0
                              xio:f64[200,7,13,3] = scatter-add[
                                dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(3,), scatter_dims_to_operand_dims=(3,))
                                indices_are_sorted=True
                                mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                unique_indices=True
                                update_consts=()
                                update_jaxpr=jaxpr
                              ] xin xgn xim
                              xip:f64[200,7,13,3] = add_any xih xio
                            in (xip,) }
                        ] sun suo sup suq sur sus sut suu suv xgl
                        xiq:f64[200,7,13,3,3] = dot_general[
                          dimension_numbers=(([3], [3]), ([0, 1, 2], [1, 2, 0]))
                          preferred_element_type=float64
                        ] xgf tmu
                        xir:f64[200,7,13,3,3] = transpose[
                          permutation=(0, 1, 2, 4, 3)
                        ] xiq
                        xis:f64[200,7,13,3,3] = transpose[
                          permutation=(0, 1, 2, 4, 3)
                        ] xir
                        xit:f64[200,7,13,3,3] = dot_general[
                          dimension_numbers=(([4], [4]), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] xgf tmt
                        xiu:f64[13,200,7,3,3] = transpose[
                          permutation=(2, 0, 1, 3, 4)
                        ] xit
                        xiv:f64[13,200,7,3,3] = dot_general[
                          dimension_numbers=(([4], [2]), ([0], [0]))
                          preferred_element_type=float64
                        ] xiu sum
                        xiw:f64[200,7,13,3,3] = transpose[
                          permutation=(1, 2, 0, 3, 4)
                        ] xiv
                        xix:f64[200,7,13,3,3] = add_any xis xiw
                        xiy:f64[200,7,13,1,3] = slice[
                          limit_indices=(200, 7, 13, 1, 3)
                          start_indices=(0, 0, 0, 0, 0)
                          strides=None
                        ] xix
                        xiz:f64[200,7,13,1,3] = slice[
                          limit_indices=(200, 7, 13, 2, 3)
                          start_indices=(0, 0, 0, 1, 0)
                          strides=None
                        ] xix
                        xja:f64[200,7,13,1,3] = slice[
                          limit_indices=(200, 7, 13, 3, 3)
                          start_indices=(0, 0, 0, 2, 0)
                          strides=None
                        ] xix
                        xjb:f64[200,7,13,3] = reduce_sum[axes=(3,)] xja
                        xjc:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] xjb
                        xjd:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] xjb
                        xje:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] xjb
                        xjf:f64[200,7,13] = reduce_sum[axes=(3,)] xje
                        xjg:f64[200,7,13] = neg xjf
                        xjh:f64[200,7,13] = reduce_sum[axes=(3,)] xjd
                        xji:f64[200,7,13] = reduce_sum[axes=(3,)] xjc
                        xjj:f64[200,7,13] = neg xji
                        xjk:f64[200,7,13,3] = reduce_sum[axes=(3,)] xiz
                        xjl:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] xjk
                        xjm:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] xjk
                        xjn:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] xjk
                        xjo:f64[200,7,13] = reduce_sum[axes=(3,)] xjn
                        xjp:f64[200,7,13] = neg xjo
                        xjq:f64[200,7,13] = add_any xjh xjo
                        xjr:f64[200,7,13] = add_any xjh xjp
                        xjs:f64[200,7,13] = mul tmr xjr
                        xjt:f64[200,7,13] = mul xjr tms
                        xju:f64[200,7,13] = mul tmk xjq
                        xjv:f64[200,7,13] = mul xjq tmo
                        xjw:f64[200,7,13] = reduce_sum[axes=(3,)] xjm
                        xjx:f64[200,7,13] = neg xjw
                        xjy:f64[200,7,13] = add_any xjg xjx
                        xjz:f64[200,7,13] = mul tmq xjy
                        xka:f64[200,7,13] = add_any xjs xjz
                        xkb:f64[200,7,13] = mul tmq xka
                        xkc:f64[200,7,13] = mul xka tml
                        xkd:f64[200,7,13] = mul xjy tms
                        xke:f64[200,7,13] = add_any xkc xkd
                        xkf:f64[200,7,13] = reduce_sum[axes=(3,)] xjl
                        xkg:f64[200,7,13,3] = reduce_sum[axes=(3,)] xiy
                        xkh:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] xkg
                        xki:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] xkg
                        xkj:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] xkg
                        xkk:f64[200,7,13] = reduce_sum[axes=(3,)] xkj
                        xkl:f64[200,7,13] = add_any xji xkk
                        xkm:f64[200,7,13] = add_any xjj xkk
                        xkn:f64[200,7,13] = mul tmr xkm
                        xko:f64[200,7,13] = mul xkm tmj
                        xkp:f64[200,7,13] = add_any xjt xko
                        xkq:f64[200,7,13] = mul tmq xkl
                        xkr:f64[200,7,13] = add_any xju xkq
                        xks:f64[200,7,13] = mul xkl tmo
                        xkt:f64[200,7,13] = add_any xke xks
                        xku:f64[200,7,13] = reduce_sum[axes=(3,)] xki
                        xkv:f64[200,7,13] = neg xku
                        xkw:f64[200,7,13] = add_any xkf xku
                        xkx:f64[200,7,13] = add_any xkf xkv
                        xky:f64[200,7,13] = mul tmr xkx
                        xkz:f64[200,7,13] = add_any xkr xky
                        xla:f64[200,7,13] = mul xkx tmo
                        xlb:f64[200,7,13] = add_any xkp xla
                        xlc:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] xlb
                        xld:f64[200,7,13,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 3, 0))
                        ] xlc 0.0
                        xle:f64[200,7,13,4] = add_any ukf xld
                        xlf:f64[200,7,13] = mul tmq xkw
                        xlg:f64[200,7,13] = add_any xkn xlf
                        xlh:f64[200,7,13] = mul xkw tmj
                        xli:f64[200,7,13] = add_any xkt xlh
                        xlj:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] xli
                        xlk:f64[200,7,13,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (1, 2, 0))
                        ] xlj 0.0
                        xll:f64[200,7,13,4] = add_any xle xlk
                        xlm:f64[200,7,13] = reduce_sum[axes=(3,)] xkh
                        xln:f64[200,7,13] = neg xlm
                        xlo:f64[200,7,13] = add_any xjg xln
                        xlp:f64[200,7,13] = add_any xjx xln
                        xlq:f64[200,7,13] = mul tmp xlp
                        xlr:f64[200,7,13] = add_any xkz xlq
                        xls:f64[200,7,13] = mul tmp xlr
                        xlt:f64[200,7,13] = add_any xkb xls
                        xlu:f64[200,7,13] = mul xlr tml
                        xlv:f64[200,7,13] = mul xlp tmo
                        xlw:f64[200,7,13] = add_any xlu xlv
                        xlx:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] xlw
                        xly:f64[200,7,13,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (3, 0, 0))
                        ] xlx 0.0
                        xlz:f64[200,7,13,4] = add_any xll xly
                        xma:f64[200,7,13] = mul tmk xlo
                        xmb:f64[200,7,13] = add_any xlg xma
                        xmc:f64[200,7,13] = mul tmk xmb
                        xmd:f64[200,7,13] = add_any xlt xmc
                        xme:f64[200,7,13] = mul xmd tmn
                        xmf:f64[200,7,13] = mul xme 2.0
                        xmg:f64[200,7,13] = neg xmf
                        xmh:f64[200,7,13,4] = dot_general[
                          dimension_numbers=(([], []), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] xmg tmm
                        xmi:f64[200,7,13,4] = add_any xlz xmh
                        xmj:f64[200,7,13,4] = dot_general[
                          dimension_numbers=(([], []), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] xmg tmm
                        xmk:f64[200,7,13,4] = add_any xmi xmj
                        xml:f64[200,7,13] = mul xmb tml
                        xmm:f64[200,7,13] = add_any xjv xml
                        xmn:f64[200,7,13] = mul xlo tmj
                        xmo:f64[200,7,13] = add_any xmm xmn
                        xmp:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] xmo
                        xmq:f64[200,7,13,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (2, 1, 0))
                        ] xmp 0.0
                        xmr:f64[200,7,13,4] = add_any xmk xmq
                        xms:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] xmr
                        xmt:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] xmr
                        xmu:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] xmr
                        xmv:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] xmr
                        xmw:f64[200,7,13] = reduce_sum[axes=(3,)] xmv
                        xmx:f64[200,7,13] = mul xmw sul
                        xmy:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] xmx
                        xmz:f64[200,7,13,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (3, 0, 0))
                        ] xmy 0.0
                        xna:f64[200,7,13,4] = add_any uka xmz
                        xnb:f64[200,7,13] = neg xmw
                        xnc:f64[200,7,13] = mul xnb suk
                        xnd:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] xnc
                        xne:f64[200,7,13,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (2, 1, 0))
                        ] xnd 0.0
                        xnf:f64[200,7,13,4] = add_any xna xne
                        xng:f64[200,7,13] = mul xmw suj
                        xnh:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] xng
                        xni:f64[200,7,13,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (1, 2, 0))
                        ] xnh 0.0
                        xnj:f64[200,7,13,4] = add_any xnf xni
                        xnk:f64[200,7,13] = mul xmw sui
                        xnl:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] xnk
                        xnm:f64[200,7,13,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 3, 0))
                        ] xnl 0.0
                        xnn:f64[200,7,13,4] = add_any xnj xnm
                        xno:f64[200,7,13] = reduce_sum[axes=(3,)] xmu
                        xnp:f64[200,7,13] = mul xno suh
                        xnq:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] xnp
                        xnr:f64[200,7,13,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (3, 0, 0))
                        ] xnq 0.0
                        xns:f64[200,7,13,4] = add_any xnn xnr
                        xnt:f64[200,7,13] = mul xno sug
                        xnu:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] xnt
                        xnv:f64[200,7,13,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (2, 1, 0))
                        ] xnu 0.0
                        xnw:f64[200,7,13,4] = add_any xns xnv
                        xnx:f64[200,7,13] = neg xno
                        xny:f64[200,7,13] = mul xnx suf
                        xnz:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] xny
                        xoa:f64[200,7,13,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (1, 2, 0))
                        ] xnz 0.0
                        xob:f64[200,7,13,4] = add_any xnw xoa
                        xoc:f64[200,7,13] = mul xno sue
                        xod:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] xoc
                        xoe:f64[200,7,13,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 3, 0))
                        ] xod 0.0
                        xof:f64[200,7,13,4] = add_any xob xoe
                        xog:f64[200,7,13] = reduce_sum[axes=(3,)] xmt
                        xoh:f64[200,7,13] = neg xog
                        xoi:f64[200,7,13] = mul xoh sud
                        xoj:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] xoi
                        xok:f64[200,7,13,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (3, 0, 0))
                        ] xoj 0.0
                        xol:f64[200,7,13,4] = add_any xof xok
                        xom:f64[200,7,13] = mul xog suc
                        xon:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] xom
                        xoo:f64[200,7,13,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (2, 1, 0))
                        ] xon 0.0
                        xop:f64[200,7,13,4] = add_any xol xoo
                        xoq:f64[200,7,13] = mul xog sub
                        xor:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] xoq
                        xos:f64[200,7,13,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (1, 2, 0))
                        ] xor 0.0
                        xot:f64[200,7,13,4] = add_any xop xos
                        xou:f64[200,7,13] = mul xog sua
                        xov:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] xou
                        xow:f64[200,7,13,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 3, 0))
                        ] xov 0.0
                        xox:f64[200,7,13,4] = add_any xot xow
                        xoy:f64[200,7,13] = reduce_sum[axes=(3,)] xms
                        xoz:f64[200,7,13] = neg xoy
                        xpa:f64[200,7,13] = mul xoz stz
                        xpb:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] xpa
                        xpc:f64[200,7,13,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (3, 0, 0))
                        ] xpb 0.0
                        xpd:f64[200,7,13,4] = add_any xox xpc
                        xpe:f64[200,7,13] = neg xoy
                        xpf:f64[200,7,13] = mul xpe sty
                        xpg:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] xpf
                        xph:f64[200,7,13,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (2, 1, 0))
                        ] xpg 0.0
                        xpi:f64[200,7,13,4] = add_any xpd xph
                        xpj:f64[200,7,13] = neg xoy
                        xpk:f64[200,7,13] = mul xpj stx
                        xpl:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] xpk
                        xpm:f64[200,7,13,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (1, 2, 0))
                        ] xpl 0.0
                        xpn:f64[200,7,13,4] = add_any xpi xpm
                        xpo:f64[200,7,13] = mul xoy stw
                        xpp:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] xpo
                        xpq:f64[200,7,13,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 3, 0))
                        ] xpp 0.0
                        xpr:f64[200,7,13,4] = add_any xpn xpq
                        xps:f64[200,7,18,3] = dot_general[
                          dimension_numbers=(([], []), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] xer tmi
                        xpt:f64[200,7,18,3] = add_any wod xps
                        xpu:f64[200,7,18,3] = dot_general[
                          dimension_numbers=(([], []), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] xer tjd
                        xpv:f64[200,7,13,3] = pjit[name=_take jaxpr=_take28] stv
                          xpu
                        xpw:f64[200,7,13,3] = pjit[name=_take jaxpr=_take24] stu
                          xpv
                        xpx:f64[200,7,1,3] = slice[
                          limit_indices=(200, 7, 1, 3)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] xpw
                        xpy:f64[200,7,4,3] = slice[
                          limit_indices=(200, 7, 5, 3)
                          start_indices=(0, 0, 1, 0)
                          strides=None
                        ] xpw
                        xpz:f64[200,7,4,3] = slice[
                          limit_indices=(200, 7, 9, 3)
                          start_indices=(0, 0, 5, 0)
                          strides=None
                        ] xpw
                        xqa:f64[200,7,4,3] = slice[
                          limit_indices=(200, 7, 13, 3)
                          start_indices=(0, 0, 9, 0)
                          strides=None
                        ] xpw
                        xqb:f64[200,7,4,3] = gather[
                          dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 3), collapsed_slice_dims=(2,), start_index_map=(2,))
                          fill_value=0
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          slice_sizes=(200, 7, 1, 3)
                          unique_indices=False
                        ] xpx sto
                        xqc:f64[200,7,4,3] = add_any xpy xqb
                        xqd:f64[200,7,4,3] = gather[
                          dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 3), collapsed_slice_dims=(2,), start_index_map=(2,))
                          fill_value=0
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          slice_sizes=(200, 7, 1, 3)
                          unique_indices=False
                        ] xqc stq
                        xqe:f64[200,7,4,3] = add_any xpz xqd
                        xqf:f64[200,7,4,3] = gather[
                          dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 3), collapsed_slice_dims=(2,), start_index_map=(2,))
                          fill_value=0
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          slice_sizes=(200, 7, 1, 3)
                          unique_indices=False
                        ] xqe sts
                        xqg:f64[200,7,4,3] = add_any xqa xqf
                        xqh:f64[200,7,13,3] = pjit[name=_take jaxpr=_take25] stt
                          xqg
                        xqi:f64[200,7,13,3] = pjit[name=_take jaxpr=_take25] str
                          xqe
                        xqj:f64[200,7,13,3] = add_any xqh xqi
                        xqk:f64[200,7,13,3] = pjit[name=_take jaxpr=_take25] stp
                          xqc
                        xql:f64[200,7,13,3] = add_any xqj xqk
                        xqm:f64[200,7,13,3] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 12, 0), (0, 0, 0))
                        ] xpx 0.0
                        xqn:f64[200,7,13,3] = add_any xql xqm
                        xqo:f64[200,7,13,3] xqp:f64[200,7,13,3] = pjit[
                          name=cross
                          jaxpr=cross22
                        ] sti tmc tmd stj stk tme tmf stl tmg stm stn tmh xqn
                        xqq:f64[200,7,13,3] = add_any xfx xqo
                        xqr:f64[200,7,13,3] = add_any xfn xqp
                        xqs:f64[200,7,13,3] = neg xqr
                        xqt:f64[200,7,13,3] xqu:f64[200,7,13,3] = pjit[
                          name=cross
                          jaxpr=cross22
                        ] stc tlw tlx std ste tly tlz stf tma stg sth tmb xqs
                        xqv:f64[200,7,13,3] = add_any xgc xqt
                        xqw:f64[200,7,13,3] = add_any xqq xqu
                        xqx:f64[200,7,13,3] = mul stb xqr
                        xqy:f64[200,7,13,3] = add_any xfv xqx
                        xqz:f64[200,7,13,3] = neg xqn
                        xra:f64[200,7,13,3] xrb:f64[200,7,13,3] = pjit[
                          name=cross
                          jaxpr=cross22
                        ] ssv tlq tlr ssw ssx tls tlt ssy tlu ssz sta tlv xqz
                        xrc:f64[200,7,13,3] = add_any xqv xra
                        xrd:f64[200,7,13,3] = add_any xgd xrb
                        xre:f64[200,7,13,3] = pjit[name=_take jaxpr=_take24] ssu
                          xrd
                        xrf:f64[200,7,1,3] = slice[
                          limit_indices=(200, 7, 1, 3)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] xre
                        xrg:f64[200,7,4,3] = slice[
                          limit_indices=(200, 7, 5, 3)
                          start_indices=(0, 0, 1, 0)
                          strides=None
                        ] xre
                        xrh:f64[200,7,4,3] = slice[
                          limit_indices=(200, 7, 9, 3)
                          start_indices=(0, 0, 5, 0)
                          strides=None
                        ] xre
                        xri:f64[200,7,4,3] = slice[
                          limit_indices=(200, 7, 13, 3)
                          start_indices=(0, 0, 9, 0)
                          strides=None
                        ] xre
                        xrj:f64[200,7,4,3] = gather[
                          dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 3), collapsed_slice_dims=(2,), start_index_map=(2,))
                          fill_value=0
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          slice_sizes=(200, 7, 1, 3)
                          unique_indices=False
                        ] xri sss
                        xrk:f64[200,7,4,3] = add_any xrh xri
                        xrl:f64[200,7,4,3] = mul tlp xrj
                        xrm:f64[200,7,4] = reduce_sum[axes=(3,)] xrl
                        xrn:f64[200,7,4,1] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 4, 1)
                        ] xrm
                        xro:f64[200,7,4] = reduce_sum[axes=(3,)] xrn
                        xrp:f64[200,7,4,3] = mul xrj tlo
                        xrq:f64[200,7,18,3] = pjit[name=_take jaxpr=_take29] sst
                          xrp
                        xrr:f64[200,7,18,3] = add_any ukl xrq
                        xrs:f64[200,7,4,3] = gather[
                          dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 3), collapsed_slice_dims=(2,), start_index_map=(2,))
                          fill_value=0
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          slice_sizes=(200, 7, 1, 3)
                          unique_indices=False
                        ] xrk ssq
                        xrt:f64[200,7,4,3] = add_any xrg xrk
                        xru:f64[200,7,4,3] = mul tln xrs
                        xrv:f64[200,7,4] = reduce_sum[axes=(3,)] xru
                        xrw:f64[200,7,4,1] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 4, 1)
                        ] xrv
                        xrx:f64[200,7,4] = reduce_sum[axes=(3,)] xrw
                        xry:f64[200,7,4,3] = mul xrs tlm
                        xrz:f64[200,7,18,3] = pjit[name=_take jaxpr=_take29] ssr
                          xry
                        xsa:f64[200,7,18,3] = add_any xrr xrz
                        xsb:f64[200,7,4,3] = gather[
                          dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 3), collapsed_slice_dims=(2,), start_index_map=(2,))
                          fill_value=0
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          slice_sizes=(200, 7, 1, 3)
                          unique_indices=False
                        ] xrt sso
                        xsc:f64[200,7,4,3] = mul tll xsb
                        xsd:f64[200,7,4] = reduce_sum[axes=(3,)] xsc
                        xse:f64[200,7,4,1] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 4, 1)
                        ] xsd
                        xsf:f64[200,7,4] = reduce_sum[axes=(3,)] xse
                        xsg:f64[200,7,4,3] = mul xsb tlk
                        xsh:f64[200,7,18,3] = pjit[name=_take jaxpr=_take29] ssp
                          xsg
                        xsi:f64[200,7,18,3] = add_any xsa xsh
                        xsj:f64[200,7,1,3] = pjit[name=_take jaxpr=_take26] ssn xrt
                        xsk:f64[200,7,1,3] = add_any xrf xsj
                        xsl:f64[200,7,6,3] = gather[
                          dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 3), collapsed_slice_dims=(2,), start_index_map=(2,))
                          fill_value=0
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          slice_sizes=(200, 7, 1, 3)
                          unique_indices=False
                        ] xsk srz
                        xsm:f64[200,7,6,3] = mul tlj xsl
                        xsn:f64[200,7,6] = reduce_sum[axes=(3,)] xsm
                        xso:f64[200,7,6,1] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 6, 1)
                        ] xsn
                        xsp:f64[200,7,6] = reduce_sum[axes=(3,)] xso
                        xsq:f64[200,7,6,3] = mul xsl tli
                        xsr:f64[200,7,18,3] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 12, 0), (0, 0, 0))
                        ] xsq 0.0
                        xss:f64[200,7,18,3] = add_any xsi xsr
                        xst:f64[200,7,6,3] = slice[
                          limit_indices=(200, 7, 6, 3)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] xss
                        xsu:f64[200,7,12,3] = slice[
                          limit_indices=(200, 7, 18, 3)
                          start_indices=(0, 0, 6, 0)
                          strides=None
                        ] xss
                        xsv:f64[200,7,12,3] xsw:f64[200,7,12,3] = pjit[
                          name=cross
                          jaxpr=cross23
                        ] ssh tlc tld ssi ssj tle tlf ssk tlg ssl ssm tlh xsu
                        xsx:f64[200,7,1,6,3] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 1, 6, 3)
                        ] xst
                        xsy:f64[200,7,1,3,3] = broadcast_in_dim[
                          broadcast_dimensions=()
                          shape=(200, 7, 1, 3, 3)
                        ] 0.0
                        xsz:f64[200,7,1,6,3] = scatter[
                          dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2, 3, 4), inserted_window_dims=(), scatter_dims_to_operand_dims=(3,))
                          indices_are_sorted=True
                          mode=GatherScatterMode.FILL_OR_DROP
                          unique_indices=True
                          update_consts=()
                          update_jaxpr=None
                        ] xsx ssg xsy
                        xta:f64[200,7,1,3] xtb:f64[200,7,1,6,3] = pjit[
                          name=cross
                          jaxpr=cross24
                        ] ssa tkt tku ssb ssc tkv tkw ssd tkx tky sse ssf tkz tla
                          tlb xsz
                        xtc:f64[200,7,13,3] = mul xrc sry
                        xtd:f64[200,7,13,3] = add_any xgm xtc
                        xte:f64[200,7,13,3] = neg xtd
                        xtf:f64[200,7,13,3] = add_any ukd xte
                        xtg:f64[200,7,13,3] = mul spf xqn
                        xth:f64[200,7,13,3] = add_any xgb xtg
                        xti:f64[200,7,13,3] = pjit[name=_take jaxpr=_take24] srx
                          xth
                        xtj:f64[200,7,1,3] = slice[
                          limit_indices=(200, 7, 1, 3)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] xti
                        xtk:f64[200,7,4,3] = slice[
                          limit_indices=(200, 7, 5, 3)
                          start_indices=(0, 0, 1, 0)
                          strides=None
                        ] xti
                        xtl:f64[200,7,4,3] = slice[
                          limit_indices=(200, 7, 9, 3)
                          start_indices=(0, 0, 5, 0)
                          strides=None
                        ] xti
                        xtm:f64[200,7,4,3] = slice[
                          limit_indices=(200, 7, 13, 3)
                          start_indices=(0, 0, 9, 0)
                          strides=None
                        ] xti
                        xtn:f64[200,7,4,3] = gather[
                          dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 3), collapsed_slice_dims=(2,), start_index_map=(2,))
                          fill_value=0
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          slice_sizes=(200, 7, 1, 3)
                          unique_indices=False
                        ] xtm sru
                        xto:f64[200,7,4,3] = add_any xtl xtm
                        xtp:f64[200,7,4,3] = mul tks xtn
                        xtq:f64[200,7,4] = reduce_sum[axes=(3,)] xtp
                        xtr:f64[200,7,4,1] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 4, 1)
                        ] xtq
                        xts:f64[200,7,4] = reduce_sum[axes=(3,)] xtr
                        xtt:f64[200,7,4] = add_any xro xts
                        xtu:f64[200,7,18] = pjit[name=_take jaxpr=_take30] srw xtt
                        xtv:f64[200,7,18] = add_any xem xtu
                        xtw:f64[200,7,4,3] = mul xtn tkr
                        xtx:f64[200,7,18,3] = pjit[name=_take jaxpr=_take29] srv
                          xtw
                        xty:f64[200,7,18,3] = add_any ukm xtx
                        xtz:f64[200,7,4,3] = gather[
                          dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 3), collapsed_slice_dims=(2,), start_index_map=(2,))
                          fill_value=0
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          slice_sizes=(200, 7, 1, 3)
                          unique_indices=False
                        ] xto srr
                        xua:f64[200,7,4,3] = add_any xtk xto
                        xub:f64[200,7,4,3] = mul tkq xtz
                        xuc:f64[200,7,4] = reduce_sum[axes=(3,)] xub
                        xud:f64[200,7,4,1] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 4, 1)
                        ] xuc
                        xue:f64[200,7,4] = reduce_sum[axes=(3,)] xud
                        xuf:f64[200,7,4] = add_any xrx xue
                        xug:f64[200,7,18] = pjit[name=_take jaxpr=_take30] srt xuf
                        xuh:f64[200,7,18] = add_any xtv xug
                        xui:f64[200,7,4,3] = mul xtz tkp
                        xuj:f64[200,7,18,3] = pjit[name=_take jaxpr=_take29] srs
                          xui
                        xuk:f64[200,7,18,3] = add_any xty xuj
                        xul:f64[200,7,4,3] = gather[
                          dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 3), collapsed_slice_dims=(2,), start_index_map=(2,))
                          fill_value=0
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          slice_sizes=(200, 7, 1, 3)
                          unique_indices=False
                        ] xua sro
                        xum:f64[200,7,4,3] = mul tko xul
                        xun:f64[200,7,4] = reduce_sum[axes=(3,)] xum
                        xuo:f64[200,7,4,1] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 4, 1)
                        ] xun
                        xup:f64[200,7,4] = reduce_sum[axes=(3,)] xuo
                        xuq:f64[200,7,4] = add_any xsf xup
                        xur:f64[200,7,18] = pjit[name=_take jaxpr=_take30] srq xuq
                        xus:f64[200,7,18] = add_any xuh xur
                        xut:f64[200,7,4,3] = mul xul tkn
                        xuu:f64[200,7,18,3] = pjit[name=_take jaxpr=_take29] srp
                          xut
                        xuv:f64[200,7,18,3] = add_any xuk xuu
                        xuw:f64[200,7,1,3] = pjit[name=_take jaxpr=_take26] srn xua
                        xux:f64[200,7,1,3] = add_any xtj xuw
                        xuy:f64[200,7,6,3] = gather[
                          dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 3), collapsed_slice_dims=(2,), start_index_map=(2,))
                          fill_value=0
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          slice_sizes=(200, 7, 1, 3)
                          unique_indices=False
                        ] xux spg
                        xuz:f64[200,7,6,3] = mul tkm xuy
                        xva:f64[200,7,6] = reduce_sum[axes=(3,)] xuz
                        xvb:f64[200,7,6,1] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 6, 1)
                        ] xva
                        xvc:f64[200,7,6] = reduce_sum[axes=(3,)] xvb
                        xvd:f64[200,7,6] = add_any xsp xvc
                        xve:f64[200,7,18] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 12, 0))
                        ] xvd 0.0
                        xvf:f64[200,7,18] = add_any xus xve
                        xvg:f64[200,7,6,3] = mul xuy tkl
                        xvh:f64[200,7,18,3] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 12, 0), (0, 0, 0))
                        ] xvg 0.0
                        xvi:f64[200,7,18,3] = add_any xuv xvh
                        xvj:f64[200,7,6,3] = slice[
                          limit_indices=(200, 7, 6, 3)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] xvi
                        xvk:f64[200,7,12,3] = slice[
                          limit_indices=(200, 7, 18, 3)
                          start_indices=(0, 0, 6, 0)
                          strides=None
                        ] xvi
                        xvl:f64[200,7,12,3] xvm:f64[200,7,12,3] = pjit[
                          name=cross
                          jaxpr=cross23
                        ] srh tkf tkg sri srj tkh tki srk tkj srl srm tkk xvk
                        xvn:f64[200,7,12,3] = add_any xsw xvm
                        xvo:f64[200,7,18,3] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (6, 0, 0), (0, 0, 0))
                        ] xvn 0.0
                        xvp:f64[200,7,18,3] = add_any xpt xvo
                        xvq:f64[200,7,13,3] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (1, 0, 0), (0, 0, 0))
                        ] xvl 0.0
                        xvr:f64[200,7,14,3] = pjit[name=_take jaxpr=_take31] srg
                          xvq
                        xvs:f64[200,7,13,3] = slice[
                          limit_indices=(200, 7, 13, 3)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] xvr
                        xvt:f64[200,7,13,3] = add_any xqy xvs
                        xvu:f64[200,7,13,3] = pjit[name=_take jaxpr=_take24] srf
                          xvt
                        xvv:f64[200,7,1,3] = slice[
                          limit_indices=(200, 7, 1, 3)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] xvu
                        xvw:f64[200,7,4,3] = slice[
                          limit_indices=(200, 7, 5, 3)
                          start_indices=(0, 0, 1, 0)
                          strides=None
                        ] xvu
                        xvx:f64[200,7,4,3] = slice[
                          limit_indices=(200, 7, 9, 3)
                          start_indices=(0, 0, 5, 0)
                          strides=None
                        ] xvu
                        xvy:f64[200,7,4,3] = slice[
                          limit_indices=(200, 7, 13, 3)
                          start_indices=(0, 0, 9, 0)
                          strides=None
                        ] xvu
                        xvz:f64[200,7,4,3] = gather[
                          dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 3), collapsed_slice_dims=(2,), start_index_map=(2,))
                          fill_value=0
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          slice_sizes=(200, 7, 1, 3)
                          unique_indices=False
                        ] xvy srd
                        xwa:f64[200,7,4,3] = add_any xvx xvy
                        xwb:f64[200,7,18,3] = pjit[name=_take jaxpr=_take29] sre
                          xvz
                        xwc:f64[200,7,4,3] = gather[
                          dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 3), collapsed_slice_dims=(2,), start_index_map=(2,))
                          fill_value=0
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          slice_sizes=(200, 7, 1, 3)
                          unique_indices=False
                        ] xwa srb
                        xwd:f64[200,7,4,3] = add_any xvw xwa
                        xwe:f64[200,7,18,3] = pjit[name=_take jaxpr=_take29] src
                          xwc
                        xwf:f64[200,7,18,3] = add_any xwb xwe
                        xwg:f64[200,7,4,3] = gather[
                          dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 3), collapsed_slice_dims=(2,), start_index_map=(2,))
                          fill_value=0
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          slice_sizes=(200, 7, 1, 3)
                          unique_indices=False
                        ] xwd sqz
                        xwh:f64[200,7,18,3] = pjit[name=_take jaxpr=_take29] sra
                          xwg
                        xwi:f64[200,7,18,3] = add_any xwf xwh
                        xwj:f64[200,7,1,3] = pjit[name=_take jaxpr=_take26] sqy xwd
                        xwk:f64[200,7,1,3] = add_any xvv xwj
                        xwl:f64[200,7,6,3] = gather[
                          dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 3), collapsed_slice_dims=(2,), start_index_map=(2,))
                          fill_value=0
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          slice_sizes=(200, 7, 1, 3)
                          unique_indices=False
                        ] xwk sqx
                        xwm:f64[200,7,18,3] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 12, 0), (0, 0, 0))
                        ] xwl 0.0
                        xwn:f64[200,7,18,3] = add_any xwi xwm
                        xwo:f64[200,7,12,3] xwp:f64[200,7,12,3] = pjit[
                          name=cross
                          jaxpr=cross23
                        ] sqr tjz tka sqs sqt tkb tkc squ tkd sqv sqw tke xvk
                        xwq:f64[200,7,12,3] = add_any xsv xwo
                        xwr:f64[200,7,18,3] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (6, 0, 0), (0, 0, 0))
                        ] xwp 0.0
                        xws:f64[200,7,18,3] = add_any wpf xwr
                        xwt:f64[200,7,13,3] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (1, 0, 0), (0, 0, 0))
                        ] xwq 0.0
                        xwu:f64[200,7,14,3] = pjit[name=_take jaxpr=_take31] sqq
                          xwt
                        xwv:f64[200,7,13,3] = slice[
                          limit_indices=(200, 7, 13, 3)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] xwu
                        xww:f64[200,7,13,3] = add_any xqw xwv
                        xwx:f64[200,7,13,3] = pjit[name=_take jaxpr=_take24] sqp
                          xww
                        xwy:f64[200,7,1,3] = slice[
                          limit_indices=(200, 7, 1, 3)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] xwx
                        xwz:f64[200,7,4,3] = slice[
                          limit_indices=(200, 7, 5, 3)
                          start_indices=(0, 0, 1, 0)
                          strides=None
                        ] xwx
                        xxa:f64[200,7,4,3] = slice[
                          limit_indices=(200, 7, 9, 3)
                          start_indices=(0, 0, 5, 0)
                          strides=None
                        ] xwx
                        xxb:f64[200,7,4,3] = slice[
                          limit_indices=(200, 7, 13, 3)
                          start_indices=(0, 0, 9, 0)
                          strides=None
                        ] xwx
                        xxc:f64[200,7,4,3] = gather[
                          dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 3), collapsed_slice_dims=(2,), start_index_map=(2,))
                          fill_value=0
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          slice_sizes=(200, 7, 1, 3)
                          unique_indices=False
                        ] xxb sqn
                        xxd:f64[200,7,4,3] = add_any xxa xxb
                        xxe:f64[200,7,18,3] = pjit[name=_take jaxpr=_take29] sqo
                          xxc
                        xxf:f64[200,7,4,3] = gather[
                          dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 3), collapsed_slice_dims=(2,), start_index_map=(2,))
                          fill_value=0
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          slice_sizes=(200, 7, 1, 3)
                          unique_indices=False
                        ] xxd sql
                        xxg:f64[200,7,4,3] = add_any xwz xxd
                        xxh:f64[200,7,18,3] = pjit[name=_take jaxpr=_take29] sqm
                          xxf
                        xxi:f64[200,7,18,3] = add_any xxe xxh
                        xxj:f64[200,7,4,3] = gather[
                          dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 3), collapsed_slice_dims=(2,), start_index_map=(2,))
                          fill_value=0
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          slice_sizes=(200, 7, 1, 3)
                          unique_indices=False
                        ] xxg sqj
                        xxk:f64[200,7,18,3] = pjit[name=_take jaxpr=_take29] sqk
                          xxj
                        xxl:f64[200,7,18,3] = add_any xxi xxk
                        xxm:f64[200,7,1,3] = pjit[name=_take jaxpr=_take26] sqi xxg
                        xxn:f64[200,7,1,3] = add_any xwy xxm
                        xxo:f64[200,7,6,3] = gather[
                          dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 3), collapsed_slice_dims=(2,), start_index_map=(2,))
                          fill_value=0
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          slice_sizes=(200, 7, 1, 3)
                          unique_indices=False
                        ] xxn sqh
                        xxp:f64[200,7,18,3] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 12, 0), (0, 0, 0))
                        ] xxo 0.0
                        xxq:f64[200,7,18,3] = add_any xxl xxp
                        xxr:f64[200,7,1,6,3] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 1, 6, 3)
                        ] xvj
                        xxs:f64[200,7,1,3,3] = broadcast_in_dim[
                          broadcast_dimensions=()
                          shape=(200, 7, 1, 3, 3)
                        ] 0.0
                        xxt:f64[200,7,1,6,3] = scatter[
                          dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2, 3, 4), inserted_window_dims=(), scatter_dims_to_operand_dims=(3,))
                          indices_are_sorted=True
                          mode=GatherScatterMode.FILL_OR_DROP
                          unique_indices=True
                          update_consts=()
                          update_jaxpr=None
                        ] xxr sqg xxs
                        xxu:f64[200,7,1,3] xxv:f64[200,7,1,6,3] = pjit[
                          name=cross
                          jaxpr=cross24
                        ] sqa tjq tjr sqb sqc tjs tjt sqd tju tjv sqe sqf tjw tjx
                          tjy xxt
                        xxw:f64[200,7,1,6,3] = add_any xtb xxv
                        xxx:f64[200,7,6,3] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 6, 3)
                        ] xxw
                        xxy:f64[200,7,18,3] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 12, 0), (0, 0, 0))
                        ] xxx 0.0
                        xxz:f64[200,7,18,3] = add_any xvp xxy
                        xya:f64[200,7,1,3,3] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2, 4)
                          shape=(200, 7, 1, 3, 3)
                        ] xxu
                        xyb:f64[200,7,1,6,3] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 3, 0), (0, 0, 0))
                        ] xya 0.0
                        xyc:f64[200,7,6,3] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 6, 3)
                        ] xyb
                        xyd:f64[200,7,18,3] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 12, 0), (0, 0, 0))
                        ] xyc 0.0
                        xye:f64[200,7,18,3] = add_any xwn xyd
                        xyf:f64[200,7,18,3] = mul tjd xye
                        xyg:f64[200,7,18] = reduce_sum[axes=(3,)] xyf
                        xyh:f64[200,7,18,1] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 18, 1)
                        ] xyg
                        xyi:f64[200,7,18] = reduce_sum[axes=(3,)] xyh
                        xyj:f64[200,7,18] = add_any xvf xyi
                        xyk:f64[200,7,18,3] = mul xye tjp
                        xyl:f64[200,7,18,3] = add_any xws xyk
                        xym:f64[200,7,1,3] xyn:f64[200,7,1,6,3] = pjit[
                          name=cross
                          jaxpr=cross24
                        ] spu tjg tjh spv spw tji tjj spx tjk tjl spy spz tjm tjn
                          tjo xxt
                        xyo:f64[200,7,1,3] = add_any xta xym
                        xyp:f64[200,7,6,3] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 6, 3)
                        ] xyn
                        xyq:f64[200,7,18,3] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 12, 0), (0, 0, 0))
                        ] xyp 0.0
                        xyr:f64[200,7,18,3] = add_any xyl xyq
                        xys:f64[200,7,1,3,3] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2, 4)
                          shape=(200, 7, 1, 3, 3)
                        ] xyo
                        xyt:f64[200,7,1,6,3] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 3, 0), (0, 0, 0))
                        ] xys 0.0
                        xyu:f64[200,7,6,3] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 6, 3)
                        ] xyt
                        xyv:f64[200,7,18,3] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 12, 0), (0, 0, 0))
                        ] xyu 0.0
                        xyw:f64[200,7,18,3] = add_any xxq xyv
                        xyx:f64[200,7,18,3] = mul tjf xyw
                        xyy:f64[200,7,18] = reduce_sum[axes=(3,)] xyx
                        xyz:f64[200,7,18,1] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 18, 1)
                        ] xyy
                        xza:f64[200,7,18] = reduce_sum[axes=(3,)] xyz
                        xzb:f64[200,7,18] = add_any xyj xza
                        xzc:f64[200,7,18,3] = mul xyw tje
                        xzd:f64[200,7,18,3] = add_any xxz xzc
                        xze:f64[200,7,18,3] = mul spk xzd
                        xzf:f64[200,7,18,3] = pjit[name=cross jaxpr=cross25] spl
                          spm spn spo spp spq spr sps spt xze
                        xzg:f64[200,7,18,3] = mul spj xzd
                        xzh:f64[200,7,18,3] = add_any xzf xzg
                        xzi:f64[200,7,18,3] = mul 2.0 xzd
                        xzj:f64[200,7,18,3] = mul xzi spi
                        xzk:f64[200,7,18] = reduce_sum[axes=(3,)] xzj
                        xzl:f64[200,7,18,1] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 18, 1)
                        ] xzk
                        xzm:f64[200,7,18] = reduce_sum[axes=(3,)] xzl
                        xzn:f64[18,200,7] = transpose[permutation=(2, 0, 1)] xzm
                        xzo:f64[18,200,7,3] = dot_general[
                          dimension_numbers=(([], []), ([0], [0]))
                          preferred_element_type=float64
                        ] xzn sph
                        xzp:f64[200,7,18,3] = transpose[
                          permutation=(1, 2, 0, 3)
                        ] xzo
                        xzq:f64[200,7,18,3] = add_any xzh xzp
                        xzr:f64[200,7,18,3] = dot_general[
                          dimension_numbers=(([], []), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] xer tjc
                        xzs:f64[200,7,18,3] = add_any xyr xzr
                        xzt:f64[200,7,18,3] = mul sov xzs
                        xzu:f64[200,7,18,3] = pjit[name=cross jaxpr=cross25] sow
                          sox soy soz spa spb spc spd spe xzt
                        xzv:f64[200,7,18,3] = mul sou xzs
                        xzw:f64[200,7,18,3] = add_any xzu xzv
                        xzx:f64[200,7,18,3] = mul 2.0 xzs
                        xzy:f64[200,7,18,3] = mul xzx sot
                        xzz:f64[200,7,18] = reduce_sum[axes=(3,)] xzy
                        yaa:f64[200,7,18,1] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 18, 1)
                        ] xzz
                        yab:f64[200,7,18] = reduce_sum[axes=(3,)] yaa
                        yac:f64[18,200,7] = transpose[permutation=(2, 0, 1)] yab
                        yad:f64[18,200,7,3] = dot_general[
                          dimension_numbers=(([], []), ([0], [0]))
                          preferred_element_type=float64
                        ] yac sil
                        yae:f64[200,7,18,3] = transpose[
                          permutation=(1, 2, 0, 3)
                        ] yad
                        yaf:f64[200,7,18,3] = add_any xzw yae
                        yag:f64[200,7,18,3] = neg yaf
                        yah:f64[200,7,18,3] yai:f64[200,7,18,3] = pjit[
                          name=cross
                          jaxpr=cross20
                        ] son tiw tix soo sop tiy tiz soq tja sor sos tjb yag
                        yaj:f64[200,7,18,3] = add_any xzq yai
                        yak:f64[200,7,18,3] = mul tiv yaj
                        yal:f64[200,7,18,3] = pjit[
                          name=cross
                          jaxpr={ lambda ; yam:i32[1] yan:f64[1,1,18] yao:i32[1]
                              yap:f64[1,1,18] yaq:f64[1,1,18] yar:i32[1] yas:f64[1,1,18]
                              yat:f64[1,1,18] yau:f64[1,1,18] yav:f64[200,7,18,3]. let
                              yaw:f64[200,7,18,1] = slice[
                                limit_indices=(200, 7, 18, 1)
                                start_indices=(0, 0, 0, 0)
                                strides=None
                              ] yav
                              yax:f64[200,7,18,1] = slice[
                                limit_indices=(200, 7, 18, 2)
                                start_indices=(0, 0, 0, 1)
                                strides=None
                              ] yav
                              yay:f64[200,7,18,1] = slice[
                                limit_indices=(200, 7, 18, 3)
                                start_indices=(0, 0, 0, 2)
                                strides=None
                              ] yav
                              yaz:f64[200,7,18] = reduce_sum[axes=(3,)] yay
                              yba:f64[200,7,18] = neg yaz
                              ybb:f64[200,7,18] = mul yba yau
                              ybc:f64[200,7,18] = mul yaz yat
                              ybd:f64[200,7,18] = reduce_sum[axes=(3,)] yax
                              ybe:f64[200,7,18] = neg ybd
                              ybf:f64[200,7,18] = mul ybe yas
                              ybg:f64[200,7,18] = add_any ybc ybf
                              ybh:f64[200,7,18,3] = broadcast_in_dim[
                                broadcast_dimensions=()
                                shape=(200, 7, 18, 3)
                              ] 0.0
                              ybi:f64[200,7,18,3] = scatter-add[
                                dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(3,), scatter_dims_to_operand_dims=(3,))
                                indices_are_sorted=True
                                mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                unique_indices=True
                                update_consts=()
                                update_jaxpr=jaxpr
                              ] ybh yar ybg
                              ybj:f64[200,7,18] = mul ybd yaq
                              ybk:f64[200,7,18] = reduce_sum[axes=(3,)] yaw
                              ybl:f64[200,7,18] = neg ybk
                              ybm:f64[200,7,18] = mul ybl yap
                              ybn:f64[200,7,18] = add_any ybj ybm
                              ybo:f64[200,7,18,3] = broadcast_in_dim[
                                broadcast_dimensions=()
                                shape=(200, 7, 18, 3)
                              ] 0.0
                              ybp:f64[200,7,18,3] = scatter-add[
                                dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(3,), scatter_dims_to_operand_dims=(3,))
                                indices_are_sorted=True
                                mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                unique_indices=True
                                update_consts=()
                                update_jaxpr=jaxpr
                              ] ybo yao ybn
                              ybq:f64[200,7,18,3] = add_any ybi ybp
                              ybr:f64[200,7,18] = mul ybk yan
                              ybs:f64[200,7,18] = add_any ybb ybr
                              ybt:f64[200,7,18,3] = broadcast_in_dim[
                                broadcast_dimensions=()
                                shape=(200, 7, 18, 3)
                              ] 0.0
                              ybu:f64[200,7,18,3] = scatter-add[
                                dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(3,), scatter_dims_to_operand_dims=(3,))
                                indices_are_sorted=True
                                mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                unique_indices=True
                                update_consts=()
                                update_jaxpr=jaxpr
                              ] ybt yam ybs
                              ybv:f64[200,7,18,3] = add_any ybq ybu
                            in (ybv,) }
                        ] soe sof sog soh soi soj sok sol som yak
                        ybw:f64[200,7,18,3] = mul yaj tiu
                        ybx:f64[200,7,18] = reduce_sum[axes=(3,)] ybw
                        yby:f64[200,7,18,1] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 18, 1)
                        ] ybx
                        ybz:f64[200,7,18] = reduce_sum[axes=(3,)] yby
                        yca:f64[200,7,18] = mul 2.0 ybz
                        ycb:f64[200,7,18,3] = mul yaj sod
                        ycc:f64[200,7,18] = reduce_sum[axes=(3,)] ycb
                        ycd:f64[200,7,18,1] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 18, 1)
                        ] ycc
                        yce:f64[200,7,18] = reduce_sum[axes=(3,)] ycd
                        ycf:f64[200,7,18] = neg yce
                        ycg:f64[200,7,18,3] = dot_general[
                          dimension_numbers=(([], []), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] ycf tir
                        ych:f64[200,7,18,3] = add_any yal ycg
                        yci:f64[200,7,18,3] = dot_general[
                          dimension_numbers=(([], []), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] ycf tir
                        ycj:f64[200,7,18,3] = add_any ych yci
                        yck:f64[200,7,18] = mul tit yce
                        ycl:f64[200,7,18] = add_any yca yck
                        ycm:f64[200,7,18] = mul yce tit
                        ycn:f64[200,7,18] = add_any ycl ycm
                        yco:f64[200,7,18,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 18, 1)
                        ] ycn
                        ycp:f64[200,7,18,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 3, 0))
                        ] yco 0.0
                        ycq:f64[200,7,18,3] = mul 2.0 yaj
                        ycr:f64[200,7,18,3] = mul tis ycq
                        ycs:f64[200,7,18,3] = add_any ycj ycr
                        yct:f64[200,7,18,3] = mul ycq tir
                        ycu:f64[200,7,18] = reduce_sum[axes=(3,)] yct
                        ycv:f64[200,7,18,1] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 18, 1)
                        ] ycu
                        ycw:f64[200,7,18] = reduce_sum[axes=(3,)] ycv
                        ycx:f64[18,200,7] = transpose[permutation=(2, 0, 1)] ycw
                        ycy:f64[18,200,7,3] = dot_general[
                          dimension_numbers=(([], []), ([0], [0]))
                          preferred_element_type=float64
                        ] ycx soc
                        ycz:f64[200,7,18,3] = transpose[
                          permutation=(1, 2, 0, 3)
                        ] ycy
                        yda:f64[200,7,18,3] = add_any ycs ycz
                        ydb:f64[200,7,18,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (1, 0, 0))
                        ] yda 0.0
                        ydc:f64[200,7,18,4] = add_any ycp ydb
                        ydd:f64[200,7,13,4] = pjit[
                          name=_take
                          jaxpr={ lambda ; yde:i64[18,1] ydf:f64[200,7,18,4]. let
                              ydg:f64[200,7,13,4] = broadcast_in_dim[
                                broadcast_dimensions=()
                                shape=(200, 7, 13, 4)
                              ] 0.0
                              ydh:f64[200,7,13,4] = scatter-add[
                                dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
                                indices_are_sorted=False
                                mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                unique_indices=False
                                update_consts=()
                                update_jaxpr=jaxpr
                              ] ydg yde ydf
                            in (ydh,) }
                        ] sob ydc
                        ydi:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] ydd
                        ydj:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] ydd
                        ydk:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] ydd
                        ydl:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] ydd
                        ydm:f64[200,7,13] = reduce_sum[axes=(3,)] ydl
                        ydn:f64[200,7,13] = mul ydm soa
                        ydo:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] ydn
                        ydp:f64[200,7,13,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (3, 0, 0))
                        ] ydo 0.0
                        ydq:f64[200,7,13] = neg ydm
                        ydr:f64[200,7,13] = mul ydq snz
                        yds:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] ydr
                        ydt:f64[200,7,13,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (2, 1, 0))
                        ] yds 0.0
                        ydu:f64[200,7,13,4] = add_any ydp ydt
                        ydv:f64[200,7,13] = mul ydm sny
                        ydw:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] ydv
                        ydx:f64[200,7,13,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (1, 2, 0))
                        ] ydw 0.0
                        ydy:f64[200,7,13,4] = add_any ydu ydx
                        ydz:f64[200,7,13] = mul ydm snx
                        yea:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] ydz
                        yeb:f64[200,7,13,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 3, 0))
                        ] yea 0.0
                        yec:f64[200,7,13,4] = add_any ydy yeb
                        yed:f64[200,7,13] = reduce_sum[axes=(3,)] ydk
                        yee:f64[200,7,13] = mul yed snw
                        yef:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] yee
                        yeg:f64[200,7,13,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (3, 0, 0))
                        ] yef 0.0
                        yeh:f64[200,7,13,4] = add_any yec yeg
                        yei:f64[200,7,13] = mul yed snv
                        yej:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] yei
                        yek:f64[200,7,13,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (2, 1, 0))
                        ] yej 0.0
                        yel:f64[200,7,13,4] = add_any yeh yek
                        yem:f64[200,7,13] = neg yed
                        yen:f64[200,7,13] = mul yem snu
                        yeo:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] yen
                        yep:f64[200,7,13,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (1, 2, 0))
                        ] yeo 0.0
                        yeq:f64[200,7,13,4] = add_any yel yep
                        yer:f64[200,7,13] = mul yed snt
                        yes:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] yer
                        yet:f64[200,7,13,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 3, 0))
                        ] yes 0.0
                        yeu:f64[200,7,13,4] = add_any yeq yet
                        yev:f64[200,7,13] = reduce_sum[axes=(3,)] ydj
                        yew:f64[200,7,13] = neg yev
                        yex:f64[200,7,13] = mul yew sns
                        yey:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] yex
                        yez:f64[200,7,13,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (3, 0, 0))
                        ] yey 0.0
                        yfa:f64[200,7,13,4] = add_any yeu yez
                        yfb:f64[200,7,13] = mul yev snr
                        yfc:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] yfb
                        yfd:f64[200,7,13,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (2, 1, 0))
                        ] yfc 0.0
                        yfe:f64[200,7,13,4] = add_any yfa yfd
                        yff:f64[200,7,13] = mul yev snq
                        yfg:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] yff
                        yfh:f64[200,7,13,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (1, 2, 0))
                        ] yfg 0.0
                        yfi:f64[200,7,13,4] = add_any yfe yfh
                        yfj:f64[200,7,13] = mul yev snp
                        yfk:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] yfj
                        yfl:f64[200,7,13,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 3, 0))
                        ] yfk 0.0
                        yfm:f64[200,7,13,4] = add_any yfi yfl
                        yfn:f64[200,7,13] = reduce_sum[axes=(3,)] ydi
                        yfo:f64[200,7,13] = neg yfn
                        yfp:f64[200,7,13] = mul yfo sno
                        yfq:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] yfp
                        yfr:f64[200,7,13,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (3, 0, 0))
                        ] yfq 0.0
                        yfs:f64[200,7,13,4] = add_any yfm yfr
                        yft:f64[200,7,13] = neg yfn
                        yfu:f64[200,7,13] = mul yft snn
                        yfv:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] yfu
                        yfw:f64[200,7,13,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (2, 1, 0))
                        ] yfv 0.0
                        yfx:f64[200,7,13,4] = add_any yfs yfw
                        yfy:f64[200,7,13] = neg yfn
                        yfz:f64[200,7,13] = mul yfy snm
                        yga:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] yfz
                        ygb:f64[200,7,13,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (1, 2, 0))
                        ] yga 0.0
                        ygc:f64[200,7,13,4] = add_any yfx ygb
                        ygd:f64[200,7,13] = mul yfn snl
                        yge:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] ygd
                        ygf:f64[200,7,13,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 3, 0))
                        ] yge 0.0
                        ygg:f64[200,7,13,4] = add_any ygc ygf
                        ygh:f64[200,7,13,3] = pjit[name=_take jaxpr=_take28] snk
                          yah
                        ygi:f64[200,7,13,3] = neg ygh
                        ygj:f64[200,7,13,3] = add_any xtf ygh
                        ygk:f64[200,7,13,3] = mul tiq ygi
                        ygl:f64[200,7,13,3] = pjit[name=cross jaxpr=cross26] snb
                          snc snd sne snf sng snh sni snj ygk
                        ygm:f64[200,7,13,3] = mul ygi tip
                        ygn:f64[200,7,13] = reduce_sum[axes=(3,)] ygm
                        ygo:f64[200,7,13,1] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 13, 1)
                        ] ygn
                        ygp:f64[200,7,13] = reduce_sum[axes=(3,)] ygo
                        ygq:f64[200,7,13] = mul 2.0 ygp
                        ygr:f64[200,7,13,3] = mul ygi sna
                        ygs:f64[200,7,13] = reduce_sum[axes=(3,)] ygr
                        ygt:f64[200,7,13,1] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 13, 1)
                        ] ygs
                        ygu:f64[200,7,13] = reduce_sum[axes=(3,)] ygt
                        ygv:f64[200,7,13] = neg ygu
                        ygw:f64[200,7,13,3] = dot_general[
                          dimension_numbers=(([], []), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] ygv tim
                        ygx:f64[200,7,13,3] = add_any ygl ygw
                        ygy:f64[200,7,13,3] = dot_general[
                          dimension_numbers=(([], []), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] ygv tim
                        ygz:f64[200,7,13,3] = add_any ygx ygy
                        yha:f64[200,7,13] = mul tio ygu
                        yhb:f64[200,7,13] = add_any ygq yha
                        yhc:f64[200,7,13] = mul ygu tio
                        yhd:f64[200,7,13] = add_any yhb yhc
                        yhe:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] yhd
                        yhf:f64[200,7,13,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 3, 0))
                        ] yhe 0.0
                        yhg:f64[200,7,13,4] = add_any ygg yhf
                        yhh:f64[200,7,13,3] = mul 2.0 ygi
                        yhi:f64[200,7,13,3] = mul tin yhh
                        yhj:f64[200,7,13,3] = add_any ygz yhi
                        yhk:f64[200,7,13,3] = mul yhh tim
                        yhl:f64[200,7,13] = reduce_sum[axes=(3,)] yhk
                        yhm:f64[200,7,13,1] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 13, 1)
                        ] yhl
                        yhn:f64[200,7,13] = reduce_sum[axes=(3,)] yhm
                        yho:f64[13,200,7] = transpose[permutation=(2, 0, 1)] yhn
                        yhp:f64[13,200,7,3] = dot_general[
                          dimension_numbers=(([], []), ([0], [0]))
                          preferred_element_type=float64
                        ] yho siv
                        yhq:f64[200,7,13,3] = transpose[
                          permutation=(1, 2, 0, 3)
                        ] yhp
                        yhr:f64[200,7,13,3] = add_any yhj yhq
                        yhs:f64[200,7,13,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (1, 0, 0))
                        ] yhr 0.0
                        yht:f64[200,7,13,4] = add_any yhg yhs
                        yhu:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] yht
                        yhv:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] yht
                        yhw:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] yht
                        yhx:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] yht
                        yhy:f64[200,7,13] = reduce_sum[axes=(3,)] yhx
                        yhz:f64[200,7,13] = mul yhy smz
                        yia:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] yhz
                        yib:f64[200,7,13,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (3, 0, 0))
                        ] yia 0.0
                        yic:f64[200,7,13] = neg yhy
                        yid:f64[200,7,13] = mul yic smy
                        yie:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] yid
                        yif:f64[200,7,13,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (2, 1, 0))
                        ] yie 0.0
                        yig:f64[200,7,13,4] = add_any yib yif
                        yih:f64[200,7,13] = mul yhy smx
                        yii:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] yih
                        yij:f64[200,7,13,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (1, 2, 0))
                        ] yii 0.0
                        yik:f64[200,7,13,4] = add_any yig yij
                        yil:f64[200,7,13] = mul yhy smw
                        yim:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] yil
                        yin:f64[200,7,13,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 3, 0))
                        ] yim 0.0
                        yio:f64[200,7,13,4] = add_any yik yin
                        yip:f64[200,7,13] = reduce_sum[axes=(3,)] yhw
                        yiq:f64[200,7,13] = mul yip smv
                        yir:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] yiq
                        yis:f64[200,7,13,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (3, 0, 0))
                        ] yir 0.0
                        yit:f64[200,7,13,4] = add_any yio yis
                        yiu:f64[200,7,13] = mul yip smu
                        yiv:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] yiu
                        yiw:f64[200,7,13,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (2, 1, 0))
                        ] yiv 0.0
                        yix:f64[200,7,13,4] = add_any yit yiw
                        yiy:f64[200,7,13] = neg yip
                        yiz:f64[200,7,13] = mul yiy smt
                        yja:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] yiz
                        yjb:f64[200,7,13,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (1, 2, 0))
                        ] yja 0.0
                        yjc:f64[200,7,13,4] = add_any yix yjb
                        yjd:f64[200,7,13] = mul yip sms
                        yje:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] yjd
                        yjf:f64[200,7,13,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 3, 0))
                        ] yje 0.0
                        yjg:f64[200,7,13,4] = add_any yjc yjf
                        yjh:f64[200,7,13] = reduce_sum[axes=(3,)] yhv
                        yji:f64[200,7,13] = neg yjh
                        yjj:f64[200,7,13] = mul yji smr
                        yjk:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] yjj
                        yjl:f64[200,7,13,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (3, 0, 0))
                        ] yjk 0.0
                        yjm:f64[200,7,13,4] = add_any yjg yjl
                        yjn:f64[200,7,13] = mul yjh smq
                        yjo:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] yjn
                        yjp:f64[200,7,13,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (2, 1, 0))
                        ] yjo 0.0
                        yjq:f64[200,7,13,4] = add_any yjm yjp
                        yjr:f64[200,7,13] = mul yjh smp
                        yjs:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] yjr
                        yjt:f64[200,7,13,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (1, 2, 0))
                        ] yjs 0.0
                        yju:f64[200,7,13,4] = add_any yjq yjt
                        yjv:f64[200,7,13] = mul yjh smo
                        yjw:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] yjv
                        yjx:f64[200,7,13,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 3, 0))
                        ] yjw 0.0
                        yjy:f64[200,7,13,4] = add_any yju yjx
                        yjz:f64[200,7,13] = reduce_sum[axes=(3,)] yhu
                        yka:f64[200,7,13] = neg yjz
                        ykb:f64[200,7,13] = mul yka smn
                        ykc:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] ykb
                        ykd:f64[200,7,13,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (3, 0, 0))
                        ] ykc 0.0
                        yke:f64[200,7,13,4] = add_any yjy ykd
                        ykf:f64[200,7,13] = neg yjz
                        ykg:f64[200,7,13] = mul ykf smm
                        ykh:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] ykg
                        yki:f64[200,7,13,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (2, 1, 0))
                        ] ykh 0.0
                        ykj:f64[200,7,13,4] = add_any yke yki
                        ykk:f64[200,7,13] = neg yjz
                        ykl:f64[200,7,13] = mul ykk sml
                        ykm:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] ykl
                        ykn:f64[200,7,13,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (1, 2, 0))
                        ] ykm 0.0
                        yko:f64[200,7,13,4] = add_any ykj ykn
                        ykp:f64[200,7,13] = mul yjz smk
                        ykq:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] ykp
                        ykr:f64[200,7,13,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 3, 0))
                        ] ykq 0.0
                        yks:f64[200,7,13,4] = add_any yko ykr
                        ykt:f64[200,7,13,3] = mul til ygi
                        yku:f64[200,7,13,3] = pjit[name=cross jaxpr=cross26] smb
                          smc smd sme smf smg smh smi smj ykt
                        ykv:f64[200,7,13,3] = mul ygi tik
                        ykw:f64[200,7,13] = reduce_sum[axes=(3,)] ykv
                        ykx:f64[200,7,13,1] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 13, 1)
                        ] ykw
                        yky:f64[200,7,13] = reduce_sum[axes=(3,)] ykx
                        ykz:f64[200,7,13] = mul 2.0 yky
                        yla:f64[200,7,13,3] = mul ygi sma
                        ylb:f64[200,7,13] = reduce_sum[axes=(3,)] yla
                        ylc:f64[200,7,13,1] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 13, 1)
                        ] ylb
                        yld:f64[200,7,13] = reduce_sum[axes=(3,)] ylc
                        yle:f64[200,7,13] = neg yld
                        ylf:f64[200,7,13,3] = dot_general[
                          dimension_numbers=(([], []), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] yle tih
                        ylg:f64[200,7,13,3] = add_any yku ylf
                        ylh:f64[200,7,13,3] = dot_general[
                          dimension_numbers=(([], []), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] yle tih
                        yli:f64[200,7,13,3] = add_any ylg ylh
                        ylj:f64[200,7,13] = mul tij yld
                        ylk:f64[200,7,13] = add_any ykz ylj
                        yll:f64[200,7,13] = mul yld tij
                        ylm:f64[200,7,13] = add_any ylk yll
                        yln:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] ylm
                        ylo:f64[200,7,13,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 3, 0))
                        ] yln 0.0
                        ylp:f64[200,7,13,4] = add_any yks ylo
                        ylq:f64[200,7,13,3] = mul 2.0 ygi
                        ylr:f64[200,7,13,3] = mul tii ylq
                        yls:f64[200,7,13,3] = add_any yli ylr
                        ylt:f64[200,7,13,3] = mul ylq tih
                        ylu:f64[200,7,13] = reduce_sum[axes=(3,)] ylt
                        ylv:f64[200,7,13,1] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 13, 1)
                        ] ylu
                        ylw:f64[200,7,13] = reduce_sum[axes=(3,)] ylv
                        ylx:f64[13,200,7] = transpose[permutation=(2, 0, 1)] ylw
                        yly:f64[13,200,7,3] = dot_general[
                          dimension_numbers=(([], []), ([0], [0]))
                          preferred_element_type=float64
                        ] ylx slz
                        ylz:f64[200,7,13,3] = transpose[
                          permutation=(1, 2, 0, 3)
                        ] yly
                        yma:f64[200,7,13,3] = add_any yls ylz
                        ymb:f64[200,7,13,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (1, 0, 0))
                        ] yma 0.0
                        ymc:f64[200,7,13,4] = add_any ylp ymb
                        ymd:f64[200,7,14,4] = pjit[
                          name=_take
                          jaxpr={ lambda ; yme:i32[13,1] ymf:f64[200,7,13,4]. let
                              ymg:f64[200,7,14,4] = broadcast_in_dim[
                                broadcast_dimensions=()
                                shape=(200, 7, 14, 4)
                              ] 0.0
                              ymh:f64[200,7,14,4] = scatter-add[
                                dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
                                indices_are_sorted=False
                                mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                unique_indices=False
                                update_consts=()
                                update_jaxpr=jaxpr
                              ] ymg yme ymf
                            in (ymh,) }
                        ] sly ymc
                        ymi:f64[200,7,13,4] = slice[
                          limit_indices=(200, 7, 13, 4)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] ymd
                        ymj:f64[200,7,13,4] = add_any xpr ymi
                        ymk:f64[200,7,14,3] = pjit[name=_take jaxpr=_take31] slx
                          ygi
                        yml:f64[200,7,13,3] = slice[
                          limit_indices=(200, 7, 13, 3)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] ymk
                        ymm:f64[200,7,13,3] = add_any ujz yml
                        ymn:f64[200,7,13,3] = div ygj slw
                        ymo:f64[200,7,13,3] = broadcast_in_dim[
                          broadcast_dimensions=()
                          shape=(200, 7, 13, 3)
                        ] 0.0
                        ymp:f64[200,7,13,3] = scatter-add[
                          dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
                          indices_are_sorted=False
                          mode=GatherScatterMode.PROMISE_IN_BOUNDS
                          unique_indices=False
                          update_consts=()
                          update_jaxpr=jaxpr
                        ] ymo slv ymn
                        ymq:f64[200,7,13,3] = gather[
                          dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 3), collapsed_slice_dims=(2,), start_index_map=(2,))
                          fill_value=0
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          slice_sizes=(200, 7, 1, 3)
                          unique_indices=False
                        ] ymp sim
                        ymr:f64[200,7,13,3] = mul sin ymq
                        yms:f64[200,7,13,3] = add_any xtd ymr
                        ymt:f64[200,7,13,3] = add_any ymm yms
                        ymu:f64[200,7,13,3] = mul tig yms
                        ymv:f64[200,7,13,3] = pjit[name=cross jaxpr=cross26] slm
                          sln slo slp slq slr sls slt slu ymu
                        ymw:f64[200,7,13,3] = mul yms tif
                        ymx:f64[200,7,13] = reduce_sum[axes=(3,)] ymw
                        ymy:f64[200,7,13,1] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 13, 1)
                        ] ymx
                        ymz:f64[200,7,13] = reduce_sum[axes=(3,)] ymy
                        yna:f64[200,7,13] = mul 2.0 ymz
                        ynb:f64[200,7,13,3] = mul yms sll
                        ync:f64[200,7,13] = reduce_sum[axes=(3,)] ynb
                        ynd:f64[200,7,13,1] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 13, 1)
                        ] ync
                        yne:f64[200,7,13] = reduce_sum[axes=(3,)] ynd
                        ynf:f64[200,7,13] = neg yne
                        yng:f64[200,7,13,3] = dot_general[
                          dimension_numbers=(([], []), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] ynf tic
                        ynh:f64[200,7,13,3] = add_any ymv yng
                        yni:f64[200,7,13,3] = dot_general[
                          dimension_numbers=(([], []), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] ynf tic
                        ynj:f64[200,7,13,3] = add_any ynh yni
                        ynk:f64[200,7,13] = mul tie yne
                        ynl:f64[200,7,13] = add_any yna ynk
                        ynm:f64[200,7,13] = mul yne tie
                        ynn:f64[200,7,13] = add_any ynl ynm
                        yno:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] ynn
                        ynp:f64[200,7,13,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 3, 0))
                        ] yno 0.0
                        ynq:f64[200,7,13,4] = add_any ymj ynp
                        ynr:f64[200,7,13,3] = mul 2.0 yms
                        yns:f64[200,7,13,3] = mul tid ynr
                        ynt:f64[200,7,13,3] = add_any ynj yns
                        ynu:f64[200,7,13,3] = mul ynr tic
                        ynv:f64[200,7,13] = reduce_sum[axes=(3,)] ynu
                        ynw:f64[200,7,13,1] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 13, 1)
                        ] ynv
                        ynx:f64[200,7,13] = reduce_sum[axes=(3,)] ynw
                        yny:f64[13,200,7] = transpose[permutation=(2, 0, 1)] ynx
                        ynz:f64[13,200,7,3] = dot_general[
                          dimension_numbers=(([], []), ([0], [0]))
                          preferred_element_type=float64
                        ] yny slk
                        yoa:f64[200,7,13,3] = transpose[
                          permutation=(1, 2, 0, 3)
                        ] ynz
                        yob:f64[200,7,13,3] = add_any ynt yoa
                        yoc:f64[200,7,13,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (1, 0, 0))
                        ] yob 0.0
                        yod:f64[200,7,13,4] = add_any ynq yoc
                        yoe:f64[200,7,13,4] = mul yod tib
                        yof:f64[200,7,13,4] = mul yoe tia
                        yog:f64[200,7,13] = reduce_sum[axes=(3,)] yof
                        yoh:f64[200,7,13,1] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 13, 1)
                        ] yog
                        yoi:f64[200,7,13,1] = neg yoh
                        yoj:f64[200,7,13] = reduce_sum[axes=(3,)] yoi
                        yok:f64[200,7,13] = pjit[
                          name=_where
                          jaxpr={ lambda ; yol:bool[200,7,13] yom:f64[200,7,13]. let
                              yon:f64[200,7,13] = broadcast_in_dim[
                                broadcast_dimensions=()
                                shape=(200, 7, 13)
                              ] 0.0
                              yoo:f64[200,7,13] = select_n yol yom yon
                            in (yoo,) }
                        ] thz yoj
                        yop:f64[200,7,13,4] = pjit[
                          name=norm
                          jaxpr={ lambda ; yoq:f64[200,7,13,4] yor:f64[200,7,13]
                              yos:f64[200,7,13]. let
                              yot:f64[200,7,13] = mul yos yor
                              you:f64[200,7,13,4] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1, 2)
                                shape=(200, 7, 13, 4)
                              ] yot
                              yov:f64[200,7,13,4] = mul yoq you
                              yow:f64[200,7,13,4] = mul you yoq
                              yox:f64[200,7,13,4] = add_any yov yow
                            in (yox,) }
                        ] thx thy yok
                        yoy:f64[200,7,13,4] = pjit[
                          name=_where
                          jaxpr={ lambda ; yoz:bool[200,7,13,4] ypa:f64[200,7,13,4]. let
                              ypb:f64[200,7,13,4] = broadcast_in_dim[
                                broadcast_dimensions=()
                                shape=(200, 7, 13, 4)
                              ] 0.0
                              ypc:f64[200,7,13,4] = select_n yoz ypa ypb
                            in (ypc,) }
                        ] thw yop
                        ypd:f64[200,7,13,4] = div yod thv
                        ype:f64[200,7,13,4] = add_any yoy ypd
                        ypf:f64[200,7,13,4] = pjit[
                          name=_take
                          jaxpr={ lambda ; ypg:i64[13,1] yph:f64[200,7,13,4]. let
                              ypi:f64[200,7,13,4] = broadcast_in_dim[
                                broadcast_dimensions=()
                                shape=(200, 7, 13, 4)
                              ] 0.0
                              ypj:f64[200,7,13,4] = scatter-add[
                                dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
                                indices_are_sorted=False
                                mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                unique_indices=False
                                update_consts=()
                                update_jaxpr=jaxpr
                              ] ypi ypg yph
                            in (ypj,) }
                        ] slj ype
                        ypk:f64[200,7,1,4] = slice[
                          limit_indices=(200, 7, 1, 4)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] ypf
                        ypl:f64[200,7,4,4] = slice[
                          limit_indices=(200, 7, 5, 4)
                          start_indices=(0, 0, 1, 0)
                          strides=None
                        ] ypf
                        ypm:f64[200,7,4,4] = slice[
                          limit_indices=(200, 7, 9, 4)
                          start_indices=(0, 0, 5, 0)
                          strides=None
                        ] ypf
                        ypn:f64[200,7,4,4] = slice[
                          limit_indices=(200, 7, 13, 4)
                          start_indices=(0, 0, 9, 0)
                          strides=None
                        ] ypf
                        ypo:f64[200,7,1,4] = add_any xeq ypk
                        ypp:f64[200,7,4,4] = add_any xaa ypl
                        ypq:f64[200,7,4,4] = add_any wyk ypm
                        ypr:f64[200,7,4,4] = add_any wwu ypn
                        yps:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] ypr
                        ypt:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] ypr
                        ypu:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] ypr
                        ypv:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] ypr
                        ypw:f64[200,7,4] = reduce_sum[axes=(3,)] ypv
                        ypx:f64[200,7,4] = mul thu ypw
                        ypy:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] ypx
                        ypz:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 3, 0))
                        ] ypy 0.0
                        yqa:f64[200,7,4] = mul ypw tht
                        yqb:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] yqa
                        yqc:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (3, 0, 0))
                        ] yqb 0.0
                        yqd:f64[200,7,4,4] = add_any ypq yqc
                        yqe:f64[200,7,4] = neg ypw
                        yqf:f64[200,7,4] = mul ths yqe
                        yqg:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] yqf
                        yqh:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (1, 2, 0))
                        ] yqg 0.0
                        yqi:f64[200,7,4,4] = add_any ypz yqh
                        yqj:f64[200,7,4] = mul yqe thr
                        yqk:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] yqj
                        yql:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (2, 1, 0))
                        ] yqk 0.0
                        yqm:f64[200,7,4,4] = add_any yqd yql
                        yqn:f64[200,7,4] = mul thq ypw
                        yqo:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] yqn
                        yqp:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (2, 1, 0))
                        ] yqo 0.0
                        yqq:f64[200,7,4,4] = add_any yqi yqp
                        yqr:f64[200,7,4] = mul ypw thp
                        yqs:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] yqr
                        yqt:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (1, 2, 0))
                        ] yqs 0.0
                        yqu:f64[200,7,4,4] = add_any yqm yqt
                        yqv:f64[200,7,4] = mul tho ypw
                        yqw:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] yqv
                        yqx:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (3, 0, 0))
                        ] yqw 0.0
                        yqy:f64[200,7,4,4] = add_any yqq yqx
                        yqz:f64[200,7,4] = mul ypw thn
                        yra:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] yqz
                        yrb:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 3, 0))
                        ] yra 0.0
                        yrc:f64[200,7,4,4] = add_any yqu yrb
                        yrd:f64[200,7,4] = reduce_sum[axes=(3,)] ypu
                        yre:f64[200,7,4] = mul thm yrd
                        yrf:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] yre
                        yrg:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (1, 2, 0))
                        ] yrf 0.0
                        yrh:f64[200,7,4,4] = add_any yqy yrg
                        yri:f64[200,7,4] = mul yrd thl
                        yrj:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] yri
                        yrk:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (3, 0, 0))
                        ] yrj 0.0
                        yrl:f64[200,7,4,4] = add_any yrc yrk
                        yrm:f64[200,7,4] = mul thk yrd
                        yrn:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] yrm
                        yro:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 3, 0))
                        ] yrn 0.0
                        yrp:f64[200,7,4,4] = add_any yrh yro
                        yrq:f64[200,7,4] = mul yrd thj
                        yrr:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] yrq
                        yrs:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (2, 1, 0))
                        ] yrr 0.0
                        yrt:f64[200,7,4,4] = add_any yrl yrs
                        yru:f64[200,7,4] = neg yrd
                        yrv:f64[200,7,4] = mul thi yru
                        yrw:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] yrv
                        yrx:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (3, 0, 0))
                        ] yrw 0.0
                        yry:f64[200,7,4,4] = add_any yrp yrx
                        yrz:f64[200,7,4] = mul yru thh
                        ysa:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] yrz
                        ysb:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (1, 2, 0))
                        ] ysa 0.0
                        ysc:f64[200,7,4,4] = add_any yrt ysb
                        ysd:f64[200,7,4] = mul thg yrd
                        yse:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] ysd
                        ysf:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (2, 1, 0))
                        ] yse 0.0
                        ysg:f64[200,7,4,4] = add_any yry ysf
                        ysh:f64[200,7,4] = mul yrd thf
                        ysi:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] ysh
                        ysj:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 3, 0))
                        ] ysi 0.0
                        ysk:f64[200,7,4,4] = add_any ysc ysj
                        ysl:f64[200,7,4] = reduce_sum[axes=(3,)] ypt
                        ysm:f64[200,7,4] = neg ysl
                        ysn:f64[200,7,4] = mul the ysm
                        yso:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] ysn
                        ysp:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (2, 1, 0))
                        ] yso 0.0
                        ysq:f64[200,7,4,4] = add_any ysg ysp
                        ysr:f64[200,7,4] = mul ysm thd
                        yss:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] ysr
                        yst:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (3, 0, 0))
                        ] yss 0.0
                        ysu:f64[200,7,4,4] = add_any ysk yst
                        ysv:f64[200,7,4] = mul thc ysl
                        ysw:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] ysv
                        ysx:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (3, 0, 0))
                        ] ysw 0.0
                        ysy:f64[200,7,4,4] = add_any ysq ysx
                        ysz:f64[200,7,4] = mul ysl thb
                        yta:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] ysz
                        ytb:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (2, 1, 0))
                        ] yta 0.0
                        ytc:f64[200,7,4,4] = add_any ysu ytb
                        ytd:f64[200,7,4] = mul tha ysl
                        yte:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] ytd
                        ytf:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 3, 0))
                        ] yte 0.0
                        ytg:f64[200,7,4,4] = add_any ysy ytf
                        yth:f64[200,7,4] = mul ysl tgz
                        yti:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] yth
                        ytj:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (1, 2, 0))
                        ] yti 0.0
                        ytk:f64[200,7,4,4] = add_any ytc ytj
                        ytl:f64[200,7,4] = mul tgy ysl
                        ytm:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] ytl
                        ytn:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (1, 2, 0))
                        ] ytm 0.0
                        yto:f64[200,7,4,4] = add_any ytg ytn
                        ytp:f64[200,7,4] = mul ysl tgx
                        ytq:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] ytp
                        ytr:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 3, 0))
                        ] ytq 0.0
                        yts:f64[200,7,4,4] = add_any ytk ytr
                        ytt:f64[200,7,4] = reduce_sum[axes=(3,)] yps
                        ytu:f64[200,7,4] = neg ytt
                        ytv:f64[200,7,4] = mul tgw ytu
                        ytw:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] ytv
                        ytx:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (3, 0, 0))
                        ] ytw 0.0
                        yty:f64[200,7,4,4] = add_any yto ytx
                        ytz:f64[200,7,4] = mul ytu tgv
                        yua:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] ytz
                        yub:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (3, 0, 0))
                        ] yua 0.0
                        yuc:f64[200,7,4,4] = add_any yts yub
                        yud:f64[200,7,4] = neg ytt
                        yue:f64[200,7,4] = mul tgu yud
                        yuf:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] yue
                        yug:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (2, 1, 0))
                        ] yuf 0.0
                        yuh:f64[200,7,4,4] = add_any yty yug
                        yui:f64[200,7,4] = mul yud tgt
                        yuj:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] yui
                        yuk:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (2, 1, 0))
                        ] yuj 0.0
                        yul:f64[200,7,4,4] = add_any yuc yuk
                        yum:f64[200,7,4] = neg ytt
                        yun:f64[200,7,4] = mul tgs yum
                        yuo:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] yun
                        yup:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (1, 2, 0))
                        ] yuo 0.0
                        yuq:f64[200,7,4,4] = add_any yuh yup
                        yur:f64[200,7,4] = mul yum tgr
                        yus:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] yur
                        yut:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (1, 2, 0))
                        ] yus 0.0
                        yuu:f64[200,7,4,4] = add_any yul yut
                        yuv:f64[200,7,4] = mul tgq ytt
                        yuw:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] yuv
                        yux:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 3, 0))
                        ] yuw 0.0
                        yuy:f64[200,7,4,4] = add_any yuq yux
                        yuz:f64[200,7,13,4] = pjit[name=_take jaxpr=_take32] sli
                          yuy
                        yva:f64[200,7,4] = mul ytt tgp
                        yvb:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] yva
                        yvc:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 3, 0))
                        ] yvb 0.0
                        yvd:f64[200,7,4,4] = add_any yuu yvc
                        yve:f64[200,7,13,3] = pjit[name=_take jaxpr=_take24] slh
                          ymt
                        yvf:f64[200,7,1,3] = slice[
                          limit_indices=(200, 7, 1, 3)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] yve
                        yvg:f64[200,7,4,3] = slice[
                          limit_indices=(200, 7, 5, 3)
                          start_indices=(0, 0, 1, 0)
                          strides=None
                        ] yve
                        yvh:f64[200,7,4,3] = slice[
                          limit_indices=(200, 7, 9, 3)
                          start_indices=(0, 0, 5, 0)
                          strides=None
                        ] yve
                        yvi:f64[200,7,4,3] = slice[
                          limit_indices=(200, 7, 13, 3)
                          start_indices=(0, 0, 9, 0)
                          strides=None
                        ] yve
                        yvj:f64[200,7,4,3] = add_any wum yvg
                        yvk:f64[200,7,4,3] = add_any wsu yvh
                        yvl:f64[200,7,4,3] = add_any wra yvi
                        yvm:f64[200,7,4,3] = add_any yvk yvl
                        yvn:f64[200,7,4,3] = mul tgi yvl
                        yvo:f64[200,7,4,3] yvp:f64[200,7,4,3] = pjit[
                          name=cross
                          jaxpr=cross21
                        ] slb tgj tgk slc sld tgl tgm sle tgn slf slg tgo yvn
                        yvq:f64[200,7,4,3] = mul yvl tgh
                        yvr:f64[200,7,4] = reduce_sum[axes=(3,)] yvq
                        yvs:f64[200,7,4,1] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 4, 1)
                        ] yvr
                        yvt:f64[200,7,4] = reduce_sum[axes=(3,)] yvs
                        yvu:f64[200,7,4] = mul 2.0 yvt
                        yvv:f64[200,7,4,3] = mul tgg yvl
                        yvw:f64[200,7,4,3] = add_any yvp yvv
                        yvx:f64[200,7,4,3] = mul yvl tgc
                        yvy:f64[200,7,4] = reduce_sum[axes=(3,)] yvx
                        yvz:f64[200,7,4,1] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 4, 1)
                        ] yvy
                        ywa:f64[200,7,4] = reduce_sum[axes=(3,)] yvz
                        ywb:f64[200,7,4] = neg ywa
                        ywc:f64[200,7,4,3] = dot_general[
                          dimension_numbers=(([], []), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] ywb tgd
                        ywd:f64[200,7,4,3] = add_any yvo ywc
                        ywe:f64[200,7,4,3] = dot_general[
                          dimension_numbers=(([], []), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] ywb tgd
                        ywf:f64[200,7,4,3] = add_any ywd ywe
                        ywg:f64[200,7,4] = mul tgf ywa
                        ywh:f64[200,7,4] = add_any yvu ywg
                        ywi:f64[200,7,4] = mul ywa tgf
                        ywj:f64[200,7,4] = add_any ywh ywi
                        ywk:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] ywj
                        ywl:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 3, 0))
                        ] ywk 0.0
                        ywm:f64[200,7,4,4] = add_any yvd ywl
                        ywn:f64[200,7,4,3] = mul 2.0 yvl
                        ywo:f64[200,7,4,3] = mul tge ywn
                        ywp:f64[200,7,4,3] = add_any ywf ywo
                        ywq:f64[200,7,4,3] = mul ywn tgd
                        ywr:f64[200,7,4] = reduce_sum[axes=(3,)] ywq
                        yws:f64[200,7,4,1] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 4, 1)
                        ] ywr
                        ywt:f64[200,7,4] = reduce_sum[axes=(3,)] yws
                        ywu:f64[200,7,4,3] = dot_general[
                          dimension_numbers=(([], []), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] ywt tgd
                        ywv:f64[200,7,4,3] = add_any yvw ywu
                        yww:f64[200,7,13,3] = pjit[name=_take jaxpr=_take25] sla
                          ywv
                        ywx:f64[200,7,4,3] = dot_general[
                          dimension_numbers=(([], []), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] ywt tgc
                        ywy:f64[200,7,4,3] = add_any ywp ywx
                        ywz:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (1, 0, 0))
                        ] ywy 0.0
                        yxa:f64[200,7,4,4] = add_any ywm ywz
                        yxb:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] yxa
                        yxc:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] yxa
                        yxd:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] yxa
                        yxe:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] yxa
                        yxf:f64[200,7,4] = reduce_sum[axes=(3,)] yxe
                        yxg:f64[200,7,4] = mul tgb yxf
                        yxh:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] yxg
                        yxi:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 3, 0))
                        ] yxh 0.0
                        yxj:f64[200,7,4] = mul yxf tga
                        yxk:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] yxj
                        yxl:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (3, 0, 0))
                        ] yxk 0.0
                        yxm:f64[200,7,4,4] = add_any ypp yxl
                        yxn:f64[200,7,4] = neg yxf
                        yxo:f64[200,7,4] = mul tfz yxn
                        yxp:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] yxo
                        yxq:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (1, 2, 0))
                        ] yxp 0.0
                        yxr:f64[200,7,4,4] = add_any yxi yxq
                        yxs:f64[200,7,4] = mul yxn tfy
                        yxt:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] yxs
                        yxu:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (2, 1, 0))
                        ] yxt 0.0
                        yxv:f64[200,7,4,4] = add_any yxm yxu
                        yxw:f64[200,7,4] = mul tfx yxf
                        yxx:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] yxw
                        yxy:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (2, 1, 0))
                        ] yxx 0.0
                        yxz:f64[200,7,4,4] = add_any yxr yxy
                        yya:f64[200,7,4] = mul yxf tfw
                        yyb:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] yya
                        yyc:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (1, 2, 0))
                        ] yyb 0.0
                        yyd:f64[200,7,4,4] = add_any yxv yyc
                        yye:f64[200,7,4] = mul tfv yxf
                        yyf:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] yye
                        yyg:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (3, 0, 0))
                        ] yyf 0.0
                        yyh:f64[200,7,4,4] = add_any yxz yyg
                        yyi:f64[200,7,4] = mul yxf tfu
                        yyj:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] yyi
                        yyk:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 3, 0))
                        ] yyj 0.0
                        yyl:f64[200,7,4,4] = add_any yyd yyk
                        yym:f64[200,7,4] = reduce_sum[axes=(3,)] yxd
                        yyn:f64[200,7,4] = mul tft yym
                        yyo:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] yyn
                        yyp:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (1, 2, 0))
                        ] yyo 0.0
                        yyq:f64[200,7,4,4] = add_any yyh yyp
                        yyr:f64[200,7,4] = mul yym tfs
                        yys:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] yyr
                        yyt:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (3, 0, 0))
                        ] yys 0.0
                        yyu:f64[200,7,4,4] = add_any yyl yyt
                        yyv:f64[200,7,4] = mul tfr yym
                        yyw:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] yyv
                        yyx:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 3, 0))
                        ] yyw 0.0
                        yyy:f64[200,7,4,4] = add_any yyq yyx
                        yyz:f64[200,7,4] = mul yym tfq
                        yza:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] yyz
                        yzb:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (2, 1, 0))
                        ] yza 0.0
                        yzc:f64[200,7,4,4] = add_any yyu yzb
                        yzd:f64[200,7,4] = neg yym
                        yze:f64[200,7,4] = mul tfp yzd
                        yzf:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] yze
                        yzg:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (3, 0, 0))
                        ] yzf 0.0
                        yzh:f64[200,7,4,4] = add_any yyy yzg
                        yzi:f64[200,7,4] = mul yzd tfo
                        yzj:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] yzi
                        yzk:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (1, 2, 0))
                        ] yzj 0.0
                        yzl:f64[200,7,4,4] = add_any yzc yzk
                        yzm:f64[200,7,4] = mul tfn yym
                        yzn:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] yzm
                        yzo:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (2, 1, 0))
                        ] yzn 0.0
                        yzp:f64[200,7,4,4] = add_any yzh yzo
                        yzq:f64[200,7,4] = mul yym tfm
                        yzr:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] yzq
                        yzs:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 3, 0))
                        ] yzr 0.0
                        yzt:f64[200,7,4,4] = add_any yzl yzs
                        yzu:f64[200,7,4] = reduce_sum[axes=(3,)] yxc
                        yzv:f64[200,7,4] = neg yzu
                        yzw:f64[200,7,4] = mul tfl yzv
                        yzx:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] yzw
                        yzy:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (2, 1, 0))
                        ] yzx 0.0
                        yzz:f64[200,7,4,4] = add_any yzp yzy
                        zaa:f64[200,7,4] = mul yzv tfk
                        zab:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] zaa
                        zac:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (3, 0, 0))
                        ] zab 0.0
                        zad:f64[200,7,4,4] = add_any yzt zac
                        zae:f64[200,7,4] = mul tfj yzu
                        zaf:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] zae
                        zag:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (3, 0, 0))
                        ] zaf 0.0
                        zah:f64[200,7,4,4] = add_any yzz zag
                        zai:f64[200,7,4] = mul yzu tfi
                        zaj:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] zai
                        zak:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (2, 1, 0))
                        ] zaj 0.0
                        zal:f64[200,7,4,4] = add_any zad zak
                        zam:f64[200,7,4] = mul tfh yzu
                        zan:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] zam
                        zao:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 3, 0))
                        ] zan 0.0
                        zap:f64[200,7,4,4] = add_any zah zao
                        zaq:f64[200,7,4] = mul yzu tfg
                        zar:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] zaq
                        zas:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (1, 2, 0))
                        ] zar 0.0
                        zat:f64[200,7,4,4] = add_any zal zas
                        zau:f64[200,7,4] = mul tff yzu
                        zav:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] zau
                        zaw:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (1, 2, 0))
                        ] zav 0.0
                        zax:f64[200,7,4,4] = add_any zap zaw
                        zay:f64[200,7,4] = mul yzu tfe
                        zaz:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] zay
                        zba:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 3, 0))
                        ] zaz 0.0
                        zbb:f64[200,7,4,4] = add_any zat zba
                        zbc:f64[200,7,4] = reduce_sum[axes=(3,)] yxb
                        zbd:f64[200,7,4] = neg zbc
                        zbe:f64[200,7,4] = mul tfd zbd
                        zbf:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] zbe
                        zbg:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (3, 0, 0))
                        ] zbf 0.0
                        zbh:f64[200,7,4,4] = add_any zax zbg
                        zbi:f64[200,7,4] = mul zbd tfc
                        zbj:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] zbi
                        zbk:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (3, 0, 0))
                        ] zbj 0.0
                        zbl:f64[200,7,4,4] = add_any zbb zbk
                        zbm:f64[200,7,4] = neg zbc
                        zbn:f64[200,7,4] = mul tfb zbm
                        zbo:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] zbn
                        zbp:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (2, 1, 0))
                        ] zbo 0.0
                        zbq:f64[200,7,4,4] = add_any zbh zbp
                        zbr:f64[200,7,4] = mul zbm tfa
                        zbs:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] zbr
                        zbt:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (2, 1, 0))
                        ] zbs 0.0
                        zbu:f64[200,7,4,4] = add_any zbl zbt
                        zbv:f64[200,7,4] = neg zbc
                        zbw:f64[200,7,4] = mul tez zbv
                        zbx:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] zbw
                        zby:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (1, 2, 0))
                        ] zbx 0.0
                        zbz:f64[200,7,4,4] = add_any zbq zby
                        zca:f64[200,7,4] = mul zbv tey
                        zcb:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] zca
                        zcc:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (1, 2, 0))
                        ] zcb 0.0
                        zcd:f64[200,7,4,4] = add_any zbu zcc
                        zce:f64[200,7,4] = mul tex zbc
                        zcf:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] zce
                        zcg:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 3, 0))
                        ] zcf 0.0
                        zch:f64[200,7,4,4] = add_any zbz zcg
                        zci:f64[200,7,13,4] = pjit[name=_take jaxpr=_take32] skz
                          zch
                        zcj:f64[200,7,13,4] = add_any yuz zci
                        zck:f64[200,7,4] = mul zbc tew
                        zcl:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] zck
                        zcm:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 3, 0))
                        ] zcl 0.0
                        zcn:f64[200,7,4,4] = add_any zcd zcm
                        zco:f64[200,7,4,3] = add_any yvj yvm
                        zcp:f64[200,7,4,3] = mul tep yvm
                        zcq:f64[200,7,4,3] zcr:f64[200,7,4,3] = pjit[
                          name=cross
                          jaxpr=cross21
                        ] skt teq ter sku skv tes tet skw teu skx sky tev zcp
                        zcs:f64[200,7,4,3] = mul yvm teo
                        zct:f64[200,7,4] = reduce_sum[axes=(3,)] zcs
                        zcu:f64[200,7,4,1] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 4, 1)
                        ] zct
                        zcv:f64[200,7,4] = reduce_sum[axes=(3,)] zcu
                        zcw:f64[200,7,4] = mul 2.0 zcv
                        zcx:f64[200,7,4,3] = mul ten yvm
                        zcy:f64[200,7,4,3] = add_any zcr zcx
                        zcz:f64[200,7,4,3] = mul yvm tej
                        zda:f64[200,7,4] = reduce_sum[axes=(3,)] zcz
                        zdb:f64[200,7,4,1] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 4, 1)
                        ] zda
                        zdc:f64[200,7,4] = reduce_sum[axes=(3,)] zdb
                        zdd:f64[200,7,4] = neg zdc
                        zde:f64[200,7,4,3] = dot_general[
                          dimension_numbers=(([], []), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] zdd tek
                        zdf:f64[200,7,4,3] = add_any zcq zde
                        zdg:f64[200,7,4,3] = dot_general[
                          dimension_numbers=(([], []), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] zdd tek
                        zdh:f64[200,7,4,3] = add_any zdf zdg
                        zdi:f64[200,7,4] = mul tem zdc
                        zdj:f64[200,7,4] = add_any zcw zdi
                        zdk:f64[200,7,4] = mul zdc tem
                        zdl:f64[200,7,4] = add_any zdj zdk
                        zdm:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] zdl
                        zdn:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 3, 0))
                        ] zdm 0.0
                        zdo:f64[200,7,4,4] = add_any zcn zdn
                        zdp:f64[200,7,4,3] = mul 2.0 yvm
                        zdq:f64[200,7,4,3] = mul tel zdp
                        zdr:f64[200,7,4,3] = add_any zdh zdq
                        zds:f64[200,7,4,3] = mul zdp tek
                        zdt:f64[200,7,4] = reduce_sum[axes=(3,)] zds
                        zdu:f64[200,7,4,1] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 4, 1)
                        ] zdt
                        zdv:f64[200,7,4] = reduce_sum[axes=(3,)] zdu
                        zdw:f64[200,7,4,3] = dot_general[
                          dimension_numbers=(([], []), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] zdv tek
                        zdx:f64[200,7,4,3] = add_any zcy zdw
                        zdy:f64[200,7,13,3] = pjit[name=_take jaxpr=_take25] sks
                          zdx
                        zdz:f64[200,7,13,3] = add_any yww zdy
                        zea:f64[200,7,4,3] = dot_general[
                          dimension_numbers=(([], []), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] zdv tej
                        zeb:f64[200,7,4,3] = add_any zdr zea
                        zec:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (1, 0, 0))
                        ] zeb 0.0
                        zed:f64[200,7,4,4] = add_any zdo zec
                        zee:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] zed
                        zef:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] zed
                        zeg:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] zed
                        zeh:f64[200,7,4,1] = slice[
                          limit_indices=(200, 7, 4, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] zed
                        zei:f64[200,7,4] = reduce_sum[axes=(3,)] zeh
                        zej:f64[200,7,4] = mul tei zei
                        zek:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] zej
                        zel:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 3, 0))
                        ] zek 0.0
                        zem:f64[200,7,4] = mul zei teh
                        zen:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] zem
                        zeo:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (3, 0, 0))
                        ] zen 0.0
                        zep:f64[200,7,4,4] = add_any wui zeo
                        zeq:f64[200,7,4] = neg zei
                        zer:f64[200,7,4] = mul teg zeq
                        zes:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] zer
                        zet:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (1, 2, 0))
                        ] zes 0.0
                        zeu:f64[200,7,4,4] = add_any zel zet
                        zev:f64[200,7,4] = mul zeq tef
                        zew:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] zev
                        zex:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (2, 1, 0))
                        ] zew 0.0
                        zey:f64[200,7,4,4] = add_any zep zex
                        zez:f64[200,7,4] = mul tee zei
                        zfa:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] zez
                        zfb:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (2, 1, 0))
                        ] zfa 0.0
                        zfc:f64[200,7,4,4] = add_any zeu zfb
                        zfd:f64[200,7,4] = mul zei ted
                        zfe:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] zfd
                        zff:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (1, 2, 0))
                        ] zfe 0.0
                        zfg:f64[200,7,4,4] = add_any zey zff
                        zfh:f64[200,7,4] = mul tec zei
                        zfi:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] zfh
                        zfj:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (3, 0, 0))
                        ] zfi 0.0
                        zfk:f64[200,7,4,4] = add_any zfc zfj
                        zfl:f64[200,7,4] = mul zei teb
                        zfm:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] zfl
                        zfn:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 3, 0))
                        ] zfm 0.0
                        zfo:f64[200,7,4,4] = add_any zfg zfn
                        zfp:f64[200,7,4] = reduce_sum[axes=(3,)] zeg
                        zfq:f64[200,7,4] = mul tea zfp
                        zfr:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] zfq
                        zfs:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (1, 2, 0))
                        ] zfr 0.0
                        zft:f64[200,7,4,4] = add_any zfk zfs
                        zfu:f64[200,7,4] = mul zfp tdz
                        zfv:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] zfu
                        zfw:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (3, 0, 0))
                        ] zfv 0.0
                        zfx:f64[200,7,4,4] = add_any zfo zfw
                        zfy:f64[200,7,4] = mul tdy zfp
                        zfz:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] zfy
                        zga:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 3, 0))
                        ] zfz 0.0
                        zgb:f64[200,7,4,4] = add_any zft zga
                        zgc:f64[200,7,4] = mul zfp tdx
                        zgd:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] zgc
                        zge:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (2, 1, 0))
                        ] zgd 0.0
                        zgf:f64[200,7,4,4] = add_any zfx zge
                        zgg:f64[200,7,4] = neg zfp
                        zgh:f64[200,7,4] = mul tdw zgg
                        zgi:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] zgh
                        zgj:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (3, 0, 0))
                        ] zgi 0.0
                        zgk:f64[200,7,4,4] = add_any zgb zgj
                        zgl:f64[200,7,4] = mul zgg tdv
                        zgm:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] zgl
                        zgn:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (1, 2, 0))
                        ] zgm 0.0
                        zgo:f64[200,7,4,4] = add_any zgf zgn
                        zgp:f64[200,7,4] = mul tdu zfp
                        zgq:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] zgp
                        zgr:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (2, 1, 0))
                        ] zgq 0.0
                        zgs:f64[200,7,4,4] = add_any zgk zgr
                        zgt:f64[200,7,4] = mul zfp tdt
                        zgu:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] zgt
                        zgv:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 3, 0))
                        ] zgu 0.0
                        zgw:f64[200,7,4,4] = add_any zgo zgv
                        zgx:f64[200,7,4] = reduce_sum[axes=(3,)] zef
                        zgy:f64[200,7,4] = neg zgx
                        zgz:f64[200,7,4] = mul tds zgy
                        zha:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] zgz
                        zhb:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (2, 1, 0))
                        ] zha 0.0
                        zhc:f64[200,7,4,4] = add_any zgs zhb
                        zhd:f64[200,7,4] = mul zgy tdr
                        zhe:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] zhd
                        zhf:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (3, 0, 0))
                        ] zhe 0.0
                        zhg:f64[200,7,4,4] = add_any zgw zhf
                        zhh:f64[200,7,4] = mul tdq zgx
                        zhi:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] zhh
                        zhj:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (3, 0, 0))
                        ] zhi 0.0
                        zhk:f64[200,7,4,4] = add_any zhc zhj
                        zhl:f64[200,7,4] = mul zgx tdp
                        zhm:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] zhl
                        zhn:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (2, 1, 0))
                        ] zhm 0.0
                        zho:f64[200,7,4,4] = add_any zhg zhn
                        zhp:f64[200,7,4] = mul tdo zgx
                        zhq:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] zhp
                        zhr:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 3, 0))
                        ] zhq 0.0
                        zhs:f64[200,7,4,4] = add_any zhk zhr
                        zht:f64[200,7,4] = mul zgx tdn
                        zhu:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] zht
                        zhv:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (1, 2, 0))
                        ] zhu 0.0
                        zhw:f64[200,7,4,4] = add_any zho zhv
                        zhx:f64[200,7,4] = mul tdm zgx
                        zhy:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] zhx
                        zhz:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (1, 2, 0))
                        ] zhy 0.0
                        zia:f64[200,7,4,4] = add_any zhs zhz
                        zib:f64[200,7,4] = mul zgx tdl
                        zic:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] zib
                        zid:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 3, 0))
                        ] zic 0.0
                        zie:f64[200,7,4,4] = add_any zhw zid
                        zif:f64[200,7,4] = reduce_sum[axes=(3,)] zee
                        zig:f64[200,7,4] = neg zif
                        zih:f64[200,7,4] = mul tdk zig
                        zii:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] zih
                        zij:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (3, 0, 0))
                        ] zii 0.0
                        zik:f64[200,7,4,4] = add_any zia zij
                        zil:f64[200,7,4] = mul zig tdj
                        zim:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] zil
                        zin:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (3, 0, 0))
                        ] zim 0.0
                        zio:f64[200,7,4,4] = add_any zie zin
                        zip:f64[200,7,4] = neg zif
                        ziq:f64[200,7,4] = mul tdi zip
                        zir:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] ziq
                        zis:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (2, 1, 0))
                        ] zir 0.0
                        zit:f64[200,7,4,4] = add_any zik zis
                        ziu:f64[200,7,4] = mul zip tdh
                        ziv:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] ziu
                        ziw:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (2, 1, 0))
                        ] ziv 0.0
                        zix:f64[200,7,4,4] = add_any zio ziw
                        ziy:f64[200,7,4] = neg zif
                        ziz:f64[200,7,4] = mul tdg ziy
                        zja:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] ziz
                        zjb:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (1, 2, 0))
                        ] zja 0.0
                        zjc:f64[200,7,4,4] = add_any zit zjb
                        zjd:f64[200,7,4] = mul ziy tdf
                        zje:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] zjd
                        zjf:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (1, 2, 0))
                        ] zje 0.0
                        zjg:f64[200,7,4,4] = add_any zix zjf
                        zjh:f64[200,7,4] = mul tde zif
                        zji:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] zjh
                        zjj:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 3, 0))
                        ] zji 0.0
                        zjk:f64[200,7,4,4] = add_any zjc zjj
                        zjl:f64[200,7,13,4] = pjit[name=_take jaxpr=_take32] skr
                          zjk
                        zjm:f64[200,7,13,4] = add_any zcj zjl
                        zjn:f64[200,7,4] = mul zif tdd
                        zjo:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] zjn
                        zjp:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 3, 0))
                        ] zjo 0.0
                        zjq:f64[200,7,4,4] = add_any zjg zjp
                        zjr:f64[200,7,4,3] = add_any wul zco
                        zjs:f64[200,7,4,3] = mul tcw zco
                        zjt:f64[200,7,4,3] zju:f64[200,7,4,3] = pjit[
                          name=cross
                          jaxpr=cross21
                        ] skl tcx tcy skm skn tcz tda sko tdb skp skq tdc zjs
                        zjv:f64[200,7,4,3] = mul zco tcv
                        zjw:f64[200,7,4] = reduce_sum[axes=(3,)] zjv
                        zjx:f64[200,7,4,1] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 4, 1)
                        ] zjw
                        zjy:f64[200,7,4] = reduce_sum[axes=(3,)] zjx
                        zjz:f64[200,7,4] = mul 2.0 zjy
                        zka:f64[200,7,4,3] = mul tcu zco
                        zkb:f64[200,7,4,3] = add_any zju zka
                        zkc:f64[200,7,4,3] = mul zco tcq
                        zkd:f64[200,7,4] = reduce_sum[axes=(3,)] zkc
                        zke:f64[200,7,4,1] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 4, 1)
                        ] zkd
                        zkf:f64[200,7,4] = reduce_sum[axes=(3,)] zke
                        zkg:f64[200,7,4] = neg zkf
                        zkh:f64[200,7,4,3] = dot_general[
                          dimension_numbers=(([], []), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] zkg tcr
                        zki:f64[200,7,4,3] = add_any zjt zkh
                        zkj:f64[200,7,4,3] = dot_general[
                          dimension_numbers=(([], []), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] zkg tcr
                        zkk:f64[200,7,4,3] = add_any zki zkj
                        zkl:f64[200,7,4] = mul tct zkf
                        zkm:f64[200,7,4] = add_any zjz zkl
                        zkn:f64[200,7,4] = mul zkf tct
                        zko:f64[200,7,4] = add_any zkm zkn
                        zkp:f64[200,7,4,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 4, 1)
                        ] zko
                        zkq:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 3, 0))
                        ] zkp 0.0
                        zkr:f64[200,7,4,4] = add_any zjq zkq
                        zks:f64[200,7,4,3] = mul 2.0 zco
                        zkt:f64[200,7,4,3] = mul tcs zks
                        zku:f64[200,7,4,3] = add_any zkk zkt
                        zkv:f64[200,7,4,3] = mul zks tcr
                        zkw:f64[200,7,4] = reduce_sum[axes=(3,)] zkv
                        zkx:f64[200,7,4,1] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 4, 1)
                        ] zkw
                        zky:f64[200,7,4] = reduce_sum[axes=(3,)] zkx
                        zkz:f64[200,7,4,3] = dot_general[
                          dimension_numbers=(([], []), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] zky tcr
                        zla:f64[200,7,4,3] = add_any zkb zkz
                        zlb:f64[200,7,13,3] = pjit[name=_take jaxpr=_take25] skk
                          zla
                        zlc:f64[200,7,13,3] = add_any zdz zlb
                        zld:f64[200,7,4,3] = dot_general[
                          dimension_numbers=(([], []), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] zky tcq
                        zle:f64[200,7,4,3] = add_any zku zld
                        zlf:f64[200,7,4,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (1, 0, 0))
                        ] zle 0.0
                        zlg:f64[200,7,4,4] = add_any zkr zlf
                        zlh:f64[200,7,1,4] = pjit[
                          name=_take
                          jaxpr={ lambda ; zli:i64[4,1] zlj:f64[200,7,4,4]. let
                              zlk:f64[200,7,1,4] = broadcast_in_dim[
                                broadcast_dimensions=()
                                shape=(200, 7, 1, 4)
                              ] 0.0
                              zll:f64[200,7,1,4] = scatter-add[
                                dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
                                indices_are_sorted=False
                                mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                unique_indices=False
                                update_consts=()
                                update_jaxpr=jaxpr
                              ] zlk zli zlj
                            in (zll,) }
                        ] skj zlg
                        zlm:f64[200,7,1,4] = add_any ypo zlh
                        zln:f64[200,7,13,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 12, 0), (0, 0, 0))
                        ] zlm 0.0
                        zlo:f64[200,7,13,4] = add_any zjm zln
                        zlp:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] zlo
                        zlq:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] zlo
                        zlr:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] zlo
                        zls:f64[200,7,13,1] = slice[
                          limit_indices=(200, 7, 13, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] zlo
                        zlt:f64[200,7,13] = reduce_sum[axes=(3,)] zls
                        zlu:f64[200,7,13] = mul ski zlt
                        zlv:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] zlu
                        zlw:f64[200,7,13,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 3, 0))
                        ] zlv 0.0
                        zlx:f64[200,7,13] = neg zlt
                        zly:f64[200,7,13] = mul skh zlx
                        zlz:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] zly
                        zma:f64[200,7,13,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (1, 2, 0))
                        ] zlz 0.0
                        zmb:f64[200,7,13,4] = add_any zlw zma
                        zmc:f64[200,7,13] = mul skg zlt
                        zmd:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] zmc
                        zme:f64[200,7,13,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (2, 1, 0))
                        ] zmd 0.0
                        zmf:f64[200,7,13,4] = add_any zmb zme
                        zmg:f64[200,7,13] = mul skf zlt
                        zmh:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] zmg
                        zmi:f64[200,7,13,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (3, 0, 0))
                        ] zmh 0.0
                        zmj:f64[200,7,13,4] = add_any zmf zmi
                        zmk:f64[200,7,13] = reduce_sum[axes=(3,)] zlr
                        zml:f64[200,7,13] = mul ske zmk
                        zmm:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] zml
                        zmn:f64[200,7,13,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (1, 2, 0))
                        ] zmm 0.0
                        zmo:f64[200,7,13,4] = add_any zmj zmn
                        zmp:f64[200,7,13] = mul skd zmk
                        zmq:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] zmp
                        zmr:f64[200,7,13,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 3, 0))
                        ] zmq 0.0
                        zms:f64[200,7,13,4] = add_any zmo zmr
                        zmt:f64[200,7,13] = neg zmk
                        zmu:f64[200,7,13] = mul skc zmt
                        zmv:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] zmu
                        zmw:f64[200,7,13,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (3, 0, 0))
                        ] zmv 0.0
                        zmx:f64[200,7,13,4] = add_any zms zmw
                        zmy:f64[200,7,13] = mul skb zmk
                        zmz:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] zmy
                        zna:f64[200,7,13,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (2, 1, 0))
                        ] zmz 0.0
                        znb:f64[200,7,13,4] = add_any zmx zna
                        znc:f64[200,7,13] = reduce_sum[axes=(3,)] zlq
                        znd:f64[200,7,13] = neg znc
                        zne:f64[200,7,13] = mul ska znd
                        znf:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] zne
                        zng:f64[200,7,13,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (2, 1, 0))
                        ] znf 0.0
                        znh:f64[200,7,13,4] = add_any znb zng
                        zni:f64[200,7,13] = mul sjz znc
                        znj:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] zni
                        znk:f64[200,7,13,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (3, 0, 0))
                        ] znj 0.0
                        znl:f64[200,7,13,4] = add_any znh znk
                        znm:f64[200,7,13] = mul sjy znc
                        znn:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] znm
                        zno:f64[200,7,13,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 3, 0))
                        ] znn 0.0
                        znp:f64[200,7,13,4] = add_any znl zno
                        znq:f64[200,7,13] = mul sjx znc
                        znr:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] znq
                        zns:f64[200,7,13,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (1, 2, 0))
                        ] znr 0.0
                        znt:f64[200,7,13,4] = add_any znp zns
                        znu:f64[200,7,13] = reduce_sum[axes=(3,)] zlp
                        znv:f64[200,7,13] = neg znu
                        znw:f64[200,7,13] = mul sjw znv
                        znx:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] znw
                        zny:f64[200,7,13,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (3, 0, 0))
                        ] znx 0.0
                        znz:f64[200,7,13,4] = add_any znt zny
                        zoa:f64[200,7,13] = neg znu
                        zob:f64[200,7,13] = mul sjv zoa
                        zoc:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] zob
                        zod:f64[200,7,13,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (2, 1, 0))
                        ] zoc 0.0
                        zoe:f64[200,7,13,4] = add_any znz zod
                        zof:f64[200,7,13] = neg znu
                        zog:f64[200,7,13] = mul sju zof
                        zoh:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] zog
                        zoi:f64[200,7,13,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (1, 2, 0))
                        ] zoh 0.0
                        zoj:f64[200,7,13,4] = add_any zoe zoi
                        zok:f64[200,7,13] = mul sjt znu
                        zol:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] zok
                        zom:f64[200,7,13,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 3, 0))
                        ] zol 0.0
                        zon:f64[200,7,13,4] = add_any zoj zom
                        zoo:f64[200,7,1,3] = pjit[name=_take jaxpr=_take26] sjs zjr
                        zop:f64[200,7,1,3] = add_any yvf zoo
                        zoq:f64[200,7,13,3] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 12, 0), (0, 0, 0))
                        ] zop 0.0
                        zor:f64[200,7,13,3] = add_any zlc zoq
                        zos:f64[200,7,13,3] = mul sji zor
                        zot:f64[200,7,13,3] = pjit[
                          name=cross
                          jaxpr={ lambda ; zou:f64[1,1,13] zov:i32[1] zow:f64[1,1,13]
                              zox:i32[1] zoy:f64[1,1,13] zoz:i32[1] zpa:f64[1,1,13]
                              zpb:f64[1,1,13] zpc:f64[1,1,13] zpd:f64[200,7,13,3]. let
                              zpe:f64[200,7,13,1] = slice[
                                limit_indices=(200, 7, 13, 1)
                                start_indices=(0, 0, 0, 0)
                                strides=None
                              ] zpd
                              zpf:f64[200,7,13,1] = slice[
                                limit_indices=(200, 7, 13, 2)
                                start_indices=(0, 0, 0, 1)
                                strides=None
                              ] zpd
                              zpg:f64[200,7,13,1] = slice[
                                limit_indices=(200, 7, 13, 3)
                                start_indices=(0, 0, 0, 2)
                                strides=None
                              ] zpd
                              zph:f64[200,7,13] = reduce_sum[axes=(3,)] zpg
                              zpi:f64[200,7,13] = neg zph
                              zpj:f64[200,7,13] = mul zpc zpi
                              zpk:f64[200,7,13] = mul zpb zph
                              zpl:f64[200,7,13] = reduce_sum[axes=(3,)] zpf
                              zpm:f64[200,7,13] = neg zpl
                              zpn:f64[200,7,13] = mul zpa zpm
                              zpo:f64[200,7,13] = mul zoy zpl
                              zpp:f64[200,7,13] = add_any zpj zpo
                              zpq:f64[200,7,13,3] = broadcast_in_dim[
                                broadcast_dimensions=()
                                shape=(200, 7, 13, 3)
                              ] 0.0
                              zpr:f64[200,7,13,3] = scatter-add[
                                dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(3,), scatter_dims_to_operand_dims=(3,))
                                indices_are_sorted=True
                                mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                unique_indices=True
                                update_consts=()
                                update_jaxpr=jaxpr
                              ] zpq zoz zpp
                              zps:f64[200,7,13] = reduce_sum[axes=(3,)] zpe
                              zpt:f64[200,7,13] = neg zps
                              zpu:f64[200,7,13] = mul zow zpt
                              zpv:f64[200,7,13] = add_any zpk zpu
                              zpw:f64[200,7,13,3] = broadcast_in_dim[
                                broadcast_dimensions=()
                                shape=(200, 7, 13, 3)
                              ] 0.0
                              zpx:f64[200,7,13,3] = scatter-add[
                                dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(3,), scatter_dims_to_operand_dims=(3,))
                                indices_are_sorted=True
                                mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                unique_indices=True
                                update_consts=()
                                update_jaxpr=jaxpr
                              ] zpw zox zpv
                              zpy:f64[200,7,13,3] = add_any zpr zpx
                              zpz:f64[200,7,13] = mul zou zps
                              zqa:f64[200,7,13] = add_any zpn zpz
                              zqb:f64[200,7,13,3] = broadcast_in_dim[
                                broadcast_dimensions=()
                                shape=(200, 7, 13, 3)
                              ] 0.0
                              zqc:f64[200,7,13,3] = scatter-add[
                                dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(3,), scatter_dims_to_operand_dims=(3,))
                                indices_are_sorted=True
                                mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                unique_indices=True
                                update_consts=()
                                update_jaxpr=jaxpr
                              ] zqb zov zqa
                              zqd:f64[200,7,13,3] = add_any zpy zqc
                            in (zqd,) }
                        ] sjj sjk sjl sjm sjn sjo sjp sjq sjr zos
                        zqe:f64[200,7,13,3] = mul sjh zor
                        zqf:f64[200,7,13,3] = add_any zot zqe
                        zqg:f64[200,7,13,3] = mul 2.0 zor
                        zqh:f64[200,7,13,3] = mul zqg sjg
                        zqi:f64[200,7,13] = reduce_sum[axes=(3,)] zqh
                        zqj:f64[200,7,13,1] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 13, 1)
                        ] zqi
                        zqk:f64[200,7,13] = reduce_sum[axes=(3,)] zqj
                        zql:f64[13,200,7] = transpose[permutation=(2, 0, 1)] zqk
                        zqm:f64[13,200,7,3] = dot_general[
                          dimension_numbers=(([], []), ([0], [0]))
                          preferred_element_type=float64
                        ] zql sio
                        zqn:f64[200,7,13,3] = transpose[
                          permutation=(1, 2, 0, 3)
                        ] zqm
                        zqo:f64[200,7,13,3] = add_any zqf zqn
                        zqp:f64[200,7,13,3] = neg zqo
                        zqq:f64[200,7,13,3] = mul tcp zqp
                        zqr:f64[200,7,13,3] = pjit[name=cross jaxpr=cross26] six
                          siy siz sja sjb sjc sjd sje sjf zqq
                        zqs:f64[200,7,13,3] = mul zqp tco
                        zqt:f64[200,7,13] = reduce_sum[axes=(3,)] zqs
                        zqu:f64[200,7,13,1] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 13, 1)
                        ] zqt
                        zqv:f64[200,7,13] = reduce_sum[axes=(3,)] zqu
                        zqw:f64[200,7,13] = mul 2.0 zqv
                        zqx:f64[200,7,13,3] = mul zqp siw
                        zqy:f64[200,7,13] = reduce_sum[axes=(3,)] zqx
                        zqz:f64[200,7,13,1] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 13, 1)
                        ] zqy
                        zra:f64[200,7,13] = reduce_sum[axes=(3,)] zqz
                        zrb:f64[200,7,13] = neg zra
                        zrc:f64[200,7,13,3] = dot_general[
                          dimension_numbers=(([], []), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] zrb tcl
                        zrd:f64[200,7,13,3] = add_any zqr zrc
                        zre:f64[200,7,13,3] = dot_general[
                          dimension_numbers=(([], []), ([0, 1, 2], [0, 1, 2]))
                          preferred_element_type=float64
                        ] zrb tcl
                        zrf:f64[200,7,13,3] = add_any zrd zre
                        zrg:f64[200,7,13] = mul tcn zra
                        zrh:f64[200,7,13] = add_any zqw zrg
                        zri:f64[200,7,13] = mul zra tcn
                        zrj:f64[200,7,13] = add_any zrh zri
                        zrk:f64[200,7,13,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1, 2)
                          shape=(200, 7, 13, 1)
                        ] zrj
                        zrl:f64[200,7,13,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 3, 0))
                        ] zrk 0.0
                        zrm:f64[200,7,13,4] = add_any zon zrl
                        zrn:f64[200,7,13,3] = mul 2.0 zqp
                        zro:f64[200,7,13,3] = mul tcm zrn
                        zrp:f64[200,7,13,3] = add_any zrf zro
                        zrq:f64[200,7,13,3] = mul zrn tcl
                        zrr:f64[200,7,13] = reduce_sum[axes=(3,)] zrq
                        zrs:f64[200,7,13,1] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 13, 1)
                        ] zrr
                        zrt:f64[200,7,13] = reduce_sum[axes=(3,)] zrs
                        zru:f64[13,200,7] = transpose[permutation=(2, 0, 1)] zrt
                        zrv:f64[13,200,7,3] = dot_general[
                          dimension_numbers=(([], []), ([0], [0]))
                          preferred_element_type=float64
                        ] zru siv
                        zrw:f64[200,7,13,3] = transpose[
                          permutation=(1, 2, 0, 3)
                        ] zrv
                        zrx:f64[200,7,13,3] = add_any zrp zrw
                        zry:f64[200,7,13,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (1, 0, 0))
                        ] zrx 0.0
                        zrz:f64[200,7,13,4] = add_any zrm zry
                        zsa:f64[200,7,1,4] = slice[
                          limit_indices=(200, 7, 1, 4)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] zrz
                        zsb:f64[200,7,12,4] = slice[
                          limit_indices=(200, 7, 13, 4)
                          start_indices=(0, 0, 1, 0)
                          strides=None
                        ] zrz
                        zsc:f64[200,7,12,1,4] = pjit[
                          name=_take
                          jaxpr={ lambda ; zsd:i64[1] zse:f64[200,7,12,4]. let
                              zsf:f64[200,7,12,1,4] = broadcast_in_dim[
                                broadcast_dimensions=()
                                shape=(200, 7, 12, 1, 4)
                              ] 0.0
                              zsg:f64[200,7,12,1,4] = scatter-add[
                                dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2, 3), inserted_window_dims=(3,), scatter_dims_to_operand_dims=(3,))
                                indices_are_sorted=False
                                mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                unique_indices=False
                                update_consts=()
                                update_jaxpr=jaxpr
                              ] zsf zsd zse
                            in (zsg,) }
                        ] siu zsb
                        zsh:f64[200,7,12,4] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 12, 4)
                        ] zsc
                        zsi:f64[200,7,12,4] = mul zsh tck
                        zsj:f64[200,7,12,4] = mul zsi tcj
                        zsk:f64[200,7,12] = reduce_sum[axes=(3,)] zsj
                        zsl:f64[200,7,12,1] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 12, 1)
                        ] zsk
                        zsm:f64[200,7,12,1] = neg zsl
                        zsn:f64[200,7,12] = reduce_sum[axes=(3,)] zsm
                        zso:f64[200,7,12] = pjit[
                          name=_where
                          jaxpr={ lambda ; zsp:bool[200,7,12] zsq:f64[200,7,12]. let
                              zsr:f64[200,7,12] = broadcast_in_dim[
                                broadcast_dimensions=()
                                shape=(200, 7, 12)
                              ] 0.0
                              zss:f64[200,7,12] = select_n zsp zsq zsr
                            in (zss,) }
                        ] tci zsn
                        zst:f64[200,7,12,4] = pjit[
                          name=norm
                          jaxpr={ lambda ; zsu:f64[200,7,12,4] zsv:f64[200,7,12]
                              zsw:f64[200,7,12]. let
                              zsx:f64[200,7,12] = mul zsw zsv
                              zsy:f64[200,7,12,4] = broadcast_in_dim[
                                broadcast_dimensions=(0, 1, 2)
                                shape=(200, 7, 12, 4)
                              ] zsx
                              zsz:f64[200,7,12,4] = mul zsu zsy
                              zta:f64[200,7,12,4] = mul zsy zsu
                              ztb:f64[200,7,12,4] = add_any zsz zta
                            in (ztb,) }
                        ] tcg tch zso
                        ztc:f64[200,7,12,4] = pjit[
                          name=_where
                          jaxpr={ lambda ; ztd:bool[200,7,12,4] zte:f64[200,7,12,4]. let
                              ztf:f64[200,7,12,4] = broadcast_in_dim[
                                broadcast_dimensions=()
                                shape=(200, 7, 12, 4)
                              ] 0.0
                              ztg:f64[200,7,12,4] = select_n ztd zte ztf
                            in (ztg,) }
                        ] tcf zst
                        zth:f64[200,7,12,4] = div zsh tce
                        zti:f64[200,7,12,4] = add_any ztc zth
                        ztj:f64[200,7,12,1] = slice[
                          limit_indices=(200, 7, 12, 1)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] zti
                        ztk:f64[200,7,12,1] = slice[
                          limit_indices=(200, 7, 12, 2)
                          start_indices=(0, 0, 0, 1)
                          strides=None
                        ] zti
                        ztl:f64[200,7,12,1] = slice[
                          limit_indices=(200, 7, 12, 3)
                          start_indices=(0, 0, 0, 2)
                          strides=None
                        ] zti
                        ztm:f64[200,7,12,1] = slice[
                          limit_indices=(200, 7, 12, 4)
                          start_indices=(0, 0, 0, 3)
                          strides=None
                        ] zti
                        ztn:f64[200,7,12] = reduce_sum[axes=(3,)] ztm
                        zto:f64[200,7,12] = mul sit ztn
                        ztp:f64[200,7,12] = mul zto tcd
                        ztq:f64[200,7,12] = div ztp 2.0
                        ztr:f64[200,7,12] = reduce_sum[axes=(3,)] ztl
                        zts:f64[200,7,12] = mul sis ztr
                        ztt:f64[200,7,12] = mul zts tcc
                        ztu:f64[200,7,12] = div ztt 2.0
                        ztv:f64[200,7,12] = add_any ztq ztu
                        ztw:f64[200,7,12] = reduce_sum[axes=(3,)] ztk
                        ztx:f64[200,7,12] = mul sir ztw
                        zty:f64[200,7,12] = mul ztx tcb
                        ztz:f64[200,7,12] = div zty 2.0
                        zua:f64[200,7,12] = add_any ztv ztz
                        zub:f64[200,7,12] = reduce_sum[axes=(3,)] ztj
                        zuc:f64[200,7,12] = neg zub
                        zud:f64[200,7,12] = mul zuc tca
                        zue:f64[200,7,12] = div zud 2.0
                        zuf:f64[200,7,12] = add_any zua zue
                        zug:f64[200,7,1,7] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (3, 0, 0))
                        ] zsa 0.0
                        zuh:f64[200,7,1,3] = slice[
                          limit_indices=(200, 7, 1, 3)
                          start_indices=(0, 0, 0, 0)
                          strides=None
                        ] zqo
                        zui:f64[200,7,12,3] = slice[
                          limit_indices=(200, 7, 13, 3)
                          start_indices=(0, 0, 1, 0)
                          strides=None
                        ] zqo
                        zuj:f64[200,7,12,1,3] = pjit[name=_take jaxpr=_take27] siq
                          zui
                        zuk:f64[200,7,12,3] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 12, 3)
                        ] zuj
                        zul:f64[200,7,12,3] = mul sip zuk
                        zum:f64[200,7,12] = reduce_sum[axes=(3,)] zul
                        zun:f64[200,7,12,1] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 12, 1)
                        ] zum
                        zuo:f64[200,7,12] = reduce_sum[axes=(3,)] zun
                        zup:f64[200,7,12] = add_any zuf zuo
                        zuq:f64[200,7,19] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (7, 0, 0))
                        ] zup 0.0
                        zur:f64[200,7,19] = add_any ujx zuq
                        zus:f64[200,7,1,7] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 4, 0))
                        ] zuh 0.0
                        zut:f64[200,7,1,7] = add_any zug zus
                        zuu:f64[200,7,7] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 7)
                        ] zut
                        zuv:f64[200,7,19] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 12, 0))
                        ] zuu 0.0
                        zuw:f64[200,7,19] = add_any zur zuv
                        zux:f64[200,7,18] = neg ujw
                        zuy:f64[200,7,18] = mul shu zux
                        zuz:f64[200,7,18] = add_any xzb zuy
                        zva:f64[200,7,12] = broadcast_in_dim[
                          broadcast_dimensions=()
                          shape=(200, 7, 12)
                        ] 0.0
                        zvb:f64[200,7,18] = scatter[
                          dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(), scatter_dims_to_operand_dims=(2,))
                          indices_are_sorted=True
                          mode=GatherScatterMode.FILL_OR_DROP
                          unique_indices=True
                          update_consts=()
                          update_jaxpr=None
                        ] zuz sik zva
                        zvc:f64[200,7,12] = gather[
                          dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(), start_index_map=(2,))
                          fill_value=0
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          slice_sizes=(200, 7, 12)
                          unique_indices=False
                        ] zuz sik
                        zvd:f64[200,7,36] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (22, 2, 0))
                        ] zvc 0.0
                        zve:f64[200,7,36] = add_any ujv zvd
                        zvf:f64[200,7,3] = broadcast_in_dim[
                          broadcast_dimensions=()
                          shape=(200, 7, 3)
                        ] 0.0
                        zvg:f64[200,7,18] = scatter[
                          dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(), scatter_dims_to_operand_dims=(2,))
                          indices_are_sorted=True
                          mode=GatherScatterMode.FILL_OR_DROP
                          unique_indices=True
                          update_consts=()
                          update_jaxpr=None
                        ] zvb sic zvf
                        zvh:f64[200,7,3] = gather[
                          dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(), start_index_map=(2,))
                          fill_value=0
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          slice_sizes=(200, 7, 3)
                          unique_indices=False
                        ] zvb sic
                        zvi:f64[200,7,3] = mul tbt zvh
                        zvj:f64[200,7,3] zvk:f64[200,7,3] = pjit[
                          name=cross
                          jaxpr=cross19
                        ] sie tbu tbv sif sig tbw tbx sih tby sii sij tbz zvi
                        zvl:f64[200,7,3] = mul zvh tbs
                        zvm:f64[200,7] = reduce_sum[axes=(2,)] zvl
                        zvn:f64[200,7,1] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 1)
                        ] zvm
                        zvo:f64[200,7] = reduce_sum[axes=(2,)] zvn
                        zvp:f64[200,7] = mul 2.0 zvo
                        zvq:f64[200,7,3] = mul tbr zvh
                        zvr:f64[200,7,3] = add_any zvk zvq
                        zvs:f64[200,7,3] = mul zvh tbn
                        zvt:f64[200,7] = reduce_sum[axes=(2,)] zvs
                        zvu:f64[200,7,1] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 1)
                        ] zvt
                        zvv:f64[200,7] = reduce_sum[axes=(2,)] zvu
                        zvw:f64[200,7] = neg zvv
                        zvx:f64[200,7,3] = dot_general[
                          dimension_numbers=(([], []), ([0, 1], [0, 1]))
                          preferred_element_type=float64
                        ] zvw tbo
                        zvy:f64[200,7,3] = add_any zvj zvx
                        zvz:f64[200,7,3] = dot_general[
                          dimension_numbers=(([], []), ([0, 1], [0, 1]))
                          preferred_element_type=float64
                        ] zvw tbo
                        zwa:f64[200,7,3] = add_any zvy zvz
                        zwb:f64[200,7] = mul tbq zvv
                        zwc:f64[200,7] = add_any zvp zwb
                        zwd:f64[200,7] = mul zvv tbq
                        zwe:f64[200,7] = add_any zwc zwd
                        zwf:f64[200,7,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1)
                          shape=(200, 7, 1)
                        ] zwe
                        zwg:f64[200,7,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 3, 0))
                        ] zwf 0.0
                        zwh:f64[200,7,3] = mul 2.0 zvh
                        zwi:f64[200,7,3] = mul tbp zwh
                        zwj:f64[200,7,3] = add_any zwa zwi
                        zwk:f64[200,7,3] = mul zwh tbo
                        zwl:f64[200,7] = reduce_sum[axes=(2,)] zwk
                        zwm:f64[200,7,1] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 1)
                        ] zwl
                        zwn:f64[200,7] = reduce_sum[axes=(2,)] zwm
                        zwo:f64[200,7,3] = dot_general[
                          dimension_numbers=(([], []), ([0, 1], [0, 1]))
                          preferred_element_type=float64
                        ] zwn tbo
                        zwp:f64[200,7,3] = add_any zvr zwo
                        zwq:f64[200,7,36] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (19, 14, 0))
                        ] zwp 0.0
                        zwr:f64[200,7,36] = add_any zve zwq
                        zws:f64[200,7,3] = dot_general[
                          dimension_numbers=(([], []), ([0, 1], [0, 1]))
                          preferred_element_type=float64
                        ] zwn tbn
                        zwt:f64[200,7,3] = add_any zwj zws
                        zwu:f64[200,7,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (1, 0, 0))
                        ] zwt 0.0
                        zwv:f64[200,7,4] = add_any zwg zwu
                        zww:f64[200,7,4] = mul zwv sid
                        zwx:f64[200,7,3] = gather[
                          dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(), start_index_map=(2,))
                          fill_value=0
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          slice_sizes=(200, 7, 3)
                          unique_indices=False
                        ] zvg shv
                        zwy:f64[200,7,3] = mul tbg zwx
                        zwz:f64[200,7,3] zxa:f64[200,7,3] = pjit[
                          name=cross
                          jaxpr=cross19
                        ] shw tbh tbi shx shy tbj tbk shz tbl sia sib tbm zwy
                        zxb:f64[200,7,3] = mul zwx tbf
                        zxc:f64[200,7] = reduce_sum[axes=(2,)] zxb
                        zxd:f64[200,7,1] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 1)
                        ] zxc
                        zxe:f64[200,7] = reduce_sum[axes=(2,)] zxd
                        zxf:f64[200,7] = mul 2.0 zxe
                        zxg:f64[200,7,3] = mul tbe zwx
                        zxh:f64[200,7,3] = add_any zxa zxg
                        zxi:f64[200,7,3] = mul zwx tba
                        zxj:f64[200,7] = reduce_sum[axes=(2,)] zxi
                        zxk:f64[200,7,1] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 1)
                        ] zxj
                        zxl:f64[200,7] = reduce_sum[axes=(2,)] zxk
                        zxm:f64[200,7] = neg zxl
                        zxn:f64[200,7,3] = dot_general[
                          dimension_numbers=(([], []), ([0, 1], [0, 1]))
                          preferred_element_type=float64
                        ] zxm tbb
                        zxo:f64[200,7,3] = add_any zwz zxn
                        zxp:f64[200,7,3] = dot_general[
                          dimension_numbers=(([], []), ([0, 1], [0, 1]))
                          preferred_element_type=float64
                        ] zxm tbb
                        zxq:f64[200,7,3] = add_any zxo zxp
                        zxr:f64[200,7] = mul tbd zxl
                        zxs:f64[200,7] = add_any zxf zxr
                        zxt:f64[200,7] = mul zxl tbd
                        zxu:f64[200,7] = add_any zxs zxt
                        zxv:f64[200,7,1] = broadcast_in_dim[
                          broadcast_dimensions=(0, 1)
                          shape=(200, 7, 1)
                        ] zxu
                        zxw:f64[200,7,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 3, 0))
                        ] zxv 0.0
                        zxx:f64[200,7,4] = add_any zww zxw
                        zxy:f64[200,7,3] = mul 2.0 zwx
                        zxz:f64[200,7,3] = mul tbc zxy
                        zya:f64[200,7,3] = add_any zxq zxz
                        zyb:f64[200,7,3] = mul zxy tbb
                        zyc:f64[200,7] = reduce_sum[axes=(2,)] zyb
                        zyd:f64[200,7,1] = reshape[
                          dimensions=None
                          new_sizes=(200, 7, 1)
                        ] zyc
                        zye:f64[200,7] = reduce_sum[axes=(2,)] zyd
                        zyf:f64[200,7,3] = dot_general[
                          dimension_numbers=(([], []), ([0, 1], [0, 1]))
                          preferred_element_type=float64
                        ] zye tbb
                        zyg:f64[200,7,3] = add_any zxh zyf
                        zyh:f64[200,7,36] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (16, 17, 0))
                        ] zyg 0.0
                        zyi:f64[200,7,36] = add_any zwr zyh
                        zyj:f64[200,7,3] = dot_general[
                          dimension_numbers=(([], []), ([0, 1], [0, 1]))
                          preferred_element_type=float64
                        ] zye tba
                        zyk:f64[200,7,3] = add_any zya zyj
                        zyl:f64[200,7,4] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (1, 0, 0))
                        ] zyk 0.0
                        zym:f64[200,7,4] = add_any zxx zyl
                        zyn:f64[200,7,36] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 32, 0))
                        ] zym 0.0
                        zyo:f64[200,7,36] = add_any zyi zyn
                        zyp:f64[200,7,12] = slice[
                          limit_indices=(200, 7, 18)
                          start_indices=(0, 0, 6)
                          strides=None
                        ] ujw
                        zyq:f64[200,7,12] = mul zyp sht
                        zyr:f64[200,7,12] = neg zyq
                        zys:f64[200,7,19] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (7, 0, 0))
                        ] zyr 0.0
                        zyt:f64[200,7,19] = add_any zuw zys
                        zyu:f64[200,7,12] = broadcast_in_dim[
                          broadcast_dimensions=()
                          shape=(200, 7, 12)
                        ] 0.0
                        zyv:f64[200,7,19] = scatter[
                          dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(), scatter_dims_to_operand_dims=(2,))
                          indices_are_sorted=True
                          mode=GatherScatterMode.FILL_OR_DROP
                          unique_indices=True
                          update_consts=()
                          update_jaxpr=None
                        ] zyt shs zyu
                        zyw:f64[200,7,12] = gather[
                          dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(), start_index_map=(2,))
                          fill_value=0
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          slice_sizes=(200, 7, 12)
                          unique_indices=False
                        ] zyt shs
                        zyx:f64[200,7,36] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (4, 20, 0))
                        ] zyw 0.0
                        zyy:f64[200,7,36] = add_any zyo zyx
                        zyz:f64[200,7,4] = gather[
                          dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(), start_index_map=(2,))
                          fill_value=0
                          indices_are_sorted=False
                          mode=GatherScatterMode.FILL_OR_DROP
                          slice_sizes=(200, 7, 4)
                          unique_indices=False
                        ] zyv shq
                        zza:f64[200,7,36] = pad[
                          padding_config=((0, 0, 0), (0, 0, 0), (0, 32, 0))
                        ] zyz 0.0
                        zzb:f64[200,7,36] = add_any zyy zza
                        zzc:f64[200,7,36] = div zzb 2.0
                        zzd:f64[200,7,36] = mul zzc shr
                        zze:f64[200,7,36] = add_any ufl zzd
                        zzf:f64[200,7,18] = add_any tay ukp
                      in (zzf, zze) }
                    length=1
                    linear=(False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False)
                    num_carry=2
                    num_consts=556
                    reverse=True
                    unroll=1
                  ] qfg qfh qfi qfj qfk qfl qfm qfn qfo qfp qfq qfr qfs qft qfu qfv
                    qfw qfx qfy qfz qga qgb qgc qgd qge qgf qgg qgh qgi qgj qgk qgl
                    qgm qgn qgo qgp qgq qgr qgs qgt qgu qgv qgw qgx qgy qgz qha qhb
                    qhc qhd qhe qhf qhg qhh qhi qhj qhk qhl qhm qhn qho qhp qhq qhr
                    qhs qht qhu qhv qhw qhx qhy qhz qia qib qic qid qie qif qig qih
                    qii qij qik qil qim qin qio qip qiq qir qis qit qiu qiv qiw qix
                    qiy qiz qja qjb qjc qjd qje qjf qjg qjh qji qjj qjk qjl qjm qjn
                    qjo qjp qjq qjr qjs qjt qju qjv qjw qjx qjy qjz qka qkb qkc qkd
                    qke qkf qkg qkh qki qkj qkk qkl qkm qkn qko qkp qkq qkr qks qkt
                    qku qkv qkw qkx qky qkz qla qlb qlc qld qle qlf qlg qlh qli qlj
                    qlk qll qlm qln qlo qlp qlq qlr qls qlt qlu qlv qlw qlx qly qlz
                    qma qmb qmc qmd qme qmf qmg qmh qmi qmj qmk qml qmm qmn qmo qmp
                    qmq qmr qms qmt qmu qmv qmw qmx qmy qmz qna qnb qnc qnd qne qnf
                    qng qnh qni qnj qnk qnl qnm qnn qno qnp qnq qnr qns qnt qnu qnv
                    qnw qnx qny qnz qoa qob qoc qod qoe qof qog qoh qoi qoj qok qol
                    qom qon qoo qop qoq qor qos qot qou qov qow qox qoy qoz qpa qpb
                    qpc qpd qpe qpf qpg qph qpi qpj qpk qpl qpm qpn qpo qpp qpq qpr
                    qps qpt qpu qpv qpw qpx qpy qpz qqa qqb qqc qqd qqe qqf qqg qqh
                    qqi qqj qqk qql qqm qqn qqo qqp qqq qqr qqs qqt qqu qqv qqw qqx
                    qqy qqz qra qrb qrc qrd qre qrf qrg qrh qri qrj qrk qrl qrm qrn
                    qro qrp qrq qrr qrs qrt qru qrv qrw qrx qry qrz qsa qsb qsc qsd
                    qse qsf qsg qsh qsi qsj qsk qsl qsm qsn qso qsp qsq qsr qss qst
                    qsu qsv qsw qsx qsy qsz qta qtb qtc qtd qte qtf qtg qth qti qtj
                    qtk qtl qtm qtn qto qtp qtq qtr qts qtt qtu qtv qtw qtx qty qtz
                    qua qub quc qud que quf qug quh qui quj quk qul qum qun quo qup
                    quq qur qus qut quu quv quw qux quy quz qva qvb qvc qvd qve qvf
                    qvg qvh qvi qvj qvk qvl qvm qvn qvo qvp qvq qvr qvs qvt qvu qvv
                    qvw qvx qvy qvz qwa qwb qwc qwd qwe qwf qwg qwh qwi qwj qwk qwl
                    qwm qwn qwo qwp qwq qwr qws qwt qwu qwv qww qwx qwy qwz qxa qxb
                    qxc qxd qxe qxf qxg qxh qxi qxj qxk qxl qxm qxn qxo qxp qxq qxr
                    qxs qxt qxu qxv qxw qxx qxy qxz qya qyb qyc qyd qye qyf qyg qyh
                    qyi qyj qyk qyl qym qyn qyo qyp qyq qyr qys qyt qyu qyv qyw qyx
                    qyy qyz qza qzb qzc qzd qze qzf qzg qzh qzi qzj qzk qzl qzm qzn
                    qzo qzp qzq qzr qzs qzt qzu qzv qzw qzx qzy qzz raa rab rac rad
                    rae raf rag rah rai raj rak ral ram ran rao rap sfl sfj rca rcb
                    rcc rcd rce rcf rcg rch rci rcj rck rcl rcm rcn rco rcp rcq rcr
                    rcs rct rcu rcv rcw rcx rcy rcz rda rdb rdc rdd rde rdf rdg rdh
                    rdi rdj rdk rdl rdm rdn rdo rdp rdq rdr rds rdt rdu rdv rdw rdx
                    rdy rdz rea reb rec red ree ref reg reh rei rej rek rel rem ren
                    reo rep req rer res ret reu rev rew rex rey rez rfa rfb rfc rfd
                    rfe rff rfg rfh rfi rfj rfk rfl rfm rfn rfo rfp rfq rfr rfs rft
                    rfu rfv rfw rfx rfy rfz rga rgb rgc rgd rge rgf rgg rgh rgi rgj
                    rgk rgl rgm rgn rgo rgp rgq rgr rgs rgt rgu rgv rgw rgx rgy rgz
                    rha rhb rhc rhd rhe rhf rhg rhh rhi rhj rhk rhl rhm rhn rho rhp
                    rhq rhr rhs rht rhu rhv rhw rhx rhy rhz ria rib ric rid rie rif
                    rig rih rii rij rik ril rim rin rio rip riq rir ris rit riu riv
                    riw rix riy riz rja rjb rjc rjd rje rjf rjg rjh rji rjj rjk rjl
                    rjm rjn rjo rjp rjq rjr rjs rjt rju rjv rjw rjx rjy rjz rka rkb
                    rkc rkd rke rkf rkg rkh rki rkj rkk rkl rkm rkn rko rkp rkq rkr
                    rks rkt rku rkv rkw rkx rky rkz rla rlb rlc rld rle rlf rlg rlh
                    rli rlj rlk rll rlm rln rlo rlp rlq rlr rls rlt rlu rlv rlw rlx
                    rly rlz rma rmb rmc rmd rme rmf rmg rmh rmi rmj rmk rml rmm rmn
                    rmo rmp rmq rmr rms rmt rmu rmv rmw rmx rmy rmz rna rnb rnc rnd
                    rne rnf rng rnh rni rnj rnk rnl rnm rnn rno rnp rnq rnr rns rnt
                    rnu rnv rnw rnx rny rnz roa rob roc rod roe rof rog roh roi roj
                    rok rol rom ron roo rop roq ror ros rot rou rov row rox roy roz
                    rpa rpb rpc rpd rpe rpf rpg rph rpi rpj rpk rpl rpm rpn rpo rpp
                    rpq rpr rps rpt rpu rpv rpw rpx rpy rpz rqa rqb rqc rqd rqe rqf
                    rqg rqh rqi rqj rqk rql rqm rqn rqo rqp rqq rqr rqs rqt rqu rqv
                    rqw rqx rqy rqz rra rrb rrc rrd rre rrf rrg rrh rri rrj rrk rrl
                    rrm rrn rro rrp rrq rrr rrs rrt rru rrv rrw rrx rry rrz rsa rsb
                    rsc rsd rse rsf rsg rsh rsi rsj rsk rsl rsm rsn rso rsp rsq rsr
                    rss rst rsu rsv rsw rsx rsy rsz rta rtb rtc rtd rte rtf rtg rth
                    rti rtj rtk rtl rtm rtn rto rtp rtq rtr rts rtt rtu rtv rtw rtx
                    rty rtz rua rub ruc rud rue ruf rug ruh rui ruj ruk rul rum run
                    ruo rup ruq rur rus rut ruu ruv ruw rux ruy ruz rva rvb rvc rvd
                    rve rvf rvg rvh rvi rvj rvk rvl rvm rvn rvo rvp rvq rvr rvs rvt
                    rvu rvv rvw rvx rvy rvz rwa rwb rwc rwd rwe rwf rwg rwh rwi rwj
                    rwk rwl rwm rwn rwo rwp rwq rwr rws rwt rwu rwv rww rwx rwy rwz
                    rxa rxb rxc rxd rxe rxf rxg rxh rxi rxj rxk rxl rxm rxn rxo rxp
                    rxq rxr rxs rxt rxu rxv rxw rxx rxy rxz rya ryb ryc ryd rye ryf
                    ryg ryh ryi ryj ryk ryl rym ryn ryo ryp ryq ryr rys ryt ryu ryv
                    ryw ryx ryy ryz rza rzb rzc rzd rze rzf rzg rzh rzi rzj rzk rzl
                    rzm rzn rzo rzp rzq rzr rzs rzt rzu rzv rzw rzx rzy rzz saa sab
                    sac sad sae saf sag sah sai saj sak sal sam san sao sap saq sar
                    sas sat sau sav saw sax say saz sba sbb sbc sbd sbe sbf sbg sbh
                    sbi sbj sbk sbl sbm sbn sbo sbp sbq sbr sbs sbt sbu sbv sbw sbx
                    sby sbz sca scb scc scd sce scf scg sch sci scj sck scl scm scn
                    sco scp scq scr scs sct scu scv scw scx scy scz sda sdb sdc sdd
                    sde sdf sdg sdh sdi sdj sdk sdl sdm sdn sdo sdp sdq sdr sds sdt
                    sdu sdv sdw sdx sdy sdz sea seb sec sed see sef seg seh sei sej
                    sek sel sem sen seo sep seq ser ses set seu sev sew sex sey sez
                  zzg:f64[200,7,180] = pad[
                    padding_config=((0, 0, 0), (0, 0, 0), (0, 144, 0))
                  ] sfn 0.0
                  zzh:f64[200,7,180] = add_any sfk zzg
                  zzi:f64[200,7,54] = pad[
                    padding_config=((0, 0, 0), (0, 0, 0), (0, 36, 0))
                  ] sfm 0.0
                  zzj:f64[200,7,54] = add_any sfg zzi
                  zzk:f64[7,54] = reduce_sum[axes=(0,)] zzj
                  zzl:f64[1,7,54] = reshape[
                    dimensions=None
                    new_sizes=(1, 7, 54)
                  ] zzk
                  zzm:f64[7,54] = reduce_sum[axes=(0,)] zzl
                  zzn:f64[7,200,54] = transpose[permutation=(1, 0, 2)] zzj
                  zzo:f64[7,54,400] = dot_general[
                    dimension_numbers=(([1], [0]), ([0], [1]))
                    preferred_element_type=float64
                  ] zzn rbz
                  zzp:f64[7,400,54] = transpose[permutation=(0, 2, 1)] zzo
                  zzq:f64[7,200,400] = dot_general[
                    dimension_numbers=(([2], [2]), ([0], [0]))
                    preferred_element_type=float64
                  ] zzn rav
                  zzr:f64[200,7,400] = transpose[permutation=(1, 0, 2)] zzq
                  zzs:f64[200,7,400] = pjit[name=silu jaxpr=silu1] rbw rbx rby zzr
                  zzt:f64[7,400] = reduce_sum[axes=(0,)] zzs
                  zzu:f64[1,7,400] = reshape[
                    dimensions=None
                    new_sizes=(1, 7, 400)
                  ] zzt
                  zzv:f64[7,400] = reduce_sum[axes=(0,)] zzu
                  zzw:f64[7,200,400] = transpose[permutation=(1, 0, 2)] zzs
                  zzx:f64[7,400,400] = dot_general[
                    dimension_numbers=(([1], [0]), ([0], [1]))
                    preferred_element_type=float64
                  ] zzw rbv
                  zzy:f64[7,400,400] = transpose[permutation=(0, 2, 1)] zzx
                  zzz:f64[7,200,400] = dot_general[
                    dimension_numbers=(([2], [2]), ([0], [0]))
                    preferred_element_type=float64
                  ] zzw rau
                  baaa:f64[200,7,400] = transpose[permutation=(1, 0, 2)] zzz
                  baab:f64[200,7,400] = pjit[name=silu jaxpr=silu1] rbs rbt rbu baaa
                  baac:f64[7,400] = reduce_sum[axes=(0,)] baab
                  baad:f64[1,7,400] = reshape[
                    dimensions=None
                    new_sizes=(1, 7, 400)
                  ] baac
                  baae:f64[7,400] = reduce_sum[axes=(0,)] baad
                  baaf:f64[7,200,400] = transpose[permutation=(1, 0, 2)] baab
                  baag:f64[7,400,400] = dot_general[
                    dimension_numbers=(([1], [0]), ([0], [1]))
                    preferred_element_type=float64
                  ] baaf rbr
                  baah:f64[7,400,400] = transpose[permutation=(0, 2, 1)] baag
                  baai:f64[7,200,400] = dot_general[
                    dimension_numbers=(([2], [2]), ([0], [0]))
                    preferred_element_type=float64
                  ] baaf rat
                  baaj:f64[200,7,400] = transpose[permutation=(1, 0, 2)] baai
                  baak:f64[200,7,400] = pjit[name=silu jaxpr=silu1] rbo rbp rbq baaj
                  baal:f64[7,400] = reduce_sum[axes=(0,)] baak
                  baam:f64[1,7,400] = reshape[
                    dimensions=None
                    new_sizes=(1, 7, 400)
                  ] baal
                  baan:f64[7,400] = reduce_sum[axes=(0,)] baam
                  baao:f64[7,200,400] = transpose[permutation=(1, 0, 2)] baak
                  baap:f64[7,400,400] = dot_general[
                    dimension_numbers=(([1], [0]), ([0], [1]))
                    preferred_element_type=float64
                  ] baao rbn
                  baaq:f64[7,400,400] = transpose[permutation=(0, 2, 1)] baap
                  baar:f64[7,200,400] = dot_general[
                    dimension_numbers=(([2], [2]), ([0], [0]))
                    preferred_element_type=float64
                  ] baao ras
                  baas:f64[200,7,400] = transpose[permutation=(1, 0, 2)] baar
                  baat:f64[200,7,400] = pjit[name=silu jaxpr=silu1] rbk rbl rbm baas
                  baau:f64[7,400] = reduce_sum[axes=(0,)] baat
                  baav:f64[1,7,400] = reshape[
                    dimensions=None
                    new_sizes=(1, 7, 400)
                  ] baau
                  baaw:f64[7,400] = reduce_sum[axes=(0,)] baav
                  baax:f64[7,200,400] = transpose[permutation=(1, 0, 2)] baat
                  baay:f64[7,400,189] = dot_general[
                    dimension_numbers=(([1], [0]), ([0], [1]))
                    preferred_element_type=float64
                  ] baax rbj
                  baaz:f64[7,189,400] = transpose[permutation=(0, 2, 1)] baay
                  baba:f64[7,200,189] = dot_general[
                    dimension_numbers=(([2], [2]), ([0], [0]))
                    preferred_element_type=float64
                  ] baax rar
                  babb:f64[200,7,189] = transpose[permutation=(1, 0, 2)] baba
                  babc:f64[200,7,180] = slice[
                    limit_indices=(200, 7, 180)
                    start_indices=(0, 0, 0)
                    strides=None
                  ] babb
                  babd:f64[200,7,180] = div babc raq
                  babe:f64[200,7,180] = add_any zzh babd
                  babf:f64[7,189,400] = add_any raw baaz
                  babg:f64[7,400] = add_any rax baaw
                  babh:f64[7,400,400] = add_any ray baaq
                  babi:f64[7,400] = add_any raz baan
                  babj:f64[7,400,400] = add_any rba baah
                  babk:f64[7,400] = add_any rbb baae
                  babl:f64[7,400,400] = add_any rbc zzy
                  babm:f64[7,400] = add_any rbd zzv
                  babn:f64[7,400,54] = add_any rbe zzp
                  babo:f64[7,54] = add_any rbf zzm
                in (babf, babg, babh, babi, babj, babk, babl, babm, babn, babo, babe) }
              length=4
              linear=(False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, True, True, True, True, True, True, True, True, True, True, True, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False)
              num_carry=11
              num_consts=562
              reverse=True
              unroll=1
            ] gat fzy fux fuy fkn ewa ewb ewc ewd ewe ewf ewg ewh ewi ewj ewk ewl
              ewm ewx exe fkt fmj fmp fkz flf fmy fne fll flr fnn fnt flx fmd foc
              foi fpt fpu fpx fqv fqw fqz frx fry fsb fsz fta ftd fyu fzw fyy fzs
              fzc fzu gao cxm cww cxp epc epg cyg cxq cxr cxs cxt cxu cxv cyj cxy
              cxz cya cyb cyc cyd cye cyk ecg dod dob dbk dag dal cyq cyu cyy dam
              cmy dau dav daw dax day daz dba dbb dbc dbd dbm dbs ddb dbu dbv dbw
              dbx dby dbz dca dcb dcc dgg ddh ddl ddp ddt ddx deb def dej den der
              dev dez dfd dfh dfl dfp dgh dgc dgn dgo dgp dgq dgr dgs dgd dhl dhp
              dhq dhr dhs dht dhu dhm din dir dis dit diu div diw djp dio djq cnw
              dld dle dlf dlg dlh dli dlj dlk dll dlm dom dou dqz dra cnb drf drg
              drh dri drj drk drl drm drn dro drs drw dsa dse dsi dsm dsq dsu dsy
              dtc dtg dtk dto dts dtw dua duc dud due duf dug duh dui duj duk dul
              eao dup dut dux dvb dvf dvj dvn dvr dvv dvz dwd dwh dwl dwp dwt dwx
              dyz dyx dze dzf dzg dzh dzi dzj dzk dzl dzm dzn ebw ebx eby ebz eca
              ecb eci eco edb ecq ecr ecs ect ecu ecv ecw ecx ecy esc epx eba ebc
              ebi ebv ebk ebl ebm ebn ebo ebp ebq ebr ebs efs eft efu efv efw efx
              efy efz ega egb egc egd egq edj edw eec edt eep eei efc eev efi efq
              egu egv egw egx egy egz edq edx eeh edu eeu eej efh eew efj efr eha
              ehb ehc ehd ehe ehf eqf eqp eqb eqc erd eqr eqs err erf erg ert dqr
              epq ege egf egg egh egi egj egl ehg ehh ehi ehj ehk ehl eqe eqk eqa
              eqy eqq erm ere ers esd ese esf esg esh esi esr ess est esu esv esw
              esx esy esz eta etb etc etd evp eul euz ett euh etr evt evv dlq dlu
              dly dmc dmg dmk dmo dms dmw dna dne dni dnm dnq dnu dny crq dpb dpc
              dpd dpe dpf dpg dph dpi dpj dqo eru erv erw erx ery erz esj esk esl
              esm esn eso ete etf etg eth eti etj etk etl etm etn eto etp evh euk
              eur ets etz etq evs evu dai daq dfq dfr dfs dft dfu dfv dgl dge dhf
              dhg dhh dhi dhj dhk dhn dih dii dij dik dil dim dip djj djk djl djm
              djn djo dju dak dar dgm dgt dgu dgv dgw dgx dgy dgf dgz dha dhb dhc
              dhd dhe dhv dhw dhx dhy dhz dia dho dib dic did die dif dig dix diy
              diz dja djb djc diq djd dje djf djg djh dji djv ely ejx eiq eiy ehp
              ehx ehm ekr elc elz ema emb emc emd eme ekf eir ejg ehq eif ehn eks
              elg elq elr els elt elu elv emu emv eng gey gez gfa gfb gfc gfd gfe
              gff gfg gfh gfi gfj gfk cvo cvj cvp cwa cxh gfv cuf crs crt cru crv
              crw qem qen qeo qep qeq qer qes qet qeu qev qel qeg qek giy giz gja
              gjb gjc gjd gje gjf gjg gjh gji gjj gjk gjl gjm gjn gjo gjp gjq gjr
              gjs gjt gju gjv gjw gjx gjy gjz gka gkb gkc gkd gke gkf gkg gkh gki
              gkj gkk gkl gkm gkn gko gkp gkq gkr gks gkt gku gkv gkw gkx gky gkz
              gla glb glc gld gle glf glg glh gli glj glk gll glm gln glo glp glq
              glr gls glt glu glv glw glx gly glz gma gmb gmc gmd gme gmf gmg gmh
              gmi gmj gmk gml gmm gmn gmo gmp gmq gmr gms gmt gmu gmv gmw gmx gmy
              gmz gna gnb gnc gnd gne gnf gng gnh gni gnj gnk gnl gnm gnn gno gnp
              gnq gnr gns gnt gnu gnv gnw gnx gny gnz goa gob goc god goe gof gog
              goh goi goj gok gol gom gon goo gop goq gor gos got gou gov gow gox
              goy goz gpa gpb gpc gpd gpe gpf gpg gph gpi gpj gpk gpl gpm gpn gpo
              gpp gpq gpr gps gpt gpu gpv gpw gpx gpy gpz gqa gqb gqc gqd gqe gqf
              gqg gqh gqi gqj gqk gql gqm gqn gqo gqp gqq gqr gqs gqt gqu gqv gqw
              gqx gqy gqz gra grb grc grd gre grf grg grh gri grj grk grl grm grn
              gro grp grq grr grs grt gru grv grw grx gry grz gsa gsb gsc gsd gse
              gsf gsg gsh gsi gsj gsk gsl gsm gsn gso gsp gsq gsr gss gst gsu gsv
              gsw gsx gsy gsz gta gtb gtc gtd gte gtf gtg gth gti gtj gtk gtl gtm
              gtn gto gtp gtq gtr gts gtt gtu gtv gtw gtx gty gtz gua gub guc gud
              gue guf gug guh gui guj guk gul gum gun guo gup guq gur gus gut guu
              guv guw gux guy guz gva gvb gvc gvd gve gvf gvg gvh gvi gvj gvk gvl
              gvm gvn gvo gvp gvq gvr gvs gvt gvu gvv gvw gvx gvy gvz gwa gwb gwc
              gwd gwe gwf gwg gwh gwi gwj gwk gwl gwm gwn gwo gwp gwq gwr gws gwt
              gwu gwv gww gwx gwy gwz gxa gxb gxc gxd gxe gxf gxg gxh gxi gxj gxk
              gxl gxm gxn gxo gxp gxq gxr gxs gxt gxu gxv gxw gxx gxy gxz gya gyb
              gyc gyd gye gyf gyg gyh gyi gyj gyk gyl gym gyn gyo gyp gyq gyr gys
              gyt gyu gyv gyw gyx gyy gyz gza gzb gzc gzd gze gzf gzg gzh gzi gzj
              gzk gzl gzm gzn gzo gzp gzq gzr gzs gzt gzu gzv gzw gzx gzy gzz haa
              hab hac had hae haf hag hah hai haj hak hal ham han hao hap haq har
              has hat hau hav haw hax hay haz hba hbb hbc hbd hbe hbf hbg hbh hbi
              hbj hbk hbl hbm hbn hbo hbp hbq hbr hbs hbt hbu hbv hbw hbx hby hbz
              hca hcb hcc hcd hce hcf hcg hch hci hcj hck hcl hcm hcn hco hcp hcq
              hcr hcs hct hcu hcv hcw hcx hcy hcz hda hdb hdc hdd hde hdf hdg hdh
              hdi hdj hdk hdl hdm hdn hdo hdp hdq hdr hds hdt hdu hdv hdw hdx hdy
              hdz hea heb hec hed hee hef heg heh hei hej hek hel hem hen heo hep
              heq her hes het heu hev hew hex hey hez hfa hfb hfc hfd hfe hff hfg
              hfh hfi hfj hfk hfl hfm hfn hfo hfp hfq hfr hfs hft hfu hfv hfw hfx
              hfy hfz hga hgb hgc hgd hge hgf hgg hgh hgi hgj hgk hgl hgm hgn hgo
              hgp hgq hgr hgs hgt hgu hgv hgw hgx hgy hgz hha hhb hhc hhd hhe hhf
              hhg hhh hhi hhj hhk hhl hhm hhn hho hhp hhq hhr hhs hht hhu hhv hhw
              hhx hhy hhz hia hib hic hid hie hif hig hih hii hij hik hil him hin
              hio hip hiq hir his hit hiu hiv hiw hix hiy hiz hja hjb hjc hjd hje
              hjf hjg hjh hji hjj hjk hjl hjm hjn hjo hjp hjq hjr hjs hjt hju hjv
              hjw hjx hjy hjz hka hkb hkc hkd hke hkf hkg hkh hki hkj hkk hkl hkm
              hkn hko hkp hkq hkr hks hkt hku hkv hkw hkx hky hkz hla hlb hlc hld
              hle hlf hlg hlh hli hlj hlk hll hlm hln hlo hlp hlq hlr hls hlt hlu
              hlv hlw hlx hly hlz hma hmb hmc hmd hme hmf hmg hmh hmi hmj hmk hml
              hmm hmn hmo hmp hmq
            babp:f64[7,189,400] = add_any qdu qew
            babq:f64[7,400,400] = add_any qdr qey
            babr:f64[7,400,400] = add_any qdo qfa
            babs:f64[7,400,400] = add_any qdl qfc
            babt:f64[7,400,54] = add_any qdi qfe
            babu:f64[7,400] = integer_pow[y=1] qex
            babv:f64[7,400] = mul 0.09999999999999998 babu
            babw:f64[7,400] = mul 0.9 crz
            babx:f64[7,400] = add babv babw
            baby:f64[7,189,400] = integer_pow[y=1] babp
            babz:f64[7,189,400] = mul 0.09999999999999998 baby
            baca:f64[7,189,400] = mul 0.9 csa
            bacb:f64[7,189,400] = add babz baca
            bacc:f64[7,400] = integer_pow[y=1] qez
            bacd:f64[7,400] = mul 0.09999999999999998 bacc
            bace:f64[7,400] = mul 0.9 csb
            bacf:f64[7,400] = add bacd bace
            bacg:f64[7,400,400] = integer_pow[y=1] babq
            bach:f64[7,400,400] = mul 0.09999999999999998 bacg
            baci:f64[7,400,400] = mul 0.9 csc
            bacj:f64[7,400,400] = add bach baci
            back:f64[7,400] = integer_pow[y=1] qfb
            bacl:f64[7,400] = mul 0.09999999999999998 back
            bacm:f64[7,400] = mul 0.9 csd
            bacn:f64[7,400] = add bacl bacm
            baco:f64[7,400,400] = integer_pow[y=1] babr
            bacp:f64[7,400,400] = mul 0.09999999999999998 baco
            bacq:f64[7,400,400] = mul 0.9 cse
            bacr:f64[7,400,400] = add bacp bacq
            bacs:f64[7,400] = integer_pow[y=1] qfd
            bact:f64[7,400] = mul 0.09999999999999998 bacs
            bacu:f64[7,400] = mul 0.9 csf
            bacv:f64[7,400] = add bact bacu
            bacw:f64[7,400,400] = integer_pow[y=1] babs
            bacx:f64[7,400,400] = mul 0.09999999999999998 bacw
            bacy:f64[7,400,400] = mul 0.9 csg
            bacz:f64[7,400,400] = add bacx bacy
            bada:f64[7,54] = integer_pow[y=1] qff
            badb:f64[7,54] = mul 0.09999999999999998 bada
            badc:f64[7,54] = mul 0.9 csh
            badd:f64[7,54] = add badb badc
            bade:f64[7,400,54] = integer_pow[y=1] babt
            badf:f64[7,400,54] = mul 0.09999999999999998 bade
            badg:f64[7,400,54] = mul 0.9 csi
            badh:f64[7,400,54] = add badf badg
            badi:f64[7,400] = integer_pow[y=2] qex
            badj:f64[7,400] = mul 0.0010000000000000009 badi
            badk:f64[7,400] = mul 0.999 csj
            badl:f64[7,400] = add badj badk
            badm:f64[7,189,400] = integer_pow[y=2] babp
            badn:f64[7,189,400] = mul 0.0010000000000000009 badm
            bado:f64[7,189,400] = mul 0.999 csk
            badp:f64[7,189,400] = add badn bado
            badq:f64[7,400] = integer_pow[y=2] qez
            badr:f64[7,400] = mul 0.0010000000000000009 badq
            bads:f64[7,400] = mul 0.999 csl
            badt:f64[7,400] = add badr bads
            badu:f64[7,400,400] = integer_pow[y=2] babq
            badv:f64[7,400,400] = mul 0.0010000000000000009 badu
            badw:f64[7,400,400] = mul 0.999 csm
            badx:f64[7,400,400] = add badv badw
            bady:f64[7,400] = integer_pow[y=2] qfb
            badz:f64[7,400] = mul 0.0010000000000000009 bady
            baea:f64[7,400] = mul 0.999 csn
            baeb:f64[7,400] = add badz baea
            baec:f64[7,400,400] = integer_pow[y=2] babr
            baed:f64[7,400,400] = mul 0.0010000000000000009 baec
            baee:f64[7,400,400] = mul 0.999 cso
            baef:f64[7,400,400] = add baed baee
            baeg:f64[7,400] = integer_pow[y=2] qfd
            baeh:f64[7,400] = mul 0.0010000000000000009 baeg
            baei:f64[7,400] = mul 0.999 csp
            baej:f64[7,400] = add baeh baei
            baek:f64[7,400,400] = integer_pow[y=2] babs
            bael:f64[7,400,400] = mul 0.0010000000000000009 baek
            baem:f64[7,400,400] = mul 0.999 csq
            baen:f64[7,400,400] = add bael baem
            baeo:f64[7,54] = integer_pow[y=2] qff
            baep:f64[7,54] = mul 0.0010000000000000009 baeo
            baeq:f64[7,54] = mul 0.999 csr
            baer:f64[7,54] = add baep baeq
            baes:f64[7,400,54] = integer_pow[y=2] babt
            baet:f64[7,400,54] = mul 0.0010000000000000009 baes
            baeu:f64[7,400,54] = mul 0.999 css
            baev:f64[7,400,54] = add baet baeu
            baew:bool[] = lt cst 2147483647
            baex:i32[] = add cst 1
            baey:i32[] = pjit[
              name=_where
              jaxpr={ lambda ; ec:bool[] ed:i32[] ee:i32[]. let
                  ef:i32[] = select_n ec ee ed
                in (ef,) }
            ] baew baex 2147483647
            baez:f64[] = pow 0.9 baey
            bafa:f64[] = sub 1.0 baez
            bafb:f64[7,400] = div babx bafa
            bafc:f64[7,189,400] = div bacb bafa
            bafd:f64[7,400] = div bacf bafa
            bafe:f64[7,400,400] = div bacj bafa
            baff:f64[7,400] = div bacn bafa
            bafg:f64[7,400,400] = div bacr bafa
            bafh:f64[7,400] = div bacv bafa
            bafi:f64[7,400,400] = div bacz bafa
            bafj:f64[7,54] = div badd bafa
            bafk:f64[7,400,54] = div badh bafa
            bafl:f64[] = pow 0.999 baey
            bafm:f64[] = sub 1.0 bafl
            bafn:f64[7,400] = div badl bafm
            bafo:f64[7,189,400] = div badp bafm
            bafp:f64[7,400] = div badt bafm
            bafq:f64[7,400,400] = div badx bafm
            bafr:f64[7,400] = div baeb bafm
            bafs:f64[7,400,400] = div baef bafm
            baft:f64[7,400] = div baej bafm
            bafu:f64[7,400,400] = div baen bafm
            bafv:f64[7,54] = div baer bafm
            bafw:f64[7,400,54] = div baev bafm
            bafx:f64[7,400] = add bafn 0.0
            bafy:f64[7,400] = sqrt bafx
            bafz:f64[7,400] = add bafy 1e-08
            baga:f64[7,400] = div bafb bafz
            bagb:f64[7,189,400] = add bafo 0.0
            bagc:f64[7,189,400] = sqrt bagb
            bagd:f64[7,189,400] = add bagc 1e-08
            bage:f64[7,189,400] = div bafc bagd
            bagf:f64[7,400] = add bafp 0.0
            bagg:f64[7,400] = sqrt bagf
            bagh:f64[7,400] = add bagg 1e-08
            bagi:f64[7,400] = div bafd bagh
            bagj:f64[7,400,400] = add bafq 0.0
            bagk:f64[7,400,400] = sqrt bagj
            bagl:f64[7,400,400] = add bagk 1e-08
            bagm:f64[7,400,400] = div bafe bagl
            bagn:f64[7,400] = add bafr 0.0
            bago:f64[7,400] = sqrt bagn
            bagp:f64[7,400] = add bago 1e-08
            bagq:f64[7,400] = div baff bagp
            bagr:f64[7,400,400] = add bafs 0.0
            bags:f64[7,400,400] = sqrt bagr
            bagt:f64[7,400,400] = add bags 1e-08
            bagu:f64[7,400,400] = div bafg bagt
            bagv:f64[7,400] = add baft 0.0
            bagw:f64[7,400] = sqrt bagv
            bagx:f64[7,400] = add bagw 1e-08
            bagy:f64[7,400] = div bafh bagx
            bagz:f64[7,400,400] = add bafu 0.0
            baha:f64[7,400,400] = sqrt bagz
            bahb:f64[7,400,400] = add baha 1e-08
            bahc:f64[7,400,400] = div bafi bahb
            bahd:f64[7,54] = add bafv 0.0
            bahe:f64[7,54] = sqrt bahd
            bahf:f64[7,54] = add bahe 1e-08
            bahg:f64[7,54] = div bafj bahf
            bahh:f64[7,400,54] = add bafw 0.0
            bahi:f64[7,400,54] = sqrt bahh
            bahj:f64[7,400,54] = add bahi 1e-08
            bahk:f64[7,400,54] = div bafk bahj
            bahl:f64[7,400] = mul -0.001 baga
            bahm:f64[7,189,400] = mul -0.001 bage
            bahn:f64[7,400] = mul -0.001 bagi
            baho:f64[7,400,400] = mul -0.001 bagm
            bahp:f64[7,400] = mul -0.001 bagq
            bahq:f64[7,400,400] = mul -0.001 bagu
            bahr:f64[7,400] = mul -0.001 bagy
            bahs:f64[7,400,400] = mul -0.001 bahc
            baht:f64[7,54] = mul -0.001 bahg
            bahu:f64[7,400,54] = mul -0.001 bahk
            bahv:f64[7,400] = add cmn bahl
            bahw:f64[7,189,400] = add crs bahm
            bahx:f64[7,400] = add cmo bahn
            bahy:f64[7,400,400] = add crt baho
            bahz:f64[7,400] = add cmp bahp
            baia:f64[7,400,400] = add cru bahq
            baib:f64[7,400] = add cmq bahr
            baic:f64[7,400,400] = add crv bahs
            baid:f64[7,54] = add cmr baht
            baie:f64[7,400,54] = add crw bahu
          in (qdf, qbn, bahv, bahw, bahx, bahy, bahz, baia, baib, baic, baid, baie,
            baey, babx, bacb, bacf, bacj, bacn, bacr, bacv, bacz, badd, badh, badl,
            badp, badt, badx, baeb, baef, baej, baen, baer, baev) }
      )
      linear=(False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False)
    ] cdg ccz cda bwp bwq bwr bws cbu cbw cby cca ccc bwt bwu bwv bww bwx bwy bwz
      bxa bxb bxc bxd bxe bxf bxg bxh bxi bxj bxk bxl bxm bxn bxo bxp bxq bxr bxs
      bxt bxu bxv bxw bxx bxy bxz bya byb byc byd bye byf byg byh byi byj byk byl
      bym byn byo byp byq byr bys byt byu byv byw byx byy byz bza bzb bzc bzd bze
      bzf bzg bzh bzi bzj bzk bzl bzm bzn bzo bzp bzq bzr bzs bzt bzu bzv bzw bzx
      bzy bzz caa cab cac cad cae caf cag cah cai caj cak cal cam can cao cap caq
      car cas cat cau cav caw cax cay caz cba cbb cbc cbd cbe cbf cbg cbh cbi cbj
      cbk cbl cbm cbn cbo cbp cbq cbr cbs cbv cbx cbz ccb ccd cdc cdb ccf ccg cch
      cci ccj cck ccl ccm ccn cco ccp ccq ccr ccs cct ccu ccv ccw ccx ccy cce cbu
      cbv cbw cbx cby cbz cca ccb ccc ccd cce ccf ccg cch cci ccj cck ccl ccm ccn
      cco ccp ccq ccr ccs cct ccu ccv ccw ccx ccy
  in (cbt, cdj, cdk, cdl, cdm, cdn, cdo, cdp, cdq, cdr, cds, cdt, cdu, cdv, cdw,
    cdx, cdy, cdz, cea, ceb, cec, ced, cee, cef, ceg, ceh, cei, cej, cek, cel, cem,
    cen, cdh, cdi) }, ())
During handling of the above exception, another exception occurred:
Traceback (most recent call last):
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/mlir.py", line 1810, in _lower_jaxpr_to_fun_cached
    func_op = ctx.cached_primitive_lowerings[key]
KeyError: (None, let silu = { lambda ; a:f64[200,7,400]. let
    b:f64[200,7,400] = logistic a
    c:f64[200,7,400] = mul a b
    d:f64[200,7,400] = sub 1.0 b
    e:f64[200,7,400] = mul b d
  in (c, b, e) } in
let softplus = { lambda ; f:f64[200,7,36] g:f64[200,7,36] h:f64[] i:f64[200,7,36]. let
    j:bool[200,7,36] = eq f inf
    k:f64[200,7,36] = select_n j f g
    l:f64[200,7,36] = pjit[
      name=logaddexp
      jaxpr={ lambda ; m:f64[200,7,36] n:f64[]. let
          o:f64[200,7,36] = sub m n
          p:bool[200,7,36] = ne o o
          q:f64[200,7,36] = max m n
          r:f64[200,7,36] = abs o
          s:f64[200,7,36] = neg r
          t:f64[200,7,36] = exp s
          u:f64[200,7,36] = log1p t
          v:f64[200,7,36] = add q u
          w:f64[200,7,36] = add m n
          x:f64[200,7,36] = select_n p v w
        in (x,) }
    ] f h
    y:bool[200,7,36] = eq l inf
    z:f64[200,7,36] = select_n y l i
    ba:f64[200,7,36] = sub k z
    bb:f64[200,7,36] = exp ba
  in (l, bb) } in
let cross = { lambda ; bc:f64[200,7,3] bd:f64[200,7,3] be:i32[1] bf:i32[1] bg:i32[1]
    bh:i32[1] bi:i32[1] bj:i32[1]. let
    bk:f64[200,7] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 1)
      unique_indices=True
    ] bc be
    bl:f64[200,7] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 1)
      unique_indices=True
    ] bd bf
    bm:f64[200,7] = mul bk bl
    bn:f64[200,7] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 1)
      unique_indices=True
    ] bc bg
    bo:f64[200,7] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 1)
      unique_indices=True
    ] bd bh
    bp:f64[200,7] = mul bn bo
    bq:f64[200,7] = sub bm bp
    br:f64[200,7,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(200, 7, 1)
    ] bq
    bs:f64[200,7] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 1)
      unique_indices=True
    ] bd bi
    bt:f64[200,7] = mul bn bs
    bu:f64[200,7] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 1)
      unique_indices=True
    ] bc bj
    bv:f64[200,7] = mul bu bl
    bw:f64[200,7] = sub bt bv
    bx:f64[200,7,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(200, 7, 1)
    ] bw
    by:f64[200,7] = mul bu bo
    bz:f64[200,7] = mul bk bs
    ca:f64[200,7] = sub by bz
    cb:f64[200,7,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(200, 7, 1)
    ] ca
    cc:f64[200,7,3] = concatenate[dimension=2] br bx cb
  in (cc, bl, bk, bo, bn, bs, bu) } in
let _take = { lambda ; cd:f64[200,7,13,4] ce:i64[4,1]. let
    cf:f64[200,7,4,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 3), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 1, 4)
      unique_indices=False
    ] cd ce
  in (cf,) } in
let cross1 = { lambda ; cg:f64[200,7,18,3] ch:f64[1,1,18] ci:i32[1] cj:f64[1,1,18]
    ck:i32[1] cl:f64[1,1,18] cm:i32[1] cn:f64[1,1,18] co:f64[1,1,18] cp:f64[1,1,18]. let
    cq:f64[200,7,18] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 18, 1)
      unique_indices=True
    ] cg ci
    cr:f64[200,7,18] = mul ch cq
    cs:f64[200,7,18] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 18, 1)
      unique_indices=True
    ] cg ck
    ct:f64[200,7,18] = mul cj cs
    cu:f64[200,7,18] = sub cr ct
    cv:f64[200,7,18,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(200, 7, 18, 1)
    ] cu
    cw:f64[200,7,18] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 18, 1)
      unique_indices=True
    ] cg cm
    cx:f64[200,7,18] = mul cl cw
    cy:f64[200,7,18] = mul cn cq
    cz:f64[200,7,18] = sub cx cy
    da:f64[200,7,18,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(200, 7, 18, 1)
    ] cz
    db:f64[200,7,18] = mul co cs
    dc:f64[200,7,18] = mul cp cw
    dd:f64[200,7,18] = sub db dc
    de:f64[200,7,18,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(200, 7, 18, 1)
    ] dd
    df:f64[200,7,18,3] = concatenate[dimension=3] cv da de
  in (df,) } in
let _take1 = { lambda ; dg:f64[200,7,12,1,3] dh:i64[1]. let
    di:f64[200,7,12,3] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2, 3), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 12, 1, 3)
      unique_indices=False
    ] dg dh
  in (di,) } in
let cross2 = { lambda ; dj:f64[200,7,13,3] dk:i32[1] dl:f64[1,1,13] dm:i32[1] dn:f64[1,1,13]
    do:f64[1,1,13] dp:i32[1] dq:f64[1,1,13] dr:f64[1,1,13] ds:f64[1,1,13]. let
    dt:f64[200,7,13] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 13, 1)
      unique_indices=True
    ] dj dk
    du:f64[200,7,13] = mul dt dl
    dv:f64[200,7,13] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 13, 1)
      unique_indices=True
    ] dj dm
    dw:f64[200,7,13] = mul dv dn
    dx:f64[200,7,13] = sub du dw
    dy:f64[200,7,13,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(200, 7, 13, 1)
    ] dx
    dz:f64[200,7,13] = mul dv do
    ea:f64[200,7,13] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 13, 1)
      unique_indices=True
    ] dj dp
    eb:f64[200,7,13] = mul ea dq
    ec:f64[200,7,13] = sub dz eb
    ed:f64[200,7,13,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(200, 7, 13, 1)
    ] ec
    ee:f64[200,7,13] = mul ea dr
    ef:f64[200,7,13] = mul dt ds
    eg:f64[200,7,13] = sub ee ef
    eh:f64[200,7,13,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(200, 7, 13, 1)
    ] eg
    ei:f64[200,7,13,3] = concatenate[dimension=3] dy ed eh
  in (ei,) } in
let _take2 = { lambda ; ej:f64[200,7,1,3] ek:i64[4,1]. let
    el:f64[200,7,4,3] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 3), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 1, 3)
      unique_indices=False
    ] ej ek
  in (el,) } in
let _take3 = { lambda ; em:f64[200,7,13,3] en:i64[4,1]. let
    eo:f64[200,7,4,3] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 3), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 1, 3)
      unique_indices=False
    ] em en
  in (eo,) } in
let cross3 = { lambda ; ep:f64[200,7,4,3] eq:f64[200,7,4,3] er:i32[1] es:i32[1] et:i32[1]
    eu:i32[1] ev:i32[1] ew:i32[1]. let
    ex:f64[200,7,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 4, 1)
      unique_indices=True
    ] ep er
    ey:f64[200,7,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 4, 1)
      unique_indices=True
    ] eq es
    ez:f64[200,7,4] = mul ex ey
    fa:f64[200,7,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 4, 1)
      unique_indices=True
    ] ep et
    fb:f64[200,7,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 4, 1)
      unique_indices=True
    ] eq eu
    fc:f64[200,7,4] = mul fa fb
    fd:f64[200,7,4] = sub ez fc
    fe:f64[200,7,4,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(200, 7, 4, 1)
    ] fd
    ff:f64[200,7,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 4, 1)
      unique_indices=True
    ] eq ev
    fg:f64[200,7,4] = mul fa ff
    fh:f64[200,7,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 4, 1)
      unique_indices=True
    ] ep ew
    fi:f64[200,7,4] = mul fh ey
    fj:f64[200,7,4] = sub fg fi
    fk:f64[200,7,4,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(200, 7, 4, 1)
    ] fj
    fl:f64[200,7,4] = mul fh fb
    fm:f64[200,7,4] = mul ex ff
    fn:f64[200,7,4] = sub fl fm
    fo:f64[200,7,4,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(200, 7, 4, 1)
    ] fn
    fp:f64[200,7,4,3] = concatenate[dimension=3] fe fk fo
  in (fp, ey, ex, fb, fa, ff, fh) } in
let _take4 = { lambda ; fq:f64[200,7,13,3] fr:i64[13,1]. let
    fs:f64[200,7,13,3] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 3), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 1, 3)
      unique_indices=False
    ] fq fr
  in (fs,) } in
let jaxpr = { lambda ; ft:f64[] fu:f64[]. let fv:f64[] = add ft fu in (fv,) } in
let _take5 = { lambda ; fw:f64[200,7,14,3] fx:i32[13,1]. let
    fy:f64[200,7,13,3] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 3), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 1, 3)
      unique_indices=False
    ] fw fx
  in (fy,) } in
let _take6 = { lambda ; fz:f64[200,7,13,3] ga:i64[18,1]. let
    gb:f64[200,7,18,3] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 3), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 1, 3)
      unique_indices=False
    ] fz ga
  in (gb,) } in
let cross4 = { lambda ; gc:f64[200,7,18,3] gd:f64[200,7,18,3] ge:i32[1] gf:i32[1]
    gg:i32[1] gh:i32[1] gi:i32[1] gj:i32[1]. let
    gk:f64[200,7,18] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 18, 1)
      unique_indices=True
    ] gc ge
    gl:f64[200,7,18] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 18, 1)
      unique_indices=True
    ] gd gf
    gm:f64[200,7,18] = mul gk gl
    gn:f64[200,7,18] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 18, 1)
      unique_indices=True
    ] gc gg
    go:f64[200,7,18] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 18, 1)
      unique_indices=True
    ] gd gh
    gp:f64[200,7,18] = mul gn go
    gq:f64[200,7,18] = sub gm gp
    gr:f64[200,7,18,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(200, 7, 18, 1)
    ] gq
    gs:f64[200,7,18] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 18, 1)
      unique_indices=True
    ] gd gi
    gt:f64[200,7,18] = mul gn gs
    gu:f64[200,7,18] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 18, 1)
      unique_indices=True
    ] gc gj
    gv:f64[200,7,18] = mul gu gl
    gw:f64[200,7,18] = sub gt gv
    gx:f64[200,7,18,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(200, 7, 18, 1)
    ] gw
    gy:f64[200,7,18] = mul gu go
    gz:f64[200,7,18] = mul gk gs
    ha:f64[200,7,18] = sub gy gz
    hb:f64[200,7,18,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(200, 7, 18, 1)
    ] ha
    hc:f64[200,7,18,3] = concatenate[dimension=3] gr gx hb
  in (hc, gl, gk, go, gn, gs, gu) } in
let cross5 = { lambda ; hd:f64[200,7,1,3] he:f64[200,7,1,6,3] hf:i32[1] hg:i32[1]
    hh:i32[1] hi:i32[1] hj:i32[1] hk:i32[1]. let
    hl:f64[200,7,1] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 1, 1)
      unique_indices=True
    ] hd hf
    hm:f64[200,7,1,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(200, 7, 1, 1)
    ] hl
    hn:f64[200,7,1,6] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2, 3), collapsed_slice_dims=(4,), start_index_map=(4,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 1, 6, 1)
      unique_indices=True
    ] he hg
    ho:f64[200,7,1,6] = mul hm hn
    hp:f64[200,7,1] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 1, 1)
      unique_indices=True
    ] hd hh
    hq:f64[200,7,1,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(200, 7, 1, 1)
    ] hp
    hr:f64[200,7,1,6] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2, 3), collapsed_slice_dims=(4,), start_index_map=(4,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 1, 6, 1)
      unique_indices=True
    ] he hi
    hs:f64[200,7,1,6] = mul hq hr
    ht:f64[200,7,1,6] = sub ho hs
    hu:f64[200,7,1,6,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2, 3)
      shape=(200, 7, 1, 6, 1)
    ] ht
    hv:f64[200,7,1,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(200, 7, 1, 1)
    ] hp
    hw:f64[200,7,1,6] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2, 3), collapsed_slice_dims=(4,), start_index_map=(4,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 1, 6, 1)
      unique_indices=True
    ] he hj
    hx:f64[200,7,1,6] = mul hv hw
    hy:f64[200,7,1] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 1, 1)
      unique_indices=True
    ] hd hk
    hz:f64[200,7,1,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(200, 7, 1, 1)
    ] hy
    ia:f64[200,7,1,6] = mul hz hn
    ib:f64[200,7,1,6] = sub hx ia
    ic:f64[200,7,1,6,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2, 3)
      shape=(200, 7, 1, 6, 1)
    ] ib
    id:f64[200,7,1,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(200, 7, 1, 1)
    ] hy
    ie:f64[200,7,1,6] = mul id hr
    if:f64[200,7,1,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(200, 7, 1, 1)
    ] hl
    ig:f64[200,7,1,6] = mul if hw
    ih:f64[200,7,1,6] = sub ie ig
    ii:f64[200,7,1,6,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2, 3)
      shape=(200, 7, 1, 6, 1)
    ] ih
    ij:f64[200,7,1,6,3] = concatenate[dimension=4] hu ic ii
  in (ij, hn, hm, hr, hq, hw, hv, hz, id, if) } in
let _take7 = { lambda ; ik:f64[200,7,18,3] il:i64[4,1]. let
    im:f64[200,7,4,3] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 3), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 1, 3)
      unique_indices=False
    ] ik il
  in (im,) } in
let cross6 = { lambda ; in:f64[200,7,12,3] io:f64[200,7,12,3] ip:i32[1] iq:i32[1]
    ir:i32[1] is:i32[1] it:i32[1] iu:i32[1]. let
    iv:f64[200,7,12] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 12, 1)
      unique_indices=True
    ] in ip
    iw:f64[200,7,12] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 12, 1)
      unique_indices=True
    ] io iq
    ix:f64[200,7,12] = mul iv iw
    iy:f64[200,7,12] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 12, 1)
      unique_indices=True
    ] in ir
    iz:f64[200,7,12] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 12, 1)
      unique_indices=True
    ] io is
    ja:f64[200,7,12] = mul iy iz
    jb:f64[200,7,12] = sub ix ja
    jc:f64[200,7,12,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(200, 7, 12, 1)
    ] jb
    jd:f64[200,7,12] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 12, 1)
      unique_indices=True
    ] io it
    je:f64[200,7,12] = mul iy jd
    jf:f64[200,7,12] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 12, 1)
      unique_indices=True
    ] in iu
    jg:f64[200,7,12] = mul jf iw
    jh:f64[200,7,12] = sub je jg
    ji:f64[200,7,12,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(200, 7, 12, 1)
    ] jh
    jj:f64[200,7,12] = mul jf iz
    jk:f64[200,7,12] = mul iv jd
    jl:f64[200,7,12] = sub jj jk
    jm:f64[200,7,12,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(200, 7, 12, 1)
    ] jl
    jn:f64[200,7,12,3] = concatenate[dimension=3] jc ji jm
  in (jn, iw, iv, iz, iy, jd, jf) } in
let _take8 = { lambda ; jo:f64[200,7,18] jp:i64[4,1]. let
    jq:f64[200,7,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 1)
      unique_indices=False
    ] jo jp
  in (jq,) } in
let cross7 = { lambda ; jr:f64[200,7,13,3] js:f64[200,7,13,3] jt:i32[1] ju:i32[1]
    jv:i32[1] jw:i32[1] jx:i32[1] jy:i32[1]. let
    jz:f64[200,7,13] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 13, 1)
      unique_indices=True
    ] jr jt
    ka:f64[200,7,13] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 13, 1)
      unique_indices=True
    ] js ju
    kb:f64[200,7,13] = mul jz ka
    kc:f64[200,7,13] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 13, 1)
      unique_indices=True
    ] jr jv
    kd:f64[200,7,13] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 13, 1)
      unique_indices=True
    ] js jw
    ke:f64[200,7,13] = mul kc kd
    kf:f64[200,7,13] = sub kb ke
    kg:f64[200,7,13,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(200, 7, 13, 1)
    ] kf
    kh:f64[200,7,13] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 13, 1)
      unique_indices=True
    ] js jx
    ki:f64[200,7,13] = mul kc kh
    kj:f64[200,7,13] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 13, 1)
      unique_indices=True
    ] jr jy
    kk:f64[200,7,13] = mul kj ka
    kl:f64[200,7,13] = sub ki kk
    km:f64[200,7,13,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(200, 7, 13, 1)
    ] kl
    kn:f64[200,7,13] = mul kj kd
    ko:f64[200,7,13] = mul jz kh
    kp:f64[200,7,13] = sub kn ko
    kq:f64[200,7,13,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(200, 7, 13, 1)
    ] kp
    kr:f64[200,7,13,3] = concatenate[dimension=3] kg km kq
  in (kr, ka, jz, kd, kc, kh, kj) } in
let cross8 = { lambda ; ep:f64[200,7,4,3] eq:f64[200,7,4,3] er:i32[1] es:i32[1] et:i32[1]
    eu:i32[1] ev:i32[1] ew:i32[1]. let
    ex:f64[200,7,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 4, 1)
      unique_indices=True
    ] ep er
    ey:f64[200,7,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 4, 1)
      unique_indices=True
    ] eq es
    fa:f64[200,7,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 4, 1)
      unique_indices=True
    ] ep et
    fb:f64[200,7,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 4, 1)
      unique_indices=True
    ] eq eu
    ff:f64[200,7,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 4, 1)
      unique_indices=True
    ] eq ev
    fh:f64[200,7,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 4, 1)
      unique_indices=True
    ] ep ew
  in (ey, ex, fb, fa, ff, fh) } in
let _take9 = { lambda ; ks:f64[200,7,13,3,3] kt:i64[4,1]. let
    ku:f64[200,7,4,3,3] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 3, 4), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 1, 3, 3)
      unique_indices=False
    ] ks kt
  in (ku,) } in
let logaddexp = { lambda ; m:f64[200,7,36] n:f64[]. let
    o:f64[200,7,36] = sub m n
    p:bool[200,7,36] = ne o o
    q:f64[200,7,36] = max m n
    r:f64[200,7,36] = abs o
    s:f64[200,7,36] = neg r
    t:f64[200,7,36] = exp s
    u:f64[200,7,36] = log1p t
    v:f64[200,7,36] = add q u
    w:f64[200,7,36] = add m n
    x:f64[200,7,36] = select_n p v w
  in (x,) } in
let jaxpr1 = { lambda ; kv:f64[200,7,18,18] kw:f64[200,7,18,18]. let
    kx:f64[200,7,18,18] = dot_general[
      dimension_numbers=(([3], [3]), ([0, 1], [0, 1]))
      precision=(Precision.HIGHEST, Precision.HIGHEST)
    ] kv kw
    ky:f64[200,7,18,18] = transpose[permutation=(0, 1, 3, 2)] kx
  in (ky,) } in
let jaxpr2 = { lambda ; kz:f64[200,7,18,18] la:f64[200,7,18,18]. let
    lb:f64[200,7,18,18] = pjit[
      name=_cho_solve
      jaxpr={ lambda ; lc:f64[200,7,18,18] ld:f64[200,7,18,18]. let
          le:f64[200,7,18,18,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2, 3)
            shape=(200, 7, 18, 18, 1)
          ] ld
          lf:f64[200,7,18,1,18] = transpose[permutation=(0, 1, 3, 4, 2)] le
          lg:f64[200,7,18,18] = reshape[
            dimensions=None
            new_sizes=(200, 7, 18, 18)
          ] lf
          lh:f64[200,7,18,18] = triangular_solve[
            conjugate_a=False
            left_side=True
            lower=False
            transpose_a=True
            unit_diagonal=False
          ] lc lg
          li:f64[200,7,18,1,18] = reshape[
            dimensions=None
            new_sizes=(200, 7, 18, 1, 18)
          ] lh
          lj:f64[200,7,18,1,18] = slice[
            limit_indices=(200, 7, 18, 1, 18)
            start_indices=(0, 0, 0, 0, 0)
            strides=None
          ] li
          lk:f64[200,7,18,18,1] = transpose[permutation=(0, 1, 4, 2, 3)] lj
          ll:f64[200,7,18,18] = squeeze[dimensions=(4,)] lk
          lm:f64[200,7,18,18,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2, 3)
            shape=(200, 7, 18, 18, 1)
          ] ll
          ln:f64[200,7,18,1,18] = transpose[permutation=(0, 1, 3, 4, 2)] lm
          lo:f64[200,7,18,18] = reshape[
            dimensions=None
            new_sizes=(200, 7, 18, 18)
          ] ln
          lp:f64[200,7,18,18] = triangular_solve[
            conjugate_a=False
            left_side=True
            lower=False
            transpose_a=False
            unit_diagonal=False
          ] lc lo
          lq:f64[200,7,18,1,18] = reshape[
            dimensions=None
            new_sizes=(200, 7, 18, 1, 18)
          ] lp
          lr:f64[200,7,18,1,18] = slice[
            limit_indices=(200, 7, 18, 1, 18)
            start_indices=(0, 0, 0, 0, 0)
            strides=None
          ] lq
          ls:f64[200,7,18,18,1] = transpose[permutation=(0, 1, 4, 2, 3)] lr
          lt:f64[200,7,18,18] = squeeze[dimensions=(4,)] ls
        in (lt,) }
    ] kz la
  in (lb,) } in
let jaxpr3 = { lambda ; lu:f64[200,7,18,18] lv:f64[200,7,18,18]. let
    lw:f64[200,7,18,18] = pjit[
      name=_cho_solve
      jaxpr={ lambda ; lc:f64[200,7,18,18] ld:f64[200,7,18,18]. let
          le:f64[200,7,18,18,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2, 3)
            shape=(200, 7, 18, 18, 1)
          ] ld
          lf:f64[200,7,18,1,18] = transpose[permutation=(0, 1, 3, 4, 2)] le
          lg:f64[200,7,18,18] = reshape[
            dimensions=None
            new_sizes=(200, 7, 18, 18)
          ] lf
          lh:f64[200,7,18,18] = triangular_solve[
            conjugate_a=False
            left_side=True
            lower=False
            transpose_a=True
            unit_diagonal=False
          ] lc lg
          li:f64[200,7,18,1,18] = reshape[
            dimensions=None
            new_sizes=(200, 7, 18, 1, 18)
          ] lh
          lj:f64[200,7,18,1,18] = slice[
            limit_indices=(200, 7, 18, 1, 18)
            start_indices=(0, 0, 0, 0, 0)
            strides=None
          ] li
          lk:f64[200,7,18,18,1] = transpose[permutation=(0, 1, 4, 2, 3)] lj
          ll:f64[200,7,18,18] = squeeze[dimensions=(4,)] lk
          lm:f64[200,7,18,18,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2, 3)
            shape=(200, 7, 18, 18, 1)
          ] ll
          ln:f64[200,7,18,1,18] = transpose[permutation=(0, 1, 3, 4, 2)] lm
          lo:f64[200,7,18,18] = reshape[
            dimensions=None
            new_sizes=(200, 7, 18, 18)
          ] ln
          lp:f64[200,7,18,18] = triangular_solve[
            conjugate_a=False
            left_side=True
            lower=False
            transpose_a=False
            unit_diagonal=False
          ] lc lo
          lq:f64[200,7,18,1,18] = reshape[
            dimensions=None
            new_sizes=(200, 7, 18, 1, 18)
          ] lp
          lr:f64[200,7,18,1,18] = slice[
            limit_indices=(200, 7, 18, 1, 18)
            start_indices=(0, 0, 0, 0, 0)
            strides=None
          ] lq
          ls:f64[200,7,18,18,1] = transpose[permutation=(0, 1, 4, 2, 3)] lr
          lt:f64[200,7,18,18] = squeeze[dimensions=(4,)] ls
        in (lt,) }
    ] lu lv
  in (lw,) } in
let cross9 = { lambda ; lx:f64[200,7,3] ly:f64[200,7,3] lz:i32[1] ma:i32[1] mb:i32[1]
    mc:i32[1] md:i32[1] me:i32[1]. let
    mf:f64[200,7] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 1)
      unique_indices=True
    ] lx lz
    mg:f64[200,7] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 1)
      unique_indices=True
    ] ly ma
    mh:f64[200,7] = mul mf mg
    mi:f64[200,7] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 1)
      unique_indices=True
    ] lx mb
    mj:f64[200,7] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 1)
      unique_indices=True
    ] ly mc
    mk:f64[200,7] = mul mi mj
    ml:f64[200,7] = sub mh mk
    mm:f64[200,7,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(200, 7, 1)
    ] ml
    mn:f64[200,7] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 1)
      unique_indices=True
    ] ly md
    mo:f64[200,7] = mul mi mn
    mp:f64[200,7] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(200, 7, 1)
      unique_indices=True
    ] lx me
    mq:f64[200,7] = mul mp mg
    mr:f64[200,7] = sub mo mq
    ms:f64[200,7,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(200, 7, 1)
    ] mr
    mt:f64[200,7] = mul mp mj
    mu:f64[200,7] = mul mf mn
    mv:f64[200,7] = sub mt mu
    mw:f64[200,7,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(200, 7, 1)
    ] mv
    mx:f64[200,7,3] = concatenate[dimension=2] mm ms mw
  in (mx, mg, mf, mj, mi, mn, mp) } in
let remainder = { lambda ; my:f64[200,7] mz:f64[] na:bool[]. let
    nb:f64[200,7] = rem my mz
    nc:bool[200,7] = lt nb 0.0
    nd:bool[200,7] = ne nc na
    ne:bool[200,7] = ne nb 0.0
    nf:bool[200,7] = and nd ne
    ng:f64[200,7] = add nb mz
    nh:f64[200,7] = select_n nf nb ng
  in (nh, nf) } in
let clip = { lambda ; ni:f64[200,7] nj:f64[] nk:f64[200,7] nl:f64[200,7] nm:f64[200,7]
    nn:f64[200,7] no:f64[] np:f64[200,7] nq:f64[200,7] nr:f64[200,7] ns:f64[200,7]. let
    nt:f64[200,7] = max nj ni
    nu:bool[200,7] = eq ni nt
    nv:f64[200,7] = select_n nu nk nl
    nw:bool[200,7] = eq nj nt
    nx:f64[200,7] = select_n nw nm nn
    ny:f64[200,7] = div nv nx
    nz:f64[200,7] = min no nt
    oa:bool[200,7] = eq nt nz
    ob:f64[200,7] = select_n oa np nq
    oc:bool[200,7] = eq no nz
    od:f64[200,7] = select_n oc nr ns
    oe:f64[200,7] = div ob od
  in (nz, ny, oe) } in
let clip1 = { lambda ; of:f64[200,7,12] og:f64[1,1,12] oh:f64[200,7,12] oi:f64[200,7,12]
    oj:f64[200,7,12] ok:f64[200,7,12] ol:f64[1,1,12] om:f64[200,7,12] on:f64[200,7,12]
    oo:f64[200,7,12] op:f64[200,7,12]. let
    oq:f64[200,7,12] = max og of
    or:bool[200,7,12] = eq of oq
    os:f64[200,7,12] = select_n or oh oi
    ot:bool[200,7,12] = eq og oq
    ou:f64[200,7,12] = select_n ot oj ok
    ov:f64[200,7,12] = div os ou
    ow:f64[200,7,12] = min ol oq
    ox:bool[200,7,12] = eq oq ow
    oy:f64[200,7,12] = select_n ox om on
    oz:bool[200,7,12] = eq ol ow
    pa:f64[200,7,12] = select_n oz oo op
    pb:f64[200,7,12] = div oy pa
  in (ow, ov, pb) } in
let _cho_solve = { lambda ; lc:f64[200,7,18,18] ld:f64[200,7,18,18]. let
    le:f64[200,7,18,18,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2, 3)
      shape=(200, 7, 18, 18, 1)
    ] ld
    lf:f64[200,7,18,1,18] = transpose[permutation=(0, 1, 3, 4, 2)] le
    lg:f64[200,7,18,18] = reshape[dimensions=None new_sizes=(200, 7, 18, 18)] lf
    lh:f64[200,7,18,18] = triangular_solve[
      conjugate_a=False
      left_side=True
      lower=False
      transpose_a=True
      unit_diagonal=False
    ] lc lg
    li:f64[200,7,18,1,18] = reshape[
      dimensions=None
      new_sizes=(200, 7, 18, 1, 18)
    ] lh
    lj:f64[200,7,18,1,18] = slice[
      limit_indices=(200, 7, 18, 1, 18)
      start_indices=(0, 0, 0, 0, 0)
      strides=None
    ] li
    lk:f64[200,7,18,18,1] = transpose[permutation=(0, 1, 4, 2, 3)] lj
    ll:f64[200,7,18,18] = squeeze[dimensions=(4,)] lk
    lm:f64[200,7,18,18,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2, 3)
      shape=(200, 7, 18, 18, 1)
    ] ll
    ln:f64[200,7,18,1,18] = transpose[permutation=(0, 1, 3, 4, 2)] lm
    lo:f64[200,7,18,18] = reshape[dimensions=None new_sizes=(200, 7, 18, 18)] ln
    lp:f64[200,7,18,18] = triangular_solve[
      conjugate_a=False
      left_side=True
      lower=False
      transpose_a=False
      unit_diagonal=False
    ] lc lo
    lq:f64[200,7,18,1,18] = reshape[
      dimensions=None
      new_sizes=(200, 7, 18, 1, 18)
    ] lp
    lr:f64[200,7,18,1,18] = slice[
      limit_indices=(200, 7, 18, 1, 18)
      start_indices=(0, 0, 0, 0, 0)
      strides=None
    ] lq
    ls:f64[200,7,18,18,1] = transpose[permutation=(0, 1, 4, 2, 3)] lr
    lt:f64[200,7,18,18] = squeeze[dimensions=(4,)] ls
  in (lt,) } in
{ lambda ; pc:f64[1,1,18,18] pd:bool[200,7,18,18] pe:f64[200,7,18,18] pf:bool[200,7,18,18]
    pg:f64[200,7,18,18] ph:bool[200,7,18,18] pi:f64[200,7,18,18] pj:f64[200,7,18,18]
    pk:f64[200,7,18] pl:i32[12,1] pm:f64[1,1,12] pn:f64[200,7,12] po:f64[200,7,12]
    pp:bool[200,7,12] pq:f64[200,7,12] pr:f64[200,7,12] ps:f64[200,7,12] pt:f64[200,7,12]
    pu:bool[200,7,12] pv:bool[200,7,12] pw:f64[1,1,12] px:f64[1,1,12] py:f64[1,1,12]
    pz:f64[1,1,12] qa:f64[1,1,12] qb:f64[1,1,12] qc:f64[1,1,12] qd:f64[1,1,12] qe:f64[1,1,12]
    qf:f64[1,1,12] qg:f64[1,1,12] qh:f64[1,1,3] qi:f64[1,1,4] qj:i32[1] qk:i32[1]
    ql:i32[1] qm:i32[1] qn:i32[1] qo:i32[1] qp:i32[1] qq:i32[1] qr:i32[1] qs:i32[1]
    qt:i32[1] qu:i32[1] qv:f64[1,1,36] qw:f64[1,1,36] qx:f64[1,1,36] qy:f64[1,1,36]
    qz:f64[] ra:f64[] rb:bool[] rc:bool[200,7] rd:bool[200,7] re:f64[] rf:f64[] rg:f64[]
    rh:f64[] ri:f64[] rj:f64[] rk:f64[] rl:f64[] rm:f64[200,7,1] rn:f64[1,1,3] ro:f64[]
    rp:f64[] rq:bool[] rr:bool[200,7] rs:bool[200,7] rt:f64[] ru:f64[] rv:f64[] rw:f64[]
    rx:f64[] ry:f64[] rz:f64[] sa:f64[] sb:f64[200,7,1] sc:f64[1,1,3] sd:f64[] se:f64[]
    sf:bool[] sg:bool[200,7] sh:bool[200,7] si:f64[] sj:f64[] sk:f64[] sl:f64[] sm:f64[]
    sn:f64[] so:f64[] sp:f64[] sq:f64[200,7,1] sr:f64[1,1,3] ss:f64[] st:f64[] su:bool[]
    sv:bool[200,7] sw:bool[200,7] sx:f64[] sy:f64[] sz:f64[] ta:f64[] tb:f64[] tc:f64[]
    td:f64[] te:f64[] tf:f64[200,7,1] tg:f64[] th:f64[] ti:f64[] tj:f64[] tk:f64[]
    tl:f64[] tm:f64[] tn:f64[200,7] to:f64[200,7] tp:f64[200,7] tq:f64[200,7] tr:f64[]
    ts:f64[200,7] tt:f64[200,7] tu:f64[200,7] tv:f64[200,7] tw:f64[] tx:f64[] ty:f64[]
    tz:f64[] ua:f64[] ub:f64[] uc:f64[] ud:f64[200,7] ue:f64[200,7] uf:f64[200,7]
    ug:f64[200,7] uh:f64[] ui:f64[200,7] uj:f64[200,7] uk:f64[200,7] ul:f64[200,7]
    um:f64[] un:f64[] uo:f64[] up:f64[] uq:f64[] ur:f64[] us:f64[] ut:f64[200,7]
    uu:f64[200,7] uv:f64[200,7] uw:f64[200,7] ux:f64[] uy:f64[200,7] uz:f64[200,7]
    va:f64[200,7] vb:f64[200,7] vc:f64[] vd:f64[] ve:f64[] vf:f64[] vg:f64[] vh:f64[]
    vi:f64[] vj:f64[200,7] vk:f64[200,7] vl:f64[200,7] vm:f64[200,7] vn:f64[] vo:f64[200,7]
    vp:f64[200,7] vq:f64[200,7] vr:f64[200,7] vs:f64[1,1,12] vt:f64[200,7,12] vu:f64[200,7,12]
    vv:f64[200,7,12] vw:f64[200,7,12] vx:f64[1,1,12] vy:f64[200,7,12] vz:f64[200,7,12]
    wa:f64[200,7,12] wb:f64[200,7,12] wc:f64[1,1,12] wd:f64[1,1,12] we:f64[1,1,12]
    wf:f64[200,7,12] wg:f64[200,7,12] wh:f64[200,7,12] wi:f64[200,7,12] wj:f64[1,1,12]
    wk:f64[200,7,12] wl:f64[200,7,12] wm:f64[200,7,12] wn:f64[200,7,12] wo:f64[1,1,12]
    wp:i32[12,1] wq:f64[1,1,12] wr:i32[12,1] ws:f64[1,1,12] wt:f64[1,1,12] wu:f64[200,7,12]
    wv:f64[200,7,12] ww:f64[200,7,12] wx:f64[200,7,12] wy:f64[1,1,12] wz:f64[200,7,12]
    xa:f64[200,7,12] xb:f64[200,7,12] xc:f64[200,7,12] xd:f64[1,1,12] xe:f64[200,7,6]
    xf:f64[200,7,19] xg:i32[1] xh:f64[1,1,36] xi:f64[1,1,36] xj:i32[1] xk:f64[1,1,12]
    xl:f64[1,1,18] xm:f64[200,7,18] xn:i32[1] xo:i32[1] xp:i32[1] xq:i32[1] xr:i32[1]
    xs:i32[1] xt:i32[1] xu:i32[1] xv:f64[1,1,4] xw:i32[1] xx:i32[1] xy:i32[1] xz:i32[1]
    ya:i32[1] yb:i32[1] yc:i32[1] yd:f64[1,1,13,1] ye:f64[200,7,1,3] yf:i32[6,1]
    yg:f64[18,3] yh:f64[1,1,13] yi:f64[1,1,12] yj:f64[1,1,12] yk:f64[1,1,12] yl:f64[]
    ym:f64[] yn:bool[] yo:bool[] yp:f64[200,7,12,4] yq:f64[200,7,12] yr:i64[1] ys:f64[1,1,13]
    yt:f64[1,1,13] yu:f64[1,1,13] yv:f64[1,1,13] yw:f64[1,1,13] yx:f64[1,1,13] yy:f64[1,1,13]
    yz:f64[1,1,13] za:f64[1,1,13] zb:f64[1,1,13] zc:f64[1,1,13] zd:f64[1,1,13] ze:f64[1,1,13]
    zf:f64[1,1,13] zg:f64[1,1,13] zh:i64[4,1] zi:i64[4,1] zj:i64[4,1] zk:i64[4,1]
    zl:i64[13,1] zm:f64[] zn:f64[] zo:bool[] zp:bool[] zq:f64[200,7,13,4] zr:f64[200,7,13]
    zs:f64[200,7,1,4] zt:i32[13,1] zu:f64[1,1,13] zv:f64[1,1,13] zw:f64[1,1,13] zx:f64[1,1,13]
    zy:f64[1,1,13] zz:f64[1,1,13] baa:f64[1,1,13] bab:f64[1,1,13] bac:f64[1,1,13]
    bad:f64[1,1,13] bae:f64[1,1,13] baf:f64[1,1,13] bag:f64[1,1,13] bah:f64[1,1,13]
    bai:f64[1,1,13] baj:f64[1,1,13] bak:f64[1,1,13] bal:f64[1,1,13] bam:f64[1,1,13]
    ban:f64[1,1,13] bao:f64[1,1,13] bap:f64[1,1,13] baq:f64[1,1,13] bar:f64[1,1,13]
    bas:f64[1,1,13] bat:f64[1,1,13] bau:f64[1,1,13] bav:f64[1,1,13] baw:f64[1,1,13]
    bax:f64[1,1,13] bay:f64[1,1,13] baz:f64[1,1,13] bba:i64[18,1] bbb:f64[18,3] bbc:f64[1,1,18,3]
    bbd:i32[1] bbe:f64[1,1,18] bbf:i32[1] bbg:f64[1,1,18] bbh:f64[1,1,18] bbi:i32[1]
    bbj:f64[1,1,18] bbk:f64[1,1,18] bbl:f64[1,1,18] bbm:f64[1,1,18,3] bbn:f64[1,1,18,1]
    bbo:f64[1,1,18,1] bbp:f64[1,1,18] bbq:i32[1] bbr:f64[1,1,18] bbs:i32[1] bbt:f64[1,1,18]
    bbu:i32[1] bbv:f64[1,1,18] bbw:f64[1,1,18] bbx:f64[1,1,18] bby:f64[18,3] bbz:f64[1,1,18,3]
    bca:f64[200,7,13,3] bcb:i32[13,1] bcc:f64[1,1,13,1] bcd:f64[1,1,13,3] bce:f64[13,3]
    bcf:f64[1,1,12,3] bcg:i64[1] bch:f64[1,1,13,3] bci:f64[1,1,13,3] bcj:f64[13,3]
    bck:f64[1,1,13,3] bcl:i32[1] bcm:f64[1,1,13] bcn:i32[1] bco:f64[1,1,13] bcp:f64[1,1,13]
    bcq:i32[1] bcr:f64[1,1,13] bcs:f64[1,1,13] bct:f64[1,1,13] bcu:f64[1,1,13,3]
    bcv:f64[1,1,13,1] bcw:f64[1,1,13,1] bcx:f64[1,1,13] bcy:i32[1] bcz:f64[1,1,13]
    bda:i32[1] bdb:f64[1,1,13] bdc:i32[1] bdd:f64[1,1,13] bde:f64[1,1,13] bdf:f64[1,1,13]
    bdg:i64[4,1] bdh:i64[4,1] bdi:i32[1] bdj:i32[1] bdk:i32[1] bdl:i32[1] bdm:i32[1]
    bdn:i32[1] bdo:i64[4,1] bdp:i32[1] bdq:i32[1] bdr:i32[1] bds:i32[1] bdt:i32[1]
    bdu:i32[1] bdv:i64[4,1] bdw:i32[1] bdx:i32[1] bdy:i32[1] bdz:i32[1] bea:i32[1]
    beb:i32[1] bec:i64[13,1] bed:f64[13,3] bee:f64[1,1,13,3] bef:i32[1] beg:f64[1,1,13]
    beh:i32[1] bei:f64[1,1,13] bej:f64[1,1,13] bek:i32[1] bel:f64[1,1,13] bem:f64[1,1,13]
    ben:f64[1,1,13] beo:i32[13,1] bep:f64[1,1,13,1] beq:f64[200,7,1,3] ber:i32[13,1]
    bes:f64[13,3] bet:f64[1,1,13,3] beu:i32[1] bev:f64[1,1,13] bew:i32[1] bex:f64[1,1,13]
    bey:f64[1,1,13] bez:i32[1] bfa:f64[1,1,13] bfb:f64[1,1,13] bfc:f64[1,1,13] bfd:f64[1,1,13,3]
    bfe:i32[1] bff:f64[1,1,13] bfg:i32[1] bfh:f64[1,1,13] bfi:f64[1,1,13] bfj:i32[1]
    bfk:f64[1,1,13] bfl:f64[1,1,13] bfm:f64[1,1,13] bfn:i64[18,1] bfo:i32[1] bfp:i32[1]
    bfq:i32[1] bfr:i32[1] bfs:i32[1] bft:i32[1] bfu:f64[1,1,18,3] bfv:f64[1,1,18,1]
    bfw:f64[1,1,18,1] bfx:f64[1,1,18] bfy:i32[1] bfz:f64[1,1,18] bga:i32[1] bgb:f64[1,1,18]
    bgc:i32[1] bgd:f64[1,1,18] bge:f64[1,1,18] bgf:f64[1,1,18] bgg:i32[1] bgh:i32[1]
    bgi:i32[1] bgj:i32[1] bgk:i32[1] bgl:i32[1] bgm:i32[1] bgn:i32[1] bgo:i32[1]
    bgp:i32[1] bgq:i32[1] bgr:i32[1] bgs:i32[1] bgt:f64[200,7,1,3,3] bgu:f64[200,7,1,3]
    bgv:i32[6,1] bgw:i64[4,1] bgx:i32[4,1] bgy:i64[4,1] bgz:i32[4,1] bha:i64[4,1]
    bhb:i32[4,1] bhc:i64[4,1] bhd:i64[13,1] bhe:f64[200,7,1,3] bhf:i32[13,1] bhg:i32[1]
    bhh:i32[1] bhi:i32[1] bhj:i32[1] bhk:i32[1] bhl:i32[1] bhm:f64[200,7,1,3] bhn:i32[6,1]
    bho:i64[4,1] bhp:i32[4,1] bhq:i64[4,1] bhr:i32[4,1] bhs:i64[4,1] bht:i32[4,1]
    bhu:i64[4,1] bhv:i64[13,1] bhw:f64[200,7,1,3] bhx:i32[13,1] bhy:i32[1] bhz:i32[1]
    bia:i32[1] bib:i32[1] bic:i32[1] bid:i32[1] bie:i64[4,1] bif:i32[4,1] big:i64[4,1]
    bih:i64[4,1] bii:i32[4,1] bij:i64[4,1] bik:i64[4,1] bil:i32[4,1] bim:i64[4,1]
    bin:i64[4,1] bio:i64[13,1] bip:f64[1,1,13,1] biq:f64[200,7,1,3] bir:i32[6,1]
    bis:i32[1] bit:i32[1] biu:i32[1] biv:i32[1] biw:i32[1] bix:i32[1] biy:i32[1]
    biz:f64[200,7,1,3,3] bja:i32[1] bjb:i32[1] bjc:i32[1] bjd:i32[1] bje:i32[1] bjf:i32[1]
    bjg:i64[4,1] bjh:i32[4,1] bji:i64[4,1] bjj:i32[4,1] bjk:i64[4,1] bjl:i32[4,1]
    bjm:i64[4,1] bjn:i64[13,1] bjo:i32[1] bjp:i32[1] bjq:i32[1] bjr:i32[1] bjs:i32[1]
    bjt:i32[1] bju:f64[1,1,13,1] bjv:i32[1] bjw:i32[1] bjx:i32[1] bjy:i32[1] bjz:i32[1]
    bka:i32[1] bkb:i32[1] bkc:i32[1] bkd:i32[1] bke:i32[1] bkf:i32[1] bkg:i32[1]
    bkh:f64[200,7,1,3] bki:i32[4,1] bkj:i64[4,1] bkk:f64[200,7,4,3] bkl:i32[4,1]
    bkm:i64[4,1] bkn:f64[200,7,4,3] bko:i32[4,1] bkp:i64[4,1] bkq:i64[13,1] bkr:i64[18,1]
    bks:f64[1,1,13] bkt:f64[1,1,13] bku:f64[1,1,13] bkv:f64[1,1,13] bkw:f64[1,1,13]
    bkx:f64[1,1,13] bky:f64[1,1,13] bkz:f64[1,1,13] bla:f64[1,1,13] blb:f64[1,1,13]
    blc:f64[1,1,13] bld:f64[1,1,13] ble:f64[1,1,13] blf:f64[1,1,13] blg:f64[1,1,13]
    blh:f64[1,1,13] bli:f64[13,3,3] blj:i32[1] blk:f64[1,1,1,3] bll:i32[1] blm:f64[1,1,1,3]
    bln:f64[1,1,1,3] blo:i32[1] blp:f64[1,1,1,3] blq:f64[1,1,1,3] blr:f64[1,1,1,3]
    bls:f64[1,1,13,1,1] blt:i32[1] blu:i32[1] blv:i32[1] blw:i32[1] blx:i32[1] bly:i32[1]
    blz:i32[1] bma:i32[1] bmb:i32[1] bmc:i32[1] bmd:i32[1] bme:i32[1] bmf:i32[1]
    bmg:i32[1] bmh:i32[1] bmi:i32[1] bmj:i32[1] bmk:i32[1] bml:i32[1] bmm:i32[1]
    bmn:i32[1] bmo:i32[1] bmp:i32[1] bmq:i32[1] bmr:f64[200,7,1,3] bms:i32[4,1] bmt:i64[4,1]
    bmu:f64[200,7,4,3] bmv:i32[4,1] bmw:i64[4,1] bmx:f64[200,7,4,3] bmy:i32[4,1]
    bmz:i64[4,1] bna:i64[13,1] bnb:i64[18,1] bnc:f64[1,1,18] bnd:f64[1,1,12,3] bne:i64[1]
    bnf:i32[1] bng:i32[1] bnh:i32[1] bni:i32[1] bnj:i32[1] bnk:i32[1] bnl:i64[4,1]
    bnm:i64[4,1] bnn:i32[1] bno:i32[1] bnp:i32[1] bnq:i32[1] bnr:i32[1] bns:i32[1]
    bnt:i64[4,1] bnu:i32[1] bnv:i32[1] bnw:i32[1] bnx:i32[1] bny:i32[1] bnz:i32[1]
    boa:i64[4,1] bob:i32[1] boc:i32[1] bod:i32[1] boe:i32[1] bof:i32[1] bog:i32[1]
    boh:f64[1,1,12,3] boi:i64[1] boj:i32[1] bok:i32[1] bol:i32[1] bom:i32[1] bon:i32[1]
    boo:i32[1] bop:i64[4,1] boq:i32[1] bor:i32[1] bos:i32[1] bot:i32[1] bou:i32[1]
    bov:i32[1] bow:i32[1] box:i32[1] boy:i32[1] boz:i32[1] bpa:i32[1] bpb:i32[1]
    bpc:i64[4,1] bpd:i32[1] bpe:i32[1] bpf:i32[1] bpg:i32[1] bph:i32[1] bpi:i32[1]
    bpj:i32[1] bpk:i32[1] bpl:i32[1] bpm:i32[1] bpn:i32[1] bpo:i32[1] bpp:i64[4,1]
    bpq:i32[1] bpr:i32[1] bps:i32[1] bpt:i32[1] bpu:i32[1] bpv:i32[1] bpw:f64[1,1,18,1]
    bpx:f64[200,7,1,3] bpy:i32[4,1] bpz:i64[4,1] bqa:f64[200,7,4,3] bqb:i32[4,1]
    bqc:i64[4,1] bqd:f64[200,7,4,3] bqe:i32[4,1] bqf:i64[4,1] bqg:i64[13,1] bqh:i64[18,1]
    bqi:i32[1] bqj:i32[1] bqk:i32[1] bql:i32[1] bqm:i32[1] bqn:i32[1] bqo:f64[200,7,1,3,3]
    bqp:i32[4,1] bqq:i64[4,1] bqr:f64[200,7,4,3,3] bqs:i32[4,1] bqt:i64[4,1] bqu:f64[200,7,4,3,3]
    bqv:i32[4,1] bqw:i64[4,1] bqx:i64[13,1] bqy:i64[18,1] bqz:i32[1] bra:i32[1] brb:i32[1]
    brc:i32[1] brd:i32[1] bre:i32[1] brf:f64[1,1,18,18] brg:bool[200,7,18,18] brh:f64[200,7,18,18]
    bri:bool[200,7,18,18] brj:f64[200,7,18,18] brk:f64[1,1,18,18] brl:bool[200,7,18,18]
    brm:f64[200,7,18,18] brn:bool[200,7,18,18] bro:f64[200,7,18,18] brp:bool[200,7,18,18]
    brq:f64[200,7,18,18] brr:f64[200,7,18,18] brs:f64[1,1,4] brt:i32[1] bru:i32[1]
    brv:i32[1] brw:i32[1] brx:i32[1] bry:i32[1] brz:i32[1] bsa:i32[1] bsb:i32[1]
    bsc:i32[1] bsd:i32[1] bse:i32[1] bsf:i32[1] bsg:f64[1,1,36] bsh:f64[1,1,36] bsi:i32[1]
    bsj:f64[1,1,36] bsk:f64[1,1,36] bsl:f64[1,1,36] bsm:f64[1,1,36] bsn:f64[1,1,36]
    bso:f64[1,1,36] bsp:f64[200,7,1] bsq:f64[200,7,1] bsr:f64[1,1,9] bss:f64[1,1,9]
    bst:f64[200,7,1] bsu:f64[200,7,1] bsv:f64[200,7,1] bsw:f64[200,7,1] bsx:f64[1,1,180]
    bsy:f64[1,1,180] bsz:f64[1,1,9] bta:f64[1,1,9] btb:f64[7,189,400] btc:f64[1,7,400]
    btd:f64[7,400,400] bte:f64[1,7,400] btf:f64[7,400,400] btg:f64[1,7,400] bth:f64[7,400,400]
    bti:f64[1,7,400] btj:f64[7,400,54] btk:f64[1,7,54] btl:f64[1,1,36] btm:f64[1,1,36]
    btn:f64[1,1,36] bto:f64[200,7,36] btp:f64[] btq:f64[200,7,36] btr:f64[1,1,36]
    bts:f64[200,7,36] btt:f64[] btu:f64[200,7,36] btv:f64[200,7,180] btw:f64[200,7,9]. let
    btx:f64[200,7,9] = mul bsr btw
    bty:f64[200,7,9] = div btx 2.0
    btz:f64[200,7,9] = add bty bss
    bua:f64[200,7,1] = slice[
      limit_indices=(200, 7, 9)
      start_indices=(0, 0, 8)
      strides=None
    ] btz
    bub:f64[200,7] = squeeze[dimensions=(2,)] bua
    buc:f64[200,7,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(200, 7, 1)
    ] bub
    bud:f64[200,7,3] = concatenate[dimension=2] bsp bsq buc
    bue:f64[200,7,1,3] = reshape[dimensions=None new_sizes=(200, 7, 1, 3)] bud
    buf:f64[200,7,3] = squeeze[dimensions=(2,)] bue
    bug:f64[200,7,4,3] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 3)
      shape=(200, 7, 4, 3)
    ] buf
    buh:f64[200,7,12] = reshape[dimensions=None new_sizes=(200, 7, 12)] bug
    bui:f64[200,7,8] = slice[
      limit_indices=(200, 7, 8)
      start_indices=(0, 0, 0)
      strides=None
    ] btz
    buj:f64[200,7,1] = slice[
      limit_indices=(200, 7, 1)
      start_indices=(0, 0, 0)
      strides=None
    ] bui
    buk:f64[200,7] = squeeze[dimensions=(2,)] buj
    bul:f64[200,7,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(200, 7, 1)
    ] buk
    bum:f64[200,7,1] = slice[
      limit_indices=(200, 7, 5)
      start_indices=(0, 0, 4)
      strides=None
    ] bui
    bun:f64[200,7] = squeeze[dimensions=(2,)] bum
    buo:f64[200,7,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(200, 7, 1)
    ] bun
    bup:f64[200,7,1] = slice[
      limit_indices=(200, 7, 2)
      start_indices=(0, 0, 1)
      strides=None
    ] bui
    buq:f64[200,7] = squeeze[dimensions=(2,)] bup
    bur:f64[200,7,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(200, 7, 1)
    ] buq
    bus:f64[200,7,1] = slice[
      limit_indices=(200, 7, 6)
      start_indices=(0, 0, 5)
      strides=None
    ] bui
    but:f64[200,7] = squeeze[dimensions=(2,)] bus
    buu:f64[200,7,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(200, 7, 1)
    ] but
    buv:f64[200,7,1] = slice[
      limit_indices=(200, 7, 3)
      start_indices=(0, 0, 2)
      strides=None
    ] bui
    buw:f64[200,7] = squeeze[dimensions=(2,)] buv
    bux:f64[200,7,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(200, 7, 1)
    ] buw
    buy:f64[200,7,1] = slice[
      limit_indices=(200, 7, 7)
      start_indices=(0, 0, 6)
      strides=None
    ] bui
    buz:f64[200,7] = squeeze[dimensions=(2,)] buy
    bva:f64[200,7,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(200, 7, 1)
    ] buz
    bvb:f64[200,7,1] = slice[
      limit_indices=(200, 7, 4)
      start_indices=(0, 0, 3)
      strides=None
    ] bui
    bvc:f64[200,7] = squeeze[dimensions=(2,)] bvb
    bvd:f64[200,7,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(200, 7, 1)
    ] bvc
    bve:f64[200,7,1] = slice[
      limit_indices=(200, 7, 8)
      start_indices=(0, 0, 7)
      strides=None
    ] bui
    bvf:f64[200,7] = squeeze[dimensions=(2,)] bve
    bvg:f64[200,7,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(200, 7, 1)
    ] bvf
    bvh:f64[200,7,12] = concatenate[dimension=2] bul buo bst bur buu bsu bux bva
      bsv bvd bvg bsw
    bvi:f64[200,7,180] = sub btv bsx
    bvj:f64[200,7,180] = div bvi bsy
    bvk:f64[200,7,9] = sub btw bsz
    bvl:f64[200,7,9] = div bvk bta
    bvm:f64[200,7,189] = concatenate[dimension=2] bvj bvl
    bvn:f64[7,200,400] = dot_general[
      dimension_numbers=(([2], [1]), ([1], [0]))
      preferred_element_type=float64
    ] bvm btb
    bvo:f64[200,7,400] = transpose[permutation=(1, 0, 2)] bvn
    bvp:f64[200,7,400] = add bvo btc
    bvq:f64[200,7,400] bvr:f64[200,7,400] bvs:f64[200,7,400] = pjit[
      name=silu
      jaxpr=silu
    ] bvp
    bvt:f64[7,200,400] = dot_general[
      dimension_numbers=(([2], [1]), ([1], [0]))
      preferred_element_type=float64
    ] bvq btd
    bvu:f64[200,7,400] = transpose[permutation=(1, 0, 2)] bvt
    bvv:f64[200,7,400] = add bvu bte
    bvw:f64[200,7,400] bvx:f64[200,7,400] bvy:f64[200,7,400] = pjit[
      name=silu
      jaxpr=silu
    ] bvv
    bvz:f64[7,200,400] = dot_general[
      dimension_numbers=(([2], [1]), ([1], [0]))
      preferred_element_type=float64
    ] bvw btf
    bwa:f64[200,7,400] = transpose[permutation=(1, 0, 2)] bvz
    bwb:f64[200,7,400] = add bwa btg
    bwc:f64[200,7,400] bwd:f64[200,7,400] bwe:f64[200,7,400] = pjit[
      name=silu
      jaxpr=silu
    ] bwb
    bwf:f64[7,200,400] = dot_general[
      dimension_numbers=(([2], [1]), ([1], [0]))
      preferred_element_type=float64
    ] bwc bth
    bwg:f64[200,7,400] = transpose[permutation=(1, 0, 2)] bwf
    bwh:f64[200,7,400] = add bwg bti
    bwi:f64[200,7,400] bwj:f64[200,7,400] bwk:f64[200,7,400] = pjit[
      name=silu
      jaxpr=silu
    ] bwh
    bwl:f64[7,200,54] = dot_general[
      dimension_numbers=(([2], [1]), ([1], [0]))
      preferred_element_type=float64
    ] bwi btj
    bwm:f64[200,7,54] = transpose[permutation=(1, 0, 2)] bwl
    bwn:f64[200,7,54] = add bwm btk
    bwo:f64[200,7,18] = slice[
      limit_indices=(200, 7, 18)
      start_indices=(0, 0, 0)
      strides=None
    ] bwn
    _:f64[200,7,18] bwp:f64[4,200,7,18] = scan[
      _split_transpose=False
      jaxpr={ lambda ; bwq:f64[200,7,18]. let  in (bwq, bwq) }
      length=4
      linear=(False,)
      num_carry=1
      num_consts=0
      reverse=False
      unroll=1
    ] bwo
    bwr:f64[200,7,36] = slice[
      limit_indices=(200, 7, 36)
      start_indices=(0, 0, 0)
      strides=None
    ] btv
    bws:f64[200,7,36] bwt:f64[1,200,7,3] bwu:f64[1,200,7,3] bwv:f64[1,200,7,1] bww:f64[1,200,7]
      bwx:f64[1,200,7,1] bwy:f64[1,200,7,3] bwz:f64[1,200,7,1] bxa:f64[1,200,7] bxb:f64[1,200,7]
      bxc:f64[1,200,7] bxd:f64[1,200,7] bxe:f64[1,200,7] bxf:f64[1,200,7] bxg:f64[1,200,7,3]
      bxh:f64[1,200,7,3] bxi:f64[1,200,7,1] bxj:f64[1,200,7] bxk:f64[1,200,7,1] bxl:f64[1,200,7,3]
      bxm:f64[1,200,7,1] bxn:f64[1,200,7] bxo:f64[1,200,7] bxp:f64[1,200,7] bxq:f64[1,200,7]
      bxr:f64[1,200,7] bxs:f64[1,200,7] bxt:f64[1,200,7,12] bxu:f64[1,200,7,12] bxv:f64[1,200,7,12]
      bxw:f64[1,200,7,12] bxx:f64[1,200,7,12,1] bxy:bool[1,200,7,12,4] bxz:f64[1,200,7,12,4]
      bya:f64[1,200,7,12] byb:bool[1,200,7,12] byc:f64[1,200,7,12,4] byd:f64[1,200,7,12,1]
      bye:f64[1,200,7,13,3] byf:f64[1,200,7,13,1] byg:f64[1,200,7,13] byh:f64[1,200,7,13,3]
      byi:f64[1,200,7,13,1] byj:f64[1,200,7,4,3] byk:f64[1,200,7,4,3] byl:f64[1,200,7,4,1]
      bym:f64[1,200,7,4] byn:f64[1,200,7,4,1] byo:f64[1,200,7,4,3] byp:f64[1,200,7,4,1]
      byq:f64[1,200,7,4] byr:f64[1,200,7,4] bys:f64[1,200,7,4] byt:f64[1,200,7,4]
      byu:f64[1,200,7,4] byv:f64[1,200,7,4] byw:f64[1,200,7,4] byx:f64[1,200,7,4]
      byy:f64[1,200,7,4] byz:f64[1,200,7,4] bza:f64[1,200,7,4] bzb:f64[1,200,7,4]
      bzc:f64[1,200,7,4] bzd:f64[1,200,7,4] bze:f64[1,200,7,4] bzf:f64[1,200,7,4]
      bzg:f64[1,200,7,4] bzh:f64[1,200,7,4] bzi:f64[1,200,7,4] bzj:f64[1,200,7,4]
      bzk:f64[1,200,7,4] bzl:f64[1,200,7,4] bzm:f64[1,200,7,4] bzn:f64[1,200,7,4]
      bzo:f64[1,200,7,4] bzp:f64[1,200,7,4] bzq:f64[1,200,7,4] bzr:f64[1,200,7,4]
      bzs:f64[1,200,7,4] bzt:f64[1,200,7,4] bzu:f64[1,200,7,4] bzv:f64[1,200,7,4]
      bzw:f64[1,200,7,4] bzx:f64[1,200,7,4] bzy:f64[1,200,7,4] bzz:f64[1,200,7,4]
      caa:f64[1,200,7,4] cab:f64[1,200,7,4] cac:f64[1,200,7,4,3] cad:f64[1,200,7,4,3]
      cae:f64[1,200,7,4,1] caf:f64[1,200,7,4] cag:f64[1,200,7,4,1] cah:f64[1,200,7,4,3]
      cai:f64[1,200,7,4,1] caj:f64[1,200,7,4] cak:f64[1,200,7,4] cal:f64[1,200,7,4]
      cam:f64[1,200,7,4] can:f64[1,200,7,4] cao:f64[1,200,7,4] cap:f64[1,200,7,4]
      caq:f64[1,200,7,4] car:f64[1,200,7,4] cas:f64[1,200,7,4] cat:f64[1,200,7,4]
      cau:f64[1,200,7,4] cav:f64[1,200,7,4] caw:f64[1,200,7,4] cax:f64[1,200,7,4]
      cay:f64[1,200,7,4] caz:f64[1,200,7,4] cba:f64[1,200,7,4] cbb:f64[1,200,7,4]
      cbc:f64[1,200,7,4] cbd:f64[1,200,7,4] cbe:f64[1,200,7,4] cbf:f64[1,200,7,4]
      cbg:f64[1,200,7,4] cbh:f64[1,200,7,4] cbi:f64[1,200,7,4] cbj:f64[1,200,7,4]
      cbk:f64[1,200,7,4] cbl:f64[1,200,7,4] cbm:f64[1,200,7,4] cbn:f64[1,200,7,4]
      cbo:f64[1,200,7,4] cbp:f64[1,200,7,4] cbq:f64[1,200,7,4] cbr:f64[1,200,7,4]
      cbs:f64[1,200,7,4] cbt:f64[1,200,7,4] cbu:f64[1,200,7,4] cbv:f64[1,200,7,4,3]
      cbw:f64[1,200,7,4,3] cbx:f64[1,200,7,4,1] cby:f64[1,200,7,4] cbz:f64[1,200,7,4,1]
      cca:f64[1,200,7,4,3] ccb:f64[1,200,7,4,1] ccc:f64[1,200,7,4] ccd:f64[1,200,7,4]
      cce:f64[1,200,7,4] ccf:f64[1,200,7,4] ccg:f64[1,200,7,4] cch:f64[1,200,7,4]
      cci:f64[1,200,7,4] ccj:f64[1,200,7,4] cck:f64[1,200,7,4] ccl:f64[1,200,7,4]
      ccm:f64[1,200,7,4] ccn:f64[1,200,7,4] cco:f64[1,200,7,4] ccp:f64[1,200,7,4]
      ccq:f64[1,200,7,4] ccr:f64[1,200,7,4] ccs:f64[1,200,7,4] cct:f64[1,200,7,4]
      ccu:f64[1,200,7,4] ccv:f64[1,200,7,4] ccw:f64[1,200,7,4] ccx:f64[1,200,7,4]
      ccy:f64[1,200,7,4] ccz:f64[1,200,7,4] cda:f64[1,200,7,4] cdb:f64[1,200,7,4]
      cdc:f64[1,200,7,4] cdd:f64[1,200,7,4] cde:f64[1,200,7,4] cdf:f64[1,200,7,4]
      cdg:f64[1,200,7,4] cdh:f64[1,200,7,4] cdi:f64[1,200,7,4] cdj:f64[1,200,7,4]
      cdk:f64[1,200,7,4] cdl:f64[1,200,7,4] cdm:f64[1,200,7,4] cdn:f64[1,200,7,4]
      cdo:f64[1,200,7,13,1] cdp:bool[1,200,7,13,4] cdq:f64[1,200,7,13,4] cdr:f64[1,200,7,13]
      cds:bool[1,200,7,13] cdt:f64[1,200,7,13,4] cdu:f64[1,200,7,13,1] cdv:f64[1,200,7,13,3]
      cdw:f64[1,200,7,13,1] cdx:f64[1,200,7,13] cdy:f64[1,200,7,13,3] cdz:f64[1,200,7,13,1]
      cea:f64[1,200,7,13,3] ceb:f64[1,200,7,13,1] cec:f64[1,200,7,13] ced:f64[1,200,7,13,3]
      cee:f64[1,200,7,13,1] cef:f64[1,200,7,13,3] ceg:f64[1,200,7,13,1] ceh:f64[1,200,7,13]
      cei:f64[1,200,7,13,3] cej:f64[1,200,7,13,1] cek:f64[1,200,7,18,3] cel:f64[1,200,7,18,1]
      cem:f64[1,200,7,18] cen:f64[1,200,7,18,3] ceo:f64[1,200,7,18,1] cep:f64[1,200,7,18]
      ceq:f64[1,200,7,18] cer:f64[1,200,7,18] ces:f64[1,200,7,18] cet:f64[1,200,7,18]
      ceu:f64[1,200,7,18] cev:f64[1,200,7,18,3] cew:f64[1,200,7,18,3] cex:f64[1,200,7,18,1]
      cey:f64[1,200,7,18,3] cez:f64[1,200,7,1,6] cfa:f64[1,200,7,1,1] cfb:f64[1,200,7,1,6]
      cfc:f64[1,200,7,1,1] cfd:f64[1,200,7,1,6] cfe:f64[1,200,7,1,1] cff:f64[1,200,7,1,1]
      cfg:f64[1,200,7,1,1] cfh:f64[1,200,7,1,1] cfi:f64[1,200,7,18,1] cfj:f64[1,200,7,1,6]
      cfk:f64[1,200,7,1,1] cfl:f64[1,200,7,1,6] cfm:f64[1,200,7,1,1] cfn:f64[1,200,7,1,6]
      cfo:f64[1,200,7,1,1] cfp:f64[1,200,7,1,1] cfq:f64[1,200,7,1,1] cfr:f64[1,200,7,1,1]
      cfs:f64[1,200,7,12] cft:f64[1,200,7,12] cfu:f64[1,200,7,12] cfv:f64[1,200,7,12]
      cfw:f64[1,200,7,12] cfx:f64[1,200,7,12] cfy:f64[1,200,7,12] cfz:f64[1,200,7,12]
      cga:f64[1,200,7,12] cgb:f64[1,200,7,12] cgc:f64[1,200,7,12] cgd:f64[1,200,7,12]
      cge:f64[1,200,7,6,1] cgf:f64[1,200,7,6,3] cgg:f64[1,200,7,4,1] cgh:f64[1,200,7,4,3]
      cgi:f64[1,200,7,4,1] cgj:f64[1,200,7,4,3] cgk:f64[1,200,7,4,1] cgl:f64[1,200,7,4,3]
      cgm:f64[1,200,7,1,6] cgn:f64[1,200,7,1,1] cgo:f64[1,200,7,1,6] cgp:f64[1,200,7,1,1]
      cgq:f64[1,200,7,1,6] cgr:f64[1,200,7,1,1] cgs:f64[1,200,7,1,1] cgt:f64[1,200,7,1,1]
      cgu:f64[1,200,7,1,1] cgv:f64[1,200,7,12] cgw:f64[1,200,7,12] cgx:f64[1,200,7,12]
      cgy:f64[1,200,7,12] cgz:f64[1,200,7,12] cha:f64[1,200,7,12] chb:f64[1,200,7,6,1]
      chc:f64[1,200,7,6,3] chd:f64[1,200,7,4,1] che:f64[1,200,7,4,3] chf:f64[1,200,7,4,1]
      chg:f64[1,200,7,4,3] chh:f64[1,200,7,4,1] chi:f64[1,200,7,4,3] chj:f64[1,200,7,13]
      chk:f64[1,200,7,13] chl:f64[1,200,7,13] chm:f64[1,200,7,13] chn:f64[1,200,7,13]
      cho:f64[1,200,7,13] chp:f64[1,200,7,13] chq:f64[1,200,7,13] chr:f64[1,200,7,13]
      chs:f64[1,200,7,13] cht:f64[1,200,7,13] chu:f64[1,200,7,13] chv:f64[1,200,7,13]
      chw:f64[1,200,7,13] chx:f64[1,200,7,13] chy:f64[1,200,7,13] chz:f64[1,200,7,13]
      cia:f64[1,200,7,13] cib:f64[1,200,7,18,3] cic:f64[1,200,7,13] cid:f64[1,200,7,13]
      cie:f64[1,200,7,13] cif:f64[1,200,7,13,4] cig:f64[1,200,7,13] cih:f64[1,200,7,13]
      cii:f64[1,200,7,13] cij:f64[1,200,7,13] cik:f64[1,200,7,13] cil:f64[1,200,7,13]
      cim:f64[1,200,7,13,3,3] cin:f64[1,13,200,7,3,3] cio:f64[1,200,7,13,3,3] cip:f64[1,200,7,13,3,3]
      ciq:f64[1,200,7,13,3] cir:f64[1,200,7,13,3,3] cis:f64[1,200,7,13] cit:f64[1,200,7,13]
      ciu:f64[1,200,7,13] civ:f64[1,200,7,13] ciw:f64[1,200,7,13] cix:f64[1,200,7,13]
      ciy:f64[1,200,7,13,3] ciz:f64[1,200,7,13] cja:f64[1,200,7,13] cjb:f64[1,200,7,13]
      cjc:f64[1,200,7,13] cjd:f64[1,200,7,13] cje:f64[1,200,7,13] cjf:f64[1,200,7,13]
      cjg:f64[1,200,7,13] cjh:f64[1,200,7,13] cji:f64[1,200,7,13] cjj:f64[1,200,7,13]
      cjk:f64[1,200,7,13] cjl:f64[1,200,7,13] cjm:f64[1,200,7,13] cjn:f64[1,200,7,13]
      cjo:f64[1,200,7,13] cjp:f64[1,200,7,13] cjq:f64[1,200,7,13] cjr:f64[1,200,7,1,3]
      cjs:f64[1,200,7,1,3] cjt:f64[1,200,7,1,1] cju:f64[1,200,7,1] cjv:f64[1,200,7,1,1]
      cjw:f64[1,200,7,1,3] cjx:f64[1,200,7,1,1] cjy:f64[1,200,7,1] cjz:f64[1,200,7,1]
      cka:f64[1,200,7,1] ckb:f64[1,200,7,1] ckc:f64[1,200,7,1] ckd:f64[1,200,7,1]
      cke:f64[1,200,7,4,3] ckf:f64[1,200,7,4,3] ckg:f64[1,200,7,4,1] ckh:f64[1,200,7,4]
      cki:f64[1,200,7,4,1] ckj:f64[1,200,7,4,3] ckk:f64[1,200,7,4,1] ckl:f64[1,200,7,4]
      ckm:f64[1,200,7,4] ckn:f64[1,200,7,4] cko:f64[1,200,7,4] ckp:f64[1,200,7,4]
      ckq:f64[1,200,7,4] ckr:f64[1,200,7,4,3] cks:f64[1,200,7,4,3] ckt:f64[1,200,7,4,1]
      cku:f64[1,200,7,4] ckv:f64[1,200,7,4,1] ckw:f64[1,200,7,4,3] ckx:f64[1,200,7,4,1]
      cky:f64[1,200,7,4] ckz:f64[1,200,7,4] cla:f64[1,200,7,4] clb:f64[1,200,7,4]
      clc:f64[1,200,7,4] cld:f64[1,200,7,4] cle:f64[1,200,7,4,3] clf:f64[1,200,7,4,3]
      clg:f64[1,200,7,4,1] clh:f64[1,200,7,4] cli:f64[1,200,7,4,1] clj:f64[1,200,7,4,3]
      clk:f64[1,200,7,4,1] cll:f64[1,200,7,4] clm:f64[1,200,7,4] cln:f64[1,200,7,4]
      clo:f64[1,200,7,4] clp:f64[1,200,7,4] clq:f64[1,200,7,4] clr:f64[1,200,7,4]
      cls:f64[1,200,7,4] clt:f64[1,200,7,4] clu:f64[1,200,7,4] clv:f64[1,200,7,4]
      clw:f64[1,200,7,4] clx:f64[1,200,7,4,3] cly:f64[1,200,7,4,3] clz:f64[1,200,7,4,1]
      cma:f64[1,200,7,4] cmb:f64[1,200,7,4,1] cmc:f64[1,200,7,4,3] cmd:f64[1,200,7,4,1]
      cme:f64[1,200,7,4] cmf:f64[1,200,7,4] cmg:f64[1,200,7,4] cmh:f64[1,200,7,4]
      cmi:f64[1,200,7,4] cmj:f64[1,200,7,4] cmk:f64[1,200,7,4] cml:f64[1,200,7,4]
      cmm:f64[1,200,7,4] cmn:f64[1,200,7,4] cmo:f64[1,200,7,4] cmp:f64[1,200,7,4]
      cmq:f64[1,200,7,4,3] cmr:f64[1,200,7,4,3] cms:f64[1,200,7,4,1] cmt:f64[1,200,7,4]
      cmu:f64[1,200,7,4,1] cmv:f64[1,200,7,4,3] cmw:f64[1,200,7,4,1] cmx:f64[1,200,7,4]
      cmy:f64[1,200,7,4] cmz:f64[1,200,7,4] cna:f64[1,200,7,4] cnb:f64[1,200,7,4]
      cnc:f64[1,200,7,4] cnd:f64[1,200,7,4] cne:f64[1,200,7,4] cnf:f64[1,200,7,4]
      cng:f64[1,200,7,4] cnh:f64[1,200,7,4] cni:f64[1,200,7,4] cnj:f64[1,200,7,4,3]
      cnk:f64[1,200,7,4,3] cnl:f64[1,200,7,4,1] cnm:f64[1,200,7,4] cnn:f64[1,200,7,4,1]
      cno:f64[1,200,7,4,3] cnp:f64[1,200,7,4,1] cnq:f64[1,200,7,4] cnr:f64[1,200,7,4]
      cns:f64[1,200,7,4] cnt:f64[1,200,7,4] cnu:f64[1,200,7,4] cnv:f64[1,200,7,4]
      cnw:f64[1,200,7,18,3] cnx:f64[1,200,7,18] cny:f64[1,200,7,18] cnz:f64[1,200,7,18]
      coa:f64[1,200,7,18] cob:f64[1,200,7,18] coc:f64[1,200,7,18] cod:f64[1,200,7,18,3]
      coe:f64[1,200,7,18,3,3] cof:f64[1,200,7,18] cog:f64[1,200,7,18] coh:f64[1,200,7,18]
      coi:f64[1,200,7,18] coj:f64[1,200,7,18] cok:f64[1,200,7,18] col:f64[1,200,7,18,18]
      com:f64[1,200,7,18,18] con:f64[1,200,7,18,18] coo:f64[1,4,200,7,18,18] cop:f64[1,4,200,7,18,18]
      coq:f64[1,4,200,7,18,18] cor:f64[1,4,200,7,18] cos:f64[1,4,200,7,18,18] cot:f64[1,4,200,7,12]
      cou:bool[1,4,200,7,12] cov:f64[1,4,200,7,12] cow:f64[1,4,200,7,12] cox:f64[1,4,200,7,12]
      coy:f64[1,4,200,7,12] coz:bool[1,4,200,7,12] cpa:bool[1,4,200,7,12] cpb:bool[1,4,200,7,3]
      cpc:bool[1,4,200,7] cpd:f64[1,4,200,7,3] cpe:f64[1,4,200,7,3] cpf:f64[1,4,200,7,1]
      cpg:f64[1,4,200,7] cph:f64[1,4,200,7,1] cpi:f64[1,4,200,7,3] cpj:f64[1,4,200,7,1]
      cpk:f64[1,4,200,7] cpl:f64[1,4,200,7] cpm:f64[1,4,200,7] cpn:f64[1,4,200,7]
      cpo:f64[1,4,200,7] cpp:f64[1,4,200,7] cpq:f64[1,4,200,7,3] cpr:f64[1,4,200,7,3]
      cps:f64[1,4,200,7,1] cpt:f64[1,4,200,7] cpu:f64[1,4,200,7,1] cpv:f64[1,4,200,7,3]
      cpw:f64[1,4,200,7,1] cpx:f64[1,4,200,7] cpy:f64[1,4,200,7] cpz:f64[1,4,200,7]
      cqa:f64[1,4,200,7] cqb:f64[1,4,200,7] cqc:f64[1,4,200,7] cqd:f64[1,4,200,7]
      cqe:f64[1,4,200,7] cqf:f64[1,4,200,7] cqg:bool[1,4,200,7] cqh:f64[1,4,200,7]
      cqi:f64[1,4,200,7] cqj:f64[1,4,200,7] cqk:f64[1,4,200,7] cql:f64[1,4,200,7]
      cqm:bool[1,4,200,7,3] cqn:bool[1,4,200,7] cqo:bool[1,4,200,7] cqp:f64[1,4,200,7]
      cqq:f64[1,4,200,7] cqr:f64[1,4,200,7] cqs:f64[1,4,200,7] cqt:f64[1,4,200,7]
      cqu:bool[1,4,200,7,3] cqv:bool[1,4,200,7] cqw:bool[1,4,200,7] cqx:f64[1,4,200,7]
      cqy:f64[1,4,200,7] cqz:f64[1,4,200,7] cra:f64[1,4,200,7] crb:f64[1,4,200,7]
      crc:bool[1,4,200,7,3] crd:bool[1,4,200,7] cre:bool[1,4,200,7] crf:f64[1,4,200,7]
      crg:f64[1,4,200,7] crh:f64[1,4,200,7] cri:f64[1,4,200,7] crj:f64[1,4,200,7]
      crk:f64[1,4,200,7] crl:f64[1,4,200,7] crm:f64[1,4,200,7] crn:f64[1,4,200,7]
      cro:f64[1,4,200,7] crp:f64[1,4,200,7] crq:f64[1,4,200,7] crr:f64[1,4,200,7]
      crs:f64[1,4,200,7] crt:f64[1,4,200,7] cru:f64[1,4,200,7] crv:f64[1,4,200,7]
      crw:f64[1,4,200,7] crx:f64[1,4,200,7] cry:f64[1,4,200,7] crz:f64[1,4,200,7]
      csa:f64[1,4,200,7] csb:f64[1,4,200,7] csc:f64[1,4,200,7] csd:f64[1,4,200,7]
      cse:f64[1,4,200,7] csf:f64[1,4,200,7] csg:f64[1,4,200,7] csh:f64[1,4,200,7]
      csi:f64[1,4,200,7] csj:f64[1,4,200,7] csk:f64[1,4,200,7] csl:f64[1,4,200,7]
      csm:f64[1,4,200,7] csn:f64[1,4,200,7] cso:f64[1,4,200,7] csp:f64[1,4,200,7]
      csq:f64[1,4,200,7] csr:f64[1,4,200,7] css:f64[1,4,200,7] cst:f64[1,4,200,7]
      csu:f64[1,4,200,7] csv:f64[1,4,200,7] csw:f64[1,4,200,7] csx:f64[1,4,200,7]
      csy:f64[1,4,200,7] csz:f64[1,4,200,7] cta:f64[1,4,200,7] ctb:f64[1,4,200,7]
      ctc:f64[1,4,200,7] ctd:f64[1,4,200,7] cte:f64[1,4,200,7] ctf:f64[1,4,200,7]
      ctg:f64[1,4,200,7] cth:f64[1,4,200,7] cti:f64[1,4,200,7] ctj:f64[1,4,200,7]
      ctk:f64[1,4,200,7] ctl:f64[1,4,200,7] ctm:f64[1,4,200,7] ctn:f64[1,4,200,7]
      cto:f64[1,4,200,7] ctp:f64[1,4,200,7] ctq:f64[1,4,200,7] ctr:f64[1,4,200,7]
      cts:f64[1,4,200,7] ctt:f64[1,4,200,7] ctu:f64[1,4,200,7] ctv:f64[1,4,200,7]
      ctw:f64[1,4,200,7] ctx:f64[1,4,200,7] cty:f64[1,4,200,7] ctz:f64[1,4,200,7]
      cua:f64[1,4,200,7] cub:f64[1,4,200,7] cuc:f64[1,4,200,7] cud:f64[1,4,200,7]
      cue:f64[1,4,200,7] cuf:f64[1,4,200,7] cug:f64[1,4,200,7] cuh:f64[1,4,200,7]
      cui:f64[1,4,200,7] cuj:f64[1,4,200,7] cuk:f64[1,4,200,7] cul:f64[1,4,200,7]
      cum:f64[1,4,200,7] cun:f64[1,4,200,7] cuo:f64[1,4,200,7] cup:f64[1,4,200,7]
      cuq:f64[1,4,200,7] cur:f64[1,4,200,7] cus:f64[1,4,200,7] cut:f64[1,4,200,7]
      cuu:f64[1,4,200,7] cuv:f64[1,4,200,7] cuw:f64[1,4,200,7] cux:f64[1,4,200,7]
      cuy:f64[1,4,200,7] cuz:f64[1,4,200,7] cva:f64[1,4,200,7] cvb:f64[1,4,200,7]
      cvc:f64[1,4,200,7] cvd:f64[1,4,200,7] cve:f64[1,4,200,7] cvf:f64[1,4,200,7]
      cvg:f64[1,4,200,7] cvh:f64[1,4,200,7] cvi:f64[1,4,200,7] cvj:f64[1,4,200,7]
      cvk:f64[1,4,200,7] cvl:f64[1,4,200,7] cvm:f64[1,4,200,7] cvn:f64[1,4,200,7]
      cvo:f64[1,4,200,7] cvp:f64[1,4,200,7] cvq:f64[1,4,200,7] cvr:f64[1,4,200,7]
      cvs:f64[1,4,200,7] cvt:f64[1,4,200,7] cvu:f64[1,4,200,7] cvv:f64[1,4,200,7]
      cvw:f64[1,4,200,7] cvx:f64[1,4,200,7] cvy:f64[1,4,200,7] cvz:f64[1,4,200,7]
      cwa:f64[1,4,200,7] cwb:f64[1,4,200,7] cwc:f64[1,4,200,7] cwd:f64[1,4,200,7]
      cwe:f64[1,4,200,7] cwf:f64[1,4,200,7] cwg:f64[1,4,200,7] cwh:f64[1,4,200,7]
      cwi:f64[1,4,200,7,12] cwj:f64[1,4,200,7,12] cwk:f64[1,4,200,7,12] cwl:f64[1,4,200,7,12]
      cwm:f64[1,4,200,7,12] cwn:f64[1,4,200,7,12] cwo:f64[1,4,200,7,12] cwp:f64[1,4,200,7,12]
      cwq:f64[1,4,200,7,1] cwr:f64[1,4,200,7,1] cws:f64[1,4,200,7,1,3] cwt:f64[1,4,200,7,1]
      cwu:f64[1,4,200,7,1] cwv:f64[1,4,200,7,1,1] cww:f64[1,4,200,7,1,1] cwx:f64[1,4,200,7,1]
      cwy:f64[1,4,200,7,1] cwz:f64[1,4,200,7,1] cxa:f64[1,4,200,7,1] cxb:f64[1,4,200,7,1]
      cxc:f64[1,4,200,7,1] cxd:f64[1,4,200,7,1] cxe:f64[1,4,200,7,1] cxf:f64[1,4,200,7,1]
      cxg:f64[1,4,200,7,1] cxh:f64[1,4,200,7,1] cxi:f64[1,4,200,7,1] cxj:f64[1,4,200,7,1]
      cxk:f64[1,4,200,7,1] cxl:f64[1,4,200,7,1] cxm:f64[1,4,200,7,1] cxn:f64[1,4,200,7,1]
      cxo:f64[1,4,200,7,1] cxp:f64[1,4,200,7,1] cxq:f64[1,4,200,7,1] cxr:f64[1,4,200,7,1]
      cxs:f64[1,4,200,7,1] cxt:f64[1,4,200,7,1] cxu:f64[1,4,200,7,1] cxv:f64[1,4,200,7,1]
      cxw:f64[1,4,200,7,1] cxx:f64[1,4,200,7,1] cxy:f64[1,4,200,7,1] cxz:f64[1,4,200,7,1]
      cya:f64[1,4,200,7,1] cyb:f64[1,4,200,7,1] cyc:f64[1,4,200,7,1] cyd:f64[1,4,200,7,1]
      cye:f64[1,4,200,7,1] cyf:f64[1,4,200,7,1] cyg:f64[1,4,200,7,1] cyh:f64[1,4,200,7,1]
      cyi:f64[1,4,200,7,1] cyj:f64[1,4,200,7,1] cyk:f64[1,4,200,7,1,1] cyl:f64[1,4,200,7,1,4]
      cym:f64[1,4,200,7,1] cyn:f64[1,4,200,7,1,1] cyo:f64[1,200,7,3] cyp:f64[1,200,7,3]
      cyq:f64[1,200,7,1] cyr:f64[1,200,7] cys:f64[1,200,7,1] cyt:f64[1,200,7,3] cyu:f64[1,200,7,1]
      cyv:f64[1,200,7] cyw:f64[1,200,7] cyx:f64[1,200,7] cyy:f64[1,200,7] cyz:f64[1,200,7]
      cza:f64[1,200,7] czb:f64[1,200,7,3] czc:f64[1,200,7,3] czd:f64[1,200,7,1] cze:f64[1,200,7]
      czf:f64[1,200,7,1] czg:f64[1,200,7,3] czh:f64[1,200,7,1] czi:f64[1,200,7] czj:f64[1,200,7]
      czk:f64[1,200,7] czl:f64[1,200,7] czm:f64[1,200,7] czn:f64[1,200,7] czo:f64[1,200,7]
      czp:f64[1,200,7] czq:f64[1,200,7] czr:f64[1,200,7] czs:f64[1,200,7] = scan[
      _split_transpose=False
      jaxpr={ lambda ; czt:f64[1,1,18,18] czu:bool[200,7,18,18] czv:f64[200,7,18,18]
          czw:bool[200,7,18,18] czx:f64[200,7,18,18] czy:bool[200,7,18,18] czz:f64[200,7,18,18]
          daa:f64[200,7,18,18] dab:f64[200,7,18] dac:i32[12,1] dad:f64[1,1,12] dae:f64[200,7,12]
          daf:f64[200,7,12] dag:bool[200,7,12] dah:f64[200,7,12] dai:f64[200,7,12]
          daj:f64[200,7,12] dak:f64[200,7,12] dal:bool[200,7,12] dam:bool[200,7,12]
          dan:f64[1,1,12] dao:f64[1,1,12] dap:f64[1,1,12] daq:f64[1,1,12] dar:f64[1,1,12]
          das:f64[1,1,12] dat:f64[1,1,12] dau:f64[1,1,12] dav:f64[1,1,12] daw:f64[1,1,12]
          dax:f64[1,1,12] day:f64[1,1,3] daz:f64[1,1,4] dba:i32[1] dbb:i32[1] dbc:i32[1]
          dbd:i32[1] dbe:i32[1] dbf:i32[1] dbg:i32[1] dbh:i32[1] dbi:i32[1] dbj:i32[1]
          dbk:i32[1] dbl:i32[1] dbm:f64[1,1,36] dbn:f64[1,1,36] dbo:f64[1,1,36] dbp:f64[1,1,36]
          dbq:f64[] dbr:f64[] dbs:bool[] dbt:bool[200,7] dbu:bool[200,7] dbv:f64[]
          dbw:f64[] dbx:f64[] dby:f64[] dbz:f64[] dca:f64[] dcb:f64[] dcc:f64[] dcd:f64[200,7,1]
          dce:f64[1,1,3] dcf:f64[] dcg:f64[] dch:bool[] dci:bool[200,7] dcj:bool[200,7]
          dck:f64[] dcl:f64[] dcm:f64[] dcn:f64[] dco:f64[] dcp:f64[] dcq:f64[] dcr:f64[]
          dcs:f64[200,7,1] dct:f64[1,1,3] dcu:f64[] dcv:f64[] dcw:bool[] dcx:bool[200,7]
          dcy:bool[200,7] dcz:f64[] dda:f64[] ddb:f64[] ddc:f64[] ddd:f64[] dde:f64[]
          ddf:f64[] ddg:f64[] ddh:f64[200,7,1] ddi:f64[1,1,3] ddj:f64[] ddk:f64[]
          ddl:bool[] ddm:bool[200,7] ddn:bool[200,7] ddo:f64[] ddp:f64[] ddq:f64[]
          ddr:f64[] dds:f64[] ddt:f64[] ddu:f64[] ddv:f64[] ddw:f64[200,7,1] ddx:f64[]
          ddy:f64[] ddz:f64[] dea:f64[] deb:f64[] dec:f64[] ded:f64[] dee:f64[200,7]
          def:f64[200,7] deg:f64[200,7] deh:f64[200,7] dei:f64[] dej:f64[200,7] dek:f64[200,7]
          del:f64[200,7] dem:f64[200,7] den:f64[] deo:f64[] dep:f64[] deq:f64[] der:f64[]
          des:f64[] det:f64[] deu:f64[200,7] dev:f64[200,7] dew:f64[200,7] dex:f64[200,7]
          dey:f64[] dez:f64[200,7] dfa:f64[200,7] dfb:f64[200,7] dfc:f64[200,7] dfd:f64[]
          dfe:f64[] dff:f64[] dfg:f64[] dfh:f64[] dfi:f64[] dfj:f64[] dfk:f64[200,7]
          dfl:f64[200,7] dfm:f64[200,7] dfn:f64[200,7] dfo:f64[] dfp:f64[200,7] dfq:f64[200,7]
          dfr:f64[200,7] dfs:f64[200,7] dft:f64[] dfu:f64[] dfv:f64[] dfw:f64[] dfx:f64[]
          dfy:f64[] dfz:f64[] dga:f64[200,7] dgb:f64[200,7] dgc:f64[200,7] dgd:f64[200,7]
          dge:f64[] dgf:f64[200,7] dgg:f64[200,7] dgh:f64[200,7] dgi:f64[200,7] dgj:f64[1,1,12]
          dgk:f64[200,7,12] dgl:f64[200,7,12] dgm:f64[200,7,12] dgn:f64[200,7,12]
          dgo:f64[1,1,12] dgp:f64[200,7,12] dgq:f64[200,7,12] dgr:f64[200,7,12] dgs:f64[200,7,12]
          dgt:f64[1,1,12] dgu:f64[1,1,12] dgv:f64[1,1,12] dgw:f64[200,7,12] dgx:f64[200,7,12]
          dgy:f64[200,7,12] dgz:f64[200,7,12] dha:f64[1,1,12] dhb:f64[200,7,12] dhc:f64[200,7,12]
          dhd:f64[200,7,12] dhe:f64[200,7,12] dhf:f64[1,1,12] dhg:i32[12,1] dhh:f64[1,1,12]
          dhi:i32[12,1] dhj:f64[1,1,12] dhk:f64[1,1,12] dhl:f64[200,7,12] dhm:f64[200,7,12]
          dhn:f64[200,7,12] dho:f64[200,7,12] dhp:f64[1,1,12] dhq:f64[200,7,12] dhr:f64[200,7,12]
          dhs:f64[200,7,12] dht:f64[200,7,12] dhu:f64[1,1,12] dhv:f64[200,7,6] dhw:f64[200,7,19]
          dhx:i32[1] dhy:f64[1,1,36] dhz:f64[1,1,36] dia:i32[1] dib:f64[1,1,12] dic:f64[1,1,18]
          did:f64[200,7,18] die:i32[1] dif:i32[1] dig:i32[1] dih:i32[1] dii:i32[1]
          dij:i32[1] dik:i32[1] dil:i32[1] dim:f64[1,1,4] din:i32[1] dio:i32[1] dip:i32[1]
          diq:i32[1] dir:i32[1] dis:i32[1] dit:i32[1] diu:f64[1,1,13,1] div:f64[200,7,1,3]
          diw:i32[6,1] dix:f64[18,3] diy:f64[1,1,13] diz:f64[1,1,12] dja:f64[1,1,12]
          djb:f64[1,1,12] djc:f64[] djd:f64[] dje:bool[] djf:bool[] djg:f64[200,7,12,4]
          djh:f64[200,7,12] dji:i64[1] djj:f64[1,1,13] djk:f64[1,1,13] djl:f64[1,1,13]
          djm:f64[1,1,13] djn:f64[1,1,13] djo:f64[1,1,13] djp:f64[1,1,13] djq:f64[1,1,13]
          djr:f64[1,1,13] djs:f64[1,1,13] djt:f64[1,1,13] dju:f64[1,1,13] djv:f64[1,1,13]
          djw:f64[1,1,13] djx:f64[1,1,13] djy:i64[4,1] djz:i64[4,1] dka:i64[4,1]
          dkb:i64[4,1] dkc:i64[13,1] dkd:f64[] dke:f64[] dkf:bool[] dkg:bool[] dkh:f64[200,7,13,4]
          dki:f64[200,7,13] dkj:f64[200,7,1,4] dkk:i32[13,1] dkl:f64[1,1,13] dkm:f64[1,1,13]
          dkn:f64[1,1,13] dko:f64[1,1,13] dkp:f64[1,1,13] dkq:f64[1,1,13] dkr:f64[1,1,13]
          dks:f64[1,1,13] dkt:f64[1,1,13] dku:f64[1,1,13] dkv:f64[1,1,13] dkw:f64[1,1,13]
          dkx:f64[1,1,13] dky:f64[1,1,13] dkz:f64[1,1,13] dla:f64[1,1,13] dlb:f64[1,1,13]
          dlc:f64[1,1,13] dld:f64[1,1,13] dle:f64[1,1,13] dlf:f64[1,1,13] dlg:f64[1,1,13]
          dlh:f64[1,1,13] dli:f64[1,1,13] dlj:f64[1,1,13] dlk:f64[1,1,13] dll:f64[1,1,13]
          dlm:f64[1,1,13] dln:f64[1,1,13] dlo:f64[1,1,13] dlp:f64[1,1,13] dlq:f64[1,1,13]
          dlr:i64[18,1] dls:f64[18,3] dlt:f64[1,1,18,3] dlu:i32[1] dlv:f64[1,1,18]
          dlw:i32[1] dlx:f64[1,1,18] dly:f64[1,1,18] dlz:i32[1] dma:f64[1,1,18] dmb:f64[1,1,18]
          dmc:f64[1,1,18] dmd:f64[1,1,18,3] dme:f64[1,1,18,1] dmf:f64[1,1,18,1] dmg:f64[1,1,18]
          dmh:i32[1] dmi:f64[1,1,18] dmj:i32[1] dmk:f64[1,1,18] dml:i32[1] dmm:f64[1,1,18]
          dmn:f64[1,1,18] dmo:f64[1,1,18] dmp:f64[18,3] dmq:f64[1,1,18,3] dmr:f64[200,7,13,3]
          dms:i32[13,1] dmt:f64[1,1,13,1] dmu:f64[1,1,13,3] dmv:f64[13,3] dmw:f64[1,1,12,3]
          dmx:i64[1] dmy:f64[1,1,13,3] dmz:f64[1,1,13,3] dna:f64[13,3] dnb:f64[1,1,13,3]
          dnc:i32[1] dnd:f64[1,1,13] dne:i32[1] dnf:f64[1,1,13] dng:f64[1,1,13] dnh:i32[1]
          dni:f64[1,1,13] dnj:f64[1,1,13] dnk:f64[1,1,13] dnl:f64[1,1,13,3] dnm:f64[1,1,13,1]
          dnn:f64[1,1,13,1] dno:f64[1,1,13] dnp:i32[1] dnq:f64[1,1,13] dnr:i32[1]
          dns:f64[1,1,13] dnt:i32[1] dnu:f64[1,1,13] dnv:f64[1,1,13] dnw:f64[1,1,13]
          dnx:i64[4,1] dny:i64[4,1] dnz:i32[1] doa:i32[1] dob:i32[1] doc:i32[1] dod:i32[1]
          doe:i32[1] dof:i64[4,1] dog:i32[1] doh:i32[1] doi:i32[1] doj:i32[1] dok:i32[1]
          dol:i32[1] dom:i64[4,1] don:i32[1] doo:i32[1] dop:i32[1] doq:i32[1] dor:i32[1]
          dos:i32[1] dot:i64[13,1] dou:f64[13,3] dov:f64[1,1,13,3] dow:i32[1] dox:f64[1,1,13]
          doy:i32[1] doz:f64[1,1,13] dpa:f64[1,1,13] dpb:i32[1] dpc:f64[1,1,13] dpd:f64[1,1,13]
          dpe:f64[1,1,13] dpf:i32[13,1] dpg:f64[1,1,13,1] dph:f64[200,7,1,3] dpi:i32[13,1]
          dpj:f64[13,3] dpk:f64[1,1,13,3] dpl:i32[1] dpm:f64[1,1,13] dpn:i32[1] dpo:f64[1,1,13]
          dpp:f64[1,1,13] dpq:i32[1] dpr:f64[1,1,13] dps:f64[1,1,13] dpt:f64[1,1,13]
          dpu:f64[1,1,13,3] dpv:i32[1] dpw:f64[1,1,13] dpx:i32[1] dpy:f64[1,1,13]
          dpz:f64[1,1,13] dqa:i32[1] dqb:f64[1,1,13] dqc:f64[1,1,13] dqd:f64[1,1,13]
          dqe:i64[18,1] dqf:i32[1] dqg:i32[1] dqh:i32[1] dqi:i32[1] dqj:i32[1] dqk:i32[1]
          dql:f64[1,1,18,3] dqm:f64[1,1,18,1] dqn:f64[1,1,18,1] dqo:f64[1,1,18] dqp:i32[1]
          dqq:f64[1,1,18] dqr:i32[1] dqs:f64[1,1,18] dqt:i32[1] dqu:f64[1,1,18] dqv:f64[1,1,18]
          dqw:f64[1,1,18] dqx:i32[1] dqy:i32[1] dqz:i32[1] dra:i32[1] drb:i32[1]
          drc:i32[1] drd:i32[1] dre:i32[1] drf:i32[1] drg:i32[1] drh:i32[1] dri:i32[1]
          drj:i32[1] drk:f64[200,7,1,3,3] drl:f64[200,7,1,3] drm:i32[6,1] drn:i64[4,1]
          dro:i32[4,1] drp:i64[4,1] drq:i32[4,1] drr:i64[4,1] drs:i32[4,1] drt:i64[4,1]
          dru:i64[13,1] drv:f64[200,7,1,3] drw:i32[13,1] drx:i32[1] dry:i32[1] drz:i32[1]
          dsa:i32[1] dsb:i32[1] dsc:i32[1] dsd:f64[200,7,1,3] dse:i32[6,1] dsf:i64[4,1]
          dsg:i32[4,1] dsh:i64[4,1] dsi:i32[4,1] dsj:i64[4,1] dsk:i32[4,1] dsl:i64[4,1]
          dsm:i64[13,1] dsn:f64[200,7,1,3] dso:i32[13,1] dsp:i32[1] dsq:i32[1] dsr:i32[1]
          dss:i32[1] dst:i32[1] dsu:i32[1] dsv:i64[4,1] dsw:i32[4,1] dsx:i64[4,1]
          dsy:i64[4,1] dsz:i32[4,1] dta:i64[4,1] dtb:i64[4,1] dtc:i32[4,1] dtd:i64[4,1]
          dte:i64[4,1] dtf:i64[13,1] dtg:f64[1,1,13,1] dth:f64[200,7,1,3] dti:i32[6,1]
          dtj:i32[1] dtk:i32[1] dtl:i32[1] dtm:i32[1] dtn:i32[1] dto:i32[1] dtp:i32[1]
          dtq:f64[200,7,1,3,3] dtr:i32[1] dts:i32[1] dtt:i32[1] dtu:i32[1] dtv:i32[1]
          dtw:i32[1] dtx:i64[4,1] dty:i32[4,1] dtz:i64[4,1] dua:i32[4,1] dub:i64[4,1]
          duc:i32[4,1] dud:i64[4,1] due:i64[13,1] duf:i32[1] dug:i32[1] duh:i32[1]
          dui:i32[1] duj:i32[1] duk:i32[1] dul:f64[1,1,13,1] dum:i32[1] dun:i32[1]
          duo:i32[1] dup:i32[1] duq:i32[1] dur:i32[1] dus:i32[1] dut:i32[1] duu:i32[1]
          duv:i32[1] duw:i32[1] dux:i32[1] duy:f64[200,7,1,3] duz:i32[4,1] dva:i64[4,1]
          dvb:f64[200,7,4,3] dvc:i32[4,1] dvd:i64[4,1] dve:f64[200,7,4,3] dvf:i32[4,1]
          dvg:i64[4,1] dvh:i64[13,1] dvi:i64[18,1] dvj:f64[1,1,13] dvk:f64[1,1,13]
          dvl:f64[1,1,13] dvm:f64[1,1,13] dvn:f64[1,1,13] dvo:f64[1,1,13] dvp:f64[1,1,13]
          dvq:f64[1,1,13] dvr:f64[1,1,13] dvs:f64[1,1,13] dvt:f64[1,1,13] dvu:f64[1,1,13]
          dvv:f64[1,1,13] dvw:f64[1,1,13] dvx:f64[1,1,13] dvy:f64[1,1,13] dvz:f64[13,3,3]
          dwa:i32[1] dwb:f64[1,1,1,3] dwc:i32[1] dwd:f64[1,1,1,3] dwe:f64[1,1,1,3]
          dwf:i32[1] dwg:f64[1,1,1,3] dwh:f64[1,1,1,3] dwi:f64[1,1,1,3] dwj:f64[1,1,13,1,1]
          dwk:i32[1] dwl:i32[1] dwm:i32[1] dwn:i32[1] dwo:i32[1] dwp:i32[1] dwq:i32[1]
          dwr:i32[1] dws:i32[1] dwt:i32[1] dwu:i32[1] dwv:i32[1] dww:i32[1] dwx:i32[1]
          dwy:i32[1] dwz:i32[1] dxa:i32[1] dxb:i32[1] dxc:i32[1] dxd:i32[1] dxe:i32[1]
          dxf:i32[1] dxg:i32[1] dxh:i32[1] dxi:f64[200,7,1,3] dxj:i32[4,1] dxk:i64[4,1]
          dxl:f64[200,7,4,3] dxm:i32[4,1] dxn:i64[4,1] dxo:f64[200,7,4,3] dxp:i32[4,1]
          dxq:i64[4,1] dxr:i64[13,1] dxs:i64[18,1] dxt:f64[1,1,18] dxu:f64[1,1,12,3]
          dxv:i64[1] dxw:i32[1] dxx:i32[1] dxy:i32[1] dxz:i32[1] dya:i32[1] dyb:i32[1]
          dyc:i64[4,1] dyd:i64[4,1] dye:i32[1] dyf:i32[1] dyg:i32[1] dyh:i32[1] dyi:i32[1]
          dyj:i32[1] dyk:i64[4,1] dyl:i32[1] dym:i32[1] dyn:i32[1] dyo:i32[1] dyp:i32[1]
          dyq:i32[1] dyr:i64[4,1] dys:i32[1] dyt:i32[1] dyu:i32[1] dyv:i32[1] dyw:i32[1]
          dyx:i32[1] dyy:f64[1,1,12,3] dyz:i64[1] dza:i32[1] dzb:i32[1] dzc:i32[1]
          dzd:i32[1] dze:i32[1] dzf:i32[1] dzg:i64[4,1] dzh:i32[1] dzi:i32[1] dzj:i32[1]
          dzk:i32[1] dzl:i32[1] dzm:i32[1] dzn:i32[1] dzo:i32[1] dzp:i32[1] dzq:i32[1]
          dzr:i32[1] dzs:i32[1] dzt:i64[4,1] dzu:i32[1] dzv:i32[1] dzw:i32[1] dzx:i32[1]
          dzy:i32[1] dzz:i32[1] eaa:i32[1] eab:i32[1] eac:i32[1] ead:i32[1] eae:i32[1]
          eaf:i32[1] eag:i64[4,1] eah:i32[1] eai:i32[1] eaj:i32[1] eak:i32[1] eal:i32[1]
          eam:i32[1] ean:f64[1,1,18,1] eao:f64[200,7,1,3] eap:i32[4,1] eaq:i64[4,1]
          ear:f64[200,7,4,3] eas:i32[4,1] eat:i64[4,1] eau:f64[200,7,4,3] eav:i32[4,1]
          eaw:i64[4,1] eax:i64[13,1] eay:i64[18,1] eaz:i32[1] eba:i32[1] ebb:i32[1]
          ebc:i32[1] ebd:i32[1] ebe:i32[1] ebf:f64[200,7,1,3,3] ebg:i32[4,1] ebh:i64[4,1]
          ebi:f64[200,7,4,3,3] ebj:i32[4,1] ebk:i64[4,1] ebl:f64[200,7,4,3,3] ebm:i32[4,1]
          ebn:i64[4,1] ebo:i64[13,1] ebp:i64[18,1] ebq:i32[1] ebr:i32[1] ebs:i32[1]
          ebt:i32[1] ebu:i32[1] ebv:i32[1] ebw:f64[1,1,18,18] ebx:bool[200,7,18,18]
          eby:f64[200,7,18,18] ebz:bool[200,7,18,18] eca:f64[200,7,18,18] ecb:f64[1,1,18,18]
          ecc:bool[200,7,18,18] ecd:f64[200,7,18,18] ece:bool[200,7,18,18] ecf:f64[200,7,18,18]
          ecg:bool[200,7,18,18] ech:f64[200,7,18,18] eci:f64[200,7,18,18] ecj:f64[1,1,4]
          eck:i32[1] ecl:i32[1] ecm:i32[1] ecn:i32[1] eco:i32[1] ecp:i32[1] ecq:i32[1]
          ecr:i32[1] ecs:i32[1] ect:i32[1] ecu:i32[1] ecv:i32[1] ecw:i32[1] ecx:f64[1,1,36]
          ecy:f64[1,1,36] ecz:i32[1] eda:f64[1,1,36] edb:f64[1,1,36] edc:f64[1,1,36]
          edd:f64[1,1,36] ede:f64[1,1,36] edf:f64[1,1,36] edg:f64[200,7,12] edh:f64[200,7,12]
          edi:f64[4,200,7,18] edj:f64[200,7,36]. let
          edk:f64[200,7,36] = add edj 1.0
          edl:f64[200,7,36] = mul edk dhy
          edm:f64[200,7,36] = div edl 2.0
          edn:f64[200,7,36] = add edm dhz
          edo:f64[200,7,4] = slice[
            limit_indices=(200, 7, 4)
            start_indices=(0, 0, 0)
            strides=None
          ] edn
          edp:f64[200,7,19] = scatter[
            dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(), scatter_dims_to_operand_dims=(2,))
            indices_are_sorted=True
            mode=GatherScatterMode.FILL_OR_DROP
            unique_indices=True
            update_consts=()
            update_jaxpr=None
          ] dhw dhx edo
          edq:f64[200,7,12] = slice[
            limit_indices=(200, 7, 16)
            start_indices=(0, 0, 4)
            strides=None
          ] edn
          edr:f64[200,7,19] = scatter[
            dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(), scatter_dims_to_operand_dims=(2,))
            indices_are_sorted=True
            mode=GatherScatterMode.FILL_OR_DROP
            unique_indices=True
            update_consts=()
            update_jaxpr=None
          ] edp dia edq
          eds:f64[200,7,12] = slice[
            limit_indices=(200, 7, 19)
            start_indices=(0, 0, 7)
            strides=None
          ] edr
          edt:f64[200,7,12] = neg eds
          edu:f64[200,7,12] = mul edt dib
          edv:f64[200,7,18] = concatenate[dimension=2] dhv edu
          edw:f64[200,7,4] = slice[
            limit_indices=(200, 7, 4)
            start_indices=(0, 0, 0)
            strides=None
          ] edn
          edx:f64[200,7,3] = slice[
            limit_indices=(200, 7, 4)
            start_indices=(0, 0, 1)
            strides=None
          ] edw
          edy:f64[200,7,3] = slice[
            limit_indices=(200, 7, 19)
            start_indices=(0, 0, 16)
            strides=None
          ] edn
          edz:f64[200,7] = dot_general[
            dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
            preferred_element_type=float64
          ] edx edy
          eea:f64[200,7,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(200, 7, 1)
          ] edz
          eeb:f64[200,7,3] = mul eea edx
          eec:f64[200,7,3] = mul 2.0 eeb
          eed:f64[200,7,1] = slice[
            limit_indices=(200, 7, 1)
            start_indices=(0, 0, 0)
            strides=None
          ] edw
          eee:f64[200,7] = squeeze[dimensions=(2,)] eed
          eef:f64[200,7] = mul eee eee
          eeg:f64[200,7] = dot_general[
            dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
            preferred_element_type=float64
          ] edx edx
          eeh:f64[200,7] = sub eef eeg
          eei:f64[200,7,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(200, 7, 1)
          ] eeh
          eej:f64[200,7,3] = mul eei edy
          eek:f64[200,7,3] = add eec eej
          eel:f64[200,7] = mul 2.0 eee
          eem:f64[200,7,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(200, 7, 1)
          ] eel
          een:f64[200,7,3] eeo:f64[200,7] eep:f64[200,7] eeq:f64[200,7] eer:f64[200,7]
            ees:f64[200,7] eet:f64[200,7] = pjit[name=cross jaxpr=cross] edx edy
            dif dig dih dii dij dik
          eeu:f64[200,7,3] = mul eem een
          eev:f64[200,7,3] = add eek eeu
          eew:f64[200,7,18] = scatter[
            dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(), scatter_dims_to_operand_dims=(2,))
            indices_are_sorted=True
            mode=GatherScatterMode.FILL_OR_DROP
            unique_indices=True
            update_consts=()
            update_jaxpr=None
          ] did die eev
          eex:f64[200,7,4] = mul edw dim
          eey:f64[200,7,3] = slice[
            limit_indices=(200, 7, 4)
            start_indices=(0, 0, 1)
            strides=None
          ] eex
          eez:f64[200,7,3] = slice[
            limit_indices=(200, 7, 22)
            start_indices=(0, 0, 19)
            strides=None
          ] edn
          efa:f64[200,7] = dot_general[
            dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
            preferred_element_type=float64
          ] eey eez
          efb:f64[200,7,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(200, 7, 1)
          ] efa
          efc:f64[200,7,3] = mul efb eey
          efd:f64[200,7,3] = mul 2.0 efc
          efe:f64[200,7,1] = slice[
            limit_indices=(200, 7, 1)
            start_indices=(0, 0, 0)
            strides=None
          ] eex
          eff:f64[200,7] = squeeze[dimensions=(2,)] efe
          efg:f64[200,7] = mul eff eff
          efh:f64[200,7] = dot_general[
            dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
            preferred_element_type=float64
          ] eey eey
          efi:f64[200,7] = sub efg efh
          efj:f64[200,7,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(200, 7, 1)
          ] efi
          efk:f64[200,7,3] = mul efj eez
          efl:f64[200,7,3] = add efd efk
          efm:f64[200,7] = mul 2.0 eff
          efn:f64[200,7,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(200, 7, 1)
          ] efm
          efo:f64[200,7,3] efp:f64[200,7] efq:f64[200,7] efr:f64[200,7] efs:f64[200,7]
            eft:f64[200,7] efu:f64[200,7] = pjit[name=cross jaxpr=cross] eey eez
            din dio dip diq dir dis
          efv:f64[200,7,3] = mul efn efo
          efw:f64[200,7,3] = add efl efv
          efx:f64[200,7,18] = scatter[
            dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(), scatter_dims_to_operand_dims=(2,))
            indices_are_sorted=True
            mode=GatherScatterMode.FILL_OR_DROP
            unique_indices=True
            update_consts=()
            update_jaxpr=None
          ] eew dil efw
          efy:f64[200,7,12] = slice[
            limit_indices=(200, 7, 34)
            start_indices=(0, 0, 22)
            strides=None
          ] edn
          efz:f64[200,7,18] = scatter[
            dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(), scatter_dims_to_operand_dims=(2,))
            indices_are_sorted=True
            mode=GatherScatterMode.FILL_OR_DROP
            unique_indices=True
            update_consts=()
            update_jaxpr=None
          ] efx dit efy
          ega:f64[200,7,18] = mul dic efz
          egb:f64[200,7,18] = sub edv ega
          egc:f64[200,7,7] = slice[
            limit_indices=(200, 7, 7)
            start_indices=(0, 0, 0)
            strides=None
          ] edr
          egd:f64[200,7,1,7] = reshape[dimensions=None new_sizes=(200, 7, 1, 7)] egc
          ege:f64[200,7,1,4] = slice[
            limit_indices=(200, 7, 1, 7)
            start_indices=(0, 0, 0, 3)
            strides=None
          ] egd
          egf:f64[200,7,12] = slice[
            limit_indices=(200, 7, 19)
            start_indices=(0, 0, 7)
            strides=None
          ] edr
          egg:f64[200,7,12] = div egf 2.0
          egh:f64[200,7,12] = cos egg
          egi:f64[200,7,12,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 12, 1)
          ] egh
          egj:f64[200,7,12] = div egf 2.0
          egk:f64[200,7,12] = sin egj
          egl:f64[200,7,12] = mul diz egk
          egm:f64[200,7,12,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 12, 1)
          ] egl
          egn:f64[200,7,12] = div egf 2.0
          ego:f64[200,7,12] = sin egn
          egp:f64[200,7,12] = mul dja ego
          egq:f64[200,7,12,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 12, 1)
          ] egp
          egr:f64[200,7,12] = div egf 2.0
          egs:f64[200,7,12] = sin egr
          egt:f64[200,7,12] = mul djb egs
          egu:f64[200,7,12,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 12, 1)
          ] egt
          egv:f64[200,7,12,4] = concatenate[dimension=3] egi egm egq egu
          egw:bool[200,7,12] = pjit[
            name=allclose
            jaxpr={ lambda ; egx:f64[200,7,12,4] egy:f64[] egz:f64[] eha:bool[] ehb:bool[]. let
                ehc:bool[200,7,12,4] = pjit[
                  name=isclose
                  jaxpr={ lambda ; ehd:f64[200,7,12,4] ehe:f64[] ehf:f64[] ehg:bool[]
                      ehh:bool[]. let
                      ehi:f64[200,7,12,4] = sub ehd ehe
                      ehj:f64[200,7,12,4] = abs ehi
                      ehk:bool[200,7,12,4] = le ehj ehf
                      ehl:bool[200,7,12,4] = pjit[
                        name=isinf
                        jaxpr={ lambda ; ehm:f64[200,7,12,4]. let
                            ehn:f64[200,7,12,4] = abs ehm
                            eho:bool[200,7,12,4] = eq ehn inf
                          in (eho,) }
                      ] ehd
                      ehp:bool[200,7,12,4] = or ehl ehg
                      ehq:bool[200,7,12,4] = not ehp
                      ehr:bool[200,7,12,4] = and ehk ehq
                      ehs:bool[200,7,12,4] = and ehl ehg
                      eht:bool[200,7,12,4] = eq ehd ehe
                      ehu:bool[200,7,12,4] = and ehs eht
                      ehv:bool[200,7,12,4] = or ehr ehu
                      ehw:bool[200,7,12,4] = ne ehd ehd
                      ehx:bool[200,7,12,4] = or ehw ehh
                      ehy:bool[200,7,12,4] = not ehx
                      ehz:bool[200,7,12,4] = and ehv ehy
                    in (ehz,) }
                ] egx egy egz eha ehb
                eia:bool[200,7,12] = reduce_and[axes=(3,)] ehc
              in (eia,) }
          ] egv djc djd dje djf
          eib:f64[200,7,12,4] eic:bool[200,7,12,4] = pjit[
            name=_where
            jaxpr={ lambda ; eid:bool[200,7,12] eie:f64[200,7,12,4] eif:f64[200,7,12,4]. let
                eig:bool[200,7,12,4] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1, 2)
                  shape=(200, 7, 12, 4)
                ] eid
                eih:f64[200,7,12,4] = select_n eig eie eif
              in (eih, eig) }
          ] egw egv djg
          eii:f64[200,7,12] eij:f64[200,7,12] = pjit[
            name=norm
            jaxpr={ lambda ; eik:f64[200,7,12,4]. let
                eil:f64[200,7,12,4] = mul eik eik
                eim:f64[200,7,12] = reduce_sum[axes=(3,)] eil
                ein:f64[200,7,12] = sqrt eim
                eio:f64[200,7,12] = div 0.5 ein
              in (ein, eio) }
          ] eib
          eip:f64[200,7,12] = pjit[
            name=_where
            jaxpr={ lambda ; eiq:bool[200,7,12] eir:f64[200,7,12] eis:f64[200,7,12]. let
                eit:f64[200,7,12] = select_n eiq eir eis
              in (eit,) }
          ] egw eii djh
          eiu:bool[200,7,12] = eq eip 0.0
          eiv:f64[200,7,12] = convert_element_type[
            new_dtype=float64
            weak_type=True
          ] eiu
          eiw:f64[200,7,12] = mul 1e-06 eiv
          eix:f64[200,7,12] = convert_element_type[
            new_dtype=float64
            weak_type=False
          ] eiw
          eiy:f64[200,7,12] = add eip eix
          eiz:f64[200,7,12,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 12, 1)
          ] eiy
          eja:f64[200,7,12,4] = div egv eiz
          ejb:f64[200,7,12,1,4] = reshape[
            dimensions=None
            new_sizes=(200, 7, 12, 1, 4)
          ] eja
          ejc:f64[200,7,12,4] = pjit[
            name=_take
            jaxpr={ lambda ; ejd:f64[200,7,12,1,4] eje:i64[1]. let
                ejf:f64[200,7,12,4] = gather[
                  dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2, 3), collapsed_slice_dims=(3,), start_index_map=(3,))
                  fill_value=None
                  indices_are_sorted=False
                  mode=GatherScatterMode.PROMISE_IN_BOUNDS
                  slice_sizes=(200, 7, 12, 1, 4)
                  unique_indices=False
                ] ejd eje
              in (ejf,) }
          ] ejb dji
          ejg:f64[200,7,13,4] = concatenate[dimension=2] ege ejc
          ejh:f64[200,7,13,1] = slice[
            limit_indices=(200, 7, 13, 1)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] ejg
          eji:f64[200,7,13] = squeeze[dimensions=(3,)] ejh
          ejj:f64[200,7,13] = mul diy eji
          ejk:f64[200,7,13,1] = slice[
            limit_indices=(200, 7, 13, 2)
            start_indices=(0, 0, 0, 1)
            strides=None
          ] ejg
          ejl:f64[200,7,13] = squeeze[dimensions=(3,)] ejk
          ejm:f64[200,7,13] = mul djj ejl
          ejn:f64[200,7,13] = sub ejj ejm
          ejo:f64[200,7,13,1] = slice[
            limit_indices=(200, 7, 13, 3)
            start_indices=(0, 0, 0, 2)
            strides=None
          ] ejg
          ejp:f64[200,7,13] = squeeze[dimensions=(3,)] ejo
          ejq:f64[200,7,13] = mul djk ejp
          ejr:f64[200,7,13] = sub ejn ejq
          ejs:f64[200,7,13,1] = slice[
            limit_indices=(200, 7, 13, 4)
            start_indices=(0, 0, 0, 3)
            strides=None
          ] ejg
          ejt:f64[200,7,13] = squeeze[dimensions=(3,)] ejs
          eju:f64[200,7,13] = mul djl ejt
          ejv:f64[200,7,13] = sub ejr eju
          ejw:f64[200,7,13,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 13, 1)
          ] ejv
          ejx:f64[200,7,13,1] = slice[
            limit_indices=(200, 7, 13, 2)
            start_indices=(0, 0, 0, 1)
            strides=None
          ] ejg
          ejy:f64[200,7,13] = squeeze[dimensions=(3,)] ejx
          ejz:f64[200,7,13] = mul djm ejy
          eka:f64[200,7,13,1] = slice[
            limit_indices=(200, 7, 13, 1)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] ejg
          ekb:f64[200,7,13] = squeeze[dimensions=(3,)] eka
          ekc:f64[200,7,13] = mul djn ekb
          ekd:f64[200,7,13] = add ejz ekc
          eke:f64[200,7,13,1] = slice[
            limit_indices=(200, 7, 13, 4)
            start_indices=(0, 0, 0, 3)
            strides=None
          ] ejg
          ekf:f64[200,7,13] = squeeze[dimensions=(3,)] eke
          ekg:f64[200,7,13] = mul djo ekf
          ekh:f64[200,7,13] = add ekd ekg
          eki:f64[200,7,13,1] = slice[
            limit_indices=(200, 7, 13, 3)
            start_indices=(0, 0, 0, 2)
            strides=None
          ] ejg
          ekj:f64[200,7,13] = squeeze[dimensions=(3,)] eki
          ekk:f64[200,7,13] = mul djp ekj
          ekl:f64[200,7,13] = sub ekh ekk
          ekm:f64[200,7,13,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 13, 1)
          ] ekl
          ekn:f64[200,7,13,1] = slice[
            limit_indices=(200, 7, 13, 3)
            start_indices=(0, 0, 0, 2)
            strides=None
          ] ejg
          eko:f64[200,7,13] = squeeze[dimensions=(3,)] ekn
          ekp:f64[200,7,13] = mul djq eko
          ekq:f64[200,7,13,1] = slice[
            limit_indices=(200, 7, 13, 4)
            start_indices=(0, 0, 0, 3)
            strides=None
          ] ejg
          ekr:f64[200,7,13] = squeeze[dimensions=(3,)] ekq
          eks:f64[200,7,13] = mul djr ekr
          ekt:f64[200,7,13] = sub ekp eks
          eku:f64[200,7,13,1] = slice[
            limit_indices=(200, 7, 13, 1)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] ejg
          ekv:f64[200,7,13] = squeeze[dimensions=(3,)] eku
          ekw:f64[200,7,13] = mul djs ekv
          ekx:f64[200,7,13] = add ekt ekw
          eky:f64[200,7,13,1] = slice[
            limit_indices=(200, 7, 13, 2)
            start_indices=(0, 0, 0, 1)
            strides=None
          ] ejg
          ekz:f64[200,7,13] = squeeze[dimensions=(3,)] eky
          ela:f64[200,7,13] = mul djt ekz
          elb:f64[200,7,13] = add ekx ela
          elc:f64[200,7,13,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 13, 1)
          ] elb
          eld:f64[200,7,13,1] = slice[
            limit_indices=(200, 7, 13, 4)
            start_indices=(0, 0, 0, 3)
            strides=None
          ] ejg
          ele:f64[200,7,13] = squeeze[dimensions=(3,)] eld
          elf:f64[200,7,13] = mul dju ele
          elg:f64[200,7,13,1] = slice[
            limit_indices=(200, 7, 13, 3)
            start_indices=(0, 0, 0, 2)
            strides=None
          ] ejg
          elh:f64[200,7,13] = squeeze[dimensions=(3,)] elg
          eli:f64[200,7,13] = mul djv elh
          elj:f64[200,7,13] = add elf eli
          elk:f64[200,7,13,1] = slice[
            limit_indices=(200, 7, 13, 2)
            start_indices=(0, 0, 0, 1)
            strides=None
          ] ejg
          ell:f64[200,7,13] = squeeze[dimensions=(3,)] elk
          elm:f64[200,7,13] = mul djw ell
          eln:f64[200,7,13] = sub elj elm
          elo:f64[200,7,13,1] = slice[
            limit_indices=(200, 7, 13, 1)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] ejg
          elp:f64[200,7,13] = squeeze[dimensions=(3,)] elo
          elq:f64[200,7,13] = mul djx elp
          elr:f64[200,7,13] = add eln elq
          els:f64[200,7,13,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 13, 1)
          ] elr
          elt:f64[200,7,13,4] = concatenate[dimension=3] ejw ekm elc els
          elu:f64[200,7,1,4] = slice[
            limit_indices=(200, 7, 1, 4)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] elt
          elv:f64[200,7,4,4] = pjit[
            name=_take
            jaxpr={ lambda ; elw:f64[200,7,1,4] elx:i64[4,1]. let
                ely:f64[200,7,4,4] = gather[
                  dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 3), collapsed_slice_dims=(2,), start_index_map=(2,))
                  fill_value=None
                  indices_are_sorted=False
                  mode=GatherScatterMode.PROMISE_IN_BOUNDS
                  slice_sizes=(200, 7, 1, 4)
                  unique_indices=False
                ] elw elx
              in (ely,) }
          ] elu djy
          elz:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 1)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] elv
          ema:f64[200,7,4] = squeeze[dimensions=(3,)] elz
          emb:f64[200,7,4,4] = pjit[name=_take jaxpr=_take] elt djz
          emc:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 1)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] emb
          emd:f64[200,7,4] = squeeze[dimensions=(3,)] emc
          eme:f64[200,7,4] = mul ema emd
          emf:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 2)
            start_indices=(0, 0, 0, 1)
            strides=None
          ] elv
          emg:f64[200,7,4] = squeeze[dimensions=(3,)] emf
          emh:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 2)
            start_indices=(0, 0, 0, 1)
            strides=None
          ] emb
          emi:f64[200,7,4] = squeeze[dimensions=(3,)] emh
          emj:f64[200,7,4] = mul emg emi
          emk:f64[200,7,4] = sub eme emj
          eml:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 3)
            start_indices=(0, 0, 0, 2)
            strides=None
          ] elv
          emm:f64[200,7,4] = squeeze[dimensions=(3,)] eml
          emn:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 3)
            start_indices=(0, 0, 0, 2)
            strides=None
          ] emb
          emo:f64[200,7,4] = squeeze[dimensions=(3,)] emn
          emp:f64[200,7,4] = mul emm emo
          emq:f64[200,7,4] = sub emk emp
          emr:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 4)
            start_indices=(0, 0, 0, 3)
            strides=None
          ] elv
          ems:f64[200,7,4] = squeeze[dimensions=(3,)] emr
          emt:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 4)
            start_indices=(0, 0, 0, 3)
            strides=None
          ] emb
          emu:f64[200,7,4] = squeeze[dimensions=(3,)] emt
          emv:f64[200,7,4] = mul ems emu
          emw:f64[200,7,4] = sub emq emv
          emx:f64[200,7,4,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 4, 1)
          ] emw
          emy:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 1)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] elv
          emz:f64[200,7,4] = squeeze[dimensions=(3,)] emy
          ena:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 2)
            start_indices=(0, 0, 0, 1)
            strides=None
          ] emb
          enb:f64[200,7,4] = squeeze[dimensions=(3,)] ena
          enc:f64[200,7,4] = mul emz enb
          end:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 2)
            start_indices=(0, 0, 0, 1)
            strides=None
          ] elv
          ene:f64[200,7,4] = squeeze[dimensions=(3,)] end
          enf:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 1)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] emb
          eng:f64[200,7,4] = squeeze[dimensions=(3,)] enf
          enh:f64[200,7,4] = mul ene eng
          eni:f64[200,7,4] = add enc enh
          enj:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 3)
            start_indices=(0, 0, 0, 2)
            strides=None
          ] elv
          enk:f64[200,7,4] = squeeze[dimensions=(3,)] enj
          enl:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 4)
            start_indices=(0, 0, 0, 3)
            strides=None
          ] emb
          enm:f64[200,7,4] = squeeze[dimensions=(3,)] enl
          enn:f64[200,7,4] = mul enk enm
          eno:f64[200,7,4] = add eni enn
          enp:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 4)
            start_indices=(0, 0, 0, 3)
            strides=None
          ] elv
          enq:f64[200,7,4] = squeeze[dimensions=(3,)] enp
          enr:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 3)
            start_indices=(0, 0, 0, 2)
            strides=None
          ] emb
          ens:f64[200,7,4] = squeeze[dimensions=(3,)] enr
          ent:f64[200,7,4] = mul enq ens
          enu:f64[200,7,4] = sub eno ent
          env:f64[200,7,4,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 4, 1)
          ] enu
          enw:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 1)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] elv
          enx:f64[200,7,4] = squeeze[dimensions=(3,)] enw
          eny:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 3)
            start_indices=(0, 0, 0, 2)
            strides=None
          ] emb
          enz:f64[200,7,4] = squeeze[dimensions=(3,)] eny
          eoa:f64[200,7,4] = mul enx enz
          eob:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 2)
            start_indices=(0, 0, 0, 1)
            strides=None
          ] elv
          eoc:f64[200,7,4] = squeeze[dimensions=(3,)] eob
          eod:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 4)
            start_indices=(0, 0, 0, 3)
            strides=None
          ] emb
          eoe:f64[200,7,4] = squeeze[dimensions=(3,)] eod
          eof:f64[200,7,4] = mul eoc eoe
          eog:f64[200,7,4] = sub eoa eof
          eoh:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 3)
            start_indices=(0, 0, 0, 2)
            strides=None
          ] elv
          eoi:f64[200,7,4] = squeeze[dimensions=(3,)] eoh
          eoj:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 1)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] emb
          eok:f64[200,7,4] = squeeze[dimensions=(3,)] eoj
          eol:f64[200,7,4] = mul eoi eok
          eom:f64[200,7,4] = add eog eol
          eon:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 4)
            start_indices=(0, 0, 0, 3)
            strides=None
          ] elv
          eoo:f64[200,7,4] = squeeze[dimensions=(3,)] eon
          eop:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 2)
            start_indices=(0, 0, 0, 1)
            strides=None
          ] emb
          eoq:f64[200,7,4] = squeeze[dimensions=(3,)] eop
          eor:f64[200,7,4] = mul eoo eoq
          eos:f64[200,7,4] = add eom eor
          eot:f64[200,7,4,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 4, 1)
          ] eos
          eou:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 1)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] elv
          eov:f64[200,7,4] = squeeze[dimensions=(3,)] eou
          eow:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 4)
            start_indices=(0, 0, 0, 3)
            strides=None
          ] emb
          eox:f64[200,7,4] = squeeze[dimensions=(3,)] eow
          eoy:f64[200,7,4] = mul eov eox
          eoz:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 2)
            start_indices=(0, 0, 0, 1)
            strides=None
          ] elv
          epa:f64[200,7,4] = squeeze[dimensions=(3,)] eoz
          epb:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 3)
            start_indices=(0, 0, 0, 2)
            strides=None
          ] emb
          epc:f64[200,7,4] = squeeze[dimensions=(3,)] epb
          epd:f64[200,7,4] = mul epa epc
          epe:f64[200,7,4] = add eoy epd
          epf:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 3)
            start_indices=(0, 0, 0, 2)
            strides=None
          ] elv
          epg:f64[200,7,4] = squeeze[dimensions=(3,)] epf
          eph:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 2)
            start_indices=(0, 0, 0, 1)
            strides=None
          ] emb
          epi:f64[200,7,4] = squeeze[dimensions=(3,)] eph
          epj:f64[200,7,4] = mul epg epi
          epk:f64[200,7,4] = sub epe epj
          epl:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 4)
            start_indices=(0, 0, 0, 3)
            strides=None
          ] elv
          epm:f64[200,7,4] = squeeze[dimensions=(3,)] epl
          epn:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 1)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] emb
          epo:f64[200,7,4] = squeeze[dimensions=(3,)] epn
          epp:f64[200,7,4] = mul epm epo
          epq:f64[200,7,4] = add epk epp
          epr:f64[200,7,4,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 4, 1)
          ] epq
          eps:f64[200,7,4,4] = concatenate[dimension=3] emx env eot epr
          ept:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 1)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] eps
          epu:f64[200,7,4] = squeeze[dimensions=(3,)] ept
          epv:f64[200,7,4,4] = pjit[name=_take jaxpr=_take] elt dka
          epw:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 1)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] epv
          epx:f64[200,7,4] = squeeze[dimensions=(3,)] epw
          epy:f64[200,7,4] = mul epu epx
          epz:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 2)
            start_indices=(0, 0, 0, 1)
            strides=None
          ] eps
          eqa:f64[200,7,4] = squeeze[dimensions=(3,)] epz
          eqb:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 2)
            start_indices=(0, 0, 0, 1)
            strides=None
          ] epv
          eqc:f64[200,7,4] = squeeze[dimensions=(3,)] eqb
          eqd:f64[200,7,4] = mul eqa eqc
          eqe:f64[200,7,4] = sub epy eqd
          eqf:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 3)
            start_indices=(0, 0, 0, 2)
            strides=None
          ] eps
          eqg:f64[200,7,4] = squeeze[dimensions=(3,)] eqf
          eqh:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 3)
            start_indices=(0, 0, 0, 2)
            strides=None
          ] epv
          eqi:f64[200,7,4] = squeeze[dimensions=(3,)] eqh
          eqj:f64[200,7,4] = mul eqg eqi
          eqk:f64[200,7,4] = sub eqe eqj
          eql:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 4)
            start_indices=(0, 0, 0, 3)
            strides=None
          ] eps
          eqm:f64[200,7,4] = squeeze[dimensions=(3,)] eql
          eqn:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 4)
            start_indices=(0, 0, 0, 3)
            strides=None
          ] epv
          eqo:f64[200,7,4] = squeeze[dimensions=(3,)] eqn
          eqp:f64[200,7,4] = mul eqm eqo
          eqq:f64[200,7,4] = sub eqk eqp
          eqr:f64[200,7,4,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 4, 1)
          ] eqq
          eqs:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 1)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] eps
          eqt:f64[200,7,4] = squeeze[dimensions=(3,)] eqs
          equ:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 2)
            start_indices=(0, 0, 0, 1)
            strides=None
          ] epv
          eqv:f64[200,7,4] = squeeze[dimensions=(3,)] equ
          eqw:f64[200,7,4] = mul eqt eqv
          eqx:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 2)
            start_indices=(0, 0, 0, 1)
            strides=None
          ] eps
          eqy:f64[200,7,4] = squeeze[dimensions=(3,)] eqx
          eqz:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 1)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] epv
          era:f64[200,7,4] = squeeze[dimensions=(3,)] eqz
          erb:f64[200,7,4] = mul eqy era
          erc:f64[200,7,4] = add eqw erb
          erd:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 3)
            start_indices=(0, 0, 0, 2)
            strides=None
          ] eps
          ere:f64[200,7,4] = squeeze[dimensions=(3,)] erd
          erf:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 4)
            start_indices=(0, 0, 0, 3)
            strides=None
          ] epv
          erg:f64[200,7,4] = squeeze[dimensions=(3,)] erf
          erh:f64[200,7,4] = mul ere erg
          eri:f64[200,7,4] = add erc erh
          erj:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 4)
            start_indices=(0, 0, 0, 3)
            strides=None
          ] eps
          erk:f64[200,7,4] = squeeze[dimensions=(3,)] erj
          erl:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 3)
            start_indices=(0, 0, 0, 2)
            strides=None
          ] epv
          erm:f64[200,7,4] = squeeze[dimensions=(3,)] erl
          ern:f64[200,7,4] = mul erk erm
          ero:f64[200,7,4] = sub eri ern
          erp:f64[200,7,4,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 4, 1)
          ] ero
          erq:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 1)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] eps
          err:f64[200,7,4] = squeeze[dimensions=(3,)] erq
          ers:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 3)
            start_indices=(0, 0, 0, 2)
            strides=None
          ] epv
          ert:f64[200,7,4] = squeeze[dimensions=(3,)] ers
          eru:f64[200,7,4] = mul err ert
          erv:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 2)
            start_indices=(0, 0, 0, 1)
            strides=None
          ] eps
          erw:f64[200,7,4] = squeeze[dimensions=(3,)] erv
          erx:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 4)
            start_indices=(0, 0, 0, 3)
            strides=None
          ] epv
          ery:f64[200,7,4] = squeeze[dimensions=(3,)] erx
          erz:f64[200,7,4] = mul erw ery
          esa:f64[200,7,4] = sub eru erz
          esb:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 3)
            start_indices=(0, 0, 0, 2)
            strides=None
          ] eps
          esc:f64[200,7,4] = squeeze[dimensions=(3,)] esb
          esd:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 1)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] epv
          ese:f64[200,7,4] = squeeze[dimensions=(3,)] esd
          esf:f64[200,7,4] = mul esc ese
          esg:f64[200,7,4] = add esa esf
          esh:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 4)
            start_indices=(0, 0, 0, 3)
            strides=None
          ] eps
          esi:f64[200,7,4] = squeeze[dimensions=(3,)] esh
          esj:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 2)
            start_indices=(0, 0, 0, 1)
            strides=None
          ] epv
          esk:f64[200,7,4] = squeeze[dimensions=(3,)] esj
          esl:f64[200,7,4] = mul esi esk
          esm:f64[200,7,4] = add esg esl
          esn:f64[200,7,4,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 4, 1)
          ] esm
          eso:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 1)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] eps
          esp:f64[200,7,4] = squeeze[dimensions=(3,)] eso
          esq:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 4)
            start_indices=(0, 0, 0, 3)
            strides=None
          ] epv
          esr:f64[200,7,4] = squeeze[dimensions=(3,)] esq
          ess:f64[200,7,4] = mul esp esr
          est:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 2)
            start_indices=(0, 0, 0, 1)
            strides=None
          ] eps
          esu:f64[200,7,4] = squeeze[dimensions=(3,)] est
          esv:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 3)
            start_indices=(0, 0, 0, 2)
            strides=None
          ] epv
          esw:f64[200,7,4] = squeeze[dimensions=(3,)] esv
          esx:f64[200,7,4] = mul esu esw
          esy:f64[200,7,4] = add ess esx
          esz:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 3)
            start_indices=(0, 0, 0, 2)
            strides=None
          ] eps
          eta:f64[200,7,4] = squeeze[dimensions=(3,)] esz
          etb:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 2)
            start_indices=(0, 0, 0, 1)
            strides=None
          ] epv
          etc:f64[200,7,4] = squeeze[dimensions=(3,)] etb
          etd:f64[200,7,4] = mul eta etc
          ete:f64[200,7,4] = sub esy etd
          etf:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 4)
            start_indices=(0, 0, 0, 3)
            strides=None
          ] eps
          etg:f64[200,7,4] = squeeze[dimensions=(3,)] etf
          eth:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 1)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] epv
          eti:f64[200,7,4] = squeeze[dimensions=(3,)] eth
          etj:f64[200,7,4] = mul etg eti
          etk:f64[200,7,4] = add ete etj
          etl:f64[200,7,4,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 4, 1)
          ] etk
          etm:f64[200,7,4,4] = concatenate[dimension=3] eqr erp esn etl
          etn:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 1)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] etm
          eto:f64[200,7,4] = squeeze[dimensions=(3,)] etn
          etp:f64[200,7,4,4] = pjit[name=_take jaxpr=_take] elt dkb
          etq:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 1)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] etp
          etr:f64[200,7,4] = squeeze[dimensions=(3,)] etq
          ets:f64[200,7,4] = mul eto etr
          ett:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 2)
            start_indices=(0, 0, 0, 1)
            strides=None
          ] etm
          etu:f64[200,7,4] = squeeze[dimensions=(3,)] ett
          etv:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 2)
            start_indices=(0, 0, 0, 1)
            strides=None
          ] etp
          etw:f64[200,7,4] = squeeze[dimensions=(3,)] etv
          etx:f64[200,7,4] = mul etu etw
          ety:f64[200,7,4] = sub ets etx
          etz:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 3)
            start_indices=(0, 0, 0, 2)
            strides=None
          ] etm
          eua:f64[200,7,4] = squeeze[dimensions=(3,)] etz
          eub:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 3)
            start_indices=(0, 0, 0, 2)
            strides=None
          ] etp
          euc:f64[200,7,4] = squeeze[dimensions=(3,)] eub
          eud:f64[200,7,4] = mul eua euc
          eue:f64[200,7,4] = sub ety eud
          euf:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 4)
            start_indices=(0, 0, 0, 3)
            strides=None
          ] etm
          eug:f64[200,7,4] = squeeze[dimensions=(3,)] euf
          euh:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 4)
            start_indices=(0, 0, 0, 3)
            strides=None
          ] etp
          eui:f64[200,7,4] = squeeze[dimensions=(3,)] euh
          euj:f64[200,7,4] = mul eug eui
          euk:f64[200,7,4] = sub eue euj
          eul:f64[200,7,4,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 4, 1)
          ] euk
          eum:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 1)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] etm
          eun:f64[200,7,4] = squeeze[dimensions=(3,)] eum
          euo:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 2)
            start_indices=(0, 0, 0, 1)
            strides=None
          ] etp
          eup:f64[200,7,4] = squeeze[dimensions=(3,)] euo
          euq:f64[200,7,4] = mul eun eup
          eur:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 2)
            start_indices=(0, 0, 0, 1)
            strides=None
          ] etm
          eus:f64[200,7,4] = squeeze[dimensions=(3,)] eur
          eut:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 1)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] etp
          euu:f64[200,7,4] = squeeze[dimensions=(3,)] eut
          euv:f64[200,7,4] = mul eus euu
          euw:f64[200,7,4] = add euq euv
          eux:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 3)
            start_indices=(0, 0, 0, 2)
            strides=None
          ] etm
          euy:f64[200,7,4] = squeeze[dimensions=(3,)] eux
          euz:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 4)
            start_indices=(0, 0, 0, 3)
            strides=None
          ] etp
          eva:f64[200,7,4] = squeeze[dimensions=(3,)] euz
          evb:f64[200,7,4] = mul euy eva
          evc:f64[200,7,4] = add euw evb
          evd:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 4)
            start_indices=(0, 0, 0, 3)
            strides=None
          ] etm
          eve:f64[200,7,4] = squeeze[dimensions=(3,)] evd
          evf:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 3)
            start_indices=(0, 0, 0, 2)
            strides=None
          ] etp
          evg:f64[200,7,4] = squeeze[dimensions=(3,)] evf
          evh:f64[200,7,4] = mul eve evg
          evi:f64[200,7,4] = sub evc evh
          evj:f64[200,7,4,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 4, 1)
          ] evi
          evk:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 1)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] etm
          evl:f64[200,7,4] = squeeze[dimensions=(3,)] evk
          evm:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 3)
            start_indices=(0, 0, 0, 2)
            strides=None
          ] etp
          evn:f64[200,7,4] = squeeze[dimensions=(3,)] evm
          evo:f64[200,7,4] = mul evl evn
          evp:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 2)
            start_indices=(0, 0, 0, 1)
            strides=None
          ] etm
          evq:f64[200,7,4] = squeeze[dimensions=(3,)] evp
          evr:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 4)
            start_indices=(0, 0, 0, 3)
            strides=None
          ] etp
          evs:f64[200,7,4] = squeeze[dimensions=(3,)] evr
          evt:f64[200,7,4] = mul evq evs
          evu:f64[200,7,4] = sub evo evt
          evv:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 3)
            start_indices=(0, 0, 0, 2)
            strides=None
          ] etm
          evw:f64[200,7,4] = squeeze[dimensions=(3,)] evv
          evx:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 1)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] etp
          evy:f64[200,7,4] = squeeze[dimensions=(3,)] evx
          evz:f64[200,7,4] = mul evw evy
          ewa:f64[200,7,4] = add evu evz
          ewb:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 4)
            start_indices=(0, 0, 0, 3)
            strides=None
          ] etm
          ewc:f64[200,7,4] = squeeze[dimensions=(3,)] ewb
          ewd:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 2)
            start_indices=(0, 0, 0, 1)
            strides=None
          ] etp
          ewe:f64[200,7,4] = squeeze[dimensions=(3,)] ewd
          ewf:f64[200,7,4] = mul ewc ewe
          ewg:f64[200,7,4] = add ewa ewf
          ewh:f64[200,7,4,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 4, 1)
          ] ewg
          ewi:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 1)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] etm
          ewj:f64[200,7,4] = squeeze[dimensions=(3,)] ewi
          ewk:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 4)
            start_indices=(0, 0, 0, 3)
            strides=None
          ] etp
          ewl:f64[200,7,4] = squeeze[dimensions=(3,)] ewk
          ewm:f64[200,7,4] = mul ewj ewl
          ewn:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 2)
            start_indices=(0, 0, 0, 1)
            strides=None
          ] etm
          ewo:f64[200,7,4] = squeeze[dimensions=(3,)] ewn
          ewp:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 3)
            start_indices=(0, 0, 0, 2)
            strides=None
          ] etp
          ewq:f64[200,7,4] = squeeze[dimensions=(3,)] ewp
          ewr:f64[200,7,4] = mul ewo ewq
          ews:f64[200,7,4] = add ewm ewr
          ewt:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 3)
            start_indices=(0, 0, 0, 2)
            strides=None
          ] etm
          ewu:f64[200,7,4] = squeeze[dimensions=(3,)] ewt
          ewv:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 2)
            start_indices=(0, 0, 0, 1)
            strides=None
          ] etp
          eww:f64[200,7,4] = squeeze[dimensions=(3,)] ewv
          ewx:f64[200,7,4] = mul ewu eww
          ewy:f64[200,7,4] = sub ews ewx
          ewz:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 4)
            start_indices=(0, 0, 0, 3)
            strides=None
          ] etm
          exa:f64[200,7,4] = squeeze[dimensions=(3,)] ewz
          exb:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 1)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] etp
          exc:f64[200,7,4] = squeeze[dimensions=(3,)] exb
          exd:f64[200,7,4] = mul exa exc
          exe:f64[200,7,4] = add ewy exd
          exf:f64[200,7,4,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 4, 1)
          ] exe
          exg:f64[200,7,4,4] = concatenate[dimension=3] eul evj ewh exf
          exh:f64[200,7,13,4] = concatenate[dimension=2] elu eps etm exg
          exi:f64[200,7,13,4] = pjit[
            name=_take
            jaxpr={ lambda ; exj:f64[200,7,13,4] exk:i64[13,1]. let
                exl:f64[200,7,13,4] = gather[
                  dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 3), collapsed_slice_dims=(2,), start_index_map=(2,))
                  fill_value=None
                  indices_are_sorted=False
                  mode=GatherScatterMode.PROMISE_IN_BOUNDS
                  slice_sizes=(200, 7, 1, 4)
                  unique_indices=False
                ] exj exk
              in (exl,) }
          ] exh dkc
          exm:bool[200,7,13] = pjit[
            name=allclose
            jaxpr={ lambda ; exn:f64[200,7,13,4] exo:f64[] exp:f64[] exq:bool[] exr:bool[]. let
                exs:bool[200,7,13,4] = pjit[
                  name=isclose
                  jaxpr={ lambda ; ext:f64[200,7,13,4] exu:f64[] exv:f64[] exw:bool[]
                      exx:bool[]. let
                      exy:f64[200,7,13,4] = sub ext exu
                      exz:f64[200,7,13,4] = abs exy
                      eya:bool[200,7,13,4] = le exz exv
                      eyb:bool[200,7,13,4] = pjit[
                        name=isinf
                        jaxpr={ lambda ; eyc:f64[200,7,13,4]. let
                            eyd:f64[200,7,13,4] = abs eyc
                            eye:bool[200,7,13,4] = eq eyd inf
                          in (eye,) }
                      ] ext
                      eyf:bool[200,7,13,4] = or eyb exw
                      eyg:bool[200,7,13,4] = not eyf
                      eyh:bool[200,7,13,4] = and eya eyg
                      eyi:bool[200,7,13,4] = and eyb exw
                      eyj:bool[200,7,13,4] = eq ext exu
                      eyk:bool[200,7,13,4] = and eyi eyj
                      eyl:bool[200,7,13,4] = or eyh eyk
                      eym:bool[200,7,13,4] = ne ext ext
                      eyn:bool[200,7,13,4] = or eym exx
                      eyo:bool[200,7,13,4] = not eyn
                      eyp:bool[200,7,13,4] = and eyl eyo
                    in (eyp,) }
                ] exn exo exp exq exr
                eyq:bool[200,7,13] = reduce_and[axes=(3,)] exs
              in (eyq,) }
          ] exi dkd dke dkf dkg
          eyr:f64[200,7,13,4] eys:bool[200,7,13,4] = pjit[
            name=_where
            jaxpr={ lambda ; eyt:bool[200,7,13] eyu:f64[200,7,13,4] eyv:f64[200,7,13,4]. let
                eyw:bool[200,7,13,4] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1, 2)
                  shape=(200, 7, 13, 4)
                ] eyt
                eyx:f64[200,7,13,4] = select_n eyw eyu eyv
              in (eyx, eyw) }
          ] exm exi dkh
          eyy:f64[200,7,13] eyz:f64[200,7,13] = pjit[
            name=norm
            jaxpr={ lambda ; eza:f64[200,7,13,4]. let
                ezb:f64[200,7,13,4] = mul eza eza
                ezc:f64[200,7,13] = reduce_sum[axes=(3,)] ezb
                ezd:f64[200,7,13] = sqrt ezc
                eze:f64[200,7,13] = div 0.5 ezd
              in (ezd, eze) }
          ] eyr
          ezf:f64[200,7,13] = pjit[
            name=_where
            jaxpr={ lambda ; ezg:bool[200,7,13] ezh:f64[200,7,13] ezi:f64[200,7,13]. let
                ezj:f64[200,7,13] = select_n ezg ezh ezi
              in (ezj,) }
          ] exm eyy dki
          ezk:bool[200,7,13] = eq ezf 0.0
          ezl:f64[200,7,13] = convert_element_type[
            new_dtype=float64
            weak_type=True
          ] ezk
          ezm:f64[200,7,13] = mul 1e-06 ezl
          ezn:f64[200,7,13] = convert_element_type[
            new_dtype=float64
            weak_type=False
          ] ezm
          ezo:f64[200,7,13] = add ezf ezn
          ezp:f64[200,7,13,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 13, 1)
          ] ezo
          ezq:f64[200,7,13,4] = div exi ezp
          ezr:f64[200,7,14,4] = concatenate[dimension=2] ezq dkj
          ezs:f64[200,7,13,4] = pjit[
            name=_take
            jaxpr={ lambda ; ezt:f64[200,7,14,4] ezu:i32[13,1]. let
                ezv:f64[200,7,13,4] = gather[
                  dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 3), collapsed_slice_dims=(2,), start_index_map=(2,))
                  fill_value=None
                  indices_are_sorted=False
                  mode=GatherScatterMode.PROMISE_IN_BOUNDS
                  slice_sizes=(200, 7, 1, 4)
                  unique_indices=False
                ] ezt ezu
              in (ezv,) }
          ] ezr dkk
          ezw:f64[200,7,13,1] = slice[
            limit_indices=(200, 7, 13, 1)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] ezs
          ezx:f64[200,7,13] = squeeze[dimensions=(3,)] ezw
          ezy:f64[200,7,13] = mul ezx dkl
          ezz:f64[200,7,13,1] = slice[
            limit_indices=(200, 7, 13, 2)
            start_indices=(0, 0, 0, 1)
            strides=None
          ] ezs
          faa:f64[200,7,13] = squeeze[dimensions=(3,)] ezz
          fab:f64[200,7,13] = mul faa dkm
          fac:f64[200,7,13] = sub ezy fab
          fad:f64[200,7,13,1] = slice[
            limit_indices=(200, 7, 13, 3)
            start_indices=(0, 0, 0, 2)
            strides=None
          ] ezs
          fae:f64[200,7,13] = squeeze[dimensions=(3,)] fad
          faf:f64[200,7,13] = mul fae dkn
          fag:f64[200,7,13] = sub fac faf
          fah:f64[200,7,13,1] = slice[
            limit_indices=(200, 7, 13, 4)
            start_indices=(0, 0, 0, 3)
            strides=None
          ] ezs
          fai:f64[200,7,13] = squeeze[dimensions=(3,)] fah
          faj:f64[200,7,13] = mul fai dko
          fak:f64[200,7,13] = sub fag faj
          fal:f64[200,7,13,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 13, 1)
          ] fak
          fam:f64[200,7,13,1] = slice[
            limit_indices=(200, 7, 13, 1)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] ezs
          fan:f64[200,7,13] = squeeze[dimensions=(3,)] fam
          fao:f64[200,7,13] = mul fan dkp
          fap:f64[200,7,13,1] = slice[
            limit_indices=(200, 7, 13, 2)
            start_indices=(0, 0, 0, 1)
            strides=None
          ] ezs
          faq:f64[200,7,13] = squeeze[dimensions=(3,)] fap
          far:f64[200,7,13] = mul faq dkq
          fas:f64[200,7,13] = add fao far
          fat:f64[200,7,13,1] = slice[
            limit_indices=(200, 7, 13, 3)
            start_indices=(0, 0, 0, 2)
            strides=None
          ] ezs
          fau:f64[200,7,13] = squeeze[dimensions=(3,)] fat
          fav:f64[200,7,13] = mul fau dkr
          faw:f64[200,7,13] = add fas fav
          fax:f64[200,7,13,1] = slice[
            limit_indices=(200, 7, 13, 4)
            start_indices=(0, 0, 0, 3)
            strides=None
          ] ezs
          fay:f64[200,7,13] = squeeze[dimensions=(3,)] fax
          faz:f64[200,7,13] = mul fay dks
          fba:f64[200,7,13] = sub faw faz
          fbb:f64[200,7,13,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 13, 1)
          ] fba
          fbc:f64[200,7,13,1] = slice[
            limit_indices=(200, 7, 13, 1)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] ezs
          fbd:f64[200,7,13] = squeeze[dimensions=(3,)] fbc
          fbe:f64[200,7,13] = mul fbd dkt
          fbf:f64[200,7,13,1] = slice[
            limit_indices=(200, 7, 13, 2)
            start_indices=(0, 0, 0, 1)
            strides=None
          ] ezs
          fbg:f64[200,7,13] = squeeze[dimensions=(3,)] fbf
          fbh:f64[200,7,13] = mul fbg dku
          fbi:f64[200,7,13] = sub fbe fbh
          fbj:f64[200,7,13,1] = slice[
            limit_indices=(200, 7, 13, 3)
            start_indices=(0, 0, 0, 2)
            strides=None
          ] ezs
          fbk:f64[200,7,13] = squeeze[dimensions=(3,)] fbj
          fbl:f64[200,7,13] = mul fbk dkv
          fbm:f64[200,7,13] = add fbi fbl
          fbn:f64[200,7,13,1] = slice[
            limit_indices=(200, 7, 13, 4)
            start_indices=(0, 0, 0, 3)
            strides=None
          ] ezs
          fbo:f64[200,7,13] = squeeze[dimensions=(3,)] fbn
          fbp:f64[200,7,13] = mul fbo dkw
          fbq:f64[200,7,13] = add fbm fbp
          fbr:f64[200,7,13,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 13, 1)
          ] fbq
          fbs:f64[200,7,13,1] = slice[
            limit_indices=(200, 7, 13, 1)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] ezs
          fbt:f64[200,7,13] = squeeze[dimensions=(3,)] fbs
          fbu:f64[200,7,13] = mul fbt dkx
          fbv:f64[200,7,13,1] = slice[
            limit_indices=(200, 7, 13, 2)
            start_indices=(0, 0, 0, 1)
            strides=None
          ] ezs
          fbw:f64[200,7,13] = squeeze[dimensions=(3,)] fbv
          fbx:f64[200,7,13] = mul fbw dky
          fby:f64[200,7,13] = add fbu fbx
          fbz:f64[200,7,13,1] = slice[
            limit_indices=(200, 7, 13, 3)
            start_indices=(0, 0, 0, 2)
            strides=None
          ] ezs
          fca:f64[200,7,13] = squeeze[dimensions=(3,)] fbz
          fcb:f64[200,7,13] = mul fca dkz
          fcc:f64[200,7,13] = sub fby fcb
          fcd:f64[200,7,13,1] = slice[
            limit_indices=(200, 7, 13, 4)
            start_indices=(0, 0, 0, 3)
            strides=None
          ] ezs
          fce:f64[200,7,13] = squeeze[dimensions=(3,)] fcd
          fcf:f64[200,7,13] = mul fce dla
          fcg:f64[200,7,13] = add fcc fcf
          fch:f64[200,7,13,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 13, 1)
          ] fcg
          fci:f64[200,7,13,4] = concatenate[dimension=3] fal fbb fbr fch
          fcj:f64[200,7,13,1] = slice[
            limit_indices=(200, 7, 13, 1)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] fci
          fck:f64[200,7,13] = squeeze[dimensions=(3,)] fcj
          fcl:f64[200,7,13] = mul fck dlb
          fcm:f64[200,7,13,1] = slice[
            limit_indices=(200, 7, 13, 2)
            start_indices=(0, 0, 0, 1)
            strides=None
          ] fci
          fcn:f64[200,7,13] = squeeze[dimensions=(3,)] fcm
          fco:f64[200,7,13] = mul fcn dlc
          fcp:f64[200,7,13] = sub fcl fco
          fcq:f64[200,7,13,1] = slice[
            limit_indices=(200, 7, 13, 3)
            start_indices=(0, 0, 0, 2)
            strides=None
          ] fci
          fcr:f64[200,7,13] = squeeze[dimensions=(3,)] fcq
          fcs:f64[200,7,13] = mul fcr dld
          fct:f64[200,7,13] = sub fcp fcs
          fcu:f64[200,7,13,1] = slice[
            limit_indices=(200, 7, 13, 4)
            start_indices=(0, 0, 0, 3)
            strides=None
          ] fci
          fcv:f64[200,7,13] = squeeze[dimensions=(3,)] fcu
          fcw:f64[200,7,13] = mul fcv dle
          fcx:f64[200,7,13] = sub fct fcw
          fcy:f64[200,7,13,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 13, 1)
          ] fcx
          fcz:f64[200,7,13,1] = slice[
            limit_indices=(200, 7, 13, 1)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] fci
          fda:f64[200,7,13] = squeeze[dimensions=(3,)] fcz
          fdb:f64[200,7,13] = mul fda dlf
          fdc:f64[200,7,13,1] = slice[
            limit_indices=(200, 7, 13, 2)
            start_indices=(0, 0, 0, 1)
            strides=None
          ] fci
          fdd:f64[200,7,13] = squeeze[dimensions=(3,)] fdc
          fde:f64[200,7,13] = mul fdd dlg
          fdf:f64[200,7,13] = add fdb fde
          fdg:f64[200,7,13,1] = slice[
            limit_indices=(200, 7, 13, 3)
            start_indices=(0, 0, 0, 2)
            strides=None
          ] fci
          fdh:f64[200,7,13] = squeeze[dimensions=(3,)] fdg
          fdi:f64[200,7,13] = mul fdh dlh
          fdj:f64[200,7,13] = add fdf fdi
          fdk:f64[200,7,13,1] = slice[
            limit_indices=(200, 7, 13, 4)
            start_indices=(0, 0, 0, 3)
            strides=None
          ] fci
          fdl:f64[200,7,13] = squeeze[dimensions=(3,)] fdk
          fdm:f64[200,7,13] = mul fdl dli
          fdn:f64[200,7,13] = sub fdj fdm
          fdo:f64[200,7,13,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 13, 1)
          ] fdn
          fdp:f64[200,7,13,1] = slice[
            limit_indices=(200, 7, 13, 1)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] fci
          fdq:f64[200,7,13] = squeeze[dimensions=(3,)] fdp
          fdr:f64[200,7,13] = mul fdq dlj
          fds:f64[200,7,13,1] = slice[
            limit_indices=(200, 7, 13, 2)
            start_indices=(0, 0, 0, 1)
            strides=None
          ] fci
          fdt:f64[200,7,13] = squeeze[dimensions=(3,)] fds
          fdu:f64[200,7,13] = mul fdt dlk
          fdv:f64[200,7,13] = sub fdr fdu
          fdw:f64[200,7,13,1] = slice[
            limit_indices=(200, 7, 13, 3)
            start_indices=(0, 0, 0, 2)
            strides=None
          ] fci
          fdx:f64[200,7,13] = squeeze[dimensions=(3,)] fdw
          fdy:f64[200,7,13] = mul fdx dll
          fdz:f64[200,7,13] = add fdv fdy
          fea:f64[200,7,13,1] = slice[
            limit_indices=(200, 7, 13, 4)
            start_indices=(0, 0, 0, 3)
            strides=None
          ] fci
          feb:f64[200,7,13] = squeeze[dimensions=(3,)] fea
          fec:f64[200,7,13] = mul feb dlm
          fed:f64[200,7,13] = add fdz fec
          fee:f64[200,7,13,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 13, 1)
          ] fed
          fef:f64[200,7,13,1] = slice[
            limit_indices=(200, 7, 13, 1)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] fci
          feg:f64[200,7,13] = squeeze[dimensions=(3,)] fef
          feh:f64[200,7,13] = mul feg dln
          fei:f64[200,7,13,1] = slice[
            limit_indices=(200, 7, 13, 2)
            start_indices=(0, 0, 0, 1)
            strides=None
          ] fci
          fej:f64[200,7,13] = squeeze[dimensions=(3,)] fei
          fek:f64[200,7,13] = mul fej dlo
          fel:f64[200,7,13] = add feh fek
          fem:f64[200,7,13,1] = slice[
            limit_indices=(200, 7, 13, 3)
            start_indices=(0, 0, 0, 2)
            strides=None
          ] fci
          fen:f64[200,7,13] = squeeze[dimensions=(3,)] fem
          feo:f64[200,7,13] = mul fen dlp
          fep:f64[200,7,13] = sub fel feo
          feq:f64[200,7,13,1] = slice[
            limit_indices=(200, 7, 13, 4)
            start_indices=(0, 0, 0, 3)
            strides=None
          ] fci
          fer:f64[200,7,13] = squeeze[dimensions=(3,)] feq
          fes:f64[200,7,13] = mul fer dlq
          fet:f64[200,7,13] = add fep fes
          feu:f64[200,7,13,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 13, 1)
          ] fet
          fev:f64[200,7,13,4] = concatenate[dimension=3] fcy fdo fee feu
          few:f64[200,7,18,4] = pjit[
            name=_take
            jaxpr={ lambda ; fex:f64[200,7,13,4] fey:i64[18,1]. let
                fez:f64[200,7,18,4] = gather[
                  dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 3), collapsed_slice_dims=(2,), start_index_map=(2,))
                  fill_value=None
                  indices_are_sorted=False
                  mode=GatherScatterMode.PROMISE_IN_BOUNDS
                  slice_sizes=(200, 7, 1, 4)
                  unique_indices=False
                ] fex fey
              in (fez,) }
          ] fev dlr
          ffa:f64[200,7,18,3] = slice[
            limit_indices=(200, 7, 18, 4)
            start_indices=(0, 0, 0, 1)
            strides=None
          ] few
          ffb:f64[18,200,7] = dot_general[
            dimension_numbers=(([3], [1]), ([2], [0]))
            preferred_element_type=float64
          ] ffa dls
          ffc:f64[200,7,18] = transpose[permutation=(1, 2, 0)] ffb
          ffd:f64[200,7,18,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 18, 1)
          ] ffc
          ffe:f64[200,7,18,3] = mul ffd ffa
          fff:f64[200,7,18,3] = mul 2.0 ffe
          ffg:f64[200,7,18,1] = slice[
            limit_indices=(200, 7, 18, 1)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] few
          ffh:f64[200,7,18] = squeeze[dimensions=(3,)] ffg
          ffi:f64[200,7,18] = mul ffh ffh
          ffj:f64[200,7,18] = dot_general[
            dimension_numbers=(([3], [3]), ([0, 1, 2], [0, 1, 2]))
            preferred_element_type=float64
          ] ffa ffa
          ffk:f64[200,7,18] = sub ffi ffj
          ffl:f64[200,7,18,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 18, 1)
          ] ffk
          ffm:f64[200,7,18,3] = mul ffl dlt
          ffn:f64[200,7,18,3] = add fff ffm
          ffo:f64[200,7,18] = mul 2.0 ffh
          ffp:f64[200,7,18,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 18, 1)
          ] ffo
          ffq:f64[200,7,18,3] = pjit[
            name=cross
            jaxpr={ lambda ; ffr:f64[200,7,18,3] ffs:i32[1] fft:f64[1,1,18] ffu:i32[1]
                ffv:f64[1,1,18] ffw:f64[1,1,18] ffx:i32[1] ffy:f64[1,1,18] ffz:f64[1,1,18]
                fga:f64[1,1,18]. let
                fgb:f64[200,7,18] = gather[
                  dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
                  fill_value=None
                  indices_are_sorted=True
                  mode=GatherScatterMode.PROMISE_IN_BOUNDS
                  slice_sizes=(200, 7, 18, 1)
                  unique_indices=True
                ] ffr ffs
                fgc:f64[200,7,18] = mul fgb fft
                fgd:f64[200,7,18] = gather[
                  dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
                  fill_value=None
                  indices_are_sorted=True
                  mode=GatherScatterMode.PROMISE_IN_BOUNDS
                  slice_sizes=(200, 7, 18, 1)
                  unique_indices=True
                ] ffr ffu
                fge:f64[200,7,18] = mul fgd ffv
                fgf:f64[200,7,18] = sub fgc fge
                fgg:f64[200,7,18,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1, 2)
                  shape=(200, 7, 18, 1)
                ] fgf
                fgh:f64[200,7,18] = mul fgd ffw
                fgi:f64[200,7,18] = gather[
                  dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
                  fill_value=None
                  indices_are_sorted=True
                  mode=GatherScatterMode.PROMISE_IN_BOUNDS
                  slice_sizes=(200, 7, 18, 1)
                  unique_indices=True
                ] ffr ffx
                fgj:f64[200,7,18] = mul fgi ffy
                fgk:f64[200,7,18] = sub fgh fgj
                fgl:f64[200,7,18,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1, 2)
                  shape=(200, 7, 18, 1)
                ] fgk
                fgm:f64[200,7,18] = mul fgi ffz
                fgn:f64[200,7,18] = mul fgb fga
                fgo:f64[200,7,18] = sub fgm fgn
                fgp:f64[200,7,18,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1, 2)
                  shape=(200, 7, 18, 1)
                ] fgo
                fgq:f64[200,7,18,3] = concatenate[dimension=3] fgg fgl fgp
              in (fgq,) }
          ] ffa dlu dlv dlw dlx dly dlz dma dmb dmc
          fgr:f64[200,7,18,3] = mul ffp ffq
          fgs:f64[200,7,18,3] = add ffn fgr
          fgt:f64[18,200,7] = dot_general[
            dimension_numbers=(([1], [3]), ([0], [2]))
            preferred_element_type=float64
          ] dix fgs
          fgu:f64[200,7,18] = transpose[permutation=(1, 2, 0)] fgt
          fgv:f64[200,7,18,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 18, 1)
          ] fgu
          fgw:f64[200,7,18,3] = mul fgv dmd
          fgx:f64[200,7,18,3] = mul 2.0 fgw
          fgy:f64[200,7,18,3] = mul dme fgs
          fgz:f64[200,7,18,3] = add fgx fgy
          fha:f64[200,7,18,3] = pjit[name=cross jaxpr=cross1] fgs dmg dmh dmi dmj
            dmk dml dmm dmn dmo
          fhb:f64[200,7,18,3] = mul dmf fha
          fhc:f64[200,7,18,3] = add fgz fhb
          fhd:f64[200,7,18,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 18, 1)
          ] efz
          fhe:f64[200,7,18,3] = mul fhc fhd
          fhf:f64[200,7,6,3] = slice[
            limit_indices=(200, 7, 6, 3)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] fhe
          fhg:f64[200,7,1,6,3] = reshape[
            dimensions=None
            new_sizes=(200, 7, 1, 6, 3)
          ] fhf
          fhh:f64[200,7,1,3,3] = slice[
            limit_indices=(200, 7, 1, 3, 3)
            start_indices=(0, 0, 0, 0, 0)
            strides=None
          ] fhg
          fhi:f64[200,7,1,3] = reduce_sum[axes=(3,)] fhh
          fhj:f64[200,7,1,3] = slice[
            limit_indices=(200, 7, 1, 3)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] egd
          fhk:f64[200,7,12,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 12, 1)
          ] egf
          fhl:f64[200,7,12,3] = mul dmw fhk
          fhm:f64[200,7,12,1,3] = reshape[
            dimensions=None
            new_sizes=(200, 7, 12, 1, 3)
          ] fhl
          fhn:f64[200,7,12,3] = pjit[name=_take jaxpr=_take1] fhm dmx
          fho:f64[200,7,13,3] = concatenate[dimension=2] fhj fhn
          fhp:f64[200,7,13,3] = add fho dmy
          fhq:f64[200,7,13,3] = slice[
            limit_indices=(200, 7, 13, 4)
            start_indices=(0, 0, 0, 1)
            strides=None
          ] ejg
          fhr:f64[13,200,7] = dot_general[
            dimension_numbers=(([3], [1]), ([2], [0]))
            preferred_element_type=float64
          ] fhq dna
          fhs:f64[200,7,13] = transpose[permutation=(1, 2, 0)] fhr
          fht:f64[200,7,13,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 13, 1)
          ] fhs
          fhu:f64[200,7,13,3] = mul fht fhq
          fhv:f64[200,7,13,3] = mul 2.0 fhu
          fhw:f64[200,7,13,1] = slice[
            limit_indices=(200, 7, 13, 1)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] ejg
          fhx:f64[200,7,13] = squeeze[dimensions=(3,)] fhw
          fhy:f64[200,7,13] = mul fhx fhx
          fhz:f64[200,7,13] = dot_general[
            dimension_numbers=(([3], [3]), ([0, 1, 2], [0, 1, 2]))
            preferred_element_type=float64
          ] fhq fhq
          fia:f64[200,7,13] = sub fhy fhz
          fib:f64[200,7,13,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 13, 1)
          ] fia
          fic:f64[200,7,13,3] = mul fib dnb
          fid:f64[200,7,13,3] = add fhv fic
          fie:f64[200,7,13] = mul 2.0 fhx
          fif:f64[200,7,13,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 13, 1)
          ] fie
          fig:f64[200,7,13,3] = pjit[name=cross jaxpr=cross2] fhq dnc dnd dne dnf
            dng dnh dni dnj dnk
          fih:f64[200,7,13,3] = mul fif fig
          fii:f64[200,7,13,3] = add fid fih
          fij:f64[200,7,13,3] = add dmz fii
          fik:f64[200,7,13,3] = sub fhp fij
          fil:f64[13,200,7] = dot_general[
            dimension_numbers=(([1], [3]), ([0], [2]))
            preferred_element_type=float64
          ] dmv fik
          fim:f64[200,7,13] = transpose[permutation=(1, 2, 0)] fil
          fin:f64[200,7,13,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 13, 1)
          ] fim
          fio:f64[200,7,13,3] = mul fin dnl
          fip:f64[200,7,13,3] = mul 2.0 fio
          fiq:f64[200,7,13,3] = mul dnm fik
          fir:f64[200,7,13,3] = add fip fiq
          fis:f64[200,7,13,3] = pjit[
            name=cross
            jaxpr={ lambda ; fit:f64[200,7,13,3] fiu:f64[1,1,13] fiv:i32[1] fiw:f64[1,1,13]
                fix:i32[1] fiy:f64[1,1,13] fiz:i32[1] fja:f64[1,1,13] fjb:f64[1,1,13]
                fjc:f64[1,1,13]. let
                fjd:f64[200,7,13] = gather[
                  dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
                  fill_value=None
                  indices_are_sorted=True
                  mode=GatherScatterMode.PROMISE_IN_BOUNDS
                  slice_sizes=(200, 7, 13, 1)
                  unique_indices=True
                ] fit fiv
                fje:f64[200,7,13] = mul fiu fjd
                fjf:f64[200,7,13] = gather[
                  dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
                  fill_value=None
                  indices_are_sorted=True
                  mode=GatherScatterMode.PROMISE_IN_BOUNDS
                  slice_sizes=(200, 7, 13, 1)
                  unique_indices=True
                ] fit fix
                fjg:f64[200,7,13] = mul fiw fjf
                fjh:f64[200,7,13] = sub fje fjg
                fji:f64[200,7,13,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1, 2)
                  shape=(200, 7, 13, 1)
                ] fjh
                fjj:f64[200,7,13] = gather[
                  dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
                  fill_value=None
                  indices_are_sorted=True
                  mode=GatherScatterMode.PROMISE_IN_BOUNDS
                  slice_sizes=(200, 7, 13, 1)
                  unique_indices=True
                ] fit fiz
                fjk:f64[200,7,13] = mul fiy fjj
                fjl:f64[200,7,13] = mul fja fjd
                fjm:f64[200,7,13] = sub fjk fjl
                fjn:f64[200,7,13,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1, 2)
                  shape=(200, 7, 13, 1)
                ] fjm
                fjo:f64[200,7,13] = mul fjb fjf
                fjp:f64[200,7,13] = mul fjc fjj
                fjq:f64[200,7,13] = sub fjo fjp
                fjr:f64[200,7,13,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1, 2)
                  shape=(200, 7, 13, 1)
                ] fjq
                fjs:f64[200,7,13,3] = concatenate[dimension=3] fji fjn fjr
              in (fjs,) }
          ] fik dno dnp dnq dnr dns dnt dnu dnv dnw
          fjt:f64[200,7,13,3] = mul dnn fis
          fju:f64[200,7,13,3] = add fir fjt
          fjv:f64[200,7,13,3] = add dmu fju
          fjw:f64[200,7,1,3] = slice[
            limit_indices=(200, 7, 1, 3)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] fjv
          fjx:f64[200,7,4,3] = pjit[name=_take jaxpr=_take2] fjw dnx
          fjy:f64[200,7,4,3] = slice[
            limit_indices=(200, 7, 4, 4)
            start_indices=(0, 0, 0, 1)
            strides=None
          ] elv
          fjz:f64[200,7,4,3] = pjit[name=_take jaxpr=_take3] fjv dny
          fka:f64[200,7,4] = dot_general[
            dimension_numbers=(([3], [3]), ([0, 1, 2], [0, 1, 2]))
            preferred_element_type=float64
          ] fjy fjz
          fkb:f64[200,7,4,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 4, 1)
          ] fka
          fkc:f64[200,7,4,3] = mul fkb fjy
          fkd:f64[200,7,4,3] = mul 2.0 fkc
          fke:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 1)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] elv
          fkf:f64[200,7,4] = squeeze[dimensions=(3,)] fke
          fkg:f64[200,7,4] = mul fkf fkf
          fkh:f64[200,7,4] = dot_general[
            dimension_numbers=(([3], [3]), ([0, 1, 2], [0, 1, 2]))
            preferred_element_type=float64
          ] fjy fjy
          fki:f64[200,7,4] = sub fkg fkh
          fkj:f64[200,7,4,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 4, 1)
          ] fki
          fkk:f64[200,7,4,3] = mul fkj fjz
          fkl:f64[200,7,4,3] = add fkd fkk
          fkm:f64[200,7,4] = mul 2.0 fkf
          fkn:f64[200,7,4,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 4, 1)
          ] fkm
          fko:f64[200,7,4,3] fkp:f64[200,7,4] fkq:f64[200,7,4] fkr:f64[200,7,4] fks:f64[200,7,4]
            fkt:f64[200,7,4] fku:f64[200,7,4] = pjit[name=cross jaxpr=cross3] fjy
            fjz dnz doa dob doc dod doe
          fkv:f64[200,7,4,3] = mul fkn fko
          fkw:f64[200,7,4,3] = add fkl fkv
          fkx:f64[200,7,4,3] = add fjx fkw
          fky:f64[200,7,4,3] = slice[
            limit_indices=(200, 7, 4, 4)
            start_indices=(0, 0, 0, 1)
            strides=None
          ] eps
          fkz:f64[200,7,4,3] = pjit[name=_take jaxpr=_take3] fjv dof
          fla:f64[200,7,4] = dot_general[
            dimension_numbers=(([3], [3]), ([0, 1, 2], [0, 1, 2]))
            preferred_element_type=float64
          ] fky fkz
          flb:f64[200,7,4,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 4, 1)
          ] fla
          flc:f64[200,7,4,3] = mul flb fky
          fld:f64[200,7,4,3] = mul 2.0 flc
          fle:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 1)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] eps
          flf:f64[200,7,4] = squeeze[dimensions=(3,)] fle
          flg:f64[200,7,4] = mul flf flf
          flh:f64[200,7,4] = dot_general[
            dimension_numbers=(([3], [3]), ([0, 1, 2], [0, 1, 2]))
            preferred_element_type=float64
          ] fky fky
          fli:f64[200,7,4] = sub flg flh
          flj:f64[200,7,4,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 4, 1)
          ] fli
          flk:f64[200,7,4,3] = mul flj fkz
          fll:f64[200,7,4,3] = add fld flk
          flm:f64[200,7,4] = mul 2.0 flf
          fln:f64[200,7,4,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 4, 1)
          ] flm
          flo:f64[200,7,4,3] flp:f64[200,7,4] flq:f64[200,7,4] flr:f64[200,7,4] fls:f64[200,7,4]
            flt:f64[200,7,4] flu:f64[200,7,4] = pjit[name=cross jaxpr=cross3] fky
            fkz dog doh doi doj dok dol
          flv:f64[200,7,4,3] = mul fln flo
          flw:f64[200,7,4,3] = add fll flv
          flx:f64[200,7,4,3] = add fkx flw
          fly:f64[200,7,4,3] = slice[
            limit_indices=(200, 7, 4, 4)
            start_indices=(0, 0, 0, 1)
            strides=None
          ] etm
          flz:f64[200,7,4,3] = pjit[name=_take jaxpr=_take3] fjv dom
          fma:f64[200,7,4] = dot_general[
            dimension_numbers=(([3], [3]), ([0, 1, 2], [0, 1, 2]))
            preferred_element_type=float64
          ] fly flz
          fmb:f64[200,7,4,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 4, 1)
          ] fma
          fmc:f64[200,7,4,3] = mul fmb fly
          fmd:f64[200,7,4,3] = mul 2.0 fmc
          fme:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 1)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] etm
          fmf:f64[200,7,4] = squeeze[dimensions=(3,)] fme
          fmg:f64[200,7,4] = mul fmf fmf
          fmh:f64[200,7,4] = dot_general[
            dimension_numbers=(([3], [3]), ([0, 1, 2], [0, 1, 2]))
            preferred_element_type=float64
          ] fly fly
          fmi:f64[200,7,4] = sub fmg fmh
          fmj:f64[200,7,4,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 4, 1)
          ] fmi
          fmk:f64[200,7,4,3] = mul fmj flz
          fml:f64[200,7,4,3] = add fmd fmk
          fmm:f64[200,7,4] = mul 2.0 fmf
          fmn:f64[200,7,4,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 4, 1)
          ] fmm
          fmo:f64[200,7,4,3] fmp:f64[200,7,4] fmq:f64[200,7,4] fmr:f64[200,7,4] fms:f64[200,7,4]
            fmt:f64[200,7,4] fmu:f64[200,7,4] = pjit[name=cross jaxpr=cross3] fly
            flz don doo dop doq dor dos
          fmv:f64[200,7,4,3] = mul fmn fmo
          fmw:f64[200,7,4,3] = add fml fmv
          fmx:f64[200,7,4,3] = add flx fmw
          fmy:f64[200,7,13,3] = concatenate[dimension=2] fjw fkx flx fmx
          fmz:f64[200,7,13,3] = pjit[name=_take jaxpr=_take4] fmy dot
          fna:f64[200,7,13,3] = slice[
            limit_indices=(200, 7, 13, 4)
            start_indices=(0, 0, 0, 1)
            strides=None
          ] ezq
          fnb:f64[13,200,7] = dot_general[
            dimension_numbers=(([3], [1]), ([2], [0]))
            preferred_element_type=float64
          ] fna dou
          fnc:f64[200,7,13] = transpose[permutation=(1, 2, 0)] fnb
          fnd:f64[200,7,13,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 13, 1)
          ] fnc
          fne:f64[200,7,13,3] = mul fnd fna
          fnf:f64[200,7,13,3] = mul 2.0 fne
          fng:f64[200,7,13,1] = slice[
            limit_indices=(200, 7, 13, 1)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] ezq
          fnh:f64[200,7,13] = squeeze[dimensions=(3,)] fng
          fni:f64[200,7,13] = mul fnh fnh
          fnj:f64[200,7,13] = dot_general[
            dimension_numbers=(([3], [3]), ([0, 1, 2], [0, 1, 2]))
            preferred_element_type=float64
          ] fna fna
          fnk:f64[200,7,13] = sub fni fnj
          fnl:f64[200,7,13,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 13, 1)
          ] fnk
          fnm:f64[200,7,13,3] = mul fnl dov
          fnn:f64[200,7,13,3] = add fnf fnm
          fno:f64[200,7,13] = mul 2.0 fnh
          fnp:f64[200,7,13,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 13, 1)
          ] fno
          fnq:f64[200,7,13,3] = pjit[name=cross jaxpr=cross2] fna dow dox doy doz
            dpa dpb dpc dpd dpe
          fnr:f64[200,7,13,3] = mul fnp fnq
          fns:f64[200,7,13,3] = add fnn fnr
          fnt:f64[200,7,13,3] = add fmz fns
          fnu:f64[200,7,13,3] = mul dmt fnt
          fnv:f64[200,7,13,3] = scatter-add[
            dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
            indices_are_sorted=False
            mode=GatherScatterMode.FILL_OR_DROP
            unique_indices=False
            update_consts=()
            update_jaxpr=jaxpr
          ] dmr dms fnu
          fnw:f64[200,7,13,3] = gather[
            dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 3), collapsed_slice_dims=(2,), start_index_map=(2,))
            fill_value=None
            indices_are_sorted=False
            mode=GatherScatterMode.PROMISE_IN_BOUNDS
            slice_sizes=(200, 7, 1, 3)
            unique_indices=False
          ] fnv dpf
          fnx:f64[200,7,13,3] = div fnw dpg
          fny:f64[200,7,14,3] = concatenate[dimension=2] fmz dph
          fnz:f64[200,7,13,3] = pjit[name=_take jaxpr=_take5] fny dpi
          foa:f64[200,7,13,3] = slice[
            limit_indices=(200, 7, 13, 4)
            start_indices=(0, 0, 0, 1)
            strides=None
          ] ezs
          fob:f64[13,200,7] = dot_general[
            dimension_numbers=(([3], [1]), ([2], [0]))
            preferred_element_type=float64
          ] foa dpj
          foc:f64[200,7,13] = transpose[permutation=(1, 2, 0)] fob
          fod:f64[200,7,13,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 13, 1)
          ] foc
          foe:f64[200,7,13,3] = mul fod foa
          fof:f64[200,7,13,3] = mul 2.0 foe
          fog:f64[200,7,13,1] = slice[
            limit_indices=(200, 7, 13, 1)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] ezs
          foh:f64[200,7,13] = squeeze[dimensions=(3,)] fog
          foi:f64[200,7,13] = mul foh foh
          foj:f64[200,7,13] = dot_general[
            dimension_numbers=(([3], [3]), ([0, 1, 2], [0, 1, 2]))
            preferred_element_type=float64
          ] foa foa
          fok:f64[200,7,13] = sub foi foj
          fol:f64[200,7,13,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 13, 1)
          ] fok
          fom:f64[200,7,13,3] = mul fol dpk
          fon:f64[200,7,13,3] = add fof fom
          foo:f64[200,7,13] = mul 2.0 foh
          fop:f64[200,7,13,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 13, 1)
          ] foo
          foq:f64[200,7,13,3] = pjit[name=cross jaxpr=cross2] foa dpl dpm dpn dpo
            dpp dpq dpr dps dpt
          for:f64[200,7,13,3] = mul fop foq
          fos:f64[200,7,13,3] = add fon for
          fot:f64[200,7,13,3] = add fnz fos
          fou:f64[200,7,13,3] = slice[
            limit_indices=(200, 7, 13, 4)
            start_indices=(0, 0, 0, 1)
            strides=None
          ] fci
          fov:f64[13,200,7] = dot_general[
            dimension_numbers=(([3], [1]), ([2], [0]))
            preferred_element_type=float64
          ] fou dna
          fow:f64[200,7,13] = transpose[permutation=(1, 2, 0)] fov
          fox:f64[200,7,13,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 13, 1)
          ] fow
          foy:f64[200,7,13,3] = mul fox fou
          foz:f64[200,7,13,3] = mul 2.0 foy
          fpa:f64[200,7,13,1] = slice[
            limit_indices=(200, 7, 13, 1)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] fci
          fpb:f64[200,7,13] = squeeze[dimensions=(3,)] fpa
          fpc:f64[200,7,13] = mul fpb fpb
          fpd:f64[200,7,13] = dot_general[
            dimension_numbers=(([3], [3]), ([0, 1, 2], [0, 1, 2]))
            preferred_element_type=float64
          ] fou fou
          fpe:f64[200,7,13] = sub fpc fpd
          fpf:f64[200,7,13,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 13, 1)
          ] fpe
          fpg:f64[200,7,13,3] = mul fpf dpu
          fph:f64[200,7,13,3] = add foz fpg
          fpi:f64[200,7,13] = mul 2.0 fpb
          fpj:f64[200,7,13,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 13, 1)
          ] fpi
          fpk:f64[200,7,13,3] = pjit[name=cross jaxpr=cross2] fou dpv dpw dpx dpy
            dpz dqa dqb dqc dqd
          fpl:f64[200,7,13,3] = mul fpj fpk
          fpm:f64[200,7,13,3] = add fph fpl
          fpn:f64[200,7,13,3] = add fot fpm
          fpo:f64[200,7,13,3] = sub fnx fpn
          fpp:f64[200,7,18,3] = pjit[name=_take jaxpr=_take6] fpo dqe
          fpq:f64[200,7,18,3] fpr:f64[200,7,18] fps:f64[200,7,18] fpt:f64[200,7,18]
            fpu:f64[200,7,18] fpv:f64[200,7,18] fpw:f64[200,7,18] = pjit[
            name=cross
            jaxpr=cross4
          ] fpp fgs dqf dqg dqh dqi dqj dqk
          fpx:f64[200,7,18,3] = sub dmq fpq
          fpy:f64[18,200,7] = dot_general[
            dimension_numbers=(([1], [3]), ([0], [2]))
            preferred_element_type=float64
          ] dmp fpx
          fpz:f64[200,7,18] = transpose[permutation=(1, 2, 0)] fpy
          fqa:f64[200,7,18,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 18, 1)
          ] fpz
          fqb:f64[200,7,18,3] = mul fqa dql
          fqc:f64[200,7,18,3] = mul 2.0 fqb
          fqd:f64[200,7,18,3] = mul dqm fpx
          fqe:f64[200,7,18,3] = add fqc fqd
          fqf:f64[200,7,18,3] = pjit[name=cross jaxpr=cross1] fpx dqo dqp dqq dqr
            dqs dqt dqu dqv dqw
          fqg:f64[200,7,18,3] = mul dqn fqf
          fqh:f64[200,7,18,3] = add fqe fqg
          fqi:f64[200,7,6,3] = slice[
            limit_indices=(200, 7, 6, 3)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] fqh
          fqj:f64[200,7,1,6,3] = reshape[
            dimensions=None
            new_sizes=(200, 7, 1, 6, 3)
          ] fqi
          fqk:f64[200,7,1,6,3] fql:f64[200,7,1,6] fqm:f64[200,7,1,1] fqn:f64[200,7,1,6]
            fqo:f64[200,7,1,1] fqp:f64[200,7,1,6] fqq:f64[200,7,1,1] fqr:f64[200,7,1,1]
            fqs:f64[200,7,1,1] fqt:f64[200,7,1,1] = pjit[
            name=cross
            jaxpr=cross5
          ] fhi fqj dqx dqy dqz dra drb drc
          fqu:f64[200,7,18,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 18, 1)
          ] efz
          fqv:f64[200,7,18,3] = mul fqh fqu
          fqw:f64[200,7,6,3] = slice[
            limit_indices=(200, 7, 6, 3)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] fqv
          fqx:f64[200,7,1,6,3] = reshape[
            dimensions=None
            new_sizes=(200, 7, 1, 6, 3)
          ] fqw
          fqy:f64[200,7,1,3,3] = slice[
            limit_indices=(200, 7, 1, 3, 3)
            start_indices=(0, 0, 0, 0, 0)
            strides=None
          ] fqx
          fqz:f64[200,7,1,3] = reduce_sum[axes=(3,)] fqy
          fra:f64[200,7,6,3] = slice[
            limit_indices=(200, 7, 6, 3)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] fhc
          frb:f64[200,7,1,6,3] = reshape[
            dimensions=None
            new_sizes=(200, 7, 1, 6, 3)
          ] fra
          frc:f64[200,7,1,6,3] frd:f64[200,7,1,6] fre:f64[200,7,1,1] frf:f64[200,7,1,6]
            frg:f64[200,7,1,1] frh:f64[200,7,1,6] fri:f64[200,7,1,1] frj:f64[200,7,1,1]
            frk:f64[200,7,1,1] frl:f64[200,7,1,1] = pjit[
            name=cross
            jaxpr=cross5
          ] fqz frb drd dre drf drg drh dri
          frm:f64[200,7,1,6,3] = add fqk frc
          frn:f64[200,7,1,6,3] = scatter[
            dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2, 3, 4), inserted_window_dims=(), scatter_dims_to_operand_dims=(3,))
            indices_are_sorted=True
            mode=GatherScatterMode.FILL_OR_DROP
            unique_indices=True
            update_consts=()
            update_jaxpr=None
          ] frm drj drk
          fro:f64[200,7,6,3] = reshape[dimensions=None new_sizes=(200, 7, 6, 3)] frn
          frp:f64[200,7,6,3] = slice[
            limit_indices=(200, 7, 6, 3)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] fhe
          frq:f64[200,7,1,3] = scatter-add[
            dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
            indices_are_sorted=False
            mode=GatherScatterMode.FILL_OR_DROP
            unique_indices=False
            update_consts=()
            update_jaxpr=jaxpr
          ] drl drm frp
          frr:f64[200,7,4,3] = pjit[name=_take jaxpr=_take2] frq drn
          frs:f64[200,7,4,3] = pjit[name=_take jaxpr=_take7] fhe drp
          frt:f64[200,7,4,3] = scatter-add[
            dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
            indices_are_sorted=False
            mode=GatherScatterMode.FILL_OR_DROP
            unique_indices=False
            update_consts=()
            update_jaxpr=jaxpr
          ] frr dro frs
          fru:f64[200,7,4,3] = pjit[name=_take jaxpr=_take7] fhe drr
          frv:f64[200,7,4,3] = scatter-add[
            dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
            indices_are_sorted=False
            mode=GatherScatterMode.FILL_OR_DROP
            unique_indices=False
            update_consts=()
            update_jaxpr=jaxpr
          ] frt drq fru
          frw:f64[200,7,4,3] = pjit[name=_take jaxpr=_take7] fhe drt
          frx:f64[200,7,4,3] = scatter-add[
            dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
            indices_are_sorted=False
            mode=GatherScatterMode.FILL_OR_DROP
            unique_indices=False
            update_consts=()
            update_jaxpr=jaxpr
          ] frv drs frw
          fry:f64[200,7,13,3] = concatenate[dimension=2] frq frt frv frx
          frz:f64[200,7,13,3] = pjit[name=_take jaxpr=_take4] fry dru
          fsa:f64[200,7,14,3] = concatenate[dimension=2] frz drv
          fsb:f64[200,7,13,3] = pjit[name=_take jaxpr=_take5] fsa drw
          fsc:f64[200,7,12,3] = slice[
            limit_indices=(200, 7, 13, 3)
            start_indices=(0, 0, 1, 0)
            strides=None
          ] fsb
          fsd:f64[200,7,12,3] = slice[
            limit_indices=(200, 7, 18, 3)
            start_indices=(0, 0, 6, 0)
            strides=None
          ] fqh
          fse:f64[200,7,12,3] fsf:f64[200,7,12] fsg:f64[200,7,12] fsh:f64[200,7,12]
            fsi:f64[200,7,12] fsj:f64[200,7,12] fsk:f64[200,7,12] = pjit[
            name=cross
            jaxpr=cross6
          ] fsc fsd drx dry drz dsa dsb dsc
          fsl:f64[200,7,6,3] = slice[
            limit_indices=(200, 7, 6, 3)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] fqv
          fsm:f64[200,7,1,3] = scatter-add[
            dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
            indices_are_sorted=False
            mode=GatherScatterMode.FILL_OR_DROP
            unique_indices=False
            update_consts=()
            update_jaxpr=jaxpr
          ] dsd dse fsl
          fsn:f64[200,7,4,3] = pjit[name=_take jaxpr=_take2] fsm dsf
          fso:f64[200,7,4,3] = pjit[name=_take jaxpr=_take7] fqv dsh
          fsp:f64[200,7,4,3] = scatter-add[
            dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
            indices_are_sorted=False
            mode=GatherScatterMode.FILL_OR_DROP
            unique_indices=False
            update_consts=()
            update_jaxpr=jaxpr
          ] fsn dsg fso
          fsq:f64[200,7,4,3] = pjit[name=_take jaxpr=_take7] fqv dsj
          fsr:f64[200,7,4,3] = scatter-add[
            dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
            indices_are_sorted=False
            mode=GatherScatterMode.FILL_OR_DROP
            unique_indices=False
            update_consts=()
            update_jaxpr=jaxpr
          ] fsp dsi fsq
          fss:f64[200,7,4,3] = pjit[name=_take jaxpr=_take7] fqv dsl
          fst:f64[200,7,4,3] = scatter-add[
            dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
            indices_are_sorted=False
            mode=GatherScatterMode.FILL_OR_DROP
            unique_indices=False
            update_consts=()
            update_jaxpr=jaxpr
          ] fsr dsk fss
          fsu:f64[200,7,13,3] = concatenate[dimension=2] fsm fsp fsr fst
          fsv:f64[200,7,13,3] = pjit[name=_take jaxpr=_take4] fsu dsm
          fsw:f64[200,7,14,3] = concatenate[dimension=2] fsv dsn
          fsx:f64[200,7,13,3] = pjit[name=_take jaxpr=_take5] fsw dso
          fsy:f64[200,7,12,3] = slice[
            limit_indices=(200, 7, 13, 3)
            start_indices=(0, 0, 1, 0)
            strides=None
          ] fsx
          fsz:f64[200,7,12,3] = slice[
            limit_indices=(200, 7, 18, 3)
            start_indices=(0, 0, 6, 0)
            strides=None
          ] fhc
          fta:f64[200,7,12,3] ftb:f64[200,7,12] ftc:f64[200,7,12] ftd:f64[200,7,12]
            fte:f64[200,7,12] ftf:f64[200,7,12] ftg:f64[200,7,12] = pjit[
            name=cross
            jaxpr=cross6
          ] fsy fsz dsp dsq dsr dss dst dsu
          fth:f64[200,7,12,3] = add fse fta
          fti:f64[200,7,18,3] = concatenate[dimension=2] fro fth
          ftj:f64[200,7,6,3] = slice[
            limit_indices=(200, 7, 6, 3)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] fti
          ftk:f64[200,7,6] = slice[
            limit_indices=(200, 7, 6)
            start_indices=(0, 0, 0)
            strides=None
          ] efz
          ftl:f64[200,7,6,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 6, 1)
          ] ftk
          ftm:f64[200,7,6,3] = mul ftj ftl
          ftn:f64[200,7,1,3] = scatter-add[
            dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
            indices_are_sorted=False
            mode=GatherScatterMode.FILL_OR_DROP
            unique_indices=False
            update_consts=()
            update_jaxpr=jaxpr
          ] div diw ftm
          fto:f64[200,7,4,3] = pjit[name=_take jaxpr=_take2] ftn dsv
          ftp:f64[200,7,4,3] = pjit[name=_take jaxpr=_take7] fti dsx
          ftq:f64[200,7,4] = pjit[name=_take jaxpr=_take8] efz dsy
          ftr:f64[200,7,4,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 4, 1)
          ] ftq
          fts:f64[200,7,4,3] = mul ftp ftr
          ftt:f64[200,7,4,3] = scatter-add[
            dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
            indices_are_sorted=False
            mode=GatherScatterMode.FILL_OR_DROP
            unique_indices=False
            update_consts=()
            update_jaxpr=jaxpr
          ] fto dsw fts
          ftu:f64[200,7,4,3] = pjit[name=_take jaxpr=_take7] fti dta
          ftv:f64[200,7,4] = pjit[name=_take jaxpr=_take8] efz dtb
          ftw:f64[200,7,4,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 4, 1)
          ] ftv
          ftx:f64[200,7,4,3] = mul ftu ftw
          fty:f64[200,7,4,3] = scatter-add[
            dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
            indices_are_sorted=False
            mode=GatherScatterMode.FILL_OR_DROP
            unique_indices=False
            update_consts=()
            update_jaxpr=jaxpr
          ] ftt dsz ftx
          ftz:f64[200,7,4,3] = pjit[name=_take jaxpr=_take7] fti dtd
          fua:f64[200,7,4] = pjit[name=_take jaxpr=_take8] efz dte
          fub:f64[200,7,4,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 4, 1)
          ] fua
          fuc:f64[200,7,4,3] = mul ftz fub
          fud:f64[200,7,4,3] = scatter-add[
            dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
            indices_are_sorted=False
            mode=GatherScatterMode.FILL_OR_DROP
            unique_indices=False
            update_consts=()
            update_jaxpr=jaxpr
          ] fty dtc fuc
          fue:f64[200,7,13,3] = concatenate[dimension=2] ftn ftt fty fud
          fuf:f64[200,7,13,3] = pjit[name=_take jaxpr=_take4] fue dtf
          fug:f64[200,7,13,3] = mul diu fuf
          fuh:f64[200,7,13,3] = sub fnt fnx
          fui:f64[200,7,13,3] = mul fuh dtg
          fuj:f64[200,7,1,6,3] fuk:f64[200,7,1,6] ful:f64[200,7,1,1] fum:f64[200,7,1,6]
            fun:f64[200,7,1,1] fuo:f64[200,7,1,6] fup:f64[200,7,1,1] fuq:f64[200,7,1,1]
            fur:f64[200,7,1,1] fus:f64[200,7,1,1] = pjit[
            name=cross
            jaxpr=cross5
          ] fhi frb dtj dtk dtl dtm dtn dto
          fut:f64[200,7,1,6,3] = scatter[
            dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2, 3, 4), inserted_window_dims=(), scatter_dims_to_operand_dims=(3,))
            indices_are_sorted=True
            mode=GatherScatterMode.FILL_OR_DROP
            unique_indices=True
            update_consts=()
            update_jaxpr=None
          ] fuj dtp dtq
          fuu:f64[200,7,6,3] = reshape[dimensions=None new_sizes=(200, 7, 6, 3)] fut
          fuv:f64[200,7,12,3] fuw:f64[200,7,12] fux:f64[200,7,12] fuy:f64[200,7,12]
            fuz:f64[200,7,12] fva:f64[200,7,12] fvb:f64[200,7,12] = pjit[
            name=cross
            jaxpr=cross6
          ] fsc fsz dtr dts dtt dtu dtv dtw
          fvc:f64[200,7,18,3] = concatenate[dimension=2] fuu fuv
          fvd:f64[200,7,6,3] = slice[
            limit_indices=(200, 7, 6, 3)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] fvc
          fve:f64[200,7,6,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 6, 1)
          ] ftk
          fvf:f64[200,7,6,3] = mul fvd fve
          fvg:f64[200,7,1,3] = scatter-add[
            dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
            indices_are_sorted=False
            mode=GatherScatterMode.FILL_OR_DROP
            unique_indices=False
            update_consts=()
            update_jaxpr=jaxpr
          ] dth dti fvf
          fvh:f64[200,7,4,3] = pjit[name=_take jaxpr=_take2] fvg dtx
          fvi:f64[200,7,4,3] = pjit[name=_take jaxpr=_take7] fvc dtz
          fvj:f64[200,7,4,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 4, 1)
          ] ftq
          fvk:f64[200,7,4,3] = mul fvi fvj
          fvl:f64[200,7,4,3] = scatter-add[
            dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
            indices_are_sorted=False
            mode=GatherScatterMode.FILL_OR_DROP
            unique_indices=False
            update_consts=()
            update_jaxpr=jaxpr
          ] fvh dty fvk
          fvm:f64[200,7,4,3] = pjit[name=_take jaxpr=_take7] fvc dub
          fvn:f64[200,7,4,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 4, 1)
          ] ftv
          fvo:f64[200,7,4,3] = mul fvm fvn
          fvp:f64[200,7,4,3] = scatter-add[
            dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
            indices_are_sorted=False
            mode=GatherScatterMode.FILL_OR_DROP
            unique_indices=False
            update_consts=()
            update_jaxpr=jaxpr
          ] fvl dua fvo
          fvq:f64[200,7,4,3] = pjit[name=_take jaxpr=_take7] fvc dud
          fvr:f64[200,7,4,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 4, 1)
          ] fua
          fvs:f64[200,7,4,3] = mul fvq fvr
          fvt:f64[200,7,4,3] = scatter-add[
            dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
            indices_are_sorted=False
            mode=GatherScatterMode.FILL_OR_DROP
            unique_indices=False
            update_consts=()
            update_jaxpr=jaxpr
          ] fvp duc fvs
          fvu:f64[200,7,13,3] = concatenate[dimension=2] fvg fvl fvp fvt
          fvv:f64[200,7,13,3] = pjit[name=_take jaxpr=_take4] fvu due
          fvw:f64[200,7,13,3] fvx:f64[200,7,13] fvy:f64[200,7,13] fvz:f64[200,7,13]
            fwa:f64[200,7,13] fwb:f64[200,7,13] fwc:f64[200,7,13] = pjit[
            name=cross
            jaxpr=cross7
          ] fui fvv duf dug duh dui duj duk
          fwd:f64[200,7,13,3] = sub fug fvw
          fwe:f64[200,7,13,3] = mul dul fsv
          fwf:f64[200,7,13,3] fwg:f64[200,7,13] fwh:f64[200,7,13] fwi:f64[200,7,13]
            fwj:f64[200,7,13] fwk:f64[200,7,13] fwl:f64[200,7,13] = pjit[
            name=cross
            jaxpr=cross7
          ] fui frz dum dun duo dup duq dur
          fwm:f64[200,7,13,3] = sub fwe fwf
          fwn:f64[200,7,13,3] fwo:f64[200,7,13] fwp:f64[200,7,13] fwq:f64[200,7,13]
            fwr:f64[200,7,13] fws:f64[200,7,13] fwt:f64[200,7,13] = pjit[
            name=cross
            jaxpr=cross7
          ] frz fwm dus dut duu duv duw dux
          fwu:f64[200,7,13,3] = add fwd fwn
          fwv:f64[200,7,1,3] = slice[
            limit_indices=(200, 7, 1, 3)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] fwu
          fww:f64[200,7,4,3] = pjit[name=_take jaxpr=_take3] fwu dva
          fwx:f64[200,7,4,3] = pjit[name=_take jaxpr=_take3] fwu dvd
          fwy:f64[200,7,4,3] = pjit[name=_take jaxpr=_take3] fwu dvg
          fwz:f64[200,7,4,3] = scatter-add[
            dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
            indices_are_sorted=False
            mode=GatherScatterMode.FILL_OR_DROP
            unique_indices=False
            update_consts=()
            update_jaxpr=jaxpr
          ] dve dvf fwy
          fxa:f64[200,7,4,3] = add fwx fwz
          fxb:f64[200,7,4,3] = scatter-add[
            dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
            indices_are_sorted=False
            mode=GatherScatterMode.FILL_OR_DROP
            unique_indices=False
            update_consts=()
            update_jaxpr=jaxpr
          ] dvb dvc fxa
          fxc:f64[200,7,4,3] = add fww fxb
          fxd:f64[200,7,1,3] = scatter-add[
            dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
            indices_are_sorted=False
            mode=GatherScatterMode.FILL_OR_DROP
            unique_indices=False
            update_consts=()
            update_jaxpr=jaxpr
          ] duy duz fxc
          fxe:f64[200,7,1,3] = add fwv fxd
          fxf:f64[200,7,13,3] = concatenate[dimension=2] fxe fxc fxa fwy
          fxg:f64[200,7,13,3] = pjit[name=_take jaxpr=_take4] fxf dvh
          fxh:f64[200,7,18,3] = pjit[name=_take jaxpr=_take6] fxg dvi
          fxi:f64[200,7,18] = dot_general[
            dimension_numbers=(([3], [3]), ([0, 1, 2], [0, 1, 2]))
            preferred_element_type=float64
          ] fqh fxh
          fxj:f64[200,7,13,1] = slice[
            limit_indices=(200, 7, 13, 1)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] ezq
          fxk:f64[200,7,13] = squeeze[dimensions=(3,)] fxj
          fxl:f64[200,7,13] = mul fxk dvj
          fxm:f64[200,7,13,1] = slice[
            limit_indices=(200, 7, 13, 2)
            start_indices=(0, 0, 0, 1)
            strides=None
          ] ezq
          fxn:f64[200,7,13] = squeeze[dimensions=(3,)] fxm
          fxo:f64[200,7,13] = mul fxn dvk
          fxp:f64[200,7,13] = sub fxl fxo
          fxq:f64[200,7,13,1] = slice[
            limit_indices=(200, 7, 13, 3)
            start_indices=(0, 0, 0, 2)
            strides=None
          ] ezq
          fxr:f64[200,7,13] = squeeze[dimensions=(3,)] fxq
          fxs:f64[200,7,13] = mul fxr dvl
          fxt:f64[200,7,13] = sub fxp fxs
          fxu:f64[200,7,13,1] = slice[
            limit_indices=(200, 7, 13, 4)
            start_indices=(0, 0, 0, 3)
            strides=None
          ] ezq
          fxv:f64[200,7,13] = squeeze[dimensions=(3,)] fxu
          fxw:f64[200,7,13] = mul fxv dvm
          fxx:f64[200,7,13] = sub fxt fxw
          fxy:f64[200,7,13,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 13, 1)
          ] fxx
          fxz:f64[200,7,13,1] = slice[
            limit_indices=(200, 7, 13, 1)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] ezq
          fya:f64[200,7,13] = squeeze[dimensions=(3,)] fxz
          fyb:f64[200,7,13] = mul fya dvn
          fyc:f64[200,7,13,1] = slice[
            limit_indices=(200, 7, 13, 2)
            start_indices=(0, 0, 0, 1)
            strides=None
          ] ezq
          fyd:f64[200,7,13] = squeeze[dimensions=(3,)] fyc
          fye:f64[200,7,13] = mul fyd dvo
          fyf:f64[200,7,13] = add fyb fye
          fyg:f64[200,7,13,1] = slice[
            limit_indices=(200, 7, 13, 3)
            start_indices=(0, 0, 0, 2)
            strides=None
          ] ezq
          fyh:f64[200,7,13] = squeeze[dimensions=(3,)] fyg
          fyi:f64[200,7,13] = mul fyh dvp
          fyj:f64[200,7,13] = add fyf fyi
          fyk:f64[200,7,13,1] = slice[
            limit_indices=(200, 7, 13, 4)
            start_indices=(0, 0, 0, 3)
            strides=None
          ] ezq
          fyl:f64[200,7,13] = squeeze[dimensions=(3,)] fyk
          fym:f64[200,7,13] = mul fyl dvq
          fyn:f64[200,7,13] = sub fyj fym
          fyo:f64[200,7,13,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 13, 1)
          ] fyn
          fyp:f64[200,7,13,1] = slice[
            limit_indices=(200, 7, 13, 1)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] ezq
          fyq:f64[200,7,13] = squeeze[dimensions=(3,)] fyp
          fyr:f64[200,7,13] = mul fyq dvr
          fys:f64[200,7,13,1] = slice[
            limit_indices=(200, 7, 13, 2)
            start_indices=(0, 0, 0, 1)
            strides=None
          ] ezq
          fyt:f64[200,7,13] = squeeze[dimensions=(3,)] fys
          fyu:f64[200,7,13] = mul fyt dvs
          fyv:f64[200,7,13] = sub fyr fyu
          fyw:f64[200,7,13,1] = slice[
            limit_indices=(200, 7, 13, 3)
            start_indices=(0, 0, 0, 2)
            strides=None
          ] ezq
          fyx:f64[200,7,13] = squeeze[dimensions=(3,)] fyw
          fyy:f64[200,7,13] = mul fyx dvt
          fyz:f64[200,7,13] = add fyv fyy
          fza:f64[200,7,13,1] = slice[
            limit_indices=(200, 7, 13, 4)
            start_indices=(0, 0, 0, 3)
            strides=None
          ] ezq
          fzb:f64[200,7,13] = squeeze[dimensions=(3,)] fza
          fzc:f64[200,7,13] = mul fzb dvu
          fzd:f64[200,7,13] = add fyz fzc
          fze:f64[200,7,13,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 13, 1)
          ] fzd
          fzf:f64[200,7,13,1] = slice[
            limit_indices=(200, 7, 13, 1)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] ezq
          fzg:f64[200,7,13] = squeeze[dimensions=(3,)] fzf
          fzh:f64[200,7,13] = mul fzg dvv
          fzi:f64[200,7,13,1] = slice[
            limit_indices=(200, 7, 13, 2)
            start_indices=(0, 0, 0, 1)
            strides=None
          ] ezq
          fzj:f64[200,7,13] = squeeze[dimensions=(3,)] fzi
          fzk:f64[200,7,13] = mul fzj dvw
          fzl:f64[200,7,13] = add fzh fzk
          fzm:f64[200,7,13,1] = slice[
            limit_indices=(200, 7, 13, 3)
            start_indices=(0, 0, 0, 2)
            strides=None
          ] ezq
          fzn:f64[200,7,13] = squeeze[dimensions=(3,)] fzm
          fzo:f64[200,7,13] = mul fzn dvx
          fzp:f64[200,7,13] = sub fzl fzo
          fzq:f64[200,7,13,1] = slice[
            limit_indices=(200, 7, 13, 4)
            start_indices=(0, 0, 0, 3)
            strides=None
          ] ezq
          fzr:f64[200,7,13] = squeeze[dimensions=(3,)] fzq
          fzs:f64[200,7,13] = mul fzr dvy
          fzt:f64[200,7,13] = add fzp fzs
          fzu:f64[200,7,13,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 13, 1)
          ] fzt
          fzv:f64[200,7,13,4] = concatenate[dimension=3] fxy fyo fze fzu
          fzw:f64[200,7,13,1] = slice[
            limit_indices=(200, 7, 13, 3)
            start_indices=(0, 0, 0, 2)
            strides=(1, 1, 1, 1)
          ] fzv
          fzx:f64[200,7,13] = squeeze[dimensions=(3,)] fzw
          fzy:f64[200,7,13] = dot_general[
            dimension_numbers=(([3], [3]), ([0, 1, 2], [0, 1, 2]))
            preferred_element_type=float64
          ] fzv fzv
          fzz:f64[200,7,13] = div 2.0 fzy
          gaa:f64[200,7,13] = mul fzx fzz
          gab:f64[200,7,13] = mul fzx gaa
          gac:f64[200,7,13,1] = slice[
            limit_indices=(200, 7, 13, 4)
            start_indices=(0, 0, 0, 3)
            strides=(1, 1, 1, 1)
          ] fzv
          gad:f64[200,7,13] = squeeze[dimensions=(3,)] gac
          gae:f64[200,7,13] = mul gad fzz
          gaf:f64[200,7,13] = mul gad gae
          gag:f64[200,7,13] = add gab gaf
          gah:f64[200,7,13] = sub 1.0 gag
          gai:f64[200,7,13,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 13, 1)
          ] gah
          gaj:f64[200,7,13,1] = slice[
            limit_indices=(200, 7, 13, 2)
            start_indices=(0, 0, 0, 1)
            strides=(1, 1, 1, 1)
          ] fzv
          gak:f64[200,7,13] = squeeze[dimensions=(3,)] gaj
          gal:f64[200,7,13] = mul gak gaa
          gam:f64[200,7,13,1] = slice[
            limit_indices=(200, 7, 13, 1)
            start_indices=(0, 0, 0, 0)
            strides=(1, 1, 1, 1)
          ] fzv
          gan:f64[200,7,13] = squeeze[dimensions=(3,)] gam
          gao:f64[200,7,13] = mul gan gae
          gap:f64[200,7,13] = sub gal gao
          gaq:f64[200,7,13,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 13, 1)
          ] gap
          gar:f64[200,7,13] = mul gak gae
          gas:f64[200,7,13] = mul gan gaa
          gat:f64[200,7,13] = add gar gas
          gau:f64[200,7,13,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 13, 1)
          ] gat
          gav:f64[200,7,13,3] = concatenate[dimension=3] gai gaq gau
          gaw:f64[200,7,13,1,3] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2, 4)
            shape=(200, 7, 13, 1, 3)
          ] gav
          gax:f64[200,7,13] = add gal gao
          gay:f64[200,7,13,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 13, 1)
          ] gax
          gaz:f64[200,7,13] = mul gak fzz
          gba:f64[200,7,13] = mul gak gaz
          gbb:f64[200,7,13] = add gba gaf
          gbc:f64[200,7,13] = sub 1.0 gbb
          gbd:f64[200,7,13,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 13, 1)
          ] gbc
          gbe:f64[200,7,13] = mul fzx gae
          gbf:f64[200,7,13] = mul gan gaz
          gbg:f64[200,7,13] = sub gbe gbf
          gbh:f64[200,7,13,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 13, 1)
          ] gbg
          gbi:f64[200,7,13,3] = concatenate[dimension=3] gay gbd gbh
          gbj:f64[200,7,13,1,3] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2, 4)
            shape=(200, 7, 13, 1, 3)
          ] gbi
          gbk:f64[200,7,13] = sub gar gas
          gbl:f64[200,7,13,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 13, 1)
          ] gbk
          gbm:f64[200,7,13] = add gbe gbf
          gbn:f64[200,7,13,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 13, 1)
          ] gbm
          gbo:f64[200,7,13] = add gba gab
          gbp:f64[200,7,13] = sub 1.0 gbo
          gbq:f64[200,7,13,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 13, 1)
          ] gbp
          gbr:f64[200,7,13,3] = concatenate[dimension=3] gbl gbn gbq
          gbs:f64[200,7,13,1,3] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2, 4)
            shape=(200, 7, 13, 1, 3)
          ] gbr
          gbt:f64[200,7,13,3,3] = concatenate[dimension=3] gaw gbj gbs
          gbu:f64[13,200,7,3,3] = dot_general[
            dimension_numbers=(([4], [1]), ([2], [0]))
            preferred_element_type=float64
          ] gbt dvz
          gbv:f64[200,7,13,3,3] = transpose[permutation=(0, 1, 2, 4, 3)] gbt
          gbw:f64[200,7,13,3,3] = dot_general[
            dimension_numbers=(([4], [3]), ([1, 2, 0], [0, 1, 2]))
            preferred_element_type=float64
          ] gbu gbv
          gbx:f64[200,7,13,3,3] = pjit[
            name=cross
            jaxpr={ lambda ; gby:f64[200,7,13,3] gbz:i32[1] gca:f64[1,1,1,3] gcb:i32[1]
                gcc:f64[1,1,1,3] gcd:f64[1,1,1,3] gce:i32[1] gcf:f64[1,1,1,3] gcg:f64[1,1,1,3]
                gch:f64[1,1,1,3]. let
                gci:f64[200,7,13] = gather[
                  dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
                  fill_value=None
                  indices_are_sorted=True
                  mode=GatherScatterMode.PROMISE_IN_BOUNDS
                  slice_sizes=(200, 7, 13, 1)
                  unique_indices=True
                ] gby gbz
                gcj:f64[200,7,13,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1, 2)
                  shape=(200, 7, 13, 1)
                ] gci
                gck:f64[200,7,13,3] = mul gcj gca
                gcl:f64[200,7,13] = gather[
                  dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
                  fill_value=None
                  indices_are_sorted=True
                  mode=GatherScatterMode.PROMISE_IN_BOUNDS
                  slice_sizes=(200, 7, 13, 1)
                  unique_indices=True
                ] gby gcb
                gcm:f64[200,7,13,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1, 2)
                  shape=(200, 7, 13, 1)
                ] gcl
                gcn:f64[200,7,13,3] = mul gcm gcc
                gco:f64[200,7,13,3] = sub gck gcn
                gcp:f64[200,7,13,1,3] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1, 2, 4)
                  shape=(200, 7, 13, 1, 3)
                ] gco
                gcq:f64[200,7,13,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1, 2)
                  shape=(200, 7, 13, 1)
                ] gcl
                gcr:f64[200,7,13,3] = mul gcq gcd
                gcs:f64[200,7,13] = gather[
                  dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
                  fill_value=None
                  indices_are_sorted=True
                  mode=GatherScatterMode.PROMISE_IN_BOUNDS
                  slice_sizes=(200, 7, 13, 1)
                  unique_indices=True
                ] gby gce
                gct:f64[200,7,13,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1, 2)
                  shape=(200, 7, 13, 1)
                ] gcs
                gcu:f64[200,7,13,3] = mul gct gcf
                gcv:f64[200,7,13,3] = sub gcr gcu
                gcw:f64[200,7,13,1,3] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1, 2, 4)
                  shape=(200, 7, 13, 1, 3)
                ] gcv
                gcx:f64[200,7,13,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1, 2)
                  shape=(200, 7, 13, 1)
                ] gcs
                gcy:f64[200,7,13,3] = mul gcx gcg
                gcz:f64[200,7,13,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1, 2)
                  shape=(200, 7, 13, 1)
                ] gci
                gda:f64[200,7,13,3] = mul gcz gch
                gdb:f64[200,7,13,3] = sub gcy gda
                gdc:f64[200,7,13,1,3] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1, 2, 4)
                  shape=(200, 7, 13, 1, 3)
                ] gdb
                gdd:f64[200,7,13,3,3] = concatenate[dimension=3] gcp gcw gdc
                gde:f64[200,7,13,3,3] = transpose[permutation=(0, 1, 2, 4, 3)] gdd
              in (gde,) }
          ] fuh dwa dwb dwc dwd dwe dwf dwg dwh dwi
          gdf:f64[200,7,13,3,3] = transpose[permutation=(0, 1, 2, 4, 3)] gbx
          gdg:f64[200,7,13,3,3] = dot_general[
            dimension_numbers=(([4], [3]), ([0, 1, 2], [0, 1, 2]))
            preferred_element_type=float64
          ] gbx gdf
          gdh:f64[200,7,13,3,3] = mul gdg dwj
          gdi:f64[200,7,13,3,3] = add gbw gdh
          gdj:f64[200,7,13,3] = dot_general[
            dimension_numbers=(([4], [3]), ([0, 1, 2], [0, 1, 2]))
            preferred_element_type=float64
          ] gdi fvv
          gdk:f64[200,7,13,3] gdl:f64[200,7,13] gdm:f64[200,7,13] gdn:f64[200,7,13]
            gdo:f64[200,7,13] gdp:f64[200,7,13] gdq:f64[200,7,13] = pjit[
            name=cross
            jaxpr=cross7
          ] fui fuf dwk dwl dwm dwn dwo dwp
          gdr:f64[200,7,13,3] = add gdj gdk
          gds:f64[200,7,13,3] = dot_general[
            dimension_numbers=(([4], [3]), ([0, 1, 2], [0, 1, 2]))
            preferred_element_type=float64
          ] gdi frz
          gdt:f64[200,7,13,3] gdu:f64[200,7,13] gdv:f64[200,7,13] gdw:f64[200,7,13]
            gdx:f64[200,7,13] gdy:f64[200,7,13] gdz:f64[200,7,13] = pjit[
            name=cross
            jaxpr=cross7
          ] fui fsv dwq dwr dws dwt dwu dwv
          gea:f64[200,7,13,3] = add gds gdt
          geb:f64[200,7,13,3] gec:f64[200,7,13] ged:f64[200,7,13] gee:f64[200,7,13]
            gef:f64[200,7,13] geg:f64[200,7,13] geh:f64[200,7,13] = pjit[
            name=cross
            jaxpr=cross7
          ] frz gea dww dwx dwy dwz dxa dxb
          gei:f64[200,7,13,3] gej:f64[200,7,13] gek:f64[200,7,13] gel:f64[200,7,13]
            gem:f64[200,7,13] gen:f64[200,7,13] geo:f64[200,7,13] = pjit[
            name=cross
            jaxpr=cross7
          ] fsv fwm dxc dxd dxe dxf dxg dxh
          gep:f64[200,7,13,3] = add geb gei
          geq:f64[200,7,13,3] = add gdr gep
          ger:f64[200,7,1,3] = slice[
            limit_indices=(200, 7, 1, 3)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] geq
          ges:f64[200,7,4,3] = pjit[name=_take jaxpr=_take3] geq dxk
          get:f64[200,7,4,3] = pjit[name=_take jaxpr=_take3] geq dxn
          geu:f64[200,7,4,3] = pjit[name=_take jaxpr=_take3] geq dxq
          gev:f64[200,7,4,3] = scatter-add[
            dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
            indices_are_sorted=False
            mode=GatherScatterMode.FILL_OR_DROP
            unique_indices=False
            update_consts=()
            update_jaxpr=jaxpr
          ] dxo dxp geu
          gew:f64[200,7,4,3] = add get gev
          gex:f64[200,7,4,3] = scatter-add[
            dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
            indices_are_sorted=False
            mode=GatherScatterMode.FILL_OR_DROP
            unique_indices=False
            update_consts=()
            update_jaxpr=jaxpr
          ] dxl dxm gew
          gey:f64[200,7,4,3] = add ges gex
          gez:f64[200,7,1,3] = scatter-add[
            dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
            indices_are_sorted=False
            mode=GatherScatterMode.FILL_OR_DROP
            unique_indices=False
            update_consts=()
            update_jaxpr=jaxpr
          ] dxi dxj gey
          gfa:f64[200,7,1,3] = add ger gez
          gfb:f64[200,7,13,3] = concatenate[dimension=2] gfa gey gew geu
          gfc:f64[200,7,13,3] = pjit[name=_take jaxpr=_take4] gfb dxr
          gfd:f64[200,7,18,3] = pjit[name=_take jaxpr=_take6] gfc dxs
          gfe:f64[200,7,18] = dot_general[
            dimension_numbers=(([3], [3]), ([0, 1, 2], [0, 1, 2]))
            preferred_element_type=float64
          ] fhc gfd
          gff:f64[200,7,18] = add fxi gfe
          gfg:f64[200,7,18] = sub egb gff
          gfh:f64[200,7,18] = add gfg dxt
          gfi:f64[200,7,1] = slice[
            limit_indices=(200, 7, 35)
            start_indices=(0, 0, 34)
            strides=None
          ] edn
          gfj:f64[200,7] = squeeze[dimensions=(2,)] gfi
          gfk:f64[200,7,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(200, 7, 1)
          ] gfj
          gfl:f64[200,7,1] = slice[
            limit_indices=(200, 7, 36)
            start_indices=(0, 0, 35)
            strides=None
          ] edn
          gfm:f64[200,7] = squeeze[dimensions=(2,)] gfl
          gfn:f64[200,7,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(200, 7, 1)
          ] gfm
          gfo:f64[200,7,2] = concatenate[dimension=2] gfk gfn
          gfp:f64[200,7,1,3] = slice[
            limit_indices=(200, 7, 1, 4)
            start_indices=(0, 0, 0, 1)
            strides=None
          ] elu
          gfq:f64[200,7,6] = slice[
            limit_indices=(200, 7, 6)
            start_indices=(0, 0, 0)
            strides=None
          ] efz
          gfr:f64[200,7,1,6] = reshape[dimensions=None new_sizes=(200, 7, 1, 6)] gfq
          gfs:f64[200,7,1,3] = slice[
            limit_indices=(200, 7, 1, 6)
            start_indices=(0, 0, 0, 3)
            strides=None
          ] gfr
          gft:f64[200,7,12] = slice[
            limit_indices=(200, 7, 18)
            start_indices=(0, 0, 6)
            strides=None
          ] efz
          gfu:f64[200,7,12,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 12, 1)
          ] gft
          gfv:f64[200,7,12,3] = mul dxu gfu
          gfw:f64[200,7,12,1,3] = reshape[
            dimensions=None
            new_sizes=(200, 7, 12, 1, 3)
          ] gfv
          gfx:f64[200,7,12,3] = pjit[name=_take jaxpr=_take1] gfw dxv
          gfy:f64[200,7,13,3] = concatenate[dimension=2] gfs gfx
          gfz:f64[200,7,1,3] = slice[
            limit_indices=(200, 7, 1, 3)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] gfy
          gga:f64[200,7,1] = dot_general[
            dimension_numbers=(([3], [3]), ([0, 1, 2], [0, 1, 2]))
            preferred_element_type=float64
          ] gfp gfz
          ggb:f64[200,7,1,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 1, 1)
          ] gga
          ggc:f64[200,7,1,3] = mul ggb gfp
          ggd:f64[200,7,1,3] = mul 2.0 ggc
          gge:f64[200,7,1,1] = slice[
            limit_indices=(200, 7, 1, 1)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] elu
          ggf:f64[200,7,1] = squeeze[dimensions=(3,)] gge
          ggg:f64[200,7,1] = mul ggf ggf
          ggh:f64[200,7,1] = dot_general[
            dimension_numbers=(([3], [3]), ([0, 1, 2], [0, 1, 2]))
            preferred_element_type=float64
          ] gfp gfp
          ggi:f64[200,7,1] = sub ggg ggh
          ggj:f64[200,7,1,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 1, 1)
          ] ggi
          ggk:f64[200,7,1,3] = mul ggj gfz
          ggl:f64[200,7,1,3] = add ggd ggk
          ggm:f64[200,7,1] = mul 2.0 ggf
          ggn:f64[200,7,1,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 1, 1)
          ] ggm
          ggo:f64[200,7,1,3] ggp:f64[200,7,1] ggq:f64[200,7,1] ggr:f64[200,7,1] ggs:f64[200,7,1]
            ggt:f64[200,7,1] ggu:f64[200,7,1] = pjit[
            name=cross
            jaxpr={ lambda ; ggv:f64[200,7,1,3] ggw:f64[200,7,1,3] ggx:i32[1] ggy:i32[1]
                ggz:i32[1] gha:i32[1] ghb:i32[1] ghc:i32[1]. let
                ghd:f64[200,7,1] = gather[
                  dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
                  fill_value=None
                  indices_are_sorted=True
                  mode=GatherScatterMode.PROMISE_IN_BOUNDS
                  slice_sizes=(200, 7, 1, 1)
                  unique_indices=True
                ] ggv ggx
                ghe:f64[200,7,1] = gather[
                  dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
                  fill_value=None
                  indices_are_sorted=True
                  mode=GatherScatterMode.PROMISE_IN_BOUNDS
                  slice_sizes=(200, 7, 1, 1)
                  unique_indices=True
                ] ggw ggy
                ghf:f64[200,7,1] = mul ghd ghe
                ghg:f64[200,7,1] = gather[
                  dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
                  fill_value=None
                  indices_are_sorted=True
                  mode=GatherScatterMode.PROMISE_IN_BOUNDS
                  slice_sizes=(200, 7, 1, 1)
                  unique_indices=True
                ] ggv ggz
                ghh:f64[200,7,1] = gather[
                  dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
                  fill_value=None
                  indices_are_sorted=True
                  mode=GatherScatterMode.PROMISE_IN_BOUNDS
                  slice_sizes=(200, 7, 1, 1)
                  unique_indices=True
                ] ggw gha
                ghi:f64[200,7,1] = mul ghg ghh
                ghj:f64[200,7,1] = sub ghf ghi
                ghk:f64[200,7,1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1, 2)
                  shape=(200, 7, 1, 1)
                ] ghj
                ghl:f64[200,7,1] = gather[
                  dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
                  fill_value=None
                  indices_are_sorted=True
                  mode=GatherScatterMode.PROMISE_IN_BOUNDS
                  slice_sizes=(200, 7, 1, 1)
                  unique_indices=True
                ] ggw ghb
                ghm:f64[200,7,1] = mul ghg ghl
                ghn:f64[200,7,1] = gather[
                  dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
                  fill_value=None
                  indices_are_sorted=True
                  mode=GatherScatterMode.PROMISE_IN_BOUNDS
                  slice_sizes=(200, 7, 1, 1)
                  unique_indices=True
                ] ggv ghc
                gho:f64[200,7,1] = mul ghn ghe
                ghp:f64[200,7,1] = sub ghm gho
                ghq:f64[200,7,1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1, 2)
                  shape=(200, 7, 1, 1)
                ] ghp
                ghr:f64[200,7,1] = mul ghn ghh
                ghs:f64[200,7,1] = mul ghd ghl
                ght:f64[200,7,1] = sub ghr ghs
                ghu:f64[200,7,1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1, 2)
                  shape=(200, 7, 1, 1)
                ] ght
                ghv:f64[200,7,1,3] = concatenate[dimension=3] ghk ghq ghu
              in (ghv, ghe, ghd, ghh, ghg, ghl, ghn) }
          ] gfp gfz dxw dxx dxy dxz dya dyb
          ghw:f64[200,7,1,3] = mul ggn ggo
          ghx:f64[200,7,1,3] = add ggl ghw
          ghy:f64[200,7,4,3] = pjit[name=_take jaxpr=_take2] ghx dyc
          ghz:f64[200,7,4,3] = slice[
            limit_indices=(200, 7, 4, 4)
            start_indices=(0, 0, 0, 1)
            strides=None
          ] eps
          gia:f64[200,7,4,3] = pjit[name=_take jaxpr=_take3] gfy dyd
          gib:f64[200,7,4] = dot_general[
            dimension_numbers=(([3], [3]), ([0, 1, 2], [0, 1, 2]))
            preferred_element_type=float64
          ] ghz gia
          gic:f64[200,7,4,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 4, 1)
          ] gib
          gid:f64[200,7,4,3] = mul gic ghz
          gie:f64[200,7,4,3] = mul 2.0 gid
          gif:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 1)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] eps
          gig:f64[200,7,4] = squeeze[dimensions=(3,)] gif
          gih:f64[200,7,4] = mul gig gig
          gii:f64[200,7,4] = dot_general[
            dimension_numbers=(([3], [3]), ([0, 1, 2], [0, 1, 2]))
            preferred_element_type=float64
          ] ghz ghz
          gij:f64[200,7,4] = sub gih gii
          gik:f64[200,7,4,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 4, 1)
          ] gij
          gil:f64[200,7,4,3] = mul gik gia
          gim:f64[200,7,4,3] = add gie gil
          gin:f64[200,7,4] = mul 2.0 gig
          gio:f64[200,7,4,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 4, 1)
          ] gin
          gip:f64[200,7,4,3] giq:f64[200,7,4] gir:f64[200,7,4] gis:f64[200,7,4] git:f64[200,7,4]
            giu:f64[200,7,4] giv:f64[200,7,4] = pjit[name=cross jaxpr=cross3] ghz
            gia dye dyf dyg dyh dyi dyj
          giw:f64[200,7,4,3] = mul gio gip
          gix:f64[200,7,4,3] = add gim giw
          giy:f64[200,7,4,3] = add ghy gix
          giz:f64[200,7,4,3] = slice[
            limit_indices=(200, 7, 4, 4)
            start_indices=(0, 0, 0, 1)
            strides=None
          ] etm
          gja:f64[200,7,4,3] = pjit[name=_take jaxpr=_take3] gfy dyk
          gjb:f64[200,7,4] = dot_general[
            dimension_numbers=(([3], [3]), ([0, 1, 2], [0, 1, 2]))
            preferred_element_type=float64
          ] giz gja
          gjc:f64[200,7,4,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 4, 1)
          ] gjb
          gjd:f64[200,7,4,3] = mul gjc giz
          gje:f64[200,7,4,3] = mul 2.0 gjd
          gjf:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 1)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] etm
          gjg:f64[200,7,4] = squeeze[dimensions=(3,)] gjf
          gjh:f64[200,7,4] = mul gjg gjg
          gji:f64[200,7,4] = dot_general[
            dimension_numbers=(([3], [3]), ([0, 1, 2], [0, 1, 2]))
            preferred_element_type=float64
          ] giz giz
          gjj:f64[200,7,4] = sub gjh gji
          gjk:f64[200,7,4,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 4, 1)
          ] gjj
          gjl:f64[200,7,4,3] = mul gjk gja
          gjm:f64[200,7,4,3] = add gje gjl
          gjn:f64[200,7,4] = mul 2.0 gjg
          gjo:f64[200,7,4,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 4, 1)
          ] gjn
          gjp:f64[200,7,4,3] gjq:f64[200,7,4] gjr:f64[200,7,4] gjs:f64[200,7,4] gjt:f64[200,7,4]
            gju:f64[200,7,4] gjv:f64[200,7,4] = pjit[name=cross jaxpr=cross3] giz
            gja dyl dym dyn dyo dyp dyq
          gjw:f64[200,7,4,3] = mul gjo gjp
          gjx:f64[200,7,4,3] = add gjm gjw
          gjy:f64[200,7,4,3] = add giy gjx
          gjz:f64[200,7,4,3] = slice[
            limit_indices=(200, 7, 4, 4)
            start_indices=(0, 0, 0, 1)
            strides=None
          ] exg
          gka:f64[200,7,4,3] = pjit[name=_take jaxpr=_take3] gfy dyr
          gkb:f64[200,7,4] = dot_general[
            dimension_numbers=(([3], [3]), ([0, 1, 2], [0, 1, 2]))
            preferred_element_type=float64
          ] gjz gka
          gkc:f64[200,7,4,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 4, 1)
          ] gkb
          gkd:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 1)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] exg
          gke:f64[200,7,4] = squeeze[dimensions=(3,)] gkd
          gkf:f64[200,7,4] = mul gke gke
          gkg:f64[200,7,4] = dot_general[
            dimension_numbers=(([3], [3]), ([0, 1, 2], [0, 1, 2]))
            preferred_element_type=float64
          ] gjz gjz
          gkh:f64[200,7,4] = sub gkf gkg
          gki:f64[200,7,4,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 4, 1)
          ] gkh
          gkj:f64[200,7,4] = mul 2.0 gke
          gkk:f64[200,7,4,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 4, 1)
          ] gkj
          gkl:f64[200,7,4,3] gkm:f64[200,7,4] gkn:f64[200,7,4] gko:f64[200,7,4] gkp:f64[200,7,4]
            gkq:f64[200,7,4] gkr:f64[200,7,4] = pjit[name=cross jaxpr=cross3] gjz
            gka dys dyt dyu dyv dyw dyx
          gks:f64[200,7,1,3] = slice[
            limit_indices=(200, 7, 1, 3)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] gfr
          gkt:f64[200,7,12,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 12, 1)
          ] gft
          gku:f64[200,7,12,3] = mul dyy gkt
          gkv:f64[200,7,12,1,3] = reshape[
            dimensions=None
            new_sizes=(200, 7, 12, 1, 3)
          ] gku
          gkw:f64[200,7,12,3] = pjit[name=_take jaxpr=_take1] gkv dyz
          gkx:f64[200,7,13,3] = concatenate[dimension=2] gks gkw
          gky:f64[200,7,4,3] = sub fkx fjx
          gkz:f64[200,7,4] gla:f64[200,7,4] glb:f64[200,7,4] glc:f64[200,7,4] gld:f64[200,7,4]
            gle:f64[200,7,4] = pjit[name=cross jaxpr=cross8] ghy gky dza dzb dzc
            dzd dze dzf
          glf:f64[200,7,4,3] = slice[
            limit_indices=(200, 7, 4, 4)
            start_indices=(0, 0, 0, 1)
            strides=None
          ] elv
          glg:f64[200,7,4,3] = pjit[name=_take jaxpr=_take3] gkx dzg
          glh:f64[200,7,4] = dot_general[
            dimension_numbers=(([3], [3]), ([0, 1, 2], [0, 1, 2]))
            preferred_element_type=float64
          ] glf glg
          gli:f64[200,7,4,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 4, 1)
          ] glh
          glj:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 1)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] elv
          glk:f64[200,7,4] = squeeze[dimensions=(3,)] glj
          gll:f64[200,7,4] = mul glk glk
          glm:f64[200,7,4] = dot_general[
            dimension_numbers=(([3], [3]), ([0, 1, 2], [0, 1, 2]))
            preferred_element_type=float64
          ] glf glf
          gln:f64[200,7,4] = sub gll glm
          glo:f64[200,7,4,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 4, 1)
          ] gln
          glp:f64[200,7,4] = mul 2.0 glk
          glq:f64[200,7,4,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 4, 1)
          ] glp
          glr:f64[200,7,4,3] gls:f64[200,7,4] glt:f64[200,7,4] glu:f64[200,7,4] glv:f64[200,7,4]
            glw:f64[200,7,4] glx:f64[200,7,4] = pjit[name=cross jaxpr=cross3] glf
            glg dzh dzi dzj dzk dzl dzm
          gly:f64[200,7,4,3] = sub flx fkx
          glz:f64[200,7,4] gma:f64[200,7,4] gmb:f64[200,7,4] gmc:f64[200,7,4] gmd:f64[200,7,4]
            gme:f64[200,7,4] = pjit[name=cross jaxpr=cross8] giy gly dzn dzo dzp
            dzq dzr dzs
          gmf:f64[200,7,4,3] = slice[
            limit_indices=(200, 7, 4, 4)
            start_indices=(0, 0, 0, 1)
            strides=None
          ] eps
          gmg:f64[200,7,4,3] = pjit[name=_take jaxpr=_take3] gkx dzt
          gmh:f64[200,7,4] = dot_general[
            dimension_numbers=(([3], [3]), ([0, 1, 2], [0, 1, 2]))
            preferred_element_type=float64
          ] gmf gmg
          gmi:f64[200,7,4,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 4, 1)
          ] gmh
          gmj:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 1)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] eps
          gmk:f64[200,7,4] = squeeze[dimensions=(3,)] gmj
          gml:f64[200,7,4] = mul gmk gmk
          gmm:f64[200,7,4] = dot_general[
            dimension_numbers=(([3], [3]), ([0, 1, 2], [0, 1, 2]))
            preferred_element_type=float64
          ] gmf gmf
          gmn:f64[200,7,4] = sub gml gmm
          gmo:f64[200,7,4,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 4, 1)
          ] gmn
          gmp:f64[200,7,4] = mul 2.0 gmk
          gmq:f64[200,7,4,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 4, 1)
          ] gmp
          gmr:f64[200,7,4,3] gms:f64[200,7,4] gmt:f64[200,7,4] gmu:f64[200,7,4] gmv:f64[200,7,4]
            gmw:f64[200,7,4] gmx:f64[200,7,4] = pjit[name=cross jaxpr=cross3] gmf
            gmg dzu dzv dzw dzx dzy dzz
          gmy:f64[200,7,4,3] = sub fmx flx
          gmz:f64[200,7,4] gna:f64[200,7,4] gnb:f64[200,7,4] gnc:f64[200,7,4] gnd:f64[200,7,4]
            gne:f64[200,7,4] = pjit[name=cross jaxpr=cross8] gjy gmy eaa eab eac
            ead eae eaf
          gnf:f64[200,7,4,3] = slice[
            limit_indices=(200, 7, 4, 4)
            start_indices=(0, 0, 0, 1)
            strides=None
          ] etm
          gng:f64[200,7,4,3] = pjit[name=_take jaxpr=_take3] gkx eag
          gnh:f64[200,7,4] = dot_general[
            dimension_numbers=(([3], [3]), ([0, 1, 2], [0, 1, 2]))
            preferred_element_type=float64
          ] gnf gng
          gni:f64[200,7,4,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 4, 1)
          ] gnh
          gnj:f64[200,7,4,1] = slice[
            limit_indices=(200, 7, 4, 1)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] etm
          gnk:f64[200,7,4] = squeeze[dimensions=(3,)] gnj
          gnl:f64[200,7,4] = mul gnk gnk
          gnm:f64[200,7,4] = dot_general[
            dimension_numbers=(([3], [3]), ([0, 1, 2], [0, 1, 2]))
            preferred_element_type=float64
          ] gnf gnf
          gnn:f64[200,7,4] = sub gnl gnm
          gno:f64[200,7,4,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 4, 1)
          ] gnn
          gnp:f64[200,7,4] = mul 2.0 gnk
          gnq:f64[200,7,4,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(200, 7, 4, 1)
          ] gnp
          gnr:f64[200,7,4,3] gns:f64[200,7,4] gnt:f64[200,7,4] gnu:f64[200,7,4] gnv:f64[200,7,4]
            gnw:f64[200,7,4] gnx:f64[200,7,4] = pjit[name=cross jaxpr=cross3] gnf
            gng eah eai eaj eak eal eam
          gny:f64[200,7,18,3] = mul ean fqh
          gnz:f64[200,7,1,3] = slice[
            limit_indices=(200, 7, 1, 3)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] fui
          goa:f64[200,7,4,3] = pjit[name=_take jaxpr=_take3] fui eaq
          gob:f64[200,7,4,3] = pjit[name=_take jaxpr=_take3] fui eat
          goc:f64[200,7,4,3] = pjit[name=_take jaxpr=_take3] fui eaw
          god:f64[200,7,4,3] = scatter-add[
            dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
            indices_are_sorted=False
            mode=GatherScatterMode.FILL_OR_DROP
            unique_indices=False
            update_consts=()
            update_jaxpr=jaxpr
          ] eau eav goc
          goe:f64[200,7,4,3] = add gob god
          gof:f64[200,7,4,3] = scatter-add[
            dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
            indices_are_sorted=False
            mode=GatherScatterMode.FILL_OR_DROP
            unique_indices=False
            update_consts=()
            update_jaxpr=jaxpr
          ] ear eas goe
          gog:f64[200,7,4,3] = add goa gof
          goh:f64[200,7,1,3] = scatter-add[
            dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
            indices_are_sorted=False
            mode=GatherScatterMode.FILL_OR_DROP
            unique_indices=False
            update_consts=()
            update_jaxpr=jaxpr
          ] eao eap gog
          goi:f64[200,7,1,3] = add gnz goh
          goj:f64[200,7,13,3] = concatenate[dimension=2] goi gog goe goc
          gok:f64[200,7,13,3] = pjit[name=_take jaxpr=_take4] goj eax
          gol:f64[200,7,18,3] = pjit[
            name=_take
            jaxpr={ lambda ; gom:f64[200,7,13,3] gon:i64[18,1]. let
                goo:f64[200,7,18,3] = gather[
                  dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 3), collapsed_slice_dims=(2,), start_index_map=(2,))
                  fill_value=None
                  indices_are_sorted=False
                  mode=GatherScatterMode.PROMISE_IN_BOUNDS
                  slice_sizes=(200, 7, 1, 3)
                  unique_indices=False
                ] gom gon
              in (goo,) }
          ] gok eay
          gop:f64[200,7,18,3] goq:f64[200,7,18] gor:f64[200,7,18] gos:f64[200,7,18]
            got:f64[200,7,18] gou:f64[200,7,18] gov:f64[200,7,18] = pjit[
            name=cross
            jaxpr=cross4
          ] gol fhc eaz eba ebb ebc ebd ebe
          gow:f64[200,7,18,3] = sub gny gop
          gox:f64[200,7,18,18] = dot_general[
            dimension_numbers=(([3], [3]), ([0, 1], [0, 1]))
            preferred_element_type=float64
          ] fqh gow
          goy:f64[200,7,1,3,3] = slice[
            limit_indices=(200, 7, 1, 3, 3)
            start_indices=(0, 0, 0, 0, 0)
            strides=None
          ] gdi
          goz:f64[200,7,4,3,3] = pjit[name=_take jaxpr=_take9] gdi ebh
          gpa:f64[200,7,4,3,3] = pjit[name=_take jaxpr=_take9] gdi ebk
          gpb:f64[200,7,4,3,3] = pjit[name=_take jaxpr=_take9] gdi ebn
          gpc:f64[200,7,4,3,3] = scatter-add[
            dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3, 4), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
            indices_are_sorted=False
            mode=GatherScatterMode.FILL_OR_DROP
            unique_indices=False
            update_consts=()
            update_jaxpr=jaxpr
          ] ebl ebm gpb
          gpd:f64[200,7,4,3,3] = add gpa gpc
          gpe:f64[200,7,4,3,3] = scatter-add[
            dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3, 4), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
            indices_are_sorted=False
            mode=GatherScatterMode.FILL_OR_DROP
            unique_indices=False
            update_consts=()
            update_jaxpr=jaxpr
          ] ebi ebj gpd
          gpf:f64[200,7,4,3,3] = add goz gpe
          gpg:f64[200,7,1,3,3] = scatter-add[
            dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 3, 4), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
            indices_are_sorted=False
            mode=GatherScatterMode.FILL_OR_DROP
            unique_indices=False
            update_consts=()
            update_jaxpr=jaxpr
          ] ebf ebg gpf
          gph:f64[200,7,1,3,3] = add goy gpg
          gpi:f64[200,7,13,3,3] = concatenate[dimension=2] gph gpf gpd gpb
          gpj:f64[200,7,13,3,3] = pjit[
            name=_take
            jaxpr={ lambda ; gpk:f64[200,7,13,3,3] gpl:i64[13,1]. let
                gpm:f64[200,7,13,3,3] = gather[
                  dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 3, 4), collapsed_slice_dims=(2,), start_index_map=(2,))
                  fill_value=None
                  indices_are_sorted=False
                  mode=GatherScatterMode.PROMISE_IN_BOUNDS
                  slice_sizes=(200, 7, 1, 3, 3)
                  unique_indices=False
                ] gpk gpl
              in (gpm,) }
          ] gpi ebo
          gpn:f64[200,7,18,3,3] = pjit[
            name=_take
            jaxpr={ lambda ; gpo:f64[200,7,13,3,3] gpp:i64[18,1]. let
                gpq:f64[200,7,18,3,3] = gather[
                  dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 3, 4), collapsed_slice_dims=(2,), start_index_map=(2,))
                  fill_value=None
                  indices_are_sorted=False
                  mode=GatherScatterMode.PROMISE_IN_BOUNDS
                  slice_sizes=(200, 7, 1, 3, 3)
                  unique_indices=False
                ] gpo gpp
              in (gpq,) }
          ] gpj ebp
          gpr:f64[200,7,18,3] = dot_general[
            dimension_numbers=(([4], [3]), ([0, 1, 2], [0, 1, 2]))
            preferred_element_type=float64
          ] gpn fhc
          gps:f64[200,7,18,3] gpt:f64[200,7,18] gpu:f64[200,7,18] gpv:f64[200,7,18]
            gpw:f64[200,7,18] gpx:f64[200,7,18] gpy:f64[200,7,18] = pjit[
            name=cross
            jaxpr=cross4
          ] gol fqh ebq ebr ebs ebt ebu ebv
          gpz:f64[200,7,18,3] = add gpr gps
          gqa:f64[200,7,18,18] = dot_general[
            dimension_numbers=(([3], [3]), ([0, 1], [0, 1]))
            preferred_element_type=float64
          ] fhc gpz
          gqb:f64[200,7,18,18] = add gox gqa
          gqc:f64[200,7,18,18] = transpose[permutation=(0, 1, 3, 2)] gqb
          gqd:f64[200,7,18,18] = mul gqc ebw
          gqe:f64[200,7,18,18] = pjit[
            name=tril
            jaxpr={ lambda ; gqf:f64[200,7,18,18] gqg:bool[200,7,18,18] gqh:f64[200,7,18,18]. let
                gqi:f64[200,7,18,18] = select_n gqg gqh gqf
              in (gqi,) }
          ] gqd ebx eby
          gqj:f64[200,7,18,18] = pjit[
            name=tril
            jaxpr={ lambda ; gqk:f64[200,7,18,18] gql:bool[200,7,18,18] gqm:f64[200,7,18,18]. let
                gqn:f64[200,7,18,18] = select_n gql gqm gqk
              in (gqn,) }
          ] gqd ebz eca
          gqo:f64[200,7,18,18] = transpose[permutation=(0, 1, 3, 2)] gqj
          gqp:f64[200,7,18,18] = add gqe gqo
          gqq:f64[200,7,18,18] = add gqp ecb
          gqr:f64[200,7,18,18] gqs:f64[200,7,18,18] = pjit[
            name=_solve
            jaxpr={ lambda ; gqt:f64[200,7,18,18] gqu:bool[200,7,18,18] gqv:f64[200,7,18,18]
                gqw:bool[200,7,18,18] gqx:f64[200,7,18,18] gqy:bool[200,7,18,18]
                gqz:f64[200,7,18,18] gra:f64[200,7,18,18]. let
                grb:f64[200,7,18,18] = stop_gradient gqt
                grc:f64[200,7,18,18] = pjit[
                  name=_cholesky
                  jaxpr={ lambda ; grd:f64[200,7,18,18] gre:bool[200,7,18,18] grf:f64[200,7,18,18]
                      grg:bool[200,7,18,18] grh:f64[200,7,18,18] gri:bool[200,7,18,18]
                      grj:f64[200,7,18,18]. let
                      grk:f64[200,7,18,18] = transpose[permutation=(0, 1, 3, 2)] grd
                      grl:f64[200,7,18,18] = transpose[permutation=(0, 1, 3, 2)] grk
                      grm:f64[200,7,18,18] = add grk grl
                      grn:f64[200,7,18,18] = div grm 2.0
                      gro:f64[200,7,18,18] = transpose[permutation=(0, 1, 3, 2)] grn
                      grp:f64[200,7,18,18] = add grn gro
                      grq:f64[200,7,18,18] = div grp 2.0
                      grr:f64[200,7,18,18] = cholesky grq
                      grs:f64[200,7,18,18] = pjit[
                        name=tril
                        jaxpr={ lambda ; grt:f64[200,7,18,18] gru:bool[200,7,18,18]
                            grv:f64[200,7,18,18]. let
                            grw:f64[200,7,18,18] = select_n gru grv grt
                          in (grw,) }
                      ] grr gre grf
                      grx:f64[200,7,18,18] = pjit[
                        name=tril
                        jaxpr={ lambda ; gry:f64[200,7,18,18] grz:bool[200,7,18,18]
                            gsa:f64[200,7,18,18]. let
                            gsb:f64[200,7,18,18] = select_n grz gsa gry
                          in (gsb,) }
                      ] grs grg grh
                      gsc:f64[200,7,18,18] = pjit[
                        name=tril
                        jaxpr={ lambda ; gsd:f64[200,7,18,18] gse:bool[200,7,18,18]
                            gsf:f64[200,7,18,18]. let
                            gsg:f64[200,7,18,18] = select_n gse gsf gsd
                          in (gsg,) }
                      ] grx gri grj
                      gsh:f64[200,7,18,18] = transpose[permutation=(0, 1, 3, 2)] gsc
                    in (gsh,) }
                ] grb gqu gqv gqw gqx gqy gqz
                gsi:f64[200,7,18,18] = custom_linear_solve[
                  const_lengths=_LinearSolveTuple(matvec=1, vecmat=1, solve=1, transpose_solve=1)
                  jaxprs=_LinearSolveTuple(matvec={ lambda ; a:f64[200,7,18,18] b:f64[200,7,18,18]. let
    c:f64[200,7,18,18] = dot_general[
      dimension_numbers=(([3], [3]), ([0, 1], [0, 1]))
      precision=(Precision.HIGHEST, Precision.HIGHEST)
    ] a b
    d:f64[200,7,18,18] = transpose[permutation=(0, 1, 3, 2)] c
  in (d,) }, vecmat={ lambda ; a:f64[200,7,18,18] b:f64[200,7,18,18]. let
    c:f64[200,7,18,18] = dot_general[
      dimension_numbers=(([3], [3]), ([0, 1], [0, 1]))
      precision=(Precision.HIGHEST, Precision.HIGHEST)
    ] a b
    d:f64[200,7,18,18] = transpose[permutation=(0, 1, 3, 2)] c
  in (d,) }, solve={ lambda ; a:f64[200,7,18,18] b:f64[200,7,18,18]. let
    c:f64[200,7,18,18] = pjit[
      name=_cho_solve
      jaxpr={ lambda ; d:f64[200,7,18,18] e:f64[200,7,18,18]. let
          f:f64[200,7,18,18,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2, 3)
            shape=(200, 7, 18, 18, 1)
          ] e
          g:f64[200,7,18,1,18] = transpose[permutation=(0, 1, 3, 4, 2)] f
          h:f64[200,7,18,18] = reshape[
            dimensions=None
            new_sizes=(200, 7, 18, 18)
          ] g
          i:f64[200,7,18,18] = triangular_solve[
            conjugate_a=False
            left_side=True
            lower=False
            transpose_a=True
            unit_diagonal=False
          ] d h
          j:f64[200,7,18,1,18] = reshape[
            dimensions=None
            new_sizes=(200, 7, 18, 1, 18)
          ] i
          k:f64[200,7,18,1,18] = slice[
            limit_indices=(200, 7, 18, 1, 18)
            start_indices=(0, 0, 0, 0, 0)
            strides=None
          ] j
          l:f64[200,7,18,18,1] = transpose[permutation=(0, 1, 4, 2, 3)] k
          m:f64[200,7,18,18] = squeeze[dimensions=(4,)] l
          n:f64[200,7,18,18,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2, 3)
            shape=(200, 7, 18, 18, 1)
          ] m
          o:f64[200,7,18,1,18] = transpose[permutation=(0, 1, 3, 4, 2)] n
          p:f64[200,7,18,18] = reshape[
            dimensions=None
            new_sizes=(200, 7, 18, 18)
          ] o
          q:f64[200,7,18,18] = triangular_solve[
            conjugate_a=False
            left_side=True
            lower=False
            transpose_a=False
            unit_diagonal=False
          ] d p
          r:f64[200,7,18,1,18] = reshape[
            dimensions=None
            new_sizes=(200, 7, 18, 1, 18)
          ] q
          s:f64[200,7,18,1,18] = slice[
            limit_indices=(200, 7, 18, 1, 18)
            start_indices=(0, 0, 0, 0, 0)
            strides=None
          ] r
          t:f64[200,7,18,18,1] = transpose[permutation=(0, 1, 4, 2, 3)] s
          u:f64[200,7,18,18] = squeeze[dimensions=(4,)] t
        in (u,) }
    ] a b
  in (c,) }, transpose_solve={ lambda ; a:f64[200,7,18,18] b:f64[200,7,18,18]. let
    c:f64[200,7,18,18] = pjit[
      name=_cho_solve
      jaxpr={ lambda ; d:f64[200,7,18,18] e:f64[200,7,18,18]. let
          f:f64[200,7,18,18,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2, 3)
            shape=(200, 7, 18, 18, 1)
          ] e
          g:f64[200,7,18,1,18] = transpose[permutation=(0, 1, 3, 4, 2)] f
          h:f64[200,7,18,18] = reshape[
            dimensions=None
            new_sizes=(200, 7, 18, 18)
          ] g
          i:f64[200,7,18,18] = triangular_solve[
            conjugate_a=False
            left_side=True
            lower=False
            transpose_a=True
            unit_diagonal=False
          ] d h
          j:f64[200,7,18,1,18] = reshape[
            dimensions=None
            new_sizes=(200, 7, 18, 1, 18)
          ] i
          k:f64[200,7,18,1,18] = slice[
            limit_indices=(200, 7, 18, 1, 18)
            start_indices=(0, 0, 0, 0, 0)
            strides=None
          ] j
          l:f64[200,7,18,18,1] = transpose[permutation=(0, 1, 4, 2, 3)] k
          m:f64[200,7,18,18] = squeeze[dimensions=(4,)] l
          n:f64[200,7,18,18,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2, 3)
            shape=(200, 7, 18, 18, 1)
          ] m
          o:f64[200,7,18,1,18] = transpose[permutation=(0, 1, 3, 4, 2)] n
          p:f64[200,7,18,18] = reshape[
            dimensions=None
            new_sizes=(200, 7, 18, 18)
          ] o
          q:f64[200,7,18,18] = triangular_solve[
            conjugate_a=False
            left_side=True
            lower=False
            transpose_a=False
            unit_diagonal=False
          ] d p
          r:f64[200,7,18,1,18] = reshape[
            dimensions=None
            new_sizes=(200, 7, 18, 1, 18)
          ] q
          s:f64[200,7,18,1,18] = slice[
            limit_indices=(200, 7, 18, 1, 18)
            start_indices=(0, 0, 0, 0, 0)
            strides=None
          ] r
          t:f64[200,7,18,18,1] = transpose[permutation=(0, 1, 4, 2, 3)] s
          u:f64[200,7,18,18] = squeeze[dimensions=(4,)] t
        in (u,) }
    ] a b
  in (c,) })
                ] gqt gqt grc grc gra
              in (grc, gsi) }
          ] gqq ecc ecd ece ecf ecg ech eci
          gsj:f64[200,7,19] gsk:f64[200,7,18] _:f64[200,7,18,18] gsl:f64[4,200,7,18,18]
            gsm:f64[4,200,7,18,18] gsn:f64[4,200,7,18,18] gso:f64[4,200,7,18] gsp:f64[4,200,7,18,18]
            gsq:f64[4,200,7,12] gsr:bool[4,200,7,12] gss:f64[4,200,7,12] gst:f64[4,200,7,12]
            gsu:f64[4,200,7,12] gsv:f64[4,200,7,12] gsw:bool[4,200,7,12] gsx:bool[4,200,7,12]
            gsy:bool[4,200,7,3] gsz:bool[4,200,7] gta:f64[4,200,7,3] gtb:f64[4,200,7,3]
            gtc:f64[4,200,7,1] gtd:f64[4,200,7] gte:f64[4,200,7,1] gtf:f64[4,200,7,3]
            gtg:f64[4,200,7,1] gth:f64[4,200,7] gti:f64[4,200,7] gtj:f64[4,200,7]
            gtk:f64[4,200,7] gtl:f64[4,200,7] gtm:f64[4,200,7] gtn:f64[4,200,7,3]
            gto:f64[4,200,7,3] gtp:f64[4,200,7,1] gtq:f64[4,200,7] gtr:f64[4,200,7,1]
            gts:f64[4,200,7,3] gtt:f64[4,200,7,1] gtu:f64[4,200,7] gtv:f64[4,200,7]
            gtw:f64[4,200,7] gtx:f64[4,200,7] gty:f64[4,200,7] gtz:f64[4,200,7] gua:f64[4,200,7]
            gub:f64[4,200,7] guc:f64[4,200,7] gud:bool[4,200,7] gue:f64[4,200,7]
            guf:f64[4,200,7] gug:f64[4,200,7] guh:f64[4,200,7] gui:f64[4,200,7] guj:bool[4,200,7,3]
            guk:bool[4,200,7] gul:bool[4,200,7] gum:f64[4,200,7] gun:f64[4,200,7]
            guo:f64[4,200,7] gup:f64[4,200,7] guq:f64[4,200,7] gur:bool[4,200,7,3]
            gus:bool[4,200,7] gut:bool[4,200,7] guu:f64[4,200,7] guv:f64[4,200,7]
            guw:f64[4,200,7] gux:f64[4,200,7] guy:f64[4,200,7] guz:bool[4,200,7,3]
            gva:bool[4,200,7] gvb:bool[4,200,7] gvc:f64[4,200,7] gvd:f64[4,200,7]
            gve:f64[4,200,7] gvf:f64[4,200,7] gvg:f64[4,200,7] gvh:f64[4,200,7] gvi:f64[4,200,7]
            gvj:f64[4,200,7] gvk:f64[4,200,7] gvl:f64[4,200,7] gvm:f64[4,200,7] gvn:f64[4,200,7]
            gvo:f64[4,200,7] gvp:f64[4,200,7] gvq:f64[4,200,7] gvr:f64[4,200,7] gvs:f64[4,200,7]
            gvt:f64[4,200,7] gvu:f64[4,200,7] gvv:f64[4,200,7] gvw:f64[4,200,7] gvx:f64[4,200,7]
            gvy:f64[4,200,7] gvz:f64[4,200,7] gwa:f64[4,200,7] gwb:f64[4,200,7] gwc:f64[4,200,7]
            gwd:f64[4,200,7] gwe:f64[4,200,7] gwf:f64[4,200,7] gwg:f64[4,200,7] gwh:f64[4,200,7]
            gwi:f64[4,200,7] gwj:f64[4,200,7] gwk:f64[4,200,7] gwl:f64[4,200,7] gwm:f64[4,200,7]
            gwn:f64[4,200,7] gwo:f64[4,200,7] gwp:f64[4,200,7] gwq:f64[4,200,7] gwr:f64[4,200,7]
            gws:f64[4,200,7] gwt:f64[4,200,7] gwu:f64[4,200,7] gwv:f64[4,200,7] gww:f64[4,200,7]
            gwx:f64[4,200,7] gwy:f64[4,200,7] gwz:f64[4,200,7] gxa:f64[4,200,7] gxb:f64[4,200,7]
            gxc:f64[4,200,7] gxd:f64[4,200,7] gxe:f64[4,200,7] gxf:f64[4,200,7] gxg:f64[4,200,7]
            gxh:f64[4,200,7] gxi:f64[4,200,7] gxj:f64[4,200,7] gxk:f64[4,200,7] gxl:f64[4,200,7]
            gxm:f64[4,200,7] gxn:f64[4,200,7] gxo:f64[4,200,7] gxp:f64[4,200,7] gxq:f64[4,200,7]
            gxr:f64[4,200,7] gxs:f64[4,200,7] gxt:f64[4,200,7] gxu:f64[4,200,7] gxv:f64[4,200,7]
            gxw:f64[4,200,7] gxx:f64[4,200,7] gxy:f64[4,200,7] gxz:f64[4,200,7] gya:f64[4,200,7]
            gyb:f64[4,200,7] gyc:f64[4,200,7] gyd:f64[4,200,7] gye:f64[4,200,7] gyf:f64[4,200,7]
            gyg:f64[4,200,7] gyh:f64[4,200,7] gyi:f64[4,200,7] gyj:f64[4,200,7] gyk:f64[4,200,7]
            gyl:f64[4,200,7] gym:f64[4,200,7] gyn:f64[4,200,7] gyo:f64[4,200,7] gyp:f64[4,200,7]
            gyq:f64[4,200,7] gyr:f64[4,200,7] gys:f64[4,200,7] gyt:f64[4,200,7] gyu:f64[4,200,7]
            gyv:f64[4,200,7] gyw:f64[4,200,7] gyx:f64[4,200,7] gyy:f64[4,200,7] gyz:f64[4,200,7]
            gza:f64[4,200,7] gzb:f64[4,200,7] gzc:f64[4,200,7] gzd:f64[4,200,7] gze:f64[4,200,7]
            gzf:f64[4,200,7] gzg:f64[4,200,7] gzh:f64[4,200,7] gzi:f64[4,200,7] gzj:f64[4,200,7]
            gzk:f64[4,200,7] gzl:f64[4,200,7] gzm:f64[4,200,7] gzn:f64[4,200,7] gzo:f64[4,200,7]
            gzp:f64[4,200,7] gzq:f64[4,200,7] gzr:f64[4,200,7] gzs:f64[4,200,7] gzt:f64[4,200,7]
            gzu:f64[4,200,7] gzv:f64[4,200,7] gzw:f64[4,200,7] gzx:f64[4,200,7] gzy:f64[4,200,7]
            gzz:f64[4,200,7] haa:f64[4,200,7] hab:f64[4,200,7] hac:f64[4,200,7] had:f64[4,200,7]
            hae:f64[4,200,7] haf:f64[4,200,7,12] hag:f64[4,200,7,12] hah:f64[4,200,7,12]
            hai:f64[4,200,7,12] haj:f64[4,200,7,12] hak:f64[4,200,7,12] hal:f64[4,200,7,12]
            ham:f64[4,200,7,12] han:f64[4,200,7,1] hao:f64[4,200,7,1] hap:f64[4,200,7,1,3]
            haq:f64[4,200,7,1] har:f64[4,200,7,1] has:f64[4,200,7,1,1] hat:f64[4,200,7,1,1]
            hau:f64[4,200,7,1] hav:f64[4,200,7,1] haw:f64[4,200,7,1] hax:f64[4,200,7,1]
            hay:f64[4,200,7,1] haz:f64[4,200,7,1] hba:f64[4,200,7,1] hbb:f64[4,200,7,1]
            hbc:f64[4,200,7,1] hbd:f64[4,200,7,1] hbe:f64[4,200,7,1] hbf:f64[4,200,7,1]
            hbg:f64[4,200,7,1] hbh:f64[4,200,7,1] hbi:f64[4,200,7,1] hbj:f64[4,200,7,1]
            hbk:f64[4,200,7,1] hbl:f64[4,200,7,1] hbm:f64[4,200,7,1] hbn:f64[4,200,7,1]
            hbo:f64[4,200,7,1] hbp:f64[4,200,7,1] hbq:f64[4,200,7,1] hbr:f64[4,200,7,1]
            hbs:f64[4,200,7,1] hbt:f64[4,200,7,1] hbu:f64[4,200,7,1] hbv:f64[4,200,7,1]
            hbw:f64[4,200,7,1] hbx:f64[4,200,7,1] hby:f64[4,200,7,1] hbz:f64[4,200,7,1]
            hca:f64[4,200,7,1] hcb:f64[4,200,7,1] hcc:f64[4,200,7,1] hcd:f64[4,200,7,1]
            hce:f64[4,200,7,1] hcf:f64[4,200,7,1] hcg:f64[4,200,7,1] hch:f64[4,200,7,1,1]
            hci:f64[4,200,7,1,4] hcj:f64[4,200,7,1] hck:f64[4,200,7,1,1] = scan[
            _split_transpose=False
            jaxpr={ lambda ; hcl:f64[1,1,18,18] hcm:bool[200,7,18,18] hcn:f64[200,7,18,18]
                hco:bool[200,7,18,18] hcp:f64[200,7,18,18] hcq:bool[200,7,18,18]
                hcr:f64[200,7,18,18] hcs:f64[200,7,18,18] hct:f64[200,7,18] hcu:i32[12,1]
                hcv:f64[1,1,12] hcw:f64[200,7,12] hcx:f64[200,7,12] hcy:bool[200,7,12]
                hcz:f64[200,7,12] hda:f64[200,7,12] hdb:f64[200,7,12] hdc:f64[200,7,12]
                hdd:bool[200,7,12] hde:bool[200,7,12] hdf:f64[1,1,12] hdg:f64[1,1,12]
                hdh:f64[1,1,12] hdi:f64[1,1,12] hdj:f64[1,1,12] hdk:f64[1,1,12] hdl:f64[1,1,12]
                hdm:f64[1,1,12] hdn:f64[1,1,12] hdo:f64[1,1,12] hdp:f64[1,1,12] hdq:f64[1,1,3]
                hdr:f64[1,1,4] hds:i32[1] hdt:i32[1] hdu:i32[1] hdv:i32[1] hdw:i32[1]
                hdx:i32[1] hdy:i32[1] hdz:i32[1] hea:i32[1] heb:i32[1] hec:i32[1]
                hed:i32[1] hee:f64[1,1,36] hef:f64[1,1,36] heg:f64[1,1,36] heh:f64[1,1,36]
                hei:f64[] hej:f64[] hek:bool[] hel:bool[200,7] hem:bool[200,7] hen:f64[]
                heo:f64[] hep:f64[] heq:f64[] her:f64[] hes:f64[] het:f64[] heu:f64[]
                hev:f64[200,7,1] hew:f64[1,1,3] hex:f64[] hey:f64[] hez:bool[] hfa:bool[200,7]
                hfb:bool[200,7] hfc:f64[] hfd:f64[] hfe:f64[] hff:f64[] hfg:f64[]
                hfh:f64[] hfi:f64[] hfj:f64[] hfk:f64[200,7,1] hfl:f64[1,1,3] hfm:f64[]
                hfn:f64[] hfo:bool[] hfp:bool[200,7] hfq:bool[200,7] hfr:f64[] hfs:f64[]
                hft:f64[] hfu:f64[] hfv:f64[] hfw:f64[] hfx:f64[] hfy:f64[] hfz:f64[200,7,1]
                hga:f64[1,1,3] hgb:f64[] hgc:f64[] hgd:bool[] hge:bool[200,7] hgf:bool[200,7]
                hgg:f64[] hgh:f64[] hgi:f64[] hgj:f64[] hgk:f64[] hgl:f64[] hgm:f64[]
                hgn:f64[] hgo:f64[200,7,1] hgp:f64[] hgq:f64[] hgr:f64[] hgs:f64[]
                hgt:f64[] hgu:f64[] hgv:f64[] hgw:f64[200,7] hgx:f64[200,7] hgy:f64[200,7]
                hgz:f64[200,7] hha:f64[] hhb:f64[200,7] hhc:f64[200,7] hhd:f64[200,7]
                hhe:f64[200,7] hhf:f64[] hhg:f64[] hhh:f64[] hhi:f64[] hhj:f64[]
                hhk:f64[] hhl:f64[] hhm:f64[200,7] hhn:f64[200,7] hho:f64[200,7]
                hhp:f64[200,7] hhq:f64[] hhr:f64[200,7] hhs:f64[200,7] hht:f64[200,7]
                hhu:f64[200,7] hhv:f64[] hhw:f64[] hhx:f64[] hhy:f64[] hhz:f64[]
                hia:f64[] hib:f64[] hic:f64[200,7] hid:f64[200,7] hie:f64[200,7]
                hif:f64[200,7] hig:f64[] hih:f64[200,7] hii:f64[200,7] hij:f64[200,7]
                hik:f64[200,7] hil:f64[] him:f64[] hin:f64[] hio:f64[] hip:f64[]
                hiq:f64[] hir:f64[] his:f64[200,7] hit:f64[200,7] hiu:f64[200,7]
                hiv:f64[200,7] hiw:f64[] hix:f64[200,7] hiy:f64[200,7] hiz:f64[200,7]
                hja:f64[200,7] hjb:f64[1,1,12] hjc:f64[200,7,12] hjd:f64[200,7,12]
                hje:f64[200,7,12] hjf:f64[200,7,12] hjg:f64[1,1,12] hjh:f64[200,7,12]
                hji:f64[200,7,12] hjj:f64[200,7,12] hjk:f64[200,7,12] hjl:f64[1,1,12]
                hjm:f64[1,1,12] hjn:f64[1,1,12] hjo:f64[200,7,12] hjp:f64[200,7,12]
                hjq:f64[200,7,12] hjr:f64[200,7,12] hjs:f64[1,1,12] hjt:f64[200,7,12]
                hju:f64[200,7,12] hjv:f64[200,7,12] hjw:f64[200,7,12] hjx:f64[1,1,12]
                hjy:i32[12,1] hjz:f64[1,1,12] hka:i32[12,1] hkb:f64[1,1,12] hkc:f64[1,1,12]
                hkd:f64[200,7,12] hke:f64[200,7,12] hkf:f64[200,7,12] hkg:f64[200,7,12]
                hkh:f64[1,1,12] hki:f64[200,7,12] hkj:f64[200,7,12] hkk:f64[200,7,12]
                hkl:f64[200,7,12] hkm:f64[1,1,12] hkn:f64[200,7,12] hko:f64[200,7,12]
                hkp:f64[200,7,18] hkq:f64[200,7,2] hkr:f64[200,7,19] hks:f64[200,7,18]
                hkt:f64[200,7,18,18] hku:f64[200,7,18]. let
                hkv:f64[200,7,7] = slice[
                  limit_indices=(200, 7, 7)
                  start_indices=(0, 0, 0)
                  strides=None
                ] hkr
                hkw:f64[200,7,1,7] = reshape[
                  dimensions=None
                  new_sizes=(200, 7, 1, 7)
                ] hkv
                hkx:f64[200,7,1,3] = slice[
                  limit_indices=(200, 7, 1, 3)
                  start_indices=(0, 0, 0, 0)
                  strides=None
                ] hkw
                hky:f64[200,7,18,18] = add hkt hcl
                hkz:f64[200,7,18,18] hla:f64[200,7,18,18] hlb:f64[200,7,18,18] = pjit[
                  name=_solve
                  jaxpr={ lambda ; hlc:f64[200,7,18,18] hld:bool[200,7,18,18] hle:f64[200,7,18,18]
                      hlf:bool[200,7,18,18] hlg:f64[200,7,18,18] hlh:bool[200,7,18,18]
                      hli:f64[200,7,18,18] hlj:f64[200,7,18,18]. let
                      hlk:f64[200,7,18,18] = stop_gradient hlc
                      hll:f64[200,7,18,18] = pjit[
                        name=_cholesky
                        jaxpr={ lambda ; hlm:f64[200,7,18,18] hln:bool[200,7,18,18]
                            hlo:f64[200,7,18,18] hlp:bool[200,7,18,18] hlq:f64[200,7,18,18]
                            hlr:bool[200,7,18,18] hls:f64[200,7,18,18]. let
                            hlt:f64[200,7,18,18] = transpose[
                              permutation=(0, 1, 3, 2)
                            ] hlm
                            hlu:f64[200,7,18,18] = transpose[
                              permutation=(0, 1, 3, 2)
                            ] hlt
                            hlv:f64[200,7,18,18] = add hlt hlu
                            hlw:f64[200,7,18,18] = div hlv 2.0
                            hlx:f64[200,7,18,18] = transpose[
                              permutation=(0, 1, 3, 2)
                            ] hlw
                            hly:f64[200,7,18,18] = add hlw hlx
                            hlz:f64[200,7,18,18] = div hly 2.0
                            hma:f64[200,7,18,18] = cholesky hlz
                            hmb:f64[200,7,18,18] = pjit[
                              name=tril
                              jaxpr={ lambda ; hmc:f64[200,7,18,18] hmd:bool[200,7,18,18]
                                  hme:f64[200,7,18,18]. let
                                  hmf:f64[200,7,18,18] = select_n hmd hme hmc
                                in (hmf,) }
                            ] hma hln hlo
                            hmg:f64[200,7,18,18] = pjit[
                              name=tril
                              jaxpr={ lambda ; hmh:f64[200,7,18,18] hmi:bool[200,7,18,18]
                                  hmj:f64[200,7,18,18]. let
                                  hmk:f64[200,7,18,18] = select_n hmi hmj hmh
                                in (hmk,) }
                            ] hmb hlp hlq
                            hml:f64[200,7,18,18] = pjit[
                              name=tril
                              jaxpr={ lambda ; hmm:f64[200,7,18,18] hmn:bool[200,7,18,18]
                                  hmo:f64[200,7,18,18]. let
                                  hmp:f64[200,7,18,18] = select_n hmn hmo hmm
                                in (hmp,) }
                            ] hmg hlr hls
                            hmq:f64[200,7,18,18] = transpose[
                              permutation=(0, 1, 3, 2)
                            ] hml
                          in (hmq,) }
                      ] hlk hld hle hlf hlg hlh hli
                      hmr:f64[200,7,18,18] = custom_linear_solve[
                        const_lengths=_LinearSolveTuple(matvec=1, vecmat=1, solve=1, transpose_solve=1)
                        jaxprs=_LinearSolveTuple(matvec={ lambda ; a:f64[200,7,18,18] b:f64[200,7,18,18]. let
    c:f64[200,7,18,18] = dot_general[
      dimension_numbers=(([3], [3]), ([0, 1], [0, 1]))
      precision=(Precision.HIGHEST, Precision.HIGHEST)
    ] a b
    d:f64[200,7,18,18] = transpose[permutation=(0, 1, 3, 2)] c
  in (d,) }, vecmat={ lambda ; a:f64[200,7,18,18] b:f64[200,7,18,18]. let
    c:f64[200,7,18,18] = dot_general[
      dimension_numbers=(([3], [3]), ([0, 1], [0, 1]))
      precision=(Precision.HIGHEST, Precision.HIGHEST)
    ] a b
    d:f64[200,7,18,18] = transpose[permutation=(0, 1, 3, 2)] c
  in (d,) }, solve={ lambda ; a:f64[200,7,18,18] b:f64[200,7,18,18]. let
    c:f64[200,7,18,18] = pjit[
      name=_cho_solve
      jaxpr={ lambda ; d:f64[200,7,18,18] e:f64[200,7,18,18]. let
          f:f64[200,7,18,18,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2, 3)
            shape=(200, 7, 18, 18, 1)
          ] e
          g:f64[200,7,18,1,18] = transpose[permutation=(0, 1, 3, 4, 2)] f
          h:f64[200,7,18,18] = reshape[
            dimensions=None
            new_sizes=(200, 7, 18, 18)
          ] g
          i:f64[200,7,18,18] = triangular_solve[
            conjugate_a=False
            left_side=True
            lower=False
            transpose_a=True
            unit_diagonal=False
          ] d h
          j:f64[200,7,18,1,18] = reshape[
            dimensions=None
            new_sizes=(200, 7, 18, 1, 18)
          ] i
          k:f64[200,7,18,1,18] = slice[
            limit_indices=(200, 7, 18, 1, 18)
            start_indices=(0, 0, 0, 0, 0)
            strides=None
          ] j
          l:f64[200,7,18,18,1] = transpose[permutation=(0, 1, 4, 2, 3)] k
          m:f64[200,7,18,18] = squeeze[dimensions=(4,)] l
          n:f64[200,7,18,18,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2, 3)
            shape=(200, 7, 18, 18, 1)
          ] m
          o:f64[200,7,18,1,18] = transpose[permutation=(0, 1, 3, 4, 2)] n
          p:f64[200,7,18,18] = reshape[
            dimensions=None
            new_sizes=(200, 7, 18, 18)
          ] o
          q:f64[200,7,18,18] = triangular_solve[
            conjugate_a=False
            left_side=True
            lower=False
            transpose_a=False
            unit_diagonal=False
          ] d p
          r:f64[200,7,18,1,18] = reshape[
            dimensions=None
            new_sizes=(200, 7, 18, 1, 18)
          ] q
          s:f64[200,7,18,1,18] = slice[
            limit_indices=(200, 7, 18, 1, 18)
            start_indices=(0, 0, 0, 0, 0)
            strides=None
          ] r
          t:f64[200,7,18,18,1] = transpose[permutation=(0, 1, 4, 2, 3)] s
          u:f64[200,7,18,18] = squeeze[dimensions=(4,)] t
        in (u,) }
    ] a b
  in (c,) }, transpose_solve={ lambda ; a:f64[200,7,18,18] b:f64[200,7,18,18]. let
    c:f64[200,7,18,18] = pjit[
      name=_cho_solve
      jaxpr={ lambda ; d:f64[200,7,18,18] e:f64[200,7,18,18]. let
          f:f64[200,7,18,18,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2, 3)
            shape=(200, 7, 18, 18, 1)
          ] e
          g:f64[200,7,18,1,18] = transpose[permutation=(0, 1, 3, 4, 2)] f
          h:f64[200,7,18,18] = reshape[
            dimensions=None
            new_sizes=(200, 7, 18, 18)
          ] g
          i:f64[200,7,18,18] = triangular_solve[
            conjugate_a=False
            left_side=True
            lower=False
            transpose_a=True
            unit_diagonal=False
          ] d h
          j:f64[200,7,18,1,18] = reshape[
            dimensions=None
            new_sizes=(200, 7, 18, 1, 18)
          ] i
          k:f64[200,7,18,1,18] = slice[
            limit_indices=(200, 7, 18, 1, 18)
            start_indices=(0, 0, 0, 0, 0)
            strides=None
          ] j
          l:f64[200,7,18,18,1] = transpose[permutation=(0, 1, 4, 2, 3)] k
          m:f64[200,7,18,18] = squeeze[dimensions=(4,)] l
          n:f64[200,7,18,18,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2, 3)
            shape=(200, 7, 18, 18, 1)
          ] m
          o:f64[200,7,18,1,18] = transpose[permutation=(0, 1, 3, 4, 2)] n
          p:f64[200,7,18,18] = reshape[
            dimensions=None
            new_sizes=(200, 7, 18, 18)
          ] o
          q:f64[200,7,18,18] = triangular_solve[
            conjugate_a=False
            left_side=True
            lower=False
            transpose_a=False
            unit_diagonal=False
          ] d p
          r:f64[200,7,18,1,18] = reshape[
            dimensions=None
            new_sizes=(200, 7, 18, 1, 18)
          ] q
          s:f64[200,7,18,1,18] = slice[
            limit_indices=(200, 7, 18, 1, 18)
            start_indices=(0, 0, 0, 0, 0)
            strides=None
          ] r
          t:f64[200,7,18,18,1] = transpose[permutation=(0, 1, 4, 2, 3)] s
          u:f64[200,7,18,18] = squeeze[dimensions=(4,)] t
        in (u,) }
    ] a b
  in (c,) })
                      ] hlc hlc hll hll hlj
                      hms:f64[200,7,18,18] = transpose[permutation=(0, 1, 3, 2)] hmr
                    in (hms, hll, hmr) }
                ] hky hcm hcn hco hcp hcq hcr hcs
                hmt:f64[200,7,12] = slice[
                  limit_indices=(200, 7, 19)
                  start_indices=(0, 0, 7)
                  strides=None
                ] hkr
                hmu:f64[200,7,4] = slice[
                  limit_indices=(200, 7, 7)
                  start_indices=(0, 0, 3)
                  strides=None
                ] hkr
                hmv:f64[200,7,4] = mul hmu hdr
                hmw:f64[200,7,3] = slice[
                  limit_indices=(200, 7, 4)
                  start_indices=(0, 0, 1)
                  strides=None
                ] hmv
                hmx:f64[200,7,3] = slice[
                  limit_indices=(200, 7, 3)
                  start_indices=(0, 0, 0)
                  strides=None
                ] hks
                hmy:f64[200,7] = dot_general[
                  dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
                  preferred_element_type=float64
                ] hmw hmx
                hmz:f64[200,7,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(200, 7, 1)
                ] hmy
                hna:f64[200,7,3] = mul hmz hmw
                hnb:f64[200,7,3] = mul 2.0 hna
                hnc:f64[200,7,1] = slice[
                  limit_indices=(200, 7, 1)
                  start_indices=(0, 0, 0)
                  strides=None
                ] hmv
                hnd:f64[200,7] = squeeze[dimensions=(2,)] hnc
                hne:f64[200,7] = mul hnd hnd
                hnf:f64[200,7] = dot_general[
                  dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
                  preferred_element_type=float64
                ] hmw hmw
                hng:f64[200,7] = sub hne hnf
                hnh:f64[200,7,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(200, 7, 1)
                ] hng
                hni:f64[200,7,3] = mul hnh hmx
                hnj:f64[200,7,3] = add hnb hni
                hnk:f64[200,7] = mul 2.0 hnd
                hnl:f64[200,7,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(200, 7, 1)
                ] hnk
                hnm:f64[200,7,3] hnn:f64[200,7] hno:f64[200,7] hnp:f64[200,7] hnq:f64[200,7]
                  hnr:f64[200,7] hns:f64[200,7] = pjit[name=cross jaxpr=cross9] hmw
                  hmx hds hdt hdu hdv hdw hdx
                hnt:f64[200,7,3] = mul hnl hnm
                hnu:f64[200,7,3] = add hnj hnt
                hnv:f64[200,7,3] = slice[
                  limit_indices=(200, 7, 4)
                  start_indices=(0, 0, 1)
                  strides=None
                ] hmu
                hnw:f64[200,7,3] = slice[
                  limit_indices=(200, 7, 6)
                  start_indices=(0, 0, 3)
                  strides=None
                ] hks
                hnx:f64[200,7] = dot_general[
                  dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
                  preferred_element_type=float64
                ] hnv hnw
                hny:f64[200,7,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(200, 7, 1)
                ] hnx
                hnz:f64[200,7,3] = mul hny hnv
                hoa:f64[200,7,3] = mul 2.0 hnz
                hob:f64[200,7,1] = slice[
                  limit_indices=(200, 7, 1)
                  start_indices=(0, 0, 0)
                  strides=None
                ] hmu
                hoc:f64[200,7] = squeeze[dimensions=(2,)] hob
                hod:f64[200,7] = mul hoc hoc
                hoe:f64[200,7] = dot_general[
                  dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
                  preferred_element_type=float64
                ] hnv hnv
                hof:f64[200,7] = sub hod hoe
                hog:f64[200,7,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(200, 7, 1)
                ] hof
                hoh:f64[200,7,3] = mul hog hnw
                hoi:f64[200,7,3] = add hoa hoh
                hoj:f64[200,7] = mul 2.0 hoc
                hok:f64[200,7,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(200, 7, 1)
                ] hoj
                hol:f64[200,7,3] hom:f64[200,7] hon:f64[200,7] hoo:f64[200,7] hop:f64[200,7]
                  hoq:f64[200,7] hor:f64[200,7] = pjit[name=cross jaxpr=cross9] hnv
                  hnw hdy hdz hea heb hec hed
                hos:f64[200,7,3] = mul hok hol
                hot:f64[200,7,3] = add hoi hos
                hou:f64[200,7,12] = slice[
                  limit_indices=(200, 7, 18)
                  start_indices=(0, 0, 6)
                  strides=None
                ] hks
                hov:f64[200,7,34] = concatenate[dimension=2] hmu hmt hnu hot hou
                how:f64[200,7,36] = concatenate[dimension=2] hov hkq
                hox:f64[200,7,36] = sub how hee
                hoy:f64[200,7,36] = mul 2.0 hox
                hoz:f64[200,7,36] = div hoy hef
                hpa:f64[200,7,36] = sub hoz 1.0
                hpb:f64[200,7,36] = add hpa 1.0
                hpc:f64[200,7,36] = mul hpb heg
                hpd:f64[200,7,36] = div hpc 2.0
                hpe:f64[200,7,36] = add hpd heh
                hpf:f64[200,7,1] = slice[
                  limit_indices=(200, 7, 36)
                  start_indices=(0, 0, 35)
                  strides=None
                ] hpe
                hpg:f64[200,7] = squeeze[dimensions=(2,)] hpf
                hph:f64[200,7,1] = slice[
                  limit_indices=(200, 7, 35)
                  start_indices=(0, 0, 34)
                  strides=None
                ] hpe
                hpi:f64[200,7] = squeeze[dimensions=(2,)] hph
                hpj:f64[200,7] = atan2 hpg hpi
                hpk:f64[200,7] = div hpj 6.283185307179586
                hpl:f64[200,7] = add hpk 0.5
                hpm:f64[200,7] = add hpl hei
                hpn:f64[200,7] hpo:bool[200,7] = pjit[
                  name=remainder
                  jaxpr=remainder
                ] hpm hej hek
                hpp:bool[200,7] = lt hpn 0.5
                hpq:bool[200,7] = select_n hpp hel hem
                hpr:bool[200,7,3] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(200, 7, 3)
                ] hpq
                hps:f64[200,7] = sub hpn 0.5
                hpt:f64[200,7] = div hps 0.5
                hpu:f64[200,7] = div hpn 0.5
                hpv:f64[200,7] = select_n hpq hpt hpu
                hpw:f64[200,7] = mul 6.283185307179586 hpv
                hpx:f64[200,7] = mul 6.283185307179586 hpv
                hpy:f64[200,7] = sin hpx
                hpz:f64[200,7] = sub hpw hpy
                hqa:f64[200,7] = mul hen hpz
                hqb:f64[200,7] = add hqa heo
                hqc:f64[200,7,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(200, 7, 1)
                ] hqb
                hqd:f64[200,7] = mul 6.283185307179586 hpv
                hqe:f64[200,7] = mul 6.283185307179586 hpv
                hqf:f64[200,7] = sin hqe
                hqg:f64[200,7] = sub hqd hqf
                hqh:f64[200,7] = mul hep hqg
                hqi:f64[200,7] = add hqh heq
                hqj:f64[200,7,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(200, 7, 1)
                ] hqi
                hqk:f64[200,7] = mul 6.283185307179586 hpv
                hql:f64[200,7] = cos hqk
                hqm:f64[200,7] = sub 1.0 hql
                hqn:f64[200,7] = mul 0.04 hqm
                hqo:f64[200,7,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(200, 7, 1)
                ] hqn
                hqp:f64[200,7,3] = concatenate[dimension=2] hqc hqj hqo
                hqq:f64[200,7] = mul 6.283185307179586 hpv
                hqr:f64[200,7] = mul 6.283185307179586 hpv
                hqs:f64[200,7] = sin hqr
                hqt:f64[200,7] = sub hqq hqs
                hqu:f64[200,7] = mul her hqt
                hqv:f64[200,7] = add hqu hes
                hqw:f64[200,7,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(200, 7, 1)
                ] hqv
                hqx:f64[200,7] = mul 6.283185307179586 hpv
                hqy:f64[200,7] = mul 6.283185307179586 hpv
                hqz:f64[200,7] = sin hqy
                hra:f64[200,7] = sub hqx hqz
                hrb:f64[200,7] = mul het hra
                hrc:f64[200,7] = add hrb heu
                hrd:f64[200,7,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(200, 7, 1)
                ] hrc
                hre:f64[200,7,3] = concatenate[dimension=2] hqw hrd hev
                hrf:f64[200,7,3] = select_n hpr hqp hre
                hrg:f64[200,7,3] = add hdq hrf
                hrh:f64[200,7] = div hpj 6.283185307179586
                hri:f64[200,7] = add hrh 0.5
                hrj:f64[200,7] = add hri hex
                hrk:f64[200,7] hrl:bool[200,7] = pjit[
                  name=remainder
                  jaxpr=remainder
                ] hrj hey hez
                hrm:bool[200,7] = lt hrk 0.5
                hrn:bool[200,7] = select_n hrm hfa hfb
                hro:bool[200,7,3] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(200, 7, 3)
                ] hrn
                hrp:f64[200,7] = sub hrk 0.5
                hrq:f64[200,7] = div hrp 0.5
                hrr:f64[200,7] = div hrk 0.5
                hrs:f64[200,7] = select_n hrn hrq hrr
                hrt:f64[200,7] = mul 6.283185307179586 hrs
                hru:f64[200,7] = mul 6.283185307179586 hrs
                hrv:f64[200,7] = sin hru
                hrw:f64[200,7] = sub hrt hrv
                hrx:f64[200,7] = mul hfc hrw
                hry:f64[200,7] = add hrx hfd
                hrz:f64[200,7,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(200, 7, 1)
                ] hry
                hsa:f64[200,7] = mul 6.283185307179586 hrs
                hsb:f64[200,7] = mul 6.283185307179586 hrs
                hsc:f64[200,7] = sin hsb
                hsd:f64[200,7] = sub hsa hsc
                hse:f64[200,7] = mul hfe hsd
                hsf:f64[200,7] = add hse hff
                hsg:f64[200,7,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(200, 7, 1)
                ] hsf
                hsh:f64[200,7] = mul 6.283185307179586 hrs
                hsi:f64[200,7] = cos hsh
                hsj:f64[200,7] = sub 1.0 hsi
                hsk:f64[200,7] = mul 0.04 hsj
                hsl:f64[200,7,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(200, 7, 1)
                ] hsk
                hsm:f64[200,7,3] = concatenate[dimension=2] hrz hsg hsl
                hsn:f64[200,7] = mul 6.283185307179586 hrs
                hso:f64[200,7] = mul 6.283185307179586 hrs
                hsp:f64[200,7] = sin hso
                hsq:f64[200,7] = sub hsn hsp
                hsr:f64[200,7] = mul hfg hsq
                hss:f64[200,7] = add hsr hfh
                hst:f64[200,7,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(200, 7, 1)
                ] hss
                hsu:f64[200,7] = mul 6.283185307179586 hrs
                hsv:f64[200,7] = mul 6.283185307179586 hrs
                hsw:f64[200,7] = sin hsv
                hsx:f64[200,7] = sub hsu hsw
                hsy:f64[200,7] = mul hfi hsx
                hsz:f64[200,7] = add hsy hfj
                hta:f64[200,7,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(200, 7, 1)
                ] hsz
                htb:f64[200,7,3] = concatenate[dimension=2] hst hta hfk
                htc:f64[200,7,3] = select_n hro hsm htb
                htd:f64[200,7,3] = add hew htc
                hte:f64[200,7] = div hpj 6.283185307179586
                htf:f64[200,7] = add hte 0.5
                htg:f64[200,7] = add htf hfm
                hth:f64[200,7] hti:bool[200,7] = pjit[
                  name=remainder
                  jaxpr=remainder
                ] htg hfn hfo
                htj:bool[200,7] = lt hth 0.5
                htk:bool[200,7] = select_n htj hfp hfq
                htl:bool[200,7,3] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(200, 7, 3)
                ] htk
                htm:f64[200,7] = sub hth 0.5
                htn:f64[200,7] = div htm 0.5
                hto:f64[200,7] = div hth 0.5
                htp:f64[200,7] = select_n htk htn hto
                htq:f64[200,7] = mul 6.283185307179586 htp
                htr:f64[200,7] = mul 6.283185307179586 htp
                hts:f64[200,7] = sin htr
                htt:f64[200,7] = sub htq hts
                htu:f64[200,7] = mul hfr htt
                htv:f64[200,7] = add htu hfs
                htw:f64[200,7,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(200, 7, 1)
                ] htv
                htx:f64[200,7] = mul 6.283185307179586 htp
                hty:f64[200,7] = mul 6.283185307179586 htp
                htz:f64[200,7] = sin hty
                hua:f64[200,7] = sub htx htz
                hub:f64[200,7] = mul hft hua
                huc:f64[200,7] = add hub hfu
                hud:f64[200,7,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(200, 7, 1)
                ] huc
                hue:f64[200,7] = mul 6.283185307179586 htp
                huf:f64[200,7] = cos hue
                hug:f64[200,7] = sub 1.0 huf
                huh:f64[200,7] = mul 0.04 hug
                hui:f64[200,7,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(200, 7, 1)
                ] huh
                huj:f64[200,7,3] = concatenate[dimension=2] htw hud hui
                huk:f64[200,7] = mul 6.283185307179586 htp
                hul:f64[200,7] = mul 6.283185307179586 htp
                hum:f64[200,7] = sin hul
                hun:f64[200,7] = sub huk hum
                huo:f64[200,7] = mul hfv hun
                hup:f64[200,7] = add huo hfw
                huq:f64[200,7,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(200, 7, 1)
                ] hup
                hur:f64[200,7] = mul 6.283185307179586 htp
                hus:f64[200,7] = mul 6.283185307179586 htp
                hut:f64[200,7] = sin hus
                huu:f64[200,7] = sub hur hut
                huv:f64[200,7] = mul hfx huu
                huw:f64[200,7] = add huv hfy
                hux:f64[200,7,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(200, 7, 1)
                ] huw
                huy:f64[200,7,3] = concatenate[dimension=2] huq hux hfz
                huz:f64[200,7,3] = select_n htl huj huy
                hva:f64[200,7,3] = add hfl huz
                hvb:f64[200,7] = div hpj 6.283185307179586
                hvc:f64[200,7] = add hvb 0.5
                hvd:f64[200,7] = add hvc hgb
                hve:f64[200,7] hvf:bool[200,7] = pjit[
                  name=remainder
                  jaxpr=remainder
                ] hvd hgc hgd
                hvg:bool[200,7] = lt hve 0.5
                hvh:bool[200,7] = select_n hvg hge hgf
                hvi:bool[200,7,3] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(200, 7, 3)
                ] hvh
                hvj:f64[200,7] = sub hve 0.5
                hvk:f64[200,7] = div hvj 0.5
                hvl:f64[200,7] = div hve 0.5
                hvm:f64[200,7] = select_n hvh hvk hvl
                hvn:f64[200,7] = mul 6.283185307179586 hvm
                hvo:f64[200,7] = mul 6.283185307179586 hvm
                hvp:f64[200,7] = sin hvo
                hvq:f64[200,7] = sub hvn hvp
                hvr:f64[200,7] = mul hgg hvq
                hvs:f64[200,7] = add hvr hgh
                hvt:f64[200,7,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(200, 7, 1)
                ] hvs
                hvu:f64[200,7] = mul 6.283185307179586 hvm
                hvv:f64[200,7] = mul 6.283185307179586 hvm
                hvw:f64[200,7] = sin hvv
                hvx:f64[200,7] = sub hvu hvw
                hvy:f64[200,7] = mul hgi hvx
                hvz:f64[200,7] = add hvy hgj
                hwa:f64[200,7,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(200, 7, 1)
                ] hvz
                hwb:f64[200,7] = mul 6.283185307179586 hvm
                hwc:f64[200,7] = cos hwb
                hwd:f64[200,7] = sub 1.0 hwc
                hwe:f64[200,7] = mul 0.04 hwd
                hwf:f64[200,7,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(200, 7, 1)
                ] hwe
                hwg:f64[200,7,3] = concatenate[dimension=2] hvt hwa hwf
                hwh:f64[200,7] = mul 6.283185307179586 hvm
                hwi:f64[200,7] = mul 6.283185307179586 hvm
                hwj:f64[200,7] = sin hwi
                hwk:f64[200,7] = sub hwh hwj
                hwl:f64[200,7] = mul hgk hwk
                hwm:f64[200,7] = add hwl hgl
                hwn:f64[200,7,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(200, 7, 1)
                ] hwm
                hwo:f64[200,7] = mul 6.283185307179586 hvm
                hwp:f64[200,7] = mul 6.283185307179586 hvm
                hwq:f64[200,7] = sin hwp
                hwr:f64[200,7] = sub hwo hwq
                hws:f64[200,7] = mul hgm hwr
                hwt:f64[200,7] = add hws hgn
                hwu:f64[200,7,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(200, 7, 1)
                ] hwt
                hwv:f64[200,7,3] = concatenate[dimension=2] hwn hwu hgo
                hww:f64[200,7,3] = select_n hvi hwg hwv
                hwx:f64[200,7,3] = add hga hww
                hwy:f64[200,7,12] = concatenate[dimension=2] hrg htd hva hwx
                hwz:f64[200,7,12] = sub hwy hkn
                hxa:f64[200,7,12] = add hwz hko
                hxb:f64[200,7,3] = slice[
                  limit_indices=(200, 7, 3)
                  start_indices=(0, 0, 0)
                  strides=None
                ] hxa
                hxc:f64[200,7,1] = slice[
                  limit_indices=(200, 7, 3)
                  start_indices=(0, 0, 2)
                  strides=None
                ] hxb
                hxd:f64[200,7] = squeeze[dimensions=(2,)] hxc
                hxe:f64[200,7] = mul hxd hgp
                hxf:f64[200,7,1] = slice[
                  limit_indices=(200, 7, 2)
                  start_indices=(0, 0, 1)
                  strides=None
                ] hxb
                hxg:f64[200,7] = squeeze[dimensions=(2,)] hxf
                hxh:f64[200,7] = sub hxg hgq
                hxi:f64[200,7] = integer_pow[y=2] hxh
                hxj:f64[200,7] = integer_pow[y=2] hxd
                hxk:f64[200,7] = add hxi hxj
                hxl:f64[200,7] = sub hxk hgr
                hxm:f64[200,7] = sqrt hxl
                hxn:f64[200,7] = mul hxh hxm
                hxo:f64[200,7] = add hxe hxn
                hxp:f64[200,7] = mul hxh hgs
                hxq:f64[200,7] = mul hxd hxm
                hxr:f64[200,7] = sub hxp hxq
                hxs:f64[200,7] = atan2 hxo hxr
                hxt:f64[200,7,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(200, 7, 1)
                ] hxs
                hxu:f64[200,7,1] = slice[
                  limit_indices=(200, 7, 1)
                  start_indices=(0, 0, 0)
                  strides=None
                ] hxb
                hxv:f64[200,7] = squeeze[dimensions=(2,)] hxu
                hxw:f64[200,7] = sub hxv hgt
                hxx:f64[200,7] = integer_pow[y=2] hxw
                hxy:f64[200,7] = integer_pow[y=2] hxh
                hxz:f64[200,7] = add hxx hxy
                hya:f64[200,7] = integer_pow[y=2] hxd
                hyb:f64[200,7] = add hxz hya
                hyc:f64[200,7] = sqrt hyb
                hyd:f64[200,7] = integer_pow[y=2] hyc
                hye:f64[200,7] = sub hyd 0.006889000000000001
                hyf:f64[200,7] = sqrt hye
                hyg:f64[200,7] = integer_pow[y=2] hyf
                hyh:f64[200,7] = sub 0.125 hyg
                hyi:f64[200,7] = div hyh hgu
                hyj:f64[200,7] hyk:f64[200,7] hyl:f64[200,7] = pjit[
                  name=clip
                  jaxpr=clip
                ] hyi hgv hgw hgx hgy hgz hha hhb hhc hhd hhe
                hym:f64[200,7] = acos hyj
                hyn:f64[200,7] = sub 3.141592653589793 hym
                hyo:f64[200,7] = neg hyn
                hyp:f64[200,7] = sin hyo
                hyq:f64[200,7] = mul -0.25 hyp
                hyr:f64[200,7] = sin hxs
                hys:f64[200,7] = mul hxh hyr
                hyt:f64[200,7] = cos hxs
                hyu:f64[200,7] = mul hxd hyt
                hyv:f64[200,7] = sub hys hyu
                hyw:f64[200,7] = mul hyq hyv
                hyx:f64[200,7] = cos hyo
                hyy:f64[200,7] = mul -0.25 hyx
                hyz:f64[200,7] = add -0.25 hyy
                hza:f64[200,7] = mul hyz hxw
                hzb:f64[200,7] = add hyw hza
                hzc:f64[200,7] = mul hyq hxw
                hzd:f64[200,7] = mul hyz hyv
                hze:f64[200,7] = sub hzc hzd
                hzf:f64[200,7] = atan2 hzb hze
                hzg:f64[200,7,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(200, 7, 1)
                ] hzf
                hzh:f64[200,7,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(200, 7, 1)
                ] hyo
                hzi:f64[200,7,3] = concatenate[dimension=2] hxt hzg hzh
                hzj:f64[200,7,3] = slice[
                  limit_indices=(200, 7, 6)
                  start_indices=(0, 0, 3)
                  strides=None
                ] hxa
                hzk:f64[200,7,1] = slice[
                  limit_indices=(200, 7, 3)
                  start_indices=(0, 0, 2)
                  strides=None
                ] hzj
                hzl:f64[200,7] = squeeze[dimensions=(2,)] hzk
                hzm:f64[200,7] = mul hzl hhf
                hzn:f64[200,7,1] = slice[
                  limit_indices=(200, 7, 2)
                  start_indices=(0, 0, 1)
                  strides=None
                ] hzj
                hzo:f64[200,7] = squeeze[dimensions=(2,)] hzn
                hzp:f64[200,7] = sub hzo hhg
                hzq:f64[200,7] = integer_pow[y=2] hzp
                hzr:f64[200,7] = integer_pow[y=2] hzl
                hzs:f64[200,7] = add hzq hzr
                hzt:f64[200,7] = sub hzs hhh
                hzu:f64[200,7] = sqrt hzt
                hzv:f64[200,7] = mul hzp hzu
                hzw:f64[200,7] = add hzm hzv
                hzx:f64[200,7] = mul hzp hhi
                hzy:f64[200,7] = mul hzl hzu
                hzz:f64[200,7] = sub hzx hzy
                iaa:f64[200,7] = atan2 hzw hzz
                iab:f64[200,7,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(200, 7, 1)
                ] iaa
                iac:f64[200,7,1] = slice[
                  limit_indices=(200, 7, 1)
                  start_indices=(0, 0, 0)
                  strides=None
                ] hzj
                iad:f64[200,7] = squeeze[dimensions=(2,)] iac
                iae:f64[200,7] = sub iad hhj
                iaf:f64[200,7] = integer_pow[y=2] iae
                iag:f64[200,7] = integer_pow[y=2] hzp
                iah:f64[200,7] = add iaf iag
                iai:f64[200,7] = integer_pow[y=2] hzl
                iaj:f64[200,7] = add iah iai
                iak:f64[200,7] = sqrt iaj
                ial:f64[200,7] = integer_pow[y=2] iak
                iam:f64[200,7] = sub ial 0.006889000000000001
                ian:f64[200,7] = sqrt iam
                iao:f64[200,7] = integer_pow[y=2] ian
                iap:f64[200,7] = sub 0.125 iao
                iaq:f64[200,7] = div iap hhk
                iar:f64[200,7] ias:f64[200,7] iat:f64[200,7] = pjit[
                  name=clip
                  jaxpr=clip
                ] iaq hhl hhm hhn hho hhp hhq hhr hhs hht hhu
                iau:f64[200,7] = acos iar
                iav:f64[200,7] = sub 3.141592653589793 iau
                iaw:f64[200,7] = neg iav
                iax:f64[200,7] = sin iaw
                iay:f64[200,7] = mul -0.25 iax
                iaz:f64[200,7] = sin iaa
                iba:f64[200,7] = mul hzp iaz
                ibb:f64[200,7] = cos iaa
                ibc:f64[200,7] = mul hzl ibb
                ibd:f64[200,7] = sub iba ibc
                ibe:f64[200,7] = mul iay ibd
                ibf:f64[200,7] = cos iaw
                ibg:f64[200,7] = mul -0.25 ibf
                ibh:f64[200,7] = add -0.25 ibg
                ibi:f64[200,7] = mul ibh iae
                ibj:f64[200,7] = add ibe ibi
                ibk:f64[200,7] = mul iay iae
                ibl:f64[200,7] = mul ibh ibd
                ibm:f64[200,7] = sub ibk ibl
                ibn:f64[200,7] = atan2 ibj ibm
                ibo:f64[200,7,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(200, 7, 1)
                ] ibn
                ibp:f64[200,7,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(200, 7, 1)
                ] iaw
                ibq:f64[200,7,3] = concatenate[dimension=2] iab ibo ibp
                ibr:f64[200,7,3] = slice[
                  limit_indices=(200, 7, 9)
                  start_indices=(0, 0, 6)
                  strides=None
                ] hxa
                ibs:f64[200,7,1] = slice[
                  limit_indices=(200, 7, 3)
                  start_indices=(0, 0, 2)
                  strides=None
                ] ibr
                ibt:f64[200,7] = squeeze[dimensions=(2,)] ibs
                ibu:f64[200,7] = mul ibt hhv
                ibv:f64[200,7,1] = slice[
                  limit_indices=(200, 7, 2)
                  start_indices=(0, 0, 1)
                  strides=None
                ] ibr
                ibw:f64[200,7] = squeeze[dimensions=(2,)] ibv
                ibx:f64[200,7] = sub ibw hhw
                iby:f64[200,7] = integer_pow[y=2] ibx
                ibz:f64[200,7] = integer_pow[y=2] ibt
                ica:f64[200,7] = add iby ibz
                icb:f64[200,7] = sub ica hhx
                icc:f64[200,7] = sqrt icb
                icd:f64[200,7] = mul ibx icc
                ice:f64[200,7] = add ibu icd
                icf:f64[200,7] = mul ibx hhy
                icg:f64[200,7] = mul ibt icc
                ich:f64[200,7] = sub icf icg
                ici:f64[200,7] = atan2 ice ich
                icj:f64[200,7,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(200, 7, 1)
                ] ici
                ick:f64[200,7,1] = slice[
                  limit_indices=(200, 7, 1)
                  start_indices=(0, 0, 0)
                  strides=None
                ] ibr
                icl:f64[200,7] = squeeze[dimensions=(2,)] ick
                icm:f64[200,7] = sub icl hhz
                icn:f64[200,7] = integer_pow[y=2] icm
                ico:f64[200,7] = integer_pow[y=2] ibx
                icp:f64[200,7] = add icn ico
                icq:f64[200,7] = integer_pow[y=2] ibt
                icr:f64[200,7] = add icp icq
                ics:f64[200,7] = sqrt icr
                ict:f64[200,7] = integer_pow[y=2] ics
                icu:f64[200,7] = sub ict 0.006889000000000001
                icv:f64[200,7] = sqrt icu
                icw:f64[200,7] = integer_pow[y=2] icv
                icx:f64[200,7] = sub 0.125 icw
                icy:f64[200,7] = div icx hia
                icz:f64[200,7] ida:f64[200,7] idb:f64[200,7] = pjit[
                  name=clip
                  jaxpr=clip
                ] icy hib hic hid hie hif hig hih hii hij hik
                idc:f64[200,7] = acos icz
                idd:f64[200,7] = sub 3.141592653589793 idc
                ide:f64[200,7] = neg idd
                idf:f64[200,7] = sin ide
                idg:f64[200,7] = mul -0.25 idf
                idh:f64[200,7] = sin ici
                idi:f64[200,7] = mul ibx idh
                idj:f64[200,7] = cos ici
                idk:f64[200,7] = mul ibt idj
                idl:f64[200,7] = sub idi idk
                idm:f64[200,7] = mul idg idl
                idn:f64[200,7] = cos ide
                ido:f64[200,7] = mul -0.25 idn
                idp:f64[200,7] = add -0.25 ido
                idq:f64[200,7] = mul idp icm
                idr:f64[200,7] = add idm idq
                ids:f64[200,7] = mul idg icm
                idt:f64[200,7] = mul idp idl
                idu:f64[200,7] = sub ids idt
                idv:f64[200,7] = atan2 idr idu
                idw:f64[200,7,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(200, 7, 1)
                ] idv
                idx:f64[200,7,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(200, 7, 1)
                ] ide
                idy:f64[200,7,3] = concatenate[dimension=2] icj idw idx
                idz:f64[200,7,3] = slice[
                  limit_indices=(200, 7, 12)
                  start_indices=(0, 0, 9)
                  strides=None
                ] hxa
                iea:f64[200,7,1] = slice[
                  limit_indices=(200, 7, 3)
                  start_indices=(0, 0, 2)
                  strides=None
                ] idz
                ieb:f64[200,7] = squeeze[dimensions=(2,)] iea
                iec:f64[200,7] = mul ieb hil
                ied:f64[200,7,1] = slice[
                  limit_indices=(200, 7, 2)
                  start_indices=(0, 0, 1)
                  strides=None
                ] idz
                iee:f64[200,7] = squeeze[dimensions=(2,)] ied
                ief:f64[200,7] = sub iee him
                ieg:f64[200,7] = integer_pow[y=2] ief
                ieh:f64[200,7] = integer_pow[y=2] ieb
                iei:f64[200,7] = add ieg ieh
                iej:f64[200,7] = sub iei hin
                iek:f64[200,7] = sqrt iej
                iel:f64[200,7] = mul ief iek
                iem:f64[200,7] = add iec iel
                ien:f64[200,7] = mul ief hio
                ieo:f64[200,7] = mul ieb iek
                iep:f64[200,7] = sub ien ieo
                ieq:f64[200,7] = atan2 iem iep
                ier:f64[200,7,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(200, 7, 1)
                ] ieq
                ies:f64[200,7,1] = slice[
                  limit_indices=(200, 7, 1)
                  start_indices=(0, 0, 0)
                  strides=None
                ] idz
                iet:f64[200,7] = squeeze[dimensions=(2,)] ies
                ieu:f64[200,7] = sub iet hip
                iev:f64[200,7] = integer_pow[y=2] ieu
                iew:f64[200,7] = integer_pow[y=2] ief
                iex:f64[200,7] = add iev iew
                iey:f64[200,7] = integer_pow[y=2] ieb
                iez:f64[200,7] = add iex iey
                ifa:f64[200,7] = sqrt iez
                ifb:f64[200,7] = integer_pow[y=2] ifa
                ifc:f64[200,7] = sub ifb 0.006889000000000001
                ifd:f64[200,7] = sqrt ifc
                ife:f64[200,7] = integer_pow[y=2] ifd
                iff:f64[200,7] = sub 0.125 ife
                ifg:f64[200,7] = div iff hiq
                ifh:f64[200,7] ifi:f64[200,7] ifj:f64[200,7] = pjit[
                  name=clip
                  jaxpr=clip
                ] ifg hir his hit hiu hiv hiw hix hiy hiz hja
                ifk:f64[200,7] = acos ifh
                ifl:f64[200,7] = sub 3.141592653589793 ifk
                ifm:f64[200,7] = neg ifl
                ifn:f64[200,7] = sin ifm
                ifo:f64[200,7] = mul -0.25 ifn
                ifp:f64[200,7] = sin ieq
                ifq:f64[200,7] = mul ief ifp
                ifr:f64[200,7] = cos ieq
                ifs:f64[200,7] = mul ieb ifr
                ift:f64[200,7] = sub ifq ifs
                ifu:f64[200,7] = mul ifo ift
                ifv:f64[200,7] = cos ifm
                ifw:f64[200,7] = mul -0.25 ifv
                ifx:f64[200,7] = add -0.25 ifw
                ify:f64[200,7] = mul ifx ieu
                ifz:f64[200,7] = add ifu ify
                iga:f64[200,7] = mul ifo ieu
                igb:f64[200,7] = mul ifx ift
                igc:f64[200,7] = sub iga igb
                igd:f64[200,7] = atan2 ifz igc
                ige:f64[200,7,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(200, 7, 1)
                ] igd
                igf:f64[200,7,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(200, 7, 1)
                ] ifm
                igg:f64[200,7,3] = concatenate[dimension=2] ier ige igf
                igh:f64[200,7,12] = concatenate[dimension=2] hzi ibq idy igg
                igi:f64[200,7,12] igj:f64[200,7,12] igk:f64[200,7,12] = pjit[
                  name=clip
                  jaxpr=clip1
                ] igh hjb hjc hjd hje hjf hjg hjh hji hjj hjk
                igl:f64[200,7,12] igm:f64[200,7,12] ign:bool[200,7,12] igo:f64[200,7,12]
                  igp:f64[200,7,12] igq:f64[200,7,12] igr:f64[200,7,12] igs:bool[200,7,12]
                  igt:bool[200,7,12] = cond[
                  branches=(
                    { lambda ; igu:f64[200,7,12] igv:f64[200,7,12] igw:bool[200,7,12]
                        igx:f64[200,7,12] igy:f64[200,7,12] igz:f64[200,7,12] iha:f64[200,7,12]
                        ihb:bool[200,7,12] ihc:bool[200,7,12] ihd_:f64[1,1,12] ihe_:f64[1,1,12]
                        ihf_:f64[1,1,12] ihg_:f64[1,1,12] ihh_:f64[1,1,12] ihi_:f64[1,1,12]
                        ihj_:f64[1,1,12] ihk_:f64[1,1,12] ihl_:f64[1,1,12] ihm_:f64[1,1,12]
                        ihn_:f64[1,1,12] iho:f64[200,7,36] ihp:f64[200,7,12]. let
                      in (igu, igv, igw, igx, igy, igz, iha, ihb, ihc) }
                    { lambda ; ihq_:f64[200,7,12] ihr:f64[200,7,12] ihs_:bool[200,7,12]
                        iht:f64[200,7,12] ihu_:f64[200,7,12] ihv_:f64[200,7,12] ihw_:f64[200,7,12]
                        ihx_:bool[200,7,12] ihy_:bool[200,7,12] ihz:f64[1,1,12] iia:f64[1,1,12]
                        iib:f64[1,1,12] iic:f64[1,1,12] iid:f64[1,1,12] iie:f64[1,1,12]
                        iif:f64[1,1,12] iig:f64[1,1,12] iih:f64[1,1,12] iii:f64[1,1,12]
                        iij:f64[1,1,12] iik:f64[200,7,36] iil:f64[200,7,12]. let
                        iim:f64[200,7,12] = slice[
                          limit_indices=(200, 7, 16)
                          start_indices=(0, 0, 4)
                          strides=None
                        ] iik
                        iin:f64[200,7,12] = sub iil iim
                        iio:f64[200,7,12] = mul ihz iin
                        iip:f64[200,7,12] = slice[
                          limit_indices=(200, 7, 34)
                          start_indices=(0, 0, 22)
                          strides=None
                        ] iik
                        iiq:f64[200,7,12] = sub iib iip
                        iir:f64[200,7,12] = mul iia iiq
                        iis:f64[200,7,12] = add iio iir
                        iit:bool[200,7,12] = lt iis iic
                        iiu:f64[200,7,12] = sub iif iip
                        iiv:f64[200,7,12] = mul iie iiu
                        iiw:f64[200,7,12] = sub iid iiv
                        iix:f64[200,7,12] = sub iil iim
                        iiy:bool[200,7,12] = ne iix 0.0
                        iiz:f64[200,7,12] = sub iil iim
                        ija:f64[200,7,12] = pjit[
                          name=_where
                          jaxpr={ lambda ; ijb:bool[200,7,12] ijc:f64[200,7,12] ijd:f64[200,7,12]. let
                              ije:f64[200,7,12] = select_n ijb ijd ijc
                            in (ije,) }
                        ] iiy iiz ihr
                        ijf:f64[200,7,12] = div iiw ija
                        ijg:bool[200,7,12] = gt iis iig
                        ijh:f64[200,7,12] = sub iij iip
                        iji:f64[200,7,12] = mul iii ijh
                        ijj:f64[200,7,12] = sub iih iji
                        ijk:f64[200,7,12] = div ijj ija
                        ijl:f64[200,7,12] = pjit[
                          name=_where
                          jaxpr={ lambda ; ijm:bool[200,7,12] ijn:f64[200,7,12] ijo:f64[200,7,12]. let
                              ijp:f64[200,7,12] = select_n ijm ijo ijn
                            in (ijp,) }
                        ] ijg ijk iht
                        ijq:f64[200,7,12] = pjit[
                          name=_where
                          jaxpr={ lambda ; ijr:bool[200,7,12] ijs:f64[200,7,12] ijt:f64[200,7,12]. let
                              iju:f64[200,7,12] = select_n ijr ijt ijs
                            in (iju,) }
                        ] iit ijf ijl
                        ijv:f64[200,7,12] = integer_pow[y=-2] ija
                        ijw:f64[200,7,12] = integer_pow[y=-2] ija
                      in (ijq, ija, iiy, iiw, ijv, ijj, ijw, ijg, iit) }
                  )
                  linear=(False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False)
                ] 1 hcw hcx hcy hcz hda hdb hdc hdd hde hdf hdg hdh hdi hdj hdk hdl
                  hdm hdn hdo hdp hpe igi
                ijx:f64[200,7,12] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] igl
                ijy:f64[200,7,12] = slice[
                  limit_indices=(200, 7, 16)
                  start_indices=(0, 0, 4)
                  strides=None
                ] hpe
                ijz:f64[200,7,12] = sub igi ijy
                ika:f64[200,7,12] = mul ijx ijz
                ikb:f64[200,7,12] = slice[
                  limit_indices=(200, 7, 34)
                  start_indices=(0, 0, 22)
                  strides=None
                ] hpe
                ikc:f64[200,7,12] = sub hjm ikb
                ikd:f64[200,7,12] = mul hjl ikc
                ike:f64[200,7,12] = add ika ikd
                ikf:f64[200,7,12] ikg:f64[200,7,12] ikh:f64[200,7,12] = pjit[
                  name=clip
                  jaxpr=clip1
                ] ike hjn hjo hjp hjq hjr hjs hjt hju hjv hjw
                iki:f64[200,7,12] = mul hcv ikf
                ikj:f64[200,7,12] = gather[
                  dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
                  fill_value=None
                  indices_are_sorted=False
                  mode=GatherScatterMode.PROMISE_IN_BOUNDS
                  slice_sizes=(200, 7, 1)
                  unique_indices=False
                ] hkr hjy
                ikk:f64[200,7,12] = mul ikj hjz
                ikl:f64[200,7,12] = gather[
                  dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
                  fill_value=None
                  indices_are_sorted=False
                  mode=GatherScatterMode.PROMISE_IN_BOUNDS
                  slice_sizes=(200, 7, 1)
                  unique_indices=False
                ] hks hka
                ikm:f64[200,7,12] = mul ikl hkb
                ikn:f64[200,7,12] = add ikk ikm
                iko:f64[200,7,12] = mul hjx ikn
                ikp:f64[200,7,12] = add iki iko
                ikq:f64[200,7,12] ikr:f64[200,7,12] iks:f64[200,7,12] = pjit[
                  name=clip
                  jaxpr=clip1
                ] ikp hkc hkd hke hkf hkg hkh hki hkj hkk hkl
                ikt:f64[200,7,12] = mul ikq hkm
                iku:f64[200,7,18] = scatter-add[
                  dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
                  indices_are_sorted=False
                  mode=GatherScatterMode.FILL_OR_DROP
                  unique_indices=False
                  update_consts=()
                  update_jaxpr=jaxpr
                ] hct hcu ikt
                ikv:f64[200,7,18] = add hkp iku
                ikw:f64[200,7,18] = add ikv hku
                ikx:f64[200,7,18] = dot_general[
                  dimension_numbers=(([3], [2]), ([0, 1], [0, 1]))
                  preferred_element_type=float64
                ] hkz ikw
                iky:f64[200,7,18] = mul ikx 0.0025
                ikz:f64[200,7,18] = add hks iky
                ila:f64[200,7,6] = slice[
                  limit_indices=(200, 7, 6)
                  start_indices=(0, 0, 0)
                  strides=None
                ] ikz
                ilb:f64[200,7,1,6] = reshape[
                  dimensions=None
                  new_sizes=(200, 7, 1, 6)
                ] ila
                ilc:f64[200,7,1,3] = slice[
                  limit_indices=(200, 7, 1, 3)
                  start_indices=(0, 0, 0, 0)
                  strides=None
                ] ilb
                ild:f64[200,7,1,3] = mul ilc 0.0025
                ile:f64[200,7,1,3] = add hkx ild
                ilf:f64[200,7,1,4] = slice[
                  limit_indices=(200, 7, 1, 7)
                  start_indices=(0, 0, 0, 3)
                  strides=None
                ] hkw
                ilg:f64[200,7,1,1] = slice[
                  limit_indices=(200, 7, 1, 1)
                  start_indices=(0, 0, 0, 0)
                  strides=None
                ] ilf
                ilh:f64[200,7,1] = squeeze[dimensions=(3,)] ilg
                ili:f64[200,7,1,3] = slice[
                  limit_indices=(200, 7, 1, 6)
                  start_indices=(0, 0, 0, 3)
                  strides=None
                ] ilb
                ilj:f64[200,7,1] ilk:f64[200,7,1] = pjit[
                  name=norm
                  jaxpr={ lambda ; ill:f64[200,7,1,3]. let
                      ilm:f64[200,7,1,3] = mul ill ill
                      iln:f64[200,7,1] = reduce_sum[axes=(3,)] ilm
                      ilo:f64[200,7,1] = sqrt iln
                      ilp:f64[200,7,1] = div 0.5 ilo
                    in (ilo, ilp) }
                ] ili
                ilq:f64[200,7,1] = add ilj 1e-08
                ilr:f64[200,7,1] = mul 0.0025 ilq
                ils:f64[200,7,1] = div ilr 2.0
                ilt:f64[200,7,1] = cos ils
                ilu:f64[200,7,1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1, 2)
                  shape=(200, 7, 1, 1)
                ] ilt
                ilv:f64[200,7,1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1, 2)
                  shape=(200, 7, 1, 1)
                ] ilq
                ilw:f64[200,7,1,3] = div ili ilv
                ilx:f64[200,7,1,1] = slice[
                  limit_indices=(200, 7, 1, 1)
                  start_indices=(0, 0, 0, 0)
                  strides=None
                ] ilw
                ily:f64[200,7,1] = squeeze[dimensions=(3,)] ilx
                ilz:f64[200,7,1] = div ilr 2.0
                ima:f64[200,7,1] = sin ilz
                imb:f64[200,7,1] = mul ily ima
                imc:f64[200,7,1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1, 2)
                  shape=(200, 7, 1, 1)
                ] imb
                imd:f64[200,7,1,1] = slice[
                  limit_indices=(200, 7, 1, 2)
                  start_indices=(0, 0, 0, 1)
                  strides=None
                ] ilw
                ime:f64[200,7,1] = squeeze[dimensions=(3,)] imd
                imf:f64[200,7,1] = div ilr 2.0
                img:f64[200,7,1] = sin imf
                imh:f64[200,7,1] = mul ime img
                imi:f64[200,7,1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1, 2)
                  shape=(200, 7, 1, 1)
                ] imh
                imj:f64[200,7,1,1] = slice[
                  limit_indices=(200, 7, 1, 3)
                  start_indices=(0, 0, 0, 2)
                  strides=None
                ] ilw
                imk:f64[200,7,1] = squeeze[dimensions=(3,)] imj
                iml:f64[200,7,1] = div ilr 2.0
                imm:f64[200,7,1] = sin iml
                imn:f64[200,7,1] = mul imk imm
                imo:f64[200,7,1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1, 2)
                  shape=(200, 7, 1, 1)
                ] imn
                imp:f64[200,7,1,4] = concatenate[dimension=3] ilu imc imi imo
                imq:f64[200,7,1,1] = slice[
                  limit_indices=(200, 7, 1, 1)
                  start_indices=(0, 0, 0, 0)
                  strides=None
                ] imp
                imr:f64[200,7,1] = squeeze[dimensions=(3,)] imq
                ims:f64[200,7,1] = mul ilh imr
                imt:f64[200,7,1,1] = slice[
                  limit_indices=(200, 7, 1, 2)
                  start_indices=(0, 0, 0, 1)
                  strides=None
                ] ilf
                imu:f64[200,7,1] = squeeze[dimensions=(3,)] imt
                imv:f64[200,7,1,1] = slice[
                  limit_indices=(200, 7, 1, 2)
                  start_indices=(0, 0, 0, 1)
                  strides=None
                ] imp
                imw:f64[200,7,1] = squeeze[dimensions=(3,)] imv
                imx:f64[200,7,1] = mul imu imw
                imy:f64[200,7,1] = sub ims imx
                imz:f64[200,7,1,1] = slice[
                  limit_indices=(200, 7, 1, 3)
                  start_indices=(0, 0, 0, 2)
                  strides=None
                ] ilf
                ina:f64[200,7,1] = squeeze[dimensions=(3,)] imz
                inb:f64[200,7,1,1] = slice[
                  limit_indices=(200, 7, 1, 3)
                  start_indices=(0, 0, 0, 2)
                  strides=None
                ] imp
                inc:f64[200,7,1] = squeeze[dimensions=(3,)] inb
                ind:f64[200,7,1] = mul ina inc
                ine:f64[200,7,1] = sub imy ind
                inf:f64[200,7,1,1] = slice[
                  limit_indices=(200, 7, 1, 4)
                  start_indices=(0, 0, 0, 3)
                  strides=None
                ] ilf
                ing:f64[200,7,1] = squeeze[dimensions=(3,)] inf
                inh:f64[200,7,1,1] = slice[
                  limit_indices=(200, 7, 1, 4)
                  start_indices=(0, 0, 0, 3)
                  strides=None
                ] imp
                ini:f64[200,7,1] = squeeze[dimensions=(3,)] inh
                inj:f64[200,7,1] = mul ing ini
                ink:f64[200,7,1] = sub ine inj
                inl:f64[200,7,1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1, 2)
                  shape=(200, 7, 1, 1)
                ] ink
                inm:f64[200,7,1,1] = slice[
                  limit_indices=(200, 7, 1, 1)
                  start_indices=(0, 0, 0, 0)
                  strides=None
                ] ilf
                inn:f64[200,7,1] = squeeze[dimensions=(3,)] inm
                ino:f64[200,7,1,1] = slice[
                  limit_indices=(200, 7, 1, 2)
                  start_indices=(0, 0, 0, 1)
                  strides=None
                ] imp
                inp:f64[200,7,1] = squeeze[dimensions=(3,)] ino
                inq:f64[200,7,1] = mul inn inp
                inr:f64[200,7,1,1] = slice[
                  limit_indices=(200, 7, 1, 2)
                  start_indices=(0, 0, 0, 1)
                  strides=None
                ] ilf
                ins:f64[200,7,1] = squeeze[dimensions=(3,)] inr
                int:f64[200,7,1,1] = slice[
                  limit_indices=(200, 7, 1, 1)
                  start_indices=(0, 0, 0, 0)
                  strides=None
                ] imp
                inu:f64[200,7,1] = squeeze[dimensions=(3,)] int
                inv:f64[200,7,1] = mul ins inu
                inw:f64[200,7,1] = add inq inv
                inx:f64[200,7,1,1] = slice[
                  limit_indices=(200, 7, 1, 3)
                  start_indices=(0, 0, 0, 2)
                  strides=None
                ] ilf
                iny:f64[200,7,1] = squeeze[dimensions=(3,)] inx
                inz:f64[200,7,1,1] = slice[
                  limit_indices=(200, 7, 1, 4)
                  start_indices=(0, 0, 0, 3)
                  strides=None
                ] imp
                ioa:f64[200,7,1] = squeeze[dimensions=(3,)] inz
                iob:f64[200,7,1] = mul iny ioa
                ioc:f64[200,7,1] = add inw iob
                iod:f64[200,7,1,1] = slice[
                  limit_indices=(200, 7, 1, 4)
                  start_indices=(0, 0, 0, 3)
                  strides=None
                ] ilf
                ioe:f64[200,7,1] = squeeze[dimensions=(3,)] iod
                iof:f64[200,7,1,1] = slice[
                  limit_indices=(200, 7, 1, 3)
                  start_indices=(0, 0, 0, 2)
                  strides=None
                ] imp
                iog:f64[200,7,1] = squeeze[dimensions=(3,)] iof
                ioh:f64[200,7,1] = mul ioe iog
                ioi:f64[200,7,1] = sub ioc ioh
                ioj:f64[200,7,1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1, 2)
                  shape=(200, 7, 1, 1)
                ] ioi
                iok:f64[200,7,1,1] = slice[
                  limit_indices=(200, 7, 1, 1)
                  start_indices=(0, 0, 0, 0)
                  strides=None
                ] ilf
                iol:f64[200,7,1] = squeeze[dimensions=(3,)] iok
                iom:f64[200,7,1,1] = slice[
                  limit_indices=(200, 7, 1, 3)
                  start_indices=(0, 0, 0, 2)
                  strides=None
                ] imp
                ion:f64[200,7,1] = squeeze[dimensions=(3,)] iom
                ioo:f64[200,7,1] = mul iol ion
                iop:f64[200,7,1,1] = slice[
                  limit_indices=(200, 7, 1, 2)
                  start_indices=(0, 0, 0, 1)
                  strides=None
                ] ilf
                ioq:f64[200,7,1] = squeeze[dimensions=(3,)] iop
                ior:f64[200,7,1,1] = slice[
                  limit_indices=(200, 7, 1, 4)
                  start_indices=(0, 0, 0, 3)
                  strides=None
                ] imp
                ios:f64[200,7,1] = squeeze[dimensions=(3,)] ior
                iot:f64[200,7,1] = mul ioq ios
                iou:f64[200,7,1] = sub ioo iot
                iov:f64[200,7,1,1] = slice[
                  limit_indices=(200, 7, 1, 3)
                  start_indices=(0, 0, 0, 2)
                  strides=None
                ] ilf
                iow:f64[200,7,1] = squeeze[dimensions=(3,)] iov
                iox:f64[200,7,1,1] = slice[
                  limit_indices=(200, 7, 1, 1)
                  start_indices=(0, 0, 0, 0)
                  strides=None
                ] imp
                ioy:f64[200,7,1] = squeeze[dimensions=(3,)] iox
                ioz:f64[200,7,1] = mul iow ioy
                ipa:f64[200,7,1] = add iou ioz
                ipb:f64[200,7,1,1] = slice[
                  limit_indices=(200, 7, 1, 4)
                  start_indices=(0, 0, 0, 3)
                  strides=None
                ] ilf
                ipc:f64[200,7,1] = squeeze[dimensions=(3,)] ipb
                ipd:f64[200,7,1,1] = slice[
                  limit_indices=(200, 7, 1, 2)
                  start_indices=(0, 0, 0, 1)
                  strides=None
                ] imp
                ipe:f64[200,7,1] = squeeze[dimensions=(3,)] ipd
                ipf:f64[200,7,1] = mul ipc ipe
                ipg:f64[200,7,1] = add ipa ipf
                iph:f64[200,7,1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1, 2)
                  shape=(200, 7, 1, 1)
                ] ipg
                ipi:f64[200,7,1,1] = slice[
                  limit_indices=(200, 7, 1, 1)
                  start_indices=(0, 0, 0, 0)
                  strides=None
                ] ilf
                ipj:f64[200,7,1] = squeeze[dimensions=(3,)] ipi
                ipk:f64[200,7,1,1] = slice[
                  limit_indices=(200, 7, 1, 4)
                  start_indices=(0, 0, 0, 3)
                  strides=None
                ] imp
                ipl:f64[200,7,1] = squeeze[dimensions=(3,)] ipk
                ipm:f64[200,7,1] = mul ipj ipl
                ipn:f64[200,7,1,1] = slice[
                  limit_indices=(200, 7, 1, 2)
                  start_indices=(0, 0, 0, 1)
                  strides=None
                ] ilf
                ipo:f64[200,7,1] = squeeze[dimensions=(3,)] ipn
                ipp:f64[200,7,1,1] = slice[
                  limit_indices=(200, 7, 1, 3)
                  start_indices=(0, 0, 0, 2)
                  strides=None
                ] imp
                ipq:f64[200,7,1] = squeeze[dimensions=(3,)] ipp
                ipr:f64[200,7,1] = mul ipo ipq
                ips:f64[200,7,1] = add ipm ipr
                ipt:f64[200,7,1,1] = slice[
                  limit_indices=(200, 7, 1, 3)
                  start_indices=(0, 0, 0, 2)
                  strides=None
                ] ilf
                ipu:f64[200,7,1] = squeeze[dimensions=(3,)] ipt
                ipv:f64[200,7,1,1] = slice[
                  limit_indices=(200, 7, 1, 2)
                  start_indices=(0, 0, 0, 1)
                  strides=None
                ] imp
                ipw:f64[200,7,1] = squeeze[dimensions=(3,)] ipv
                ipx:f64[200,7,1] = mul ipu ipw
                ipy:f64[200,7,1] = sub ips ipx
                ipz:f64[200,7,1,1] = slice[
                  limit_indices=(200, 7, 1, 4)
                  start_indices=(0, 0, 0, 3)
                  strides=None
                ] ilf
                iqa:f64[200,7,1] = squeeze[dimensions=(3,)] ipz
                iqb:f64[200,7,1,1] = slice[
                  limit_indices=(200, 7, 1, 1)
                  start_indices=(0, 0, 0, 0)
                  strides=None
                ] imp
                iqc:f64[200,7,1] = squeeze[dimensions=(3,)] iqb
                iqd:f64[200,7,1] = mul iqa iqc
                iqe:f64[200,7,1] = add ipy iqd
                iqf:f64[200,7,1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1, 2)
                  shape=(200, 7, 1, 1)
                ] iqe
                iqg:f64[200,7,1,4] = concatenate[dimension=3] inl ioj iph iqf
                iqh:f64[200,7,1] iqi:f64[200,7,1] = pjit[
                  name=norm
                  jaxpr={ lambda ; iqj:f64[200,7,1,4]. let
                      iqk:f64[200,7,1,4] = mul iqj iqj
                      iql:f64[200,7,1] = reduce_sum[axes=(3,)] iqk
                      iqm:f64[200,7,1] = sqrt iql
                      iqn:f64[200,7,1] = div 0.5 iqm
                    in (iqm, iqn) }
                ] iqg
                iqo:f64[200,7,1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1, 2)
                  shape=(200, 7, 1, 1)
                ] iqh
                iqp:f64[200,7,1,4] = div iqg iqo
                iqq:f64[200,7,1,7] = concatenate[dimension=3] ile iqp
                iqr:f64[200,7,7] = reshape[
                  dimensions=None
                  new_sizes=(200, 7, 7)
                ] iqq
                iqs:f64[200,7,12] = slice[
                  limit_indices=(200, 7, 19)
                  start_indices=(0, 0, 7)
                  strides=None
                ] hkr
                iqt:f64[200,7,12,1] = reshape[
                  dimensions=None
                  new_sizes=(200, 7, 12, 1)
                ] iqs
                iqu:f64[200,7,12] = slice[
                  limit_indices=(200, 7, 18)
                  start_indices=(0, 0, 6)
                  strides=None
                ] ikz
                iqv:f64[200,7,12,1] = reshape[
                  dimensions=None
                  new_sizes=(200, 7, 12, 1)
                ] iqu
                iqw:f64[200,7,12,1] = mul iqv 0.0025
                iqx:f64[200,7,12,1] = add iqt iqw
                iqy:f64[200,7,12] = reshape[
                  dimensions=None
                  new_sizes=(200, 7, 12)
                ] iqx
                iqz:f64[200,7,19] = concatenate[dimension=2] iqr iqy
                ira:f64[200,7] = integer_pow[y=2] hpg
                irb:f64[200,7] = integer_pow[y=2] hpi
                irc:f64[200,7] = add ira irb
                ird:f64[200,7] = div hpi irc
                ire:f64[200,7] = neg hpg
                irf:f64[200,7] = integer_pow[y=2] hpg
                irg:f64[200,7] = integer_pow[y=2] hpi
                irh:f64[200,7] = add irf irg
                iri:f64[200,7] = cos hpx
                irj:f64[200,7] = cos hqe
                irk:f64[200,7] = sin hqk
                irl:f64[200,7] = cos hqr
                irm:f64[200,7] = cos hqy
                irn:f64[200,7] = cos hru
                iro:f64[200,7] = cos hsb
                irp:f64[200,7] = sin hsh
                irq:f64[200,7] = cos hso
                irr:f64[200,7] = cos hsv
                irs:f64[200,7] = cos htr
                irt:f64[200,7] = cos hty
                iru:f64[200,7] = sin hue
                irv:f64[200,7] = cos hul
                irw:f64[200,7] = cos hus
                irx:f64[200,7] = cos hvo
                iry:f64[200,7] = cos hvv
                irz:f64[200,7] = sin hwb
                isa:f64[200,7] = cos hwi
                isb:f64[200,7] = cos hwp
                isc:f64[200,7] = integer_pow[y=1] hxh
                isd:f64[200,7] = mul 2.0 isc
                ise:f64[200,7] = integer_pow[y=1] hxd
                isf:f64[200,7] = mul 2.0 ise
                isg:f64[200,7] = div 0.5 hxm
                ish:f64[200,7] = integer_pow[y=2] hxo
                isi:f64[200,7] = integer_pow[y=2] hxr
                isj:f64[200,7] = add ish isi
                isk:f64[200,7] = div hxr isj
                isl:f64[200,7] = neg hxo
                ism:f64[200,7] = integer_pow[y=2] hxo
                isn:f64[200,7] = integer_pow[y=2] hxr
                iso:f64[200,7] = add ism isn
                isp:f64[200,7] = integer_pow[y=1] hxw
                isq:f64[200,7] = mul 2.0 isp
                isr:f64[200,7] = integer_pow[y=1] hxh
                iss:f64[200,7] = mul 2.0 isr
                ist:f64[200,7] = integer_pow[y=1] hxd
                isu:f64[200,7] = mul 2.0 ist
                isv:f64[200,7] = div 0.5 hyc
                isw:f64[200,7] = integer_pow[y=1] hyc
                isx:f64[200,7] = mul 2.0 isw
                isy:f64[200,7] = div 0.5 hyf
                isz:f64[200,7] = integer_pow[y=1] hyf
                ita:f64[200,7] = mul 2.0 isz
                itb:f64[200,7] = integer_pow[y=2] hyj
                itc:f64[200,7] = sub 1.0 itb
                itd:f64[200,7] = rsqrt itc
                ite:f64[200,7] = neg itd
                itf:f64[200,7] = cos hyo
                itg:f64[200,7] = cos hxs
                ith:f64[200,7] = sin hxs
                iti:f64[200,7] = sin hyo
                itj:f64[200,7] = integer_pow[y=2] hzb
                itk:f64[200,7] = integer_pow[y=2] hze
                itl:f64[200,7] = add itj itk
                itm:f64[200,7] = div hze itl
                itn:f64[200,7] = neg hzb
                ito:f64[200,7] = integer_pow[y=2] hzb
                itp:f64[200,7] = integer_pow[y=2] hze
                itq:f64[200,7] = add ito itp
                itr:f64[200,7] = integer_pow[y=1] hzp
                its:f64[200,7] = mul 2.0 itr
                itt:f64[200,7] = integer_pow[y=1] hzl
                itu:f64[200,7] = mul 2.0 itt
                itv:f64[200,7] = div 0.5 hzu
                itw:f64[200,7] = integer_pow[y=2] hzw
                itx:f64[200,7] = integer_pow[y=2] hzz
                ity:f64[200,7] = add itw itx
                itz:f64[200,7] = div hzz ity
                iua:f64[200,7] = neg hzw
                iub:f64[200,7] = integer_pow[y=2] hzw
                iuc:f64[200,7] = integer_pow[y=2] hzz
                iud:f64[200,7] = add iub iuc
                iue:f64[200,7] = integer_pow[y=1] iae
                iuf:f64[200,7] = mul 2.0 iue
                iug:f64[200,7] = integer_pow[y=1] hzp
                iuh:f64[200,7] = mul 2.0 iug
                iui:f64[200,7] = integer_pow[y=1] hzl
                iuj:f64[200,7] = mul 2.0 iui
                iuk:f64[200,7] = div 0.5 iak
                iul:f64[200,7] = integer_pow[y=1] iak
                ium:f64[200,7] = mul 2.0 iul
                iun:f64[200,7] = div 0.5 ian
                iuo:f64[200,7] = integer_pow[y=1] ian
                iup:f64[200,7] = mul 2.0 iuo
                iuq:f64[200,7] = integer_pow[y=2] iar
                iur:f64[200,7] = sub 1.0 iuq
                ius:f64[200,7] = rsqrt iur
                iut:f64[200,7] = neg ius
                iuu:f64[200,7] = cos iaw
                iuv:f64[200,7] = cos iaa
                iuw:f64[200,7] = sin iaa
                iux:f64[200,7] = sin iaw
                iuy:f64[200,7] = integer_pow[y=2] ibj
                iuz:f64[200,7] = integer_pow[y=2] ibm
                iva:f64[200,7] = add iuy iuz
                ivb:f64[200,7] = div ibm iva
                ivc:f64[200,7] = neg ibj
                ivd:f64[200,7] = integer_pow[y=2] ibj
                ive:f64[200,7] = integer_pow[y=2] ibm
                ivf:f64[200,7] = add ivd ive
                ivg:f64[200,7] = integer_pow[y=1] ibx
                ivh:f64[200,7] = mul 2.0 ivg
                ivi:f64[200,7] = integer_pow[y=1] ibt
                ivj:f64[200,7] = mul 2.0 ivi
                ivk:f64[200,7] = div 0.5 icc
                ivl:f64[200,7] = integer_pow[y=2] ice
                ivm:f64[200,7] = integer_pow[y=2] ich
                ivn:f64[200,7] = add ivl ivm
                ivo:f64[200,7] = div ich ivn
                ivp:f64[200,7] = neg ice
                ivq:f64[200,7] = integer_pow[y=2] ice
                ivr:f64[200,7] = integer_pow[y=2] ich
                ivs:f64[200,7] = add ivq ivr
                ivt:f64[200,7] = integer_pow[y=1] icm
                ivu:f64[200,7] = mul 2.0 ivt
                ivv:f64[200,7] = integer_pow[y=1] ibx
                ivw:f64[200,7] = mul 2.0 ivv
                ivx:f64[200,7] = integer_pow[y=1] ibt
                ivy:f64[200,7] = mul 2.0 ivx
                ivz:f64[200,7] = div 0.5 ics
                iwa:f64[200,7] = integer_pow[y=1] ics
                iwb:f64[200,7] = mul 2.0 iwa
                iwc:f64[200,7] = div 0.5 icv
                iwd:f64[200,7] = integer_pow[y=1] icv
                iwe:f64[200,7] = mul 2.0 iwd
                iwf:f64[200,7] = integer_pow[y=2] icz
                iwg:f64[200,7] = sub 1.0 iwf
                iwh:f64[200,7] = rsqrt iwg
                iwi:f64[200,7] = neg iwh
                iwj:f64[200,7] = cos ide
                iwk:f64[200,7] = cos ici
                iwl:f64[200,7] = sin ici
                iwm:f64[200,7] = sin ide
                iwn:f64[200,7] = integer_pow[y=2] idr
                iwo:f64[200,7] = integer_pow[y=2] idu
                iwp:f64[200,7] = add iwn iwo
                iwq:f64[200,7] = div idu iwp
                iwr:f64[200,7] = neg idr
                iws:f64[200,7] = integer_pow[y=2] idr
                iwt:f64[200,7] = integer_pow[y=2] idu
                iwu:f64[200,7] = add iws iwt
                iwv:f64[200,7] = integer_pow[y=1] ief
                iww:f64[200,7] = mul 2.0 iwv
                iwx:f64[200,7] = integer_pow[y=1] ieb
                iwy:f64[200,7] = mul 2.0 iwx
                iwz:f64[200,7] = div 0.5 iek
                ixa:f64[200,7] = integer_pow[y=2] iem
                ixb:f64[200,7] = integer_pow[y=2] iep
                ixc:f64[200,7] = add ixa ixb
                ixd:f64[200,7] = div iep ixc
                ixe:f64[200,7] = neg iem
                ixf:f64[200,7] = integer_pow[y=2] iem
                ixg:f64[200,7] = integer_pow[y=2] iep
                ixh:f64[200,7] = add ixf ixg
                ixi:f64[200,7] = integer_pow[y=1] ieu
                ixj:f64[200,7] = mul 2.0 ixi
                ixk:f64[200,7] = integer_pow[y=1] ief
                ixl:f64[200,7] = mul 2.0 ixk
                ixm:f64[200,7] = integer_pow[y=1] ieb
                ixn:f64[200,7] = mul 2.0 ixm
                ixo:f64[200,7] = div 0.5 ifa
                ixp:f64[200,7] = integer_pow[y=1] ifa
                ixq:f64[200,7] = mul 2.0 ixp
                ixr:f64[200,7] = div 0.5 ifd
                ixs:f64[200,7] = integer_pow[y=1] ifd
                ixt:f64[200,7] = mul 2.0 ixs
                ixu:f64[200,7] = integer_pow[y=2] ifh
                ixv:f64[200,7] = sub 1.0 ixu
                ixw:f64[200,7] = rsqrt ixv
                ixx:f64[200,7] = neg ixw
                ixy:f64[200,7] = cos ifm
                ixz:f64[200,7] = cos ieq
                iya:f64[200,7] = sin ieq
                iyb:f64[200,7] = sin ifm
                iyc:f64[200,7] = integer_pow[y=2] ifz
                iyd:f64[200,7] = integer_pow[y=2] igc
                iye:f64[200,7] = add iyc iyd
                iyf:f64[200,7] = div igc iye
                iyg:f64[200,7] = neg ifz
                iyh:f64[200,7] = integer_pow[y=2] ifz
                iyi:f64[200,7] = integer_pow[y=2] igc
                iyj:f64[200,7] = add iyh iyi
                iyk:f64[200,7,1] = sin ils
                iyl:f64[200,7,1,1] = integer_pow[y=-2] ilv
                iym:f64[200,7,1] = cos ilz
                iyn:f64[200,7,1] = cos imf
                iyo:f64[200,7,1] = cos iml
                iyp:f64[200,7,1,1] = integer_pow[y=-2] iqo
              in (iqz, ikz, hkt, hky, hla, hlb, ikw, hkz, igm, ign, igo, igp, igq,
                igr, igs, igt, hpr, hpq, hmx, hmw, hmz, hnd, hnh, hnm, hnl, hnn,
                hno, hnp, hnq, hnr, hns, hnw, hnv, hny, hoc, hog, hol, hok, hom,
                hon, hoo, hop, hoq, hor, ird, ire, irh, hpo, iri, irj, irk, irl,
                irm, hro, hrn, hrl, irn, iro, irp, irq, irr, htl, htk, hti, irs,
                irt, iru, irv, irw, hvi, hvh, hvf, irx, iry, irz, isa, isb, hxm,
                hxh, isd, isf, isg, isk, hxd, isl, iso, isq, iss, isu, isv, isx,
                isy, ita, hyk, hyl, ite, itf, hyv, hyq, hyr, itg, hyt, ith, iti,
                hxw, hyz, itm, itn, itq, hzu, hzp, its, itu, itv, itz, hzl, iua,
                iud, iuf, iuh, iuj, iuk, ium, iun, iup, ias, iat, iut, iuu, ibd,
                iay, iaz, iuv, ibb, iuw, iux, iae, ibh, ivb, ivc, ivf, icc, ibx,
                ivh, ivj, ivk, ivo, ibt, ivp, ivs, ivu, ivw, ivy, ivz, iwb, iwc,
                iwe, ida, idb, iwi, iwj, idl, idg, idh, iwk, idj, iwl, iwm, icm,
                idp, iwq, iwr, iwu, iek, ief, iww, iwy, iwz, ixd, ieb, ixe, ixh,
                ixj, ixl, ixn, ixo, ixq, ixr, ixt, ifi, ifj, ixx, ixy, ift, ifo,
                ifp, ixz, ifr, iya, iyb, ieu, ifx, iyf, iyg, iyj, igj, igk, ijz,
                ijx, ikg, ikh, ikr, iks, imr, ilh, ili, ilk, iyk, ilv, iyl, ima,
                ily, iym, img, ime, iyn, imm, imk, iyo, imw, imu, inc, ina, ini,
                ing, inp, inn, inu, ins, ioa, iny, iog, ioe, ion, iol, ios, ioq,
                ioy, iow, ipe, ipc, ipl, ipj, ipq, ipo, ipw, ipu, iqc, iqa, iqo,
                iqg, iqi, iyp) }
            length=4
            linear=(False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False)
            num_carry=3
            num_consts=214
            reverse=False
            unroll=1
          ] czt czu czv czw czx czy czz daa dab dac dad dae daf dag dah dai daj dak
            dal dam dan dao dap daq dar das dat dau dav daw dax day daz dba dbb dbc
            dbd dbe dbf dbg dbh dbi dbj dbk dbl dbm dbn dbo dbp dbq dbr dbs dbt dbu
            dbv dbw dbx dby dbz dca dcb dcc dcd dce dcf dcg dch dci dcj dck dcl dcm
            dcn dco dcp dcq dcr dcs dct dcu dcv dcw dcx dcy dcz dda ddb ddc ddd dde
            ddf ddg ddh ddi ddj ddk ddl ddm ddn ddo ddp ddq ddr dds ddt ddu ddv ddw
            ddx ddy ddz dea deb dec ded dee def deg deh dei dej dek del dem den deo
            dep deq der des det deu dev dew dex dey dez dfa dfb dfc dfd dfe dff dfg
            dfh dfi dfj dfk dfl dfm dfn dfo dfp dfq dfr dfs dft dfu dfv dfw dfx dfy
            dfz dga dgb dgc dgd dge dgf dgg dgh dgi dgj dgk dgl dgm dgn dgo dgp dgq
            dgr dgs dgt dgu dgv dgw dgx dgy dgz dha dhb dhc dhd dhe dhf dhg dhh dhi
            dhj dhk dhl dhm dhn dho dhp dhq dhr dhs dht dhu edg edh gfh gfo edr efz
            gqq edi
          iyq:f64[200,7,12] = slice[
            limit_indices=(200, 7, 19)
            start_indices=(0, 0, 7)
            strides=None
          ] gsj
          iyr:f64[200,7,4] = slice[
            limit_indices=(200, 7, 7)
            start_indices=(0, 0, 3)
            strides=None
          ] gsj
          iys:f64[200,7,4] = mul iyr ecj
          iyt:f64[200,7,3] = slice[
            limit_indices=(200, 7, 4)
            start_indices=(0, 0, 1)
            strides=None
          ] iys
          iyu:f64[200,7,3] = slice[
            limit_indices=(200, 7, 3)
            start_indices=(0, 0, 0)
            strides=None
          ] gsk
          iyv:f64[200,7] = dot_general[
            dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
            preferred_element_type=float64
          ] iyt iyu
          iyw:f64[200,7,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(200, 7, 1)
          ] iyv
          iyx:f64[200,7,3] = mul iyw iyt
          iyy:f64[200,7,3] = mul 2.0 iyx
          iyz:f64[200,7,1] = slice[
            limit_indices=(200, 7, 1)
            start_indices=(0, 0, 0)
            strides=None
          ] iys
          iza:f64[200,7] = squeeze[dimensions=(2,)] iyz
          izb:f64[200,7] = mul iza iza
          izc:f64[200,7] = dot_general[
            dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
            preferred_element_type=float64
          ] iyt iyt
          izd:f64[200,7] = sub izb izc
          ize:f64[200,7,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(200, 7, 1)
          ] izd
          izf:f64[200,7,3] = mul ize iyu
          izg:f64[200,7,3] = add iyy izf
          izh:f64[200,7] = mul 2.0 iza
          izi:f64[200,7,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(200, 7, 1)
          ] izh
          izj:f64[200,7,3] izk:f64[200,7] izl:f64[200,7] izm:f64[200,7] izn:f64[200,7]
            izo:f64[200,7] izp:f64[200,7] = pjit[name=cross jaxpr=cross] iyt iyu
            eck ecl ecm ecn eco ecp
          izq:f64[200,7,3] = mul izi izj
          izr:f64[200,7,3] = add izg izq
          izs:f64[200,7,3] = slice[
            limit_indices=(200, 7, 4)
            start_indices=(0, 0, 1)
            strides=None
          ] iyr
          izt:f64[200,7,3] = slice[
            limit_indices=(200, 7, 6)
            start_indices=(0, 0, 3)
            strides=None
          ] gsk
          izu:f64[200,7] = dot_general[
            dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
            preferred_element_type=float64
          ] izs izt
          izv:f64[200,7,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(200, 7, 1)
          ] izu
          izw:f64[200,7,3] = mul izv izs
          izx:f64[200,7,3] = mul 2.0 izw
          izy:f64[200,7,1] = slice[
            limit_indices=(200, 7, 1)
            start_indices=(0, 0, 0)
            strides=None
          ] iyr
          izz:f64[200,7] = squeeze[dimensions=(2,)] izy
          jaa:f64[200,7] = mul izz izz
          jab:f64[200,7] = dot_general[
            dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
            preferred_element_type=float64
          ] izs izs
          jac:f64[200,7] = sub jaa jab
          jad:f64[200,7,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(200, 7, 1)
          ] jac
          jae:f64[200,7,3] = mul jad izt
          jaf:f64[200,7,3] = add izx jae
          jag:f64[200,7] = mul 2.0 izz
          jah:f64[200,7,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(200, 7, 1)
          ] jag
          jai:f64[200,7,3] jaj:f64[200,7] jak:f64[200,7] jal:f64[200,7] jam:f64[200,7]
            jan:f64[200,7] jao:f64[200,7] = pjit[name=cross jaxpr=cross] izs izt
            ecq ecr ecs ect ecu ecv
          jap:f64[200,7,3] = mul jah jai
          jaq:f64[200,7,3] = add jaf jap
          jar:f64[200,7,12] = slice[
            limit_indices=(200, 7, 18)
            start_indices=(0, 0, 6)
            strides=None
          ] gsk
          jas:f64[200,7,34] = concatenate[dimension=2] iyr iyq izr jaq jar
          jat:f64[200,7,36] = add edj 1.0
          jau:f64[200,7,36] = mul jat ecx
          jav:f64[200,7,36] = div jau 2.0
          jaw:f64[200,7,36] = add jav ecy
          jax:f64[200,7,1] = slice[
            limit_indices=(200, 7, 36)
            start_indices=(0, 0, 35)
            strides=None
          ] jaw
          jay:f64[200,7] = squeeze[dimensions=(2,)] jax
          jaz:f64[200,7,1] = slice[
            limit_indices=(200, 7, 35)
            start_indices=(0, 0, 34)
            strides=None
          ] jaw
          jba:f64[200,7] = squeeze[dimensions=(2,)] jaz
          jbb:f64[200,7] = atan2 jay jba
          jbc:f64[200,7] = add jbb 0.12566370614359174
          jbd:f64[200,7] = cos jbc
          jbe:f64[200,7,36] = scatter[
            dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
            indices_are_sorted=True
            mode=GatherScatterMode.FILL_OR_DROP
            unique_indices=True
            update_consts=()
            update_jaxpr=None
          ] jaw ecw jbd
          jbf:f64[200,7] = sin jbc
          jbg:f64[200,7,36] = scatter[
            dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1), inserted_window_dims=(2,), scatter_dims_to_operand_dims=(2,))
            indices_are_sorted=True
            mode=GatherScatterMode.FILL_OR_DROP
            unique_indices=True
            update_consts=()
            update_jaxpr=None
          ] jbe ecz jbf
          jbh:f64[200,7,36] = sub jbg eda
          jbi:f64[200,7,36] = mul 2.0 jbh
          jbj:f64[200,7,36] = div jbi edb
          jbk:f64[200,7,36] = sub jbj 1.0
          jbl:f64[200,7,36] = add jbk 1.0
          jbm:f64[200,7,36] = mul jbl edc
          jbn:f64[200,7,36] = div jbm 2.0
          jbo:f64[200,7,36] = add jbn edd
          jbp:f64[200,7,1] = slice[
            limit_indices=(200, 7, 35)
            start_indices=(0, 0, 34)
            strides=None
          ] jbo
          jbq:f64[200,7] = squeeze[dimensions=(2,)] jbp
          jbr:f64[200,7,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(200, 7, 1)
          ] jbq
          jbs:f64[200,7,1] = slice[
            limit_indices=(200, 7, 36)
            start_indices=(0, 0, 35)
            strides=None
          ] jbo
          jbt:f64[200,7] = squeeze[dimensions=(2,)] jbs
          jbu:f64[200,7,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(200, 7, 1)
          ] jbt
          jbv:f64[200,7,2] = concatenate[dimension=2] jbr jbu
          jbw:f64[200,7,36] = concatenate[dimension=2] jas jbv
          jbx:f64[200,7,36] = sub jbw ede
          jby:f64[200,7,36] = mul 2.0 jbx
          jbz:f64[200,7,36] = div jby edf
          jca:f64[200,7,36] = sub jbz 1.0
          jcb:f64[200,7,12] = sin egg
          jcc:f64[200,7,12] = cos egj
          jcd:f64[200,7,12] = cos egn
          jce:f64[200,7,12] = cos egr
          jcf:f64[200,7,12,1] = integer_pow[y=-2] eiz
          jcg:f64[200,7,13,1] = integer_pow[y=-2] ezp
          jch:f64[200,7,13] = integer_pow[y=-2] fzy
          jci:f64[200,7] = integer_pow[y=2] jay
          jcj:f64[200,7] = integer_pow[y=2] jba
          jck:f64[200,7] = add jci jcj
          jcl:f64[200,7] = div jba jck
          jcm:f64[200,7] = neg jay
          jcn:f64[200,7] = integer_pow[y=2] jay
          jco:f64[200,7] = integer_pow[y=2] jba
          jcp:f64[200,7] = add jcn jco
          jcq:f64[200,7] = sin jbc
          jcr:f64[200,7] = cos jbc
        in (jca, edy, edx, eea, eee, eei, een, eem, eeo, eep, eeq, eer, ees, eet,
          eez, eey, efb, eff, efj, efo, efn, efp, efq, efr, efs, eft, efu, jcb, jcc,
          jcd, jce, eiz, eic, eib, eij, egw, egv, jcf, fhq, fht, fhx, fig, fif, fjz,
          fjy, fkb, fkf, fkj, fko, fkn, fkp, fkq, fkr, fks, fkt, fku, emd, ema, emi,
          emg, emo, emm, emu, ems, enb, emz, eng, ene, enm, enk, ens, enq, enz, enx,
          eoe, eoc, eok, eoi, eoq, eoo, eox, eov, epc, epa, epi, epg, epo, epm, fkz,
          fky, flb, flf, flj, flo, fln, flp, flq, flr, fls, flt, flu, epx, epu, eqc,
          eqa, eqi, eqg, eqo, eqm, eqv, eqt, era, eqy, erg, ere, erm, erk, ert, err,
          ery, erw, ese, esc, esk, esi, esr, esp, esw, esu, etc, eta, eti, etg, flz,
          fly, fmb, fmf, fmj, fmo, fmn, fmp, fmq, fmr, fms, fmt, fmu, etr, eto, etw,
          etu, euc, eua, eui, eug, eup, eun, euu, eus, eva, euy, evg, eve, evn, evl,
          evs, evq, evy, evw, ewe, ewc, ewl, ewj, ewq, ewo, eww, ewu, exc, exa, ezp,
          eys, eyr, eyz, exm, exi, jcg, fna, fnd, fnh, fnq, fnp, foa, fod, foh, foq,
          fop, fou, fox, fpb, fpk, fpj, ffa, ffd, ffh, ffq, ffp, fpr, fps, fpt, fpu,
          fpv, fpw, fxh, fqh, fhd, fhc, fql, fqm, fqn, fqo, fqp, fqq, fqr, fqs, fqt,
          fqu, frd, fre, frf, frg, frh, fri, frj, frk, frl, fsf, fsg, fsh, fsi, fsj,
          fsk, ftb, ftc, ftd, fte, ftf, ftg, ftl, ftj, ftr, ftp, ftw, ftu, fub, ftz,
          fuk, ful, fum, fun, fuo, fup, fuq, fur, fus, fuw, fux, fuy, fuz, fva, fvb,
          fve, fvd, fvj, fvi, fvn, fvm, fvr, fvq, fvx, fvy, fvz, fwa, fwb, fwc, fwg,
          fwh, fwi, fwj, fwk, fwl, fwo, fwp, fwq, fwr, fws, fwt, gfd, gaa, fzx, fzz,
          fzv, jch, gae, gad, gak, gan, gaz, gbv, gbu, gdf, gbx, fvv, gdi, gdl, gdm,
          gdn, gdo, gdp, gdq, frz, gdu, gdv, gdw, gdx, gdy, gdz, gec, ged, gee, gef,
          geg, geh, gej, gek, gel, gem, gen, geo, gfz, gfp, ggb, ggf, ggj, ggo, ggn,
          ggp, ggq, ggr, ggs, ggt, ggu, gia, ghz, gic, gig, gik, gip, gio, giq, gir,
          gis, git, giu, giv, gja, giz, gjc, gjg, gjk, gjp, gjo, gjq, gjr, gjs, gjt,
          gju, gjv, gka, gjz, gkc, gke, gki, gkl, gkk, gkm, gkn, gko, gkp, gkq, gkr,
          gkz, gla, glb, glc, gld, gle, glg, glf, gli, glk, glo, glr, glq, gls, glt,
          glu, glv, glw, glx, glz, gma, gmb, gmc, gmd, gme, gmg, gmf, gmi, gmk, gmo,
          gmr, gmq, gms, gmt, gmu, gmv, gmw, gmx, gmz, gna, gnb, gnc, gnd, gne, gng,
          gnf, gni, gnk, gno, gnr, gnq, gns, gnt, gnu, gnv, gnw, gnx, gow, goq, gor,
          gos, got, gou, gov, gpz, gpn, gpt, gpu, gpv, gpw, gpx, gpy, gqq, gqr, gqs,
          gsl, gsm, gsn, gso, gsp, gsq, gsr, gss, gst, gsu, gsv, gsw, gsx, gsy, gsz,
          gta, gtb, gtc, gtd, gte, gtf, gtg, gth, gti, gtj, gtk, gtl, gtm, gtn, gto,
          gtp, gtq, gtr, gts, gtt, gtu, gtv, gtw, gtx, gty, gtz, gua, gub, guc, gud,
          gue, guf, gug, guh, gui, guj, guk, gul, gum, gun, guo, gup, guq, gur, gus,
          gut, guu, guv, guw, gux, guy, guz, gva, gvb, gvc, gvd, gve, gvf, gvg, gvh,
          gvi, gvj, gvk, gvl, gvm, gvn, gvo, gvp, gvq, gvr, gvs, gvt, gvu, gvv, gvw,
          gvx, gvy, gvz, gwa, gwb, gwc, gwd, gwe, gwf, gwg, gwh, gwi, gwj, gwk, gwl,
          gwm, gwn, gwo, gwp, gwq, gwr, gws, gwt, gwu, gwv, gww, gwx, gwy, gwz, gxa,
          gxb, gxc, gxd, gxe, gxf, gxg, gxh, gxi, gxj, gxk, gxl, gxm, gxn, gxo, gxp,
          gxq, gxr, gxs, gxt, gxu, gxv, gxw, gxx, gxy, gxz, gya, gyb, gyc, gyd, gye,
          gyf, gyg, gyh, gyi, gyj, gyk, gyl, gym, gyn, gyo, gyp, gyq, gyr, gys, gyt,
          gyu, gyv, gyw, gyx, gyy, gyz, gza, gzb, gzc, gzd, gze, gzf, gzg, gzh, gzi,
          gzj, gzk, gzl, gzm, gzn, gzo, gzp, gzq, gzr, gzs, gzt, gzu, gzv, gzw, gzx,
          gzy, gzz, haa, hab, hac, had, hae, haf, hag, hah, hai, haj, hak, hal, ham,
          han, hao, hap, haq, har, has, hat, hau, hav, haw, hax, hay, haz, hba, hbb,
          hbc, hbd, hbe, hbf, hbg, hbh, hbi, hbj, hbk, hbl, hbm, hbn, hbo, hbp, hbq,
          hbr, hbs, hbt, hbu, hbv, hbw, hbx, hby, hbz, hca, hcb, hcc, hcd, hce, hcf,
          hcg, hch, hci, hcj, hck, iyu, iyt, iyw, iza, ize, izj, izi, izk, izl, izm,
          izn, izo, izp, izt, izs, izv, izz, jad, jai, jah, jaj, jak, jal, jam, jan,
          jao, jcl, jcm, jcp, jcq, jcr) }
      length=1
      linear=(False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False)
      num_carry=1
      num_consts=770
      reverse=False
      unroll=1
    ] pc pd pe pf pg ph pi pj pk pl pm pn po pp pq pr ps pt pu pv pw px py pz qa
      qb qc qd qe qf qg qh qi qj qk ql qm qn qo qp qq qr qs qt qu qv qw qx qy qz
      ra rb rc rd re rf rg rh ri rj rk rl rm rn ro rp rq rr rs rt ru rv rw rx ry
      rz sa sb sc sd se sf sg sh si sj sk sl sm sn so sp sq sr ss st su sv sw sx
      sy sz ta tb tc td te tf tg th ti tj tk tl tm tn to tp tq tr ts tt tu tv tw
      tx ty tz ua ub uc ud ue uf ug uh ui uj uk ul um un uo up uq ur us ut uu uv
      uw ux uy uz va vb vc vd ve vf vg vh vi vj vk vl vm vn vo vp vq vr vs vt vu
      vv vw vx vy vz wa wb wc wd we wf wg wh wi wj wk wl wm wn wo wp wq wr ws wt
      wu wv ww wx wy wz xa xb xc xd xe xf xg xh xi xj xk xl xm xn xo xp xq xr xs
      xt xu xv xw xx xy xz ya yb yc yd ye yf yg yh yi yj yk yl ym yn yo yp yq yr
      ys yt yu yv yw yx yy yz za zb zc zd ze zf zg zh zi zj zk zl zm zn zo zp zq
      zr zs zt zu zv zw zx zy zz baa bab bac bad bae baf bag bah bai baj bak bal
      bam ban bao bap baq bar bas bat bau bav baw bax bay baz bba bbb bbc bbd bbe
      bbf bbg bbh bbi bbj bbk bbl bbm bbn bbo bbp bbq bbr bbs bbt bbu bbv bbw bbx
      bby bbz bca bcb bcc bcd bce bcf bcg bch bci bcj bck bcl bcm bcn bco bcp bcq
      bcr bcs bct bcu bcv bcw bcx bcy bcz bda bdb bdc bdd bde bdf bdg bdh bdi bdj
      bdk bdl bdm bdn bdo bdp bdq bdr bds bdt bdu bdv bdw bdx bdy bdz bea beb bec
      bed bee bef beg beh bei bej bek bel bem ben beo bep beq ber bes bet beu bev
      bew bex bey bez bfa bfb bfc bfd bfe bff bfg bfh bfi bfj bfk bfl bfm bfn bfo
      bfp bfq bfr bfs bft bfu bfv bfw bfx bfy bfz bga bgb bgc bgd bge bgf bgg bgh
      bgi bgj bgk bgl bgm bgn bgo bgp bgq bgr bgs bgt bgu bgv bgw bgx bgy bgz bha
      bhb bhc bhd bhe bhf bhg bhh bhi bhj bhk bhl bhm bhn bho bhp bhq bhr bhs bht
      bhu bhv bhw bhx bhy bhz bia bib bic bid bie bif big bih bii bij bik bil bim
      bin bio bip biq bir bis bit biu biv biw bix biy biz bja bjb bjc bjd bje bjf
      bjg bjh bji bjj bjk bjl bjm bjn bjo bjp bjq bjr bjs bjt bju bjv bjw bjx bjy
      bjz bka bkb bkc bkd bke bkf bkg bkh bki bkj bkk bkl bkm bkn bko bkp bkq bkr
      bks bkt bku bkv bkw bkx bky bkz bla blb blc bld ble blf blg blh bli blj blk
      bll blm bln blo blp blq blr bls blt blu blv blw blx bly blz bma bmb bmc bmd
      bme bmf bmg bmh bmi bmj bmk bml bmm bmn bmo bmp bmq bmr bms bmt bmu bmv bmw
      bmx bmy bmz bna bnb bnc bnd bne bnf bng bnh bni bnj bnk bnl bnm bnn bno bnp
      bnq bnr bns bnt bnu bnv bnw bnx bny bnz boa bob boc bod boe bof bog boh boi
      boj bok bol bom bon boo bop boq bor bos bot bou bov bow box boy boz bpa bpb
      bpc bpd bpe bpf bpg bph bpi bpj bpk bpl bpm bpn bpo bpp bpq bpr bps bpt bpu
      bpv bpw bpx bpy bpz bqa bqb bqc bqd bqe bqf bqg bqh bqi bqj bqk bql bqm bqn
      bqo bqp bqq bqr bqs bqt bqu bqv bqw bqx bqy bqz bra brb brc brd bre brf brg
      brh bri brj brk brl brm brn bro brp brq brr brs brt bru brv brw brx bry brz
      bsa bsb bsc bsd bse bsf bsg bsh bsi bsj bsk bsl bsm bsn bso buh bvh bwp bwr
    jcs:f64[200,7,144] = slice[
      limit_indices=(200, 7, 144)
      start_indices=(0, 0, 0)
      strides=None
    ] btv
    jct:f64[200,7,180] = concatenate[dimension=2] bws jcs
    jcu:f64[200,7,36] = slice[
      limit_indices=(200, 7, 54)
      start_indices=(0, 0, 18)
      strides=None
    ] bwn
    jcv:f64[200,7,36] = sub btn jcu
    jcw:f64[200,7,36] jcx:f64[200,7,36] = pjit[name=softplus jaxpr=softplus] jcv
      bto btp btq
    jcy:f64[200,7,36] = sub btm jcw
    jcz:f64[200,7,36] = sub jcy btr
    jda:f64[200,7,36] jdb:f64[200,7,36] = pjit[name=softplus jaxpr=softplus] jcz
      bts btt btu
    jdc:f64[200,7,36] = add btl jda
  in (jct, bws, jdc, bvm, bvr, bvp, bvs, bvq, bvx, bvv, bvy, bvw, bwd, bwb, bwe,
    bwc, bwj, bwh, bwk, bwi, bwt, bwu, bwv, bww, bwx, bwy, bwz, bxa, bxb, bxc, bxd,
    bxe, bxf, bxg, bxh, bxi, bxj, bxk, bxl, bxm, bxn, bxo, bxp, bxq, bxr, bxs, bxt,
    bxu, bxv, bxw, bxx, bxy, bxz, bya, byb, byc, byd, bye, byf, byg, byh, byi, byj,
    byk, byl, bym, byn, byo, byp, byq, byr, bys, byt, byu, byv, byw, byx, byy, byz,
    bza, bzb, bzc, bzd, bze, bzf, bzg, bzh, bzi, bzj, bzk, bzl, bzm, bzn, bzo, bzp,
    bzq, bzr, bzs, bzt, bzu, bzv, bzw, bzx, bzy, bzz, caa, cab, cac, cad, cae, caf,
    cag, cah, cai, caj, cak, cal, cam, can, cao, cap, caq, car, cas, cat, cau, cav,
    caw, cax, cay, caz, cba, cbb, cbc, cbd, cbe, cbf, cbg, cbh, cbi, cbj, cbk, cbl,
    cbm, cbn, cbo, cbp, cbq, cbr, cbs, cbt, cbu, cbv, cbw, cbx, cby, cbz, cca, ccb,
    ccc, ccd, cce, ccf, ccg, cch, cci, ccj, cck, ccl, ccm, ccn, cco, ccp, ccq, ccr,
    ccs, cct, ccu, ccv, ccw, ccx, ccy, ccz, cda, cdb, cdc, cdd, cde, cdf, cdg, cdh,
    cdi, cdj, cdk, cdl, cdm, cdn, cdo, cdp, cdq, cdr, cds, cdt, cdu, cdv, cdw, cdx,
    cdy, cdz, cea, ceb, cec, ced, cee, cef, ceg, ceh, cei, cej, cek, cel, cem, cen,
    ceo, cep, ceq, cer, ces, cet, ceu, cev, cew, cex, cey, cez, cfa, cfb, cfc, cfd,
    cfe, cff, cfg, cfh, cfi, cfj, cfk, cfl, cfm, cfn, cfo, cfp, cfq, cfr, cfs, cft,
    cfu, cfv, cfw, cfx, cfy, cfz, cga, cgb, cgc, cgd, cge, cgf, cgg, cgh, cgi, cgj,
    cgk, cgl, cgm, cgn, cgo, cgp, cgq, cgr, cgs, cgt, cgu, cgv, cgw, cgx, cgy, cgz,
    cha, chb, chc, chd, che, chf, chg, chh, chi, chj, chk, chl, chm, chn, cho, chp,
    chq, chr, chs, cht, chu, chv, chw, chx, chy, chz, cia, cib, cic, cid, cie, cif,
    cig, cih, cii, cij, cik, cil, cim, cin, cio, cip, ciq, cir, cis, cit, ciu, civ,
    ciw, cix, ciy, ciz, cja, cjb, cjc, cjd, cje, cjf, cjg, cjh, cji, cjj, cjk, cjl,
    cjm, cjn, cjo, cjp, cjq, cjr, cjs, cjt, cju, cjv, cjw, cjx, cjy, cjz, cka, ckb,
    ckc, ckd, cke, ckf, ckg, ckh, cki, ckj, ckk, ckl, ckm, ckn, cko, ckp, ckq, ckr,
    cks, ckt, cku, ckv, ckw, ckx, cky, ckz, cla, clb, clc, cld, cle, clf, clg, clh,
    cli, clj, clk, cll, clm, cln, clo, clp, clq, clr, cls, clt, clu, clv, clw, clx,
    cly, clz, cma, cmb, cmc, cmd, cme, cmf, cmg, cmh, cmi, cmj, cmk, cml, cmm, cmn,
    cmo, cmp, cmq, cmr, cms, cmt, cmu, cmv, cmw, cmx, cmy, cmz, cna, cnb, cnc, cnd,
    cne, cnf, cng, cnh, cni, cnj, cnk, cnl, cnm, cnn, cno, cnp, cnq, cnr, cns, cnt,
    cnu, cnv, cnw, cnx, cny, cnz, coa, cob, coc, cod, coe, cof, cog, coh, coi, coj,
    cok, col, com, con, coo, cop, coq, cor, cos, cot, cou, cov, cow, cox, coy, coz,
    cpa, cpb, cpc, cpd, cpe, cpf, cpg, cph, cpi, cpj, cpk, cpl, cpm, cpn, cpo, cpp,
    cpq, cpr, cps, cpt, cpu, cpv, cpw, cpx, cpy, cpz, cqa, cqb, cqc, cqd, cqe, cqf,
    cqg, cqh, cqi, cqj, cqk, cql, cqm, cqn, cqo, cqp, cqq, cqr, cqs, cqt, cqu, cqv,
    cqw, cqx, cqy, cqz, cra, crb, crc, crd, cre, crf, crg, crh, cri, crj, crk, crl,
    crm, crn, cro, crp, crq, crr, crs, crt, cru, crv, crw, crx, cry, crz, csa, csb,
    csc, csd, cse, csf, csg, csh, csi, csj, csk, csl, csm, csn, cso, csp, csq, csr,
    css, cst, csu, csv, csw, csx, csy, csz, cta, ctb, ctc, ctd, cte, ctf, ctg, cth,
    cti, ctj, ctk, ctl, ctm, ctn, cto, ctp, ctq, ctr, cts, ctt, ctu, ctv, ctw, ctx,
    cty, ctz, cua, cub, cuc, cud, cue, cuf, cug, cuh, cui, cuj, cuk, cul, cum, cun,
    cuo, cup, cuq, cur, cus, cut, cuu, cuv, cuw, cux, cuy, cuz, cva, cvb, cvc, cvd,
    cve, cvf, cvg, cvh, cvi, cvj, cvk, cvl, cvm, cvn, cvo, cvp, cvq, cvr, cvs, cvt,
    cvu, cvv, cvw, cvx, cvy, cvz, cwa, cwb, cwc, cwd, cwe, cwf, cwg, cwh, cwi, cwj,
    cwk, cwl, cwm, cwn, cwo, cwp, cwq, cwr, cws, cwt, cwu, cwv, cww, cwx, cwy, cwz,
    cxa, cxb, cxc, cxd, cxe, cxf, cxg, cxh, cxi, cxj, cxk, cxl, cxm, cxn, cxo, cxp,
    cxq, cxr, cxs, cxt, cxu, cxv, cxw, cxx, cxy, cxz, cya, cyb, cyc, cyd, cye, cyf,
    cyg, cyh, cyi, cyj, cyk, cyl, cym, cyn, cyo, cyp, cyq, cyr, cys, cyt, cyu, cyv,
    cyw, cyx, cyy, cyz, cza, czb, czc, czd, cze, czf, czg, czh, czi, czj, czk, czl,
    czm, czn, czo, czp, czq, czr, czs, jcx, jdb) }, ())
During handling of the above exception, another exception occurred:
Traceback (most recent call last):
  File "/home/ant/ssrl/ssrl/scripts/aliengo_train.py", line 248, in <module>
    train_go1()
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
  File "/home/ant/ssrl/ssrl/scripts/aliengo_train.py", line 199, in train_go1
    state = train_fn(
  File "/home/ant/ssrl/ssrl/brax/training/agents/ssrl/train.py", line 263, in train
    env_state) = sim_training_epoch_with_timing(
  File "/home/ant/ssrl/ssrl/brax/training/agents/ssrl/train.py", line 947, in sim_training_epoch_with_timing
    training_state, model_metrics = train_model(
  File "/home/ant/ssrl/ssrl/brax/training/agents/ssrl/train.py", line 661, in train_model
    test_total_loss, test_mean_loss) = model_training_epoch(
  File "/home/ant/ssrl/ssrl/brax/training/agents/ssrl/train.py", line 745, in model_training_epoch
    test_total_losses, test_mean_losses) = model_training_epoch_jit(
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/traceback_util.py", line 179, in reraise_with_filtered_traceback
    return fun(*args, **kwargs)
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/pjit.py", line 327, in cache_miss
    outs, out_flat, out_tree, args_flat, jaxpr, attrs_tracked = _python_pjit_helper(
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/pjit.py", line 185, in _python_pjit_helper
    out_flat = pjit_p.bind(*args_flat, **params)
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/core.py", line 2834, in bind
    return self.bind_with_trace(top_trace, args, params)
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/core.py", line 420, in bind_with_trace
    out = trace.process_primitive(self, map(trace.full_raise, args), params)
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/core.py", line 921, in process_primitive
    return primitive.impl(*tracers, **params)
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/pjit.py", line 1635, in _pjit_call_impl
    return xc._xla.pjit(
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/pjit.py", line 1614, in call_impl_cache_miss
    out_flat, compiled = _pjit_call_impl_python(
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/pjit.py", line 1536, in _pjit_call_impl_python
    compiled = _resolve_and_lower(
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/pjit.py", line 1503, in _resolve_and_lower
    lowered = _pjit_lower(
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/pjit.py", line 1645, in _pjit_lower
    return _pjit_lower_cached(*args, **kwargs)
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/pjit.py", line 1685, in _pjit_lower_cached
    return pxla.lower_sharding_computation(
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/profiler.py", line 335, in wrapper
    return func(*args, **kwargs)
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/pxla.py", line 2253, in lower_sharding_computation
    nreps, tuple_args, shape_poly_state) = _cached_lowering_to_hlo(
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/pxla.py", line 2017, in _cached_lowering_to_hlo
    lowering_result = mlir.lower_jaxpr_to_module(
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/mlir.py", line 952, in lower_jaxpr_to_module
    lower_jaxpr_to_fun(
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/mlir.py", line 1394, in lower_jaxpr_to_fun
    out_vals, tokens_out = jaxpr_subcomp(
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/mlir.py", line 1585, in jaxpr_subcomp
    ans = lower_per_platform(rule_ctx, str(eqn.primitive),
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/mlir.py", line 1693, in lower_per_platform
    output = kept_rules[0](ctx, *rule_args, **rule_kwargs)
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/mlir.py", line 1794, in f_lowered
    out, tokens = jaxpr_subcomp(
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/mlir.py", line 1585, in jaxpr_subcomp
    ans = lower_per_platform(rule_ctx, str(eqn.primitive),
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/mlir.py", line 1693, in lower_per_platform
    output = kept_rules[0](ctx, *rule_args, **rule_kwargs)
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/lax/control_flow/loops.py", line 1784, in _while_lowering
    new_z, tokens_out = mlir.jaxpr_subcomp(
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/mlir.py", line 1585, in jaxpr_subcomp
    ans = lower_per_platform(rule_ctx, str(eqn.primitive),
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/mlir.py", line 1693, in lower_per_platform
    output = kept_rules[0](ctx, *rule_args, **rule_kwargs)
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/mlir.py", line 1868, in core_call_lowering
    out_nodes, tokens = call_lowering(
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/mlir.py", line 1853, in call_lowering
    symbol_name = _lower_jaxpr_to_fun_cached(
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/mlir.py", line 1812, in _lower_jaxpr_to_fun_cached
    func_op = lower_jaxpr_to_fun(
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/mlir.py", line 1394, in lower_jaxpr_to_fun
    out_vals, tokens_out = jaxpr_subcomp(
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/mlir.py", line 1585, in jaxpr_subcomp
    ans = lower_per_platform(rule_ctx, str(eqn.primitive),
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/mlir.py", line 1693, in lower_per_platform
    output = kept_rules[0](ctx, *rule_args, **rule_kwargs)
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/lax/control_flow/conditionals.py", line 855, in _cond_lowering
    out_vals, tokens_out = mlir.jaxpr_subcomp(
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/mlir.py", line 1585, in jaxpr_subcomp
    ans = lower_per_platform(rule_ctx, str(eqn.primitive),
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/mlir.py", line 1693, in lower_per_platform
    output = kept_rules[0](ctx, *rule_args, **rule_kwargs)
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/mlir.py", line 1794, in f_lowered
    out, tokens = jaxpr_subcomp(
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/mlir.py", line 1585, in jaxpr_subcomp
    ans = lower_per_platform(rule_ctx, str(eqn.primitive),
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/mlir.py", line 1693, in lower_per_platform
    output = kept_rules[0](ctx, *rule_args, **rule_kwargs)
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/lax/control_flow/loops.py", line 1784, in _while_lowering
    new_z, tokens_out = mlir.jaxpr_subcomp(
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/mlir.py", line 1585, in jaxpr_subcomp
    ans = lower_per_platform(rule_ctx, str(eqn.primitive),
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/mlir.py", line 1693, in lower_per_platform
    output = kept_rules[0](ctx, *rule_args, **rule_kwargs)
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/mlir.py", line 1868, in core_call_lowering
    out_nodes, tokens = call_lowering(
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/mlir.py", line 1853, in call_lowering
    symbol_name = _lower_jaxpr_to_fun_cached(
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/mlir.py", line 1812, in _lower_jaxpr_to_fun_cached
    func_op = lower_jaxpr_to_fun(
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/mlir.py", line 1394, in lower_jaxpr_to_fun
    out_vals, tokens_out = jaxpr_subcomp(
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/mlir.py", line 1585, in jaxpr_subcomp
    ans = lower_per_platform(rule_ctx, str(eqn.primitive),
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/mlir.py", line 1693, in lower_per_platform
    output = kept_rules[0](ctx, *rule_args, **rule_kwargs)
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/mlir.py", line 1794, in f_lowered
    out, tokens = jaxpr_subcomp(
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/mlir.py", line 1585, in jaxpr_subcomp
    ans = lower_per_platform(rule_ctx, str(eqn.primitive),
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/mlir.py", line 1693, in lower_per_platform
    output = kept_rules[0](ctx, *rule_args, **rule_kwargs)
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/lax/lax.py", line 5182, in _empty_lower
    return mlir.ir_constants(np.zeros(phys_aval.shape, phys_aval.dtype))
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/mlir.py", line 252, in ir_constants
    out = handler(val)
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/mlir.py", line 315, in _ndarray_constant_handler
    return _numpy_array_constant(val)
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/mlir.py", line 275, in _numpy_array_constant
    return (hlo.constant(attr),)
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jaxlib/mlir/dialects/_stablehlo_ops_gen.py", line 1347, in constant
    return _get_op_result_or_op_results(ConstantOp(value=value, loc=loc, ip=ip))
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jaxlib/mlir/dialects/_stablehlo_ops_gen.py", line 1326, in __init__
    isinstance(value, _ods_ir.Attribute) or
KeyboardInterrupt