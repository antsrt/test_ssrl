run_name: null
sweep_name: null
env: Go1GoFast
algo: ssrl
gpus: '0'
num_seeds: 1
ssrl_dynamics_fn: contact_integrate_only
render_during_training: true
render_epoch_interval: 1
render_seed: 0
common:
  action_repeat: 1
  obs_history_length: 5
  normalize_observations: false
  forces_in_q_coords: true
actor_network:
  hidden_layers: 2
  hidden_size: 512
  activation: swish
  max_std: null
critic_network:
  hidden_layers: 5
  hidden_size: 256
env_common:
  policy_repeat: 4
  forward_vel_rew_weight: 2.0
  turn_rew_weight: 0.5
  pitch_rew_weight: 0.25
  roll_rew_weight: 0.25
  yaw_rew_weight: 0.5
  side_motion_rew_weight: 0.5
  z_vel_change_rew_weight: 0.15
  ang_vel_rew_weight: 0.0
  ang_change_rew_weight: 0.25
  joint_lim_rew_weight: 0.0
  torque_lim_rew_weight: 0.0
  joint_acc_rew_weight: 0.0
  action_rew_weight: 0.0
  cosmetic_rew_weight: 0.0
  energy_rew_weight: 0.25
  foot_z_rew_weight: 0.0
  torque_lim_penalty_weight: 0.1
  fallen_roll: 0.785
  fallen_pitch: 0.785
  include_height_in_obs: false
  gains_in_action_space: false
  reward_type: normalized
env_sac:
  policy_repeat: ${env_common.policy_repeat}
  forward_cmd_vel_type: constant
  forward_cmd_vel_range: 0.0
  forward_cmd_vel_period_range:
  - 40.0
  - 40.0
  turn_cmd_rate_range:
  - -0.0
  - 0.0
  initial_yaw_range:
  - -0.0
  - 0.0
  contact_time_const: 0.02
  contact_damping_ratio: 1.0
  friction_range:
  - 0.6
  - 0.6
  ground_roll_range:
  - 0.0
  - 0.0
  ground_pitch_range:
  - 0.0
  - 0.0
  joint_damping_perc_range:
  - 1.0
  - 1.0
  joint_gain_range:
  - 1.0
  - 1.0
  link_mass_perc_range:
  - 1.0
  - 1.0
  forward_vel_rew_weight: ${env_common.forward_vel_rew_weight}
  turn_rew_weight: ${env_common.turn_rew_weight}
  pitch_rew_weight: ${env_common.pitch_rew_weight}
  roll_rew_weight: ${env_common.roll_rew_weight}
  yaw_rew_weight: ${env_common.yaw_rew_weight}
  side_motion_rew_weight: ${env_common.side_motion_rew_weight}
  z_vel_change_rew_weight: ${env_common.z_vel_change_rew_weight}
  ang_vel_rew_weight: ${env_common.ang_vel_rew_weight}
  ang_change_rew_weight: ${env_common.ang_change_rew_weight}
  joint_lim_rew_weight: ${env_common.joint_lim_rew_weight}
  torque_lim_rew_weight: ${env_common.torque_lim_rew_weight}
  joint_acc_rew_weight: ${env_common.joint_acc_rew_weight}
  action_rew_weight: ${env_common.action_rew_weight}
  cosmetic_rew_weight: ${env_common.cosmetic_rew_weight}
  energy_rew_weight: ${env_common.energy_rew_weight}
  foot_z_rew_weight: ${env_common.foot_z_rew_weight}
  torque_lim_penalty_weight: ${env_common.torque_lim_penalty_weight}
  fallen_roll: ${env_common.fallen_roll}
  fallen_pitch: ${env_common.fallen_pitch}
  forces_in_q_coords: ${common.forces_in_q_coords}
  include_height_in_obs: ${env_common.include_height_in_obs}
  gains_in_action_space: ${env_common.gains_in_action_space}
  reward_type: ${env_common.reward_type}
sac:
  num_timesteps: 10000000
  episode_length: 1000
  action_repeat: ${common.action_repeat}
  obs_history_length: ${common.obs_history_length}
  num_envs: 1
  num_eval_envs: 500
  learning_rate: 0.0001
  discounting: 0.99
  seed: 0
  batch_size: 200
  num_evals: 10
  normalize_observations: ${common.normalize_observations}
  reward_scaling: 1
  tau: 0.001
  min_replay_size: 10000
  max_replay_size: 200000
  grad_updates_per_step: 20
  deterministic_eval: true
env_ssrl:
  policy_repeat: ${env_common.policy_repeat}
  forward_cmd_vel_type: constant
  forward_cmd_vel_range: 0.0
  forward_cmd_vel_period_range:
  - 40.0
  - 40.0
  turn_cmd_rate_range:
  - -0.0
  - 0.0
  initial_yaw_range:
  - -0.0
  - 0.0
  contact_time_const: 0.02
  contact_damping_ratio: 1.0
  friction_range:
  - 0.6
  - 0.6
  ground_roll_range:
  - 0.0
  - 0.0
  ground_pitch_range:
  - 0.0
  - 0.0
  joint_damping_perc_range:
  - 1.0
  - 1.0
  joint_gain_range:
  - 1.0
  - 1.0
  link_mass_perc_range:
  - 1.0
  - 1.0
  forward_vel_rew_weight: ${env_common.forward_vel_rew_weight}
  turn_rew_weight: ${env_common.turn_rew_weight}
  pitch_rew_weight: ${env_common.pitch_rew_weight}
  roll_rew_weight: ${env_common.roll_rew_weight}
  yaw_rew_weight: ${env_common.yaw_rew_weight}
  side_motion_rew_weight: ${env_common.side_motion_rew_weight}
  z_vel_change_rew_weight: ${env_common.z_vel_change_rew_weight}
  ang_vel_rew_weight: ${env_common.ang_vel_rew_weight}
  ang_change_rew_weight: ${env_common.ang_change_rew_weight}
  joint_lim_rew_weight: ${env_common.joint_lim_rew_weight}
  torque_lim_rew_weight: ${env_common.torque_lim_rew_weight}
  joint_acc_rew_weight: ${env_common.joint_acc_rew_weight}
  action_rew_weight: ${env_common.action_rew_weight}
  cosmetic_rew_weight: ${env_common.cosmetic_rew_weight}
  energy_rew_weight: ${env_common.energy_rew_weight}
  foot_z_rew_weight: ${env_common.foot_z_rew_weight}
  torque_lim_penalty_weight: ${env_common.torque_lim_penalty_weight}
  fallen_roll: ${env_common.fallen_roll}
  fallen_pitch: ${env_common.fallen_pitch}
  forces_in_q_coords: ${common.forces_in_q_coords}
  include_height_in_obs: ${env_common.include_height_in_obs}
  body_height_in_action_space: true
  gains_in_action_space: ${env_common.gains_in_action_space}
  reward_type: ${env_common.reward_type}
  healthy_delta_radius: 2.0
  healthy_delta_yaw: 1.57
ssrl_start_with_sac: false
ssrl:
  episode_length: 1000
  policy_repeat: 1
  num_epochs: 40
  model_trains_per_epoch: 1
  training_steps_per_model_train: 1
  env_steps_per_training_step: 1000
  model_rollouts_per_hallucination_update: 400
  sac_grad_updates_per_hallucination_update: 60
  init_exploration_steps: 1000
  clear_model_buffer_after_model_train: false
  action_repeat: ${common.action_repeat}
  obs_history_length: ${common.obs_history_length}
  num_envs: 1
  num_evals: 41
  num_eval_envs: 1
  policy_normalize_observations: ${common.normalize_observations}
  model_learning_rate: 0.001
  model_training_batch_size: 200
  model_training_max_sgd_steps_per_epoch: null
  model_training_max_epochs: 1000
  model_training_convergence_criteria: 0.01
  model_training_consec_converged_epochs: 6
  model_training_abs_criteria: null
  model_training_test_ratio: 0.2
  model_training_weight_decay: true
  model_training_stop_gradient: false
  model_loss_horizon: 4
  model_check_done_condition: true
  max_env_buffer_size: 15000
  max_model_buffer_size: 400000
  sac_learning_rate: 0.0002
  sac_discounting: 0.99
  sac_batch_size: 256
  real_ratio: 0.06
  sac_reward_scaling: 1.0
  sac_tau: 0.001
  sac_fixed_alpha: None
  seed: 2
  deterministic_in_env: true
  deterministic_eval: true
  hallucination_max_std: -1.0
  zero_final_layer_of_policy: false
ssrl_model:
  hidden_size: 400
  ensemble_size: 7
  num_elites: 5
  probabilistic: true
ssrl_linear_threshold_fn:
  start_epoch: 0
  end_epoch: 10
  start_model_horizon: 1
  end_model_horizon: 20
ssrl_hupts_fn:
  start_epoch: 0
  end_epoch: 4
  start_hupts: 10
  end_hupts: 1000
render:
  policy: ssrl
wandb:
  entity: an-tsaritsin-itmo-university
  log_sac: true
  log_ssrl: true
save_policy:
  sac: true
  sac_all: true
  ssrl: true
  ssrl_all: true
torque_validate:
  hardware_data: true
Running on GPU 0
[2025-01-31 16:30:44,033][root][INFO] - Converting mesh (3714202408148446815, -4176699307809136135) into convex hull.
[2025-01-31 16:30:47,472][root][INFO] - Converting mesh (6214860497791710325, -561683468179174631) into convex hull.
[2025-01-31 16:30:47,866][root][INFO] - Converting mesh (-8972890154514105685, 2122339638288004909) into convex hull.
[2025-01-31 16:30:49,091][root][INFO] - Converting mesh (-3798732792154191447, 7730072296141616248) into convex hull.
[2025-01-31 16:30:49,982][root][INFO] - Converting mesh (4093885048131451225, 6274369281343296115) into convex hull.
[2025-01-31 16:31:10,276][absl][INFO] - {'eval/walltime': 13.772088766098022, 'eval/episode_forward_vel': Array(-1678.56812497, dtype=float64), 'eval/episode_penalty_torque_lim': Array(-0.0753731, dtype=float64), 'eval/episode_rew_action': Array(0., dtype=float64), 'eval/episode_rew_ang_change': Array(53.60815592, dtype=float64), 'eval/episode_rew_ang_vel': Array(0., dtype=float64), 'eval/episode_rew_cosmetic': Array(0., dtype=float64), 'eval/episode_rew_energy': Array(13.27637341, dtype=float64), 'eval/episode_rew_foot_z': Array(0., dtype=float64), 'eval/episode_rew_forward_vel': Array(-721.96478494, dtype=float64), 'eval/episode_rew_joint_acc': Array(0., dtype=float64), 'eval/episode_rew_joint_limits': Array(0., dtype=float64), 'eval/episode_rew_pitch': Array(53.36149686, dtype=float64), 'eval/episode_rew_roll': Array(51.93569633, dtype=float64), 'eval/episode_rew_side_motion': Array(2.30745181, dtype=float64), 'eval/episode_rew_torque_limits': Array(0., dtype=float64), 'eval/episode_rew_turn': Array(106.94462159, dtype=float64), 'eval/episode_rew_yaw': Array(106.41955638, dtype=float64), 'eval/episode_rew_z_vel_change': Array(20.00593135, dtype=float64), 'eval/episode_reward': Array(-314.74743035, dtype=float64), 'eval/episode_step_count': Array(499500., dtype=float64), 'eval/avg_episode_length': Array(1000., dtype=float64), 'eval/epoch_eval_time': 13.772088766098022, 'eval/sps': 72.61062697051763}
Steps / Eval:  0
Reward is  -314.7474303533778
Total reward is  -314.7474303530632
[2025-01-31 16:32:00,890][absl][INFO] - env buffer size after init exploration 1000
Model epoch 0: train total loss -3.332756866070213, train mean loss 5.107401229896302e-06, test mean loss [4.07859178e-06 4.13498903e-06 4.14006335e-06 4.01975707e-06
 4.06145274e-06 4.37270467e-06 4.63676075e-06]
Model epoch 1: train total loss -4.465664956201652, train mean loss 1.7483556004408775e-05, test mean loss [1.13936220e-04 1.02755204e-04 1.44745744e-04 4.44377861e-05
 8.42065718e-05 1.09177533e-04 1.02799202e-04]
Model epoch 2: train total loss -14.15926302879267, train mean loss 0.0004532049995054685, test mean loss [6.48633830e-05 1.09702114e-03 3.89505951e-04 2.59136188e-04
 2.98972149e-04 6.70826952e-04 6.72968619e-04]
Model epoch 3: train total loss 25.79232998106723, train mean loss 0.002592506107210657, test mean loss [0.00214469 0.00263946 0.00325575 0.00024344 0.00028678 0.00034683
 0.00015839]
Model epoch 4: train total loss -38.612887248909345, train mean loss 0.006138917788339778, test mean loss [0.01057574 0.00021021 0.00484827 0.01366956 0.0105467  0.0023614
 0.01132972]
Model epoch 5: train total loss -46.5136051829953, train mean loss 0.010302711495654688, test mean loss [1.26894607e-02 8.12133947e-05 8.62776681e-03 1.89454866e-02
 2.12995978e-02 3.30591722e-04 1.64531817e-02]
Model epoch 6: train total loss -51.95760183694933, train mean loss 0.014945174748648773, test mean loss [0.01300518 0.00010161 0.01208409 0.02619631 0.03229004 0.00010874
 0.02041733]
Model trained in 7 epochs with 1000 transitions.
Traceback (most recent call last):
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/mlir.py", line 1810, in _lower_jaxpr_to_fun_cached
    func_op = ctx.cached_primitive_lowerings[key]
KeyError: (None, let remainder = { lambda ; a:i32[] b:i64[]. let
    c:i32[] = convert_element_type[new_dtype=int32 weak_type=False] b
    d:bool[] = eq c 0
    e:i32[] = pjit[
      name=_where
      jaxpr={ lambda ; f:bool[] g:i32[] h:i32[]. let
          i:i32[] = select_n f h g
        in (i,) }
    ] d 1 c
    j:i32[] = rem a e
    k:bool[] = ne j 0
    l:bool[] = lt j 0
    m:bool[] = lt e 0
    n:bool[] = ne l m
    o:bool[] = and n k
    p:i32[] = add j e
    q:i32[] = select_n o j p
  in (q,) } in
let silu = { lambda ; r:f64[1,512]. let
    s:f64[1,512] = logistic r
    t:f64[1,512] = mul r s
  in (t,) } in
let _where = { lambda ; u:f64[1] v:f64[1] w:f64[1]. let
    x:bool[1] = ne u 0.0
    y:f64[1] = select_n x w v
  in (y,) } in
let _where1 = { lambda ; z:f64[1,1] ba:f64[1,18] bb:f64[1,18]. let
    bc:bool[1,1] = ne z 0.0
    bd:bool[1] = squeeze[dimensions=(1,)] bc
    be:bool[1,18] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(1, 18)] bd
    bf:f64[1,18] = select_n be bb ba
  in (bf,) } in
let _where2 = { lambda ; bg:f64[1,1,1] bh:f64[1,13,3] bi:f64[1,13,3]. let
    bj:bool[1,1,1] = ne bg 0.0
    bk:bool[1] = squeeze[dimensions=(1, 2)] bj
    bl:bool[1,13,3] = broadcast_in_dim[
      broadcast_dimensions=(0,)
      shape=(1, 13, 3)
    ] bk
    bm:f64[1,13,3] = select_n bl bi bh
  in (bm,) } in
let _where3 = { lambda ; bn:f64[1,1,1] bo:f64[1,13,4] bp:f64[1,13,4]. let
    bq:bool[1,1,1] = ne bn 0.0
    br:bool[1] = squeeze[dimensions=(1, 2)] bq
    bs:bool[1,13,4] = broadcast_in_dim[
      broadcast_dimensions=(0,)
      shape=(1, 13, 4)
    ] br
    bt:f64[1,13,4] = select_n bs bp bo
  in (bt,) } in
let _where4 = { lambda ; bu:f64[1,1,1] bv:f64[1,18,3] bw:f64[1,18,3]. let
    bx:bool[1,1,1] = ne bu 0.0
    by:bool[1] = squeeze[dimensions=(1, 2)] bx
    bz:bool[1,18,3] = broadcast_in_dim[
      broadcast_dimensions=(0,)
      shape=(1, 18, 3)
    ] by
    ca:f64[1,18,3] = select_n bz bw bv
  in (ca,) } in
let _where5 = { lambda ; cb:f64[1,1,1] cc:f64[1,18,18] cd:f64[1,18,18]. let
    ce:bool[1,1,1] = ne cb 0.0
    cf:bool[1] = squeeze[dimensions=(1, 2)] ce
    cg:bool[1,18,18] = broadcast_in_dim[
      broadcast_dimensions=(0,)
      shape=(1, 18, 18)
    ] cf
    ch:f64[1,18,18] = select_n cg cd cc
  in (ch,) } in
let _where6 = { lambda ; f:bool[] g:i32[] h:i32[]. let
    i:i32[] = select_n f h g
  in (i,) } in
let cross = { lambda ; ci:f64[1,3] cj:f64[1,3]. let
    ck:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    cl:f64[1] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(1, 1)
      unique_indices=True
    ] ci ck
    cm:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    cn:f64[1] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(1, 1)
      unique_indices=True
    ] ci cm
    co:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    cp:f64[1] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(1, 1)
      unique_indices=True
    ] ci co
    cq:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    cr:f64[1] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(1, 1)
      unique_indices=True
    ] cj cq
    cs:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    ct:f64[1] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(1, 1)
      unique_indices=True
    ] cj cs
    cu:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    cv:f64[1] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(1, 1)
      unique_indices=True
    ] cj cu
    cw:f64[1] = mul cn cv
    cx:f64[1] = mul cp ct
    cy:f64[1] = sub cw cx
    cz:f64[1] = mul cp cr
    da:f64[1] = mul cl cv
    db:f64[1] = sub cz da
    dc:f64[1] = mul cl ct
    dd:f64[1] = mul cn cr
    de:f64[1] = sub dc dd
    df:f64[1,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(1, 1)] cy
    dg:f64[1,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(1, 1)] db
    dh:f64[1,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(1, 1)] de
    di:f64[1,3] = concatenate[dimension=1] df dg dh
  in (di,) } in
let remainder1 = { lambda ; dj:f64[1] dk:i64[]. let
    dl:f64[] = convert_element_type[new_dtype=float64 weak_type=False] dk
    dm:f64[1] = rem dj dl
    dn:bool[1] = ne dm 0.0
    do:bool[1] = lt dm 0.0
    dp:bool[] = lt dl 0.0
    dq:bool[1] = ne do dp
    dr:bool[1] = and dq dn
    ds:f64[1] = add dm dl
    dt:f64[1] = select_n dr dm ds
  in (dt,) } in
let clip = { lambda ; du:f64[1] dv:f64[] dw:f64[]. let
    dx:f64[1] = max dv du
    dy:f64[1] = min dw dx
  in (dy,) } in
let clip1 = { lambda ; dz:f64[1,12] ea:f64[12] eb:f64[12]. let
    ec:f64[1,12] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 12)] ea
    ed:f64[1,12] = max ec dz
    ee:f64[1,12] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 12)] eb
    ef:f64[1,12] = min ee ed
  in (ef,) } in
let clip2 = { lambda ; eg:f64[1] eh:f64[] ei:f64[]. let
    ej:f64[] = convert_element_type[new_dtype=float64 weak_type=False] eh
    ek:f64[1] = max ej eg
    el:f64[] = convert_element_type[new_dtype=float64 weak_type=False] ei
    em:f64[1] = min el ek
  in (em,) } in
let _where7 = { lambda ; en:bool[1] eo:f64[] ep:f64[]. let
    eq:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] ep
    er:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] eo
    es:f64[1] = select_n en eq er
  in (es,) } in
let _roll_dynamic = { lambda ; et:f64[4000,372] eu:i32[]. let
    ev:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] eu
    ew:i32[1] = slice[limit_indices=(1,) start_indices=(0,) strides=(1,)] ev
    ex:i32[] = squeeze[dimensions=(0,)] ew
    ey:i32[] = max 4000 1
    ez:i32[] = pjit[
      name=remainder
      jaxpr={ lambda ; fa:i32[] fb:i32[]. let
          fc:bool[] = eq fb 0
          fd:i32[] = pjit[name=_where jaxpr=_where6] fc 1 fb
          fe:i32[] = rem fa fd
          ff:bool[] = ne fe 0
          fg:bool[] = lt fe 0
          fh:bool[] = lt fd 0
          fi:bool[] = ne fg fh
          fj:bool[] = and fi ff
          fk:i32[] = add fe fd
          fl:i32[] = select_n fj fe fk
        in (fl,) }
    ] ex ey
    fm:f64[8000,372] = concatenate[dimension=0] et et
    fn:i32[] = sub 4000 ez
    fo:bool[] = lt fn 0
    fp:i32[] = add fn 8000
    fq:i32[] = select_n fo fn fp
    fr:i32[] = add 0 372
    fs:i32[] = select_n False 0 fr
    ft:f64[4000,372] = dynamic_slice[slice_sizes=(4000, 372)] fm fq fs
  in (ft,) } in
let _randint = { lambda ; fu:key<fry>[] fv:i32[] fw:i32[]. let
    fx:i64[] = pjit[
      name=clip
      jaxpr={ lambda ; fy:i64[] fz:i64[] ga:i64[]. let
          gb:i64[] = max fz fy
          gc:i64[] = min ga gb
        in (gc,) }
    ] 9223372036854775807 -2147483648 2147483647
    gd:i32[] = convert_element_type[new_dtype=int32 weak_type=False] fx
    ge:bool[] = gt fw gd
    gf:i32[] = pjit[
      name=clip
      jaxpr={ lambda ; gg:i32[] gh:i32[] gi:i32[]. let
          gj:i32[] = max gh gg
          gk:i32[] = min gi gj
        in (gk,) }
    ] fv -2147483648 2147483647
    gl:i64[] = convert_element_type[new_dtype=int64 weak_type=False] gf
    gm:i32[] = pjit[
      name=clip
      jaxpr={ lambda ; gg:i32[] gh:i32[] gi:i32[]. let
          gj:i32[] = max gh gg
          gk:i32[] = min gi gj
        in (gk,) }
    ] fw -2147483648 2147483647
    gn:i64[] = convert_element_type[new_dtype=int64 weak_type=False] gm
    go:i64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] gl
    gp:i64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] gn
    gq:key<fry>[2] = random_split[shape=(2,)] fu
    gr:key<fry>[1] = slice[limit_indices=(1,) start_indices=(0,) strides=(1,)] gq
    gs:key<fry>[] = squeeze[dimensions=(0,)] gr
    gt:key<fry>[1] = slice[limit_indices=(2,) start_indices=(1,) strides=(1,)] gq
    gu:key<fry>[] = squeeze[dimensions=(0,)] gt
    gv:u64[400] = random_bits[bit_width=64 shape=(400,)] gs
    gw:u64[400] = random_bits[bit_width=64 shape=(400,)] gu
    gx:i64[1] = sub gp go
    gy:u64[1] = convert_element_type[new_dtype=uint64 weak_type=False] gx
    gz:bool[1] = le gp go
    ha:u64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    hb:u64[1] = select_n gz gy ha
    hc:bool[1] = gt gp go
    hd:bool[1] = and ge hc
    he:u64[1] = add hb 1
    hf:u64[1] = select_n hd hb he
    hg:u64[1] = rem 4294967296 hf
    hh:u64[1] = mul hg hg
    hi:u64[1] = rem hh hf
    hj:u64[400] = rem gv hf
    hk:u64[400] = mul hj hi
    hl:u64[400] = rem gw hf
    hm:u64[400] = add hk hl
    hn:u64[400] = rem hm hf
    ho:i64[400] = convert_element_type[new_dtype=int64 weak_type=False] hn
    hp:i64[400] = add go ho
  in (hp,) } in
let _take = { lambda ; hq:f64[15000,372] hr:i64[400]. let
    hs:i64[400] = pjit[
      name=remainder
      jaxpr={ lambda ; ht:i64[400] hu:i64[]. let
          hv:bool[] = eq hu 0
          hw:i64[] = pjit[
            name=_where
            jaxpr={ lambda ; hx:bool[] hy:i64[] hz:i64[]. let
                ia:i64[] = select_n hx hz hy
              in (ia,) }
          ] hv 1 hu
          ib:i64[400] = rem ht hw
          ic:bool[400] = ne ib 0
          id:bool[400] = lt ib 0
          ie:bool[] = lt hw 0
          if:bool[400] = ne id ie
          ig:bool[400] = and if ic
          ih:i64[400] = add ib hw
          ii:i64[400] = select_n ig ib ih
        in (ii,) }
    ] hr 15000
    ij:i64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] hs
    ik:f64[400,372] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(1,), collapsed_slice_dims=(0,), start_index_map=(0,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(1, 372)
      unique_indices=False
    ] hq ij
  in (ik,) } in
let jaxpr = { lambda ; il:f64[] im:f64[]. let in:f64[] = add il im in (in,) } in
let _take1 = { lambda ; io:f64[1,18,3] ip:i64[4]. let
    iq:i64[4] = pjit[
      name=remainder
      jaxpr={ lambda ; ir:i64[4] is:i64[]. let
          it:bool[] = eq is 0
          iu:i64[] = pjit[
            name=_where
            jaxpr={ lambda ; hx:bool[] hy:i64[] hz:i64[]. let
                ia:i64[] = select_n hx hz hy
              in (ia,) }
          ] it 1 is
          iv:i64[4] = rem ir iu
          iw:bool[4] = ne iv 0
          ix:bool[4] = lt iv 0
          iy:bool[] = lt iu 0
          iz:bool[4] = ne ix iy
          ja:bool[4] = and iz iw
          jb:i64[4] = add iv iu
          jc:i64[4] = select_n ja iv jb
        in (jc,) }
    ] ip 18
    jd:i64[4,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(4, 1)] iq
    je:f64[1,4,3] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 2), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(1, 1, 3)
      unique_indices=False
    ] io jd
  in (je,) } in
let _take2 = { lambda ; jf:f64[1,18] jg:i64[4]. let
    jh:i64[4] = pjit[
      name=remainder
      jaxpr={ lambda ; ir:i64[4] is:i64[]. let
          it:bool[] = eq is 0
          iu:i64[] = pjit[
            name=_where
            jaxpr={ lambda ; hx:bool[] hy:i64[] hz:i64[]. let
                ia:i64[] = select_n hx hz hy
              in (ia,) }
          ] it 1 is
          iv:i64[4] = rem ir iu
          iw:bool[4] = ne iv 0
          ix:bool[4] = lt iv 0
          iy:bool[] = lt iu 0
          iz:bool[4] = ne ix iy
          ja:bool[4] = and iz iw
          jb:i64[4] = add iv iu
          jc:i64[4] = select_n ja iv jb
        in (jc,) }
    ] jg 18
    ji:i64[4,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(4, 1)] jh
    jj:f64[1,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(1, 1)
      unique_indices=False
    ] jf ji
  in (jj,) } in
let _take3 = { lambda ; jk:i64[18] jl:i64[4]. let
    jm:i64[4] = pjit[
      name=remainder
      jaxpr={ lambda ; ir:i64[4] is:i64[]. let
          it:bool[] = eq is 0
          iu:i64[] = pjit[
            name=_where
            jaxpr={ lambda ; hx:bool[] hy:i64[] hz:i64[]. let
                ia:i64[] = select_n hx hz hy
              in (ia,) }
          ] it 1 is
          iv:i64[4] = rem ir iu
          iw:bool[4] = ne iv 0
          ix:bool[4] = lt iv 0
          iy:bool[] = lt iu 0
          iz:bool[4] = ne ix iy
          ja:bool[4] = and iz iw
          jb:i64[4] = add iv iu
          jc:i64[4] = select_n ja iv jb
        in (jc,) }
    ] jl 18
    jn:i64[4,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(4, 1)] jm
    jo:i64[4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(), collapsed_slice_dims=(0,), start_index_map=(0,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(1,)
      unique_indices=False
    ] jk jn
  in (jo,) } in
let _take4 = { lambda ; jp:f64[1,1,3] jq:i64[4]. let
    jr:i64[4] = pjit[
      name=remainder
      jaxpr={ lambda ; ir:i64[4] is:i64[]. let
          it:bool[] = eq is 0
          iu:i64[] = pjit[
            name=_where
            jaxpr={ lambda ; hx:bool[] hy:i64[] hz:i64[]. let
                ia:i64[] = select_n hx hz hy
              in (ia,) }
          ] it 1 is
          iv:i64[4] = rem ir iu
          iw:bool[4] = ne iv 0
          ix:bool[4] = lt iv 0
          iy:bool[] = lt iu 0
          iz:bool[4] = ne ix iy
          ja:bool[4] = and iz iw
          jb:i64[4] = add iv iu
          jc:i64[4] = select_n ja iv jb
        in (jc,) }
    ] jq 1
    js:i64[4,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(4, 1)] jr
    jt:f64[1,4,3] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 2), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(1, 1, 3)
      unique_indices=False
    ] jp js
  in (jt,) } in
let _take5 = { lambda ; ju:f64[1,13,3] jv:i64[13]. let
    jw:i64[13] = pjit[
      name=remainder
      jaxpr={ lambda ; jx:i64[13] jy:i64[]. let
          jz:bool[] = eq jy 0
          ka:i64[] = pjit[
            name=_where
            jaxpr={ lambda ; hx:bool[] hy:i64[] hz:i64[]. let
                ia:i64[] = select_n hx hz hy
              in (ia,) }
          ] jz 1 jy
          kb:i64[13] = rem jx ka
          kc:bool[13] = ne kb 0
          kd:bool[13] = lt kb 0
          ke:bool[] = lt ka 0
          kf:bool[13] = ne kd ke
          kg:bool[13] = and kf kc
          kh:i64[13] = add kb ka
          ki:i64[13] = select_n kg kb kh
        in (ki,) }
    ] jv 13
    kj:i64[13,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(13, 1)] jw
    kk:f64[1,13,3] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 2), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(1, 1, 3)
      unique_indices=False
    ] ju kj
  in (kk,) } in
let cross1 = { lambda ; kl:f64[1,13,3] km:f64[1,13,3]. let
    kn:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    ko:f64[1,13] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(1, 13, 1)
      unique_indices=True
    ] kl kn
    kp:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    kq:f64[1,13] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(1, 13, 1)
      unique_indices=True
    ] kl kp
    kr:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    ks:f64[1,13] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(1, 13, 1)
      unique_indices=True
    ] kl kr
    kt:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    ku:f64[1,13] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(1, 13, 1)
      unique_indices=True
    ] km kt
    kv:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    kw:f64[1,13] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(1, 13, 1)
      unique_indices=True
    ] km kv
    kx:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    ky:f64[1,13] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(1, 13, 1)
      unique_indices=True
    ] km kx
    kz:f64[1,13] = mul kq ky
    la:f64[1,13] = mul ks kw
    lb:f64[1,13] = sub kz la
    lc:f64[1,13] = mul ks ku
    ld:f64[1,13] = mul ko ky
    le:f64[1,13] = sub lc ld
    lf:f64[1,13] = mul ko kw
    lg:f64[1,13] = mul kq ku
    lh:f64[1,13] = sub lf lg
    li:f64[1,13,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(1, 13, 1)
    ] lb
    lj:f64[1,13,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(1, 13, 1)
    ] le
    lk:f64[1,13,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(1, 13, 1)
    ] lh
    ll:f64[1,13,3] = concatenate[dimension=2] li lj lk
  in (ll,) } in
let _take6 = { lambda ; lm:f64[1,13,3] ln:i64[4]. let
    lo:i64[4] = pjit[
      name=remainder
      jaxpr={ lambda ; ir:i64[4] is:i64[]. let
          it:bool[] = eq is 0
          iu:i64[] = pjit[
            name=_where
            jaxpr={ lambda ; hx:bool[] hy:i64[] hz:i64[]. let
                ia:i64[] = select_n hx hz hy
              in (ia,) }
          ] it 1 is
          iv:i64[4] = rem ir iu
          iw:bool[4] = ne iv 0
          ix:bool[4] = lt iv 0
          iy:bool[] = lt iu 0
          iz:bool[4] = ne ix iy
          ja:bool[4] = and iz iw
          jb:i64[4] = add iv iu
          jc:i64[4] = select_n ja iv jb
        in (jc,) }
    ] ln 13
    lp:i64[4,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(4, 1)] lo
    lq:f64[1,4,3] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 2), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(1, 1, 3)
      unique_indices=False
    ] lm lp
  in (lq,) } in
let _take7 = { lambda ; lr:f64[1,13,3] ls:i64[18]. let
    lt:i64[18] = pjit[
      name=remainder
      jaxpr={ lambda ; lu:i64[18] lv:i64[]. let
          lw:bool[] = eq lv 0
          lx:i64[] = pjit[
            name=_where
            jaxpr={ lambda ; hx:bool[] hy:i64[] hz:i64[]. let
                ia:i64[] = select_n hx hz hy
              in (ia,) }
          ] lw 1 lv
          ly:i64[18] = rem lu lx
          lz:bool[18] = ne ly 0
          ma:bool[18] = lt ly 0
          mb:bool[] = lt lx 0
          mc:bool[18] = ne ma mb
          md:bool[18] = and mc lz
          me:i64[18] = add ly lx
          mf:i64[18] = select_n md ly me
        in (mf,) }
    ] ls 13
    mg:i64[18,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(18, 1)] lt
    mh:f64[1,18,3] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 2), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(1, 1, 3)
      unique_indices=False
    ] lr mg
  in (mh,) } in
let _solve = { lambda ; mi:f64[1,18,18] mj:f64[18,18]. let
    mk:f64[1,18,18] = stop_gradient mi
    ml:f64[1,18,18] = pjit[
      name=_cholesky
      jaxpr={ lambda ; mm:f64[1,18,18]. let
          mn:f64[1,18,18] = transpose[permutation=(0, 2, 1)] mm
          mo:f64[1,18,18] = transpose[permutation=(0, 2, 1)] mn
          mp:f64[1,18,18] = add mn mo
          mq:f64[1,18,18] = div mp 2.0
          mr:f64[1,18,18] = cholesky mq
          ms:f64[1,18,18] = pjit[
            name=tril
            jaxpr={ lambda ; mt:f64[1,18,18]. let
                mu:i32[18,18] = iota[dimension=0 dtype=int32 shape=(18, 18)] 
                mv:i32[18,18] = add mu 0
                mw:i32[18,18] = iota[dimension=1 dtype=int32 shape=(18, 18)] 
                mx:bool[18,18] = ge mv mw
                my:bool[1,18,18] = broadcast_in_dim[
                  broadcast_dimensions=(1, 2)
                  shape=(1, 18, 18)
                ] mx
                mz:f64[1,18,18] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1, 18, 18)
                ] 0.0
                na:f64[1,18,18] = select_n my mz mt
              in (na,) }
          ] mr
          nb:f64[1,18,18] = pjit[
            name=tril
            jaxpr={ lambda ; nc:f64[1,18,18]. let
                nd:i32[18,18] = iota[dimension=0 dtype=int32 shape=(18, 18)] 
                ne:i32[18,18] = add nd 0
                nf:i32[18,18] = iota[dimension=1 dtype=int32 shape=(18, 18)] 
                ng:bool[18,18] = ge ne nf
                nh:f64[18,18] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(18, 18)
                ] 0.0
                ni:bool[1,18,18] = broadcast_in_dim[
                  broadcast_dimensions=(1, 2)
                  shape=(1, 18, 18)
                ] ng
                nj:f64[1,18,18] = broadcast_in_dim[
                  broadcast_dimensions=(1, 2)
                  shape=(1, 18, 18)
                ] nh
                nk:f64[1,18,18] = select_n ni nj nc
              in (nk,) }
          ] ms
          nl:f64[1,18,18] = transpose[permutation=(0, 2, 1)] nb
        in (nl,) }
    ] mk
    nm:f64[18,18] = transpose[permutation=(1, 0)] mj
    nn:f64[1,18,18] = broadcast_in_dim[
      broadcast_dimensions=(1, 2)
      shape=(1, 18, 18)
    ] nm
    no:f64[1,18,18] = custom_linear_solve[
      const_lengths=_LinearSolveTuple(matvec=1, vecmat=1, solve=1, transpose_solve=1)
      jaxprs=_LinearSolveTuple(matvec={ lambda ; a:f64[1,18,18] b:f64[1,18,18]. let
    c:f64[1,18,18] = dot_general[
      dimension_numbers=(([2], [2]), ([0], [0]))
      precision=(Precision.HIGHEST, Precision.HIGHEST)
    ] a b
    d:f64[1,18,18] = transpose[permutation=(0, 2, 1)] c
  in (d,) }, vecmat={ lambda ; a:f64[1,18,18] b:f64[1,18,18]. let
    c:f64[1,18,18] = dot_general[
      dimension_numbers=(([2], [2]), ([0], [0]))
      precision=(Precision.HIGHEST, Precision.HIGHEST)
    ] a b
    d:f64[1,18,18] = transpose[permutation=(0, 2, 1)] c
  in (d,) }, solve={ lambda ; a:f64[1,18,18] b:f64[1,18,18]. let
    c:f64[1,18,18] = pjit[
      name=_cho_solve
      jaxpr={ lambda ; d:f64[1,18,18] e:f64[1,18,18]. let
          f:f64[1,18,18,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(1, 18, 18, 1)
          ] e
          g:f64[1,18,1,18] = transpose[permutation=(0, 2, 3, 1)] f
          h:f64[1,18,18] = reshape[dimensions=None new_sizes=(1, 18, 18)] g
          i:f64[1,18,18] = triangular_solve[
            conjugate_a=False
            left_side=True
            lower=False
            transpose_a=True
            unit_diagonal=False
          ] d h
          j:f64[1,18,1,18] = reshape[dimensions=None new_sizes=(1, 18, 1, 18)] i
          k:f64[1,18,1,18] = slice[
            limit_indices=(1, 18, 1, 18)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] j
          l:f64[1,18,18,1] = transpose[permutation=(0, 3, 1, 2)] k
          m:f64[1,18,18] = squeeze[dimensions=(3,)] l
          n:f64[1,18,18,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(1, 18, 18, 1)
          ] m
          o:f64[1,18,1,18] = transpose[permutation=(0, 2, 3, 1)] n
          p:f64[1,18,18] = reshape[dimensions=None new_sizes=(1, 18, 18)] o
          q:f64[1,18,18] = triangular_solve[
            conjugate_a=False
            left_side=True
            lower=False
            transpose_a=False
            unit_diagonal=False
          ] d p
          r:f64[1,18,1,18] = reshape[dimensions=None new_sizes=(1, 18, 1, 18)] q
          s:f64[1,18,1,18] = slice[
            limit_indices=(1, 18, 1, 18)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] r
          t:f64[1,18,18,1] = transpose[permutation=(0, 3, 1, 2)] s
          u:f64[1,18,18] = squeeze[dimensions=(3,)] t
        in (u,) }
    ] a b
  in (c,) }, transpose_solve={ lambda ; a:f64[1,18,18] b:f64[1,18,18]. let
    c:f64[1,18,18] = pjit[
      name=_cho_solve
      jaxpr={ lambda ; d:f64[1,18,18] e:f64[1,18,18]. let
          f:f64[1,18,18,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(1, 18, 18, 1)
          ] e
          g:f64[1,18,1,18] = transpose[permutation=(0, 2, 3, 1)] f
          h:f64[1,18,18] = reshape[dimensions=None new_sizes=(1, 18, 18)] g
          i:f64[1,18,18] = triangular_solve[
            conjugate_a=False
            left_side=True
            lower=False
            transpose_a=True
            unit_diagonal=False
          ] d h
          j:f64[1,18,1,18] = reshape[dimensions=None new_sizes=(1, 18, 1, 18)] i
          k:f64[1,18,1,18] = slice[
            limit_indices=(1, 18, 1, 18)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] j
          l:f64[1,18,18,1] = transpose[permutation=(0, 3, 1, 2)] k
          m:f64[1,18,18] = squeeze[dimensions=(3,)] l
          n:f64[1,18,18,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(1, 18, 18, 1)
          ] m
          o:f64[1,18,1,18] = transpose[permutation=(0, 2, 3, 1)] n
          p:f64[1,18,18] = reshape[dimensions=None new_sizes=(1, 18, 18)] o
          q:f64[1,18,18] = triangular_solve[
            conjugate_a=False
            left_side=True
            lower=False
            transpose_a=False
            unit_diagonal=False
          ] d p
          r:f64[1,18,1,18] = reshape[dimensions=None new_sizes=(1, 18, 1, 18)] q
          s:f64[1,18,1,18] = slice[
            limit_indices=(1, 18, 1, 18)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] r
          t:f64[1,18,18,1] = transpose[permutation=(0, 3, 1, 2)] s
          u:f64[1,18,18] = squeeze[dimensions=(3,)] t
        in (u,) }
    ] a b
  in (c,) })
    ] mi mi ml ml nn
    np:f64[1,18,18] = transpose[permutation=(0, 2, 1)] no
  in (np,) } in
let _take8 = { lambda ; nq:f64[1,12,1,3] nr:i64[]. let
    ns:i64[] = pjit[
      name=remainder
      jaxpr={ lambda ; nt:i64[] nu:i64[]. let
          nv:bool[] = eq nu 0
          nw:i64[] = pjit[
            name=_where
            jaxpr={ lambda ; nx:bool[] ny:i64[] nz:i64[]. let
                oa:i64[] = select_n nx nz ny
              in (oa,) }
          ] nv 1 nu
          ob:i64[] = rem nt nw
          oc:bool[] = ne ob 0
          od:bool[] = lt ob 0
          oe:bool[] = lt nw 0
          of:bool[] = ne od oe
          og:bool[] = and of oc
          oh:i64[] = add ob nw
          oi:i64[] = select_n og ob oh
        in (oi,) }
    ] nr 1
    oj:i64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] ns
    ok:f64[1,12,3] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(1, 12, 1, 3)
      unique_indices=False
    ] nq oj
  in (ok,) } in
let cross2 = { lambda ; ol:f64[1,13,3] om:f64[13,3]. let
    on:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    oo:f64[1,13] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(1, 13, 1)
      unique_indices=True
    ] ol on
    op:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    oq:f64[1,13] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(1, 13, 1)
      unique_indices=True
    ] ol op
    or:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    os:f64[1,13] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(1, 13, 1)
      unique_indices=True
    ] ol or
    ot:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    ou:f64[13] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(13, 1)
      unique_indices=True
    ] om ot
    ov:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    ow:f64[13] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(13, 1)
      unique_indices=True
    ] om ov
    ox:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    oy:f64[13] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(13, 1)
      unique_indices=True
    ] om ox
    oz:f64[1,13] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 13)] oy
    pa:f64[1,13] = mul oq oz
    pb:f64[1,13] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 13)] ow
    pc:f64[1,13] = mul os pb
    pd:f64[1,13] = sub pa pc
    pe:f64[1,13] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 13)] ou
    pf:f64[1,13] = mul os pe
    pg:f64[1,13] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 13)] oy
    ph:f64[1,13] = mul oo pg
    pi:f64[1,13] = sub pf ph
    pj:f64[1,13] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 13)] ow
    pk:f64[1,13] = mul oo pj
    pl:f64[1,13] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 13)] ou
    pm:f64[1,13] = mul oq pl
    pn:f64[1,13] = sub pk pm
    po:f64[1,13,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(1, 13, 1)
    ] pd
    pp:f64[1,13,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(1, 13, 1)
    ] pi
    pq:f64[1,13,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(1, 13, 1)
    ] pn
    pr:f64[1,13,3] = concatenate[dimension=2] po pp pq
  in (pr,) } in
let _take9 = { lambda ; ps:f64[1,13,4] pt:i64[4]. let
    pu:i64[4] = pjit[
      name=remainder
      jaxpr={ lambda ; ir:i64[4] is:i64[]. let
          it:bool[] = eq is 0
          iu:i64[] = pjit[
            name=_where
            jaxpr={ lambda ; hx:bool[] hy:i64[] hz:i64[]. let
                ia:i64[] = select_n hx hz hy
              in (ia,) }
          ] it 1 is
          iv:i64[4] = rem ir iu
          iw:bool[4] = ne iv 0
          ix:bool[4] = lt iv 0
          iy:bool[] = lt iu 0
          iz:bool[4] = ne ix iy
          ja:bool[4] = and iz iw
          jb:i64[4] = add iv iu
          jc:i64[4] = select_n ja iv jb
        in (jc,) }
    ] pt 13
    pv:i64[4,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(4, 1)] pu
    pw:f64[1,4,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 2), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(1, 1, 4)
      unique_indices=False
    ] ps pv
  in (pw,) } in
let cross3 = { lambda ; px:f64[1,4,3] py:f64[1,4,3]. let
    pz:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    qa:f64[1,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(1, 4, 1)
      unique_indices=True
    ] px pz
    qb:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    qc:f64[1,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(1, 4, 1)
      unique_indices=True
    ] px qb
    qd:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    qe:f64[1,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(1, 4, 1)
      unique_indices=True
    ] px qd
    qf:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    qg:f64[1,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(1, 4, 1)
      unique_indices=True
    ] py qf
    qh:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    qi:f64[1,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(1, 4, 1)
      unique_indices=True
    ] py qh
    qj:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    qk:f64[1,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(1, 4, 1)
      unique_indices=True
    ] py qj
    ql:f64[1,4] = mul qc qk
    qm:f64[1,4] = mul qe qi
    qn:f64[1,4] = sub ql qm
    qo:f64[1,4] = mul qe qg
    qp:f64[1,4] = mul qa qk
    qq:f64[1,4] = sub qo qp
    qr:f64[1,4] = mul qa qi
    qs:f64[1,4] = mul qc qg
    qt:f64[1,4] = sub qr qs
    qu:f64[1,4,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(1, 4, 1)
    ] qn
    qv:f64[1,4,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(1, 4, 1)
    ] qq
    qw:f64[1,4,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(1, 4, 1)
    ] qt
    qx:f64[1,4,3] = concatenate[dimension=2] qu qv qw
  in (qx,) } in
let _take10 = { lambda ; qy:f64[1,14,3] qz:i32[13]. let
    ra:i32[13] = pjit[
      name=remainder
      jaxpr={ lambda ; rb:i32[13] rc:i32[]. let
          rd:bool[] = eq rc 0
          re:i32[] = pjit[name=_where jaxpr=_where6] rd 1 rc
          rf:i32[13] = rem rb re
          rg:bool[13] = ne rf 0
          rh:bool[13] = lt rf 0
          ri:bool[] = lt re 0
          rj:bool[13] = ne rh ri
          rk:bool[13] = and rj rg
          rl:i32[13] = add rf re
          rm:i32[13] = select_n rk rf rl
        in (rm,) }
    ] qz 14
    rn:i32[13,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(13, 1)] ra
    ro:f64[1,13,3] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 2), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(1, 1, 3)
      unique_indices=False
    ] qy rn
  in (ro,) } in
let _take11 = { lambda ; rp:f64[12,1,3] rq:i64[]. let
    rr:i64[] = pjit[
      name=remainder
      jaxpr={ lambda ; nt:i64[] nu:i64[]. let
          nv:bool[] = eq nu 0
          nw:i64[] = pjit[
            name=_where
            jaxpr={ lambda ; nx:bool[] ny:i64[] nz:i64[]. let
                oa:i64[] = select_n nx nz ny
              in (oa,) }
          ] nv 1 nu
          ob:i64[] = rem nt nw
          oc:bool[] = ne ob 0
          od:bool[] = lt ob 0
          oe:bool[] = lt nw 0
          of:bool[] = ne od oe
          og:bool[] = and of oc
          oh:i64[] = add ob nw
          oi:i64[] = select_n og ob oh
        in (oi,) }
    ] rq 1
    rs:i64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] rr
    rt:f64[12,3] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(12, 1, 3)
      unique_indices=False
    ] rp rs
  in (rt,) } in
let cross4 = { lambda ; ru:f64[12,3] rv:f64[12,3]. let
    rw:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    rx:f64[12] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(12, 1)
      unique_indices=True
    ] ru rw
    ry:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    rz:f64[12] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(12, 1)
      unique_indices=True
    ] ru ry
    sa:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    sb:f64[12] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(12, 1)
      unique_indices=True
    ] ru sa
    sc:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    sd:f64[12] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(12, 1)
      unique_indices=True
    ] rv sc
    se:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    sf:f64[12] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(12, 1)
      unique_indices=True
    ] rv se
    sg:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    sh:f64[12] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(12, 1)
      unique_indices=True
    ] rv sg
    si:f64[12] = mul rz sh
    sj:f64[12] = mul sb sf
    sk:f64[12] = sub si sj
    sl:f64[12] = mul sb sd
    sm:f64[12] = mul rx sh
    sn:f64[12] = sub sl sm
    so:f64[12] = mul rx sf
    sp:f64[12] = mul rz sd
    sq:f64[12] = sub so sp
    sr:f64[12,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(12, 1)] sk
    ss:f64[12,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(12, 1)] sn
    st:f64[12,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(12, 1)] sq
    su:f64[12,3] = concatenate[dimension=1] sr ss st
  in (su,) } in
let _take12 = { lambda ; sv:f64[13,4] sw:i64[18]. let
    sx:i64[18] = pjit[
      name=remainder
      jaxpr={ lambda ; lu:i64[18] lv:i64[]. let
          lw:bool[] = eq lv 0
          lx:i64[] = pjit[
            name=_where
            jaxpr={ lambda ; hx:bool[] hy:i64[] hz:i64[]. let
                ia:i64[] = select_n hx hz hy
              in (ia,) }
          ] lw 1 lv
          ly:i64[18] = rem lu lx
          lz:bool[18] = ne ly 0
          ma:bool[18] = lt ly 0
          mb:bool[] = lt lx 0
          mc:bool[18] = ne ma mb
          md:bool[18] = and mc lz
          me:i64[18] = add ly lx
          mf:i64[18] = select_n md ly me
        in (mf,) }
    ] sw 13
    sy:i64[18,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(18, 1)] sx
    sz:f64[18,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(1,), collapsed_slice_dims=(0,), start_index_map=(0,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(1, 4)
      unique_indices=False
    ] sv sy
  in (sz,) } in
let cross5 = { lambda ; ta:f64[18,3] tb:f64[1,18,3]. let
    tc:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    td:f64[18] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(18, 1)
      unique_indices=True
    ] ta tc
    te:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    tf:f64[18] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(18, 1)
      unique_indices=True
    ] ta te
    tg:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    th:f64[18] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(18, 1)
      unique_indices=True
    ] ta tg
    ti:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    tj:f64[1,18] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(1, 18, 1)
      unique_indices=True
    ] tb ti
    tk:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    tl:f64[1,18] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(1, 18, 1)
      unique_indices=True
    ] tb tk
    tm:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    tn:f64[1,18] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(1, 18, 1)
      unique_indices=True
    ] tb tm
    to:f64[1,18] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 18)] tf
    tp:f64[1,18] = mul to tn
    tq:f64[1,18] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 18)] th
    tr:f64[1,18] = mul tq tl
    ts:f64[1,18] = sub tp tr
    tt:f64[1,18] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 18)] th
    tu:f64[1,18] = mul tt tj
    tv:f64[1,18] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 18)] td
    tw:f64[1,18] = mul tv tn
    tx:f64[1,18] = sub tu tw
    ty:f64[1,18] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 18)] td
    tz:f64[1,18] = mul ty tl
    ua:f64[1,18] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 18)] tf
    ub:f64[1,18] = mul ua tj
    uc:f64[1,18] = sub tz ub
    ud:f64[1,18,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(1, 18, 1)
    ] ts
    ue:f64[1,18,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(1, 18, 1)
    ] tx
    uf:f64[1,18,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(1, 18, 1)
    ] uc
    ug:f64[1,18,3] = concatenate[dimension=2] ud ue uf
  in (ug,) } in
let cross6 = { lambda ; uh:f64[1,18,3] ui:f64[1,18,3]. let
    uj:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    uk:f64[1,18] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(1, 18, 1)
      unique_indices=True
    ] uh uj
    ul:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    um:f64[1,18] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(1, 18, 1)
      unique_indices=True
    ] uh ul
    un:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    uo:f64[1,18] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(1, 18, 1)
      unique_indices=True
    ] uh un
    up:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    uq:f64[1,18] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(1, 18, 1)
      unique_indices=True
    ] ui up
    ur:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    us:f64[1,18] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(1, 18, 1)
      unique_indices=True
    ] ui ur
    ut:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    uu:f64[1,18] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(1, 18, 1)
      unique_indices=True
    ] ui ut
    uv:f64[1,18] = mul um uu
    uw:f64[1,18] = mul uo us
    ux:f64[1,18] = sub uv uw
    uy:f64[1,18] = mul uo uq
    uz:f64[1,18] = mul uk uu
    va:f64[1,18] = sub uy uz
    vb:f64[1,18] = mul uk us
    vc:f64[1,18] = mul um uq
    vd:f64[1,18] = sub vb vc
    ve:f64[1,18,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(1, 18, 1)
    ] ux
    vf:f64[1,18,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(1, 18, 1)
    ] va
    vg:f64[1,18,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(1, 18, 1)
    ] vd
    vh:f64[1,18,3] = concatenate[dimension=2] ve vf vg
  in (vh,) } in
let cross7 = { lambda ; vi:f64[1,1,3] vj:f64[1,1,6,3]. let
    vk:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    vl:f64[1,1] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(1, 1, 1)
      unique_indices=True
    ] vi vk
    vm:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    vn:f64[1,1] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(1, 1, 1)
      unique_indices=True
    ] vi vm
    vo:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    vp:f64[1,1] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(1, 1, 1)
      unique_indices=True
    ] vi vo
    vq:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    vr:f64[1,1,6] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(1, 1, 6, 1)
      unique_indices=True
    ] vj vq
    vs:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    vt:f64[1,1,6] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(1, 1, 6, 1)
      unique_indices=True
    ] vj vs
    vu:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    vv:f64[1,1,6] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(1, 1, 6, 1)
      unique_indices=True
    ] vj vu
    vw:f64[1,1,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(1, 1, 1)
    ] vn
    vx:f64[1,1,6] = mul vw vv
    vy:f64[1,1,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(1, 1, 1)
    ] vp
    vz:f64[1,1,6] = mul vy vt
    wa:f64[1,1,6] = sub vx vz
    wb:f64[1,1,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(1, 1, 1)
    ] vp
    wc:f64[1,1,6] = mul wb vr
    wd:f64[1,1,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(1, 1, 1)
    ] vl
    we:f64[1,1,6] = mul wd vv
    wf:f64[1,1,6] = sub wc we
    wg:f64[1,1,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(1, 1, 1)
    ] vl
    wh:f64[1,1,6] = mul wg vt
    wi:f64[1,1,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(1, 1, 1)
    ] vn
    wj:f64[1,1,6] = mul wi vr
    wk:f64[1,1,6] = sub wh wj
    wl:f64[1,1,6,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(1, 1, 6, 1)
    ] wa
    wm:f64[1,1,6,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(1, 1, 6, 1)
    ] wf
    wn:f64[1,1,6,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(1, 1, 6, 1)
    ] wk
    wo:f64[1,1,6,3] = concatenate[dimension=3] wl wm wn
  in (wo,) } in
let cross8 = { lambda ; wp:f64[1,12,3] wq:f64[1,12,3]. let
    wr:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    ws:f64[1,12] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(1, 12, 1)
      unique_indices=True
    ] wp wr
    wt:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    wu:f64[1,12] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(1, 12, 1)
      unique_indices=True
    ] wp wt
    wv:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    ww:f64[1,12] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(1, 12, 1)
      unique_indices=True
    ] wp wv
    wx:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    wy:f64[1,12] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(1, 12, 1)
      unique_indices=True
    ] wq wx
    wz:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    xa:f64[1,12] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(1, 12, 1)
      unique_indices=True
    ] wq wz
    xb:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    xc:f64[1,12] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(1, 12, 1)
      unique_indices=True
    ] wq xb
    xd:f64[1,12] = mul wu xc
    xe:f64[1,12] = mul ww xa
    xf:f64[1,12] = sub xd xe
    xg:f64[1,12] = mul ww wy
    xh:f64[1,12] = mul ws xc
    xi:f64[1,12] = sub xg xh
    xj:f64[1,12] = mul ws xa
    xk:f64[1,12] = mul wu wy
    xl:f64[1,12] = sub xj xk
    xm:f64[1,12,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(1, 12, 1)
    ] xf
    xn:f64[1,12,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(1, 12, 1)
    ] xi
    xo:f64[1,12,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(1, 12, 1)
    ] xl
    xp:f64[1,12,3] = concatenate[dimension=2] xm xn xo
  in (xp,) } in
let _take13 = { lambda ; xq:f64[1,13,3,3] xr:i64[4]. let
    xs:i64[4] = pjit[
      name=remainder
      jaxpr={ lambda ; ir:i64[4] is:i64[]. let
          it:bool[] = eq is 0
          iu:i64[] = pjit[
            name=_where
            jaxpr={ lambda ; hx:bool[] hy:i64[] hz:i64[]. let
                ia:i64[] = select_n hx hz hy
              in (ia,) }
          ] it 1 is
          iv:i64[4] = rem ir iu
          iw:bool[4] = ne iv 0
          ix:bool[4] = lt iv 0
          iy:bool[] = lt iu 0
          iz:bool[4] = ne ix iy
          ja:bool[4] = and iz iw
          jb:i64[4] = add iv iu
          jc:i64[4] = select_n ja iv jb
        in (jc,) }
    ] xr 13
    xt:i64[4,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(4, 1)] xs
    xu:f64[1,4,3,3] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 2, 3), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(1, 1, 3, 3)
      unique_indices=False
    ] xq xt
  in (xu,) } in
let _take14 = { lambda ; xv:f64[1,13] xw:i64[4]. let
    xx:i64[4] = pjit[
      name=remainder
      jaxpr={ lambda ; ir:i64[4] is:i64[]. let
          it:bool[] = eq is 0
          iu:i64[] = pjit[
            name=_where
            jaxpr={ lambda ; hx:bool[] hy:i64[] hz:i64[]. let
                ia:i64[] = select_n hx hz hy
              in (ia,) }
          ] it 1 is
          iv:i64[4] = rem ir iu
          iw:bool[4] = ne iv 0
          ix:bool[4] = lt iv 0
          iy:bool[] = lt iu 0
          iz:bool[4] = ne ix iy
          ja:bool[4] = and iz iw
          jb:i64[4] = add iv iu
          jc:i64[4] = select_n ja iv jb
        in (jc,) }
    ] xw 13
    xy:i64[4,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(4, 1)] xx
    xz:f64[1,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(1, 1)
      unique_indices=False
    ] xv xy
  in (xz,) } in
let _diag = { lambda ; ya:f64[18]. let
    yb:f64[18] = pad[padding_config=((0, 0, 0),)] ya 0.0
    yc:i64[18,18] = iota[dimension=0 dtype=int64 shape=(18, 18)] 
    yd:i64[18,18] = iota[dimension=1 dtype=int64 shape=(18, 18)] 
    ye:i64[18,18] = add yc 0
    yf:bool[18,18] = eq ye yd
    yg:f64[18] = broadcast_in_dim[broadcast_dimensions=() shape=(18,)] 0.0
    yh:f64[18,18] = pjit[
      name=_where
      jaxpr={ lambda ; yi:bool[18,18] yj:f64[18] yk:f64[18]. let
          yl:f64[18,18] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(18, 18)
          ] yj
          ym:f64[18,18] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(18, 18)
          ] yk
          yn:f64[18,18] = select_n yi ym yl
        in (yn,) }
    ] yf yb yg
  in (yh,) } in
let _where8 = { lambda ; yo:bool[1,12] yp:f64[1,12] yq:i64[]. let
    yr:f64[] = convert_element_type[new_dtype=float64 weak_type=False] yq
    ys:f64[12] = broadcast_in_dim[broadcast_dimensions=() shape=(12,)] yr
    yt:f64[1,12] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 12)] ys
    yu:f64[1,12] = select_n yo yt yp
  in (yu,) } in
let _where9 = { lambda ; yv:bool[1,12] yw:f64[1,12] yx:f64[12]. let
    yy:f64[12] = convert_element_type[new_dtype=float64 weak_type=False] yx
    yz:f64[1,12] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 12)] yy
    za:f64[1,12] = select_n yv yz yw
  in (za,) } in
let _where10 = { lambda ; zb:bool[1,12] zc:f64[1,12] zd:f64[1,12]. let
    ze:f64[1,12] = select_n zb zd zc
  in (ze,) } in
let remainder2 = { lambda ; fa:i32[] fb:i32[]. let
    fc:bool[] = eq fb 0
    fd:i32[] = pjit[name=_where jaxpr=_where6] fc 1 fb
    fe:i32[] = rem fa fd
    ff:bool[] = ne fe 0
    fg:bool[] = lt fe 0
    fh:bool[] = lt fd 0
    fi:bool[] = ne fg fh
    fj:bool[] = and fi ff
    fk:i32[] = add fe fd
    fl:i32[] = select_n fj fe fk
  in (fl,) } in
let clip3 = { lambda ; fy:i64[] fz:i64[] ga:i64[]. let
    gb:i64[] = max fz fy
    gc:i64[] = min ga gb
  in (gc,) } in
let clip4 = { lambda ; gg:i32[] gh:i32[] gi:i32[]. let
    gj:i32[] = max gh gg
    gk:i32[] = min gi gj
  in (gk,) } in
let remainder3 = { lambda ; ht:i64[400] hu:i64[]. let
    hv:bool[] = eq hu 0
    hw:i64[] = pjit[
      name=_where
      jaxpr={ lambda ; hx:bool[] hy:i64[] hz:i64[]. let
          ia:i64[] = select_n hx hz hy
        in (ia,) }
    ] hv 1 hu
    ib:i64[400] = rem ht hw
    ic:bool[400] = ne ib 0
    id:bool[400] = lt ib 0
    ie:bool[] = lt hw 0
    if:bool[400] = ne id ie
    ig:bool[400] = and if ic
    ih:i64[400] = add ib hw
    ii:i64[400] = select_n ig ib ih
  in (ii,) } in
let silu1 = { lambda ; zf:f64[400,512]. let
    zg:f64[400,512] = logistic zf
    zh:f64[400,512] = mul zf zg
  in (zh,) } in
let silu2 = { lambda ; zi:f64[400,7,400]. let
    zj:f64[400,7,400] = logistic zi
    zk:f64[400,7,400] = mul zi zj
  in (zk,) } in
let softplus = { lambda ; zl:f64[400,7,36]. let
    zm:f64[400,7,36] = custom_jvp_call[
      call_jaxpr={ lambda ; zn:f64[400,7,36] zo:i64[]. let
          zp:f64[400,7,36] = pjit[
            name=logaddexp
            jaxpr={ lambda ; zq:f64[400,7,36] zr:i64[]. let
                zs:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] zr
                zt:f64[400,7,36] = max zq zs
                zu:f64[400,7,36] = sub zq zs
                zv:bool[400,7,36] = ne zu zu
                zw:f64[400,7,36] = add zq zs
                zx:f64[400,7,36] = abs zu
                zy:f64[400,7,36] = neg zx
                zz:f64[400,7,36] = exp zy
                baa:f64[400,7,36] = log1p zz
                bab:f64[400,7,36] = add zt baa
                bac:f64[400,7,36] = select_n zv bab zw
              in (bac,) }
          ] zn zo
        in (zp,) }
      jvp_jaxpr_thunk=<function _memoize.<locals>.memoized at 0x7d832d5444c0>
      num_consts=0
      symbolic_zeros=False
    ] zl 0
  in (zm,) } in
let remainder4 = { lambda ; bad:f64[400] bae:i64[]. let
    baf:f64[] = convert_element_type[new_dtype=float64 weak_type=False] bae
    bag:f64[400] = rem bad baf
    bah:bool[400] = ne bag 0.0
    bai:bool[400] = lt bag 0.0
    baj:bool[] = lt baf 0.0
    bak:bool[400] = ne bai baj
    bal:bool[400] = and bak bah
    bam:f64[400] = add bag baf
    ban:f64[400] = select_n bal bag bam
  in (ban,) } in
let clip5 = { lambda ; bao:f64[400] bap:f64[] baq:f64[]. let
    bar:f64[400] = max bap bao
    bas:f64[400] = min baq bar
  in (bas,) } in
let clip6 = { lambda ; bat:f64[400] bau:f64[] bav:f64[]. let
    baw:f64[] = convert_element_type[new_dtype=float64 weak_type=False] bau
    bax:f64[400] = max baw bat
    bay:f64[] = convert_element_type[new_dtype=float64 weak_type=False] bav
    baz:f64[400] = min bay bax
  in (baz,) } in
let remainder5 = { lambda ; ir:i64[4] is:i64[]. let
    it:bool[] = eq is 0
    iu:i64[] = pjit[
      name=_where
      jaxpr={ lambda ; hx:bool[] hy:i64[] hz:i64[]. let
          ia:i64[] = select_n hx hz hy
        in (ia,) }
    ] it 1 is
    iv:i64[4] = rem ir iu
    iw:bool[4] = ne iv 0
    ix:bool[4] = lt iv 0
    iy:bool[] = lt iu 0
    iz:bool[4] = ne ix iy
    ja:bool[4] = and iz iw
    jb:i64[4] = add iv iu
    jc:i64[4] = select_n ja iv jb
  in (jc,) } in
let remainder6 = { lambda ; ir:i64[4] is:i64[]. let
    it:bool[] = eq is 0
    iu:i64[] = pjit[
      name=_where
      jaxpr={ lambda ; hx:bool[] hy:i64[] hz:i64[]. let
          ia:i64[] = select_n hx hz hy
        in (ia,) }
    ] it 1 is
    iv:i64[4] = rem ir iu
    iw:bool[4] = ne iv 0
    ix:bool[4] = lt iv 0
    iy:bool[] = lt iu 0
    iz:bool[4] = ne ix iy
    ja:bool[4] = and iz iw
    jb:i64[4] = add iv iu
    jc:i64[4] = select_n ja iv jb
  in (jc,) } in
let remainder7 = { lambda ; jx:i64[13] jy:i64[]. let
    jz:bool[] = eq jy 0
    ka:i64[] = pjit[
      name=_where
      jaxpr={ lambda ; hx:bool[] hy:i64[] hz:i64[]. let
          ia:i64[] = select_n hx hz hy
        in (ia,) }
    ] jz 1 jy
    kb:i64[13] = rem jx ka
    kc:bool[13] = ne kb 0
    kd:bool[13] = lt kb 0
    ke:bool[] = lt ka 0
    kf:bool[13] = ne kd ke
    kg:bool[13] = and kf kc
    kh:i64[13] = add kb ka
    ki:i64[13] = select_n kg kb kh
  in (ki,) } in
let remainder8 = { lambda ; lu:i64[18] lv:i64[]. let
    lw:bool[] = eq lv 0
    lx:i64[] = pjit[
      name=_where
      jaxpr={ lambda ; hx:bool[] hy:i64[] hz:i64[]. let
          ia:i64[] = select_n hx hz hy
        in (ia,) }
    ] lw 1 lv
    ly:i64[18] = rem lu lx
    lz:bool[18] = ne ly 0
    ma:bool[18] = lt ly 0
    mb:bool[] = lt lx 0
    mc:bool[18] = ne ma mb
    md:bool[18] = and mc lz
    me:i64[18] = add ly lx
    mf:i64[18] = select_n md ly me
  in (mf,) } in
let _cholesky = { lambda ; mm:f64[1,18,18]. let
    mn:f64[1,18,18] = transpose[permutation=(0, 2, 1)] mm
    mo:f64[1,18,18] = transpose[permutation=(0, 2, 1)] mn
    mp:f64[1,18,18] = add mn mo
    mq:f64[1,18,18] = div mp 2.0
    mr:f64[1,18,18] = cholesky mq
    ms:f64[1,18,18] = pjit[
      name=tril
      jaxpr={ lambda ; mt:f64[1,18,18]. let
          mu:i32[18,18] = iota[dimension=0 dtype=int32 shape=(18, 18)] 
          mv:i32[18,18] = add mu 0
          mw:i32[18,18] = iota[dimension=1 dtype=int32 shape=(18, 18)] 
          mx:bool[18,18] = ge mv mw
          my:bool[1,18,18] = broadcast_in_dim[
            broadcast_dimensions=(1, 2)
            shape=(1, 18, 18)
          ] mx
          mz:f64[1,18,18] = broadcast_in_dim[
            broadcast_dimensions=()
            shape=(1, 18, 18)
          ] 0.0
          na:f64[1,18,18] = select_n my mz mt
        in (na,) }
    ] mr
    nb:f64[1,18,18] = pjit[
      name=tril
      jaxpr={ lambda ; nc:f64[1,18,18]. let
          nd:i32[18,18] = iota[dimension=0 dtype=int32 shape=(18, 18)] 
          ne:i32[18,18] = add nd 0
          nf:i32[18,18] = iota[dimension=1 dtype=int32 shape=(18, 18)] 
          ng:bool[18,18] = ge ne nf
          nh:f64[18,18] = broadcast_in_dim[
            broadcast_dimensions=()
            shape=(18, 18)
          ] 0.0
          ni:bool[1,18,18] = broadcast_in_dim[
            broadcast_dimensions=(1, 2)
            shape=(1, 18, 18)
          ] ng
          nj:f64[1,18,18] = broadcast_in_dim[
            broadcast_dimensions=(1, 2)
            shape=(1, 18, 18)
          ] nh
          nk:f64[1,18,18] = select_n ni nj nc
        in (nk,) }
    ] ms
    nl:f64[1,18,18] = transpose[permutation=(0, 2, 1)] nb
  in (nl,) } in
let jaxpr1 = { lambda ; bba:f64[1,18,18] bbb:f64[1,18,18]. let
    bbc:f64[1,18,18] = dot_general[
      dimension_numbers=(([2], [2]), ([0], [0]))
      precision=(Precision.HIGHEST, Precision.HIGHEST)
    ] bba bbb
    bbd:f64[1,18,18] = transpose[permutation=(0, 2, 1)] bbc
  in (bbd,) } in
let jaxpr2 = { lambda ; bbe:f64[1,18,18] bbf:f64[1,18,18]. let
    bbg:f64[1,18,18] = pjit[
      name=_cho_solve
      jaxpr={ lambda ; bbh:f64[1,18,18] bbi:f64[1,18,18]. let
          bbj:f64[1,18,18,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(1, 18, 18, 1)
          ] bbi
          bbk:f64[1,18,1,18] = transpose[permutation=(0, 2, 3, 1)] bbj
          bbl:f64[1,18,18] = reshape[dimensions=None new_sizes=(1, 18, 18)] bbk
          bbm:f64[1,18,18] = triangular_solve[
            conjugate_a=False
            left_side=True
            lower=False
            transpose_a=True
            unit_diagonal=False
          ] bbh bbl
          bbn:f64[1,18,1,18] = reshape[dimensions=None new_sizes=(1, 18, 1, 18)] bbm
          bbo:f64[1,18,1,18] = slice[
            limit_indices=(1, 18, 1, 18)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] bbn
          bbp:f64[1,18,18,1] = transpose[permutation=(0, 3, 1, 2)] bbo
          bbq:f64[1,18,18] = squeeze[dimensions=(3,)] bbp
          bbr:f64[1,18,18,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(1, 18, 18, 1)
          ] bbq
          bbs:f64[1,18,1,18] = transpose[permutation=(0, 2, 3, 1)] bbr
          bbt:f64[1,18,18] = reshape[dimensions=None new_sizes=(1, 18, 18)] bbs
          bbu:f64[1,18,18] = triangular_solve[
            conjugate_a=False
            left_side=True
            lower=False
            transpose_a=False
            unit_diagonal=False
          ] bbh bbt
          bbv:f64[1,18,1,18] = reshape[dimensions=None new_sizes=(1, 18, 1, 18)] bbu
          bbw:f64[1,18,1,18] = slice[
            limit_indices=(1, 18, 1, 18)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] bbv
          bbx:f64[1,18,18,1] = transpose[permutation=(0, 3, 1, 2)] bbw
          bby:f64[1,18,18] = squeeze[dimensions=(3,)] bbx
        in (bby,) }
    ] bbe bbf
  in (bbg,) } in
let jaxpr3 = { lambda ; bbz:f64[1,18,18] bca:f64[1,18,18]. let
    bcb:f64[1,18,18] = pjit[
      name=_cho_solve
      jaxpr={ lambda ; bbh:f64[1,18,18] bbi:f64[1,18,18]. let
          bbj:f64[1,18,18,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(1, 18, 18, 1)
          ] bbi
          bbk:f64[1,18,1,18] = transpose[permutation=(0, 2, 3, 1)] bbj
          bbl:f64[1,18,18] = reshape[dimensions=None new_sizes=(1, 18, 18)] bbk
          bbm:f64[1,18,18] = triangular_solve[
            conjugate_a=False
            left_side=True
            lower=False
            transpose_a=True
            unit_diagonal=False
          ] bbh bbl
          bbn:f64[1,18,1,18] = reshape[dimensions=None new_sizes=(1, 18, 1, 18)] bbm
          bbo:f64[1,18,1,18] = slice[
            limit_indices=(1, 18, 1, 18)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] bbn
          bbp:f64[1,18,18,1] = transpose[permutation=(0, 3, 1, 2)] bbo
          bbq:f64[1,18,18] = squeeze[dimensions=(3,)] bbp
          bbr:f64[1,18,18,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(1, 18, 18, 1)
          ] bbq
          bbs:f64[1,18,1,18] = transpose[permutation=(0, 2, 3, 1)] bbr
          bbt:f64[1,18,18] = reshape[dimensions=None new_sizes=(1, 18, 18)] bbs
          bbu:f64[1,18,18] = triangular_solve[
            conjugate_a=False
            left_side=True
            lower=False
            transpose_a=False
            unit_diagonal=False
          ] bbh bbt
          bbv:f64[1,18,1,18] = reshape[dimensions=None new_sizes=(1, 18, 1, 18)] bbu
          bbw:f64[1,18,1,18] = slice[
            limit_indices=(1, 18, 1, 18)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] bbv
          bbx:f64[1,18,18,1] = transpose[permutation=(0, 3, 1, 2)] bbw
          bby:f64[1,18,18] = squeeze[dimensions=(3,)] bbx
        in (bby,) }
    ] bbz bca
  in (bcb,) } in
let remainder9 = { lambda ; nt:i64[] nu:i64[]. let
    nv:bool[] = eq nu 0
    nw:i64[] = pjit[
      name=_where
      jaxpr={ lambda ; nx:bool[] ny:i64[] nz:i64[]. let
          oa:i64[] = select_n nx nz ny
        in (oa,) }
    ] nv 1 nu
    ob:i64[] = rem nt nw
    oc:bool[] = ne ob 0
    od:bool[] = lt ob 0
    oe:bool[] = lt nw 0
    of:bool[] = ne od oe
    og:bool[] = and of oc
    oh:i64[] = add ob nw
    oi:i64[] = select_n og ob oh
  in (oi,) } in
let remainder10 = { lambda ; rb:i32[13] rc:i32[]. let
    rd:bool[] = eq rc 0
    re:i32[] = pjit[name=_where jaxpr=_where6] rd 1 rc
    rf:i32[13] = rem rb re
    rg:bool[13] = ne rf 0
    rh:bool[13] = lt rf 0
    ri:bool[] = lt re 0
    rj:bool[13] = ne rh ri
    rk:bool[13] = and rj rg
    rl:i32[13] = add rf re
    rm:i32[13] = select_n rk rf rl
  in (rm,) } in
let remainder11 = { lambda ; nt:i64[] nu:i64[]. let
    nv:bool[] = eq nu 0
    nw:i64[] = pjit[
      name=_where
      jaxpr={ lambda ; nx:bool[] ny:i64[] nz:i64[]. let
          oa:i64[] = select_n nx nz ny
        in (oa,) }
    ] nv 1 nu
    ob:i64[] = rem nt nw
    oc:bool[] = ne ob 0
    od:bool[] = lt ob 0
    oe:bool[] = lt nw 0
    of:bool[] = ne od oe
    og:bool[] = and of oc
    oh:i64[] = add ob nw
    oi:i64[] = select_n og ob oh
  in (oi,) } in
let remainder12 = { lambda ; lu:i64[18] lv:i64[]. let
    lw:bool[] = eq lv 0
    lx:i64[] = pjit[
      name=_where
      jaxpr={ lambda ; hx:bool[] hy:i64[] hz:i64[]. let
          ia:i64[] = select_n hx hz hy
        in (ia,) }
    ] lw 1 lv
    ly:i64[18] = rem lu lx
    lz:bool[18] = ne ly 0
    ma:bool[18] = lt ly 0
    mb:bool[] = lt lx 0
    mc:bool[18] = ne ma mb
    md:bool[18] = and mc lz
    me:i64[18] = add ly lx
    mf:i64[18] = select_n md ly me
  in (mf,) } in
let remainder13 = { lambda ; bcc:i64[18] bcd:i64[]. let
    bce:bool[] = eq bcd 0
    bcf:i64[] = pjit[
      name=_where
      jaxpr={ lambda ; hx:bool[] hy:i64[] hz:i64[]. let
          ia:i64[] = select_n hx hz hy
        in (ia,) }
    ] bce 1 bcd
    bcg:i64[18] = rem bcc bcf
    bch:bool[18] = ne bcg 0
    bci:bool[18] = lt bcg 0
    bcj:bool[] = lt bcf 0
    bck:bool[18] = ne bci bcj
    bcl:bool[18] = and bck bch
    bcm:i64[18] = add bcg bcf
    bcn:i64[18] = select_n bcl bcg bcm
  in (bcn,) } in
let _where11 = { lambda ; yi:bool[18,18] yj:f64[18] yk:f64[18]. let
    yl:f64[18,18] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(18, 18)] yj
    ym:f64[18,18] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(18, 18)] yk
    yn:f64[18,18] = select_n yi ym yl
  in (yn,) } in
let _where12 = { lambda ; hx:bool[] hy:i64[] hz:i64[]. let
    ia:i64[] = select_n hx hz hy
  in (ia,) } in
let jaxpr4 = { lambda ; zn:f64[400,7,36] zo:i64[]. let
    zp:f64[400,7,36] = pjit[
      name=logaddexp
      jaxpr={ lambda ; zq:f64[400,7,36] zr:i64[]. let
          zs:f64[] = convert_element_type[new_dtype=float64 weak_type=False] zr
          zt:f64[400,7,36] = max zq zs
          zu:f64[400,7,36] = sub zq zs
          zv:bool[400,7,36] = ne zu zu
          zw:f64[400,7,36] = add zq zs
          zx:f64[400,7,36] = abs zu
          zy:f64[400,7,36] = neg zx
          zz:f64[400,7,36] = exp zy
          baa:f64[400,7,36] = log1p zz
          bab:f64[400,7,36] = add zt baa
          bac:f64[400,7,36] = select_n zv bab zw
        in (bac,) }
    ] zn zo
  in (zp,) } in
let clip7 = { lambda ; bco:i64[] bcp:i64[] bcq:i64[]. let
    bcr:i64[] = max bcp bco
    bcs:i64[] = min bcq bcr
  in (bcs,) } in
let cross9 = { lambda ; bct:f64[400,3] bcu:f64[400,3]. let
    bcv:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    bcw:f64[400] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 1)
      unique_indices=True
    ] bct bcv
    bcx:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    bcy:f64[400] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 1)
      unique_indices=True
    ] bct bcx
    bcz:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    bda:f64[400] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 1)
      unique_indices=True
    ] bct bcz
    bdb:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    bdc:f64[400] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 1)
      unique_indices=True
    ] bcu bdb
    bdd:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    bde:f64[400] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 1)
      unique_indices=True
    ] bcu bdd
    bdf:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    bdg:f64[400] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 1)
      unique_indices=True
    ] bcu bdf
    bdh:f64[400] = mul bcy bdg
    bdi:f64[400] = mul bda bde
    bdj:f64[400] = sub bdh bdi
    bdk:f64[400] = mul bda bdc
    bdl:f64[400] = mul bcw bdg
    bdm:f64[400] = sub bdk bdl
    bdn:f64[400] = mul bcw bde
    bdo:f64[400] = mul bcy bdc
    bdp:f64[400] = sub bdn bdo
    bdq:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] bdj
    bdr:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] bdm
    bds:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] bdp
    bdt:f64[400,3] = concatenate[dimension=1] bdq bdr bds
  in (bdt,) } in
let cross10 = { lambda ; bdu:f64[400,13,3] bdv:f64[13,3]. let
    bdw:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    bdx:f64[400,13] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 13, 1)
      unique_indices=True
    ] bdu bdw
    bdy:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    bdz:f64[400,13] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 13, 1)
      unique_indices=True
    ] bdu bdy
    bea:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    beb:f64[400,13] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 13, 1)
      unique_indices=True
    ] bdu bea
    bec:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    bed:f64[13] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(13, 1)
      unique_indices=True
    ] bdv bec
    bee:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    bef:f64[13] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(13, 1)
      unique_indices=True
    ] bdv bee
    beg:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    beh:f64[13] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(13, 1)
      unique_indices=True
    ] bdv beg
    bei:f64[1,13] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 13)] beh
    bej:f64[400,13] = mul bdz bei
    bek:f64[1,13] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 13)] bef
    bel:f64[400,13] = mul beb bek
    bem:f64[400,13] = sub bej bel
    ben:f64[1,13] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 13)] bed
    beo:f64[400,13] = mul beb ben
    bep:f64[1,13] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 13)] beh
    beq:f64[400,13] = mul bdx bep
    ber:f64[400,13] = sub beo beq
    bes:f64[1,13] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 13)] bef
    bet:f64[400,13] = mul bdx bes
    beu:f64[1,13] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 13)] bed
    bev:f64[400,13] = mul bdz beu
    bew:f64[400,13] = sub bet bev
    bex:f64[400,13,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(400, 13, 1)
    ] bem
    bey:f64[400,13,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(400, 13, 1)
    ] ber
    bez:f64[400,13,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(400, 13, 1)
    ] bew
    bfa:f64[400,13,3] = concatenate[dimension=2] bex bey bez
  in (bfa,) } in
let _take15 = { lambda ; bfb:f64[400,13,3] bfc:i64[4]. let
    bfd:i64[4] = pjit[name=remainder jaxpr=remainder5] bfc 13
    bfe:i64[4,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(4, 1)] bfd
    bff:f64[400,4,3] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 2), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 1, 3)
      unique_indices=False
    ] bfb bfe
  in (bff,) } in
let _take16 = { lambda ; bfg:f64[400,13,4] bfh:i64[4]. let
    bfi:i64[4] = pjit[name=remainder jaxpr=remainder5] bfh 13
    bfj:i64[4,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(4, 1)] bfi
    bfk:f64[400,4,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 2), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 1, 4)
      unique_indices=False
    ] bfg bfj
  in (bfk,) } in
let _take17 = { lambda ; bfl:f64[400,1,3] bfm:i64[4]. let
    bfn:i64[4] = pjit[name=remainder jaxpr=remainder5] bfm 1
    bfo:i64[4,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(4, 1)] bfn
    bfp:f64[400,4,3] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 2), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 1, 3)
      unique_indices=False
    ] bfl bfo
  in (bfp,) } in
let cross11 = { lambda ; bfq:f64[400,4,3] bfr:f64[400,4,3]. let
    bfs:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    bft:f64[400,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 4, 1)
      unique_indices=True
    ] bfq bfs
    bfu:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    bfv:f64[400,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 4, 1)
      unique_indices=True
    ] bfq bfu
    bfw:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    bfx:f64[400,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 4, 1)
      unique_indices=True
    ] bfq bfw
    bfy:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    bfz:f64[400,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 4, 1)
      unique_indices=True
    ] bfr bfy
    bga:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    bgb:f64[400,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 4, 1)
      unique_indices=True
    ] bfr bga
    bgc:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    bgd:f64[400,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 4, 1)
      unique_indices=True
    ] bfr bgc
    bge:f64[400,4] = mul bfv bgd
    bgf:f64[400,4] = mul bfx bgb
    bgg:f64[400,4] = sub bge bgf
    bgh:f64[400,4] = mul bfx bfz
    bgi:f64[400,4] = mul bft bgd
    bgj:f64[400,4] = sub bgh bgi
    bgk:f64[400,4] = mul bft bgb
    bgl:f64[400,4] = mul bfv bfz
    bgm:f64[400,4] = sub bgk bgl
    bgn:f64[400,4,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(400, 4, 1)
    ] bgg
    bgo:f64[400,4,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(400, 4, 1)
    ] bgj
    bgp:f64[400,4,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(400, 4, 1)
    ] bgm
    bgq:f64[400,4,3] = concatenate[dimension=2] bgn bgo bgp
  in (bgq,) } in
let _take18 = { lambda ; bgr:f64[400,13,3] bgs:i64[13]. let
    bgt:i64[13] = pjit[name=remainder jaxpr=remainder7] bgs 13
    bgu:i64[13,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(13, 1)] bgt
    bgv:f64[400,13,3] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 2), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 1, 3)
      unique_indices=False
    ] bgr bgu
  in (bgv,) } in
let _take19 = { lambda ; bgw:f64[400,14,3] bgx:i32[13]. let
    bgy:i32[13] = pjit[name=remainder jaxpr=remainder10] bgx 14
    bgz:i32[13,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(13, 1)] bgy
    bha:f64[400,13,3] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 2), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 1, 3)
      unique_indices=False
    ] bgw bgz
  in (bha,) } in
let _take20 = { lambda ; bhb:f64[400,13,3] bhc:i64[18]. let
    bhd:i64[18] = pjit[name=remainder jaxpr=remainder8] bhc 13
    bhe:i64[18,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(18, 1)] bhd
    bhf:f64[400,18,3] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 2), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 1, 3)
      unique_indices=False
    ] bhb bhe
  in (bhf,) } in
let cross12 = { lambda ; bhg:f64[18,3] bhh:f64[400,18,3]. let
    bhi:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    bhj:f64[18] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(18, 1)
      unique_indices=True
    ] bhg bhi
    bhk:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    bhl:f64[18] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(18, 1)
      unique_indices=True
    ] bhg bhk
    bhm:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    bhn:f64[18] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(18, 1)
      unique_indices=True
    ] bhg bhm
    bho:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    bhp:f64[400,18] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 18, 1)
      unique_indices=True
    ] bhh bho
    bhq:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    bhr:f64[400,18] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 18, 1)
      unique_indices=True
    ] bhh bhq
    bhs:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    bht:f64[400,18] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 18, 1)
      unique_indices=True
    ] bhh bhs
    bhu:f64[1,18] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 18)] bhl
    bhv:f64[400,18] = mul bhu bht
    bhw:f64[1,18] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 18)] bhn
    bhx:f64[400,18] = mul bhw bhr
    bhy:f64[400,18] = sub bhv bhx
    bhz:f64[1,18] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 18)] bhn
    bia:f64[400,18] = mul bhz bhp
    bib:f64[1,18] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 18)] bhj
    bic:f64[400,18] = mul bib bht
    bid:f64[400,18] = sub bia bic
    bie:f64[1,18] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 18)] bhj
    bif:f64[400,18] = mul bie bhr
    big:f64[1,18] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 18)] bhl
    bih:f64[400,18] = mul big bhp
    bii:f64[400,18] = sub bif bih
    bij:f64[400,18,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(400, 18, 1)
    ] bhy
    bik:f64[400,18,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(400, 18, 1)
    ] bid
    bil:f64[400,18,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(400, 18, 1)
    ] bii
    bim:f64[400,18,3] = concatenate[dimension=2] bij bik bil
  in (bim,) } in
let cross13 = { lambda ; bin:f64[400,18,3] bio:f64[400,18,3]. let
    bip:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    biq:f64[400,18] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 18, 1)
      unique_indices=True
    ] bin bip
    bir:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    bis:f64[400,18] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 18, 1)
      unique_indices=True
    ] bin bir
    bit:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    biu:f64[400,18] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 18, 1)
      unique_indices=True
    ] bin bit
    biv:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    biw:f64[400,18] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 18, 1)
      unique_indices=True
    ] bio biv
    bix:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    biy:f64[400,18] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 18, 1)
      unique_indices=True
    ] bio bix
    biz:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    bja:f64[400,18] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 18, 1)
      unique_indices=True
    ] bio biz
    bjb:f64[400,18] = mul bis bja
    bjc:f64[400,18] = mul biu biy
    bjd:f64[400,18] = sub bjb bjc
    bje:f64[400,18] = mul biu biw
    bjf:f64[400,18] = mul biq bja
    bjg:f64[400,18] = sub bje bjf
    bjh:f64[400,18] = mul biq biy
    bji:f64[400,18] = mul bis biw
    bjj:f64[400,18] = sub bjh bji
    bjk:f64[400,18,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(400, 18, 1)
    ] bjd
    bjl:f64[400,18,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(400, 18, 1)
    ] bjg
    bjm:f64[400,18,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(400, 18, 1)
    ] bjj
    bjn:f64[400,18,3] = concatenate[dimension=2] bjk bjl bjm
  in (bjn,) } in
let _take21 = { lambda ; bjo:f64[400,18,3] bjp:i64[4]. let
    bjq:i64[4] = pjit[name=remainder jaxpr=remainder5] bjp 18
    bjr:i64[4,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(4, 1)] bjq
    bjs:f64[400,4,3] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 2), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 1, 3)
      unique_indices=False
    ] bjo bjr
  in (bjs,) } in
let cross14 = { lambda ; bjt:f64[400,1,3] bju:f64[400,1,6,3]. let
    bjv:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    bjw:f64[400,1] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 1, 1)
      unique_indices=True
    ] bjt bjv
    bjx:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    bjy:f64[400,1] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 1, 1)
      unique_indices=True
    ] bjt bjx
    bjz:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    bka:f64[400,1] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 1, 1)
      unique_indices=True
    ] bjt bjz
    bkb:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    bkc:f64[400,1,6] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 1, 6, 1)
      unique_indices=True
    ] bju bkb
    bkd:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    bke:f64[400,1,6] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 1, 6, 1)
      unique_indices=True
    ] bju bkd
    bkf:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    bkg:f64[400,1,6] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 1, 6, 1)
      unique_indices=True
    ] bju bkf
    bkh:f64[400,1,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(400, 1, 1)
    ] bjy
    bki:f64[400,1,6] = mul bkh bkg
    bkj:f64[400,1,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(400, 1, 1)
    ] bka
    bkk:f64[400,1,6] = mul bkj bke
    bkl:f64[400,1,6] = sub bki bkk
    bkm:f64[400,1,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(400, 1, 1)
    ] bka
    bkn:f64[400,1,6] = mul bkm bkc
    bko:f64[400,1,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(400, 1, 1)
    ] bjw
    bkp:f64[400,1,6] = mul bko bkg
    bkq:f64[400,1,6] = sub bkn bkp
    bkr:f64[400,1,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(400, 1, 1)
    ] bjw
    bks:f64[400,1,6] = mul bkr bke
    bkt:f64[400,1,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(400, 1, 1)
    ] bjy
    bku:f64[400,1,6] = mul bkt bkc
    bkv:f64[400,1,6] = sub bks bku
    bkw:f64[400,1,6,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(400, 1, 6, 1)
    ] bkl
    bkx:f64[400,1,6,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(400, 1, 6, 1)
    ] bkq
    bky:f64[400,1,6,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(400, 1, 6, 1)
    ] bkv
    bkz:f64[400,1,6,3] = concatenate[dimension=3] bkw bkx bky
  in (bkz,) } in
let cross15 = { lambda ; bla:f64[400,12,3] blb:f64[400,12,3]. let
    blc:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    bld:f64[400,12] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 12, 1)
      unique_indices=True
    ] bla blc
    ble:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    blf:f64[400,12] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 12, 1)
      unique_indices=True
    ] bla ble
    blg:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    blh:f64[400,12] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 12, 1)
      unique_indices=True
    ] bla blg
    bli:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    blj:f64[400,12] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 12, 1)
      unique_indices=True
    ] blb bli
    blk:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    bll:f64[400,12] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 12, 1)
      unique_indices=True
    ] blb blk
    blm:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    bln:f64[400,12] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 12, 1)
      unique_indices=True
    ] blb blm
    blo:f64[400,12] = mul blf bln
    blp:f64[400,12] = mul blh bll
    blq:f64[400,12] = sub blo blp
    blr:f64[400,12] = mul blh blj
    bls:f64[400,12] = mul bld bln
    blt:f64[400,12] = sub blr bls
    blu:f64[400,12] = mul bld bll
    blv:f64[400,12] = mul blf blj
    blw:f64[400,12] = sub blu blv
    blx:f64[400,12,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(400, 12, 1)
    ] blq
    bly:f64[400,12,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(400, 12, 1)
    ] blt
    blz:f64[400,12,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(400, 12, 1)
    ] blw
    bma:f64[400,12,3] = concatenate[dimension=2] blx bly blz
  in (bma,) } in
let _take22 = { lambda ; bmb:f64[400,13,3,3] bmc:i64[4]. let
    bmd:i64[4] = pjit[name=remainder jaxpr=remainder5] bmc 13
    bme:i64[4,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(4, 1)] bmd
    bmf:f64[400,4,3,3] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 2, 3), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 1, 3, 3)
      unique_indices=False
    ] bmb bme
  in (bmf,) } in
let _take23 = { lambda ; bmg:f64[13] bmh:i64[4]. let
    bmi:i64[4] = pjit[name=remainder jaxpr=remainder6] bmh 13
    bmj:i64[4,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(4, 1)] bmi
    bmk:f64[4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(), collapsed_slice_dims=(0,), start_index_map=(0,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(1,)
      unique_indices=False
    ] bmg bmj
  in (bmk,) } in
let _take24 = { lambda ; bml:f64[400,18] bmm:i64[4]. let
    bmn:i64[4] = pjit[name=remainder jaxpr=remainder5] bmm 18
    bmo:i64[4,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(4, 1)] bmn
    bmp:f64[400,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 1)
      unique_indices=False
    ] bml bmo
  in (bmp,) } in
let cross16 = { lambda ; bmq:f64[400,13,3] bmr:f64[400,13,3]. let
    bms:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    bmt:f64[400,13] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 13, 1)
      unique_indices=True
    ] bmq bms
    bmu:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    bmv:f64[400,13] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 13, 1)
      unique_indices=True
    ] bmq bmu
    bmw:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    bmx:f64[400,13] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 13, 1)
      unique_indices=True
    ] bmq bmw
    bmy:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    bmz:f64[400,13] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 13, 1)
      unique_indices=True
    ] bmr bmy
    bna:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    bnb:f64[400,13] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 13, 1)
      unique_indices=True
    ] bmr bna
    bnc:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    bnd:f64[400,13] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 13, 1)
      unique_indices=True
    ] bmr bnc
    bne:f64[400,13] = mul bmv bnd
    bnf:f64[400,13] = mul bmx bnb
    bng:f64[400,13] = sub bne bnf
    bnh:f64[400,13] = mul bmx bmz
    bni:f64[400,13] = mul bmt bnd
    bnj:f64[400,13] = sub bnh bni
    bnk:f64[400,13] = mul bmt bnb
    bnl:f64[400,13] = mul bmv bmz
    bnm:f64[400,13] = sub bnk bnl
    bnn:f64[400,13,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(400, 13, 1)
    ] bng
    bno:f64[400,13,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(400, 13, 1)
    ] bnj
    bnp:f64[400,13,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(400, 13, 1)
    ] bnm
    bnq:f64[400,13,3] = concatenate[dimension=2] bnn bno bnp
  in (bnq,) } in
let _where13 = { lambda ; bnr:bool[400,12] bns:f64[400,12] bnt:i64[]. let
    bnu:f64[] = convert_element_type[new_dtype=float64 weak_type=False] bnt
    bnv:f64[12] = broadcast_in_dim[broadcast_dimensions=() shape=(12,)] bnu
    bnw:f64[400,12] = broadcast_in_dim[
      broadcast_dimensions=(1,)
      shape=(400, 12)
    ] bnv
    bnx:f64[400,12] = select_n bnr bnw bns
  in (bnx,) } in
let _where14 = { lambda ; bny:bool[400,12] bnz:f64[400,12] boa:f64[12]. let
    bob:f64[12] = convert_element_type[new_dtype=float64 weak_type=False] boa
    boc:f64[400,12] = broadcast_in_dim[
      broadcast_dimensions=(1,)
      shape=(400, 12)
    ] bob
    bod:f64[400,12] = select_n bny boc bnz
  in (bod,) } in
let _where15 = { lambda ; boe:bool[400,12] bof:f64[400,12] bog:f64[400,12]. let
    boh:f64[400,12] = select_n boe bog bof
  in (boh,) } in
let silu3 = { lambda ; boi:f64[271,512]. let
    boj:f64[271,512] = logistic boi
    bok:f64[271,512] = mul boi boj
  in (bok,) } in
let softplus1 = { lambda ; bol:f64[271,9]. let
    bom:f64[271,9] = custom_jvp_call[
      call_jaxpr={ lambda ; bon:f64[271,9] boo:i64[]. let
          bop:f64[271,9] = pjit[
            name=logaddexp
            jaxpr={ lambda ; boq:f64[271,9] bor:i64[]. let
                bos:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] bor
                bot:f64[271,9] = max boq bos
                bou:f64[271,9] = sub boq bos
                bov:bool[271,9] = ne bou bou
                bow:f64[271,9] = add boq bos
                box:f64[271,9] = abs bou
                boy:f64[271,9] = neg box
                boz:f64[271,9] = exp boy
                bpa:f64[271,9] = log1p boz
                bpb:f64[271,9] = add bot bpa
                bpc:f64[271,9] = select_n bov bpb bow
              in (bpc,) }
          ] bon boo
        in (bop,) }
      jvp_jaxpr_thunk=<function _memoize.<locals>.memoized at 0x7d833d486820>
      num_consts=0
      symbolic_zeros=False
    ] bol 0
  in (bom,) } in
let _normal = { lambda ; bpd:key<fry>[]. let
    bpe:f64[271,9] = pjit[
      name=_normal_real
      jaxpr={ lambda ; bpf:key<fry>[]. let
          bpg:f64[271,9] = pjit[
            name=_uniform
            jaxpr={ lambda ; bph:key<fry>[] bpi:f64[] bpj:f64[]. let
                bpk:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1, 1)
                ] bpi
                bpl:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1, 1)
                ] bpj
                bpm:u64[271,9] = random_bits[bit_width=64 shape=(271, 9)] bph
                bpn:u64[271,9] = shift_right_logical bpm 12
                bpo:u64[271,9] = or bpn 4607182418800017408
                bpp:f64[271,9] = bitcast_convert_type[new_dtype=float64] bpo
                bpq:f64[271,9] = sub bpp 1.0
                bpr:f64[1,1] = sub bpl bpk
                bps:f64[271,9] = mul bpq bpr
                bpt:f64[271,9] = add bps bpk
                bpu:f64[271,9] = max bpk bpt
              in (bpu,) }
          ] bpf -0.9999999999999999 1.0
          bpv:f64[271,9] = erf_inv bpg
          bpw:f64[271,9] = mul 1.4142135623730951 bpv
        in (bpw,) }
    ] bpd
  in (bpe,) } in
let _where16 = { lambda ; f:bool[] g:i32[] h:i32[]. let
    i:i32[] = select_n f h g
  in (i,) } in
let silu4 = { lambda ; bpx:f64[271,512]. let
    bpy:f64[271,512] = logistic bpx
    bpz:f64[271,512] = sub 1.0 bpy
    bqa:f64[271,512] = mul bpy bpz
    bqb:f64[271,512] = mul bpx bpy
  in (bqb, bpy, bqa) } in
let silu5 = { lambda ; bqc:f64[271,512] bqd:f64[271,512] bqe:f64[271,512] bqf:f64[271,512]. let
    bqg:f64[271,512] = mul bqd bqf
    bqh:f64[271,512] = mul bqg bqe
    bqi:f64[271,512] = mul bqf bqc
    bqj:f64[271,512] = add_any bqh bqi
  in (bqj,) } in
let softplus2 = { lambda ; bqk:f64[271,9]. let
    bql:f64[271,9] = custom_jvp_call[
      call_jaxpr={ lambda ; bqm:f64[271,9] bqn:f64[]. let
          bqo:f64[271,9] = pjit[
            name=logaddexp
            jaxpr={ lambda ; bqp:f64[271,9] bqq:f64[]. let
                bqr:f64[271,9] = max bqp bqq
                bqs:f64[271,9] = sub bqp bqq
                bqt:bool[271,9] = ne bqs bqs
                bqu:f64[271,9] = add bqp bqq
                bqv:f64[271,9] = abs bqs
                bqw:f64[271,9] = neg bqv
                bqx:f64[271,9] = exp bqw
                bqy:f64[271,9] = log1p bqx
                bqz:f64[271,9] = add bqr bqy
                bra:f64[271,9] = select_n bqt bqz bqu
              in (bra,) }
          ] bqm bqn
        in (bqo,) }
      jvp_jaxpr_thunk=<function _memoize.<locals>.memoized at 0x7d832c133820>
      num_consts=0
      symbolic_zeros=False
    ] bqk 0.0
    brb:bool[271,9] = eq bqk inf
    brc:f64[271,9] = broadcast_in_dim[broadcast_dimensions=() shape=(271, 9)] 0.0
    brd:f64[271,9] = select_n brb bqk brc
    bre:bool[271,9] = eq bql inf
    brf:f64[271,9] = broadcast_in_dim[broadcast_dimensions=() shape=(271, 9)] 0.0
    brg:f64[271,9] = select_n bre bql brf
    brh:f64[271,9] = sub brd brg
    bri:f64[271,9] = exp brh
  in (bql, bri) } in
let softplus3 = { lambda ; brj:f64[271,9] brk:f64[271,9]. let
    brl:f64[271,9] = mul brk brj
  in (brl,) } in
let _where17 = { lambda ; hx:bool[] hy:i64[] hz:i64[]. let
    ia:i64[] = select_n hx hz hy
  in (ia,) } in
let tril = { lambda ; mt:f64[1,18,18]. let
    mu:i32[18,18] = iota[dimension=0 dtype=int32 shape=(18, 18)] 
    mv:i32[18,18] = add mu 0
    mw:i32[18,18] = iota[dimension=1 dtype=int32 shape=(18, 18)] 
    mx:bool[18,18] = ge mv mw
    my:bool[1,18,18] = broadcast_in_dim[
      broadcast_dimensions=(1, 2)
      shape=(1, 18, 18)
    ] mx
    mz:f64[1,18,18] = broadcast_in_dim[
      broadcast_dimensions=()
      shape=(1, 18, 18)
    ] 0.0
    na:f64[1,18,18] = select_n my mz mt
  in (na,) } in
let tril1 = { lambda ; nc:f64[1,18,18]. let
    nd:i32[18,18] = iota[dimension=0 dtype=int32 shape=(18, 18)] 
    ne:i32[18,18] = add nd 0
    nf:i32[18,18] = iota[dimension=1 dtype=int32 shape=(18, 18)] 
    ng:bool[18,18] = ge ne nf
    nh:f64[18,18] = broadcast_in_dim[broadcast_dimensions=() shape=(18, 18)] 0.0
    ni:bool[1,18,18] = broadcast_in_dim[
      broadcast_dimensions=(1, 2)
      shape=(1, 18, 18)
    ] ng
    nj:f64[1,18,18] = broadcast_in_dim[
      broadcast_dimensions=(1, 2)
      shape=(1, 18, 18)
    ] nh
    nk:f64[1,18,18] = select_n ni nj nc
  in (nk,) } in
let _cho_solve = { lambda ; bbh:f64[1,18,18] bbi:f64[1,18,18]. let
    bbj:f64[1,18,18,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(1, 18, 18, 1)
    ] bbi
    bbk:f64[1,18,1,18] = transpose[permutation=(0, 2, 3, 1)] bbj
    bbl:f64[1,18,18] = reshape[dimensions=None new_sizes=(1, 18, 18)] bbk
    bbm:f64[1,18,18] = triangular_solve[
      conjugate_a=False
      left_side=True
      lower=False
      transpose_a=True
      unit_diagonal=False
    ] bbh bbl
    bbn:f64[1,18,1,18] = reshape[dimensions=None new_sizes=(1, 18, 1, 18)] bbm
    bbo:f64[1,18,1,18] = slice[
      limit_indices=(1, 18, 1, 18)
      start_indices=(0, 0, 0, 0)
      strides=None
    ] bbn
    bbp:f64[1,18,18,1] = transpose[permutation=(0, 3, 1, 2)] bbo
    bbq:f64[1,18,18] = squeeze[dimensions=(3,)] bbp
    bbr:f64[1,18,18,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(1, 18, 18, 1)
    ] bbq
    bbs:f64[1,18,1,18] = transpose[permutation=(0, 2, 3, 1)] bbr
    bbt:f64[1,18,18] = reshape[dimensions=None new_sizes=(1, 18, 18)] bbs
    bbu:f64[1,18,18] = triangular_solve[
      conjugate_a=False
      left_side=True
      lower=False
      transpose_a=False
      unit_diagonal=False
    ] bbh bbt
    bbv:f64[1,18,1,18] = reshape[dimensions=None new_sizes=(1, 18, 1, 18)] bbu
    bbw:f64[1,18,1,18] = slice[
      limit_indices=(1, 18, 1, 18)
      start_indices=(0, 0, 0, 0)
      strides=None
    ] bbv
    bbx:f64[1,18,18,1] = transpose[permutation=(0, 3, 1, 2)] bbw
    bby:f64[1,18,18] = squeeze[dimensions=(3,)] bbx
  in (bby,) } in
let isinf = { lambda ; brm:f64[]. let
    brn:f64[] = abs brm
    bro:bool[] = eq brn inf
  in (bro,) } in
let _where18 = { lambda ; nx:bool[] ny:i64[] nz:i64[]. let
    oa:i64[] = select_n nx nz ny
  in (oa,) } in
let _where19 = { lambda ; hx:bool[] hy:i64[] hz:i64[]. let
    ia:i64[] = select_n hx hz hy
  in (ia,) } in
let logaddexp = { lambda ; zq:f64[400,7,36] zr:i64[]. let
    zs:f64[] = convert_element_type[new_dtype=float64 weak_type=False] zr
    zt:f64[400,7,36] = max zq zs
    zu:f64[400,7,36] = sub zq zs
    zv:bool[400,7,36] = ne zu zu
    zw:f64[400,7,36] = add zq zs
    zx:f64[400,7,36] = abs zu
    zy:f64[400,7,36] = neg zx
    zz:f64[400,7,36] = exp zy
    baa:f64[400,7,36] = log1p zz
    bab:f64[400,7,36] = add zt baa
    bac:f64[400,7,36] = select_n zv bab zw
  in (bac,) } in
let remainder14 = { lambda ; brp:f64[400] brq:i64[]. let
    brr:f64[] = convert_element_type[new_dtype=float64 weak_type=False] brq
    brs:f64[400] = rem brp brr
    brt:bool[400] = ne brs 0.0
    bru:bool[400] = lt brs 0.0
    brv:bool[] = lt brr 0.0
    brw:bool[400] = ne bru brv
    brx:bool[400] = and brw brt
    bry:f64[400] = add brs brr
    brz:f64[400] = select_n brx brs bry
  in (brz,) } in
let clip8 = { lambda ; bsa:f64[400] bsb:f64[] bsc:f64[]. let
    bsd:f64[400] = max bsb bsa
    bse:f64[400] = min bsc bsd
  in (bse,) } in
let clip9 = { lambda ; bsf:f64[400,12] bsg:f64[12] bsh:f64[12]. let
    bsi:f64[1,12] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 12)] bsg
    bsj:f64[400,12] = max bsi bsf
    bsk:f64[1,12] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 12)] bsh
    bsl:f64[400,12] = min bsk bsj
  in (bsl,) } in
let jaxpr5 = { lambda ; bon:f64[271,9] boo:i64[]. let
    bop:f64[271,9] = pjit[
      name=logaddexp
      jaxpr={ lambda ; boq:f64[271,9] bor:i64[]. let
          bos:f64[] = convert_element_type[new_dtype=float64 weak_type=False] bor
          bot:f64[271,9] = max boq bos
          bou:f64[271,9] = sub boq bos
          bov:bool[271,9] = ne bou bou
          bow:f64[271,9] = add boq bos
          box:f64[271,9] = abs bou
          boy:f64[271,9] = neg box
          boz:f64[271,9] = exp boy
          bpa:f64[271,9] = log1p boz
          bpb:f64[271,9] = add bot bpa
          bpc:f64[271,9] = select_n bov bpb bow
        in (bpc,) }
    ] bon boo
  in (bop,) } in
let _normal_real = { lambda ; bpf:key<fry>[]. let
    bpg:f64[271,9] = pjit[
      name=_uniform
      jaxpr={ lambda ; bph:key<fry>[] bpi:f64[] bpj:f64[]. let
          bpk:f64[1,1] = broadcast_in_dim[broadcast_dimensions=() shape=(1, 1)] bpi
          bpl:f64[1,1] = broadcast_in_dim[broadcast_dimensions=() shape=(1, 1)] bpj
          bpm:u64[271,9] = random_bits[bit_width=64 shape=(271, 9)] bph
          bpn:u64[271,9] = shift_right_logical bpm 12
          bpo:u64[271,9] = or bpn 4607182418800017408
          bpp:f64[271,9] = bitcast_convert_type[new_dtype=float64] bpo
          bpq:f64[271,9] = sub bpp 1.0
          bpr:f64[1,1] = sub bpl bpk
          bps:f64[271,9] = mul bpq bpr
          bpt:f64[271,9] = add bps bpk
          bpu:f64[271,9] = max bpk bpt
        in (bpu,) }
    ] bpf -0.9999999999999999 1.0
    bpv:f64[271,9] = erf_inv bpg
    bpw:f64[271,9] = mul 1.4142135623730951 bpv
  in (bpw,) } in
let jaxpr6 = { lambda ; bqm:f64[271,9] bqn:f64[]. let
    bqo:f64[271,9] = pjit[
      name=logaddexp
      jaxpr={ lambda ; bqp:f64[271,9] bqq:f64[]. let
          bqr:f64[271,9] = max bqp bqq
          bqs:f64[271,9] = sub bqp bqq
          bqt:bool[271,9] = ne bqs bqs
          bqu:f64[271,9] = add bqp bqq
          bqv:f64[271,9] = abs bqs
          bqw:f64[271,9] = neg bqv
          bqx:f64[271,9] = exp bqw
          bqy:f64[271,9] = log1p bqx
          bqz:f64[271,9] = add bqr bqy
          bra:f64[271,9] = select_n bqt bqz bqu
        in (bra,) }
    ] bqm bqn
  in (bqo,) } in
let isinf1 = { lambda ; brm:f64[]. let
    brn:f64[] = abs brm
    bro:bool[] = eq brn inf
  in (bro,) } in
let jaxpr7 = { lambda ; bsm:f64[400,18,18] bsn:f64[400,18,18]. let
    bso:f64[400,18,18] = dot_general[
      dimension_numbers=(([2], [2]), ([0], [0]))
      precision=(Precision.HIGHEST, Precision.HIGHEST)
    ] bsm bsn
    bsp:f64[400,18,18] = transpose[permutation=(0, 2, 1)] bso
  in (bsp,) } in
let logaddexp1 = { lambda ; boq:f64[271,9] bor:i64[]. let
    bos:f64[] = convert_element_type[new_dtype=float64 weak_type=False] bor
    bot:f64[271,9] = max boq bos
    bou:f64[271,9] = sub boq bos
    bov:bool[271,9] = ne bou bou
    bow:f64[271,9] = add boq bos
    box:f64[271,9] = abs bou
    boy:f64[271,9] = neg box
    boz:f64[271,9] = exp boy
    bpa:f64[271,9] = log1p boz
    bpb:f64[271,9] = add bot bpa
    bpc:f64[271,9] = select_n bov bpb bow
  in (bpc,) } in
let _uniform = { lambda ; bph:key<fry>[] bpi:f64[] bpj:f64[]. let
    bpk:f64[1,1] = broadcast_in_dim[broadcast_dimensions=() shape=(1, 1)] bpi
    bpl:f64[1,1] = broadcast_in_dim[broadcast_dimensions=() shape=(1, 1)] bpj
    bpm:u64[271,9] = random_bits[bit_width=64 shape=(271, 9)] bph
    bpn:u64[271,9] = shift_right_logical bpm 12
    bpo:u64[271,9] = or bpn 4607182418800017408
    bpp:f64[271,9] = bitcast_convert_type[new_dtype=float64] bpo
    bpq:f64[271,9] = sub bpp 1.0
    bpr:f64[1,1] = sub bpl bpk
    bps:f64[271,9] = mul bpq bpr
    bpt:f64[271,9] = add bps bpk
    bpu:f64[271,9] = max bpk bpt
  in (bpu,) } in
let logaddexp2 = { lambda ; bqp:f64[271,9] bqq:f64[]. let
    bqr:f64[271,9] = max bqp bqq
    bqs:f64[271,9] = sub bqp bqq
    bqt:bool[271,9] = ne bqs bqs
    bqu:f64[271,9] = add bqp bqq
    bqv:f64[271,9] = abs bqs
    bqw:f64[271,9] = neg bqv
    bqx:f64[271,9] = exp bqw
    bqy:f64[271,9] = log1p bqx
    bqz:f64[271,9] = add bqr bqy
    bra:f64[271,9] = select_n bqt bqz bqu
  in (bra,) } in
let _cho_solve1 = { lambda ; bsq:f64[400,18,18] bsr:f64[400,18,18]. let
    bss:f64[400,18,18,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(400, 18, 18, 1)
    ] bsr
    bst:f64[400,18,1,18] = transpose[permutation=(0, 2, 3, 1)] bss
    bsu:f64[400,18,18] = reshape[dimensions=None new_sizes=(400, 18, 18)] bst
    bsv:f64[400,18,18] = triangular_solve[
      conjugate_a=False
      left_side=True
      lower=False
      transpose_a=True
      unit_diagonal=False
    ] bsq bsu
    bsw:f64[400,18,1,18] = reshape[dimensions=None new_sizes=(400, 18, 1, 18)] bsv
    bsx:f64[400,18,1,18] = slice[
      limit_indices=(400, 18, 1, 18)
      start_indices=(0, 0, 0, 0)
      strides=None
    ] bsw
    bsy:f64[400,18,18,1] = transpose[permutation=(0, 3, 1, 2)] bsx
    bsz:f64[400,18,18] = squeeze[dimensions=(3,)] bsy
    bta:f64[400,18,18,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(400, 18, 18, 1)
    ] bsz
    btb:f64[400,18,1,18] = transpose[permutation=(0, 2, 3, 1)] bta
    btc:f64[400,18,18] = reshape[dimensions=None new_sizes=(400, 18, 18)] btb
    btd:f64[400,18,18] = triangular_solve[
      conjugate_a=False
      left_side=True
      lower=False
      transpose_a=False
      unit_diagonal=False
    ] bsq btc
    bte:f64[400,18,1,18] = reshape[dimensions=None new_sizes=(400, 18, 1, 18)] btd
    btf:f64[400,18,1,18] = slice[
      limit_indices=(400, 18, 1, 18)
      start_indices=(0, 0, 0, 0)
      strides=None
    ] bte
    btg:f64[400,18,18,1] = transpose[permutation=(0, 3, 1, 2)] btf
    bth:f64[400,18,18] = squeeze[dimensions=(3,)] btg
  in (bth,) } in
{ lambda ; bti:f64[18] btj:i32[0] btk:f64[12] btl:i32[0] btm:f64[13] btn:i32[0] bto:f64[13,3,3]
    btp:i32[0] btq:i64[4] btr:f64[36,2] bts:f64[9,2] btt:i64[4] btu:f64[4] btv:f64[]
    btw:f64[3] btx:f64[3] bty:f64[3] btz:f64[] bua:f64[8] bub:f64[3] buc:f64[3] bud:f64[3]
    bue:i64[3] buf:f64[3] bug:f64[12] buh:i32[12] bui:i32[12] buj:f64[12,2] buk:f64[12]
    bul:f64[12] bum:f64[12] bun:f64[12,2] buo:f64[18,3] bup:f64[18,3] buq:f64[18]
    bur:f64[18] bus:i64[18] but:f64[3] buu:i64[4] buv:i64[4] buw:i64[4] bux:i64[4]
    buy:i64[4] buz:i64[4] bva:i64[4] bvb:i64[4] bvc:i64[4] bvd:i64[4] bve:i64[4]
    bvf:i64[4] bvg:i64[4] bvh:i64[4] bvi:i64[13] bvj:i64[13] bvk:i64[4] bvl:i64[4]
    bvm:i64[4] bvn:i64[4] bvo:i64[4] bvp:i64[4] bvq:i64[4] bvr:i64[4] bvs:i64[4]
    bvt:i64[13] bvu:i64[13] bvv:i64[18] bvw:f64[13,3] bvx:f64[13,4] bvy:f64[13,3]
    bvz:f64[13,4] bwa:f64[13,3] bwb:f64[13,4] bwc:i64[4] bwd:i64[4] bwe:i64[4] bwf:i64[4]
    bwg:i64[4] bwh:i64[4] bwi:i64[4] bwj:i64[4] bwk:i64[4] bwl:i64[4] bwm:i64[4]
    bwn:i64[4] bwo:i64[4] bwp:i64[4] bwq:i64[4] bwr:i64[4] bws:i64[13] bwt:i64[13]
    bwu:i64[13] bwv:i64[13] bww:i32[13] bwx:i32[13] bwy:f64[4] bwz:f64[4] bxa:i64[18]
    bxb:f64[4] bxc:i64[18] bxd:i64[4] bxe:i64[18] bxf:i64[4] bxg:i64[4] bxh:i64[4]
    bxi:i64[4] bxj:i64[4] bxk:i64[4] bxl:i64[4] bxm:i64[4] bxn:i64[4] bxo:i64[4]
    bxp:i64[4] bxq:i64[13] bxr:i64[13] bxs:i64[4] bxt:i64[4] bxu:i64[4] bxv:i64[4]
    bxw:i64[4] bxx:i64[4] bxy:i64[4] bxz:i64[4] bya:i64[4] byb:i64[4] byc:i64[4]
    byd:i64[4] bye:i64[13] byf:i64[13] byg:i64[13] byh:i64[18] byi:i64[132] byj:i64[132]
    byk:i64[4] byl:f64[4] bym:i64[3] byn:f64[3] byo:f64[12] byp:i64[4] byq:f64[17]
    byr:f64[4] bys:i64[3] byt:f64[3] byu:i64[1] byv:i32[] byw:f64[7,400] byx:f64[7,189,400]
    byy:f64[7,400] byz:f64[7,400,400] bza:f64[7,400] bzb:f64[7,400,400] bzc:f64[7,400]
    bzd:f64[7,400,400] bze:f64[7,54] bzf:f64[7,400,54] bzg:f64[7,400] bzh:f64[7,189,400]
    bzi:f64[7,400] bzj:f64[7,400,400] bzk:f64[7,400] bzl:f64[7,400,400] bzm:f64[7,400]
    bzn:f64[7,400,400] bzo:f64[7,54] bzp:f64[7,400,54] bzq:i64[5] bzr:f64[7,400]
    bzs:f64[7,189,400] bzt:f64[7,400] bzu:f64[7,400,400] bzv:f64[7,400] bzw:f64[7,400,400]
    bzx:f64[7,400] bzy:f64[7,400,400] bzz:f64[7,54] caa:f64[7,400,54] cab:f64[180]
    cac:f64[180] cad:f64[9] cae:f64[9] caf:f64[] cag:i32[] cah:f32[512] cai:f32[180,512]
    caj:f32[512] cak:f32[512,512] cal:f32[18] cam:f32[512,18] can:f32[512] cao:f32[180,512]
    cap:f32[512] caq:f32[512,512] car:f32[18] cas:f32[512,18] cat:f32[512] cau:f32[180,512]
    cav:f32[512] caw:f32[512,512] cax:f32[18] cay:f32[512,18] caz:i32[] cba:f32[512]
    cbb:f32[189,512] cbc:f32[512] cbd:f32[512,512] cbe:f32[1] cbf:f32[512,1] cbg:f32[512]
    cbh:f32[189,512] cbi:f32[512] cbj:f32[512,512] cbk:f32[1] cbl:f32[512,1] cbm:f32[512]
    cbn:f32[189,512] cbo:f32[512] cbp:f32[512,512] cbq:f32[1] cbr:f32[512,1] cbs:f32[512]
    cbt:f32[189,512] cbu:f32[512] cbv:f32[512,512] cbw:f32[1] cbx:f32[512,1] cby:f32[512]
    cbz:f32[189,512] cca:f32[512] ccb:f32[512,512] ccc:f32[1] ccd:f32[512,1] cce:f32[512]
    ccf:f32[189,512] ccg:f32[512] cch:f32[512,512] cci:f32[1] ccj:f32[512,1] cck:f32[512]
    ccl:f32[189,512] ccm:f32[512] ccn:f32[512,512] cco:f32[1] ccp:f32[512,1] ccq:f32[512]
    ccr:f32[189,512] ccs:f32[512] cct:f32[512,512] ccu:f32[1] ccv:f32[512,1] ccw:f64[]
    ccx:f64[] ccy:i32[] ccz:f32[] cda:f32[] cdb:f32[] cdc:f64[180] cdd:f64[180] cde:f64[]
    cdf:f64[180] cdg:f64[1,19] cdh:f64[1,18] cdi:f64[1,13,3] cdj:f64[1,13,4] cdk:f64[1,13,3]
    cdl:f64[1,13,3] cdm:f64[1,13,3] cdn:f64[1,13,3] cdo:f64[1,13,4] cdp:f64[1,13,3,3]
    cdq:f64[1,13] cdr:f64[1,13,3] cds:f64[1,13,3] cdt:f64[1,18,3] cdu:f64[1,18,3]
    cdv:f64[1,18,3] cdw:f64[1,18,3] cdx:f64[1,18,18] cdy:f64[1,18,18] cdz:f64[1,0,18]
    cea:f64[1,0] ceb:f64[1,0] cec:f64[1,18] ced:f64[1,18] cee:f64[1,0] cef:f64[1,18]
    ceg:f64[1,180] ceh:f64[1] cei:f64[1] cej:f64[1] cek:f64[1] cel:f64[1] cem:f64[1]
    cen:f64[1] ceo:f64[1] cep:f64[1] ceq:f64[1] cer:f64[1] ces:f64[1] cet:f64[1]
    ceu:f64[1] cev:f64[1] cew:f64[1] cex:f64[1] cey:f64[1] cez:f64[1] cfa:f64[1]
    cfb:f64[1] cfc:f64[1,12] cfd:f64[1,12] cfe:f64[1,12] cff:f64[1,12] cfg:bool[1,4]
    cfh:f64[1,4] cfi:f64[1,12] cfj:f64[1] cfk:f64[1] cfl:f64[1] cfm:f64[1] cfn:f64[1]
    cfo:f64[1] cfp:f64[1] cfq:f64[1] cfr:f64[1] cfs:f64[1] cft:f64[1] cfu:f64[1]
    cfv:f64[1] cfw:f64[1] cfx:f64[1] cfy:f64[1] cfz:f64[1] cga:f64[1] cgb:f64[1]
    cgc:f64[1] cgd:f64[1] cge:f64[1,180] cgf:f64[1,19] cgg:f64[1,18] cgh:f64[1,13,3]
    cgi:f64[1,13,4] cgj:f64[1,13,3] cgk:f64[1,13,3] cgl:f64[1,13,3] cgm:f64[1,13,3]
    cgn:f64[1,13,4] cgo:f64[1,13,3,3] cgp:f64[1,13] cgq:f64[1,13,3] cgr:f64[1,13,3]
    cgs:f64[1,18,3] cgt:f64[1,18,3] cgu:f64[1,18,3] cgv:f64[1,18,3] cgw:f64[1,18,18]
    cgx:f64[1,18,18] cgy:f64[1,0,18] cgz:f64[1,0] cha:f64[1,0] chb:f64[1,18] chc:f64[1,18]
    chd:f64[1,0] che:f64[1,18] chf:f64[1] chg:f64[1] chh:f64[1] chi:f64[1,18] chj:f64[1,12]
    chk:f64[1,13] chl:f64[1] chm:f64[1] chn:f64[1,9] cho:f64[1,180] chp:f64[15000,372]
    chq:i32[] chr:i32[] chs:u32[2] cht:f64[4000,372] chu:i32[] chv:i32[] chw:u32[2]
    chx:u32[2]. let
    chy:key<fry>[] = random_wrap[impl=fry] chx
    chz:key<fry>[2] = random_split[shape=(2,)] chy
    cia:u32[2,2] = random_unwrap chz
    cib:u32[1,2] = slice[
      limit_indices=(1, 2)
      start_indices=(0, 0)
      strides=(1, 1)
    ] cia
    cic:u32[2] = squeeze[dimensions=(0,)] cib
    cid:u32[1,2] = slice[
      limit_indices=(2, 2)
      start_indices=(1, 0)
      strides=(1, 1)
    ] cia
    cie:u32[2] = squeeze[dimensions=(0,)] cid
    cif:i32[] cig:f64[7,400] cih:f64[7,189,400] cii:f64[7,400] cij:f64[7,400,400]
      cik:f64[7,400] cil:f64[7,400,400] cim:f64[7,400] cin:f64[7,400,400] cio:f64[7,54]
      cip:f64[7,400,54] ciq:f64[7,400] cir:f64[7,189,400] cis:f64[7,400] cit:f64[7,400,400]
      ciu:f64[7,400] civ:f64[7,400,400] ciw:f64[7,400] cix:f64[7,400,400] ciy:f64[7,54]
      ciz:f64[7,400,54] cja:i64[5] cjb:f64[7,400] cjc:f64[7,189,400] cjd:f64[7,400]
      cje:f64[7,400,400] cjf:f64[7,400] cjg:f64[7,400,400] cjh:f64[7,400] cji:f64[7,400,400]
      cjj:f64[7,54] cjk:f64[7,400,54] cjl:f64[180] cjm:f64[180] cjn:f64[9] cjo:f64[9]
      cjp:f64[] cjq:f64[180] cjr:f64[180] cjs:f64[] cjt:f64[180] cju:f64[1,19] cjv:f64[1,18]
      cjw:f64[1,13,3] cjx:f64[1,13,4] cjy:f64[1,13,3] cjz:f64[1,13,3] cka:f64[1,13,3]
      ckb:f64[1,13,3] ckc:f64[1,13,4] ckd:f64[1,13,3,3] cke:f64[1,13] ckf:f64[1,13,3]
      ckg:f64[1,13,3] ckh:f64[1,18,3] cki:f64[1,18,3] ckj:f64[1,18,3] ckk:f64[1,18,3]
      ckl:f64[1,18,18] ckm:f64[1,18,18] ckn:f64[1,0,18] cko:f64[1,0] ckp:f64[1,0]
      ckq:f64[1,18] ckr:f64[1,18] cks:f64[1,0] ckt:f64[1,18] cku:f64[1,180] ckv:f64[1]
      ckw:f64[1] ckx:f64[1] cky:f64[1] ckz:f64[1] cla:f64[1] clb:f64[1] clc:f64[1]
      cld:f64[1] cle:f64[1] clf:f64[1] clg:f64[1] clh:f64[1] cli:f64[1] clj:f64[1]
      clk:f64[1] cll:f64[1] clm:f64[1] cln:f64[1] clo:f64[1] clp:f64[1] clq:f64[1,12]
      clr:f64[1,12] cls:f64[1,12] clt:f64[1,12] clu:bool[1,4] clv:f64[1,4] clw:f64[1,12]
      clx:f64[1] cly:f64[1] clz:f64[1] cma:f64[1] cmb:f64[1] cmc:f64[1] cmd:f64[1]
      cme:f64[1] cmf:f64[1] cmg:f64[1] cmh:f64[1] cmi:f64[1] cmj:f64[1] cmk:f64[1]
      cml:f64[1] cmm:f64[1] cmn:f64[1] cmo:f64[1] cmp:f64[1] cmq:f64[1] cmr:f64[1]
      cms:f64[1,180] cmt:f64[1,19] cmu:f64[1,18] cmv:f64[1,13,3] cmw:f64[1,13,4]
      cmx:f64[1,13,3] cmy:f64[1,13,3] cmz:f64[1,13,3] cna:f64[1,13,3] cnb:f64[1,13,4]
      cnc:f64[1,13,3,3] cnd:f64[1,13] cne:f64[1,13,3] cnf:f64[1,13,3] cng:f64[1,18,3]
      cnh:f64[1,18,3] cni:f64[1,18,3] cnj:f64[1,18,3] cnk:f64[1,18,18] cnl:f64[1,18,18]
      cnm:f64[1,0,18] cnn:f64[1,0] cno:f64[1,0] cnp:f64[1,18] cnq:f64[1,18] cnr:f64[1,0]
      cns:f64[1,18] cnt:f64[1] cnu:f64[1] cnv:f64[1] cnw:f64[1,18] cnx:f64[1,12]
      cny:f64[1,13] cnz:f64[1] coa:f64[1] cob:f64[1,9] coc:f64[1,180] cod:f64[4000,372]
      coe:i32[] cof:i32[] cog:u32[2] coh:u32[2] coi:f64[1000,1,180] coj:f64[1000,1,9]
      cok:f64[1000,1] col:f64[1000,1] com:f64[1000,1,180] con:f64[1000,1] = scan[
      _split_transpose=False
      jaxpr={ lambda ; coo:f32[180,512] cop:f32[512] coq:f32[512,512] cor:f32[512]
          cos:f32[512,18] cot:f32[18] cou:f64[18] cov:i32[0] cow:f64[12] cox:i32[0]
          coy:f64[13] coz:i32[0] cpa:f64[13,3,3] cpb:i32[0] cpc:i64[4] cpd:f64[36,2]
          cpe:f64[9,2] cpf:i64[4] cpg:f64[4] cph:f64[] cpi:f64[3] cpj:f64[3] cpk:f64[3]
          cpl:f64[] cpm:f64[8] cpn:f64[3] cpo:f64[3] cpp:f64[3] cpq:i64[3] cpr:f64[3]
          cps:f64[12] cpt:i32[12] cpu:i32[12] cpv:f64[12,2] cpw:f64[12] cpx:f64[12]
          cpy:f64[12] cpz:f64[12,2] cqa:f64[18,3] cqb:f64[18,3] cqc:f64[18] cqd:f64[18]
          cqe:i64[18] cqf:f64[3] cqg:i64[4] cqh:i64[4] cqi:i64[4] cqj:i64[4] cqk:i64[4]
          cql:i64[4] cqm:i64[4] cqn:i64[4] cqo:i64[4] cqp:i64[4] cqq:i64[4] cqr:i64[4]
          cqs:i64[4] cqt:i64[4] cqu:i64[13] cqv:i64[13] cqw:i64[4] cqx:i64[4] cqy:i64[4]
          cqz:i64[4] cra:i64[4] crb:i64[4] crc:i64[4] crd:i64[4] cre:i64[4] crf:i64[13]
          crg:i64[13] crh:i64[18] cri:f64[13,3] crj:f64[13,4] crk:f64[13,3] crl:f64[13,4]
          crm:f64[13,3] crn:f64[13,4] cro:i64[4] crp:i64[4] crq:i64[4] crr:i64[4]
          crs:i64[4] crt:i64[4] cru:i64[4] crv:i64[4] crw:i64[4] crx:i64[4] cry:i64[4]
          crz:i64[4] csa:i64[4] csb:i64[4] csc:i64[4] csd:i64[4] cse:i64[13] csf:i64[13]
          csg:i64[13] csh:i64[13] csi:i32[13] csj:i32[13] csk:f64[4] csl:f64[4] csm:i64[18]
          csn:f64[4] cso:i64[18] csp:i64[4] csq:i64[18] csr:i64[4] css:i64[4] cst:i64[4]
          csu:i64[4] csv:i64[4] csw:i64[4] csx:i64[4] csy:i64[4] csz:i64[4] cta:i64[4]
          ctb:i64[4] ctc:i64[13] ctd:i64[13] cte:i64[4] ctf:i64[4] ctg:i64[4] cth:i64[4]
          cti:i64[4] ctj:i64[4] ctk:i64[4] ctl:i64[4] ctm:i64[4] ctn:i64[4] cto:i64[4]
          ctp:i64[4] ctq:i64[13] ctr:i64[13] cts:i64[13] ctt:i64[18] ctu:i64[132]
          ctv:i64[132] ctw:i64[4] ctx:f64[4] cty:i64[3] ctz:f64[3] cua:f64[12] cub:i64[4]
          cuc:f64[17] cud:f64[4] cue:i64[3] cuf:f64[3] cug:i64[1] cuh:i32[] cui:f64[7,400]
          cuj:f64[7,189,400] cuk:f64[7,400] cul:f64[7,400,400] cum:f64[7,400] cun:f64[7,400,400]
          cuo:f64[7,400] cup:f64[7,400,400] cuq:f64[7,54] cur:f64[7,400,54] cus:f64[7,400]
          cut:f64[7,189,400] cuu:f64[7,400] cuv:f64[7,400,400] cuw:f64[7,400] cux:f64[7,400,400]
          cuy:f64[7,400] cuz:f64[7,400,400] cva:f64[7,54] cvb:f64[7,400,54] cvc:i64[5]
          cvd:f64[7,400] cve:f64[7,189,400] cvf:f64[7,400] cvg:f64[7,400,400] cvh:f64[7,400]
          cvi:f64[7,400,400] cvj:f64[7,400] cvk:f64[7,400,400] cvl:f64[7,54] cvm:f64[7,400,54]
          cvn:f64[180] cvo:f64[180] cvp:f64[9] cvq:f64[9] cvr:f64[] cvs:f64[180]
          cvt:f64[180] cvu:f64[] cvv:f64[180] cvw:f64[1,19] cvx:f64[1,18] cvy:f64[1,13,3]
          cvz:f64[1,13,4] cwa:f64[1,13,3] cwb:f64[1,13,3] cwc:f64[1,13,3] cwd:f64[1,13,3]
          cwe:f64[1,13,4] cwf:f64[1,13,3,3] cwg:f64[1,13] cwh:f64[1,13,3] cwi:f64[1,13,3]
          cwj:f64[1,18,3] cwk:f64[1,18,3] cwl:f64[1,18,3] cwm:f64[1,18,3] cwn:f64[1,18,18]
          cwo:f64[1,18,18] cwp:f64[1,0,18] cwq:f64[1,0] cwr:f64[1,0] cws:f64[1,18]
          cwt:f64[1,18] cwu:f64[1,0] cwv:f64[1,18] cww:f64[1,180] cwx:f64[1] cwy:f64[1]
          cwz:f64[1] cxa:f64[1] cxb:f64[1] cxc:f64[1] cxd:f64[1] cxe:f64[1] cxf:f64[1]
          cxg:f64[1] cxh:f64[1] cxi:f64[1] cxj:f64[1] cxk:f64[1] cxl:f64[1] cxm:f64[1]
          cxn:f64[1] cxo:f64[1] cxp:f64[1] cxq:f64[1] cxr:f64[1] cxs:f64[1,12] cxt:f64[1,12]
          cxu:f64[1,12] cxv:f64[1,12] cxw:bool[1,4] cxx:f64[1,4] cxy:f64[1,12] cxz:f64[1]
          cya:f64[1] cyb:f64[1] cyc:f64[1] cyd:f64[1] cye:f64[1] cyf:f64[1] cyg:f64[1]
          cyh:f64[1] cyi:f64[1] cyj:f64[1] cyk:f64[1] cyl:f64[1] cym:f64[1] cyn:f64[1]
          cyo:f64[1] cyp:f64[1] cyq:f64[1] cyr:f64[1] cys:f64[1] cyt:f64[1] cyu:f64[1,180]
          cyv:f64[1,19] cyw:f64[1,18] cyx:f64[1,13,3] cyy:f64[1,13,4] cyz:f64[1,13,3]
          cza:f64[1,13,3] czb:f64[1,13,3] czc:f64[1,13,3] czd:f64[1,13,4] cze:f64[1,13,3,3]
          czf:f64[1,13] czg:f64[1,13,3] czh:f64[1,13,3] czi:f64[1,18,3] czj:f64[1,18,3]
          czk:f64[1,18,3] czl:f64[1,18,3] czm:f64[1,18,18] czn:f64[1,18,18] czo:f64[1,0,18]
          czp:f64[1,0] czq:f64[1,0] czr:f64[1,18] czs:f64[1,18] czt:f64[1,0] czu:f64[1,18]
          czv:f64[1] czw:f64[1] czx:f64[1] czy:f64[1,18] czz:f64[1,12] daa:f64[1,13]
          dab:f64[1] dac:f64[1] dad:f64[1,9] dae:f64[1,180] daf:f64[4000,372] dag:i32[]
          dah:i32[] dai:u32[2] daj:u32[2]. let
          dak:key<fry>[] = random_wrap[impl=fry] daj
          dal:key<fry>[2] = random_split[shape=(2,)] dak
          dam:u32[2,2] = random_unwrap dal
          dan:u32[1,2] = slice[
            limit_indices=(2, 2)
            start_indices=(1, 0)
            strides=(1, 1)
          ] dam
          dao:u32[2] = squeeze[dimensions=(0,)] dan
          dap:f64[180,512] = convert_element_type[
            new_dtype=float64
            weak_type=False
          ] coo
          daq:f64[512] = convert_element_type[new_dtype=float64 weak_type=False] cop
          dar:f64[1,512] = dot_general[dimension_numbers=(([1], [0]), ([], []))] cww
            dap
          das:f64[1,512] = reshape[dimensions=None new_sizes=(1, 512)] daq
          dat:f64[1,512] = add dar das
          dau:f64[1,512] = pjit[name=silu jaxpr=silu] dat
          dav:f64[512,512] = convert_element_type[
            new_dtype=float64
            weak_type=False
          ] coq
          daw:f64[512] = convert_element_type[new_dtype=float64 weak_type=False] cor
          dax:f64[1,512] = dot_general[dimension_numbers=(([1], [0]), ([], []))] dau
            dav
          day:f64[1,512] = reshape[dimensions=None new_sizes=(1, 512)] daw
          daz:f64[1,512] = add dax day
          dba:f64[1,512] = pjit[name=silu jaxpr=silu] daz
          dbb:f64[512,18] = convert_element_type[
            new_dtype=float64
            weak_type=False
          ] cos
          dbc:f64[18] = convert_element_type[new_dtype=float64 weak_type=False] cot
          dbd:f64[1,18] = dot_general[dimension_numbers=(([1], [0]), ([], []))] dba
            dbb
          dbe:f64[1,18] = reshape[dimensions=None new_sizes=(1, 18)] dbc
          dbf:f64[1,18] = add dbd dbe
          dbg:f64[1,9] = slice[
            limit_indices=(1, 9)
            start_indices=(0, 0)
            strides=None
          ] dbf
          dbh:f64[1,9] = tanh dbg
          dbi:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0.0
          dbj:f64[1] = pjit[name=_where jaxpr=_where] cwy dbi dab
          dbk:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0.0
          dbl:f64[1,19] dbm:f64[1,18] dbn:f64[1,13,3] dbo:f64[1,13,4] dbp:f64[1,13,3]
            dbq:f64[1,13,3] dbr:f64[1,13,3] dbs:f64[1,13,3] dbt:f64[1,13,4] dbu:f64[1,13,3,3]
            dbv:f64[1,13] dbw:f64[1,13,3] dbx:f64[1,13,3] dby:f64[1,18,3] dbz:f64[1,18,3]
            dca:f64[1,18,3] dcb:f64[1,18,3] dcc:f64[1,18,18] dcd:f64[1,18,18] dce:f64[1,18]
            dcf:f64[1,18] dcg:f64[1,18] dch:f64[1,180] dci:f64[1] dcj:f64[1] dck:f64[1]
            dcl:f64[1] dcm:f64[1] dcn:f64[1] dco:f64[1] dcp:f64[1] dcq:f64[1] dcr:f64[1]
            dcs:f64[1] dct:f64[1] dcu:f64[1] dcv:f64[1] dcw:f64[1] dcx:f64[1] dcy:f64[1]
            dcz:f64[1] dda:f64[1] ddb:f64[1] ddc:f64[1,12] ddd:f64[1,12] dde:f64[1,12]
            ddf:f64[1,12] ddg:bool[1,4] ddh:f64[1,4] ddi:f64[1,12] ddj:f64[1] ddk:f64[1]
            ddl:f64[1] ddm:f64[1] ddn:f64[1] ddo:f64[1] ddp:f64[1] ddq:f64[1] ddr:f64[1]
            dds:f64[1] ddt:f64[1] ddu:f64[1] ddv:f64[1] ddw:f64[1] ddx:f64[1] ddy:f64[1]
            ddz:f64[1] dea:f64[1] deb:f64[1] dec:f64[1] ded:f64[1] dee:f64[1,180]
            def:f64[1,19] deg:f64[1,18] deh:f64[1,13,3] dei:f64[1,13,4] dej:f64[1,13,3]
            dek:f64[1,13,3] del:f64[1,13,3] dem:f64[1,13,3] den:f64[1,13,4] deo:f64[1,13,3,3]
            dep:f64[1,13] deq:f64[1,13,3] der:f64[1,13,3] des:f64[1,18,3] det:f64[1,18,3]
            deu:f64[1,18,3] dev:f64[1,18,3] dew:f64[1,18,18] dex:f64[1,18,18] dey:f64[1,0,18]
            dez:f64[1,0] dfa:f64[1,0] dfb:f64[1,18] dfc:f64[1,18] dfd:f64[1,0] dfe:f64[1,18]
            dff:f64[1] dfg:f64[1] dfh:f64[1] dfi:f64[1,18] dfj:f64[1,12] dfk:f64[1,13]
            dfl:f64[1] dfm:f64[1,9] dfn:f64[1,180] dfo:f64[1,1] = scan[
            _split_transpose=False
            jaxpr={ lambda ; dfp:f64[18] dfq:i32[0] dfr:f64[12] dfs:i32[0] dft:f64[13]
                dfu:i32[0] dfv:f64[13,3,3] dfw:i32[0] dfx:i64[4] dfy:f64[36,2] dfz:f64[9,2]
                dga:f64[1,9] dgb:i64[4] dgc:f64[4] dgd:f64[] dge:f64[3] dgf:f64[3]
                dgg:f64[3] dgh:f64[] dgi:f64[8] dgj:f64[3] dgk:f64[3] dgl:f64[3]
                dgm:i64[3] dgn:f64[3] dgo:f64[12] dgp:i32[12] dgq:i32[12] dgr:f64[12,2]
                dgs:f64[12] dgt:f64[12] dgu:f64[12] dgv:f64[12,2] dgw:f64[18,3] dgx:f64[18,3]
                dgy:f64[18] dgz:f64[18] dha:i64[18] dhb:f64[3] dhc:i64[4] dhd:i64[4]
                dhe:i64[4] dhf:i64[4] dhg:i64[4] dhh:i64[4] dhi:i64[4] dhj:i64[4]
                dhk:i64[4] dhl:i64[4] dhm:i64[4] dhn:i64[4] dho:i64[4] dhp:i64[4]
                dhq:i64[13] dhr:i64[13] dhs:i64[4] dht:i64[4] dhu:i64[4] dhv:i64[4]
                dhw:i64[4] dhx:i64[4] dhy:i64[4] dhz:i64[4] dia:i64[4] dib:i64[13]
                dic:i64[13] did:i64[18] die:f64[13,3] dif:f64[13,4] dig:f64[13,3]
                dih:f64[13,4] dii:f64[13,3] dij:f64[13,4] dik:i64[4] dil:i64[4] dim:i64[4]
                din:i64[4] dio:i64[4] dip:i64[4] diq:i64[4] dir:i64[4] dis:i64[4]
                dit:i64[4] diu:i64[4] div:i64[4] diw:i64[4] dix:i64[4] diy:i64[4]
                diz:i64[4] dja:i64[13] djb:i64[13] djc:i64[13] djd:i64[13] dje:i32[13]
                djf:i32[13] djg:f64[4] djh:f64[4] dji:i64[18] djj:f64[4] djk:i64[18]
                djl:i64[4] djm:i64[18] djn:i64[4] djo:i64[4] djp:i64[4] djq:i64[4]
                djr:i64[4] djs:i64[4] djt:i64[4] dju:i64[4] djv:i64[4] djw:i64[4]
                djx:i64[4] djy:i64[13] djz:i64[13] dka:i64[4] dkb:i64[4] dkc:i64[4]
                dkd:i64[4] dke:i64[4] dkf:i64[4] dkg:i64[4] dkh:i64[4] dki:i64[4]
                dkj:i64[4] dkk:i64[4] dkl:i64[4] dkm:i64[13] dkn:i64[13] dko:i64[13]
                dkp:i64[18] dkq:i64[132] dkr:i64[132] dks:i64[4] dkt:f64[4] dku:i64[3]
                dkv:f64[3] dkw:f64[12] dkx:i64[4] dky:f64[17] dkz:f64[4] dla:i64[3]
                dlb:f64[3] dlc:f64[1,19] dld:f64[1,18] dle:f64[1,13,3] dlf:f64[1,13,4]
                dlg:f64[1,13,3] dlh:f64[1,13,3] dli:f64[1,13,3] dlj:f64[1,13,3] dlk:f64[1,13,4]
                dll:f64[1,13,3,3] dlm:f64[1,13] dln:f64[1,13,3] dlo:f64[1,13,3] dlp:f64[1,18,3]
                dlq:f64[1,18,3] dlr:f64[1,18,3] dls:f64[1,18,3] dlt:f64[1,18,18]
                dlu:f64[1,18,18] dlv:f64[1,18] dlw:f64[1,18] dlx:f64[1,18] dly:f64[1,180]
                dlz:f64[1] dma:f64[1] dmb:f64[1] dmc:f64[1] dmd:f64[1] dme:f64[1]
                dmf:f64[1] dmg:f64[1] dmh:f64[1] dmi:f64[1] dmj:f64[1] dmk:f64[1]
                dml:f64[1] dmm:f64[1] dmn:f64[1] dmo:f64[1] dmp:f64[1] dmq:f64[1]
                dmr:f64[1] dms:f64[1] dmt:f64[1,12] dmu:f64[1,12] dmv:f64[1,12] dmw:f64[1,12]
                dmx:bool[1,4] dmy:f64[1,4] dmz:f64[1,12] dna:f64[1] dnb:f64[1] dnc:f64[1]
                dnd:f64[1] dne:f64[1] dnf:f64[1] dng:f64[1] dnh:f64[1] dni:f64[1]
                dnj:f64[1] dnk:f64[1] dnl:f64[1] dnm:f64[1] dnn:f64[1] dno:f64[1]
                dnp:f64[1] dnq:f64[1] dnr:f64[1] dns:f64[1] dnt:f64[1] dnu:f64[1]
                dnv:f64[1,180] dnw:f64[1,19] dnx:f64[1,18] dny:f64[1,13,3] dnz:f64[1,13,4]
                doa:f64[1,13,3] dob:f64[1,13,3] doc:f64[1,13,3] dod:f64[1,13,3] doe:f64[1,13,4]
                dof:f64[1,13,3,3] dog:f64[1,13] doh:f64[1,13,3] doi:f64[1,13,3] doj:f64[1,18,3]
                dok:f64[1,18,3] dol:f64[1,18,3] dom:f64[1,18,3] don:f64[1,18,18]
                doo:f64[1,18,18] dop:f64[1,0,18] doq:f64[1,0] dor:f64[1,0] dos:f64[1,18]
                dot:f64[1,18] dou:f64[1,0] dov:f64[1,18] dow:f64[1] dox:f64[1] doy:f64[1]
                doz:f64[1,18] dpa:f64[1,12] dpb:f64[1,13] dpc:f64[1] dpd:f64[1,9]
                dpe:f64[1,180]. let
                dpf:f64[1,18] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 18)
                ] dfp
                dpg:f64[1,18] = scatter[
                  dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1), inserted_window_dims=(), scatter_dims_to_operand_dims=())
                  indices_are_sorted=True
                  mode=GatherScatterMode.FILL_OR_DROP
                  unique_indices=True
                  update_consts=()
                  update_jaxpr=None
                ] dpf dfq doz
                dph:f64[1,12] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 12)
                ] dfr
                dpi:f64[1,12] = scatter[
                  dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1), inserted_window_dims=(), scatter_dims_to_operand_dims=())
                  indices_are_sorted=True
                  mode=GatherScatterMode.FILL_OR_DROP
                  unique_indices=True
                  update_consts=()
                  update_jaxpr=None
                ] dph dfs dpa
                dpj:f64[1,13] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 13)
                ] dft
                dpk:f64[1,13] = mul dpb dpj
                dpl:f64[1,13] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 13)
                ] dft
                dpm:f64[1,13] = scatter[
                  dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1), inserted_window_dims=(), scatter_dims_to_operand_dims=())
                  indices_are_sorted=True
                  mode=GatherScatterMode.FILL_OR_DROP
                  unique_indices=True
                  update_consts=()
                  update_jaxpr=None
                ] dpl dfu dpk
                dpn:f64[1,13,1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(1, 13, 1, 1)
                ] dpb
                dpo:f64[1,13,3,3] = broadcast_in_dim[
                  broadcast_dimensions=(1, 2, 3)
                  shape=(1, 13, 3, 3)
                ] dfv
                dpp:f64[1,13,3,3] = mul dpn dpo
                dpq:f64[1,13,3,3] = broadcast_in_dim[
                  broadcast_dimensions=(1, 2, 3)
                  shape=(1, 13, 3, 3)
                ] dfv
                dpr:f64[1,13,3,3] = scatter[
                  dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2, 3), inserted_window_dims=(), scatter_dims_to_operand_dims=())
                  indices_are_sorted=True
                  mode=GatherScatterMode.FILL_OR_DROP
                  unique_indices=True
                  update_consts=()
                  update_jaxpr=None
                ] dpq dfw dpp
                dps:f64[1,4] = slice[
                  limit_indices=(1, 7)
                  start_indices=(0, 3)
                  strides=None
                ] dlc
                dpt:f64[1,12] = slice[
                  limit_indices=(1, 19)
                  start_indices=(0, 7)
                  strides=None
                ] dlc
                dpu:f64[1,3] = slice[
                  limit_indices=(1, 3)
                  start_indices=(0, 0)
                  strides=None
                ] dld
                dpv:f64[4] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] dfx
                dpw:f64[1,4] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 4)
                ] dpv
                dpx:f64[1,4] = mul dps dpw
                dpy:f64[1,1] = slice[
                  limit_indices=(1, 1)
                  start_indices=(0, 0)
                  strides=None
                ] dpx
                dpz:f64[1] = squeeze[dimensions=(1,)] dpy
                dqa:f64[1,3] = slice[
                  limit_indices=(1, 4)
                  start_indices=(0, 1)
                  strides=None
                ] dpx
                dqb:f64[1] = dot_general[
                  dimension_numbers=(([1], [1]), ([0], [0]))
                  preferred_element_type=float64
                ] dqa dpu
                dqc:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] dqb
                dqd:f64[1,3] = mul dqc dqa
                dqe:f64[1,3] = mul 2.0 dqd
                dqf:f64[1] = mul dpz dpz
                dqg:f64[1] = dot_general[
                  dimension_numbers=(([1], [1]), ([0], [0]))
                  preferred_element_type=float64
                ] dqa dqa
                dqh:f64[1] = sub dqf dqg
                dqi:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] dqh
                dqj:f64[1,3] = mul dqi dpu
                dqk:f64[1,3] = add dqe dqj
                dql:f64[1] = mul 2.0 dpz
                dqm:f64[1,3] = pjit[name=cross jaxpr=cross] dqa dpu
                dqn:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] dql
                dqo:f64[1,3] = mul dqn dqm
                dqp:f64[1,3] = add dqk dqo
                dqq:f64[1,3] = slice[
                  limit_indices=(1, 6)
                  start_indices=(0, 3)
                  strides=None
                ] dld
                dqr:f64[1,1] = slice[
                  limit_indices=(1, 1)
                  start_indices=(0, 0)
                  strides=None
                ] dps
                dqs:f64[1] = squeeze[dimensions=(1,)] dqr
                dqt:f64[1,3] = slice[
                  limit_indices=(1, 4)
                  start_indices=(0, 1)
                  strides=None
                ] dps
                dqu:f64[1] = dot_general[
                  dimension_numbers=(([1], [1]), ([0], [0]))
                  preferred_element_type=float64
                ] dqt dqq
                dqv:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] dqu
                dqw:f64[1,3] = mul dqv dqt
                dqx:f64[1,3] = mul 2.0 dqw
                dqy:f64[1] = mul dqs dqs
                dqz:f64[1] = dot_general[
                  dimension_numbers=(([1], [1]), ([0], [0]))
                  preferred_element_type=float64
                ] dqt dqt
                dra:f64[1] = sub dqy dqz
                drb:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] dra
                drc:f64[1,3] = mul drb dqq
                drd:f64[1,3] = add dqx drc
                dre:f64[1] = mul 2.0 dqs
                drf:f64[1,3] = pjit[name=cross jaxpr=cross] dqt dqq
                drg:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] dre
                drh:f64[1,3] = mul drg drf
                dri:f64[1,3] = add drd drh
                drj:f64[1,12] = slice[
                  limit_indices=(1, 18)
                  start_indices=(0, 6)
                  strides=None
                ] dld
                drk:f64[1,34] = concatenate[dimension=1] dps dpt dqp dri drj
                drl:f64[1] = mul dms 0.01
                drm:f64[1] = mul 6.283185307179586 drl
                drn:f64[1] = div drm 0.5
                dro:f64[1] = cos drn
                drp:f64[1] = sin drn
                drq:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] dro
                drr:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] drp
                drs:f64[1,2] = concatenate[dimension=1] drq drr
                drt:f64[1,36] = concatenate[dimension=1] drk drs
                dru:f64[36,1] = slice[
                  limit_indices=(36, 1)
                  start_indices=(0, 0)
                  strides=None
                ] dfy
                drv:f64[36] = squeeze[dimensions=(1,)] dru
                drw:f64[1,36] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 36)
                ] drv
                drx:f64[1,36] = sub drt drw
                dry:f64[1,36] = mul 2.0 drx
                drz:f64[36,1] = slice[
                  limit_indices=(36, 2)
                  start_indices=(0, 1)
                  strides=None
                ] dfy
                dsa:f64[36] = squeeze[dimensions=(1,)] drz
                dsb:f64[36,1] = slice[
                  limit_indices=(36, 1)
                  start_indices=(0, 0)
                  strides=None
                ] dfy
                dsc:f64[36] = squeeze[dimensions=(1,)] dsb
                dsd:f64[36] = sub dsa dsc
                dse:f64[1,36] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 36)
                ] dsd
                dsf:f64[1,36] = div dry dse
                dsg:f64[1,36] = sub dsf 1.0
                dsh:f64[9,1] = slice[
                  limit_indices=(9, 2)
                  start_indices=(0, 1)
                  strides=None
                ] dfz
                dsi:f64[9] = squeeze[dimensions=(1,)] dsh
                dsj:f64[9,1] = slice[
                  limit_indices=(9, 1)
                  start_indices=(0, 0)
                  strides=None
                ] dfz
                dsk:f64[9] = squeeze[dimensions=(1,)] dsj
                dsl:f64[9] = sub dsi dsk
                dsm:f64[1,9] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 9)
                ] dsl
                dsn:f64[1,9] = mul dsm dga
                dso:f64[1,9] = div dsn 2.0
                dsp:f64[9,1] = slice[
                  limit_indices=(9, 2)
                  start_indices=(0, 1)
                  strides=None
                ] dfz
                dsq:f64[9] = squeeze[dimensions=(1,)] dsp
                dsr:f64[9,1] = slice[
                  limit_indices=(9, 1)
                  start_indices=(0, 0)
                  strides=None
                ] dfz
                dss:f64[9] = squeeze[dimensions=(1,)] dsr
                dst:f64[9] = add dsq dss
                dsu:f64[9] = div dst 2.0
                dsv:f64[1,9] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 9)
                ] dsu
                dsw:f64[1,9] = add dso dsv
                dsx:f64[1,19] dsy:f64[1,18] dsz:f64[1,13,3] dta:f64[1,13,4] dtb:f64[1,13,3]
                  dtc:f64[1,13,3] dtd:f64[1,13,3] dte:f64[1,13,3] dtf:f64[1,13,4]
                  dtg:f64[1,13,3,3] dth:f64[1,13] dti:f64[1,13,3] dtj:f64[1,13,3]
                  dtk:f64[1,18,3] dtl:f64[1,18,3] dtm:f64[1,18,3] dtn:f64[1,18,3]
                  dto:f64[1,18,18] dtp:f64[1,18,18] dtq:f64[1,18] dtr:f64[1,18] dts:f64[1,18] = scan[
                  _split_transpose=False
                  jaxpr={ lambda ; dtt:i64[4] dtu:f64[1] dtv:f64[36,2] dtw:f64[1,9]
                      dtx:f64[4] dty:f64[] dtz:f64[3] dua:f64[3] dub:f64[3] duc:f64[]
                      dud:f64[8] due:f64[3] duf:f64[3] dug:f64[3] duh:i64[3] dui:f64[3]
                      duj:f64[12] duk:i32[12] dul:i32[12] dum:f64[12,2] dun:f64[12]
                      duo:f64[12] dup:f64[12] duq:f64[1,12] dur:f64[12,2] dus:f64[18,3]
                      dut:f64[18,3] duu:f64[18] duv:f64[18] duw:f64[1,18] dux:i64[18]
                      duy:f64[3] duz:i64[4] dva:i64[4] dvb:i64[4] dvc:i64[4] dvd:i64[4]
                      dve:i64[4] dvf:i64[4] dvg:i64[4] dvh:i64[4] dvi:i64[4] dvj:i64[4]
                      dvk:i64[4] dvl:i64[4] dvm:i64[4] dvn:i64[13] dvo:i64[13] dvp:i64[4]
                      dvq:i64[4] dvr:i64[4] dvs:i64[4] dvt:i64[4] dvu:i64[4] dvv:i64[4]
                      dvw:i64[4] dvx:i64[4] dvy:i64[13] dvz:i64[13] dwa:i64[18] dwb:f64[13,3]
                      dwc:f64[13,4] dwd:f64[13,3] dwe:f64[13,4] dwf:f64[13,3] dwg:f64[13,4]
                      dwh:f64[1,13,3,3] dwi:f64[1,13] dwj:i64[4] dwk:i64[4] dwl:i64[4]
                      dwm:i64[4] dwn:i64[4] dwo:i64[4] dwp:i64[4] dwq:i64[4] dwr:i64[4]
                      dws:i64[4] dwt:i64[4] dwu:i64[4] dwv:i64[4] dww:i64[4] dwx:i64[4]
                      dwy:i64[4] dwz:i64[13] dxa:i64[13] dxb:i64[13] dxc:i64[13]
                      dxd:i32[13] dxe:i32[13] dxf:f64[4] dxg:f64[4] dxh:i64[18] dxi:f64[4]
                      dxj:i64[18] dxk:i64[4] dxl:i64[18] dxm:i64[4] dxn:i64[4] dxo:i64[4]
                      dxp:i64[4] dxq:i64[4] dxr:i64[4] dxs:i64[4] dxt:i64[4] dxu:i64[4]
                      dxv:i64[4] dxw:i64[4] dxx:i64[13] dxy:i64[13] dxz:i64[4] dya:i64[4]
                      dyb:i64[4] dyc:i64[4] dyd:i64[4] dye:i64[4] dyf:i64[4] dyg:i64[4]
                      dyh:i64[4] dyi:i64[4] dyj:i64[4] dyk:i64[4] dyl:i64[13] dym:i64[13]
                      dyn:i64[13] dyo:i64[18] dyp:i64[132] dyq:i64[132] dyr:f64[1,19]
                      dys:f64[1,18] dyt:f64[1,13,3] dyu:f64[1,13,4] dyv:f64[1,13,3]
                      dyw:f64[1,13,3] dyx:f64[1,13,3] dyy:f64[1,13,3] dyz:f64[1,13,4]
                      dza:f64[1,13,3,3] dzb:f64[1,13] dzc:f64[1,13,3] dzd:f64[1,13,3]
                      dze:f64[1,18,3] dzf:f64[1,18,3] dzg:f64[1,18,3] dzh:f64[1,18,3]
                      dzi:f64[1,18,18] dzj:f64[1,18,18] dzk:f64[1,18] dzl:f64[1,18]
                      dzm:f64[1,18]. let
                      dzn:f64[1,4] = slice[
                        limit_indices=(1, 7)
                        start_indices=(0, 3)
                        strides=None
                      ] dyr
                      dzo:f64[1,12] = slice[
                        limit_indices=(1, 19)
                        start_indices=(0, 7)
                        strides=None
                      ] dyr
                      dzp:f64[1,3] = slice[
                        limit_indices=(1, 3)
                        start_indices=(0, 0)
                        strides=None
                      ] dys
                      dzq:f64[4] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] dtt
                      dzr:f64[1,4] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 4)
                      ] dzq
                      dzs:f64[1,4] = mul dzn dzr
                      dzt:f64[1,1] = slice[
                        limit_indices=(1, 1)
                        start_indices=(0, 0)
                        strides=None
                      ] dzs
                      dzu:f64[1] = squeeze[dimensions=(1,)] dzt
                      dzv:f64[1,3] = slice[
                        limit_indices=(1, 4)
                        start_indices=(0, 1)
                        strides=None
                      ] dzs
                      dzw:f64[1] = dot_general[
                        dimension_numbers=(([1], [1]), ([0], [0]))
                        preferred_element_type=float64
                      ] dzv dzp
                      dzx:f64[1,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(1, 1)
                      ] dzw
                      dzy:f64[1,3] = mul dzx dzv
                      dzz:f64[1,3] = mul 2.0 dzy
                      eaa:f64[1] = mul dzu dzu
                      eab:f64[1] = dot_general[
                        dimension_numbers=(([1], [1]), ([0], [0]))
                        preferred_element_type=float64
                      ] dzv dzv
                      eac:f64[1] = sub eaa eab
                      ead:f64[1,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(1, 1)
                      ] eac
                      eae:f64[1,3] = mul ead dzp
                      eaf:f64[1,3] = add dzz eae
                      eag:f64[1] = mul 2.0 dzu
                      eah:f64[1,3] = pjit[name=cross jaxpr=cross] dzv dzp
                      eai:f64[1,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(1, 1)
                      ] eag
                      eaj:f64[1,3] = mul eai eah
                      eak:f64[1,3] = add eaf eaj
                      eal:f64[1,3] = slice[
                        limit_indices=(1, 6)
                        start_indices=(0, 3)
                        strides=None
                      ] dys
                      eam:f64[1,1] = slice[
                        limit_indices=(1, 1)
                        start_indices=(0, 0)
                        strides=None
                      ] dzn
                      ean:f64[1] = squeeze[dimensions=(1,)] eam
                      eao:f64[1,3] = slice[
                        limit_indices=(1, 4)
                        start_indices=(0, 1)
                        strides=None
                      ] dzn
                      eap:f64[1] = dot_general[
                        dimension_numbers=(([1], [1]), ([0], [0]))
                        preferred_element_type=float64
                      ] eao eal
                      eaq:f64[1,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(1, 1)
                      ] eap
                      ear:f64[1,3] = mul eaq eao
                      eas:f64[1,3] = mul 2.0 ear
                      eat:f64[1] = mul ean ean
                      eau:f64[1] = dot_general[
                        dimension_numbers=(([1], [1]), ([0], [0]))
                        preferred_element_type=float64
                      ] eao eao
                      eav:f64[1] = sub eat eau
                      eaw:f64[1,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(1, 1)
                      ] eav
                      eax:f64[1,3] = mul eaw eal
                      eay:f64[1,3] = add eas eax
                      eaz:f64[1] = mul 2.0 ean
                      eba:f64[1,3] = pjit[name=cross jaxpr=cross] eao eal
                      ebb:f64[1,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(1, 1)
                      ] eaz
                      ebc:f64[1,3] = mul ebb eba
                      ebd:f64[1,3] = add eay ebc
                      ebe:f64[1,12] = slice[
                        limit_indices=(1, 18)
                        start_indices=(0, 6)
                        strides=None
                      ] dys
                      ebf:f64[1,34] = concatenate[dimension=1] dzn dzo eak ebd ebe
                      ebg:f64[1] = mul dtu 0.01
                      ebh:f64[1] = mul 6.283185307179586 ebg
                      ebi:f64[1] = div ebh 0.5
                      ebj:f64[1] = cos ebi
                      ebk:f64[1] = sin ebi
                      ebl:f64[1,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(1, 1)
                      ] ebj
                      ebm:f64[1,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(1, 1)
                      ] ebk
                      ebn:f64[1,2] = concatenate[dimension=1] ebl ebm
                      ebo:f64[1,36] = concatenate[dimension=1] ebf ebn
                      ebp:f64[36,1] = slice[
                        limit_indices=(36, 1)
                        start_indices=(0, 0)
                        strides=None
                      ] dtv
                      ebq:f64[36] = squeeze[dimensions=(1,)] ebp
                      ebr:f64[1,36] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 36)
                      ] ebq
                      ebs:f64[1,36] = sub ebo ebr
                      ebt:f64[1,36] = mul 2.0 ebs
                      ebu:f64[36,1] = slice[
                        limit_indices=(36, 2)
                        start_indices=(0, 1)
                        strides=None
                      ] dtv
                      ebv:f64[36] = squeeze[dimensions=(1,)] ebu
                      ebw:f64[36,1] = slice[
                        limit_indices=(36, 1)
                        start_indices=(0, 0)
                        strides=None
                      ] dtv
                      ebx:f64[36] = squeeze[dimensions=(1,)] ebw
                      eby:f64[36] = sub ebv ebx
                      ebz:f64[1,36] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 36)
                      ] eby
                      eca:f64[1,36] = div ebt ebz
                      ecb:f64[1,36] = sub eca 1.0
                      ecc:f64[1,36] = add ecb 1.0
                      ecd:f64[36,1] = slice[
                        limit_indices=(36, 2)
                        start_indices=(0, 1)
                        strides=None
                      ] dtv
                      ece:f64[36] = squeeze[dimensions=(1,)] ecd
                      ecf:f64[36,1] = slice[
                        limit_indices=(36, 1)
                        start_indices=(0, 0)
                        strides=None
                      ] dtv
                      ecg:f64[36] = squeeze[dimensions=(1,)] ecf
                      ech:f64[36] = sub ece ecg
                      eci:f64[1,36] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 36)
                      ] ech
                      ecj:f64[1,36] = mul ecc eci
                      eck:f64[1,36] = div ecj 2.0
                      ecl:f64[36,1] = slice[
                        limit_indices=(36, 1)
                        start_indices=(0, 0)
                        strides=None
                      ] dtv
                      ecm:f64[36] = squeeze[dimensions=(1,)] ecl
                      ecn:f64[1,36] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 36)
                      ] ecm
                      eco:f64[1,36] = add eck ecn
                      ecp:f64[1,1] = slice[
                        limit_indices=(1, 9)
                        start_indices=(0, 8)
                        strides=None
                      ] dtw
                      ecq:f64[1] = squeeze[dimensions=(1,)] ecp
                      ecr:f64[] = mul dty 1.0
                      ecs:f64[1,1] = slice[
                        limit_indices=(1, 35)
                        start_indices=(0, 34)
                        strides=None
                      ] eco
                      ect:f64[1] = squeeze[dimensions=(1,)] ecs
                      ecu:f64[1,1] = slice[
                        limit_indices=(1, 36)
                        start_indices=(0, 35)
                        strides=None
                      ] eco
                      ecv:f64[1] = squeeze[dimensions=(1,)] ecu
                      ecw:f64[1] = atan2 ecv ect
                      ecx:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] dtx
                      ecy:f64[] = squeeze[dimensions=(0,)] ecx
                      ecz:f64[1] = div ecw 6.283185307179586
                      eda:f64[1] = add ecz 0.5
                      edb:f64[1] = add eda ecy
                      edc:f64[1] = pjit[name=remainder jaxpr=remainder1] edb 1
                      edd:bool[1] = lt edc 0.5
                      ede:bool[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] False
                      edf:bool[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] True
                      edg:bool[1] = select_n edd ede edf
                      edh:f64[1] = div edc 0.5
                      edi:f64[1] = sub edc 0.5
                      edj:f64[1] = div edi 0.5
                      edk:f64[1] = select_n edg edj edh
                      edl:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] dtx
                      edm:f64[] = squeeze[dimensions=(0,)] edl
                      edn:f64[1] = div ecw 6.283185307179586
                      edo:f64[1] = add edn 0.5
                      edp:f64[1] = add edo edm
                      edq:f64[1] = pjit[name=remainder jaxpr=remainder1] edp 1
                      edr:bool[1] = lt edq 0.5
                      eds:bool[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] False
                      edt:bool[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] True
                      edu:bool[1] = select_n edr eds edt
                      edv:f64[1] = div edq 0.5
                      edw:f64[1] = sub edq 0.5
                      edx:f64[1] = div edw 0.5
                      edy:f64[1] = select_n edu edx edv
                      edz:f64[1] = slice[
                        limit_indices=(3,)
                        start_indices=(2,)
                        strides=None
                      ] dtx
                      eea:f64[] = squeeze[dimensions=(0,)] edz
                      eeb:f64[1] = div ecw 6.283185307179586
                      eec:f64[1] = add eeb 0.5
                      eed:f64[1] = add eec eea
                      eee:f64[1] = pjit[name=remainder jaxpr=remainder1] eed 1
                      eef:bool[1] = lt eee 0.5
                      eeg:bool[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] False
                      eeh:bool[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] True
                      eei:bool[1] = select_n eef eeg eeh
                      eej:f64[1] = div eee 0.5
                      eek:f64[1] = sub eee 0.5
                      eel:f64[1] = div eek 0.5
                      eem:f64[1] = select_n eei eel eej
                      een:f64[1] = slice[
                        limit_indices=(4,)
                        start_indices=(3,)
                        strides=None
                      ] dtx
                      eeo:f64[] = squeeze[dimensions=(0,)] een
                      eep:f64[1] = div ecw 6.283185307179586
                      eeq:f64[1] = add eep 0.5
                      eer:f64[1] = add eeq eeo
                      ees:f64[1] = pjit[name=remainder jaxpr=remainder1] eer 1
                      eet:bool[1] = lt ees 0.5
                      eeu:bool[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] False
                      eev:bool[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] True
                      eew:bool[1] = select_n eet eeu eev
                      eex:f64[1] = div ees 0.5
                      eey:f64[1] = sub ees 0.5
                      eez:f64[1] = div eey 0.5
                      efa:f64[1] = select_n eew eez eex
                      efb:f64[8] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(8,)
                      ] 0.0
                      efc:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] dtz
                      efd:f64[] = squeeze[dimensions=(0,)] efc
                      efe:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] dua
                      eff:f64[] = squeeze[dimensions=(0,)] efe
                      efg:f64[] = select_n True eff efd
                      efh:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] dtz
                      efi:f64[] = squeeze[dimensions=(0,)] efh
                      efj:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] dub
                      efk:f64[] = squeeze[dimensions=(0,)] efj
                      efl:f64[] = select_n True efk efi
                      efm:f64[] = mul 0.0 0.25
                      efn:f64[] = atan2 efl efg
                      efo:f64[] = add efn efm
                      efp:f64[] = cos efo
                      efq:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] duc
                      efr:f64[] = mul efq efp
                      efs:f64[] = sub efr efg
                      eft:f64[] = atan2 efl efg
                      efu:f64[] = add eft efm
                      efv:f64[] = sin efu
                      efw:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] duc
                      efx:f64[] = mul efw efv
                      efy:f64[] = sub efx efl
                      efz:f64[2] = slice[
                        limit_indices=(2,)
                        start_indices=(0,)
                        strides=None
                      ] efb
                      ega:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] efz
                      egb:f64[] = squeeze[dimensions=(0,)] ega
                      egc:f64[2] = slice[
                        limit_indices=(2,)
                        start_indices=(0,)
                        strides=None
                      ] efb
                      egd:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] egc
                      ege:f64[] = squeeze[dimensions=(0,)] egd
                      egf:f64[] = mul ecr 0.25
                      egg:f64[] = add egf efs
                      egh:f64[] = add egg egb
                      egi:f64[] = add efy ege
                      egj:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] egh
                      egk:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] egi
                      egl:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] 0.0
                      egm:f64[3] = concatenate[dimension=0] egj egk egl
                      egn:f64[3] = neg egm
                      ego:f64[8] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(8,)
                      ] 0.0
                      egp:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] dtz
                      egq:f64[] = squeeze[dimensions=(0,)] egp
                      egr:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] dua
                      egs:f64[] = squeeze[dimensions=(0,)] egr
                      egt:f64[] = select_n True egs egq
                      egu:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] dtz
                      egv:f64[] = squeeze[dimensions=(0,)] egu
                      egw:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] dub
                      egx:f64[] = squeeze[dimensions=(0,)] egw
                      egy:f64[] = select_n False egx egv
                      egz:f64[] = mul 0.0 0.25
                      eha:f64[] = atan2 egy egt
                      ehb:f64[] = add eha egz
                      ehc:f64[] = cos ehb
                      ehd:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] duc
                      ehe:f64[] = mul ehd ehc
                      ehf:f64[] = sub ehe egt
                      ehg:f64[] = atan2 egy egt
                      ehh:f64[] = add ehg egz
                      ehi:f64[] = sin ehh
                      ehj:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] duc
                      ehk:f64[] = mul ehj ehi
                      ehl:f64[] = sub ehk egy
                      ehm:f64[2] = slice[
                        limit_indices=(4,)
                        start_indices=(2,)
                        strides=None
                      ] ego
                      ehn:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] ehm
                      eho:f64[] = squeeze[dimensions=(0,)] ehn
                      ehp:f64[2] = slice[
                        limit_indices=(4,)
                        start_indices=(2,)
                        strides=None
                      ] ego
                      ehq:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] ehp
                      ehr:f64[] = squeeze[dimensions=(0,)] ehq
                      ehs:f64[] = mul ecr 0.25
                      eht:f64[] = add ehs ehf
                      ehu:f64[] = add eht eho
                      ehv:f64[] = add ehl ehr
                      ehw:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] ehu
                      ehx:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] ehv
                      ehy:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] 0.0
                      ehz:f64[3] = concatenate[dimension=0] ehw ehx ehy
                      eia:f64[3] = neg ehz
                      eib:f64[8] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(8,)
                      ] 0.0
                      eic:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] dtz
                      eid:f64[] = squeeze[dimensions=(0,)] eic
                      eie:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] dua
                      eif:f64[] = squeeze[dimensions=(0,)] eie
                      eig:f64[] = select_n False eif eid
                      eih:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] dtz
                      eii:f64[] = squeeze[dimensions=(0,)] eih
                      eij:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] dub
                      eik:f64[] = squeeze[dimensions=(0,)] eij
                      eil:f64[] = select_n True eik eii
                      eim:f64[] = mul 0.0 0.25
                      ein:f64[] = atan2 eil eig
                      eio:f64[] = add ein eim
                      eip:f64[] = cos eio
                      eiq:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] duc
                      eir:f64[] = mul eiq eip
                      eis:f64[] = sub eir eig
                      eit:f64[] = atan2 eil eig
                      eiu:f64[] = add eit eim
                      eiv:f64[] = sin eiu
                      eiw:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] duc
                      eix:f64[] = mul eiw eiv
                      eiy:f64[] = sub eix eil
                      eiz:f64[2] = slice[
                        limit_indices=(6,)
                        start_indices=(4,)
                        strides=None
                      ] eib
                      eja:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] eiz
                      ejb:f64[] = squeeze[dimensions=(0,)] eja
                      ejc:f64[2] = slice[
                        limit_indices=(6,)
                        start_indices=(4,)
                        strides=None
                      ] eib
                      ejd:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] ejc
                      eje:f64[] = squeeze[dimensions=(0,)] ejd
                      ejf:f64[] = mul ecr 0.25
                      ejg:f64[] = add ejf eis
                      ejh:f64[] = add ejg ejb
                      eji:f64[] = add eiy eje
                      ejj:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] ejh
                      ejk:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] eji
                      ejl:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] 0.0
                      ejm:f64[3] = concatenate[dimension=0] ejj ejk ejl
                      ejn:f64[3] = neg ejm
                      ejo:f64[8] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(8,)
                      ] 0.0
                      ejp:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] dtz
                      ejq:f64[] = squeeze[dimensions=(0,)] ejp
                      ejr:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] dua
                      ejs:f64[] = squeeze[dimensions=(0,)] ejr
                      ejt:f64[] = select_n False ejs ejq
                      eju:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] dtz
                      ejv:f64[] = squeeze[dimensions=(0,)] eju
                      ejw:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] dub
                      ejx:f64[] = squeeze[dimensions=(0,)] ejw
                      ejy:f64[] = select_n False ejx ejv
                      ejz:f64[] = mul 0.0 0.25
                      eka:f64[] = atan2 ejy ejt
                      ekb:f64[] = add eka ejz
                      ekc:f64[] = cos ekb
                      ekd:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] duc
                      eke:f64[] = mul ekd ekc
                      ekf:f64[] = sub eke ejt
                      ekg:f64[] = atan2 ejy ejt
                      ekh:f64[] = add ekg ejz
                      eki:f64[] = sin ekh
                      ekj:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] duc
                      ekk:f64[] = mul ekj eki
                      ekl:f64[] = sub ekk ejy
                      ekm:f64[2] = slice[
                        limit_indices=(8,)
                        start_indices=(6,)
                        strides=None
                      ] ejo
                      ekn:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] ekm
                      eko:f64[] = squeeze[dimensions=(0,)] ekn
                      ekp:f64[2] = slice[
                        limit_indices=(8,)
                        start_indices=(6,)
                        strides=None
                      ] ejo
                      ekq:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] ekp
                      ekr:f64[] = squeeze[dimensions=(0,)] ekq
                      eks:f64[] = mul ecr 0.25
                      ekt:f64[] = add eks ekf
                      eku:f64[] = add ekt eko
                      ekv:f64[] = add ekl ekr
                      ekw:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] eku
                      ekx:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] ekv
                      eky:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] 0.0
                      ekz:f64[3] = concatenate[dimension=0] ekw ekx eky
                      ela:f64[3] = neg ekz
                      elb:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] dtz
                      elc:f64[] = squeeze[dimensions=(0,)] elb
                      eld:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] dua
                      ele:f64[] = squeeze[dimensions=(0,)] eld
                      elf:f64[] = select_n True ele elc
                      elg:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] dtz
                      elh:f64[] = squeeze[dimensions=(0,)] elg
                      eli:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] dub
                      elj:f64[] = squeeze[dimensions=(0,)] eli
                      elk:f64[] = select_n True elj elh
                      ell:f64[] = mul 0.0 0.25
                      elm:f64[] = atan2 elk elf
                      eln:f64[] = add elm ell
                      elo:f64[] = cos eln
                      elp:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] duc
                      elq:f64[] = mul elp elo
                      elr:f64[] = sub elq elf
                      els:f64[] = atan2 elk elf
                      elt:f64[] = add els ell
                      elu:f64[] = sin elt
                      elv:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] duc
                      elw:f64[] = mul elv elu
                      elx:f64[] = sub elw elk
                      ely:f64[2] = slice[
                        limit_indices=(2,)
                        start_indices=(0,)
                        strides=None
                      ] dud
                      elz:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] ely
                      ema:f64[] = squeeze[dimensions=(0,)] elz
                      emb:f64[2] = slice[
                        limit_indices=(2,)
                        start_indices=(0,)
                        strides=None
                      ] dud
                      emc:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] emb
                      emd:f64[] = squeeze[dimensions=(0,)] emc
                      eme:f64[] = mul ecr 0.25
                      emf:f64[] = add eme elr
                      emg:f64[] = add emf ema
                      emh:f64[] = add elx emd
                      emi:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] emg
                      emj:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] emh
                      emk:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] 0.0
                      eml:f64[3] = concatenate[dimension=0] emi emj emk
                      emm:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] dtz
                      emn:f64[] = squeeze[dimensions=(0,)] emm
                      emo:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] dua
                      emp:f64[] = squeeze[dimensions=(0,)] emo
                      emq:f64[] = select_n True emp emn
                      emr:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] dtz
                      ems:f64[] = squeeze[dimensions=(0,)] emr
                      emt:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] dub
                      emu:f64[] = squeeze[dimensions=(0,)] emt
                      emv:f64[] = select_n False emu ems
                      emw:f64[] = mul 0.0 0.25
                      emx:f64[] = atan2 emv emq
                      emy:f64[] = add emx emw
                      emz:f64[] = cos emy
                      ena:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] duc
                      enb:f64[] = mul ena emz
                      enc:f64[] = sub enb emq
                      end:f64[] = atan2 emv emq
                      ene:f64[] = add end emw
                      enf:f64[] = sin ene
                      eng:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] duc
                      enh:f64[] = mul eng enf
                      eni:f64[] = sub enh emv
                      enj:f64[2] = slice[
                        limit_indices=(4,)
                        start_indices=(2,)
                        strides=None
                      ] dud
                      enk:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] enj
                      enl:f64[] = squeeze[dimensions=(0,)] enk
                      enm:f64[2] = slice[
                        limit_indices=(4,)
                        start_indices=(2,)
                        strides=None
                      ] dud
                      enn:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] enm
                      eno:f64[] = squeeze[dimensions=(0,)] enn
                      enp:f64[] = mul ecr 0.25
                      enq:f64[] = add enp enc
                      enr:f64[] = add enq enl
                      ens:f64[] = add eni eno
                      ent:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] enr
                      enu:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] ens
                      env:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] 0.0
                      enw:f64[3] = concatenate[dimension=0] ent enu env
                      enx:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] dtz
                      eny:f64[] = squeeze[dimensions=(0,)] enx
                      enz:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] dua
                      eoa:f64[] = squeeze[dimensions=(0,)] enz
                      eob:f64[] = select_n False eoa eny
                      eoc:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] dtz
                      eod:f64[] = squeeze[dimensions=(0,)] eoc
                      eoe:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] dub
                      eof:f64[] = squeeze[dimensions=(0,)] eoe
                      eog:f64[] = select_n True eof eod
                      eoh:f64[] = mul 0.0 0.25
                      eoi:f64[] = atan2 eog eob
                      eoj:f64[] = add eoi eoh
                      eok:f64[] = cos eoj
                      eol:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] duc
                      eom:f64[] = mul eol eok
                      eon:f64[] = sub eom eob
                      eoo:f64[] = atan2 eog eob
                      eop:f64[] = add eoo eoh
                      eoq:f64[] = sin eop
                      eor:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] duc
                      eos:f64[] = mul eor eoq
                      eot:f64[] = sub eos eog
                      eou:f64[2] = slice[
                        limit_indices=(6,)
                        start_indices=(4,)
                        strides=None
                      ] dud
                      eov:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] eou
                      eow:f64[] = squeeze[dimensions=(0,)] eov
                      eox:f64[2] = slice[
                        limit_indices=(6,)
                        start_indices=(4,)
                        strides=None
                      ] dud
                      eoy:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] eox
                      eoz:f64[] = squeeze[dimensions=(0,)] eoy
                      epa:f64[] = mul ecr 0.25
                      epb:f64[] = add epa eon
                      epc:f64[] = add epb eow
                      epd:f64[] = add eot eoz
                      epe:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] epc
                      epf:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] epd
                      epg:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] 0.0
                      eph:f64[3] = concatenate[dimension=0] epe epf epg
                      epi:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] dtz
                      epj:f64[] = squeeze[dimensions=(0,)] epi
                      epk:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] dua
                      epl:f64[] = squeeze[dimensions=(0,)] epk
                      epm:f64[] = select_n False epl epj
                      epn:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] dtz
                      epo:f64[] = squeeze[dimensions=(0,)] epn
                      epp:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] dub
                      epq:f64[] = squeeze[dimensions=(0,)] epp
                      epr:f64[] = select_n False epq epo
                      eps:f64[] = mul 0.0 0.25
                      ept:f64[] = atan2 epr epm
                      epu:f64[] = add ept eps
                      epv:f64[] = cos epu
                      epw:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] duc
                      epx:f64[] = mul epw epv
                      epy:f64[] = sub epx epm
                      epz:f64[] = atan2 epr epm
                      eqa:f64[] = add epz eps
                      eqb:f64[] = sin eqa
                      eqc:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] duc
                      eqd:f64[] = mul eqc eqb
                      eqe:f64[] = sub eqd epr
                      eqf:f64[2] = slice[
                        limit_indices=(8,)
                        start_indices=(6,)
                        strides=None
                      ] dud
                      eqg:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] eqf
                      eqh:f64[] = squeeze[dimensions=(0,)] eqg
                      eqi:f64[2] = slice[
                        limit_indices=(8,)
                        start_indices=(6,)
                        strides=None
                      ] dud
                      eqj:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] eqi
                      eqk:f64[] = squeeze[dimensions=(0,)] eqj
                      eql:f64[] = mul ecr 0.25
                      eqm:f64[] = add eql epy
                      eqn:f64[] = add eqm eqh
                      eqo:f64[] = add eqe eqk
                      eqp:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] eqn
                      eqq:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] eqo
                      eqr:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] 0.0
                      eqs:f64[3] = concatenate[dimension=0] eqp eqq eqr
                      eqt:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] egn
                      equ:f64[] = squeeze[dimensions=(0,)] eqt
                      eqv:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] eml
                      eqw:f64[] = squeeze[dimensions=(0,)] eqv
                      eqx:f64[] = sub eqw equ
                      eqy:f64[] = div eqx 6.283185307179586
                      eqz:f64[1] = mul 6.283185307179586 edk
                      era:f64[1] = mul 6.283185307179586 edk
                      erb:f64[1] = sin era
                      erc:f64[1] = sub eqz erb
                      erd:f64[1] = mul eqy erc
                      ere:f64[1] = add erd equ
                      erf:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] egn
                      erg:f64[] = squeeze[dimensions=(0,)] erf
                      erh:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] eml
                      eri:f64[] = squeeze[dimensions=(0,)] erh
                      erj:f64[] = sub eri erg
                      erk:f64[] = div erj 6.283185307179586
                      erl:f64[1] = mul 6.283185307179586 edk
                      erm:f64[1] = mul 6.283185307179586 edk
                      ern:f64[1] = sin erm
                      ero:f64[1] = sub erl ern
                      erp:f64[1] = mul erk ero
                      erq:f64[1] = add erp erg
                      err:f64[1] = mul 6.283185307179586 edk
                      ers:f64[1] = cos err
                      ert:f64[1] = sub 1.0 ers
                      eru:f64[1] = mul 0.045 ert
                      erv:f64[1,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(1, 1)
                      ] ere
                      erw:f64[1,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(1, 1)
                      ] erq
                      erx:f64[1,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(1, 1)
                      ] eru
                      ery:f64[1,3] = concatenate[dimension=1] erv erw erx
                      erz:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] eia
                      esa:f64[] = squeeze[dimensions=(0,)] erz
                      esb:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] enw
                      esc:f64[] = squeeze[dimensions=(0,)] esb
                      esd:f64[] = sub esc esa
                      ese:f64[] = div esd 6.283185307179586
                      esf:f64[1] = mul 6.283185307179586 edy
                      esg:f64[1] = mul 6.283185307179586 edy
                      esh:f64[1] = sin esg
                      esi:f64[1] = sub esf esh
                      esj:f64[1] = mul ese esi
                      esk:f64[1] = add esj esa
                      esl:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] eia
                      esm:f64[] = squeeze[dimensions=(0,)] esl
                      esn:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] enw
                      eso:f64[] = squeeze[dimensions=(0,)] esn
                      esp:f64[] = sub eso esm
                      esq:f64[] = div esp 6.283185307179586
                      esr:f64[1] = mul 6.283185307179586 edy
                      ess:f64[1] = mul 6.283185307179586 edy
                      est:f64[1] = sin ess
                      esu:f64[1] = sub esr est
                      esv:f64[1] = mul esq esu
                      esw:f64[1] = add esv esm
                      esx:f64[1] = mul 6.283185307179586 edy
                      esy:f64[1] = cos esx
                      esz:f64[1] = sub 1.0 esy
                      eta:f64[1] = mul 0.045 esz
                      etb:f64[1,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(1, 1)
                      ] esk
                      etc:f64[1,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(1, 1)
                      ] esw
                      etd:f64[1,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(1, 1)
                      ] eta
                      ete:f64[1,3] = concatenate[dimension=1] etb etc etd
                      etf:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] ejn
                      etg:f64[] = squeeze[dimensions=(0,)] etf
                      eth:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] eph
                      eti:f64[] = squeeze[dimensions=(0,)] eth
                      etj:f64[] = sub eti etg
                      etk:f64[] = div etj 6.283185307179586
                      etl:f64[1] = mul 6.283185307179586 eem
                      etm:f64[1] = mul 6.283185307179586 eem
                      etn:f64[1] = sin etm
                      eto:f64[1] = sub etl etn
                      etp:f64[1] = mul etk eto
                      etq:f64[1] = add etp etg
                      etr:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] ejn
                      ets:f64[] = squeeze[dimensions=(0,)] etr
                      ett:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] eph
                      etu:f64[] = squeeze[dimensions=(0,)] ett
                      etv:f64[] = sub etu ets
                      etw:f64[] = div etv 6.283185307179586
                      etx:f64[1] = mul 6.283185307179586 eem
                      ety:f64[1] = mul 6.283185307179586 eem
                      etz:f64[1] = sin ety
                      eua:f64[1] = sub etx etz
                      eub:f64[1] = mul etw eua
                      euc:f64[1] = add eub ets
                      eud:f64[1] = mul 6.283185307179586 eem
                      eue:f64[1] = cos eud
                      euf:f64[1] = sub 1.0 eue
                      eug:f64[1] = mul 0.045 euf
                      euh:f64[1,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(1, 1)
                      ] etq
                      eui:f64[1,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(1, 1)
                      ] euc
                      euj:f64[1,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(1, 1)
                      ] eug
                      euk:f64[1,3] = concatenate[dimension=1] euh eui euj
                      eul:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] ela
                      eum:f64[] = squeeze[dimensions=(0,)] eul
                      eun:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] eqs
                      euo:f64[] = squeeze[dimensions=(0,)] eun
                      eup:f64[] = sub euo eum
                      euq:f64[] = div eup 6.283185307179586
                      eur:f64[1] = mul 6.283185307179586 efa
                      eus:f64[1] = mul 6.283185307179586 efa
                      eut:f64[1] = sin eus
                      euu:f64[1] = sub eur eut
                      euv:f64[1] = mul euq euu
                      euw:f64[1] = add euv eum
                      eux:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] ela
                      euy:f64[] = squeeze[dimensions=(0,)] eux
                      euz:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] eqs
                      eva:f64[] = squeeze[dimensions=(0,)] euz
                      evb:f64[] = sub eva euy
                      evc:f64[] = div evb 6.283185307179586
                      evd:f64[1] = mul 6.283185307179586 efa
                      eve:f64[1] = mul 6.283185307179586 efa
                      evf:f64[1] = sin eve
                      evg:f64[1] = sub evd evf
                      evh:f64[1] = mul evc evg
                      evi:f64[1] = add evh euy
                      evj:f64[1] = mul 6.283185307179586 efa
                      evk:f64[1] = cos evj
                      evl:f64[1] = sub 1.0 evk
                      evm:f64[1] = mul 0.045 evl
                      evn:f64[1,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(1, 1)
                      ] euw
                      evo:f64[1,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(1, 1)
                      ] evi
                      evp:f64[1,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(1, 1)
                      ] evm
                      evq:f64[1,3] = concatenate[dimension=1] evn evo evp
                      evr:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] eml
                      evs:f64[] = squeeze[dimensions=(0,)] evr
                      evt:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] egn
                      evu:f64[] = squeeze[dimensions=(0,)] evt
                      evv:f64[] = sub evu evs
                      evw:f64[] = div evv 6.283185307179586
                      evx:f64[1] = mul 6.283185307179586 edk
                      evy:f64[1] = mul 6.283185307179586 edk
                      evz:f64[1] = sin evy
                      ewa:f64[1] = sub evx evz
                      ewb:f64[1] = mul evw ewa
                      ewc:f64[1] = add ewb evs
                      ewd:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] eml
                      ewe:f64[] = squeeze[dimensions=(0,)] ewd
                      ewf:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] egn
                      ewg:f64[] = squeeze[dimensions=(0,)] ewf
                      ewh:f64[] = sub ewg ewe
                      ewi:f64[] = div ewh 6.283185307179586
                      ewj:f64[1] = mul 6.283185307179586 edk
                      ewk:f64[1] = mul 6.283185307179586 edk
                      ewl:f64[1] = sin ewk
                      ewm:f64[1] = sub ewj ewl
                      ewn:f64[1] = mul ewi ewm
                      ewo:f64[1] = add ewn ewe
                      ewp:f64[1,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(1, 1)
                      ] ewc
                      ewq:f64[1,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(1, 1)
                      ] ewo
                      ewr:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] 0.0
                      ews:f64[1,1] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 1)
                      ] ewr
                      ewt:f64[1,3] = concatenate[dimension=1] ewp ewq ews
                      ewu:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] enw
                      ewv:f64[] = squeeze[dimensions=(0,)] ewu
                      eww:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] eia
                      ewx:f64[] = squeeze[dimensions=(0,)] eww
                      ewy:f64[] = sub ewx ewv
                      ewz:f64[] = div ewy 6.283185307179586
                      exa:f64[1] = mul 6.283185307179586 edy
                      exb:f64[1] = mul 6.283185307179586 edy
                      exc:f64[1] = sin exb
                      exd:f64[1] = sub exa exc
                      exe:f64[1] = mul ewz exd
                      exf:f64[1] = add exe ewv
                      exg:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] enw
                      exh:f64[] = squeeze[dimensions=(0,)] exg
                      exi:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] eia
                      exj:f64[] = squeeze[dimensions=(0,)] exi
                      exk:f64[] = sub exj exh
                      exl:f64[] = div exk 6.283185307179586
                      exm:f64[1] = mul 6.283185307179586 edy
                      exn:f64[1] = mul 6.283185307179586 edy
                      exo:f64[1] = sin exn
                      exp:f64[1] = sub exm exo
                      exq:f64[1] = mul exl exp
                      exr:f64[1] = add exq exh
                      exs:f64[1,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(1, 1)
                      ] exf
                      ext:f64[1,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(1, 1)
                      ] exr
                      exu:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] 0.0
                      exv:f64[1,1] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 1)
                      ] exu
                      exw:f64[1,3] = concatenate[dimension=1] exs ext exv
                      exx:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] eph
                      exy:f64[] = squeeze[dimensions=(0,)] exx
                      exz:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] ejn
                      eya:f64[] = squeeze[dimensions=(0,)] exz
                      eyb:f64[] = sub eya exy
                      eyc:f64[] = div eyb 6.283185307179586
                      eyd:f64[1] = mul 6.283185307179586 eem
                      eye:f64[1] = mul 6.283185307179586 eem
                      eyf:f64[1] = sin eye
                      eyg:f64[1] = sub eyd eyf
                      eyh:f64[1] = mul eyc eyg
                      eyi:f64[1] = add eyh exy
                      eyj:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] eph
                      eyk:f64[] = squeeze[dimensions=(0,)] eyj
                      eyl:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] ejn
                      eym:f64[] = squeeze[dimensions=(0,)] eyl
                      eyn:f64[] = sub eym eyk
                      eyo:f64[] = div eyn 6.283185307179586
                      eyp:f64[1] = mul 6.283185307179586 eem
                      eyq:f64[1] = mul 6.283185307179586 eem
                      eyr:f64[1] = sin eyq
                      eys:f64[1] = sub eyp eyr
                      eyt:f64[1] = mul eyo eys
                      eyu:f64[1] = add eyt eyk
                      eyv:f64[1,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(1, 1)
                      ] eyi
                      eyw:f64[1,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(1, 1)
                      ] eyu
                      eyx:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] 0.0
                      eyy:f64[1,1] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 1)
                      ] eyx
                      eyz:f64[1,3] = concatenate[dimension=1] eyv eyw eyy
                      eza:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] eqs
                      ezb:f64[] = squeeze[dimensions=(0,)] eza
                      ezc:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] ela
                      ezd:f64[] = squeeze[dimensions=(0,)] ezc
                      eze:f64[] = sub ezd ezb
                      ezf:f64[] = div eze 6.283185307179586
                      ezg:f64[1] = mul 6.283185307179586 efa
                      ezh:f64[1] = mul 6.283185307179586 efa
                      ezi:f64[1] = sin ezh
                      ezj:f64[1] = sub ezg ezi
                      ezk:f64[1] = mul ezf ezj
                      ezl:f64[1] = add ezk ezb
                      ezm:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] eqs
                      ezn:f64[] = squeeze[dimensions=(0,)] ezm
                      ezo:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] ela
                      ezp:f64[] = squeeze[dimensions=(0,)] ezo
                      ezq:f64[] = sub ezp ezn
                      ezr:f64[] = div ezq 6.283185307179586
                      ezs:f64[1] = mul 6.283185307179586 efa
                      ezt:f64[1] = mul 6.283185307179586 efa
                      ezu:f64[1] = sin ezt
                      ezv:f64[1] = sub ezs ezu
                      ezw:f64[1] = mul ezr ezv
                      ezx:f64[1] = add ezw ezn
                      ezy:f64[1,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(1, 1)
                      ] ezl
                      ezz:f64[1,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(1, 1)
                      ] ezx
                      faa:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] 0.0
                      fab:f64[1,1] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 1)
                      ] faa
                      fac:f64[1,3] = concatenate[dimension=1] ezy ezz fab
                      fad:bool[1,3] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(1, 3)
                      ] edg
                      fae:f64[1,3] = select_n fad ery ewt
                      faf:f64[1,3] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 3)
                      ] dtz
                      fag:f64[1,3] = add faf fae
                      fah:bool[1,3] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(1, 3)
                      ] edu
                      fai:f64[1,3] = select_n fah ete exw
                      faj:f64[1,3] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 3)
                      ] dub
                      fak:f64[1,3] = add faj fai
                      fal:bool[1,3] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(1, 3)
                      ] eei
                      fam:f64[1,3] = select_n fal euk eyz
                      fan:f64[1,3] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 3)
                      ] dua
                      fao:f64[1,3] = add fan fam
                      fap:bool[1,3] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(1, 3)
                      ] eew
                      faq:f64[1,3] = select_n fap evq fac
                      far:f64[1,3] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 3)
                      ] due
                      fas:f64[1,3] = add far faq
                      fat:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] 0.0
                      fau:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] 0.0
                      fav:f64[1,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(1, 1)
                      ] ecq
                      faw:f64[1,1] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 1)
                      ] fat
                      fax:f64[1,1] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 1)
                      ] fau
                      fay:f64[1,3] = concatenate[dimension=1] faw fax fav
                      faz:f64[1,1,3] = reshape[
                        dimensions=None
                        new_sizes=(1, 1, 3)
                      ] fay
                      fba:f64[1,3] = squeeze[dimensions=(1,)] faz
                      fbb:f64[1,4,3] = broadcast_in_dim[
                        broadcast_dimensions=(0, 2)
                        shape=(1, 4, 3)
                      ] fba
                      fbc:f64[1,12] = reshape[dimensions=None new_sizes=(1, 12)] fbb
                      fbd:f64[1,12] = concatenate[dimension=1] fag fak fao fas
                      fbe:f64[1,12] = sub fbd fbc
                      fbf:f64[1,8] = slice[
                        limit_indices=(1, 8)
                        start_indices=(0, 0)
                        strides=None
                      ] dtw
                      fbg:f64[1,1] = slice[
                        limit_indices=(1, 1)
                        start_indices=(0, 0)
                        strides=None
                      ] fbf
                      fbh:f64[1] = squeeze[dimensions=(1,)] fbg
                      fbi:f64[1,1] = slice[
                        limit_indices=(1, 5)
                        start_indices=(0, 4)
                        strides=None
                      ] fbf
                      fbj:f64[1] = squeeze[dimensions=(1,)] fbi
                      fbk:f64[1,1] = slice[
                        limit_indices=(1, 2)
                        start_indices=(0, 1)
                        strides=None
                      ] fbf
                      fbl:f64[1] = squeeze[dimensions=(1,)] fbk
                      fbm:f64[1,1] = slice[
                        limit_indices=(1, 6)
                        start_indices=(0, 5)
                        strides=None
                      ] fbf
                      fbn:f64[1] = squeeze[dimensions=(1,)] fbm
                      fbo:f64[1,1] = slice[
                        limit_indices=(1, 3)
                        start_indices=(0, 2)
                        strides=None
                      ] fbf
                      fbp:f64[1] = squeeze[dimensions=(1,)] fbo
                      fbq:f64[1,1] = slice[
                        limit_indices=(1, 7)
                        start_indices=(0, 6)
                        strides=None
                      ] fbf
                      fbr:f64[1] = squeeze[dimensions=(1,)] fbq
                      fbs:f64[1,1] = slice[
                        limit_indices=(1, 4)
                        start_indices=(0, 3)
                        strides=None
                      ] fbf
                      fbt:f64[1] = squeeze[dimensions=(1,)] fbs
                      fbu:f64[1,1] = slice[
                        limit_indices=(1, 8)
                        start_indices=(0, 7)
                        strides=None
                      ] fbf
                      fbv:f64[1] = squeeze[dimensions=(1,)] fbu
                      fbw:f64[1,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(1, 1)
                      ] fbh
                      fbx:f64[1,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(1, 1)
                      ] fbj
                      fby:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] 0.0
                      fbz:f64[1,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(1, 1)
                      ] fbl
                      fca:f64[1,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(1, 1)
                      ] fbn
                      fcb:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] 0.0
                      fcc:f64[1,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(1, 1)
                      ] fbp
                      fcd:f64[1,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(1, 1)
                      ] fbr
                      fce:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] 0.0
                      fcf:f64[1,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(1, 1)
                      ] fbt
                      fcg:f64[1,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(1, 1)
                      ] fbv
                      fch:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] 0.0
                      fci:f64[1,1] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 1)
                      ] fby
                      fcj:f64[1,1] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 1)
                      ] fcb
                      fck:f64[1,1] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 1)
                      ] fce
                      fcl:f64[1,1] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 1)
                      ] fch
                      fcm:f64[1,12] = concatenate[dimension=1] fbw fbx fci fbz fca
                        fcj fcc fcd fck fcf fcg fcl
                      fcn:f64[1,12] = add fbe fcm
                      fco:f64[1,3] = slice[
                        limit_indices=(1, 3)
                        start_indices=(0, 0)
                        strides=None
                      ] fcn
                      fcp:f64[] = select_n False 0.1881 -0.1881
                      fcq:f64[] = select_n True 0.04675 -0.04675
                      fcr:f64[1,1] = slice[
                        limit_indices=(1, 1)
                        start_indices=(0, 0)
                        strides=None
                      ] fco
                      fcs:f64[1] = squeeze[dimensions=(1,)] fcr
                      fct:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] fcp
                      fcu:f64[1] = sub fcs fct
                      fcv:f64[1,1] = slice[
                        limit_indices=(1, 2)
                        start_indices=(0, 1)
                        strides=None
                      ] fco
                      fcw:f64[1] = squeeze[dimensions=(1,)] fcv
                      fcx:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] fcq
                      fcy:f64[1] = sub fcw fcx
                      fcz:f64[1,1] = slice[
                        limit_indices=(1, 3)
                        start_indices=(0, 2)
                        strides=None
                      ] fco
                      fda:f64[1] = squeeze[dimensions=(1,)] fcz
                      fdb:f64[] = select_n True 0.08 -0.08
                      fdc:f64[1] = integer_pow[y=2] fcu
                      fdd:f64[1] = integer_pow[y=2] fcy
                      fde:f64[1] = add fdc fdd
                      fdf:f64[1] = integer_pow[y=2] fda
                      fdg:f64[1] = add fde fdf
                      fdh:f64[1] = sqrt fdg
                      fdi:f64[1] = integer_pow[y=2] fdh
                      fdj:f64[1] = sub fdi 0.0064
                      fdk:f64[1] = sqrt fdj
                      fdl:f64[1] = integer_pow[y=2] fcy
                      fdm:f64[1] = integer_pow[y=2] fda
                      fdn:f64[1] = add fdl fdm
                      fdo:f64[] = integer_pow[y=2] fdb
                      fdp:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] fdo
                      fdq:f64[1] = sub fdn fdp
                      fdr:f64[1] = sqrt fdq
                      fds:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] fdb
                      fdt:f64[1] = mul fda fds
                      fdu:f64[1] = mul fcy fdr
                      fdv:f64[1] = add fdt fdu
                      fdw:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] fdb
                      fdx:f64[1] = mul fcy fdw
                      fdy:f64[1] = mul fda fdr
                      fdz:f64[1] = sub fdx fdy
                      fea:f64[1] = atan2 fdv fdz
                      feb:f64[1] = integer_pow[y=2] fdk
                      fec:f64[1] = sub 0.090738 feb
                      fed:f64[] = abs 0.045369
                      fee:f64[] = mul 2.0 fed
                      fef:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] fee
                      feg:f64[1] = div fec fef
                      feh:f64[1] = slice[
                        limit_indices=(3,)
                        start_indices=(2,)
                        strides=None
                      ] duf
                      fei:f64[] = squeeze[dimensions=(0,)] feh
                      fej:f64[1] = slice[
                        limit_indices=(3,)
                        start_indices=(2,)
                        strides=None
                      ] dug
                      fek:f64[] = squeeze[dimensions=(0,)] fej
                      fel:f64[] = add 3.141592653589793 fei
                      fem:f64[] = cos fel
                      fen:f64[] = add 3.141592653589793 fek
                      feo:f64[] = cos fen
                      fep:f64[1] = pjit[name=clip jaxpr=clip] feg fem feo
                      feq:f64[1] = acos fep
                      fer:f64[1] = sub 3.141592653589793 feq
                      fes:f64[1] = neg fer
                      fet:f64[1] = sin fea
                      feu:f64[1] = mul fcy fet
                      fev:f64[1] = cos fea
                      few:f64[1] = mul fda fev
                      fex:f64[1] = sub feu few
                      fey:f64[1] = sin fes
                      fez:f64[1] = mul -0.213 fey
                      ffa:f64[1] = cos fes
                      ffb:f64[1] = mul -0.213 ffa
                      ffc:f64[1] = add -0.213 ffb
                      ffd:f64[1] = mul fez fex
                      ffe:f64[1] = mul ffc fcu
                      fff:f64[1] = add ffd ffe
                      ffg:f64[1] = mul fez fcu
                      ffh:f64[1] = mul ffc fex
                      ffi:f64[1] = sub ffg ffh
                      ffj:f64[1] = atan2 fff ffi
                      ffk:f64[1,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(1, 1)
                      ] fea
                      ffl:f64[1,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(1, 1)
                      ] ffj
                      ffm:f64[1,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(1, 1)
                      ] fes
                      ffn:f64[1,3] = concatenate[dimension=1] ffk ffl ffm
                      ffo:f64[1,3] = slice[
                        limit_indices=(1, 6)
                        start_indices=(0, 3)
                        strides=None
                      ] fcn
                      ffp:f64[] = select_n False 0.1881 -0.1881
                      ffq:f64[] = select_n False 0.04675 -0.04675
                      ffr:f64[1,1] = slice[
                        limit_indices=(1, 1)
                        start_indices=(0, 0)
                        strides=None
                      ] ffo
                      ffs:f64[1] = squeeze[dimensions=(1,)] ffr
                      fft:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] ffp
                      ffu:f64[1] = sub ffs fft
                      ffv:f64[1,1] = slice[
                        limit_indices=(1, 2)
                        start_indices=(0, 1)
                        strides=None
                      ] ffo
                      ffw:f64[1] = squeeze[dimensions=(1,)] ffv
                      ffx:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] ffq
                      ffy:f64[1] = sub ffw ffx
                      ffz:f64[1,1] = slice[
                        limit_indices=(1, 3)
                        start_indices=(0, 2)
                        strides=None
                      ] ffo
                      fga:f64[1] = squeeze[dimensions=(1,)] ffz
                      fgb:f64[] = select_n False 0.08 -0.08
                      fgc:f64[1] = integer_pow[y=2] ffu
                      fgd:f64[1] = integer_pow[y=2] ffy
                      fge:f64[1] = add fgc fgd
                      fgf:f64[1] = integer_pow[y=2] fga
                      fgg:f64[1] = add fge fgf
                      fgh:f64[1] = sqrt fgg
                      fgi:f64[1] = integer_pow[y=2] fgh
                      fgj:f64[1] = sub fgi 0.0064
                      fgk:f64[1] = sqrt fgj
                      fgl:f64[1] = integer_pow[y=2] ffy
                      fgm:f64[1] = integer_pow[y=2] fga
                      fgn:f64[1] = add fgl fgm
                      fgo:f64[] = integer_pow[y=2] fgb
                      fgp:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] fgo
                      fgq:f64[1] = sub fgn fgp
                      fgr:f64[1] = sqrt fgq
                      fgs:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] fgb
                      fgt:f64[1] = mul fga fgs
                      fgu:f64[1] = mul ffy fgr
                      fgv:f64[1] = add fgt fgu
                      fgw:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] fgb
                      fgx:f64[1] = mul ffy fgw
                      fgy:f64[1] = mul fga fgr
                      fgz:f64[1] = sub fgx fgy
                      fha:f64[1] = atan2 fgv fgz
                      fhb:f64[1] = integer_pow[y=2] fgk
                      fhc:f64[1] = sub 0.090738 fhb
                      fhd:f64[] = abs 0.045369
                      fhe:f64[] = mul 2.0 fhd
                      fhf:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] fhe
                      fhg:f64[1] = div fhc fhf
                      fhh:f64[1] = slice[
                        limit_indices=(3,)
                        start_indices=(2,)
                        strides=None
                      ] duf
                      fhi:f64[] = squeeze[dimensions=(0,)] fhh
                      fhj:f64[1] = slice[
                        limit_indices=(3,)
                        start_indices=(2,)
                        strides=None
                      ] dug
                      fhk:f64[] = squeeze[dimensions=(0,)] fhj
                      fhl:f64[] = add 3.141592653589793 fhi
                      fhm:f64[] = cos fhl
                      fhn:f64[] = add 3.141592653589793 fhk
                      fho:f64[] = cos fhn
                      fhp:f64[1] = pjit[name=clip jaxpr=clip] fhg fhm fho
                      fhq:f64[1] = acos fhp
                      fhr:f64[1] = sub 3.141592653589793 fhq
                      fhs:f64[1] = neg fhr
                      fht:f64[1] = sin fha
                      fhu:f64[1] = mul ffy fht
                      fhv:f64[1] = cos fha
                      fhw:f64[1] = mul fga fhv
                      fhx:f64[1] = sub fhu fhw
                      fhy:f64[1] = sin fhs
                      fhz:f64[1] = mul -0.213 fhy
                      fia:f64[1] = cos fhs
                      fib:f64[1] = mul -0.213 fia
                      fic:f64[1] = add -0.213 fib
                      fid:f64[1] = mul fhz fhx
                      fie:f64[1] = mul fic ffu
                      fif:f64[1] = add fid fie
                      fig:f64[1] = mul fhz ffu
                      fih:f64[1] = mul fic fhx
                      fii:f64[1] = sub fig fih
                      fij:f64[1] = atan2 fif fii
                      fik:f64[1,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(1, 1)
                      ] fha
                      fil:f64[1,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(1, 1)
                      ] fij
                      fim:f64[1,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(1, 1)
                      ] fhs
                      fin:f64[1,3] = concatenate[dimension=1] fik fil fim
                      fio:f64[1,3] = slice[
                        limit_indices=(1, 9)
                        start_indices=(0, 6)
                        strides=None
                      ] fcn
                      fip:f64[] = select_n True 0.1881 -0.1881
                      fiq:f64[] = select_n True 0.04675 -0.04675
                      fir:f64[1,1] = slice[
                        limit_indices=(1, 1)
                        start_indices=(0, 0)
                        strides=None
                      ] fio
                      fis:f64[1] = squeeze[dimensions=(1,)] fir
                      fit:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] fip
                      fiu:f64[1] = sub fis fit
                      fiv:f64[1,1] = slice[
                        limit_indices=(1, 2)
                        start_indices=(0, 1)
                        strides=None
                      ] fio
                      fiw:f64[1] = squeeze[dimensions=(1,)] fiv
                      fix:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] fiq
                      fiy:f64[1] = sub fiw fix
                      fiz:f64[1,1] = slice[
                        limit_indices=(1, 3)
                        start_indices=(0, 2)
                        strides=None
                      ] fio
                      fja:f64[1] = squeeze[dimensions=(1,)] fiz
                      fjb:f64[] = select_n True 0.08 -0.08
                      fjc:f64[1] = integer_pow[y=2] fiu
                      fjd:f64[1] = integer_pow[y=2] fiy
                      fje:f64[1] = add fjc fjd
                      fjf:f64[1] = integer_pow[y=2] fja
                      fjg:f64[1] = add fje fjf
                      fjh:f64[1] = sqrt fjg
                      fji:f64[1] = integer_pow[y=2] fjh
                      fjj:f64[1] = sub fji 0.0064
                      fjk:f64[1] = sqrt fjj
                      fjl:f64[1] = integer_pow[y=2] fiy
                      fjm:f64[1] = integer_pow[y=2] fja
                      fjn:f64[1] = add fjl fjm
                      fjo:f64[] = integer_pow[y=2] fjb
                      fjp:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] fjo
                      fjq:f64[1] = sub fjn fjp
                      fjr:f64[1] = sqrt fjq
                      fjs:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] fjb
                      fjt:f64[1] = mul fja fjs
                      fju:f64[1] = mul fiy fjr
                      fjv:f64[1] = add fjt fju
                      fjw:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] fjb
                      fjx:f64[1] = mul fiy fjw
                      fjy:f64[1] = mul fja fjr
                      fjz:f64[1] = sub fjx fjy
                      fka:f64[1] = atan2 fjv fjz
                      fkb:f64[1] = integer_pow[y=2] fjk
                      fkc:f64[1] = sub 0.090738 fkb
                      fkd:f64[] = abs 0.045369
                      fke:f64[] = mul 2.0 fkd
                      fkf:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] fke
                      fkg:f64[1] = div fkc fkf
                      fkh:f64[1] = slice[
                        limit_indices=(3,)
                        start_indices=(2,)
                        strides=None
                      ] duf
                      fki:f64[] = squeeze[dimensions=(0,)] fkh
                      fkj:f64[1] = slice[
                        limit_indices=(3,)
                        start_indices=(2,)
                        strides=None
                      ] dug
                      fkk:f64[] = squeeze[dimensions=(0,)] fkj
                      fkl:f64[] = add 3.141592653589793 fki
                      fkm:f64[] = cos fkl
                      fkn:f64[] = add 3.141592653589793 fkk
                      fko:f64[] = cos fkn
                      fkp:f64[1] = pjit[name=clip jaxpr=clip] fkg fkm fko
                      fkq:f64[1] = acos fkp
                      fkr:f64[1] = sub 3.141592653589793 fkq
                      fks:f64[1] = neg fkr
                      fkt:f64[1] = sin fka
                      fku:f64[1] = mul fiy fkt
                      fkv:f64[1] = cos fka
                      fkw:f64[1] = mul fja fkv
                      fkx:f64[1] = sub fku fkw
                      fky:f64[1] = sin fks
                      fkz:f64[1] = mul -0.213 fky
                      fla:f64[1] = cos fks
                      flb:f64[1] = mul -0.213 fla
                      flc:f64[1] = add -0.213 flb
                      fld:f64[1] = mul fkz fkx
                      fle:f64[1] = mul flc fiu
                      flf:f64[1] = add fld fle
                      flg:f64[1] = mul fkz fiu
                      flh:f64[1] = mul flc fkx
                      fli:f64[1] = sub flg flh
                      flj:f64[1] = atan2 flf fli
                      flk:f64[1,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(1, 1)
                      ] fka
                      fll:f64[1,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(1, 1)
                      ] flj
                      flm:f64[1,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(1, 1)
                      ] fks
                      fln:f64[1,3] = concatenate[dimension=1] flk fll flm
                      flo:f64[1,3] = slice[
                        limit_indices=(1, 12)
                        start_indices=(0, 9)
                        strides=None
                      ] fcn
                      flp:f64[] = select_n True 0.1881 -0.1881
                      flq:f64[] = select_n False 0.04675 -0.04675
                      flr:f64[1,1] = slice[
                        limit_indices=(1, 1)
                        start_indices=(0, 0)
                        strides=None
                      ] flo
                      fls:f64[1] = squeeze[dimensions=(1,)] flr
                      flt:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] flp
                      flu:f64[1] = sub fls flt
                      flv:f64[1,1] = slice[
                        limit_indices=(1, 2)
                        start_indices=(0, 1)
                        strides=None
                      ] flo
                      flw:f64[1] = squeeze[dimensions=(1,)] flv
                      flx:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] flq
                      fly:f64[1] = sub flw flx
                      flz:f64[1,1] = slice[
                        limit_indices=(1, 3)
                        start_indices=(0, 2)
                        strides=None
                      ] flo
                      fma:f64[1] = squeeze[dimensions=(1,)] flz
                      fmb:f64[] = select_n False 0.08 -0.08
                      fmc:f64[1] = integer_pow[y=2] flu
                      fmd:f64[1] = integer_pow[y=2] fly
                      fme:f64[1] = add fmc fmd
                      fmf:f64[1] = integer_pow[y=2] fma
                      fmg:f64[1] = add fme fmf
                      fmh:f64[1] = sqrt fmg
                      fmi:f64[1] = integer_pow[y=2] fmh
                      fmj:f64[1] = sub fmi 0.0064
                      fmk:f64[1] = sqrt fmj
                      fml:f64[1] = integer_pow[y=2] fly
                      fmm:f64[1] = integer_pow[y=2] fma
                      fmn:f64[1] = add fml fmm
                      fmo:f64[] = integer_pow[y=2] fmb
                      fmp:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] fmo
                      fmq:f64[1] = sub fmn fmp
                      fmr:f64[1] = sqrt fmq
                      fms:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] fmb
                      fmt:f64[1] = mul fma fms
                      fmu:f64[1] = mul fly fmr
                      fmv:f64[1] = add fmt fmu
                      fmw:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] fmb
                      fmx:f64[1] = mul fly fmw
                      fmy:f64[1] = mul fma fmr
                      fmz:f64[1] = sub fmx fmy
                      fna:f64[1] = atan2 fmv fmz
                      fnb:f64[1] = integer_pow[y=2] fmk
                      fnc:f64[1] = sub 0.090738 fnb
                      fnd:f64[] = abs 0.045369
                      fne:f64[] = mul 2.0 fnd
                      fnf:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] fne
                      fng:f64[1] = div fnc fnf
                      fnh:f64[1] = slice[
                        limit_indices=(3,)
                        start_indices=(2,)
                        strides=None
                      ] duf
                      fni:f64[] = squeeze[dimensions=(0,)] fnh
                      fnj:f64[1] = slice[
                        limit_indices=(3,)
                        start_indices=(2,)
                        strides=None
                      ] dug
                      fnk:f64[] = squeeze[dimensions=(0,)] fnj
                      fnl:f64[] = add 3.141592653589793 fni
                      fnm:f64[] = cos fnl
                      fnn:f64[] = add 3.141592653589793 fnk
                      fno:f64[] = cos fnn
                      fnp:f64[1] = pjit[name=clip jaxpr=clip] fng fnm fno
                      fnq:f64[1] = acos fnp
                      fnr:f64[1] = sub 3.141592653589793 fnq
                      fns:f64[1] = neg fnr
                      fnt:f64[1] = sin fna
                      fnu:f64[1] = mul fly fnt
                      fnv:f64[1] = cos fna
                      fnw:f64[1] = mul fma fnv
                      fnx:f64[1] = sub fnu fnw
                      fny:f64[1] = sin fns
                      fnz:f64[1] = mul -0.213 fny
                      foa:f64[1] = cos fns
                      fob:f64[1] = mul -0.213 foa
                      foc:f64[1] = add -0.213 fob
                      fod:f64[1] = mul fnz fnx
                      foe:f64[1] = mul foc flu
                      fof:f64[1] = add fod foe
                      fog:f64[1] = mul fnz flu
                      foh:f64[1] = mul foc fnx
                      foi:f64[1] = sub fog foh
                      foj:f64[1] = atan2 fof foi
                      fok:f64[1,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(1, 1)
                      ] fna
                      fol:f64[1,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(1, 1)
                      ] foj
                      fom:f64[1,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(1, 1)
                      ] fns
                      fon:f64[1,3] = concatenate[dimension=1] fok fol fom
                      foo:f64[1,12] = concatenate[dimension=1] ffn fin fln fon
                      fop:f64[1,3] = reshape[dimensions=None new_sizes=(1, 3)] dug
                      foq:f64[3] = squeeze[dimensions=(0,)] fop
                      for:f64[4,3] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(4, 3)
                      ] foq
                      fos:f64[12] = reshape[dimensions=None new_sizes=(12,)] for
                      fot:f64[1,3] = reshape[dimensions=None new_sizes=(1, 3)] duf
                      fou:f64[3] = squeeze[dimensions=(0,)] fot
                      fov:f64[4,3] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(4, 3)
                      ] fou
                      fow:f64[12] = reshape[dimensions=None new_sizes=(12,)] fov
                      fox:f64[1,12] = pjit[name=clip jaxpr=clip1] foo fos fow
                      foy:f64[12] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(12,)
                      ] 0.0
                      foz:i64[1,3] = reshape[dimensions=None new_sizes=(1, 3)] duh
                      fpa:i64[3] = squeeze[dimensions=(0,)] foz
                      fpb:i64[4,3] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(4, 3)
                      ] fpa
                      fpc:i64[12] = reshape[dimensions=None new_sizes=(12,)] fpb
                      fpd:f64[12] = convert_element_type[
                        new_dtype=float64
                        weak_type=True
                      ] fpc
                      fpe:f64[12] = mul fpd 1.4
                      fpf:f64[1,3] = reshape[dimensions=None new_sizes=(1, 3)] dui
                      fpg:f64[3] = squeeze[dimensions=(0,)] fpf
                      fph:f64[4,3] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(4, 3)
                      ] fpg
                      fpi:f64[12] = reshape[dimensions=None new_sizes=(12,)] fph
                      fpj:f64[1,12] = cond[
                        branches=(
                          { lambda ; fpk:f64[12] fpl:f64[12] fpm:f64[1,36] fpn:f64[1,12]
                              fpo:f64[12] fpp:f64[12] fpq:f64[12]. let
                              fpr:f64[1,12] = broadcast_in_dim[
                                broadcast_dimensions=(1,)
                                shape=(1, 12)
                              ] fpl
                            in (fpr,) }
                          { lambda ; fps:f64[12] fpt:f64[12] fpu:f64[1,36] fpv:f64[1,12]
                              fpw:f64[12] fpx:f64[12] fpy:f64[12]. let
                              fpz:f64[1,12] = slice[
                                limit_indices=(1, 16)
                                start_indices=(0, 4)
                                strides=None
                              ] fpu
                              fqa:f64[1,12] = slice[
                                limit_indices=(1, 34)
                                start_indices=(0, 22)
                                strides=None
                              ] fpu
                              fqb:f64[1,12] = sub fpv fpz
                              fqc:f64[12] = convert_element_type[
                                new_dtype=float64
                                weak_type=False
                              ] fpx
                              fqd:f64[1,12] = broadcast_in_dim[
                                broadcast_dimensions=(1,)
                                shape=(1, 12)
                              ] fqc
                              fqe:f64[1,12] = mul fqd fqb
                              fqf:f64[1,12] = broadcast_in_dim[
                                broadcast_dimensions=(1,)
                                shape=(1, 12)
                              ] fpw
                              fqg:f64[1,12] = sub fqf fqa
                              fqh:f64[1,12] = broadcast_in_dim[
                                broadcast_dimensions=(1,)
                                shape=(1, 12)
                              ] fpy
                              fqi:f64[1,12] = mul fqh fqg
                              fqj:f64[1,12] = add fqe fqi
                              fqk:f64[1,12] = sub fpv fpz
                              fql:bool[1,12] = ne fqk 0.0
                              fqm:f64[1,12] = sub fpv fpz
                              fqn:f64[1,12] = pjit[name=_where jaxpr=_where8] fql
                                fqm 1
                              fqo:f64[1,12] = broadcast_in_dim[
                                broadcast_dimensions=(1,)
                                shape=(1, 12)
                              ] fps
                              fqp:bool[1,12] = gt fqj fqo
                              fqq:f64[1,12] = broadcast_in_dim[
                                broadcast_dimensions=(1,)
                                shape=(1, 12)
                              ] fpw
                              fqr:f64[1,12] = sub fqq fqa
                              fqs:f64[1,12] = broadcast_in_dim[
                                broadcast_dimensions=(1,)
                                shape=(1, 12)
                              ] fpy
                              fqt:f64[1,12] = mul fqs fqr
                              fqu:f64[1,12] = broadcast_in_dim[
                                broadcast_dimensions=(1,)
                                shape=(1, 12)
                              ] fps
                              fqv:f64[1,12] = sub fqu fqt
                              fqw:f64[1,12] = div fqv fqn
                              fqx:f64[1,12] = pjit[name=_where jaxpr=_where9] fqp
                                fqw fpx
                              fqy:f64[12] = neg fps
                              fqz:f64[1,12] = broadcast_in_dim[
                                broadcast_dimensions=(1,)
                                shape=(1, 12)
                              ] fqy
                              fra:bool[1,12] = lt fqj fqz
                              frb:f64[12] = neg fps
                              frc:f64[1,12] = broadcast_in_dim[
                                broadcast_dimensions=(1,)
                                shape=(1, 12)
                              ] fpw
                              frd:f64[1,12] = sub frc fqa
                              fre:f64[1,12] = broadcast_in_dim[
                                broadcast_dimensions=(1,)
                                shape=(1, 12)
                              ] fpy
                              frf:f64[1,12] = mul fre frd
                              frg:f64[1,12] = broadcast_in_dim[
                                broadcast_dimensions=(1,)
                                shape=(1, 12)
                              ] frb
                              frh:f64[1,12] = sub frg frf
                              fri:f64[1,12] = div frh fqn
                              frj:f64[1,12] = pjit[name=_where jaxpr=_where10] fra
                                fri fqx
                            in (frj,) }
                        )
                        linear=(False, False, False, False, False, False, False)
                      ] 1 duj fpe eco fox foy fpe fpi
                      frk:f64[1,12] = slice[
                        limit_indices=(1, 16)
                        start_indices=(0, 4)
                        strides=None
                      ] eco
                      frl:f64[1,12] = slice[
                        limit_indices=(1, 34)
                        start_indices=(0, 22)
                        strides=None
                      ] eco
                      frm:f64[1,12] = sub fox frk
                      frn:f64[1,12] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] fpj
                      fro:f64[1,12] = mul frn frm
                      frp:f64[1,12] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 12)
                      ] foy
                      frq:f64[1,12] = sub frp frl
                      frr:f64[1,12] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 12)
                      ] fpi
                      frs:f64[1,12] = mul frr frq
                      frt:f64[1,12] = add fro frs
                      fru:bool[12] = lt duk 0
                      frv:i32[12] = add duk 19
                      frw:i32[12] = select_n fru duk frv
                      frx:i32[12,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(12, 1)
                      ] frw
                      fry:f64[1,12] = gather[
                        dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
                        fill_value=None
                        indices_are_sorted=False
                        mode=GatherScatterMode.PROMISE_IN_BOUNDS
                        slice_sizes=(1, 1)
                        unique_indices=False
                      ] dyr frx
                      frz:bool[12] = lt dul 0
                      fsa:i32[12] = add dul 18
                      fsb:i32[12] = select_n frz dul fsa
                      fsc:i32[12,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(12, 1)
                      ] fsb
                      fsd:f64[1,12] = gather[
                        dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
                        fill_value=None
                        indices_are_sorted=False
                        mode=GatherScatterMode.PROMISE_IN_BOUNDS
                        slice_sizes=(1, 1)
                        unique_indices=False
                      ] dys fsc
                      fse:f64[12,1] = slice[
                        limit_indices=(12, 1)
                        start_indices=(0, 0)
                        strides=None
                      ] dum
                      fsf:f64[12] = squeeze[dimensions=(1,)] fse
                      fsg:f64[12,1] = slice[
                        limit_indices=(12, 2)
                        start_indices=(0, 1)
                        strides=None
                      ] dum
                      fsh:f64[12] = squeeze[dimensions=(1,)] fsg
                      fsi:f64[1,12] = pjit[name=clip jaxpr=clip1] frt fsf fsh
                      fsj:f64[1,12] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 12)
                      ] dun
                      fsk:f64[1,12] = mul fry fsj
                      fsl:f64[1,12] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 12)
                      ] duo
                      fsm:f64[1,12] = mul fsd fsl
                      fsn:f64[1,12] = add fsk fsm
                      fso:f64[1,12] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 12)
                      ] dup
                      fsp:f64[1,12] = mul fso fsn
                      fsq:f64[1,12] = mul duq fsi
                      fsr:f64[1,12] = add fsq fsp
                      fss:f64[12,1] = slice[
                        limit_indices=(12, 1)
                        start_indices=(0, 0)
                        strides=None
                      ] dur
                      fst:f64[12] = squeeze[dimensions=(1,)] fss
                      fsu:f64[12,1] = slice[
                        limit_indices=(12, 2)
                        start_indices=(0, 1)
                        strides=None
                      ] dur
                      fsv:f64[12] = squeeze[dimensions=(1,)] fsu
                      fsw:f64[1,12] = pjit[name=clip jaxpr=clip1] fsr fst fsv
                      fsx:f64[1,12] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 12)
                      ] dup
                      fsy:f64[1,12] = mul fsw fsx
                      fsz:f64[18] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(18,)
                      ] 0.0
                      fta:bool[12] = lt dul 0
                      ftb:i32[12] = add dul 18
                      ftc:i32[12] = select_n fta dul ftb
                      ftd:i32[12,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(12, 1)
                      ] ftc
                      fte:f64[1,18] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 18)
                      ] fsz
                      ftf:f64[1,18] = scatter-add[
                        dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0,), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                        indices_are_sorted=False
                        mode=GatherScatterMode.FILL_OR_DROP
                        unique_indices=False
                        update_consts=()
                        update_jaxpr=jaxpr
                      ] fte ftd fsy
                      ftg:f64[6] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(6,)
                      ] 0.0
                      fth:f64[1,12] = slice[
                        limit_indices=(1, 19)
                        start_indices=(0, 7)
                        strides=None
                      ] dyr
                      fti:f64[12] = slice[
                        limit_indices=(18,)
                        start_indices=(6,)
                        strides=None
                      ] duv
                      ftj:f64[1,12] = neg fth
                      ftk:f64[1,12] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 12)
                      ] fti
                      ftl:f64[1,12] = mul ftj ftk
                      ftm:f64[1,6] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 6)
                      ] ftg
                      ftn:f64[1,18] = concatenate[dimension=1] ftm ftl
                      fto:f64[1,18] = mul duw dys
                      ftp:f64[1,18] = sub ftn fto
                      ftq:f64[1,6,3] = slice[
                        limit_indices=(1, 6, 3)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] dzg
                      ftr:f64[1,6,3] = slice[
                        limit_indices=(1, 6, 3)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] dzh
                      fts:f64[1,6] = slice[
                        limit_indices=(1, 6)
                        start_indices=(0, 0)
                        strides=None
                      ] dys
                      ftt:i64[6] = slice[
                        limit_indices=(6,)
                        start_indices=(0,)
                        strides=None
                      ] dux
                      ftu:f64[1,1,1,3] = reshape[
                        dimensions=None
                        new_sizes=(1, 1, 1, 3)
                      ] duy
                      ftv:f64[1,3] = reshape[dimensions=None new_sizes=(1, 3)] ftu
                      ftw:f64[1,3] = neg ftv
                      ftx:f64[1,3] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1, 3)
                      ] 0.0
                      fty:f64[1,6,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 6, 1)
                      ] fts
                      ftz:f64[1,6,3] = mul ftq fty
                      fua:f64[1,6,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 6, 1)
                      ] fts
                      fub:f64[1,6,3] = mul ftr fua
                      fuc:bool[6] = lt ftt 0
                      fud:i64[6] = add ftt 1
                      fue:i64[6] = select_n fuc ftt fud
                      fuf:i32[6] = convert_element_type[
                        new_dtype=int32
                        weak_type=False
                      ] fue
                      fug:i32[6,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(6, 1)
                      ] fuf
                      fuh:f64[1,1,3] = broadcast_in_dim[
                        broadcast_dimensions=(1, 2)
                        shape=(1, 1, 3)
                      ] ftx
                      fui:f64[1,1,3] = scatter-add[
                        dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                        indices_are_sorted=False
                        mode=GatherScatterMode.FILL_OR_DROP
                        unique_indices=False
                        update_consts=()
                        update_jaxpr=jaxpr
                      ] fuh fug ftz
                      fuj:bool[6] = lt ftt 0
                      fuk:i64[6] = add ftt 1
                      ful:i64[6] = select_n fuj ftt fuk
                      fum:i32[6] = convert_element_type[
                        new_dtype=int32
                        weak_type=False
                      ] ful
                      fun:i32[6,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(6, 1)
                      ] fum
                      fuo:f64[1,1,3] = broadcast_in_dim[
                        broadcast_dimensions=(1, 2)
                        shape=(1, 1, 3)
                      ] ftw
                      fup:f64[1,1,3] = scatter-add[
                        dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                        indices_are_sorted=False
                        mode=GatherScatterMode.FILL_OR_DROP
                        unique_indices=False
                        update_consts=()
                        update_jaxpr=jaxpr
                      ] fuo fun fub
                      fuq:f64[1,4,3] = pjit[name=_take jaxpr=_take1] dzg duz
                      fur:f64[1,4,3] = pjit[name=_take jaxpr=_take1] dzh dva
                      fus:f64[1,4] = pjit[name=_take jaxpr=_take2] dys dvb
                      fut:i64[4] = pjit[name=_take jaxpr=_take3] dux dvc
                      fuu:f64[1,4,3] = pjit[name=_take jaxpr=_take4] fui dvd
                      fuv:f64[1,4,3] = pjit[name=_take jaxpr=_take4] fup dve
                      fuw:f64[1,4,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 4, 1)
                      ] fus
                      fux:f64[1,4,3] = mul fuq fuw
                      fuy:f64[1,4,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 4, 1)
                      ] fus
                      fuz:f64[1,4,3] = mul fur fuy
                      fva:bool[4] = lt fut 0
                      fvb:i64[4] = add fut 4
                      fvc:i64[4] = select_n fva fut fvb
                      fvd:i32[4] = convert_element_type[
                        new_dtype=int32
                        weak_type=False
                      ] fvc
                      fve:i32[4,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(4, 1)
                      ] fvd
                      fvf:f64[1,4,3] = scatter-add[
                        dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                        indices_are_sorted=False
                        mode=GatherScatterMode.FILL_OR_DROP
                        unique_indices=False
                        update_consts=()
                        update_jaxpr=jaxpr
                      ] fuu fve fux
                      fvg:bool[4] = lt fut 0
                      fvh:i64[4] = add fut 4
                      fvi:i64[4] = select_n fvg fut fvh
                      fvj:i32[4] = convert_element_type[
                        new_dtype=int32
                        weak_type=False
                      ] fvi
                      fvk:i32[4,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(4, 1)
                      ] fvj
                      fvl:f64[1,4,3] = scatter-add[
                        dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                        indices_are_sorted=False
                        mode=GatherScatterMode.FILL_OR_DROP
                        unique_indices=False
                        update_consts=()
                        update_jaxpr=jaxpr
                      ] fuv fvk fuz
                      fvm:f64[1,4,3] = pjit[name=_take jaxpr=_take1] dzg dvf
                      fvn:f64[1,4,3] = pjit[name=_take jaxpr=_take1] dzh dvg
                      fvo:f64[1,4] = pjit[name=_take jaxpr=_take2] dys dvh
                      fvp:i64[4] = pjit[name=_take jaxpr=_take3] dux dvi
                      fvq:f64[1,4,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 4, 1)
                      ] fvo
                      fvr:f64[1,4,3] = mul fvm fvq
                      fvs:f64[1,4,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 4, 1)
                      ] fvo
                      fvt:f64[1,4,3] = mul fvn fvs
                      fvu:bool[4] = lt fvp 0
                      fvv:i64[4] = add fvp 4
                      fvw:i64[4] = select_n fvu fvp fvv
                      fvx:i32[4] = convert_element_type[
                        new_dtype=int32
                        weak_type=False
                      ] fvw
                      fvy:i32[4,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(4, 1)
                      ] fvx
                      fvz:f64[1,4,3] = scatter-add[
                        dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                        indices_are_sorted=False
                        mode=GatherScatterMode.FILL_OR_DROP
                        unique_indices=False
                        update_consts=()
                        update_jaxpr=jaxpr
                      ] fvf fvy fvr
                      fwa:bool[4] = lt fvp 0
                      fwb:i64[4] = add fvp 4
                      fwc:i64[4] = select_n fwa fvp fwb
                      fwd:i32[4] = convert_element_type[
                        new_dtype=int32
                        weak_type=False
                      ] fwc
                      fwe:i32[4,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(4, 1)
                      ] fwd
                      fwf:f64[1,4,3] = scatter-add[
                        dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                        indices_are_sorted=False
                        mode=GatherScatterMode.FILL_OR_DROP
                        unique_indices=False
                        update_consts=()
                        update_jaxpr=jaxpr
                      ] fvl fwe fvt
                      fwg:f64[1,4,3] = pjit[name=_take jaxpr=_take1] dzg dvj
                      fwh:f64[1,4,3] = pjit[name=_take jaxpr=_take1] dzh dvk
                      fwi:f64[1,4] = pjit[name=_take jaxpr=_take2] dys dvl
                      fwj:i64[4] = pjit[name=_take jaxpr=_take3] dux dvm
                      fwk:f64[1,4,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 4, 1)
                      ] fwi
                      fwl:f64[1,4,3] = mul fwg fwk
                      fwm:f64[1,4,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 4, 1)
                      ] fwi
                      fwn:f64[1,4,3] = mul fwh fwm
                      fwo:bool[4] = lt fwj 0
                      fwp:i64[4] = add fwj 4
                      fwq:i64[4] = select_n fwo fwj fwp
                      fwr:i32[4] = convert_element_type[
                        new_dtype=int32
                        weak_type=False
                      ] fwq
                      fws:i32[4,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(4, 1)
                      ] fwr
                      fwt:f64[1,4,3] = scatter-add[
                        dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                        indices_are_sorted=False
                        mode=GatherScatterMode.FILL_OR_DROP
                        unique_indices=False
                        update_consts=()
                        update_jaxpr=jaxpr
                      ] fvz fws fwl
                      fwu:bool[4] = lt fwj 0
                      fwv:i64[4] = add fwj 4
                      fww:i64[4] = select_n fwu fwj fwv
                      fwx:i32[4] = convert_element_type[
                        new_dtype=int32
                        weak_type=False
                      ] fww
                      fwy:i32[4,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(4, 1)
                      ] fwx
                      fwz:f64[1,4,3] = scatter-add[
                        dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                        indices_are_sorted=False
                        mode=GatherScatterMode.FILL_OR_DROP
                        unique_indices=False
                        update_consts=()
                        update_jaxpr=jaxpr
                      ] fwf fwy fwn
                      fxa:f64[1,13,3] = concatenate[dimension=1] fui fvf fvz fwt
                      fxb:f64[1,13,3] = concatenate[dimension=1] fup fvl fwf fwz
                      fxc:f64[1,13,3] = pjit[name=_take jaxpr=_take5] fxa dvn
                      fxd:f64[1,13,3] = pjit[name=_take jaxpr=_take5] fxb dvo
                      fxe:f64[1,13,3] = dot_general[
                        dimension_numbers=(([3], [2]), ([0, 1], [0, 1]))
                        preferred_element_type=float64
                      ] dza fxc
                      fxf:f64[1,13,3] = pjit[name=cross jaxpr=cross1] dyy fxd
                      fxg:f64[1,13,3] = add fxe fxf
                      fxh:f64[1,13,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 13, 1)
                      ] dzb
                      fxi:f64[1,13,3] = mul fxh fxd
                      fxj:f64[1,13,3] = pjit[name=cross jaxpr=cross1] dyy fxc
                      fxk:f64[1,13,3] = sub fxi fxj
                      fxl:f64[1,13,3] = dot_general[
                        dimension_numbers=(([3], [2]), ([0, 1], [0, 1]))
                        preferred_element_type=float64
                      ] dza dzc
                      fxm:f64[1,13,3] = pjit[name=cross jaxpr=cross1] dyy dzd
                      fxn:f64[1,13,3] = add fxl fxm
                      fxo:f64[1,13,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 13, 1)
                      ] dzb
                      fxp:f64[1,13,3] = mul fxo dzd
                      fxq:f64[1,13,3] = pjit[name=cross jaxpr=cross1] dyy dzc
                      fxr:f64[1,13,3] = sub fxp fxq
                      fxs:f64[1,13,3] = pjit[name=cross jaxpr=cross1] dzc fxr
                      fxt:f64[1,13,3] = pjit[name=cross jaxpr=cross1] dzc fxn
                      fxu:f64[1,13,3] = pjit[name=cross jaxpr=cross1] dzd fxr
                      fxv:f64[1,13,3] = add fxt fxu
                      fxw:f64[1,13,3] = add fxg fxv
                      fxx:f64[1,13,3] = add fxk fxs
                      fxy:f64[1,4,3] = pjit[name=_take jaxpr=_take6] fxw dvp
                      fxz:f64[1,4,3] = pjit[name=_take jaxpr=_take6] fxx dvq
                      fya:f64[1,4,3] = pjit[name=_take jaxpr=_take6] fxw dvr
                      fyb:f64[1,4,3] = pjit[name=_take jaxpr=_take6] fxx dvs
                      fyc:f64[4,3] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(4, 3)
                      ] 0.0
                      fyd:bool[4] = lt dvt 0
                      fye:i64[4] = add dvt 4
                      fyf:i64[4] = select_n fyd dvt fye
                      fyg:i32[4] = convert_element_type[
                        new_dtype=int32
                        weak_type=False
                      ] fyf
                      fyh:i32[4,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(4, 1)
                      ] fyg
                      fyi:f64[1,4,3] = broadcast_in_dim[
                        broadcast_dimensions=(1, 2)
                        shape=(1, 4, 3)
                      ] fyc
                      fyj:f64[1,4,3] = scatter-add[
                        dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                        indices_are_sorted=False
                        mode=GatherScatterMode.FILL_OR_DROP
                        unique_indices=False
                        update_consts=()
                        update_jaxpr=jaxpr
                      ] fyi fyh fxy
                      fyk:f64[4,3] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(4, 3)
                      ] 0.0
                      fyl:bool[4] = lt dvt 0
                      fym:i64[4] = add dvt 4
                      fyn:i64[4] = select_n fyl dvt fym
                      fyo:i32[4] = convert_element_type[
                        new_dtype=int32
                        weak_type=False
                      ] fyn
                      fyp:i32[4,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(4, 1)
                      ] fyo
                      fyq:f64[1,4,3] = broadcast_in_dim[
                        broadcast_dimensions=(1, 2)
                        shape=(1, 4, 3)
                      ] fyk
                      fyr:f64[1,4,3] = scatter-add[
                        dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                        indices_are_sorted=False
                        mode=GatherScatterMode.FILL_OR_DROP
                        unique_indices=False
                        update_consts=()
                        update_jaxpr=jaxpr
                      ] fyq fyp fxz
                      fys:f64[1,4,3] = add fya fyj
                      fyt:f64[1,4,3] = add fyb fyr
                      fyu:f64[1,4,3] = pjit[name=_take jaxpr=_take6] fxw dvu
                      fyv:f64[1,4,3] = pjit[name=_take jaxpr=_take6] fxx dvv
                      fyw:f64[4,3] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(4, 3)
                      ] 0.0
                      fyx:bool[4] = lt dvw 0
                      fyy:i64[4] = add dvw 4
                      fyz:i64[4] = select_n fyx dvw fyy
                      fza:i32[4] = convert_element_type[
                        new_dtype=int32
                        weak_type=False
                      ] fyz
                      fzb:i32[4,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(4, 1)
                      ] fza
                      fzc:f64[1,4,3] = broadcast_in_dim[
                        broadcast_dimensions=(1, 2)
                        shape=(1, 4, 3)
                      ] fyw
                      fzd:f64[1,4,3] = scatter-add[
                        dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                        indices_are_sorted=False
                        mode=GatherScatterMode.FILL_OR_DROP
                        unique_indices=False
                        update_consts=()
                        update_jaxpr=jaxpr
                      ] fzc fzb fys
                      fze:f64[4,3] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(4, 3)
                      ] 0.0
                      fzf:bool[4] = lt dvw 0
                      fzg:i64[4] = add dvw 4
                      fzh:i64[4] = select_n fzf dvw fzg
                      fzi:i32[4] = convert_element_type[
                        new_dtype=int32
                        weak_type=False
                      ] fzh
                      fzj:i32[4,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(4, 1)
                      ] fzi
                      fzk:f64[1,4,3] = broadcast_in_dim[
                        broadcast_dimensions=(1, 2)
                        shape=(1, 4, 3)
                      ] fze
                      fzl:f64[1,4,3] = scatter-add[
                        dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                        indices_are_sorted=False
                        mode=GatherScatterMode.FILL_OR_DROP
                        unique_indices=False
                        update_consts=()
                        update_jaxpr=jaxpr
                      ] fzk fzj fyt
                      fzm:f64[1,4,3] = add fyu fzd
                      fzn:f64[1,4,3] = add fyv fzl
                      fzo:f64[1,1,3] = slice[
                        limit_indices=(1, 1, 3)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] fxw
                      fzp:f64[1,1,3] = slice[
                        limit_indices=(1, 1, 3)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] fxx
                      fzq:f64[1,3] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1, 3)
                      ] 0.0
                      fzr:bool[4] = lt dvx 0
                      fzs:i64[4] = add dvx 1
                      fzt:i64[4] = select_n fzr dvx fzs
                      fzu:i32[4] = convert_element_type[
                        new_dtype=int32
                        weak_type=False
                      ] fzt
                      fzv:i32[4,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(4, 1)
                      ] fzu
                      fzw:f64[1,1,3] = broadcast_in_dim[
                        broadcast_dimensions=(1, 2)
                        shape=(1, 1, 3)
                      ] fzq
                      fzx:f64[1,1,3] = scatter-add[
                        dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                        indices_are_sorted=False
                        mode=GatherScatterMode.FILL_OR_DROP
                        unique_indices=False
                        update_consts=()
                        update_jaxpr=jaxpr
                      ] fzw fzv fzm
                      fzy:f64[1,3] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1, 3)
                      ] 0.0
                      fzz:bool[4] = lt dvx 0
                      gaa:i64[4] = add dvx 1
                      gab:i64[4] = select_n fzz dvx gaa
                      gac:i32[4] = convert_element_type[
                        new_dtype=int32
                        weak_type=False
                      ] gab
                      gad:i32[4,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(4, 1)
                      ] gac
                      gae:f64[1,1,3] = broadcast_in_dim[
                        broadcast_dimensions=(1, 2)
                        shape=(1, 1, 3)
                      ] fzy
                      gaf:f64[1,1,3] = scatter-add[
                        dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                        indices_are_sorted=False
                        mode=GatherScatterMode.FILL_OR_DROP
                        unique_indices=False
                        update_consts=()
                        update_jaxpr=jaxpr
                      ] gae gad fzn
                      gag:f64[1,1,3] = add fzo fzx
                      gah:f64[1,1,3] = add fzp gaf
                      gai:f64[1,13,3] = concatenate[dimension=1] gag fzm fys fxy
                      gaj:f64[1,13,3] = concatenate[dimension=1] gah fzn fyt fxz
                      gak:f64[1,13,3] = pjit[name=_take jaxpr=_take5] gai dvy
                      gal:f64[1,13,3] = pjit[name=_take jaxpr=_take5] gaj dvz
                      gam:f64[1,18,3] = pjit[name=_take jaxpr=_take7] gak dwa
                      gan:f64[1,18,3] = pjit[name=_take jaxpr=_take7] gal dwa
                      gao:f64[1,18] = dot_general[
                        dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
                        preferred_element_type=float64
                      ] dzf gan
                      gap:f64[1,18] = dot_general[
                        dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
                        preferred_element_type=float64
                      ] dze gam
                      gaq:f64[1,18] = add gao gap
                      gar:f64[1,18] = sub ftp gaq
                      gas:f64[1,18] = add gar ftf
                      gat:f64[18] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(18,)
                      ] 0.0
                      gau:f64[1,18,18] = pjit[
                        name=_diag
                        jaxpr={ lambda ; gav:f64[1,18]. let
                            gaw:f64[1,18] = pad[
                              padding_config=((0, 0, 0), (0, 0, 0))
                            ] gav 0.0
                            gax:i64[18,18] = iota[
                              dimension=0
                              dtype=int64
                              shape=(18, 18)
                            ] 
                            gay:i64[18,18] = iota[
                              dimension=1
                              dtype=int64
                              shape=(18, 18)
                            ] 
                            gaz:i64[18,18] = add gax 0
                            gba:bool[18,18] = eq gaz gay
                            gbb:f64[18] = broadcast_in_dim[
                              broadcast_dimensions=()
                              shape=(18,)
                            ] 0.0
                            gbc:f64[1,18,18] = pjit[
                              name=_where
                              jaxpr={ lambda ; gbd:bool[18,18] gbe:f64[1,18] gbf:f64[18]. let
                                  gbg:f64[1,18,18] = broadcast_in_dim[
                                    broadcast_dimensions=(0, 2)
                                    shape=(1, 18, 18)
                                  ] gbe
                                  gbh:f64[18,18] = broadcast_in_dim[
                                    broadcast_dimensions=(1,)
                                    shape=(18, 18)
                                  ] gbf
                                  gbi:bool[1,18,18] = broadcast_in_dim[
                                    broadcast_dimensions=(1, 2)
                                    shape=(1, 18, 18)
                                  ] gbd
                                  gbj:f64[1,18,18] = broadcast_in_dim[
                                    broadcast_dimensions=(1, 2)
                                    shape=(1, 18, 18)
                                  ] gbh
                                  gbk:f64[1,18,18] = select_n gbi gbj gbg
                                in (gbk,) }
                            ] gba gaw gbb
                          in (gbc,) }
                      ] duw
                      gbl:f64[1,18,18] = mul gau 0.0025
                      gbm:f64[1,18,18] = add dzi gbl
                      gbn:i64[18,18] = iota[
                        dimension=0
                        dtype=int64
                        shape=(18, 18)
                      ] 
                      gbo:i64[18,18] = iota[
                        dimension=1
                        dtype=int64
                        shape=(18, 18)
                      ] 
                      gbp:i64[18,18] = add gbn 0
                      gbq:bool[18,18] = eq gbp gbo
                      gbr:f64[18,18] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] gbq
                      gbs:f64[1,18,18] = pjit[name=_solve jaxpr=_solve] gbm gbr
                      gbt:f64[1,18] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 18)
                      ] gat
                      gbu:f64[1,18] = add gas gbt
                      gbv:f64[1,18] = dot_general[
                        dimension_numbers=(([2], [1]), ([0], [0]))
                        preferred_element_type=float64
                      ] gbs gbu
                      gbw:f64[1,18] = mul gbv 0.0025
                      gbx:f64[1,18] = add dys gbw
                      gby:f64[1,7] = slice[
                        limit_indices=(1, 7)
                        start_indices=(0, 0)
                        strides=None
                      ] dyr
                      gbz:f64[1,6] = slice[
                        limit_indices=(1, 6)
                        start_indices=(0, 0)
                        strides=None
                      ] gbx
                      gca:f64[1,1,7] = reshape[
                        dimensions=None
                        new_sizes=(1, 1, 7)
                      ] gby
                      gcb:f64[1,1,6] = reshape[
                        dimensions=None
                        new_sizes=(1, 1, 6)
                      ] gbz
                      gcc:f64[1,1,4] = slice[
                        limit_indices=(1, 1, 7)
                        start_indices=(0, 0, 3)
                        strides=None
                      ] gca
                      gcd:f64[1,1,3] = slice[
                        limit_indices=(1, 1, 6)
                        start_indices=(0, 0, 3)
                        strides=None
                      ] gcb
                      gce:f64[1,1] = pjit[
                        name=norm
                        jaxpr={ lambda ; gcf:f64[1,1,3]. let
                            gcg:f64[1,1,3] = mul gcf gcf
                            gch:f64[1,1] = reduce_sum[axes=(2,)] gcg
                            gci:f64[1,1] = sqrt gch
                          in (gci,) }
                      ] gcd
                      gcj:f64[1,1] = add gce 1e-08
                      gck:f64[1,1,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 1, 1)
                      ] gcj
                      gcl:f64[1,1,3] = div gcd gck
                      gcm:f64[1,1] = mul 0.0025 gcj
                      gcn:f64[1,1,1] = slice[
                        limit_indices=(1, 1, 1)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] gcl
                      gco:f64[1,1] = squeeze[dimensions=(2,)] gcn
                      gcp:f64[1,1] = div gcm 2.0
                      gcq:f64[1,1] = sin gcp
                      gcr:f64[1,1] = mul gco gcq
                      gcs:f64[1,1,1] = slice[
                        limit_indices=(1, 1, 2)
                        start_indices=(0, 0, 1)
                        strides=None
                      ] gcl
                      gct:f64[1,1] = squeeze[dimensions=(2,)] gcs
                      gcu:f64[1,1] = div gcm 2.0
                      gcv:f64[1,1] = sin gcu
                      gcw:f64[1,1] = mul gct gcv
                      gcx:f64[1,1,1] = slice[
                        limit_indices=(1, 1, 3)
                        start_indices=(0, 0, 2)
                        strides=None
                      ] gcl
                      gcy:f64[1,1] = squeeze[dimensions=(2,)] gcx
                      gcz:f64[1,1] = div gcm 2.0
                      gda:f64[1,1] = sin gcz
                      gdb:f64[1,1] = mul gcy gda
                      gdc:f64[1,1] = div gcm 2.0
                      gdd:f64[1,1] = cos gdc
                      gde:f64[1,1,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 1, 1)
                      ] gdd
                      gdf:f64[1,1,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 1, 1)
                      ] gcr
                      gdg:f64[1,1,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 1, 1)
                      ] gcw
                      gdh:f64[1,1,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 1, 1)
                      ] gdb
                      gdi:f64[1,1,4] = concatenate[dimension=2] gde gdf gdg gdh
                      gdj:f64[1,1,1] = slice[
                        limit_indices=(1, 1, 1)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] gcc
                      gdk:f64[1,1] = squeeze[dimensions=(2,)] gdj
                      gdl:f64[1,1,1] = slice[
                        limit_indices=(1, 1, 1)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] gdi
                      gdm:f64[1,1] = squeeze[dimensions=(2,)] gdl
                      gdn:f64[1,1] = mul gdk gdm
                      gdo:f64[1,1,1] = slice[
                        limit_indices=(1, 1, 2)
                        start_indices=(0, 0, 1)
                        strides=None
                      ] gcc
                      gdp:f64[1,1] = squeeze[dimensions=(2,)] gdo
                      gdq:f64[1,1,1] = slice[
                        limit_indices=(1, 1, 2)
                        start_indices=(0, 0, 1)
                        strides=None
                      ] gdi
                      gdr:f64[1,1] = squeeze[dimensions=(2,)] gdq
                      gds:f64[1,1] = mul gdp gdr
                      gdt:f64[1,1] = sub gdn gds
                      gdu:f64[1,1,1] = slice[
                        limit_indices=(1, 1, 3)
                        start_indices=(0, 0, 2)
                        strides=None
                      ] gcc
                      gdv:f64[1,1] = squeeze[dimensions=(2,)] gdu
                      gdw:f64[1,1,1] = slice[
                        limit_indices=(1, 1, 3)
                        start_indices=(0, 0, 2)
                        strides=None
                      ] gdi
                      gdx:f64[1,1] = squeeze[dimensions=(2,)] gdw
                      gdy:f64[1,1] = mul gdv gdx
                      gdz:f64[1,1] = sub gdt gdy
                      gea:f64[1,1,1] = slice[
                        limit_indices=(1, 1, 4)
                        start_indices=(0, 0, 3)
                        strides=None
                      ] gcc
                      geb:f64[1,1] = squeeze[dimensions=(2,)] gea
                      gec:f64[1,1,1] = slice[
                        limit_indices=(1, 1, 4)
                        start_indices=(0, 0, 3)
                        strides=None
                      ] gdi
                      ged:f64[1,1] = squeeze[dimensions=(2,)] gec
                      gee:f64[1,1] = mul geb ged
                      gef:f64[1,1] = sub gdz gee
                      geg:f64[1,1,1] = slice[
                        limit_indices=(1, 1, 1)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] gcc
                      geh:f64[1,1] = squeeze[dimensions=(2,)] geg
                      gei:f64[1,1,1] = slice[
                        limit_indices=(1, 1, 2)
                        start_indices=(0, 0, 1)
                        strides=None
                      ] gdi
                      gej:f64[1,1] = squeeze[dimensions=(2,)] gei
                      gek:f64[1,1] = mul geh gej
                      gel:f64[1,1,1] = slice[
                        limit_indices=(1, 1, 2)
                        start_indices=(0, 0, 1)
                        strides=None
                      ] gcc
                      gem:f64[1,1] = squeeze[dimensions=(2,)] gel
                      gen:f64[1,1,1] = slice[
                        limit_indices=(1, 1, 1)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] gdi
                      geo:f64[1,1] = squeeze[dimensions=(2,)] gen
                      gep:f64[1,1] = mul gem geo
                      geq:f64[1,1] = add gek gep
                      ger:f64[1,1,1] = slice[
                        limit_indices=(1, 1, 3)
                        start_indices=(0, 0, 2)
                        strides=None
                      ] gcc
                      ges:f64[1,1] = squeeze[dimensions=(2,)] ger
                      get:f64[1,1,1] = slice[
                        limit_indices=(1, 1, 4)
                        start_indices=(0, 0, 3)
                        strides=None
                      ] gdi
                      geu:f64[1,1] = squeeze[dimensions=(2,)] get
                      gev:f64[1,1] = mul ges geu
                      gew:f64[1,1] = add geq gev
                      gex:f64[1,1,1] = slice[
                        limit_indices=(1, 1, 4)
                        start_indices=(0, 0, 3)
                        strides=None
                      ] gcc
                      gey:f64[1,1] = squeeze[dimensions=(2,)] gex
                      gez:f64[1,1,1] = slice[
                        limit_indices=(1, 1, 3)
                        start_indices=(0, 0, 2)
                        strides=None
                      ] gdi
                      gfa:f64[1,1] = squeeze[dimensions=(2,)] gez
                      gfb:f64[1,1] = mul gey gfa
                      gfc:f64[1,1] = sub gew gfb
                      gfd:f64[1,1,1] = slice[
                        limit_indices=(1, 1, 1)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] gcc
                      gfe:f64[1,1] = squeeze[dimensions=(2,)] gfd
                      gff:f64[1,1,1] = slice[
                        limit_indices=(1, 1, 3)
                        start_indices=(0, 0, 2)
                        strides=None
                      ] gdi
                      gfg:f64[1,1] = squeeze[dimensions=(2,)] gff
                      gfh:f64[1,1] = mul gfe gfg
                      gfi:f64[1,1,1] = slice[
                        limit_indices=(1, 1, 2)
                        start_indices=(0, 0, 1)
                        strides=None
                      ] gcc
                      gfj:f64[1,1] = squeeze[dimensions=(2,)] gfi
                      gfk:f64[1,1,1] = slice[
                        limit_indices=(1, 1, 4)
                        start_indices=(0, 0, 3)
                        strides=None
                      ] gdi
                      gfl:f64[1,1] = squeeze[dimensions=(2,)] gfk
                      gfm:f64[1,1] = mul gfj gfl
                      gfn:f64[1,1] = sub gfh gfm
                      gfo:f64[1,1,1] = slice[
                        limit_indices=(1, 1, 3)
                        start_indices=(0, 0, 2)
                        strides=None
                      ] gcc
                      gfp:f64[1,1] = squeeze[dimensions=(2,)] gfo
                      gfq:f64[1,1,1] = slice[
                        limit_indices=(1, 1, 1)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] gdi
                      gfr:f64[1,1] = squeeze[dimensions=(2,)] gfq
                      gfs:f64[1,1] = mul gfp gfr
                      gft:f64[1,1] = add gfn gfs
                      gfu:f64[1,1,1] = slice[
                        limit_indices=(1, 1, 4)
                        start_indices=(0, 0, 3)
                        strides=None
                      ] gcc
                      gfv:f64[1,1] = squeeze[dimensions=(2,)] gfu
                      gfw:f64[1,1,1] = slice[
                        limit_indices=(1, 1, 2)
                        start_indices=(0, 0, 1)
                        strides=None
                      ] gdi
                      gfx:f64[1,1] = squeeze[dimensions=(2,)] gfw
                      gfy:f64[1,1] = mul gfv gfx
                      gfz:f64[1,1] = add gft gfy
                      gga:f64[1,1,1] = slice[
                        limit_indices=(1, 1, 1)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] gcc
                      ggb:f64[1,1] = squeeze[dimensions=(2,)] gga
                      ggc:f64[1,1,1] = slice[
                        limit_indices=(1, 1, 4)
                        start_indices=(0, 0, 3)
                        strides=None
                      ] gdi
                      ggd:f64[1,1] = squeeze[dimensions=(2,)] ggc
                      gge:f64[1,1] = mul ggb ggd
                      ggf:f64[1,1,1] = slice[
                        limit_indices=(1, 1, 2)
                        start_indices=(0, 0, 1)
                        strides=None
                      ] gcc
                      ggg:f64[1,1] = squeeze[dimensions=(2,)] ggf
                      ggh:f64[1,1,1] = slice[
                        limit_indices=(1, 1, 3)
                        start_indices=(0, 0, 2)
                        strides=None
                      ] gdi
                      ggi:f64[1,1] = squeeze[dimensions=(2,)] ggh
                      ggj:f64[1,1] = mul ggg ggi
                      ggk:f64[1,1] = add gge ggj
                      ggl:f64[1,1,1] = slice[
                        limit_indices=(1, 1, 3)
                        start_indices=(0, 0, 2)
                        strides=None
                      ] gcc
                      ggm:f64[1,1] = squeeze[dimensions=(2,)] ggl
                      ggn:f64[1,1,1] = slice[
                        limit_indices=(1, 1, 2)
                        start_indices=(0, 0, 1)
                        strides=None
                      ] gdi
                      ggo:f64[1,1] = squeeze[dimensions=(2,)] ggn
                      ggp:f64[1,1] = mul ggm ggo
                      ggq:f64[1,1] = sub ggk ggp
                      ggr:f64[1,1,1] = slice[
                        limit_indices=(1, 1, 4)
                        start_indices=(0, 0, 3)
                        strides=None
                      ] gcc
                      ggs:f64[1,1] = squeeze[dimensions=(2,)] ggr
                      ggt:f64[1,1,1] = slice[
                        limit_indices=(1, 1, 1)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] gdi
                      ggu:f64[1,1] = squeeze[dimensions=(2,)] ggt
                      ggv:f64[1,1] = mul ggs ggu
                      ggw:f64[1,1] = add ggq ggv
                      ggx:f64[1,1,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 1, 1)
                      ] gef
                      ggy:f64[1,1,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 1, 1)
                      ] gfc
                      ggz:f64[1,1,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 1, 1)
                      ] gfz
                      gha:f64[1,1,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 1, 1)
                      ] ggw
                      ghb:f64[1,1,4] = concatenate[dimension=2] ggx ggy ggz gha
                      ghc:f64[1,1] = pjit[
                        name=norm
                        jaxpr={ lambda ; ghd:f64[1,1,4]. let
                            ghe:f64[1,1,4] = mul ghd ghd
                            ghf:f64[1,1] = reduce_sum[axes=(2,)] ghe
                            ghg:f64[1,1] = sqrt ghf
                          in (ghg,) }
                      ] ghb
                      ghh:f64[1,1,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 1, 1)
                      ] ghc
                      ghi:f64[1,1,4] = div ghb ghh
                      ghj:f64[1,1,3] = slice[
                        limit_indices=(1, 1, 3)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] gca
                      ghk:f64[1,1,3] = slice[
                        limit_indices=(1, 1, 3)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] gcb
                      ghl:f64[1,1,3] = mul ghk 0.0025
                      ghm:f64[1,1,3] = add ghj ghl
                      ghn:f64[1,1,7] = concatenate[dimension=2] ghm ghi
                      gho:f64[1,7] = reshape[dimensions=None new_sizes=(1, 7)] ghn
                      ghp:f64[1,12] = slice[
                        limit_indices=(1, 19)
                        start_indices=(0, 7)
                        strides=None
                      ] dyr
                      ghq:f64[1,12] = slice[
                        limit_indices=(1, 18)
                        start_indices=(0, 6)
                        strides=None
                      ] gbx
                      ghr:f64[1,12,1] = reshape[
                        dimensions=None
                        new_sizes=(1, 12, 1)
                      ] ghp
                      ghs:f64[1,12,1] = reshape[
                        dimensions=None
                        new_sizes=(1, 12, 1)
                      ] ghq
                      ght:f64[1,12,1] = mul ghs 0.0025
                      ghu:f64[1,12,1] = add ghr ght
                      ghv:f64[1,12] = reshape[dimensions=None new_sizes=(1, 12)] ghu
                      ghw:f64[1,19] = concatenate[dimension=1] gho ghv
                      ghx:f64[1,7] = slice[
                        limit_indices=(1, 7)
                        start_indices=(0, 0)
                        strides=None
                      ] ghw
                      ghy:f64[1,6] = slice[
                        limit_indices=(1, 6)
                        start_indices=(0, 0)
                        strides=None
                      ] gbx
                      ghz:f64[1,1,7] = reshape[
                        dimensions=None
                        new_sizes=(1, 1, 7)
                      ] ghx
                      gia:f64[1,1,6] = reshape[
                        dimensions=None
                        new_sizes=(1, 1, 6)
                      ] ghy
                      gib:f64[1,1,3] = slice[
                        limit_indices=(1, 1, 3)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] ghz
                      gic:f64[1,1,4] = slice[
                        limit_indices=(1, 1, 7)
                        start_indices=(0, 0, 3)
                        strides=None
                      ] ghz
                      gid:f64[1,1,3] = slice[
                        limit_indices=(1, 1, 6)
                        start_indices=(0, 0, 3)
                        strides=None
                      ] gia
                      gie:f64[1,1,3] = slice[
                        limit_indices=(1, 1, 3)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] gia
                      gif:f64[1,12] = slice[
                        limit_indices=(1, 19)
                        start_indices=(0, 7)
                        strides=None
                      ] ghw
                      gig:f64[1,12] = slice[
                        limit_indices=(1, 18)
                        start_indices=(0, 6)
                        strides=None
                      ] gbx
                      gih:f64[12,3] = slice[
                        limit_indices=(18, 3)
                        start_indices=(6, 0)
                        strides=None
                      ] dus
                      gii:f64[12,3] = slice[
                        limit_indices=(18, 3)
                        start_indices=(6, 0)
                        strides=None
                      ] dut
                      gij:f64[12,1] = slice[
                        limit_indices=(12, 1)
                        start_indices=(0, 0)
                        strides=None
                      ] gih
                      gik:f64[12] = squeeze[dimensions=(1,)] gij
                      gil:f64[1,12] = div gif 2.0
                      gim:f64[1,12] = sin gil
                      gin:f64[1,12] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 12)
                      ] gik
                      gio:f64[1,12] = mul gin gim
                      gip:f64[12,1] = slice[
                        limit_indices=(12, 2)
                        start_indices=(0, 1)
                        strides=None
                      ] gih
                      giq:f64[12] = squeeze[dimensions=(1,)] gip
                      gir:f64[1,12] = div gif 2.0
                      gis:f64[1,12] = sin gir
                      git:f64[1,12] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 12)
                      ] giq
                      giu:f64[1,12] = mul git gis
                      giv:f64[12,1] = slice[
                        limit_indices=(12, 3)
                        start_indices=(0, 2)
                        strides=None
                      ] gih
                      giw:f64[12] = squeeze[dimensions=(1,)] giv
                      gix:f64[1,12] = div gif 2.0
                      giy:f64[1,12] = sin gix
                      giz:f64[1,12] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 12)
                      ] giw
                      gja:f64[1,12] = mul giz giy
                      gjb:f64[1,12] = div gif 2.0
                      gjc:f64[1,12] = cos gjb
                      gjd:f64[1,12,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 12, 1)
                      ] gjc
                      gje:f64[1,12,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 12, 1)
                      ] gio
                      gjf:f64[1,12,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 12, 1)
                      ] giu
                      gjg:f64[1,12,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 12, 1)
                      ] gja
                      gjh:f64[1,12,4] = concatenate[dimension=2] gjd gje gjf gjg
                      gji:bool[1,12] = pjit[
                        name=allclose
                        jaxpr={ lambda ; gjj:f64[1,12,4] gjk:f64[]. let
                            gjl:bool[1,12,4] = pjit[
                              name=isclose
                              jaxpr={ lambda ; gjm:f64[1,12,4] gjn:f64[] gjo:f64[]
                                  gjp:f64[]. let
                                  gjq:f64[] = convert_element_type[
                                    new_dtype=float64
                                    weak_type=False
                                  ] gjn
                                  gjr:f64[] = convert_element_type[
                                    new_dtype=float64
                                    weak_type=False
                                  ] gjo
                                  gjs:f64[] = convert_element_type[
                                    new_dtype=float64
                                    weak_type=False
                                  ] gjp
                                  gjt:f64[1,12,4] = sub gjm gjq
                                  gju:f64[1,12,4] = abs gjt
                                  gjv:f64[] = abs gjq
                                  gjw:f64[] = mul gjr gjv
                                  gjx:f64[] = add gjs gjw
                                  gjy:bool[1,12,4] = le gju gjx
                                  gjz:bool[1,12,4] = pjit[
                                    name=isinf
                                    jaxpr={ lambda ; gka:f64[1,12,4]. let
                                        gkb:f64[1,12,4] = abs gka
                                        gkc:bool[1,12,4] = eq gkb inf
                                      in (gkc,) }
                                  ] gjm
                                  gkd:bool[] = pjit[name=isinf jaxpr=isinf] gjq
                                  gke:bool[1,12,4] = or gjz gkd
                                  gkf:bool[1,12,4] = and gjz gkd
                                  gkg:bool[1,12,4] = not gke
                                  gkh:bool[1,12,4] = and gjy gkg
                                  gki:bool[1,12,4] = eq gjm gjq
                                  gkj:bool[1,12,4] = and gkf gki
                                  gkk:bool[1,12,4] = or gkh gkj
                                  gkl:bool[1,12,4] = ne gjm gjm
                                  gkm:bool[] = ne gjq gjq
                                  gkn:bool[1,12,4] = or gkl gkm
                                  gko:bool[1,12,4] = not gkn
                                  gkp:bool[1,12,4] = and gkk gko
                                in (gkp,) }
                            ] gjj gjk 1e-05 1e-08
                            gkq:bool[1,12] = reduce_and[axes=(2,)] gjl
                          in (gkq,) }
                      ] gjh 0.0
                      gkr:f64[4] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(4,)
                      ] 1.0
                      gks:f64[1,12,4] = pjit[
                        name=_where
                        jaxpr={ lambda ; gkt:bool[1,12] gku:f64[4] gkv:f64[1,12,4]. let
                            gkw:bool[1,12,4] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(1, 12, 4)
                            ] gkt
                            gkx:f64[12,4] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(12, 4)
                            ] gku
                            gky:f64[1,12,4] = broadcast_in_dim[
                              broadcast_dimensions=(1, 2)
                              shape=(1, 12, 4)
                            ] gkx
                            gkz:f64[1,12,4] = select_n gkw gkv gky
                          in (gkz,) }
                      ] gji gkr gjh
                      gla:f64[1,12] = pjit[
                        name=norm
                        jaxpr={ lambda ; glb:f64[1,12,4]. let
                            glc:f64[1,12,4] = mul glb glb
                            gld:f64[1,12] = reduce_sum[axes=(2,)] glc
                            gle:f64[1,12] = sqrt gld
                          in (gle,) }
                      ] gks
                      glf:f64[1,12] = pjit[
                        name=_where
                        jaxpr={ lambda ; glg:bool[1,12] glh:f64[] gli:f64[1,12]. let
                            glj:f64[] = convert_element_type[
                              new_dtype=float64
                              weak_type=False
                            ] glh
                            glk:f64[12] = broadcast_in_dim[
                              broadcast_dimensions=()
                              shape=(12,)
                            ] glj
                            gll:f64[1,12] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 12)
                            ] glk
                            glm:f64[1,12] = select_n glg gli gll
                          in (glm,) }
                      ] gji 0.0 gla
                      gln:bool[1,12] = eq glf 0.0
                      glo:f64[1,12] = convert_element_type[
                        new_dtype=float64
                        weak_type=True
                      ] gln
                      glp:f64[1,12] = mul 1e-06 glo
                      glq:f64[1,12] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] glp
                      glr:f64[1,12] = add glf glq
                      gls:f64[1,12,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 12, 1)
                      ] glr
                      glt:f64[1,12,4] = div gjh gls
                      glu:f64[1,12,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 12, 1)
                      ] gif
                      glv:f64[1,12,3] = broadcast_in_dim[
                        broadcast_dimensions=(1, 2)
                        shape=(1, 12, 3)
                      ] gii
                      glw:f64[1,12,3] = mul glv glu
                      glx:f64[1,12,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 12, 1)
                      ] gig
                      gly:f64[1,12,3] = broadcast_in_dim[
                        broadcast_dimensions=(1, 2)
                        shape=(1, 12, 3)
                      ] gih
                      glz:f64[1,12,3] = mul gly glx
                      gma:f64[1,12,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 12, 1)
                      ] gig
                      gmb:f64[1,12,3] = broadcast_in_dim[
                        broadcast_dimensions=(1, 2)
                        shape=(1, 12, 3)
                      ] gii
                      gmc:f64[1,12,3] = mul gmb gma
                      gmd:f64[1,12,1,3] = reshape[
                        dimensions=None
                        new_sizes=(1, 12, 1, 3)
                      ] glw
                      gme:f64[1,12,1,4] = reshape[
                        dimensions=None
                        new_sizes=(1, 12, 1, 4)
                      ] glt
                      gmf:f64[1,12,1,3] = reshape[
                        dimensions=None
                        new_sizes=(1, 12, 1, 3)
                      ] glz
                      gmg:f64[1,12,1,3] = reshape[
                        dimensions=None
                        new_sizes=(1, 12, 1, 3)
                      ] gmc
                      gmh:f64[1,12,3] = pjit[name=_take jaxpr=_take8] gmd 0
                      gmi:f64[1,12,4] = pjit[
                        name=_take
                        jaxpr={ lambda ; gmj:f64[1,12,1,4] gmk:i64[]. let
                            gml:i64[] = pjit[name=remainder jaxpr=remainder9] gmk
                              1
                            gmm:i64[1] = broadcast_in_dim[
                              broadcast_dimensions=()
                              shape=(1,)
                            ] gml
                            gmn:f64[1,12,4] = gather[
                              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(2,), start_index_map=(2,))
                              fill_value=None
                              indices_are_sorted=False
                              mode=GatherScatterMode.PROMISE_IN_BOUNDS
                              slice_sizes=(1, 12, 1, 4)
                              unique_indices=False
                            ] gmj gmm
                          in (gmn,) }
                      ] gme 0
                      gmo:f64[1,12,3] = pjit[name=_take jaxpr=_take8] gmf 0
                      gmp:f64[1,12,3] = pjit[name=_take jaxpr=_take8] gmg 0
                      gmq:f64[1,13,3] = concatenate[dimension=1] gib gmh
                      gmr:f64[1,13,4] = concatenate[dimension=1] gic gmi
                      gms:f64[1,13,3] = concatenate[dimension=1] gid gmo
                      gmt:f64[1,13,3] = concatenate[dimension=1] gie gmp
                      gmu:f64[13,3] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(13, 3)
                      ] 0.0
                      gmv:f64[1,13,1] = slice[
                        limit_indices=(1, 13, 1)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] gmr
                      gmw:f64[1,13] = squeeze[dimensions=(2,)] gmv
                      gmx:f64[1,13,3] = slice[
                        limit_indices=(1, 13, 4)
                        start_indices=(0, 0, 1)
                        strides=None
                      ] gmr
                      gmy:f64[13,1] = dot_general[
                        dimension_numbers=(([2], [1]), ([1], [0]))
                        preferred_element_type=float64
                      ] gmx dwd
                      gmz:f64[1,13] = transpose[permutation=(1, 0)] gmy
                      gna:f64[1,13,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 13, 1)
                      ] gmz
                      gnb:f64[1,13,3] = mul gna gmx
                      gnc:f64[1,13,3] = mul 2.0 gnb
                      gnd:f64[1,13] = mul gmw gmw
                      gne:f64[1,13] = dot_general[
                        dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
                        preferred_element_type=float64
                      ] gmx gmx
                      gnf:f64[1,13] = sub gnd gne
                      gng:f64[1,13,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 13, 1)
                      ] gnf
                      gnh:f64[1,13,3] = broadcast_in_dim[
                        broadcast_dimensions=(1, 2)
                        shape=(1, 13, 3)
                      ] dwd
                      gni:f64[1,13,3] = mul gng gnh
                      gnj:f64[1,13,3] = add gnc gni
                      gnk:f64[1,13] = mul 2.0 gmw
                      gnl:f64[1,13,3] = pjit[name=cross jaxpr=cross2] gmx dwd
                      gnm:f64[1,13,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 13, 1)
                      ] gnk
                      gnn:f64[1,13,3] = mul gnm gnl
                      gno:f64[1,13,3] = add gnj gnn
                      gnp:f64[1,13,3] = broadcast_in_dim[
                        broadcast_dimensions=(1, 2)
                        shape=(1, 13, 3)
                      ] gmu
                      gnq:f64[1,13,3] = add gnp gno
                      gnr:f64[1,13,3] = broadcast_in_dim[
                        broadcast_dimensions=(1, 2)
                        shape=(1, 13, 3)
                      ] dwd
                      gns:f64[1,13,3] = add gmq gnr
                      gnt:f64[1,13,3] = sub gns gnq
                      gnu:f64[13,1] = slice[
                        limit_indices=(13, 1)
                        start_indices=(0, 0)
                        strides=None
                      ] dwc
                      gnv:f64[13] = squeeze[dimensions=(1,)] gnu
                      gnw:f64[13,3] = slice[
                        limit_indices=(13, 4)
                        start_indices=(0, 1)
                        strides=None
                      ] dwc
                      gnx:f64[13,1] = dot_general[
                        dimension_numbers=(([1], [2]), ([0], [1]))
                        preferred_element_type=float64
                      ] gnw gnt
                      gny:f64[1,13] = transpose[permutation=(1, 0)] gnx
                      gnz:f64[1,13,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 13, 1)
                      ] gny
                      goa:f64[1,13,3] = broadcast_in_dim[
                        broadcast_dimensions=(1, 2)
                        shape=(1, 13, 3)
                      ] gnw
                      gob:f64[1,13,3] = mul gnz goa
                      goc:f64[1,13,3] = mul 2.0 gob
                      god:f64[13] = mul gnv gnv
                      goe:f64[13] = dot_general[
                        dimension_numbers=(([1], [1]), ([0], [0]))
                        preferred_element_type=float64
                      ] gnw gnw
                      gof:f64[13] = sub god goe
                      gog:f64[13,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(13, 1)
                      ] gof
                      goh:f64[1,13,1] = broadcast_in_dim[
                        broadcast_dimensions=(1, 2)
                        shape=(1, 13, 1)
                      ] gog
                      goi:f64[1,13,3] = mul goh gnt
                      goj:f64[1,13,3] = add goc goi
                      gok:f64[13] = mul 2.0 gnv
                      gol:f64[1,13,3] = pjit[
                        name=cross
                        jaxpr={ lambda ; gom:f64[13,3] gon:f64[1,13,3]. let
                            goo:i32[1] = broadcast_in_dim[
                              broadcast_dimensions=()
                              shape=(1,)
                            ] 0
                            gop:f64[13] = gather[
                              dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
                              fill_value=None
                              indices_are_sorted=True
                              mode=GatherScatterMode.PROMISE_IN_BOUNDS
                              slice_sizes=(13, 1)
                              unique_indices=True
                            ] gom goo
                            goq:i32[1] = broadcast_in_dim[
                              broadcast_dimensions=()
                              shape=(1,)
                            ] 1
                            gor:f64[13] = gather[
                              dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
                              fill_value=None
                              indices_are_sorted=True
                              mode=GatherScatterMode.PROMISE_IN_BOUNDS
                              slice_sizes=(13, 1)
                              unique_indices=True
                            ] gom goq
                            gos:i32[1] = broadcast_in_dim[
                              broadcast_dimensions=()
                              shape=(1,)
                            ] 2
                            got:f64[13] = gather[
                              dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
                              fill_value=None
                              indices_are_sorted=True
                              mode=GatherScatterMode.PROMISE_IN_BOUNDS
                              slice_sizes=(13, 1)
                              unique_indices=True
                            ] gom gos
                            gou:i32[1] = broadcast_in_dim[
                              broadcast_dimensions=()
                              shape=(1,)
                            ] 0
                            gov:f64[1,13] = gather[
                              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
                              fill_value=None
                              indices_are_sorted=True
                              mode=GatherScatterMode.PROMISE_IN_BOUNDS
                              slice_sizes=(1, 13, 1)
                              unique_indices=True
                            ] gon gou
                            gow:i32[1] = broadcast_in_dim[
                              broadcast_dimensions=()
                              shape=(1,)
                            ] 1
                            gox:f64[1,13] = gather[
                              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
                              fill_value=None
                              indices_are_sorted=True
                              mode=GatherScatterMode.PROMISE_IN_BOUNDS
                              slice_sizes=(1, 13, 1)
                              unique_indices=True
                            ] gon gow
                            goy:i32[1] = broadcast_in_dim[
                              broadcast_dimensions=()
                              shape=(1,)
                            ] 2
                            goz:f64[1,13] = gather[
                              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
                              fill_value=None
                              indices_are_sorted=True
                              mode=GatherScatterMode.PROMISE_IN_BOUNDS
                              slice_sizes=(1, 13, 1)
                              unique_indices=True
                            ] gon goy
                            gpa:f64[1,13] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 13)
                            ] gor
                            gpb:f64[1,13] = mul gpa goz
                            gpc:f64[1,13] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 13)
                            ] got
                            gpd:f64[1,13] = mul gpc gox
                            gpe:f64[1,13] = sub gpb gpd
                            gpf:f64[1,13] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 13)
                            ] got
                            gpg:f64[1,13] = mul gpf gov
                            gph:f64[1,13] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 13)
                            ] gop
                            gpi:f64[1,13] = mul gph goz
                            gpj:f64[1,13] = sub gpg gpi
                            gpk:f64[1,13] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 13)
                            ] gop
                            gpl:f64[1,13] = mul gpk gox
                            gpm:f64[1,13] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 13)
                            ] gor
                            gpn:f64[1,13] = mul gpm gov
                            gpo:f64[1,13] = sub gpl gpn
                            gpp:f64[1,13,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(1, 13, 1)
                            ] gpe
                            gpq:f64[1,13,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(1, 13, 1)
                            ] gpj
                            gpr:f64[1,13,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(1, 13, 1)
                            ] gpo
                            gps:f64[1,13,3] = concatenate[dimension=2] gpp gpq gpr
                          in (gps,) }
                      ] gnw gnt
                      gpt:f64[13,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(13, 1)
                      ] gok
                      gpu:f64[1,13,1] = broadcast_in_dim[
                        broadcast_dimensions=(1, 2)
                        shape=(1, 13, 1)
                      ] gpt
                      gpv:f64[1,13,3] = mul gpu gol
                      gpw:f64[1,13,3] = add goj gpv
                      gpx:f64[1,13,3] = broadcast_in_dim[
                        broadcast_dimensions=(1, 2)
                        shape=(1, 13, 3)
                      ] dwb
                      gpy:f64[1,13,3] = add gpx gpw
                      gpz:f64[13,1] = slice[
                        limit_indices=(13, 1)
                        start_indices=(0, 0)
                        strides=None
                      ] dwc
                      gqa:f64[13] = squeeze[dimensions=(1,)] gpz
                      gqb:f64[1,13,1] = slice[
                        limit_indices=(1, 13, 1)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] gmr
                      gqc:f64[1,13] = squeeze[dimensions=(2,)] gqb
                      gqd:f64[1,13] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 13)
                      ] gqa
                      gqe:f64[1,13] = mul gqd gqc
                      gqf:f64[13,1] = slice[
                        limit_indices=(13, 2)
                        start_indices=(0, 1)
                        strides=None
                      ] dwc
                      gqg:f64[13] = squeeze[dimensions=(1,)] gqf
                      gqh:f64[1,13,1] = slice[
                        limit_indices=(1, 13, 2)
                        start_indices=(0, 0, 1)
                        strides=None
                      ] gmr
                      gqi:f64[1,13] = squeeze[dimensions=(2,)] gqh
                      gqj:f64[1,13] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 13)
                      ] gqg
                      gqk:f64[1,13] = mul gqj gqi
                      gql:f64[1,13] = sub gqe gqk
                      gqm:f64[13,1] = slice[
                        limit_indices=(13, 3)
                        start_indices=(0, 2)
                        strides=None
                      ] dwc
                      gqn:f64[13] = squeeze[dimensions=(1,)] gqm
                      gqo:f64[1,13,1] = slice[
                        limit_indices=(1, 13, 3)
                        start_indices=(0, 0, 2)
                        strides=None
                      ] gmr
                      gqp:f64[1,13] = squeeze[dimensions=(2,)] gqo
                      gqq:f64[1,13] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 13)
                      ] gqn
                      gqr:f64[1,13] = mul gqq gqp
                      gqs:f64[1,13] = sub gql gqr
                      gqt:f64[13,1] = slice[
                        limit_indices=(13, 4)
                        start_indices=(0, 3)
                        strides=None
                      ] dwc
                      gqu:f64[13] = squeeze[dimensions=(1,)] gqt
                      gqv:f64[1,13,1] = slice[
                        limit_indices=(1, 13, 4)
                        start_indices=(0, 0, 3)
                        strides=None
                      ] gmr
                      gqw:f64[1,13] = squeeze[dimensions=(2,)] gqv
                      gqx:f64[1,13] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 13)
                      ] gqu
                      gqy:f64[1,13] = mul gqx gqw
                      gqz:f64[1,13] = sub gqs gqy
                      gra:f64[13,1] = slice[
                        limit_indices=(13, 1)
                        start_indices=(0, 0)
                        strides=None
                      ] dwc
                      grb:f64[13] = squeeze[dimensions=(1,)] gra
                      grc:f64[1,13,1] = slice[
                        limit_indices=(1, 13, 2)
                        start_indices=(0, 0, 1)
                        strides=None
                      ] gmr
                      grd:f64[1,13] = squeeze[dimensions=(2,)] grc
                      gre:f64[1,13] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 13)
                      ] grb
                      grf:f64[1,13] = mul gre grd
                      grg:f64[13,1] = slice[
                        limit_indices=(13, 2)
                        start_indices=(0, 1)
                        strides=None
                      ] dwc
                      grh:f64[13] = squeeze[dimensions=(1,)] grg
                      gri:f64[1,13,1] = slice[
                        limit_indices=(1, 13, 1)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] gmr
                      grj:f64[1,13] = squeeze[dimensions=(2,)] gri
                      grk:f64[1,13] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 13)
                      ] grh
                      grl:f64[1,13] = mul grk grj
                      grm:f64[1,13] = add grf grl
                      grn:f64[13,1] = slice[
                        limit_indices=(13, 3)
                        start_indices=(0, 2)
                        strides=None
                      ] dwc
                      gro:f64[13] = squeeze[dimensions=(1,)] grn
                      grp:f64[1,13,1] = slice[
                        limit_indices=(1, 13, 4)
                        start_indices=(0, 0, 3)
                        strides=None
                      ] gmr
                      grq:f64[1,13] = squeeze[dimensions=(2,)] grp
                      grr:f64[1,13] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 13)
                      ] gro
                      grs:f64[1,13] = mul grr grq
                      grt:f64[1,13] = add grm grs
                      gru:f64[13,1] = slice[
                        limit_indices=(13, 4)
                        start_indices=(0, 3)
                        strides=None
                      ] dwc
                      grv:f64[13] = squeeze[dimensions=(1,)] gru
                      grw:f64[1,13,1] = slice[
                        limit_indices=(1, 13, 3)
                        start_indices=(0, 0, 2)
                        strides=None
                      ] gmr
                      grx:f64[1,13] = squeeze[dimensions=(2,)] grw
                      gry:f64[1,13] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 13)
                      ] grv
                      grz:f64[1,13] = mul gry grx
                      gsa:f64[1,13] = sub grt grz
                      gsb:f64[13,1] = slice[
                        limit_indices=(13, 1)
                        start_indices=(0, 0)
                        strides=None
                      ] dwc
                      gsc:f64[13] = squeeze[dimensions=(1,)] gsb
                      gsd:f64[1,13,1] = slice[
                        limit_indices=(1, 13, 3)
                        start_indices=(0, 0, 2)
                        strides=None
                      ] gmr
                      gse:f64[1,13] = squeeze[dimensions=(2,)] gsd
                      gsf:f64[1,13] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 13)
                      ] gsc
                      gsg:f64[1,13] = mul gsf gse
                      gsh:f64[13,1] = slice[
                        limit_indices=(13, 2)
                        start_indices=(0, 1)
                        strides=None
                      ] dwc
                      gsi:f64[13] = squeeze[dimensions=(1,)] gsh
                      gsj:f64[1,13,1] = slice[
                        limit_indices=(1, 13, 4)
                        start_indices=(0, 0, 3)
                        strides=None
                      ] gmr
                      gsk:f64[1,13] = squeeze[dimensions=(2,)] gsj
                      gsl:f64[1,13] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 13)
                      ] gsi
                      gsm:f64[1,13] = mul gsl gsk
                      gsn:f64[1,13] = sub gsg gsm
                      gso:f64[13,1] = slice[
                        limit_indices=(13, 3)
                        start_indices=(0, 2)
                        strides=None
                      ] dwc
                      gsp:f64[13] = squeeze[dimensions=(1,)] gso
                      gsq:f64[1,13,1] = slice[
                        limit_indices=(1, 13, 1)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] gmr
                      gsr:f64[1,13] = squeeze[dimensions=(2,)] gsq
                      gss:f64[1,13] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 13)
                      ] gsp
                      gst:f64[1,13] = mul gss gsr
                      gsu:f64[1,13] = add gsn gst
                      gsv:f64[13,1] = slice[
                        limit_indices=(13, 4)
                        start_indices=(0, 3)
                        strides=None
                      ] dwc
                      gsw:f64[13] = squeeze[dimensions=(1,)] gsv
                      gsx:f64[1,13,1] = slice[
                        limit_indices=(1, 13, 2)
                        start_indices=(0, 0, 1)
                        strides=None
                      ] gmr
                      gsy:f64[1,13] = squeeze[dimensions=(2,)] gsx
                      gsz:f64[1,13] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 13)
                      ] gsw
                      gta:f64[1,13] = mul gsz gsy
                      gtb:f64[1,13] = add gsu gta
                      gtc:f64[13,1] = slice[
                        limit_indices=(13, 1)
                        start_indices=(0, 0)
                        strides=None
                      ] dwc
                      gtd:f64[13] = squeeze[dimensions=(1,)] gtc
                      gte:f64[1,13,1] = slice[
                        limit_indices=(1, 13, 4)
                        start_indices=(0, 0, 3)
                        strides=None
                      ] gmr
                      gtf:f64[1,13] = squeeze[dimensions=(2,)] gte
                      gtg:f64[1,13] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 13)
                      ] gtd
                      gth:f64[1,13] = mul gtg gtf
                      gti:f64[13,1] = slice[
                        limit_indices=(13, 2)
                        start_indices=(0, 1)
                        strides=None
                      ] dwc
                      gtj:f64[13] = squeeze[dimensions=(1,)] gti
                      gtk:f64[1,13,1] = slice[
                        limit_indices=(1, 13, 3)
                        start_indices=(0, 0, 2)
                        strides=None
                      ] gmr
                      gtl:f64[1,13] = squeeze[dimensions=(2,)] gtk
                      gtm:f64[1,13] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 13)
                      ] gtj
                      gtn:f64[1,13] = mul gtm gtl
                      gto:f64[1,13] = add gth gtn
                      gtp:f64[13,1] = slice[
                        limit_indices=(13, 3)
                        start_indices=(0, 2)
                        strides=None
                      ] dwc
                      gtq:f64[13] = squeeze[dimensions=(1,)] gtp
                      gtr:f64[1,13,1] = slice[
                        limit_indices=(1, 13, 2)
                        start_indices=(0, 0, 1)
                        strides=None
                      ] gmr
                      gts:f64[1,13] = squeeze[dimensions=(2,)] gtr
                      gtt:f64[1,13] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 13)
                      ] gtq
                      gtu:f64[1,13] = mul gtt gts
                      gtv:f64[1,13] = sub gto gtu
                      gtw:f64[13,1] = slice[
                        limit_indices=(13, 4)
                        start_indices=(0, 3)
                        strides=None
                      ] dwc
                      gtx:f64[13] = squeeze[dimensions=(1,)] gtw
                      gty:f64[1,13,1] = slice[
                        limit_indices=(1, 13, 1)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] gmr
                      gtz:f64[1,13] = squeeze[dimensions=(2,)] gty
                      gua:f64[1,13] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 13)
                      ] gtx
                      gub:f64[1,13] = mul gua gtz
                      guc:f64[1,13] = add gtv gub
                      gud:f64[1,13,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 13, 1)
                      ] gqz
                      gue:f64[1,13,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 13, 1)
                      ] gsa
                      guf:f64[1,13,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 13, 1)
                      ] gtb
                      gug:f64[1,13,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 13, 1)
                      ] guc
                      guh:f64[1,13,4] = concatenate[dimension=2] gud gue guf gug
                      gui:f64[1,1,3] = slice[
                        limit_indices=(1, 1, 3)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] gpy
                      guj:f64[1,1,4] = slice[
                        limit_indices=(1, 1, 4)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] guh
                      guk:f64[1,1,3] = slice[
                        limit_indices=(1, 1, 3)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] gms
                      gul:f64[1,1,3] = slice[
                        limit_indices=(1, 1, 3)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] gmt
                      gum:f64[1,1,1] = slice[
                        limit_indices=(1, 1, 1)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] guj
                      gun:f64[1,1] = squeeze[dimensions=(2,)] gum
                      guo:f64[1,1,3] = slice[
                        limit_indices=(1, 1, 4)
                        start_indices=(0, 0, 1)
                        strides=None
                      ] guj
                      gup:f64[1,1] = dot_general[
                        dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
                        preferred_element_type=float64
                      ] guo guk
                      guq:f64[1,1,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 1, 1)
                      ] gup
                      gur:f64[1,1,3] = mul guq guo
                      gus:f64[1,1,3] = mul 2.0 gur
                      gut:f64[1,1] = mul gun gun
                      guu:f64[1,1] = dot_general[
                        dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
                        preferred_element_type=float64
                      ] guo guo
                      guv:f64[1,1] = sub gut guu
                      guw:f64[1,1,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 1, 1)
                      ] guv
                      gux:f64[1,1,3] = mul guw guk
                      guy:f64[1,1,3] = add gus gux
                      guz:f64[1,1] = mul 2.0 gun
                      gva:f64[1,1,3] = pjit[
                        name=cross
                        jaxpr={ lambda ; gvb:f64[1,1,3] gvc:f64[1,1,3]. let
                            gvd:i32[1] = broadcast_in_dim[
                              broadcast_dimensions=()
                              shape=(1,)
                            ] 0
                            gve:f64[1,1] = gather[
                              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
                              fill_value=None
                              indices_are_sorted=True
                              mode=GatherScatterMode.PROMISE_IN_BOUNDS
                              slice_sizes=(1, 1, 1)
                              unique_indices=True
                            ] gvb gvd
                            gvf:i32[1] = broadcast_in_dim[
                              broadcast_dimensions=()
                              shape=(1,)
                            ] 1
                            gvg:f64[1,1] = gather[
                              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
                              fill_value=None
                              indices_are_sorted=True
                              mode=GatherScatterMode.PROMISE_IN_BOUNDS
                              slice_sizes=(1, 1, 1)
                              unique_indices=True
                            ] gvb gvf
                            gvh:i32[1] = broadcast_in_dim[
                              broadcast_dimensions=()
                              shape=(1,)
                            ] 2
                            gvi:f64[1,1] = gather[
                              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
                              fill_value=None
                              indices_are_sorted=True
                              mode=GatherScatterMode.PROMISE_IN_BOUNDS
                              slice_sizes=(1, 1, 1)
                              unique_indices=True
                            ] gvb gvh
                            gvj:i32[1] = broadcast_in_dim[
                              broadcast_dimensions=()
                              shape=(1,)
                            ] 0
                            gvk:f64[1,1] = gather[
                              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
                              fill_value=None
                              indices_are_sorted=True
                              mode=GatherScatterMode.PROMISE_IN_BOUNDS
                              slice_sizes=(1, 1, 1)
                              unique_indices=True
                            ] gvc gvj
                            gvl:i32[1] = broadcast_in_dim[
                              broadcast_dimensions=()
                              shape=(1,)
                            ] 1
                            gvm:f64[1,1] = gather[
                              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
                              fill_value=None
                              indices_are_sorted=True
                              mode=GatherScatterMode.PROMISE_IN_BOUNDS
                              slice_sizes=(1, 1, 1)
                              unique_indices=True
                            ] gvc gvl
                            gvn:i32[1] = broadcast_in_dim[
                              broadcast_dimensions=()
                              shape=(1,)
                            ] 2
                            gvo:f64[1,1] = gather[
                              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
                              fill_value=None
                              indices_are_sorted=True
                              mode=GatherScatterMode.PROMISE_IN_BOUNDS
                              slice_sizes=(1, 1, 1)
                              unique_indices=True
                            ] gvc gvn
                            gvp:f64[1,1] = mul gvg gvo
                            gvq:f64[1,1] = mul gvi gvm
                            gvr:f64[1,1] = sub gvp gvq
                            gvs:f64[1,1] = mul gvi gvk
                            gvt:f64[1,1] = mul gve gvo
                            gvu:f64[1,1] = sub gvs gvt
                            gvv:f64[1,1] = mul gve gvm
                            gvw:f64[1,1] = mul gvg gvk
                            gvx:f64[1,1] = sub gvv gvw
                            gvy:f64[1,1,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(1, 1, 1)
                            ] gvr
                            gvz:f64[1,1,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(1, 1, 1)
                            ] gvu
                            gwa:f64[1,1,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(1, 1, 1)
                            ] gvx
                            gwb:f64[1,1,3] = concatenate[dimension=2] gvy gvz gwa
                          in (gwb,) }
                      ] guo guk
                      gwc:f64[1,1,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 1, 1)
                      ] guz
                      gwd:f64[1,1,3] = mul gwc gva
                      gwe:f64[1,1,3] = add guy gwd
                      gwf:f64[1,4,3] = pjit[name=_take jaxpr=_take6] gpy dwj
                      gwg:f64[1,4,4] = pjit[name=_take jaxpr=_take9] guh dwk
                      gwh:f64[1,4,3] = pjit[name=_take jaxpr=_take6] gms dwl
                      gwi:f64[1,4,3] = pjit[name=_take jaxpr=_take6] gmt dwm
                      gwj:f64[1,4,3] = pjit[name=_take jaxpr=_take4] gui dwn
                      gwk:f64[1,4,4] = pjit[
                        name=_take
                        jaxpr={ lambda ; gwl:f64[1,1,4] gwm:i64[4]. let
                            gwn:i64[4] = pjit[name=remainder jaxpr=remainder5] gwm
                              1
                            gwo:i64[4,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(4, 1)
                            ] gwn
                            gwp:f64[1,4,4] = gather[
                              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 2), collapsed_slice_dims=(1,), start_index_map=(1,))
                              fill_value=None
                              indices_are_sorted=False
                              mode=GatherScatterMode.PROMISE_IN_BOUNDS
                              slice_sizes=(1, 1, 4)
                              unique_indices=False
                            ] gwl gwo
                          in (gwp,) }
                      ] guj dwo
                      gwq:f64[1,4,3] = pjit[name=_take jaxpr=_take4] gwe dwp
                      gwr:f64[1,4,3] = pjit[name=_take jaxpr=_take4] gul dwq
                      gws:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 1)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] gwk
                      gwt:f64[1,4] = squeeze[dimensions=(2,)] gws
                      gwu:f64[1,4,3] = slice[
                        limit_indices=(1, 4, 4)
                        start_indices=(0, 0, 1)
                        strides=None
                      ] gwk
                      gwv:f64[1,4] = dot_general[
                        dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
                        preferred_element_type=float64
                      ] gwu gwf
                      gww:f64[1,4,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 4, 1)
                      ] gwv
                      gwx:f64[1,4,3] = mul gww gwu
                      gwy:f64[1,4,3] = mul 2.0 gwx
                      gwz:f64[1,4] = mul gwt gwt
                      gxa:f64[1,4] = dot_general[
                        dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
                        preferred_element_type=float64
                      ] gwu gwu
                      gxb:f64[1,4] = sub gwz gxa
                      gxc:f64[1,4,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 4, 1)
                      ] gxb
                      gxd:f64[1,4,3] = mul gxc gwf
                      gxe:f64[1,4,3] = add gwy gxd
                      gxf:f64[1,4] = mul 2.0 gwt
                      gxg:f64[1,4,3] = pjit[name=cross jaxpr=cross3] gwu gwf
                      gxh:f64[1,4,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 4, 1)
                      ] gxf
                      gxi:f64[1,4,3] = mul gxh gxg
                      gxj:f64[1,4,3] = add gxe gxi
                      gxk:f64[1,4,3] = add gwj gxj
                      gxl:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 1)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] gwk
                      gxm:f64[1,4] = squeeze[dimensions=(2,)] gxl
                      gxn:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 1)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] gwg
                      gxo:f64[1,4] = squeeze[dimensions=(2,)] gxn
                      gxp:f64[1,4] = mul gxm gxo
                      gxq:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 2)
                        start_indices=(0, 0, 1)
                        strides=None
                      ] gwk
                      gxr:f64[1,4] = squeeze[dimensions=(2,)] gxq
                      gxs:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 2)
                        start_indices=(0, 0, 1)
                        strides=None
                      ] gwg
                      gxt:f64[1,4] = squeeze[dimensions=(2,)] gxs
                      gxu:f64[1,4] = mul gxr gxt
                      gxv:f64[1,4] = sub gxp gxu
                      gxw:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 3)
                        start_indices=(0, 0, 2)
                        strides=None
                      ] gwk
                      gxx:f64[1,4] = squeeze[dimensions=(2,)] gxw
                      gxy:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 3)
                        start_indices=(0, 0, 2)
                        strides=None
                      ] gwg
                      gxz:f64[1,4] = squeeze[dimensions=(2,)] gxy
                      gya:f64[1,4] = mul gxx gxz
                      gyb:f64[1,4] = sub gxv gya
                      gyc:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 4)
                        start_indices=(0, 0, 3)
                        strides=None
                      ] gwk
                      gyd:f64[1,4] = squeeze[dimensions=(2,)] gyc
                      gye:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 4)
                        start_indices=(0, 0, 3)
                        strides=None
                      ] gwg
                      gyf:f64[1,4] = squeeze[dimensions=(2,)] gye
                      gyg:f64[1,4] = mul gyd gyf
                      gyh:f64[1,4] = sub gyb gyg
                      gyi:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 1)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] gwk
                      gyj:f64[1,4] = squeeze[dimensions=(2,)] gyi
                      gyk:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 2)
                        start_indices=(0, 0, 1)
                        strides=None
                      ] gwg
                      gyl:f64[1,4] = squeeze[dimensions=(2,)] gyk
                      gym:f64[1,4] = mul gyj gyl
                      gyn:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 2)
                        start_indices=(0, 0, 1)
                        strides=None
                      ] gwk
                      gyo:f64[1,4] = squeeze[dimensions=(2,)] gyn
                      gyp:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 1)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] gwg
                      gyq:f64[1,4] = squeeze[dimensions=(2,)] gyp
                      gyr:f64[1,4] = mul gyo gyq
                      gys:f64[1,4] = add gym gyr
                      gyt:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 3)
                        start_indices=(0, 0, 2)
                        strides=None
                      ] gwk
                      gyu:f64[1,4] = squeeze[dimensions=(2,)] gyt
                      gyv:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 4)
                        start_indices=(0, 0, 3)
                        strides=None
                      ] gwg
                      gyw:f64[1,4] = squeeze[dimensions=(2,)] gyv
                      gyx:f64[1,4] = mul gyu gyw
                      gyy:f64[1,4] = add gys gyx
                      gyz:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 4)
                        start_indices=(0, 0, 3)
                        strides=None
                      ] gwk
                      gza:f64[1,4] = squeeze[dimensions=(2,)] gyz
                      gzb:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 3)
                        start_indices=(0, 0, 2)
                        strides=None
                      ] gwg
                      gzc:f64[1,4] = squeeze[dimensions=(2,)] gzb
                      gzd:f64[1,4] = mul gza gzc
                      gze:f64[1,4] = sub gyy gzd
                      gzf:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 1)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] gwk
                      gzg:f64[1,4] = squeeze[dimensions=(2,)] gzf
                      gzh:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 3)
                        start_indices=(0, 0, 2)
                        strides=None
                      ] gwg
                      gzi:f64[1,4] = squeeze[dimensions=(2,)] gzh
                      gzj:f64[1,4] = mul gzg gzi
                      gzk:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 2)
                        start_indices=(0, 0, 1)
                        strides=None
                      ] gwk
                      gzl:f64[1,4] = squeeze[dimensions=(2,)] gzk
                      gzm:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 4)
                        start_indices=(0, 0, 3)
                        strides=None
                      ] gwg
                      gzn:f64[1,4] = squeeze[dimensions=(2,)] gzm
                      gzo:f64[1,4] = mul gzl gzn
                      gzp:f64[1,4] = sub gzj gzo
                      gzq:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 3)
                        start_indices=(0, 0, 2)
                        strides=None
                      ] gwk
                      gzr:f64[1,4] = squeeze[dimensions=(2,)] gzq
                      gzs:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 1)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] gwg
                      gzt:f64[1,4] = squeeze[dimensions=(2,)] gzs
                      gzu:f64[1,4] = mul gzr gzt
                      gzv:f64[1,4] = add gzp gzu
                      gzw:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 4)
                        start_indices=(0, 0, 3)
                        strides=None
                      ] gwk
                      gzx:f64[1,4] = squeeze[dimensions=(2,)] gzw
                      gzy:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 2)
                        start_indices=(0, 0, 1)
                        strides=None
                      ] gwg
                      gzz:f64[1,4] = squeeze[dimensions=(2,)] gzy
                      haa:f64[1,4] = mul gzx gzz
                      hab:f64[1,4] = add gzv haa
                      hac:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 1)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] gwk
                      had:f64[1,4] = squeeze[dimensions=(2,)] hac
                      hae:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 4)
                        start_indices=(0, 0, 3)
                        strides=None
                      ] gwg
                      haf:f64[1,4] = squeeze[dimensions=(2,)] hae
                      hag:f64[1,4] = mul had haf
                      hah:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 2)
                        start_indices=(0, 0, 1)
                        strides=None
                      ] gwk
                      hai:f64[1,4] = squeeze[dimensions=(2,)] hah
                      haj:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 3)
                        start_indices=(0, 0, 2)
                        strides=None
                      ] gwg
                      hak:f64[1,4] = squeeze[dimensions=(2,)] haj
                      hal:f64[1,4] = mul hai hak
                      ham:f64[1,4] = add hag hal
                      han:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 3)
                        start_indices=(0, 0, 2)
                        strides=None
                      ] gwk
                      hao:f64[1,4] = squeeze[dimensions=(2,)] han
                      hap:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 2)
                        start_indices=(0, 0, 1)
                        strides=None
                      ] gwg
                      haq:f64[1,4] = squeeze[dimensions=(2,)] hap
                      har:f64[1,4] = mul hao haq
                      has:f64[1,4] = sub ham har
                      hat:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 4)
                        start_indices=(0, 0, 3)
                        strides=None
                      ] gwk
                      hau:f64[1,4] = squeeze[dimensions=(2,)] hat
                      hav:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 1)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] gwg
                      haw:f64[1,4] = squeeze[dimensions=(2,)] hav
                      hax:f64[1,4] = mul hau haw
                      hay:f64[1,4] = add has hax
                      haz:f64[1,4,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 4, 1)
                      ] gyh
                      hba:f64[1,4,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 4, 1)
                      ] gze
                      hbb:f64[1,4,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 4, 1)
                      ] hab
                      hbc:f64[1,4,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 4, 1)
                      ] hay
                      hbd:f64[1,4,4] = concatenate[dimension=2] haz hba hbb hbc
                      hbe:f64[1,4,3] = sub gxk gwj
                      hbf:f64[1,4,3] = pjit[name=cross jaxpr=cross3] gwq hbe
                      hbg:f64[1,4,3] = add gwr hbf
                      hbh:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 1)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] gwk
                      hbi:f64[1,4] = squeeze[dimensions=(2,)] hbh
                      hbj:f64[1,4,3] = slice[
                        limit_indices=(1, 4, 4)
                        start_indices=(0, 0, 1)
                        strides=None
                      ] gwk
                      hbk:f64[1,4] = dot_general[
                        dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
                        preferred_element_type=float64
                      ] hbj gwi
                      hbl:f64[1,4,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 4, 1)
                      ] hbk
                      hbm:f64[1,4,3] = mul hbl hbj
                      hbn:f64[1,4,3] = mul 2.0 hbm
                      hbo:f64[1,4] = mul hbi hbi
                      hbp:f64[1,4] = dot_general[
                        dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
                        preferred_element_type=float64
                      ] hbj hbj
                      hbq:f64[1,4] = sub hbo hbp
                      hbr:f64[1,4,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 4, 1)
                      ] hbq
                      hbs:f64[1,4,3] = mul hbr gwi
                      hbt:f64[1,4,3] = add hbn hbs
                      hbu:f64[1,4] = mul 2.0 hbi
                      hbv:f64[1,4,3] = pjit[name=cross jaxpr=cross3] hbj gwi
                      hbw:f64[1,4,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 4, 1)
                      ] hbu
                      hbx:f64[1,4,3] = mul hbw hbv
                      hby:f64[1,4,3] = add hbt hbx
                      hbz:f64[1,4,3] = add hbg hby
                      hca:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 1)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] hbd
                      hcb:f64[1,4] = squeeze[dimensions=(2,)] hca
                      hcc:f64[1,4,3] = slice[
                        limit_indices=(1, 4, 4)
                        start_indices=(0, 0, 1)
                        strides=None
                      ] hbd
                      hcd:f64[1,4] = dot_general[
                        dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
                        preferred_element_type=float64
                      ] hcc gwh
                      hce:f64[1,4,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 4, 1)
                      ] hcd
                      hcf:f64[1,4,3] = mul hce hcc
                      hcg:f64[1,4,3] = mul 2.0 hcf
                      hch:f64[1,4] = mul hcb hcb
                      hci:f64[1,4] = dot_general[
                        dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
                        preferred_element_type=float64
                      ] hcc hcc
                      hcj:f64[1,4] = sub hch hci
                      hck:f64[1,4,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 4, 1)
                      ] hcj
                      hcl:f64[1,4,3] = mul hck gwh
                      hcm:f64[1,4,3] = add hcg hcl
                      hcn:f64[1,4] = mul 2.0 hcb
                      hco:f64[1,4,3] = pjit[name=cross jaxpr=cross3] hcc gwh
                      hcp:f64[1,4,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 4, 1)
                      ] hcn
                      hcq:f64[1,4,3] = mul hcp hco
                      hcr:f64[1,4,3] = add hcm hcq
                      hcs:f64[1,4,3] = add gwq hcr
                      hct:f64[1,4,3] = pjit[name=_take jaxpr=_take6] gpy dwr
                      hcu:f64[1,4,4] = pjit[name=_take jaxpr=_take9] guh dws
                      hcv:f64[1,4,3] = pjit[name=_take jaxpr=_take6] gms dwt
                      hcw:f64[1,4,3] = pjit[name=_take jaxpr=_take6] gmt dwu
                      hcx:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 1)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] hbd
                      hcy:f64[1,4] = squeeze[dimensions=(2,)] hcx
                      hcz:f64[1,4,3] = slice[
                        limit_indices=(1, 4, 4)
                        start_indices=(0, 0, 1)
                        strides=None
                      ] hbd
                      hda:f64[1,4] = dot_general[
                        dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
                        preferred_element_type=float64
                      ] hcz hct
                      hdb:f64[1,4,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 4, 1)
                      ] hda
                      hdc:f64[1,4,3] = mul hdb hcz
                      hdd:f64[1,4,3] = mul 2.0 hdc
                      hde:f64[1,4] = mul hcy hcy
                      hdf:f64[1,4] = dot_general[
                        dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
                        preferred_element_type=float64
                      ] hcz hcz
                      hdg:f64[1,4] = sub hde hdf
                      hdh:f64[1,4,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 4, 1)
                      ] hdg
                      hdi:f64[1,4,3] = mul hdh hct
                      hdj:f64[1,4,3] = add hdd hdi
                      hdk:f64[1,4] = mul 2.0 hcy
                      hdl:f64[1,4,3] = pjit[name=cross jaxpr=cross3] hcz hct
                      hdm:f64[1,4,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 4, 1)
                      ] hdk
                      hdn:f64[1,4,3] = mul hdm hdl
                      hdo:f64[1,4,3] = add hdj hdn
                      hdp:f64[1,4,3] = add gxk hdo
                      hdq:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 1)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] hbd
                      hdr:f64[1,4] = squeeze[dimensions=(2,)] hdq
                      hds:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 1)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] hcu
                      hdt:f64[1,4] = squeeze[dimensions=(2,)] hds
                      hdu:f64[1,4] = mul hdr hdt
                      hdv:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 2)
                        start_indices=(0, 0, 1)
                        strides=None
                      ] hbd
                      hdw:f64[1,4] = squeeze[dimensions=(2,)] hdv
                      hdx:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 2)
                        start_indices=(0, 0, 1)
                        strides=None
                      ] hcu
                      hdy:f64[1,4] = squeeze[dimensions=(2,)] hdx
                      hdz:f64[1,4] = mul hdw hdy
                      hea:f64[1,4] = sub hdu hdz
                      heb:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 3)
                        start_indices=(0, 0, 2)
                        strides=None
                      ] hbd
                      hec:f64[1,4] = squeeze[dimensions=(2,)] heb
                      hed:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 3)
                        start_indices=(0, 0, 2)
                        strides=None
                      ] hcu
                      hee:f64[1,4] = squeeze[dimensions=(2,)] hed
                      hef:f64[1,4] = mul hec hee
                      heg:f64[1,4] = sub hea hef
                      heh:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 4)
                        start_indices=(0, 0, 3)
                        strides=None
                      ] hbd
                      hei:f64[1,4] = squeeze[dimensions=(2,)] heh
                      hej:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 4)
                        start_indices=(0, 0, 3)
                        strides=None
                      ] hcu
                      hek:f64[1,4] = squeeze[dimensions=(2,)] hej
                      hel:f64[1,4] = mul hei hek
                      hem:f64[1,4] = sub heg hel
                      hen:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 1)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] hbd
                      heo:f64[1,4] = squeeze[dimensions=(2,)] hen
                      hep:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 2)
                        start_indices=(0, 0, 1)
                        strides=None
                      ] hcu
                      heq:f64[1,4] = squeeze[dimensions=(2,)] hep
                      her:f64[1,4] = mul heo heq
                      hes:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 2)
                        start_indices=(0, 0, 1)
                        strides=None
                      ] hbd
                      het:f64[1,4] = squeeze[dimensions=(2,)] hes
                      heu:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 1)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] hcu
                      hev:f64[1,4] = squeeze[dimensions=(2,)] heu
                      hew:f64[1,4] = mul het hev
                      hex:f64[1,4] = add her hew
                      hey:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 3)
                        start_indices=(0, 0, 2)
                        strides=None
                      ] hbd
                      hez:f64[1,4] = squeeze[dimensions=(2,)] hey
                      hfa:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 4)
                        start_indices=(0, 0, 3)
                        strides=None
                      ] hcu
                      hfb:f64[1,4] = squeeze[dimensions=(2,)] hfa
                      hfc:f64[1,4] = mul hez hfb
                      hfd:f64[1,4] = add hex hfc
                      hfe:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 4)
                        start_indices=(0, 0, 3)
                        strides=None
                      ] hbd
                      hff:f64[1,4] = squeeze[dimensions=(2,)] hfe
                      hfg:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 3)
                        start_indices=(0, 0, 2)
                        strides=None
                      ] hcu
                      hfh:f64[1,4] = squeeze[dimensions=(2,)] hfg
                      hfi:f64[1,4] = mul hff hfh
                      hfj:f64[1,4] = sub hfd hfi
                      hfk:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 1)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] hbd
                      hfl:f64[1,4] = squeeze[dimensions=(2,)] hfk
                      hfm:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 3)
                        start_indices=(0, 0, 2)
                        strides=None
                      ] hcu
                      hfn:f64[1,4] = squeeze[dimensions=(2,)] hfm
                      hfo:f64[1,4] = mul hfl hfn
                      hfp:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 2)
                        start_indices=(0, 0, 1)
                        strides=None
                      ] hbd
                      hfq:f64[1,4] = squeeze[dimensions=(2,)] hfp
                      hfr:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 4)
                        start_indices=(0, 0, 3)
                        strides=None
                      ] hcu
                      hfs:f64[1,4] = squeeze[dimensions=(2,)] hfr
                      hft:f64[1,4] = mul hfq hfs
                      hfu:f64[1,4] = sub hfo hft
                      hfv:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 3)
                        start_indices=(0, 0, 2)
                        strides=None
                      ] hbd
                      hfw:f64[1,4] = squeeze[dimensions=(2,)] hfv
                      hfx:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 1)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] hcu
                      hfy:f64[1,4] = squeeze[dimensions=(2,)] hfx
                      hfz:f64[1,4] = mul hfw hfy
                      hga:f64[1,4] = add hfu hfz
                      hgb:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 4)
                        start_indices=(0, 0, 3)
                        strides=None
                      ] hbd
                      hgc:f64[1,4] = squeeze[dimensions=(2,)] hgb
                      hgd:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 2)
                        start_indices=(0, 0, 1)
                        strides=None
                      ] hcu
                      hge:f64[1,4] = squeeze[dimensions=(2,)] hgd
                      hgf:f64[1,4] = mul hgc hge
                      hgg:f64[1,4] = add hga hgf
                      hgh:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 1)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] hbd
                      hgi:f64[1,4] = squeeze[dimensions=(2,)] hgh
                      hgj:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 4)
                        start_indices=(0, 0, 3)
                        strides=None
                      ] hcu
                      hgk:f64[1,4] = squeeze[dimensions=(2,)] hgj
                      hgl:f64[1,4] = mul hgi hgk
                      hgm:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 2)
                        start_indices=(0, 0, 1)
                        strides=None
                      ] hbd
                      hgn:f64[1,4] = squeeze[dimensions=(2,)] hgm
                      hgo:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 3)
                        start_indices=(0, 0, 2)
                        strides=None
                      ] hcu
                      hgp:f64[1,4] = squeeze[dimensions=(2,)] hgo
                      hgq:f64[1,4] = mul hgn hgp
                      hgr:f64[1,4] = add hgl hgq
                      hgs:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 3)
                        start_indices=(0, 0, 2)
                        strides=None
                      ] hbd
                      hgt:f64[1,4] = squeeze[dimensions=(2,)] hgs
                      hgu:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 2)
                        start_indices=(0, 0, 1)
                        strides=None
                      ] hcu
                      hgv:f64[1,4] = squeeze[dimensions=(2,)] hgu
                      hgw:f64[1,4] = mul hgt hgv
                      hgx:f64[1,4] = sub hgr hgw
                      hgy:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 4)
                        start_indices=(0, 0, 3)
                        strides=None
                      ] hbd
                      hgz:f64[1,4] = squeeze[dimensions=(2,)] hgy
                      hha:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 1)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] hcu
                      hhb:f64[1,4] = squeeze[dimensions=(2,)] hha
                      hhc:f64[1,4] = mul hgz hhb
                      hhd:f64[1,4] = add hgx hhc
                      hhe:f64[1,4,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 4, 1)
                      ] hem
                      hhf:f64[1,4,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 4, 1)
                      ] hfj
                      hhg:f64[1,4,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 4, 1)
                      ] hgg
                      hhh:f64[1,4,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 4, 1)
                      ] hhd
                      hhi:f64[1,4,4] = concatenate[dimension=2] hhe hhf hhg hhh
                      hhj:f64[1,4,3] = sub hdp gxk
                      hhk:f64[1,4,3] = pjit[name=cross jaxpr=cross3] hcs hhj
                      hhl:f64[1,4,3] = add hbz hhk
                      hhm:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 1)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] hbd
                      hhn:f64[1,4] = squeeze[dimensions=(2,)] hhm
                      hho:f64[1,4,3] = slice[
                        limit_indices=(1, 4, 4)
                        start_indices=(0, 0, 1)
                        strides=None
                      ] hbd
                      hhp:f64[1,4] = dot_general[
                        dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
                        preferred_element_type=float64
                      ] hho hcw
                      hhq:f64[1,4,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 4, 1)
                      ] hhp
                      hhr:f64[1,4,3] = mul hhq hho
                      hhs:f64[1,4,3] = mul 2.0 hhr
                      hht:f64[1,4] = mul hhn hhn
                      hhu:f64[1,4] = dot_general[
                        dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
                        preferred_element_type=float64
                      ] hho hho
                      hhv:f64[1,4] = sub hht hhu
                      hhw:f64[1,4,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 4, 1)
                      ] hhv
                      hhx:f64[1,4,3] = mul hhw hcw
                      hhy:f64[1,4,3] = add hhs hhx
                      hhz:f64[1,4] = mul 2.0 hhn
                      hia:f64[1,4,3] = pjit[name=cross jaxpr=cross3] hho hcw
                      hib:f64[1,4,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 4, 1)
                      ] hhz
                      hic:f64[1,4,3] = mul hib hia
                      hid:f64[1,4,3] = add hhy hic
                      hie:f64[1,4,3] = add hhl hid
                      hif:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 1)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] hhi
                      hig:f64[1,4] = squeeze[dimensions=(2,)] hif
                      hih:f64[1,4,3] = slice[
                        limit_indices=(1, 4, 4)
                        start_indices=(0, 0, 1)
                        strides=None
                      ] hhi
                      hii:f64[1,4] = dot_general[
                        dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
                        preferred_element_type=float64
                      ] hih hcv
                      hij:f64[1,4,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 4, 1)
                      ] hii
                      hik:f64[1,4,3] = mul hij hih
                      hil:f64[1,4,3] = mul 2.0 hik
                      him:f64[1,4] = mul hig hig
                      hin:f64[1,4] = dot_general[
                        dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
                        preferred_element_type=float64
                      ] hih hih
                      hio:f64[1,4] = sub him hin
                      hip:f64[1,4,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 4, 1)
                      ] hio
                      hiq:f64[1,4,3] = mul hip hcv
                      hir:f64[1,4,3] = add hil hiq
                      his:f64[1,4] = mul 2.0 hig
                      hit:f64[1,4,3] = pjit[name=cross jaxpr=cross3] hih hcv
                      hiu:f64[1,4,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 4, 1)
                      ] his
                      hiv:f64[1,4,3] = mul hiu hit
                      hiw:f64[1,4,3] = add hir hiv
                      hix:f64[1,4,3] = add hcs hiw
                      hiy:f64[1,4,3] = pjit[name=_take jaxpr=_take6] gpy dwv
                      hiz:f64[1,4,4] = pjit[name=_take jaxpr=_take9] guh dww
                      hja:f64[1,4,3] = pjit[name=_take jaxpr=_take6] gms dwx
                      hjb:f64[1,4,3] = pjit[name=_take jaxpr=_take6] gmt dwy
                      hjc:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 1)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] hhi
                      hjd:f64[1,4] = squeeze[dimensions=(2,)] hjc
                      hje:f64[1,4,3] = slice[
                        limit_indices=(1, 4, 4)
                        start_indices=(0, 0, 1)
                        strides=None
                      ] hhi
                      hjf:f64[1,4] = dot_general[
                        dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
                        preferred_element_type=float64
                      ] hje hiy
                      hjg:f64[1,4,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 4, 1)
                      ] hjf
                      hjh:f64[1,4,3] = mul hjg hje
                      hji:f64[1,4,3] = mul 2.0 hjh
                      hjj:f64[1,4] = mul hjd hjd
                      hjk:f64[1,4] = dot_general[
                        dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
                        preferred_element_type=float64
                      ] hje hje
                      hjl:f64[1,4] = sub hjj hjk
                      hjm:f64[1,4,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 4, 1)
                      ] hjl
                      hjn:f64[1,4,3] = mul hjm hiy
                      hjo:f64[1,4,3] = add hji hjn
                      hjp:f64[1,4] = mul 2.0 hjd
                      hjq:f64[1,4,3] = pjit[name=cross jaxpr=cross3] hje hiy
                      hjr:f64[1,4,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 4, 1)
                      ] hjp
                      hjs:f64[1,4,3] = mul hjr hjq
                      hjt:f64[1,4,3] = add hjo hjs
                      hju:f64[1,4,3] = add hdp hjt
                      hjv:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 1)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] hhi
                      hjw:f64[1,4] = squeeze[dimensions=(2,)] hjv
                      hjx:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 1)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] hiz
                      hjy:f64[1,4] = squeeze[dimensions=(2,)] hjx
                      hjz:f64[1,4] = mul hjw hjy
                      hka:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 2)
                        start_indices=(0, 0, 1)
                        strides=None
                      ] hhi
                      hkb:f64[1,4] = squeeze[dimensions=(2,)] hka
                      hkc:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 2)
                        start_indices=(0, 0, 1)
                        strides=None
                      ] hiz
                      hkd:f64[1,4] = squeeze[dimensions=(2,)] hkc
                      hke:f64[1,4] = mul hkb hkd
                      hkf:f64[1,4] = sub hjz hke
                      hkg:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 3)
                        start_indices=(0, 0, 2)
                        strides=None
                      ] hhi
                      hkh:f64[1,4] = squeeze[dimensions=(2,)] hkg
                      hki:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 3)
                        start_indices=(0, 0, 2)
                        strides=None
                      ] hiz
                      hkj:f64[1,4] = squeeze[dimensions=(2,)] hki
                      hkk:f64[1,4] = mul hkh hkj
                      hkl:f64[1,4] = sub hkf hkk
                      hkm:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 4)
                        start_indices=(0, 0, 3)
                        strides=None
                      ] hhi
                      hkn:f64[1,4] = squeeze[dimensions=(2,)] hkm
                      hko:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 4)
                        start_indices=(0, 0, 3)
                        strides=None
                      ] hiz
                      hkp:f64[1,4] = squeeze[dimensions=(2,)] hko
                      hkq:f64[1,4] = mul hkn hkp
                      hkr:f64[1,4] = sub hkl hkq
                      hks:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 1)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] hhi
                      hkt:f64[1,4] = squeeze[dimensions=(2,)] hks
                      hku:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 2)
                        start_indices=(0, 0, 1)
                        strides=None
                      ] hiz
                      hkv:f64[1,4] = squeeze[dimensions=(2,)] hku
                      hkw:f64[1,4] = mul hkt hkv
                      hkx:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 2)
                        start_indices=(0, 0, 1)
                        strides=None
                      ] hhi
                      hky:f64[1,4] = squeeze[dimensions=(2,)] hkx
                      hkz:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 1)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] hiz
                      hla:f64[1,4] = squeeze[dimensions=(2,)] hkz
                      hlb:f64[1,4] = mul hky hla
                      hlc:f64[1,4] = add hkw hlb
                      hld:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 3)
                        start_indices=(0, 0, 2)
                        strides=None
                      ] hhi
                      hle:f64[1,4] = squeeze[dimensions=(2,)] hld
                      hlf:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 4)
                        start_indices=(0, 0, 3)
                        strides=None
                      ] hiz
                      hlg:f64[1,4] = squeeze[dimensions=(2,)] hlf
                      hlh:f64[1,4] = mul hle hlg
                      hli:f64[1,4] = add hlc hlh
                      hlj:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 4)
                        start_indices=(0, 0, 3)
                        strides=None
                      ] hhi
                      hlk:f64[1,4] = squeeze[dimensions=(2,)] hlj
                      hll:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 3)
                        start_indices=(0, 0, 2)
                        strides=None
                      ] hiz
                      hlm:f64[1,4] = squeeze[dimensions=(2,)] hll
                      hln:f64[1,4] = mul hlk hlm
                      hlo:f64[1,4] = sub hli hln
                      hlp:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 1)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] hhi
                      hlq:f64[1,4] = squeeze[dimensions=(2,)] hlp
                      hlr:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 3)
                        start_indices=(0, 0, 2)
                        strides=None
                      ] hiz
                      hls:f64[1,4] = squeeze[dimensions=(2,)] hlr
                      hlt:f64[1,4] = mul hlq hls
                      hlu:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 2)
                        start_indices=(0, 0, 1)
                        strides=None
                      ] hhi
                      hlv:f64[1,4] = squeeze[dimensions=(2,)] hlu
                      hlw:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 4)
                        start_indices=(0, 0, 3)
                        strides=None
                      ] hiz
                      hlx:f64[1,4] = squeeze[dimensions=(2,)] hlw
                      hly:f64[1,4] = mul hlv hlx
                      hlz:f64[1,4] = sub hlt hly
                      hma:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 3)
                        start_indices=(0, 0, 2)
                        strides=None
                      ] hhi
                      hmb:f64[1,4] = squeeze[dimensions=(2,)] hma
                      hmc:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 1)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] hiz
                      hmd:f64[1,4] = squeeze[dimensions=(2,)] hmc
                      hme:f64[1,4] = mul hmb hmd
                      hmf:f64[1,4] = add hlz hme
                      hmg:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 4)
                        start_indices=(0, 0, 3)
                        strides=None
                      ] hhi
                      hmh:f64[1,4] = squeeze[dimensions=(2,)] hmg
                      hmi:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 2)
                        start_indices=(0, 0, 1)
                        strides=None
                      ] hiz
                      hmj:f64[1,4] = squeeze[dimensions=(2,)] hmi
                      hmk:f64[1,4] = mul hmh hmj
                      hml:f64[1,4] = add hmf hmk
                      hmm:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 1)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] hhi
                      hmn:f64[1,4] = squeeze[dimensions=(2,)] hmm
                      hmo:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 4)
                        start_indices=(0, 0, 3)
                        strides=None
                      ] hiz
                      hmp:f64[1,4] = squeeze[dimensions=(2,)] hmo
                      hmq:f64[1,4] = mul hmn hmp
                      hmr:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 2)
                        start_indices=(0, 0, 1)
                        strides=None
                      ] hhi
                      hms:f64[1,4] = squeeze[dimensions=(2,)] hmr
                      hmt:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 3)
                        start_indices=(0, 0, 2)
                        strides=None
                      ] hiz
                      hmu:f64[1,4] = squeeze[dimensions=(2,)] hmt
                      hmv:f64[1,4] = mul hms hmu
                      hmw:f64[1,4] = add hmq hmv
                      hmx:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 3)
                        start_indices=(0, 0, 2)
                        strides=None
                      ] hhi
                      hmy:f64[1,4] = squeeze[dimensions=(2,)] hmx
                      hmz:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 2)
                        start_indices=(0, 0, 1)
                        strides=None
                      ] hiz
                      hna:f64[1,4] = squeeze[dimensions=(2,)] hmz
                      hnb:f64[1,4] = mul hmy hna
                      hnc:f64[1,4] = sub hmw hnb
                      hnd:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 4)
                        start_indices=(0, 0, 3)
                        strides=None
                      ] hhi
                      hne:f64[1,4] = squeeze[dimensions=(2,)] hnd
                      hnf:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 1)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] hiz
                      hng:f64[1,4] = squeeze[dimensions=(2,)] hnf
                      hnh:f64[1,4] = mul hne hng
                      hni:f64[1,4] = add hnc hnh
                      hnj:f64[1,4,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 4, 1)
                      ] hkr
                      hnk:f64[1,4,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 4, 1)
                      ] hlo
                      hnl:f64[1,4,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 4, 1)
                      ] hml
                      hnm:f64[1,4,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 4, 1)
                      ] hni
                      hnn:f64[1,4,4] = concatenate[dimension=2] hnj hnk hnl hnm
                      hno:f64[1,4,3] = sub hju hdp
                      hnp:f64[1,4,3] = pjit[name=cross jaxpr=cross3] hix hno
                      hnq:f64[1,4,3] = add hie hnp
                      hnr:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 1)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] hhi
                      hns:f64[1,4] = squeeze[dimensions=(2,)] hnr
                      hnt:f64[1,4,3] = slice[
                        limit_indices=(1, 4, 4)
                        start_indices=(0, 0, 1)
                        strides=None
                      ] hhi
                      hnu:f64[1,4] = dot_general[
                        dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
                        preferred_element_type=float64
                      ] hnt hjb
                      hnv:f64[1,4,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 4, 1)
                      ] hnu
                      hnw:f64[1,4,3] = mul hnv hnt
                      hnx:f64[1,4,3] = mul 2.0 hnw
                      hny:f64[1,4] = mul hns hns
                      hnz:f64[1,4] = dot_general[
                        dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
                        preferred_element_type=float64
                      ] hnt hnt
                      hoa:f64[1,4] = sub hny hnz
                      hob:f64[1,4,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 4, 1)
                      ] hoa
                      hoc:f64[1,4,3] = mul hob hjb
                      hod:f64[1,4,3] = add hnx hoc
                      hoe:f64[1,4] = mul 2.0 hns
                      hof:f64[1,4,3] = pjit[name=cross jaxpr=cross3] hnt hjb
                      hog:f64[1,4,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 4, 1)
                      ] hoe
                      hoh:f64[1,4,3] = mul hog hof
                      hoi:f64[1,4,3] = add hod hoh
                      hoj:f64[1,4,3] = add hnq hoi
                      hok:f64[1,4,1] = slice[
                        limit_indices=(1, 4, 1)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] hnn
                      hol:f64[1,4] = squeeze[dimensions=(2,)] hok
                      hom:f64[1,4,3] = slice[
                        limit_indices=(1, 4, 4)
                        start_indices=(0, 0, 1)
                        strides=None
                      ] hnn
                      hon:f64[1,4] = dot_general[
                        dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
                        preferred_element_type=float64
                      ] hom hja
                      hoo:f64[1,4,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 4, 1)
                      ] hon
                      hop:f64[1,4,3] = mul hoo hom
                      hoq:f64[1,4,3] = mul 2.0 hop
                      hor:f64[1,4] = mul hol hol
                      hos:f64[1,4] = dot_general[
                        dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
                        preferred_element_type=float64
                      ] hom hom
                      hot:f64[1,4] = sub hor hos
                      hou:f64[1,4,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 4, 1)
                      ] hot
                      hov:f64[1,4,3] = mul hou hja
                      how:f64[1,4,3] = add hoq hov
                      hox:f64[1,4] = mul 2.0 hol
                      hoy:f64[1,4,3] = pjit[name=cross jaxpr=cross3] hom hja
                      hoz:f64[1,4,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 4, 1)
                      ] hox
                      hpa:f64[1,4,3] = mul hoz hoy
                      hpb:f64[1,4,3] = add how hpa
                      hpc:f64[1,4,3] = add hix hpb
                      hpd:f64[1,13,3] = concatenate[dimension=1] gui gxk hdp hju
                      hpe:f64[1,13,4] = concatenate[dimension=1] guj hbd hhi hnn
                      hpf:f64[1,13,3] = concatenate[dimension=1] gwe hcs hix hpc
                      hpg:f64[1,13,3] = concatenate[dimension=1] gul hbz hie hoj
                      hph:f64[1,13,3] = pjit[name=_take jaxpr=_take5] hpd dwz
                      hpi:f64[1,13,4] = pjit[
                        name=_take
                        jaxpr={ lambda ; hpj:f64[1,13,4] hpk:i64[13]. let
                            hpl:i64[13] = pjit[name=remainder jaxpr=remainder7] hpk
                              13
                            hpm:i64[13,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(13, 1)
                            ] hpl
                            hpn:f64[1,13,4] = gather[
                              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 2), collapsed_slice_dims=(1,), start_index_map=(1,))
                              fill_value=None
                              indices_are_sorted=False
                              mode=GatherScatterMode.PROMISE_IN_BOUNDS
                              slice_sizes=(1, 1, 4)
                              unique_indices=False
                            ] hpj hpm
                          in (hpn,) }
                      ] hpe dxa
                      hpo:f64[1,13,3] = pjit[name=_take jaxpr=_take5] hpf dxb
                      hpp:f64[1,13,3] = pjit[name=_take jaxpr=_take5] hpg dxc
                      hpq:bool[1,13] = pjit[
                        name=allclose
                        jaxpr={ lambda ; hpr:f64[1,13,4] hps:f64[]. let
                            hpt:bool[1,13,4] = pjit[
                              name=isclose
                              jaxpr={ lambda ; hpu:f64[1,13,4] hpv:f64[] hpw:f64[]
                                  hpx:f64[]. let
                                  hpy:f64[] = convert_element_type[
                                    new_dtype=float64
                                    weak_type=False
                                  ] hpv
                                  hpz:f64[] = convert_element_type[
                                    new_dtype=float64
                                    weak_type=False
                                  ] hpw
                                  hqa:f64[] = convert_element_type[
                                    new_dtype=float64
                                    weak_type=False
                                  ] hpx
                                  hqb:f64[1,13,4] = sub hpu hpy
                                  hqc:f64[1,13,4] = abs hqb
                                  hqd:f64[] = abs hpy
                                  hqe:f64[] = mul hpz hqd
                                  hqf:f64[] = add hqa hqe
                                  hqg:bool[1,13,4] = le hqc hqf
                                  hqh:bool[1,13,4] = pjit[
                                    name=isinf
                                    jaxpr={ lambda ; hqi:f64[1,13,4]. let
                                        hqj:f64[1,13,4] = abs hqi
                                        hqk:bool[1,13,4] = eq hqj inf
                                      in (hqk,) }
                                  ] hpu
                                  hql:bool[] = pjit[name=isinf jaxpr=isinf] hpy
                                  hqm:bool[1,13,4] = or hqh hql
                                  hqn:bool[1,13,4] = and hqh hql
                                  hqo:bool[1,13,4] = not hqm
                                  hqp:bool[1,13,4] = and hqg hqo
                                  hqq:bool[1,13,4] = eq hpu hpy
                                  hqr:bool[1,13,4] = and hqn hqq
                                  hqs:bool[1,13,4] = or hqp hqr
                                  hqt:bool[1,13,4] = ne hpu hpu
                                  hqu:bool[] = ne hpy hpy
                                  hqv:bool[1,13,4] = or hqt hqu
                                  hqw:bool[1,13,4] = not hqv
                                  hqx:bool[1,13,4] = and hqs hqw
                                in (hqx,) }
                            ] hpr hps 1e-05 1e-08
                            hqy:bool[1,13] = reduce_and[axes=(2,)] hpt
                          in (hqy,) }
                      ] hpi 0.0
                      hqz:f64[4] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(4,)
                      ] 1.0
                      hra:f64[1,13,4] = pjit[
                        name=_where
                        jaxpr={ lambda ; hrb:bool[1,13] hrc:f64[4] hrd:f64[1,13,4]. let
                            hre:bool[1,13,4] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(1, 13, 4)
                            ] hrb
                            hrf:f64[13,4] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(13, 4)
                            ] hrc
                            hrg:f64[1,13,4] = broadcast_in_dim[
                              broadcast_dimensions=(1, 2)
                              shape=(1, 13, 4)
                            ] hrf
                            hrh:f64[1,13,4] = select_n hre hrd hrg
                          in (hrh,) }
                      ] hpq hqz hpi
                      hri:f64[1,13] = pjit[
                        name=norm
                        jaxpr={ lambda ; hrj:f64[1,13,4]. let
                            hrk:f64[1,13,4] = mul hrj hrj
                            hrl:f64[1,13] = reduce_sum[axes=(2,)] hrk
                            hrm:f64[1,13] = sqrt hrl
                          in (hrm,) }
                      ] hra
                      hrn:f64[1,13] = pjit[
                        name=_where
                        jaxpr={ lambda ; hro:bool[1,13] hrp:f64[] hrq:f64[1,13]. let
                            hrr:f64[] = convert_element_type[
                              new_dtype=float64
                              weak_type=False
                            ] hrp
                            hrs:f64[13] = broadcast_in_dim[
                              broadcast_dimensions=()
                              shape=(13,)
                            ] hrr
                            hrt:f64[1,13] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 13)
                            ] hrs
                            hru:f64[1,13] = select_n hro hrq hrt
                          in (hru,) }
                      ] hpq 0.0 hri
                      hrv:bool[1,13] = eq hrn 0.0
                      hrw:f64[1,13] = convert_element_type[
                        new_dtype=float64
                        weak_type=True
                      ] hrv
                      hrx:f64[1,13] = mul 1e-06 hrw
                      hry:f64[1,13] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] hrx
                      hrz:f64[1,13] = add hrn hry
                      hsa:f64[1,13,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 13, 1)
                      ] hrz
                      hsb:f64[1,13,4] = div hpi hsa
                      hsc:f64[1,13,1] = slice[
                        limit_indices=(1, 13, 1)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] hsb
                      hsd:f64[1,13] = squeeze[dimensions=(2,)] hsc
                      hse:f64[1,13,3] = slice[
                        limit_indices=(1, 13, 4)
                        start_indices=(0, 0, 1)
                        strides=None
                      ] hsb
                      hsf:f64[13,1] = dot_general[
                        dimension_numbers=(([2], [1]), ([1], [0]))
                        preferred_element_type=float64
                      ] hse dwf
                      hsg:f64[1,13] = transpose[permutation=(1, 0)] hsf
                      hsh:f64[1,13,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 13, 1)
                      ] hsg
                      hsi:f64[1,13,3] = mul hsh hse
                      hsj:f64[1,13,3] = mul 2.0 hsi
                      hsk:f64[1,13] = mul hsd hsd
                      hsl:f64[1,13] = dot_general[
                        dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
                        preferred_element_type=float64
                      ] hse hse
                      hsm:f64[1,13] = sub hsk hsl
                      hsn:f64[1,13,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 13, 1)
                      ] hsm
                      hso:f64[1,13,3] = broadcast_in_dim[
                        broadcast_dimensions=(1, 2)
                        shape=(1, 13, 3)
                      ] dwf
                      hsp:f64[1,13,3] = mul hsn hso
                      hsq:f64[1,13,3] = add hsj hsp
                      hsr:f64[1,13] = mul 2.0 hsd
                      hss:f64[1,13,3] = pjit[name=cross jaxpr=cross2] hse dwf
                      hst:f64[1,13,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 13, 1)
                      ] hsr
                      hsu:f64[1,13,3] = mul hst hss
                      hsv:f64[1,13,3] = add hsq hsu
                      hsw:f64[1,13,3] = add hph hsv
                      hsx:f64[1,13,1] = slice[
                        limit_indices=(1, 13, 1)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] hsb
                      hsy:f64[1,13] = squeeze[dimensions=(2,)] hsx
                      hsz:f64[13,1] = slice[
                        limit_indices=(13, 1)
                        start_indices=(0, 0)
                        strides=None
                      ] dwg
                      hta:f64[13] = squeeze[dimensions=(1,)] hsz
                      htb:f64[1,13] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 13)
                      ] hta
                      htc:f64[1,13] = mul hsy htb
                      htd:f64[1,13,1] = slice[
                        limit_indices=(1, 13, 2)
                        start_indices=(0, 0, 1)
                        strides=None
                      ] hsb
                      hte:f64[1,13] = squeeze[dimensions=(2,)] htd
                      htf:f64[13,1] = slice[
                        limit_indices=(13, 2)
                        start_indices=(0, 1)
                        strides=None
                      ] dwg
                      htg:f64[13] = squeeze[dimensions=(1,)] htf
                      hth:f64[1,13] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 13)
                      ] htg
                      hti:f64[1,13] = mul hte hth
                      htj:f64[1,13] = sub htc hti
                      htk:f64[1,13,1] = slice[
                        limit_indices=(1, 13, 3)
                        start_indices=(0, 0, 2)
                        strides=None
                      ] hsb
                      htl:f64[1,13] = squeeze[dimensions=(2,)] htk
                      htm:f64[13,1] = slice[
                        limit_indices=(13, 3)
                        start_indices=(0, 2)
                        strides=None
                      ] dwg
                      htn:f64[13] = squeeze[dimensions=(1,)] htm
                      hto:f64[1,13] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 13)
                      ] htn
                      htp:f64[1,13] = mul htl hto
                      htq:f64[1,13] = sub htj htp
                      htr:f64[1,13,1] = slice[
                        limit_indices=(1, 13, 4)
                        start_indices=(0, 0, 3)
                        strides=None
                      ] hsb
                      hts:f64[1,13] = squeeze[dimensions=(2,)] htr
                      htt:f64[13,1] = slice[
                        limit_indices=(13, 4)
                        start_indices=(0, 3)
                        strides=None
                      ] dwg
                      htu:f64[13] = squeeze[dimensions=(1,)] htt
                      htv:f64[1,13] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 13)
                      ] htu
                      htw:f64[1,13] = mul hts htv
                      htx:f64[1,13] = sub htq htw
                      hty:f64[1,13,1] = slice[
                        limit_indices=(1, 13, 1)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] hsb
                      htz:f64[1,13] = squeeze[dimensions=(2,)] hty
                      hua:f64[13,1] = slice[
                        limit_indices=(13, 2)
                        start_indices=(0, 1)
                        strides=None
                      ] dwg
                      hub:f64[13] = squeeze[dimensions=(1,)] hua
                      huc:f64[1,13] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 13)
                      ] hub
                      hud:f64[1,13] = mul htz huc
                      hue:f64[1,13,1] = slice[
                        limit_indices=(1, 13, 2)
                        start_indices=(0, 0, 1)
                        strides=None
                      ] hsb
                      huf:f64[1,13] = squeeze[dimensions=(2,)] hue
                      hug:f64[13,1] = slice[
                        limit_indices=(13, 1)
                        start_indices=(0, 0)
                        strides=None
                      ] dwg
                      huh:f64[13] = squeeze[dimensions=(1,)] hug
                      hui:f64[1,13] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 13)
                      ] huh
                      huj:f64[1,13] = mul huf hui
                      huk:f64[1,13] = add hud huj
                      hul:f64[1,13,1] = slice[
                        limit_indices=(1, 13, 3)
                        start_indices=(0, 0, 2)
                        strides=None
                      ] hsb
                      hum:f64[1,13] = squeeze[dimensions=(2,)] hul
                      hun:f64[13,1] = slice[
                        limit_indices=(13, 4)
                        start_indices=(0, 3)
                        strides=None
                      ] dwg
                      huo:f64[13] = squeeze[dimensions=(1,)] hun
                      hup:f64[1,13] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 13)
                      ] huo
                      huq:f64[1,13] = mul hum hup
                      hur:f64[1,13] = add huk huq
                      hus:f64[1,13,1] = slice[
                        limit_indices=(1, 13, 4)
                        start_indices=(0, 0, 3)
                        strides=None
                      ] hsb
                      hut:f64[1,13] = squeeze[dimensions=(2,)] hus
                      huu:f64[13,1] = slice[
                        limit_indices=(13, 3)
                        start_indices=(0, 2)
                        strides=None
                      ] dwg
                      huv:f64[13] = squeeze[dimensions=(1,)] huu
                      huw:f64[1,13] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 13)
                      ] huv
                      hux:f64[1,13] = mul hut huw
                      huy:f64[1,13] = sub hur hux
                      huz:f64[1,13,1] = slice[
                        limit_indices=(1, 13, 1)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] hsb
                      hva:f64[1,13] = squeeze[dimensions=(2,)] huz
                      hvb:f64[13,1] = slice[
                        limit_indices=(13, 3)
                        start_indices=(0, 2)
                        strides=None
                      ] dwg
                      hvc:f64[13] = squeeze[dimensions=(1,)] hvb
                      hvd:f64[1,13] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 13)
                      ] hvc
                      hve:f64[1,13] = mul hva hvd
                      hvf:f64[1,13,1] = slice[
                        limit_indices=(1, 13, 2)
                        start_indices=(0, 0, 1)
                        strides=None
                      ] hsb
                      hvg:f64[1,13] = squeeze[dimensions=(2,)] hvf
                      hvh:f64[13,1] = slice[
                        limit_indices=(13, 4)
                        start_indices=(0, 3)
                        strides=None
                      ] dwg
                      hvi:f64[13] = squeeze[dimensions=(1,)] hvh
                      hvj:f64[1,13] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 13)
                      ] hvi
                      hvk:f64[1,13] = mul hvg hvj
                      hvl:f64[1,13] = sub hve hvk
                      hvm:f64[1,13,1] = slice[
                        limit_indices=(1, 13, 3)
                        start_indices=(0, 0, 2)
                        strides=None
                      ] hsb
                      hvn:f64[1,13] = squeeze[dimensions=(2,)] hvm
                      hvo:f64[13,1] = slice[
                        limit_indices=(13, 1)
                        start_indices=(0, 0)
                        strides=None
                      ] dwg
                      hvp:f64[13] = squeeze[dimensions=(1,)] hvo
                      hvq:f64[1,13] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 13)
                      ] hvp
                      hvr:f64[1,13] = mul hvn hvq
                      hvs:f64[1,13] = add hvl hvr
                      hvt:f64[1,13,1] = slice[
                        limit_indices=(1, 13, 4)
                        start_indices=(0, 0, 3)
                        strides=None
                      ] hsb
                      hvu:f64[1,13] = squeeze[dimensions=(2,)] hvt
                      hvv:f64[13,1] = slice[
                        limit_indices=(13, 2)
                        start_indices=(0, 1)
                        strides=None
                      ] dwg
                      hvw:f64[13] = squeeze[dimensions=(1,)] hvv
                      hvx:f64[1,13] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 13)
                      ] hvw
                      hvy:f64[1,13] = mul hvu hvx
                      hvz:f64[1,13] = add hvs hvy
                      hwa:f64[1,13,1] = slice[
                        limit_indices=(1, 13, 1)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] hsb
                      hwb:f64[1,13] = squeeze[dimensions=(2,)] hwa
                      hwc:f64[13,1] = slice[
                        limit_indices=(13, 4)
                        start_indices=(0, 3)
                        strides=None
                      ] dwg
                      hwd:f64[13] = squeeze[dimensions=(1,)] hwc
                      hwe:f64[1,13] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 13)
                      ] hwd
                      hwf:f64[1,13] = mul hwb hwe
                      hwg:f64[1,13,1] = slice[
                        limit_indices=(1, 13, 2)
                        start_indices=(0, 0, 1)
                        strides=None
                      ] hsb
                      hwh:f64[1,13] = squeeze[dimensions=(2,)] hwg
                      hwi:f64[13,1] = slice[
                        limit_indices=(13, 3)
                        start_indices=(0, 2)
                        strides=None
                      ] dwg
                      hwj:f64[13] = squeeze[dimensions=(1,)] hwi
                      hwk:f64[1,13] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 13)
                      ] hwj
                      hwl:f64[1,13] = mul hwh hwk
                      hwm:f64[1,13] = add hwf hwl
                      hwn:f64[1,13,1] = slice[
                        limit_indices=(1, 13, 3)
                        start_indices=(0, 0, 2)
                        strides=None
                      ] hsb
                      hwo:f64[1,13] = squeeze[dimensions=(2,)] hwn
                      hwp:f64[13,1] = slice[
                        limit_indices=(13, 2)
                        start_indices=(0, 1)
                        strides=None
                      ] dwg
                      hwq:f64[13] = squeeze[dimensions=(1,)] hwp
                      hwr:f64[1,13] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 13)
                      ] hwq
                      hws:f64[1,13] = mul hwo hwr
                      hwt:f64[1,13] = sub hwm hws
                      hwu:f64[1,13,1] = slice[
                        limit_indices=(1, 13, 4)
                        start_indices=(0, 0, 3)
                        strides=None
                      ] hsb
                      hwv:f64[1,13] = squeeze[dimensions=(2,)] hwu
                      hww:f64[13,1] = slice[
                        limit_indices=(13, 1)
                        start_indices=(0, 0)
                        strides=None
                      ] dwg
                      hwx:f64[13] = squeeze[dimensions=(1,)] hww
                      hwy:f64[1,13] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 13)
                      ] hwx
                      hwz:f64[1,13] = mul hwv hwy
                      hxa:f64[1,13] = add hwt hwz
                      hxb:f64[1,13,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 13, 1)
                      ] htx
                      hxc:f64[1,13,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 13, 1)
                      ] huy
                      hxd:f64[1,13,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 13, 1)
                      ] hvz
                      hxe:f64[1,13,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 13, 1)
                      ] hxa
                      hxf:f64[1,13,4] = concatenate[dimension=2] hxb hxc hxd hxe
                      hxg:f64[1,13,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 13, 1)
                      ] dwi
                      hxh:f64[1,13,3] = mul hxg hsw
                      hxi:f64[13,3] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(13, 3)
                      ] 0.0
                      hxj:i32[13,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(13, 1)
                      ] dxd
                      hxk:f64[1,13,3] = broadcast_in_dim[
                        broadcast_dimensions=(1, 2)
                        shape=(1, 13, 3)
                      ] hxi
                      hxl:f64[1,13,3] = scatter-add[
                        dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                        indices_are_sorted=False
                        mode=GatherScatterMode.FILL_OR_DROP
                        unique_indices=False
                        update_consts=()
                        update_jaxpr=jaxpr
                      ] hxk hxj hxh
                      hxm:f64[13] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(13,)
                      ] 0.0
                      hxn:i32[13,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(13, 1)
                      ] dxd
                      hxo:f64[1,13] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 13)
                      ] hxm
                      hxp:f64[1,13] = scatter-add[
                        dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0,), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                        indices_are_sorted=False
                        mode=GatherScatterMode.FILL_OR_DROP
                        unique_indices=False
                        update_consts=()
                        update_jaxpr=jaxpr
                      ] hxo hxn dwi
                      hxq:bool[13] = lt dxd 0
                      hxr:i32[13] = add dxd 13
                      hxs:i32[13] = select_n hxq dxd hxr
                      hxt:i32[13,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(13, 1)
                      ] hxs
                      hxu:f64[1,13,3] = gather[
                        dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 2), collapsed_slice_dims=(1,), start_index_map=(1,))
                        fill_value=None
                        indices_are_sorted=False
                        mode=GatherScatterMode.PROMISE_IN_BOUNDS
                        slice_sizes=(1, 1, 3)
                        unique_indices=False
                      ] hxl hxt
                      hxv:bool[13] = lt dxd 0
                      hxw:i32[13] = add dxd 13
                      hxx:i32[13] = select_n hxv dxd hxw
                      hxy:i32[13,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(13, 1)
                      ] hxx
                      hxz:f64[1,13] = gather[
                        dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
                        fill_value=None
                        indices_are_sorted=False
                        mode=GatherScatterMode.PROMISE_IN_BOUNDS
                        slice_sizes=(1, 1)
                        unique_indices=False
                      ] hxp hxy
                      hya:f64[1,13,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 13, 1)
                      ] hxz
                      hyb:f64[1,13,3] = div hxu hya
                      hyc:f64[1,13,3] = sub hsw hyb
                      hyd:i64[3,3] = iota[dimension=0 dtype=int64 shape=(3, 3)] 
                      hye:i64[3,3] = iota[dimension=1 dtype=int64 shape=(3, 3)] 
                      hyf:i64[3,3] = add hyd 0
                      hyg:bool[3,3] = eq hyf hye
                      hyh:f64[3,3] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] hyg
                      hyi:f64[3,3] = neg hyh
                      hyj:f64[1,13,3,3] = pjit[
                        name=cross
                        jaxpr={ lambda ; hyk:f64[1,13,3] hyl:f64[3,3]. let
                            hym:i32[1] = broadcast_in_dim[
                              broadcast_dimensions=()
                              shape=(1,)
                            ] 0
                            hyn:f64[1,13] = gather[
                              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
                              fill_value=None
                              indices_are_sorted=True
                              mode=GatherScatterMode.PROMISE_IN_BOUNDS
                              slice_sizes=(1, 13, 1)
                              unique_indices=True
                            ] hyk hym
                            hyo:i32[1] = broadcast_in_dim[
                              broadcast_dimensions=()
                              shape=(1,)
                            ] 1
                            hyp:f64[1,13] = gather[
                              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
                              fill_value=None
                              indices_are_sorted=True
                              mode=GatherScatterMode.PROMISE_IN_BOUNDS
                              slice_sizes=(1, 13, 1)
                              unique_indices=True
                            ] hyk hyo
                            hyq:i32[1] = broadcast_in_dim[
                              broadcast_dimensions=()
                              shape=(1,)
                            ] 2
                            hyr:f64[1,13] = gather[
                              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
                              fill_value=None
                              indices_are_sorted=True
                              mode=GatherScatterMode.PROMISE_IN_BOUNDS
                              slice_sizes=(1, 13, 1)
                              unique_indices=True
                            ] hyk hyq
                            hys:f64[3,1] = slice[
                              limit_indices=(3, 1)
                              start_indices=(0, 0)
                              strides=None
                            ] hyl
                            hyt:f64[3] = squeeze[dimensions=(1,)] hys
                            hyu:f64[3,1] = slice[
                              limit_indices=(3, 2)
                              start_indices=(0, 1)
                              strides=None
                            ] hyl
                            hyv:f64[3] = squeeze[dimensions=(1,)] hyu
                            hyw:f64[3,1] = slice[
                              limit_indices=(3, 3)
                              start_indices=(0, 2)
                              strides=None
                            ] hyl
                            hyx:f64[3] = squeeze[dimensions=(1,)] hyw
                            hyy:f64[1,3] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 3)
                            ] hyx
                            hyz:f64[1,13,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(1, 13, 1)
                            ] hyp
                            hza:f64[1,1,3] = broadcast_in_dim[
                              broadcast_dimensions=(1, 2)
                              shape=(1, 1, 3)
                            ] hyy
                            hzb:f64[1,13,3] = mul hyz hza
                            hzc:f64[1,3] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 3)
                            ] hyv
                            hzd:f64[1,13,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(1, 13, 1)
                            ] hyr
                            hze:f64[1,1,3] = broadcast_in_dim[
                              broadcast_dimensions=(1, 2)
                              shape=(1, 1, 3)
                            ] hzc
                            hzf:f64[1,13,3] = mul hzd hze
                            hzg:f64[1,13,3] = sub hzb hzf
                            hzh:f64[1,3] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 3)
                            ] hyt
                            hzi:f64[1,13,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(1, 13, 1)
                            ] hyr
                            hzj:f64[1,1,3] = broadcast_in_dim[
                              broadcast_dimensions=(1, 2)
                              shape=(1, 1, 3)
                            ] hzh
                            hzk:f64[1,13,3] = mul hzi hzj
                            hzl:f64[1,3] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 3)
                            ] hyx
                            hzm:f64[1,13,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(1, 13, 1)
                            ] hyn
                            hzn:f64[1,1,3] = broadcast_in_dim[
                              broadcast_dimensions=(1, 2)
                              shape=(1, 1, 3)
                            ] hzl
                            hzo:f64[1,13,3] = mul hzm hzn
                            hzp:f64[1,13,3] = sub hzk hzo
                            hzq:f64[1,3] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 3)
                            ] hyv
                            hzr:f64[1,13,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(1, 13, 1)
                            ] hyn
                            hzs:f64[1,1,3] = broadcast_in_dim[
                              broadcast_dimensions=(1, 2)
                              shape=(1, 1, 3)
                            ] hzq
                            hzt:f64[1,13,3] = mul hzr hzs
                            hzu:f64[1,3] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 3)
                            ] hyt
                            hzv:f64[1,13,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(1, 13, 1)
                            ] hyp
                            hzw:f64[1,1,3] = broadcast_in_dim[
                              broadcast_dimensions=(1, 2)
                              shape=(1, 1, 3)
                            ] hzu
                            hzx:f64[1,13,3] = mul hzv hzw
                            hzy:f64[1,13,3] = sub hzt hzx
                            hzz:f64[1,13,1,3] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1, 3)
                              shape=(1, 13, 1, 3)
                            ] hzg
                            iaa:f64[1,13,1,3] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1, 3)
                              shape=(1, 13, 1, 3)
                            ] hzp
                            iab:f64[1,13,1,3] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1, 3)
                              shape=(1, 13, 1, 3)
                            ] hzy
                            iac:f64[1,13,3,3] = concatenate[dimension=2] hzz iaa
                              iab
                            iad:f64[1,13,3,3] = transpose[
                              permutation=(0, 1, 3, 2)
                            ] iac
                          in (iad,) }
                      ] hyc hyi
                      iae:f64[1,13] = dot_general[
                        dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
                        preferred_element_type=float64
                      ] hxf hxf
                      iaf:f64[1,13,1] = slice[
                        limit_indices=(1, 13, 1)
                        start_indices=(0, 0, 0)
                        strides=(1, 1, 1)
                      ] hxf
                      iag:f64[1,13] = squeeze[dimensions=(2,)] iaf
                      iah:f64[1,13,1] = slice[
                        limit_indices=(1, 13, 2)
                        start_indices=(0, 0, 1)
                        strides=(1, 1, 1)
                      ] hxf
                      iai:f64[1,13] = squeeze[dimensions=(2,)] iah
                      iaj:f64[1,13,1] = slice[
                        limit_indices=(1, 13, 3)
                        start_indices=(0, 0, 2)
                        strides=(1, 1, 1)
                      ] hxf
                      iak:f64[1,13] = squeeze[dimensions=(2,)] iaj
                      ial:f64[1,13,1] = slice[
                        limit_indices=(1, 13, 4)
                        start_indices=(0, 0, 3)
                        strides=(1, 1, 1)
                      ] hxf
                      iam:f64[1,13] = squeeze[dimensions=(2,)] ial
                      ian:f64[1,13] = div 2.0 iae
                      iao:f64[1,13] = mul iai ian
                      iap:f64[1,13] = mul iak ian
                      iaq:f64[1,13] = mul iam ian
                      iar:f64[1,13] = mul iag iao
                      ias:f64[1,13] = mul iag iap
                      iat:f64[1,13] = mul iag iaq
                      iau:f64[1,13] = mul iai iao
                      iav:f64[1,13] = mul iai iap
                      iaw:f64[1,13] = mul iai iaq
                      iax:f64[1,13] = mul iak iap
                      iay:f64[1,13] = mul iak iaq
                      iaz:f64[1,13] = mul iam iaq
                      iba:f64[1,13] = add iax iaz
                      ibb:f64[1,13] = sub 1.0 iba
                      ibc:f64[1,13] = sub iav iat
                      ibd:f64[1,13] = add iaw ias
                      ibe:f64[1,13,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 13, 1)
                      ] ibb
                      ibf:f64[1,13,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 13, 1)
                      ] ibc
                      ibg:f64[1,13,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 13, 1)
                      ] ibd
                      ibh:f64[1,13,3] = concatenate[dimension=2] ibe ibf ibg
                      ibi:f64[1,13] = add iav iat
                      ibj:f64[1,13] = add iau iaz
                      ibk:f64[1,13] = sub 1.0 ibj
                      ibl:f64[1,13] = sub iay iar
                      ibm:f64[1,13,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 13, 1)
                      ] ibi
                      ibn:f64[1,13,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 13, 1)
                      ] ibk
                      ibo:f64[1,13,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 13, 1)
                      ] ibl
                      ibp:f64[1,13,3] = concatenate[dimension=2] ibm ibn ibo
                      ibq:f64[1,13] = sub iaw ias
                      ibr:f64[1,13] = add iay iar
                      ibs:f64[1,13] = add iau iax
                      ibt:f64[1,13] = sub 1.0 ibs
                      ibu:f64[1,13,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 13, 1)
                      ] ibq
                      ibv:f64[1,13,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 13, 1)
                      ] ibr
                      ibw:f64[1,13,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 13, 1)
                      ] ibt
                      ibx:f64[1,13,3] = concatenate[dimension=2] ibu ibv ibw
                      iby:f64[1,13,1,3] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1, 3)
                        shape=(1, 13, 1, 3)
                      ] ibh
                      ibz:f64[1,13,1,3] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1, 3)
                        shape=(1, 13, 1, 3)
                      ] ibp
                      ica:f64[1,13,1,3] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1, 3)
                        shape=(1, 13, 1, 3)
                      ] ibx
                      icb:f64[1,13,3,3] = concatenate[dimension=2] iby ibz ica
                      icc:f64[1,13,3,3] = dot_general[
                        dimension_numbers=(([3], [2]), ([0, 1], [0, 1]))
                        preferred_element_type=float64
                      ] icb dwh
                      icd:f64[1,13,3,3] = transpose[permutation=(0, 1, 3, 2)] icb
                      ice:f64[1,13,3,3] = dot_general[
                        dimension_numbers=(([3], [2]), ([0, 1], [0, 1]))
                        preferred_element_type=float64
                      ] icc icd
                      icf:f64[1,13,3,3] = transpose[permutation=(0, 1, 3, 2)] hyj
                      icg:f64[1,13,3,3] = dot_general[
                        dimension_numbers=(([3], [2]), ([0, 1], [0, 1]))
                        preferred_element_type=float64
                      ] hyj icf
                      ich:f64[1,13,1,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 13, 1, 1)
                      ] dwi
                      ici:f64[1,13,3,3] = mul icg ich
                      icj:f64[1,13,3,3] = add ice ici
                      ick:f64[1,13,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 13, 1)
                      ] dwi
                      icl:f64[1,13,3] = mul hyc ick
                      icm:f64[1,3] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1, 3)
                      ] 0.0
                      icn:f64[1,1,1,4] = reshape[
                        dimensions=None
                        new_sizes=(1, 1, 1, 4)
                      ] dxf
                      ico:f64[1,4] = reshape[dimensions=None new_sizes=(1, 4)] icn
                      icp:f64[1,1,3] = broadcast_in_dim[
                        broadcast_dimensions=(1, 2)
                        shape=(1, 1, 3)
                      ] icm
                      icq:f64[1,14,3] = concatenate[dimension=1] hph icp
                      icr:f64[1,1,4] = broadcast_in_dim[
                        broadcast_dimensions=(1, 2)
                        shape=(1, 1, 4)
                      ] ico
                      ics:f64[1,14,4] = concatenate[dimension=1] hsb icr
                      ict:f64[1,13,3] = pjit[name=_take jaxpr=_take10] icq dxe
                      icu:f64[1,13,4] = pjit[
                        name=_take
                        jaxpr={ lambda ; icv:f64[1,14,4] icw:i32[13]. let
                            icx:i32[13] = pjit[name=remainder jaxpr=remainder10] icw
                              14
                            icy:i32[13,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(13, 1)
                            ] icx
                            icz:f64[1,13,4] = gather[
                              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 2), collapsed_slice_dims=(1,), start_index_map=(1,))
                              fill_value=None
                              indices_are_sorted=False
                              mode=GatherScatterMode.PROMISE_IN_BOUNDS
                              slice_sizes=(1, 1, 4)
                              unique_indices=False
                            ] icv icy
                          in (icz,) }
                      ] ics dxe
                      ida:f64[1,13,1] = slice[
                        limit_indices=(1, 13, 1)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] icu
                      idb:f64[1,13] = squeeze[dimensions=(2,)] ida
                      idc:f64[1,13,3] = slice[
                        limit_indices=(1, 13, 4)
                        start_indices=(0, 0, 1)
                        strides=None
                      ] icu
                      idd:f64[13,1] = dot_general[
                        dimension_numbers=(([2], [1]), ([1], [0]))
                        preferred_element_type=float64
                      ] idc dwb
                      ide:f64[1,13] = transpose[permutation=(1, 0)] idd
                      idf:f64[1,13,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 13, 1)
                      ] ide
                      idg:f64[1,13,3] = mul idf idc
                      idh:f64[1,13,3] = mul 2.0 idg
                      idi:f64[1,13] = mul idb idb
                      idj:f64[1,13] = dot_general[
                        dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
                        preferred_element_type=float64
                      ] idc idc
                      idk:f64[1,13] = sub idi idj
                      idl:f64[1,13,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 13, 1)
                      ] idk
                      idm:f64[1,13,3] = broadcast_in_dim[
                        broadcast_dimensions=(1, 2)
                        shape=(1, 13, 3)
                      ] dwb
                      idn:f64[1,13,3] = mul idl idm
                      ido:f64[1,13,3] = add idh idn
                      idp:f64[1,13] = mul 2.0 idb
                      idq:f64[1,13,3] = pjit[name=cross jaxpr=cross2] idc dwb
                      idr:f64[1,13,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 13, 1)
                      ] idp
                      ids:f64[1,13,3] = mul idr idq
                      idt:f64[1,13,3] = add ido ids
                      idu:f64[1,13,3] = add ict idt
                      idv:f64[1,13,1] = slice[
                        limit_indices=(1, 13, 1)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] icu
                      idw:f64[1,13] = squeeze[dimensions=(2,)] idv
                      idx:f64[13,1] = slice[
                        limit_indices=(13, 1)
                        start_indices=(0, 0)
                        strides=None
                      ] dwc
                      idy:f64[13] = squeeze[dimensions=(1,)] idx
                      idz:f64[1,13] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 13)
                      ] idy
                      iea:f64[1,13] = mul idw idz
                      ieb:f64[1,13,1] = slice[
                        limit_indices=(1, 13, 2)
                        start_indices=(0, 0, 1)
                        strides=None
                      ] icu
                      iec:f64[1,13] = squeeze[dimensions=(2,)] ieb
                      ied:f64[13,1] = slice[
                        limit_indices=(13, 2)
                        start_indices=(0, 1)
                        strides=None
                      ] dwc
                      iee:f64[13] = squeeze[dimensions=(1,)] ied
                      ief:f64[1,13] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 13)
                      ] iee
                      ieg:f64[1,13] = mul iec ief
                      ieh:f64[1,13] = sub iea ieg
                      iei:f64[1,13,1] = slice[
                        limit_indices=(1, 13, 3)
                        start_indices=(0, 0, 2)
                        strides=None
                      ] icu
                      iej:f64[1,13] = squeeze[dimensions=(2,)] iei
                      iek:f64[13,1] = slice[
                        limit_indices=(13, 3)
                        start_indices=(0, 2)
                        strides=None
                      ] dwc
                      iel:f64[13] = squeeze[dimensions=(1,)] iek
                      iem:f64[1,13] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 13)
                      ] iel
                      ien:f64[1,13] = mul iej iem
                      ieo:f64[1,13] = sub ieh ien
                      iep:f64[1,13,1] = slice[
                        limit_indices=(1, 13, 4)
                        start_indices=(0, 0, 3)
                        strides=None
                      ] icu
                      ieq:f64[1,13] = squeeze[dimensions=(2,)] iep
                      ier:f64[13,1] = slice[
                        limit_indices=(13, 4)
                        start_indices=(0, 3)
                        strides=None
                      ] dwc
                      ies:f64[13] = squeeze[dimensions=(1,)] ier
                      iet:f64[1,13] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 13)
                      ] ies
                      ieu:f64[1,13] = mul ieq iet
                      iev:f64[1,13] = sub ieo ieu
                      iew:f64[1,13,1] = slice[
                        limit_indices=(1, 13, 1)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] icu
                      iex:f64[1,13] = squeeze[dimensions=(2,)] iew
                      iey:f64[13,1] = slice[
                        limit_indices=(13, 2)
                        start_indices=(0, 1)
                        strides=None
                      ] dwc
                      iez:f64[13] = squeeze[dimensions=(1,)] iey
                      ifa:f64[1,13] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 13)
                      ] iez
                      ifb:f64[1,13] = mul iex ifa
                      ifc:f64[1,13,1] = slice[
                        limit_indices=(1, 13, 2)
                        start_indices=(0, 0, 1)
                        strides=None
                      ] icu
                      ifd:f64[1,13] = squeeze[dimensions=(2,)] ifc
                      ife:f64[13,1] = slice[
                        limit_indices=(13, 1)
                        start_indices=(0, 0)
                        strides=None
                      ] dwc
                      iff:f64[13] = squeeze[dimensions=(1,)] ife
                      ifg:f64[1,13] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 13)
                      ] iff
                      ifh:f64[1,13] = mul ifd ifg
                      ifi:f64[1,13] = add ifb ifh
                      ifj:f64[1,13,1] = slice[
                        limit_indices=(1, 13, 3)
                        start_indices=(0, 0, 2)
                        strides=None
                      ] icu
                      ifk:f64[1,13] = squeeze[dimensions=(2,)] ifj
                      ifl:f64[13,1] = slice[
                        limit_indices=(13, 4)
                        start_indices=(0, 3)
                        strides=None
                      ] dwc
                      ifm:f64[13] = squeeze[dimensions=(1,)] ifl
                      ifn:f64[1,13] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 13)
                      ] ifm
                      ifo:f64[1,13] = mul ifk ifn
                      ifp:f64[1,13] = add ifi ifo
                      ifq:f64[1,13,1] = slice[
                        limit_indices=(1, 13, 4)
                        start_indices=(0, 0, 3)
                        strides=None
                      ] icu
                      ifr:f64[1,13] = squeeze[dimensions=(2,)] ifq
                      ifs:f64[13,1] = slice[
                        limit_indices=(13, 3)
                        start_indices=(0, 2)
                        strides=None
                      ] dwc
                      ift:f64[13] = squeeze[dimensions=(1,)] ifs
                      ifu:f64[1,13] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 13)
                      ] ift
                      ifv:f64[1,13] = mul ifr ifu
                      ifw:f64[1,13] = sub ifp ifv
                      ifx:f64[1,13,1] = slice[
                        limit_indices=(1, 13, 1)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] icu
                      ify:f64[1,13] = squeeze[dimensions=(2,)] ifx
                      ifz:f64[13,1] = slice[
                        limit_indices=(13, 3)
                        start_indices=(0, 2)
                        strides=None
                      ] dwc
                      iga:f64[13] = squeeze[dimensions=(1,)] ifz
                      igb:f64[1,13] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 13)
                      ] iga
                      igc:f64[1,13] = mul ify igb
                      igd:f64[1,13,1] = slice[
                        limit_indices=(1, 13, 2)
                        start_indices=(0, 0, 1)
                        strides=None
                      ] icu
                      ige:f64[1,13] = squeeze[dimensions=(2,)] igd
                      igf:f64[13,1] = slice[
                        limit_indices=(13, 4)
                        start_indices=(0, 3)
                        strides=None
                      ] dwc
                      igg:f64[13] = squeeze[dimensions=(1,)] igf
                      igh:f64[1,13] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 13)
                      ] igg
                      igi:f64[1,13] = mul ige igh
                      igj:f64[1,13] = sub igc igi
                      igk:f64[1,13,1] = slice[
                        limit_indices=(1, 13, 3)
                        start_indices=(0, 0, 2)
                        strides=None
                      ] icu
                      igl:f64[1,13] = squeeze[dimensions=(2,)] igk
                      igm:f64[13,1] = slice[
                        limit_indices=(13, 1)
                        start_indices=(0, 0)
                        strides=None
                      ] dwc
                      ign:f64[13] = squeeze[dimensions=(1,)] igm
                      igo:f64[1,13] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 13)
                      ] ign
                      igp:f64[1,13] = mul igl igo
                      igq:f64[1,13] = add igj igp
                      igr:f64[1,13,1] = slice[
                        limit_indices=(1, 13, 4)
                        start_indices=(0, 0, 3)
                        strides=None
                      ] icu
                      igs:f64[1,13] = squeeze[dimensions=(2,)] igr
                      igt:f64[13,1] = slice[
                        limit_indices=(13, 2)
                        start_indices=(0, 1)
                        strides=None
                      ] dwc
                      igu:f64[13] = squeeze[dimensions=(1,)] igt
                      igv:f64[1,13] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 13)
                      ] igu
                      igw:f64[1,13] = mul igs igv
                      igx:f64[1,13] = add igq igw
                      igy:f64[1,13,1] = slice[
                        limit_indices=(1, 13, 1)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] icu
                      igz:f64[1,13] = squeeze[dimensions=(2,)] igy
                      iha:f64[13,1] = slice[
                        limit_indices=(13, 4)
                        start_indices=(0, 3)
                        strides=None
                      ] dwc
                      ihb:f64[13] = squeeze[dimensions=(1,)] iha
                      ihc:f64[1,13] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 13)
                      ] ihb
                      ihd:f64[1,13] = mul igz ihc
                      ihe:f64[1,13,1] = slice[
                        limit_indices=(1, 13, 2)
                        start_indices=(0, 0, 1)
                        strides=None
                      ] icu
                      ihf:f64[1,13] = squeeze[dimensions=(2,)] ihe
                      ihg:f64[13,1] = slice[
                        limit_indices=(13, 3)
                        start_indices=(0, 2)
                        strides=None
                      ] dwc
                      ihh:f64[13] = squeeze[dimensions=(1,)] ihg
                      ihi:f64[1,13] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 13)
                      ] ihh
                      ihj:f64[1,13] = mul ihf ihi
                      ihk:f64[1,13] = add ihd ihj
                      ihl:f64[1,13,1] = slice[
                        limit_indices=(1, 13, 3)
                        start_indices=(0, 0, 2)
                        strides=None
                      ] icu
                      ihm:f64[1,13] = squeeze[dimensions=(2,)] ihl
                      ihn:f64[13,1] = slice[
                        limit_indices=(13, 2)
                        start_indices=(0, 1)
                        strides=None
                      ] dwc
                      iho:f64[13] = squeeze[dimensions=(1,)] ihn
                      ihp:f64[1,13] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 13)
                      ] iho
                      ihq:f64[1,13] = mul ihm ihp
                      ihr:f64[1,13] = sub ihk ihq
                      ihs:f64[1,13,1] = slice[
                        limit_indices=(1, 13, 4)
                        start_indices=(0, 0, 3)
                        strides=None
                      ] icu
                      iht:f64[1,13] = squeeze[dimensions=(2,)] ihs
                      ihu:f64[13,1] = slice[
                        limit_indices=(13, 1)
                        start_indices=(0, 0)
                        strides=None
                      ] dwc
                      ihv:f64[13] = squeeze[dimensions=(1,)] ihu
                      ihw:f64[1,13] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 13)
                      ] ihv
                      ihx:f64[1,13] = mul iht ihw
                      ihy:f64[1,13] = add ihr ihx
                      ihz:f64[1,13,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 13, 1)
                      ] iev
                      iia:f64[1,13,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 13, 1)
                      ] ifw
                      iib:f64[1,13,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 13, 1)
                      ] igx
                      iic:f64[1,13,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 13, 1)
                      ] ihy
                      iid:f64[1,13,4] = concatenate[dimension=2] ihz iia iib iic
                      iie:f64[1,13,1] = slice[
                        limit_indices=(1, 13, 1)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] iid
                      iif:f64[1,13] = squeeze[dimensions=(2,)] iie
                      iig:f64[1,13,3] = slice[
                        limit_indices=(1, 13, 4)
                        start_indices=(0, 0, 1)
                        strides=None
                      ] iid
                      iih:f64[13,1] = dot_general[
                        dimension_numbers=(([2], [1]), ([1], [0]))
                        preferred_element_type=float64
                      ] iig dwd
                      iii:f64[1,13] = transpose[permutation=(1, 0)] iih
                      iij:f64[1,13,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 13, 1)
                      ] iii
                      iik:f64[1,13,3] = mul iij iig
                      iil:f64[1,13,3] = mul 2.0 iik
                      iim:f64[1,13] = mul iif iif
                      iin:f64[1,13] = dot_general[
                        dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
                        preferred_element_type=float64
                      ] iig iig
                      iio:f64[1,13] = sub iim iin
                      iip:f64[1,13,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 13, 1)
                      ] iio
                      iiq:f64[1,13,3] = broadcast_in_dim[
                        broadcast_dimensions=(1, 2)
                        shape=(1, 13, 3)
                      ] dwd
                      iir:f64[1,13,3] = mul iip iiq
                      iis:f64[1,13,3] = add iil iir
                      iit:f64[1,13] = mul 2.0 iif
                      iiu:f64[1,13,3] = pjit[name=cross jaxpr=cross2] iig dwd
                      iiv:f64[1,13,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 13, 1)
                      ] iit
                      iiw:f64[1,13,3] = mul iiv iiu
                      iix:f64[1,13,3] = add iis iiw
                      iiy:f64[1,13,3] = add idu iix
                      iiz:f64[1,13,1] = slice[
                        limit_indices=(1, 13, 1)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] iid
                      ija:f64[1,13] = squeeze[dimensions=(2,)] iiz
                      ijb:f64[13,1] = slice[
                        limit_indices=(13, 1)
                        start_indices=(0, 0)
                        strides=None
                      ] dwe
                      ijc:f64[13] = squeeze[dimensions=(1,)] ijb
                      ijd:f64[1,13] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 13)
                      ] ijc
                      ije:f64[1,13] = mul ija ijd
                      ijf:f64[1,13,1] = slice[
                        limit_indices=(1, 13, 2)
                        start_indices=(0, 0, 1)
                        strides=None
                      ] iid
                      ijg:f64[1,13] = squeeze[dimensions=(2,)] ijf
                      ijh:f64[13,1] = slice[
                        limit_indices=(13, 2)
                        start_indices=(0, 1)
                        strides=None
                      ] dwe
                      iji:f64[13] = squeeze[dimensions=(1,)] ijh
                      ijj:f64[1,13] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 13)
                      ] iji
                      ijk:f64[1,13] = mul ijg ijj
                      ijl:f64[1,13] = sub ije ijk
                      ijm:f64[1,13,1] = slice[
                        limit_indices=(1, 13, 3)
                        start_indices=(0, 0, 2)
                        strides=None
                      ] iid
                      ijn:f64[1,13] = squeeze[dimensions=(2,)] ijm
                      ijo:f64[13,1] = slice[
                        limit_indices=(13, 3)
                        start_indices=(0, 2)
                        strides=None
                      ] dwe
                      ijp:f64[13] = squeeze[dimensions=(1,)] ijo
                      ijq:f64[1,13] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 13)
                      ] ijp
                      ijr:f64[1,13] = mul ijn ijq
                      ijs:f64[1,13] = sub ijl ijr
                      ijt:f64[1,13,1] = slice[
                        limit_indices=(1, 13, 4)
                        start_indices=(0, 0, 3)
                        strides=None
                      ] iid
                      iju:f64[1,13] = squeeze[dimensions=(2,)] ijt
                      ijv:f64[13,1] = slice[
                        limit_indices=(13, 4)
                        start_indices=(0, 3)
                        strides=None
                      ] dwe
                      ijw:f64[13] = squeeze[dimensions=(1,)] ijv
                      ijx:f64[1,13] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 13)
                      ] ijw
                      ijy:f64[1,13] = mul iju ijx
                      ijz:f64[1,13] = sub ijs ijy
                      ika:f64[1,13,1] = slice[
                        limit_indices=(1, 13, 1)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] iid
                      ikb:f64[1,13] = squeeze[dimensions=(2,)] ika
                      ikc:f64[13,1] = slice[
                        limit_indices=(13, 2)
                        start_indices=(0, 1)
                        strides=None
                      ] dwe
                      ikd:f64[13] = squeeze[dimensions=(1,)] ikc
                      ike:f64[1,13] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 13)
                      ] ikd
                      ikf:f64[1,13] = mul ikb ike
                      ikg:f64[1,13,1] = slice[
                        limit_indices=(1, 13, 2)
                        start_indices=(0, 0, 1)
                        strides=None
                      ] iid
                      ikh:f64[1,13] = squeeze[dimensions=(2,)] ikg
                      iki:f64[13,1] = slice[
                        limit_indices=(13, 1)
                        start_indices=(0, 0)
                        strides=None
                      ] dwe
                      ikj:f64[13] = squeeze[dimensions=(1,)] iki
                      ikk:f64[1,13] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 13)
                      ] ikj
                      ikl:f64[1,13] = mul ikh ikk
                      ikm:f64[1,13] = add ikf ikl
                      ikn:f64[1,13,1] = slice[
                        limit_indices=(1, 13, 3)
                        start_indices=(0, 0, 2)
                        strides=None
                      ] iid
                      iko:f64[1,13] = squeeze[dimensions=(2,)] ikn
                      ikp:f64[13,1] = slice[
                        limit_indices=(13, 4)
                        start_indices=(0, 3)
                        strides=None
                      ] dwe
                      ikq:f64[13] = squeeze[dimensions=(1,)] ikp
                      ikr:f64[1,13] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 13)
                      ] ikq
                      iks:f64[1,13] = mul iko ikr
                      ikt:f64[1,13] = add ikm iks
                      iku:f64[1,13,1] = slice[
                        limit_indices=(1, 13, 4)
                        start_indices=(0, 0, 3)
                        strides=None
                      ] iid
                      ikv:f64[1,13] = squeeze[dimensions=(2,)] iku
                      ikw:f64[13,1] = slice[
                        limit_indices=(13, 3)
                        start_indices=(0, 2)
                        strides=None
                      ] dwe
                      ikx:f64[13] = squeeze[dimensions=(1,)] ikw
                      iky:f64[1,13] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 13)
                      ] ikx
                      ikz:f64[1,13] = mul ikv iky
                      ila:f64[1,13] = sub ikt ikz
                      ilb:f64[1,13,1] = slice[
                        limit_indices=(1, 13, 1)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] iid
                      ilc:f64[1,13] = squeeze[dimensions=(2,)] ilb
                      ild:f64[13,1] = slice[
                        limit_indices=(13, 3)
                        start_indices=(0, 2)
                        strides=None
                      ] dwe
                      ile:f64[13] = squeeze[dimensions=(1,)] ild
                      ilf:f64[1,13] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 13)
                      ] ile
                      ilg:f64[1,13] = mul ilc ilf
                      ilh:f64[1,13,1] = slice[
                        limit_indices=(1, 13, 2)
                        start_indices=(0, 0, 1)
                        strides=None
                      ] iid
                      ili:f64[1,13] = squeeze[dimensions=(2,)] ilh
                      ilj:f64[13,1] = slice[
                        limit_indices=(13, 4)
                        start_indices=(0, 3)
                        strides=None
                      ] dwe
                      ilk:f64[13] = squeeze[dimensions=(1,)] ilj
                      ill:f64[1,13] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 13)
                      ] ilk
                      ilm:f64[1,13] = mul ili ill
                      iln:f64[1,13] = sub ilg ilm
                      ilo:f64[1,13,1] = slice[
                        limit_indices=(1, 13, 3)
                        start_indices=(0, 0, 2)
                        strides=None
                      ] iid
                      ilp:f64[1,13] = squeeze[dimensions=(2,)] ilo
                      ilq:f64[13,1] = slice[
                        limit_indices=(13, 1)
                        start_indices=(0, 0)
                        strides=None
                      ] dwe
                      ilr:f64[13] = squeeze[dimensions=(1,)] ilq
                      ils:f64[1,13] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 13)
                      ] ilr
                      ilt:f64[1,13] = mul ilp ils
                      ilu:f64[1,13] = add iln ilt
                      ilv:f64[1,13,1] = slice[
                        limit_indices=(1, 13, 4)
                        start_indices=(0, 0, 3)
                        strides=None
                      ] iid
                      ilw:f64[1,13] = squeeze[dimensions=(2,)] ilv
                      ilx:f64[13,1] = slice[
                        limit_indices=(13, 2)
                        start_indices=(0, 1)
                        strides=None
                      ] dwe
                      ily:f64[13] = squeeze[dimensions=(1,)] ilx
                      ilz:f64[1,13] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 13)
                      ] ily
                      ima:f64[1,13] = mul ilw ilz
                      imb:f64[1,13] = add ilu ima
                      imc:f64[1,13,1] = slice[
                        limit_indices=(1, 13, 1)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] iid
                      imd:f64[1,13] = squeeze[dimensions=(2,)] imc
                      ime:f64[13,1] = slice[
                        limit_indices=(13, 4)
                        start_indices=(0, 3)
                        strides=None
                      ] dwe
                      imf:f64[13] = squeeze[dimensions=(1,)] ime
                      img:f64[1,13] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 13)
                      ] imf
                      imh:f64[1,13] = mul imd img
                      imi:f64[1,13,1] = slice[
                        limit_indices=(1, 13, 2)
                        start_indices=(0, 0, 1)
                        strides=None
                      ] iid
                      imj:f64[1,13] = squeeze[dimensions=(2,)] imi
                      imk:f64[13,1] = slice[
                        limit_indices=(13, 3)
                        start_indices=(0, 2)
                        strides=None
                      ] dwe
                      iml:f64[13] = squeeze[dimensions=(1,)] imk
                      imm:f64[1,13] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 13)
                      ] iml
                      imn:f64[1,13] = mul imj imm
                      imo:f64[1,13] = add imh imn
                      imp:f64[1,13,1] = slice[
                        limit_indices=(1, 13, 3)
                        start_indices=(0, 0, 2)
                        strides=None
                      ] iid
                      imq:f64[1,13] = squeeze[dimensions=(2,)] imp
                      imr:f64[13,1] = slice[
                        limit_indices=(13, 2)
                        start_indices=(0, 1)
                        strides=None
                      ] dwe
                      ims:f64[13] = squeeze[dimensions=(1,)] imr
                      imt:f64[1,13] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 13)
                      ] ims
                      imu:f64[1,13] = mul imq imt
                      imv:f64[1,13] = sub imo imu
                      imw:f64[1,13,1] = slice[
                        limit_indices=(1, 13, 4)
                        start_indices=(0, 0, 3)
                        strides=None
                      ] iid
                      imx:f64[1,13] = squeeze[dimensions=(2,)] imw
                      imy:f64[13,1] = slice[
                        limit_indices=(13, 1)
                        start_indices=(0, 0)
                        strides=None
                      ] dwe
                      imz:f64[13] = squeeze[dimensions=(1,)] imy
                      ina:f64[1,13] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 13)
                      ] imz
                      inb:f64[1,13] = mul imx ina
                      inc:f64[1,13] = add imv inb
                      ind:f64[1,13,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 13, 1)
                      ] ijz
                      ine:f64[1,13,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 13, 1)
                      ] ila
                      inf:f64[1,13,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 13, 1)
                      ] imb
                      ing:f64[1,13,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 13, 1)
                      ] inc
                      inh:f64[1,13,4] = concatenate[dimension=2] ind ine inf ing
                      ini:f64[6,3] = slice[
                        limit_indices=(6, 3)
                        start_indices=(0, 0)
                        strides=None
                      ] dus
                      inj:f64[6,3] = slice[
                        limit_indices=(6, 3)
                        start_indices=(0, 0)
                        strides=None
                      ] dut
                      ink:f64[12,3] = slice[
                        limit_indices=(18, 3)
                        start_indices=(6, 0)
                        strides=None
                      ] dus
                      inl:f64[12,3] = slice[
                        limit_indices=(18, 3)
                        start_indices=(6, 0)
                        strides=None
                      ] dut
                      inm:f64[12,1,3] = reshape[
                        dimensions=None
                        new_sizes=(12, 1, 3)
                      ] ink
                      inn:f64[12,1,3] = reshape[
                        dimensions=None
                        new_sizes=(12, 1, 3)
                      ] inl
                      ino:f64[12,3] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(12, 3)
                      ] 0.0
                      inp:f64[1,1,1,4] = reshape[
                        dimensions=None
                        new_sizes=(1, 1, 1, 4)
                      ] dxg
                      inq:f64[1,1,4] = squeeze[dimensions=(0,)] inp
                      inr:f64[12,1,1,4] = broadcast_in_dim[
                        broadcast_dimensions=(1, 2, 3)
                        shape=(12, 1, 1, 4)
                      ] inq
                      ins:f64[12,4] = reshape[dimensions=None new_sizes=(12, 4)] inr
                      int:f64[12,3] = pjit[name=_take jaxpr=_take11] inm 0
                      inu:f64[12,3] = pjit[name=_take jaxpr=_take11] inn 0
                      inv:f64[12,1] = slice[
                        limit_indices=(12, 1)
                        start_indices=(0, 0)
                        strides=None
                      ] ins
                      inw:f64[12] = squeeze[dimensions=(1,)] inv
                      inx:f64[12,3] = slice[
                        limit_indices=(12, 4)
                        start_indices=(0, 1)
                        strides=None
                      ] ins
                      iny:f64[12] = dot_general[
                        dimension_numbers=(([1], [1]), ([0], [0]))
                        preferred_element_type=float64
                      ] inx int
                      inz:f64[12,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(12, 1)
                      ] iny
                      ioa:f64[12,3] = mul inz inx
                      iob:f64[12,3] = mul 2.0 ioa
                      ioc:f64[12] = mul inw inw
                      iod:f64[12] = dot_general[
                        dimension_numbers=(([1], [1]), ([0], [0]))
                        preferred_element_type=float64
                      ] inx inx
                      ioe:f64[12] = sub ioc iod
                      iof:f64[12,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(12, 1)
                      ] ioe
                      iog:f64[12,3] = mul iof int
                      ioh:f64[12,3] = add iob iog
                      ioi:f64[12] = mul 2.0 inw
                      ioj:f64[12,3] = pjit[name=cross jaxpr=cross4] inx int
                      iok:f64[12,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(12, 1)
                      ] ioi
                      iol:f64[12,3] = mul iok ioj
                      iom:f64[12,3] = add ioh iol
                      ion:f64[12,1] = slice[
                        limit_indices=(12, 1)
                        start_indices=(0, 0)
                        strides=None
                      ] ins
                      ioo:f64[12] = squeeze[dimensions=(1,)] ion
                      iop:f64[12,3] = slice[
                        limit_indices=(12, 4)
                        start_indices=(0, 1)
                        strides=None
                      ] ins
                      ioq:f64[12] = dot_general[
                        dimension_numbers=(([1], [1]), ([0], [0]))
                        preferred_element_type=float64
                      ] iop inu
                      ior:f64[12,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(12, 1)
                      ] ioq
                      ios:f64[12,3] = mul ior iop
                      iot:f64[12,3] = mul 2.0 ios
                      iou:f64[12] = mul ioo ioo
                      iov:f64[12] = dot_general[
                        dimension_numbers=(([1], [1]), ([0], [0]))
                        preferred_element_type=float64
                      ] iop iop
                      iow:f64[12] = sub iou iov
                      iox:f64[12,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(12, 1)
                      ] iow
                      ioy:f64[12,3] = mul iox inu
                      ioz:f64[12,3] = add iot ioy
                      ipa:f64[12] = mul 2.0 ioo
                      ipb:f64[12,3] = pjit[name=cross jaxpr=cross4] iop inu
                      ipc:f64[12,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(12, 1)
                      ] ipa
                      ipd:f64[12,3] = mul ipc ipb
                      ipe:f64[12,3] = add ioz ipd
                      ipf:f64[12,3] = pjit[name=cross jaxpr=cross4] ino iom
                      ipg:f64[12,3] = add ipe ipf
                      iph:f64[18,3] = concatenate[dimension=0] ini iom
                      ipi:f64[18,3] = concatenate[dimension=0] inj ipg
                      ipj:f64[1,18,4] = pjit[
                        name=_take
                        jaxpr={ lambda ; ipk:f64[1,13,4] ipl:i64[18]. let
                            ipm:i64[18] = pjit[name=remainder jaxpr=remainder8] ipl
                              13
                            ipn:i64[18,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(18, 1)
                            ] ipm
                            ipo:f64[1,18,4] = gather[
                              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 2), collapsed_slice_dims=(1,), start_index_map=(1,))
                              fill_value=None
                              indices_are_sorted=False
                              mode=GatherScatterMode.PROMISE_IN_BOUNDS
                              slice_sizes=(1, 1, 4)
                              unique_indices=False
                            ] ipk ipn
                          in (ipo,) }
                      ] inh dxh
                      ipp:f64[1,18,1] = slice[
                        limit_indices=(1, 18, 1)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] ipj
                      ipq:f64[1,18] = squeeze[dimensions=(2,)] ipp
                      ipr:f64[1,18,3] = slice[
                        limit_indices=(1, 18, 4)
                        start_indices=(0, 0, 1)
                        strides=None
                      ] ipj
                      ips:f64[18,1] = dot_general[
                        dimension_numbers=(([2], [1]), ([1], [0]))
                        preferred_element_type=float64
                      ] ipr iph
                      ipt:f64[1,18] = transpose[permutation=(1, 0)] ips
                      ipu:f64[1,18,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 18, 1)
                      ] ipt
                      ipv:f64[1,18,3] = mul ipu ipr
                      ipw:f64[1,18,3] = mul 2.0 ipv
                      ipx:f64[1,18] = mul ipq ipq
                      ipy:f64[1,18] = dot_general[
                        dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
                        preferred_element_type=float64
                      ] ipr ipr
                      ipz:f64[1,18] = sub ipx ipy
                      iqa:f64[1,18,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 18, 1)
                      ] ipz
                      iqb:f64[1,18,3] = broadcast_in_dim[
                        broadcast_dimensions=(1, 2)
                        shape=(1, 18, 3)
                      ] iph
                      iqc:f64[1,18,3] = mul iqa iqb
                      iqd:f64[1,18,3] = add ipw iqc
                      iqe:f64[1,18] = mul 2.0 ipq
                      iqf:f64[1,18,3] = pjit[
                        name=cross
                        jaxpr={ lambda ; iqg:f64[1,18,3] iqh:f64[18,3]. let
                            iqi:i32[1] = broadcast_in_dim[
                              broadcast_dimensions=()
                              shape=(1,)
                            ] 0
                            iqj:f64[1,18] = gather[
                              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
                              fill_value=None
                              indices_are_sorted=True
                              mode=GatherScatterMode.PROMISE_IN_BOUNDS
                              slice_sizes=(1, 18, 1)
                              unique_indices=True
                            ] iqg iqi
                            iqk:i32[1] = broadcast_in_dim[
                              broadcast_dimensions=()
                              shape=(1,)
                            ] 1
                            iql:f64[1,18] = gather[
                              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
                              fill_value=None
                              indices_are_sorted=True
                              mode=GatherScatterMode.PROMISE_IN_BOUNDS
                              slice_sizes=(1, 18, 1)
                              unique_indices=True
                            ] iqg iqk
                            iqm:i32[1] = broadcast_in_dim[
                              broadcast_dimensions=()
                              shape=(1,)
                            ] 2
                            iqn:f64[1,18] = gather[
                              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
                              fill_value=None
                              indices_are_sorted=True
                              mode=GatherScatterMode.PROMISE_IN_BOUNDS
                              slice_sizes=(1, 18, 1)
                              unique_indices=True
                            ] iqg iqm
                            iqo:i32[1] = broadcast_in_dim[
                              broadcast_dimensions=()
                              shape=(1,)
                            ] 0
                            iqp:f64[18] = gather[
                              dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
                              fill_value=None
                              indices_are_sorted=True
                              mode=GatherScatterMode.PROMISE_IN_BOUNDS
                              slice_sizes=(18, 1)
                              unique_indices=True
                            ] iqh iqo
                            iqq:i32[1] = broadcast_in_dim[
                              broadcast_dimensions=()
                              shape=(1,)
                            ] 1
                            iqr:f64[18] = gather[
                              dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
                              fill_value=None
                              indices_are_sorted=True
                              mode=GatherScatterMode.PROMISE_IN_BOUNDS
                              slice_sizes=(18, 1)
                              unique_indices=True
                            ] iqh iqq
                            iqs:i32[1] = broadcast_in_dim[
                              broadcast_dimensions=()
                              shape=(1,)
                            ] 2
                            iqt:f64[18] = gather[
                              dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
                              fill_value=None
                              indices_are_sorted=True
                              mode=GatherScatterMode.PROMISE_IN_BOUNDS
                              slice_sizes=(18, 1)
                              unique_indices=True
                            ] iqh iqs
                            iqu:f64[1,18] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 18)
                            ] iqt
                            iqv:f64[1,18] = mul iql iqu
                            iqw:f64[1,18] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 18)
                            ] iqr
                            iqx:f64[1,18] = mul iqn iqw
                            iqy:f64[1,18] = sub iqv iqx
                            iqz:f64[1,18] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 18)
                            ] iqp
                            ira:f64[1,18] = mul iqn iqz
                            irb:f64[1,18] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 18)
                            ] iqt
                            irc:f64[1,18] = mul iqj irb
                            ird:f64[1,18] = sub ira irc
                            ire:f64[1,18] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 18)
                            ] iqr
                            irf:f64[1,18] = mul iqj ire
                            irg:f64[1,18] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 18)
                            ] iqp
                            irh:f64[1,18] = mul iql irg
                            iri:f64[1,18] = sub irf irh
                            irj:f64[1,18,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(1, 18, 1)
                            ] iqy
                            irk:f64[1,18,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(1, 18, 1)
                            ] ird
                            irl:f64[1,18,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(1, 18, 1)
                            ] iri
                            irm:f64[1,18,3] = concatenate[dimension=2] irj irk irl
                          in (irm,) }
                      ] ipr iph
                      irn:f64[1,18,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 18, 1)
                      ] iqe
                      iro:f64[1,18,3] = mul irn iqf
                      irp:f64[1,18,3] = add iqd iro
                      irq:f64[1,13,3] = sub hyb iiy
                      irr:f64[1,1,1,4] = reshape[
                        dimensions=None
                        new_sizes=(1, 1, 1, 4)
                      ] dxi
                      irs:f64[1,1,4] = squeeze[dimensions=(0,)] irr
                      irt:f64[13,1,1,4] = broadcast_in_dim[
                        broadcast_dimensions=(1, 2, 3)
                        shape=(13, 1, 1, 4)
                      ] irs
                      iru:f64[13,4] = reshape[dimensions=None new_sizes=(13, 4)] irt
                      irv:f64[1,18,3] = pjit[name=_take jaxpr=_take7] irq dxj
                      irw:f64[18,4] = pjit[name=_take jaxpr=_take12] iru dxj
                      irx:f64[4] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] dxk
                      iry:f64[1,4] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 4)
                      ] irx
                      irz:f64[18,4] = mul irw iry
                      isa:f64[18,1] = slice[
                        limit_indices=(18, 1)
                        start_indices=(0, 0)
                        strides=None
                      ] irz
                      isb:f64[18] = squeeze[dimensions=(1,)] isa
                      isc:f64[18,3] = slice[
                        limit_indices=(18, 4)
                        start_indices=(0, 1)
                        strides=None
                      ] irz
                      isd:f64[18,1] = dot_general[
                        dimension_numbers=(([1], [2]), ([0], [1]))
                        preferred_element_type=float64
                      ] isc irp
                      ise:f64[1,18] = transpose[permutation=(1, 0)] isd
                      isf:f64[1,18,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 18, 1)
                      ] ise
                      isg:f64[1,18,3] = broadcast_in_dim[
                        broadcast_dimensions=(1, 2)
                        shape=(1, 18, 3)
                      ] isc
                      ish:f64[1,18,3] = mul isf isg
                      isi:f64[1,18,3] = mul 2.0 ish
                      isj:f64[18] = mul isb isb
                      isk:f64[18] = dot_general[
                        dimension_numbers=(([1], [1]), ([0], [0]))
                        preferred_element_type=float64
                      ] isc isc
                      isl:f64[18] = sub isj isk
                      ism:f64[18,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(18, 1)
                      ] isl
                      isn:f64[1,18,1] = broadcast_in_dim[
                        broadcast_dimensions=(1, 2)
                        shape=(1, 18, 1)
                      ] ism
                      iso:f64[1,18,3] = mul isn irp
                      isp:f64[1,18,3] = add isi iso
                      isq:f64[18] = mul 2.0 isb
                      isr:f64[1,18,3] = pjit[name=cross jaxpr=cross5] isc irp
                      iss:f64[18,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(18, 1)
                      ] isq
                      ist:f64[1,18,1] = broadcast_in_dim[
                        broadcast_dimensions=(1, 2)
                        shape=(1, 18, 1)
                      ] iss
                      isu:f64[1,18,3] = mul ist isr
                      isv:f64[1,18,3] = add isp isu
                      isw:f64[1,18,3] = pjit[name=cross jaxpr=cross6] irv irp
                      isx:f64[1,18,3] = broadcast_in_dim[
                        broadcast_dimensions=(1, 2)
                        shape=(1, 18, 3)
                      ] ipi
                      isy:f64[1,18,3] = sub isx isw
                      isz:f64[18,1] = slice[
                        limit_indices=(18, 1)
                        start_indices=(0, 0)
                        strides=None
                      ] irz
                      ita:f64[18] = squeeze[dimensions=(1,)] isz
                      itb:f64[18,3] = slice[
                        limit_indices=(18, 4)
                        start_indices=(0, 1)
                        strides=None
                      ] irz
                      itc:f64[18,1] = dot_general[
                        dimension_numbers=(([1], [2]), ([0], [1]))
                        preferred_element_type=float64
                      ] itb isy
                      itd:f64[1,18] = transpose[permutation=(1, 0)] itc
                      ite:f64[1,18,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 18, 1)
                      ] itd
                      itf:f64[1,18,3] = broadcast_in_dim[
                        broadcast_dimensions=(1, 2)
                        shape=(1, 18, 3)
                      ] itb
                      itg:f64[1,18,3] = mul ite itf
                      ith:f64[1,18,3] = mul 2.0 itg
                      iti:f64[18] = mul ita ita
                      itj:f64[18] = dot_general[
                        dimension_numbers=(([1], [1]), ([0], [0]))
                        preferred_element_type=float64
                      ] itb itb
                      itk:f64[18] = sub iti itj
                      itl:f64[18,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(18, 1)
                      ] itk
                      itm:f64[1,18,1] = broadcast_in_dim[
                        broadcast_dimensions=(1, 2)
                        shape=(1, 18, 1)
                      ] itl
                      itn:f64[1,18,3] = mul itm isy
                      ito:f64[1,18,3] = add ith itn
                      itp:f64[18] = mul 2.0 ita
                      itq:f64[1,18,3] = pjit[name=cross jaxpr=cross5] itb isy
                      itr:f64[18,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(18, 1)
                      ] itp
                      its:f64[1,18,1] = broadcast_in_dim[
                        broadcast_dimensions=(1, 2)
                        shape=(1, 18, 1)
                      ] itr
                      itt:f64[1,18,3] = mul its itq
                      itu:f64[1,18,3] = add ito itt
                      itv:f64[1,18,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 18, 1)
                      ] gbx
                      itw:f64[1,18,3] = mul isv itv
                      itx:f64[1,18,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 18, 1)
                      ] gbx
                      ity:f64[1,18,3] = mul itu itx
                      itz:f64[1,6,3] = slice[
                        limit_indices=(1, 6, 3)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] itw
                      iua:f64[1,6,3] = slice[
                        limit_indices=(1, 6, 3)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] ity
                      iub:i64[6] = slice[
                        limit_indices=(6,)
                        start_indices=(0,)
                        strides=None
                      ] dxl
                      iuc:f64[1,3] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1, 3)
                      ] 0.0
                      iud:f64[1,3] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1, 3)
                      ] 0.0
                      iue:bool[6] = lt iub 0
                      iuf:i64[6] = add iub 1
                      iug:i64[6] = select_n iue iub iuf
                      iuh:i32[6] = convert_element_type[
                        new_dtype=int32
                        weak_type=False
                      ] iug
                      iui:i32[6,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(6, 1)
                      ] iuh
                      iuj:f64[1,1,3] = broadcast_in_dim[
                        broadcast_dimensions=(1, 2)
                        shape=(1, 1, 3)
                      ] iuc
                      iuk:f64[1,1,3] = scatter-add[
                        dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                        indices_are_sorted=False
                        mode=GatherScatterMode.FILL_OR_DROP
                        unique_indices=False
                        update_consts=()
                        update_jaxpr=jaxpr
                      ] iuj iui itz
                      iul:bool[6] = lt iub 0
                      ium:i64[6] = add iub 1
                      iun:i64[6] = select_n iul iub ium
                      iuo:i32[6] = convert_element_type[
                        new_dtype=int32
                        weak_type=False
                      ] iun
                      iup:i32[6,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(6, 1)
                      ] iuo
                      iuq:f64[1,1,3] = broadcast_in_dim[
                        broadcast_dimensions=(1, 2)
                        shape=(1, 1, 3)
                      ] iud
                      iur:f64[1,1,3] = scatter-add[
                        dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                        indices_are_sorted=False
                        mode=GatherScatterMode.FILL_OR_DROP
                        unique_indices=False
                        update_consts=()
                        update_jaxpr=jaxpr
                      ] iuq iup iua
                      ius:f64[1,4,3] = pjit[name=_take jaxpr=_take1] itw dxm
                      iut:f64[1,4,3] = pjit[name=_take jaxpr=_take1] ity dxn
                      iuu:i64[4] = pjit[name=_take jaxpr=_take3] dxl dxo
                      iuv:f64[1,4,3] = pjit[name=_take jaxpr=_take4] iuk dxp
                      iuw:f64[1,4,3] = pjit[name=_take jaxpr=_take4] iur dxq
                      iux:bool[4] = lt iuu 0
                      iuy:i64[4] = add iuu 4
                      iuz:i64[4] = select_n iux iuu iuy
                      iva:i32[4] = convert_element_type[
                        new_dtype=int32
                        weak_type=False
                      ] iuz
                      ivb:i32[4,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(4, 1)
                      ] iva
                      ivc:f64[1,4,3] = scatter-add[
                        dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                        indices_are_sorted=False
                        mode=GatherScatterMode.FILL_OR_DROP
                        unique_indices=False
                        update_consts=()
                        update_jaxpr=jaxpr
                      ] iuv ivb ius
                      ivd:bool[4] = lt iuu 0
                      ive:i64[4] = add iuu 4
                      ivf:i64[4] = select_n ivd iuu ive
                      ivg:i32[4] = convert_element_type[
                        new_dtype=int32
                        weak_type=False
                      ] ivf
                      ivh:i32[4,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(4, 1)
                      ] ivg
                      ivi:f64[1,4,3] = scatter-add[
                        dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                        indices_are_sorted=False
                        mode=GatherScatterMode.FILL_OR_DROP
                        unique_indices=False
                        update_consts=()
                        update_jaxpr=jaxpr
                      ] iuw ivh iut
                      ivj:f64[1,4,3] = pjit[name=_take jaxpr=_take1] itw dxr
                      ivk:f64[1,4,3] = pjit[name=_take jaxpr=_take1] ity dxs
                      ivl:i64[4] = pjit[name=_take jaxpr=_take3] dxl dxt
                      ivm:bool[4] = lt ivl 0
                      ivn:i64[4] = add ivl 4
                      ivo:i64[4] = select_n ivm ivl ivn
                      ivp:i32[4] = convert_element_type[
                        new_dtype=int32
                        weak_type=False
                      ] ivo
                      ivq:i32[4,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(4, 1)
                      ] ivp
                      ivr:f64[1,4,3] = scatter-add[
                        dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                        indices_are_sorted=False
                        mode=GatherScatterMode.FILL_OR_DROP
                        unique_indices=False
                        update_consts=()
                        update_jaxpr=jaxpr
                      ] ivc ivq ivj
                      ivs:bool[4] = lt ivl 0
                      ivt:i64[4] = add ivl 4
                      ivu:i64[4] = select_n ivs ivl ivt
                      ivv:i32[4] = convert_element_type[
                        new_dtype=int32
                        weak_type=False
                      ] ivu
                      ivw:i32[4,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(4, 1)
                      ] ivv
                      ivx:f64[1,4,3] = scatter-add[
                        dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                        indices_are_sorted=False
                        mode=GatherScatterMode.FILL_OR_DROP
                        unique_indices=False
                        update_consts=()
                        update_jaxpr=jaxpr
                      ] ivi ivw ivk
                      ivy:f64[1,4,3] = pjit[name=_take jaxpr=_take1] itw dxu
                      ivz:f64[1,4,3] = pjit[name=_take jaxpr=_take1] ity dxv
                      iwa:i64[4] = pjit[name=_take jaxpr=_take3] dxl dxw
                      iwb:bool[4] = lt iwa 0
                      iwc:i64[4] = add iwa 4
                      iwd:i64[4] = select_n iwb iwa iwc
                      iwe:i32[4] = convert_element_type[
                        new_dtype=int32
                        weak_type=False
                      ] iwd
                      iwf:i32[4,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(4, 1)
                      ] iwe
                      iwg:f64[1,4,3] = scatter-add[
                        dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                        indices_are_sorted=False
                        mode=GatherScatterMode.FILL_OR_DROP
                        unique_indices=False
                        update_consts=()
                        update_jaxpr=jaxpr
                      ] ivr iwf ivy
                      iwh:bool[4] = lt iwa 0
                      iwi:i64[4] = add iwa 4
                      iwj:i64[4] = select_n iwh iwa iwi
                      iwk:i32[4] = convert_element_type[
                        new_dtype=int32
                        weak_type=False
                      ] iwj
                      iwl:i32[4,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(4, 1)
                      ] iwk
                      iwm:f64[1,4,3] = scatter-add[
                        dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                        indices_are_sorted=False
                        mode=GatherScatterMode.FILL_OR_DROP
                        unique_indices=False
                        update_consts=()
                        update_jaxpr=jaxpr
                      ] ivx iwl ivz
                      iwn:f64[1,13,3] = concatenate[dimension=1] iuk ivc ivr iwg
                      iwo:f64[1,13,3] = concatenate[dimension=1] iur ivi ivx iwm
                      iwp:f64[1,13,3] = pjit[name=_take jaxpr=_take5] iwn dxx
                      iwq:f64[1,13,3] = pjit[name=_take jaxpr=_take5] iwo dxy
                      iwr:f64[1,3] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1, 3)
                      ] 0.0
                      iws:f64[1,3] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1, 3)
                      ] 0.0
                      iwt:f64[1,1,3] = broadcast_in_dim[
                        broadcast_dimensions=(1, 2)
                        shape=(1, 1, 3)
                      ] iwr
                      iwu:f64[1,14,3] = concatenate[dimension=1] iwp iwt
                      iwv:f64[1,1,3] = broadcast_in_dim[
                        broadcast_dimensions=(1, 2)
                        shape=(1, 1, 3)
                      ] iws
                      iww:f64[1,14,3] = concatenate[dimension=1] iwq iwv
                      iwx:f64[1,13,3] = pjit[name=_take jaxpr=_take10] iwu dxe
                      iwy:f64[1,13,3] = pjit[name=_take jaxpr=_take10] iww dxe
                      iwz:f64[1,6,3] = slice[
                        limit_indices=(1, 6, 3)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] isv
                      ixa:f64[1,6,3] = slice[
                        limit_indices=(1, 6, 3)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] itu
                      ixb:f64[1,6,3] = slice[
                        limit_indices=(1, 6, 3)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] itw
                      ixc:f64[1,6,3] = slice[
                        limit_indices=(1, 6, 3)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] ity
                      ixd:f64[1,1,6,3] = reshape[
                        dimensions=None
                        new_sizes=(1, 1, 6, 3)
                      ] ixb
                      ixe:f64[1,1,6,3] = reshape[
                        dimensions=None
                        new_sizes=(1, 1, 6, 3)
                      ] ixc
                      ixf:f64[1,1,3,3] = slice[
                        limit_indices=(1, 1, 3, 3)
                        start_indices=(0, 0, 0, 0)
                        strides=None
                      ] ixd
                      ixg:f64[1,1,3] = reduce_sum[axes=(2,)] ixf
                      ixh:f64[1,1,3,3] = slice[
                        limit_indices=(1, 1, 3, 3)
                        start_indices=(0, 0, 0, 0)
                        strides=None
                      ] ixe
                      ixi:f64[1,1,3] = reduce_sum[axes=(2,)] ixh
                      ixj:f64[1,1,6,3] = reshape[
                        dimensions=None
                        new_sizes=(1, 1, 6, 3)
                      ] iwz
                      ixk:f64[1,1,6,3] = reshape[
                        dimensions=None
                        new_sizes=(1, 1, 6, 3)
                      ] ixa
                      ixl:f64[1,1,6,3] = pjit[name=cross jaxpr=cross7] ixg ixk
                      ixm:f64[1,1,6,3] = pjit[name=cross jaxpr=cross7] ixi ixj
                      ixn:f64[1,1,6,3] = add ixl ixm
                      ixo:f64[1,1,6,3] = pjit[name=cross jaxpr=cross7] ixg ixj
                      ixp:f64[3] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(3,)
                      ] 0.0
                      ixq:i32[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] 0
                      ixr:f64[1,3,3] = broadcast_in_dim[
                        broadcast_dimensions=(2,)
                        shape=(1, 3, 3)
                      ] ixp
                      ixs:f64[1,1,3,3] = broadcast_in_dim[
                        broadcast_dimensions=(1, 2, 3)
                        shape=(1, 1, 3, 3)
                      ] ixr
                      ixt:f64[1,1,6,3] = scatter[
                        dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2, 3), inserted_window_dims=(), scatter_dims_to_operand_dims=(2,))
                        indices_are_sorted=True
                        mode=GatherScatterMode.FILL_OR_DROP
                        unique_indices=True
                        update_consts=()
                        update_jaxpr=None
                      ] ixo ixq ixs
                      ixu:f64[3] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(3,)
                      ] 0.0
                      ixv:i32[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] 0
                      ixw:f64[1,3,3] = broadcast_in_dim[
                        broadcast_dimensions=(2,)
                        shape=(1, 3, 3)
                      ] ixu
                      ixx:f64[1,1,3,3] = broadcast_in_dim[
                        broadcast_dimensions=(1, 2, 3)
                        shape=(1, 1, 3, 3)
                      ] ixw
                      ixy:f64[1,1,6,3] = scatter[
                        dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2, 3), inserted_window_dims=(), scatter_dims_to_operand_dims=(2,))
                        indices_are_sorted=True
                        mode=GatherScatterMode.FILL_OR_DROP
                        unique_indices=True
                        update_consts=()
                        update_jaxpr=None
                      ] ixn ixv ixx
                      ixz:f64[1,6,3] = reshape[
                        dimensions=None
                        new_sizes=(1, 6, 3)
                      ] ixt
                      iya:f64[1,6,3] = reshape[
                        dimensions=None
                        new_sizes=(1, 6, 3)
                      ] ixy
                      iyb:f64[1,12,3] = slice[
                        limit_indices=(1, 13, 3)
                        start_indices=(0, 1, 0)
                        strides=None
                      ] iwx
                      iyc:f64[1,12,3] = slice[
                        limit_indices=(1, 13, 3)
                        start_indices=(0, 1, 0)
                        strides=None
                      ] iwy
                      iyd:f64[1,12,3] = slice[
                        limit_indices=(1, 18, 3)
                        start_indices=(0, 6, 0)
                        strides=None
                      ] isv
                      iye:f64[1,12,3] = slice[
                        limit_indices=(1, 18, 3)
                        start_indices=(0, 6, 0)
                        strides=None
                      ] itu
                      iyf:f64[1,12,3] = pjit[name=cross jaxpr=cross8] iyb iye
                      iyg:f64[1,12,3] = pjit[name=cross jaxpr=cross8] iyc iyd
                      iyh:f64[1,12,3] = add iyf iyg
                      iyi:f64[1,12,3] = pjit[name=cross jaxpr=cross8] iyb iyd
                      iyj:f64[1,18,3] = concatenate[dimension=1] ixz iyi
                      iyk:f64[1,18,3] = concatenate[dimension=1] iya iyh
                      iyl:f64[1,4,3] = pjit[name=_take jaxpr=_take6] icl dxz
                      iym:f64[1,4,3,3] = pjit[name=_take jaxpr=_take13] icj dya
                      iyn:f64[1,4] = pjit[name=_take jaxpr=_take14] dwi dyb
                      iyo:f64[1,4,3] = pjit[name=_take jaxpr=_take6] icl dyc
                      iyp:f64[1,4,3,3] = pjit[name=_take jaxpr=_take13] icj dyd
                      iyq:f64[1,4] = pjit[name=_take jaxpr=_take14] dwi dye
                      iyr:f64[4,3] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(4, 3)
                      ] 0.0
                      iys:bool[4] = lt dyf 0
                      iyt:i64[4] = add dyf 4
                      iyu:i64[4] = select_n iys dyf iyt
                      iyv:i32[4] = convert_element_type[
                        new_dtype=int32
                        weak_type=False
                      ] iyu
                      iyw:i32[4,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(4, 1)
                      ] iyv
                      iyx:f64[1,4,3] = broadcast_in_dim[
                        broadcast_dimensions=(1, 2)
                        shape=(1, 4, 3)
                      ] iyr
                      iyy:f64[1,4,3] = scatter-add[
                        dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                        indices_are_sorted=False
                        mode=GatherScatterMode.FILL_OR_DROP
                        unique_indices=False
                        update_consts=()
                        update_jaxpr=jaxpr
                      ] iyx iyw iyl
                      iyz:f64[4,3,3] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(4, 3, 3)
                      ] 0.0
                      iza:bool[4] = lt dyf 0
                      izb:i64[4] = add dyf 4
                      izc:i64[4] = select_n iza dyf izb
                      izd:i32[4] = convert_element_type[
                        new_dtype=int32
                        weak_type=False
                      ] izc
                      ize:i32[4,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(4, 1)
                      ] izd
                      izf:f64[1,4,3,3] = broadcast_in_dim[
                        broadcast_dimensions=(1, 2, 3)
                        shape=(1, 4, 3, 3)
                      ] iyz
                      izg:f64[1,4,3,3] = scatter-add[
                        dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2, 3), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                        indices_are_sorted=False
                        mode=GatherScatterMode.FILL_OR_DROP
                        unique_indices=False
                        update_consts=()
                        update_jaxpr=jaxpr
                      ] izf ize iym
                      izh:f64[4] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(4,)
                      ] 0.0
                      izi:bool[4] = lt dyf 0
                      izj:i64[4] = add dyf 4
                      izk:i64[4] = select_n izi dyf izj
                      izl:i32[4] = convert_element_type[
                        new_dtype=int32
                        weak_type=False
                      ] izk
                      izm:i32[4,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(4, 1)
                      ] izl
                      izn:f64[1,4] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 4)
                      ] izh
                      izo:f64[1,4] = scatter-add[
                        dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0,), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                        indices_are_sorted=False
                        mode=GatherScatterMode.FILL_OR_DROP
                        unique_indices=False
                        update_consts=()
                        update_jaxpr=jaxpr
                      ] izn izm iyn
                      izp:f64[1,4,3] = add iyo iyy
                      izq:f64[1,4,3,3] = add iyp izg
                      izr:f64[1,4] = add iyq izo
                      izs:f64[1,4,3] = pjit[name=_take jaxpr=_take6] icl dyg
                      izt:f64[1,4,3,3] = pjit[name=_take jaxpr=_take13] icj dyh
                      izu:f64[1,4] = pjit[name=_take jaxpr=_take14] dwi dyi
                      izv:f64[4,3] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(4, 3)
                      ] 0.0
                      izw:bool[4] = lt dyj 0
                      izx:i64[4] = add dyj 4
                      izy:i64[4] = select_n izw dyj izx
                      izz:i32[4] = convert_element_type[
                        new_dtype=int32
                        weak_type=False
                      ] izy
                      jaa:i32[4,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(4, 1)
                      ] izz
                      jab:f64[1,4,3] = broadcast_in_dim[
                        broadcast_dimensions=(1, 2)
                        shape=(1, 4, 3)
                      ] izv
                      jac:f64[1,4,3] = scatter-add[
                        dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                        indices_are_sorted=False
                        mode=GatherScatterMode.FILL_OR_DROP
                        unique_indices=False
                        update_consts=()
                        update_jaxpr=jaxpr
                      ] jab jaa izp
                      jad:f64[4,3,3] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(4, 3, 3)
                      ] 0.0
                      jae:bool[4] = lt dyj 0
                      jaf:i64[4] = add dyj 4
                      jag:i64[4] = select_n jae dyj jaf
                      jah:i32[4] = convert_element_type[
                        new_dtype=int32
                        weak_type=False
                      ] jag
                      jai:i32[4,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(4, 1)
                      ] jah
                      jaj:f64[1,4,3,3] = broadcast_in_dim[
                        broadcast_dimensions=(1, 2, 3)
                        shape=(1, 4, 3, 3)
                      ] jad
                      jak:f64[1,4,3,3] = scatter-add[
                        dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2, 3), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                        indices_are_sorted=False
                        mode=GatherScatterMode.FILL_OR_DROP
                        unique_indices=False
                        update_consts=()
                        update_jaxpr=jaxpr
                      ] jaj jai izq
                      jal:f64[4] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(4,)
                      ] 0.0
                      jam:bool[4] = lt dyj 0
                      jan:i64[4] = add dyj 4
                      jao:i64[4] = select_n jam dyj jan
                      jap:i32[4] = convert_element_type[
                        new_dtype=int32
                        weak_type=False
                      ] jao
                      jaq:i32[4,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(4, 1)
                      ] jap
                      jar:f64[1,4] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 4)
                      ] jal
                      jas:f64[1,4] = scatter-add[
                        dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0,), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                        indices_are_sorted=False
                        mode=GatherScatterMode.FILL_OR_DROP
                        unique_indices=False
                        update_consts=()
                        update_jaxpr=jaxpr
                      ] jar jaq izr
                      jat:f64[1,4,3] = add izs jac
                      jau:f64[1,4,3,3] = add izt jak
                      jav:f64[1,4] = add izu jas
                      jaw:f64[1,1,3] = slice[
                        limit_indices=(1, 1, 3)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] icl
                      jax:f64[1,1,3,3] = slice[
                        limit_indices=(1, 1, 3, 3)
                        start_indices=(0, 0, 0, 0)
                        strides=None
                      ] icj
                      jay:f64[1,1] = slice[
                        limit_indices=(1, 1)
                        start_indices=(0, 0)
                        strides=None
                      ] dwi
                      jaz:f64[1,3] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1, 3)
                      ] 0.0
                      jba:bool[4] = lt dyk 0
                      jbb:i64[4] = add dyk 1
                      jbc:i64[4] = select_n jba dyk jbb
                      jbd:i32[4] = convert_element_type[
                        new_dtype=int32
                        weak_type=False
                      ] jbc
                      jbe:i32[4,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(4, 1)
                      ] jbd
                      jbf:f64[1,1,3] = broadcast_in_dim[
                        broadcast_dimensions=(1, 2)
                        shape=(1, 1, 3)
                      ] jaz
                      jbg:f64[1,1,3] = scatter-add[
                        dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                        indices_are_sorted=False
                        mode=GatherScatterMode.FILL_OR_DROP
                        unique_indices=False
                        update_consts=()
                        update_jaxpr=jaxpr
                      ] jbf jbe jat
                      jbh:f64[1,3,3] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1, 3, 3)
                      ] 0.0
                      jbi:bool[4] = lt dyk 0
                      jbj:i64[4] = add dyk 1
                      jbk:i64[4] = select_n jbi dyk jbj
                      jbl:i32[4] = convert_element_type[
                        new_dtype=int32
                        weak_type=False
                      ] jbk
                      jbm:i32[4,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(4, 1)
                      ] jbl
                      jbn:f64[1,1,3,3] = broadcast_in_dim[
                        broadcast_dimensions=(1, 2, 3)
                        shape=(1, 1, 3, 3)
                      ] jbh
                      jbo:f64[1,1,3,3] = scatter-add[
                        dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2, 3), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                        indices_are_sorted=False
                        mode=GatherScatterMode.FILL_OR_DROP
                        unique_indices=False
                        update_consts=()
                        update_jaxpr=jaxpr
                      ] jbn jbm jau
                      jbp:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] 0.0
                      jbq:bool[4] = lt dyk 0
                      jbr:i64[4] = add dyk 1
                      jbs:i64[4] = select_n jbq dyk jbr
                      jbt:i32[4] = convert_element_type[
                        new_dtype=int32
                        weak_type=False
                      ] jbs
                      jbu:i32[4,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(4, 1)
                      ] jbt
                      jbv:f64[1,1] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 1)
                      ] jbp
                      jbw:f64[1,1] = scatter-add[
                        dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0,), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                        indices_are_sorted=False
                        mode=GatherScatterMode.FILL_OR_DROP
                        unique_indices=False
                        update_consts=()
                        update_jaxpr=jaxpr
                      ] jbv jbu jav
                      jbx:f64[1,1,3] = add jaw jbg
                      jby:f64[1,1,3,3] = add jax jbo
                      jbz:f64[1,1] = add jay jbw
                      jca:f64[1,13,3] = concatenate[dimension=1] jbx jat izp iyl
                      jcb:f64[1,13,3,3] = concatenate[dimension=1] jby jau izq iym
                      jcc:f64[1,13] = concatenate[dimension=1] jbz jav izr iyn
                      jcd:f64[1,13,3] = pjit[name=_take jaxpr=_take5] jca dyl
                      jce:f64[1,13,3,3] = pjit[
                        name=_take
                        jaxpr={ lambda ; jcf:f64[1,13,3,3] jcg:i64[13]. let
                            jch:i64[13] = pjit[name=remainder jaxpr=remainder7] jcg
                              13
                            jci:i64[13,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(13, 1)
                            ] jch
                            jcj:f64[1,13,3,3] = gather[
                              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 2, 3), collapsed_slice_dims=(1,), start_index_map=(1,))
                              fill_value=None
                              indices_are_sorted=False
                              mode=GatherScatterMode.PROMISE_IN_BOUNDS
                              slice_sizes=(1, 1, 3, 3)
                              unique_indices=False
                            ] jcf jci
                          in (jcj,) }
                      ] jcb dym
                      jck:f64[1,13] = pjit[
                        name=_take
                        jaxpr={ lambda ; jcl:f64[1,13] jcm:i64[13]. let
                            jcn:i64[13] = pjit[name=remainder jaxpr=remainder7] jcm
                              13
                            jco:i64[13,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(13, 1)
                            ] jcn
                            jcp:f64[1,13] = gather[
                              dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
                              fill_value=None
                              indices_are_sorted=False
                              mode=GatherScatterMode.PROMISE_IN_BOUNDS
                              slice_sizes=(1, 1)
                              unique_indices=False
                            ] jcl jco
                          in (jcp,) }
                      ] jcc dyn
                      jcq:f64[1,18,3] = pjit[
                        name=_take
                        jaxpr={ lambda ; jcr:f64[1,13,3] jcs:i64[18]. let
                            jct:i64[18] = pjit[name=remainder jaxpr=remainder13] jcs
                              13
                            jcu:i64[18,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(18, 1)
                            ] jct
                            jcv:f64[1,18,3] = gather[
                              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 2), collapsed_slice_dims=(1,), start_index_map=(1,))
                              fill_value=None
                              indices_are_sorted=False
                              mode=GatherScatterMode.PROMISE_IN_BOUNDS
                              slice_sizes=(1, 1, 3)
                              unique_indices=False
                            ] jcr jcu
                          in (jcv,) }
                      ] jcd dyo
                      jcw:f64[1,18,3,3] = pjit[
                        name=_take
                        jaxpr={ lambda ; jcx:f64[1,13,3,3] jcy:i64[18]. let
                            jcz:i64[18] = pjit[name=remainder jaxpr=remainder13] jcy
                              13
                            jda:i64[18,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(18, 1)
                            ] jcz
                            jdb:f64[1,18,3,3] = gather[
                              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 2, 3), collapsed_slice_dims=(1,), start_index_map=(1,))
                              fill_value=None
                              indices_are_sorted=False
                              mode=GatherScatterMode.PROMISE_IN_BOUNDS
                              slice_sizes=(1, 1, 3, 3)
                              unique_indices=False
                            ] jcx jda
                          in (jdb,) }
                      ] jce dyo
                      jdc:f64[1,18] = pjit[
                        name=_take
                        jaxpr={ lambda ; jdd:f64[1,13] jde:i64[18]. let
                            jdf:i64[18] = pjit[name=remainder jaxpr=remainder13] jde
                              13
                            jdg:i64[18,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(18, 1)
                            ] jdf
                            jdh:f64[1,18] = gather[
                              dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
                              fill_value=None
                              indices_are_sorted=False
                              mode=GatherScatterMode.PROMISE_IN_BOUNDS
                              slice_sizes=(1, 1)
                              unique_indices=False
                            ] jdd jdg
                          in (jdh,) }
                      ] jck dyo
                      jdi:f64[1,18,3] = dot_general[
                        dimension_numbers=(([3], [2]), ([0, 1], [0, 1]))
                        preferred_element_type=float64
                      ] jcw isv
                      jdj:f64[1,18,3] = pjit[name=cross jaxpr=cross6] jcq itu
                      jdk:f64[1,18,3] = add jdi jdj
                      jdl:f64[1,18,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(1, 18, 1)
                      ] jdc
                      jdm:f64[1,18,3] = mul jdl itu
                      jdn:f64[1,18,3] = pjit[name=cross jaxpr=cross6] jcq isv
                      jdo:f64[1,18,3] = sub jdm jdn
                      jdp:f64[1,18,18] = dot_general[
                        dimension_numbers=(([2], [2]), ([0], [0]))
                        preferred_element_type=float64
                      ] itu jdo
                      jdq:f64[1,18,18] = dot_general[
                        dimension_numbers=(([2], [2]), ([0], [0]))
                        preferred_element_type=float64
                      ] isv jdk
                      jdr:f64[1,18,18] = add jdp jdq
                      jds:f64[1,18,18] = transpose[permutation=(0, 2, 1)] jdr
                      jdt:f64[18,18] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(18, 18)
                      ] 0.0
                      jdu:bool[132] = lt dyp 0
                      jdv:i64[132] = add dyp 18
                      jdw:i64[132] = select_n jdu dyp jdv
                      jdx:bool[132] = lt dyq 0
                      jdy:i64[132] = add dyq 18
                      jdz:i64[132] = select_n jdx dyq jdy
                      jea:i32[132] = convert_element_type[
                        new_dtype=int32
                        weak_type=False
                      ] jdw
                      jeb:i32[132] = convert_element_type[
                        new_dtype=int32
                        weak_type=False
                      ] jdz
                      jec:i32[132,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(132, 1)
                      ] jea
                      jed:i32[132,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(132, 1)
                      ] jeb
                      jee:i32[132,2] = concatenate[dimension=1] jec jed
                      jef:f64[132] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(132,)
                      ] 1.0
                      jeg:f64[18,18] = scatter[
                        dimension_numbers=ScatterDimensionNumbers(update_window_dims=(), inserted_window_dims=(0, 1), scatter_dims_to_operand_dims=(0, 1))
                        indices_are_sorted=False
                        mode=GatherScatterMode.FILL_OR_DROP
                        unique_indices=False
                        update_consts=()
                        update_jaxpr=None
                      ] jdt jee jef
                      jeh:f64[1,18,18] = broadcast_in_dim[
                        broadcast_dimensions=(1, 2)
                        shape=(1, 18, 18)
                      ] jeg
                      jei:f64[1,18,18] = mul jds jeh
                      jej:f64[1,18,18] = pjit[
                        name=tril
                        jaxpr={ lambda ; jek:f64[1,18,18]. let
                            jel:i32[18,18] = iota[
                              dimension=0
                              dtype=int32
                              shape=(18, 18)
                            ] 
                            jem:i32[18,18] = add jel 0
                            jen:i32[18,18] = iota[
                              dimension=1
                              dtype=int32
                              shape=(18, 18)
                            ] 
                            jeo:bool[18,18] = ge jem jen
                            jep:f64[18,18] = broadcast_in_dim[
                              broadcast_dimensions=()
                              shape=(18, 18)
                            ] 0.0
                            jeq:bool[1,18,18] = broadcast_in_dim[
                              broadcast_dimensions=(1, 2)
                              shape=(1, 18, 18)
                            ] jeo
                            jer:f64[1,18,18] = broadcast_in_dim[
                              broadcast_dimensions=(1, 2)
                              shape=(1, 18, 18)
                            ] jep
                            jes:f64[1,18,18] = select_n jeq jer jek
                          in (jes,) }
                      ] jei
                      jet:f64[1,18,18] = pjit[
                        name=tril
                        jaxpr={ lambda ; jeu:f64[1,18,18]. let
                            jev:i32[18,18] = iota[
                              dimension=0
                              dtype=int32
                              shape=(18, 18)
                            ] 
                            jew:i32[18,18] = add jev -1
                            jex:i32[18,18] = iota[
                              dimension=1
                              dtype=int32
                              shape=(18, 18)
                            ] 
                            jey:bool[18,18] = ge jew jex
                            jez:f64[18,18] = broadcast_in_dim[
                              broadcast_dimensions=()
                              shape=(18, 18)
                            ] 0.0
                            jfa:bool[1,18,18] = broadcast_in_dim[
                              broadcast_dimensions=(1, 2)
                              shape=(1, 18, 18)
                            ] jey
                            jfb:f64[1,18,18] = broadcast_in_dim[
                              broadcast_dimensions=(1, 2)
                              shape=(1, 18, 18)
                            ] jez
                            jfc:f64[1,18,18] = select_n jfa jfb jeu
                          in (jfc,) }
                      ] jei
                      jfd:f64[1,18,18] = transpose[permutation=(0, 2, 1)] jet
                      jfe:f64[1,18,18] = add jej jfd
                      jff:f64[18,18] = pjit[name=_diag jaxpr=_diag] duu
                      jfg:f64[1,18,18] = broadcast_in_dim[
                        broadcast_dimensions=(1, 2)
                        shape=(1, 18, 18)
                      ] jff
                      jfh:f64[1,18,18] = add jfe jfg
                      jfi:i64[18,18] = iota[
                        dimension=0
                        dtype=int64
                        shape=(18, 18)
                      ] 
                      jfj:i64[18,18] = iota[
                        dimension=1
                        dtype=int64
                        shape=(18, 18)
                      ] 
                      jfk:i64[18,18] = add jfi 0
                      jfl:bool[18,18] = eq jfk jfj
                      jfm:f64[18,18] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] jfl
                      jfn:f64[1,18,18] = pjit[name=_solve jaxpr=_solve] jfh jfm
                      jfo:f64[1,18] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 18)
                      ] gat
                    in (ghw, gbx, hph, hsb, hpo, hpp, hyb, icl, hxf, icj, dwi, iwp,
                      iwq, isv, itu, iyj, iyk, jfh, jfn, gas, jfo, gbv) }
                  length=4
                  linear=(False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False)
                  num_carry=22
                  num_consts=128
                  reverse=False
                  unroll=1
                ] dgb dms dfy dsw dgc dgd dge dgf dgg dgh dgi dgj dgk dgl dgm dgn
                  dgo dgp dgq dgr dgs dgt dgu dpi dgv dgw dgx dgy dgz dpg dha dhb
                  dhc dhd dhe dhf dhg dhh dhi dhj dhk dhl dhm dhn dho dhp dhq dhr
                  dhs dht dhu dhv dhw dhx dhy dhz dia dib dic did die dif dig dih
                  dii dij dpr dpm dik dil dim din dio dip diq dir dis dit diu div
                  diw dix diy diz dja djb djc djd dje djf djg djh dji djj djk djl
                  djm djn djo djp djq djr djs djt dju djv djw djx djy djz dka dkb
                  dkc dkd dke dkf dkg dkh dki dkj dkk dkl dkm dkn dko dkp dkq dkr
                  dlc dld dle dlf dlg dlh dli dlj dlk dll dlm dln dlo dlp dlq dlr
                  dls dlt dlu dlv dlw dlx
                jfp:f64[1] = add dms 1.0
                jfq:f64[1,4] = slice[
                  limit_indices=(1, 7)
                  start_indices=(0, 3)
                  strides=None
                ] dsx
                jfr:f64[1,12] = slice[
                  limit_indices=(1, 19)
                  start_indices=(0, 7)
                  strides=None
                ] dsx
                jfs:f64[1,3] = slice[
                  limit_indices=(1, 3)
                  start_indices=(0, 0)
                  strides=None
                ] dsy
                jft:f64[4] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] dks
                jfu:f64[1,4] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 4)
                ] jft
                jfv:f64[1,4] = mul jfq jfu
                jfw:f64[1,1] = slice[
                  limit_indices=(1, 1)
                  start_indices=(0, 0)
                  strides=None
                ] jfv
                jfx:f64[1] = squeeze[dimensions=(1,)] jfw
                jfy:f64[1,3] = slice[
                  limit_indices=(1, 4)
                  start_indices=(0, 1)
                  strides=None
                ] jfv
                jfz:f64[1] = dot_general[
                  dimension_numbers=(([1], [1]), ([0], [0]))
                  preferred_element_type=float64
                ] jfy jfs
                jga:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] jfz
                jgb:f64[1,3] = mul jga jfy
                jgc:f64[1,3] = mul 2.0 jgb
                jgd:f64[1] = mul jfx jfx
                jge:f64[1] = dot_general[
                  dimension_numbers=(([1], [1]), ([0], [0]))
                  preferred_element_type=float64
                ] jfy jfy
                jgf:f64[1] = sub jgd jge
                jgg:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] jgf
                jgh:f64[1,3] = mul jgg jfs
                jgi:f64[1,3] = add jgc jgh
                jgj:f64[1] = mul 2.0 jfx
                jgk:f64[1,3] = pjit[name=cross jaxpr=cross] jfy jfs
                jgl:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] jgj
                jgm:f64[1,3] = mul jgl jgk
                jgn:f64[1,3] = add jgi jgm
                jgo:f64[1,3] = slice[
                  limit_indices=(1, 6)
                  start_indices=(0, 3)
                  strides=None
                ] dsy
                jgp:f64[1,1] = slice[
                  limit_indices=(1, 1)
                  start_indices=(0, 0)
                  strides=None
                ] jfq
                jgq:f64[1] = squeeze[dimensions=(1,)] jgp
                jgr:f64[1,3] = slice[
                  limit_indices=(1, 4)
                  start_indices=(0, 1)
                  strides=None
                ] jfq
                jgs:f64[1] = dot_general[
                  dimension_numbers=(([1], [1]), ([0], [0]))
                  preferred_element_type=float64
                ] jgr jgo
                jgt:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] jgs
                jgu:f64[1,3] = mul jgt jgr
                jgv:f64[1,3] = mul 2.0 jgu
                jgw:f64[1] = mul jgq jgq
                jgx:f64[1] = dot_general[
                  dimension_numbers=(([1], [1]), ([0], [0]))
                  preferred_element_type=float64
                ] jgr jgr
                jgy:f64[1] = sub jgw jgx
                jgz:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] jgy
                jha:f64[1,3] = mul jgz jgo
                jhb:f64[1,3] = add jgv jha
                jhc:f64[1] = mul 2.0 jgq
                jhd:f64[1,3] = pjit[name=cross jaxpr=cross] jgr jgo
                jhe:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] jhc
                jhf:f64[1,3] = mul jhe jhd
                jhg:f64[1,3] = add jhb jhf
                jhh:f64[1,12] = slice[
                  limit_indices=(1, 18)
                  start_indices=(0, 6)
                  strides=None
                ] dsy
                jhi:f64[1,34] = concatenate[dimension=1] jfq jfr jgn jhg jhh
                jhj:f64[1] = mul jfp 0.01
                jhk:f64[1] = mul 6.283185307179586 jhj
                jhl:f64[1] = div jhk 0.5
                jhm:f64[1] = cos jhl
                jhn:f64[1] = sin jhl
                jho:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] jhm
                jhp:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] jhn
                jhq:f64[1,2] = concatenate[dimension=1] jho jhp
                jhr:f64[1,36] = concatenate[dimension=1] jhi jhq
                jhs:f64[36,1] = slice[
                  limit_indices=(36, 1)
                  start_indices=(0, 0)
                  strides=None
                ] dfy
                jht:f64[36] = squeeze[dimensions=(1,)] jhs
                jhu:f64[1,36] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 36)
                ] jht
                jhv:f64[1,36] = sub jhr jhu
                jhw:f64[1,36] = mul 2.0 jhv
                jhx:f64[36,1] = slice[
                  limit_indices=(36, 2)
                  start_indices=(0, 1)
                  strides=None
                ] dfy
                jhy:f64[36] = squeeze[dimensions=(1,)] jhx
                jhz:f64[36,1] = slice[
                  limit_indices=(36, 1)
                  start_indices=(0, 0)
                  strides=None
                ] dfy
                jia:f64[36] = squeeze[dimensions=(1,)] jhz
                jib:f64[36] = sub jhy jia
                jic:f64[1,36] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 36)
                ] jib
                jid:f64[1,36] = div jhw jic
                jie:f64[1,36] = sub jid 1.0
                jif:f64[1,36] = add jie 1.0
                jig:f64[36,1] = slice[
                  limit_indices=(36, 2)
                  start_indices=(0, 1)
                  strides=None
                ] dfy
                jih:f64[36] = squeeze[dimensions=(1,)] jig
                jii:f64[36,1] = slice[
                  limit_indices=(36, 1)
                  start_indices=(0, 0)
                  strides=None
                ] dfy
                jij:f64[36] = squeeze[dimensions=(1,)] jii
                jik:f64[36] = sub jih jij
                jil:f64[1,36] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 36)
                ] jik
                jim:f64[1,36] = mul jif jil
                jin:f64[1,36] = div jim 2.0
                jio:f64[36,1] = slice[
                  limit_indices=(36, 1)
                  start_indices=(0, 0)
                  strides=None
                ] dfy
                jip:f64[36] = squeeze[dimensions=(1,)] jio
                jiq:f64[1,36] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 36)
                ] jip
                jir:f64[1,36] = add jin jiq
                jis:f64[1,1] = slice[
                  limit_indices=(1, 17)
                  start_indices=(0, 16)
                  strides=None
                ] jir
                jit:f64[1] = squeeze[dimensions=(1,)] jis
                jiu:f64[1,36] = add jie 1.0
                jiv:f64[36,1] = slice[
                  limit_indices=(36, 2)
                  start_indices=(0, 1)
                  strides=None
                ] dfy
                jiw:f64[36] = squeeze[dimensions=(1,)] jiv
                jix:f64[36,1] = slice[
                  limit_indices=(36, 1)
                  start_indices=(0, 0)
                  strides=None
                ] dfy
                jiy:f64[36] = squeeze[dimensions=(1,)] jix
                jiz:f64[36] = sub jiw jiy
                jja:f64[1,36] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 36)
                ] jiz
                jjb:f64[1,36] = mul jiu jja
                jjc:f64[1,36] = div jjb 2.0
                jjd:f64[36,1] = slice[
                  limit_indices=(36, 1)
                  start_indices=(0, 0)
                  strides=None
                ] dfy
                jje:f64[36] = squeeze[dimensions=(1,)] jjd
                jjf:f64[1,36] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 36)
                ] jje
                jjg:f64[1,36] = add jjc jjf
                jjh:f64[1,36] = add dsg 1.0
                jji:f64[36,1] = slice[
                  limit_indices=(36, 2)
                  start_indices=(0, 1)
                  strides=None
                ] dfy
                jjj:f64[36] = squeeze[dimensions=(1,)] jji
                jjk:f64[36,1] = slice[
                  limit_indices=(36, 1)
                  start_indices=(0, 0)
                  strides=None
                ] dfy
                jjl:f64[36] = squeeze[dimensions=(1,)] jjk
                jjm:f64[36] = sub jjj jjl
                jjn:f64[1,36] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 36)
                ] jjm
                jjo:f64[1,36] = mul jjh jjn
                jjp:f64[1,36] = div jjo 2.0
                jjq:f64[36,1] = slice[
                  limit_indices=(36, 1)
                  start_indices=(0, 0)
                  strides=None
                ] dfy
                jjr:f64[36] = squeeze[dimensions=(1,)] jjq
                jjs:f64[1,36] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 36)
                ] jjr
                jjt:f64[1,36] = add jjp jjs
                jju:f64[9,1] = slice[
                  limit_indices=(9, 2)
                  start_indices=(0, 1)
                  strides=None
                ] dfz
                jjv:f64[9] = squeeze[dimensions=(1,)] jju
                jjw:f64[9,1] = slice[
                  limit_indices=(9, 1)
                  start_indices=(0, 0)
                  strides=None
                ] dfz
                jjx:f64[9] = squeeze[dimensions=(1,)] jjw
                jjy:f64[9] = sub jjv jjx
                jjz:f64[1,9] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 9)
                ] jjy
                jka:f64[1,9] = mul jjz dga
                jkb:f64[1,9] = div jka 2.0
                jkc:f64[9,1] = slice[
                  limit_indices=(9, 2)
                  start_indices=(0, 1)
                  strides=None
                ] dfz
                jkd:f64[9] = squeeze[dimensions=(1,)] jkc
                jke:f64[9,1] = slice[
                  limit_indices=(9, 1)
                  start_indices=(0, 0)
                  strides=None
                ] dfz
                jkf:f64[9] = squeeze[dimensions=(1,)] jke
                jkg:f64[9] = add jkd jkf
                jkh:f64[9] = div jkg 2.0
                jki:f64[1,9] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 9)
                ] jkh
                jkj:f64[1,9] = add jkb jki
                jkk:f64[1,36] = add dsg 1.0
                jkl:f64[36,1] = slice[
                  limit_indices=(36, 2)
                  start_indices=(0, 1)
                  strides=None
                ] dfy
                jkm:f64[36] = squeeze[dimensions=(1,)] jkl
                jkn:f64[36,1] = slice[
                  limit_indices=(36, 1)
                  start_indices=(0, 0)
                  strides=None
                ] dfy
                jko:f64[36] = squeeze[dimensions=(1,)] jkn
                jkp:f64[36] = sub jkm jko
                jkq:f64[1,36] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 36)
                ] jkp
                jkr:f64[1,36] = mul jkk jkq
                jks:f64[1,36] = div jkr 2.0
                jkt:f64[36,1] = slice[
                  limit_indices=(36, 1)
                  start_indices=(0, 0)
                  strides=None
                ] dfy
                jku:f64[36] = squeeze[dimensions=(1,)] jkt
                jkv:f64[1,36] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 36)
                ] jku
                jkw:f64[1,36] = add jks jkv
                jkx:f64[1,1] = slice[
                  limit_indices=(1, 9)
                  start_indices=(0, 8)
                  strides=None
                ] jkj
                jky:f64[1] = squeeze[dimensions=(1,)] jkx
                jkz:f64[] = mul dgd 1.0
                jla:f64[1,1] = slice[
                  limit_indices=(1, 35)
                  start_indices=(0, 34)
                  strides=None
                ] jkw
                jlb:f64[1] = squeeze[dimensions=(1,)] jla
                jlc:f64[1,1] = slice[
                  limit_indices=(1, 36)
                  start_indices=(0, 35)
                  strides=None
                ] jkw
                jld:f64[1] = squeeze[dimensions=(1,)] jlc
                jle:f64[1] = atan2 jld jlb
                jlf:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] dkt
                jlg:f64[] = squeeze[dimensions=(0,)] jlf
                jlh:f64[1] = div jle 6.283185307179586
                jli:f64[1] = add jlh 0.5
                jlj:f64[1] = add jli jlg
                jlk:f64[1] = pjit[name=remainder jaxpr=remainder1] jlj 1
                jll:bool[1] = lt jlk 0.5
                jlm:bool[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] False
                jln:bool[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] True
                jlo:bool[1] = select_n jll jlm jln
                jlp:f64[1] = div jlk 0.5
                jlq:f64[1] = sub jlk 0.5
                jlr:f64[1] = div jlq 0.5
                jls:f64[1] = select_n jlo jlr jlp
                jlt:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] dkt
                jlu:f64[] = squeeze[dimensions=(0,)] jlt
                jlv:f64[1] = div jle 6.283185307179586
                jlw:f64[1] = add jlv 0.5
                jlx:f64[1] = add jlw jlu
                jly:f64[1] = pjit[name=remainder jaxpr=remainder1] jlx 1
                jlz:bool[1] = lt jly 0.5
                jma:bool[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] False
                jmb:bool[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] True
                jmc:bool[1] = select_n jlz jma jmb
                jmd:f64[1] = div jly 0.5
                jme:f64[1] = sub jly 0.5
                jmf:f64[1] = div jme 0.5
                jmg:f64[1] = select_n jmc jmf jmd
                jmh:f64[1] = slice[
                  limit_indices=(3,)
                  start_indices=(2,)
                  strides=None
                ] dkt
                jmi:f64[] = squeeze[dimensions=(0,)] jmh
                jmj:f64[1] = div jle 6.283185307179586
                jmk:f64[1] = add jmj 0.5
                jml:f64[1] = add jmk jmi
                jmm:f64[1] = pjit[name=remainder jaxpr=remainder1] jml 1
                jmn:bool[1] = lt jmm 0.5
                jmo:bool[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] False
                jmp:bool[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] True
                jmq:bool[1] = select_n jmn jmo jmp
                jmr:f64[1] = div jmm 0.5
                jms:f64[1] = sub jmm 0.5
                jmt:f64[1] = div jms 0.5
                jmu:f64[1] = select_n jmq jmt jmr
                jmv:f64[1] = slice[
                  limit_indices=(4,)
                  start_indices=(3,)
                  strides=None
                ] dkt
                jmw:f64[] = squeeze[dimensions=(0,)] jmv
                jmx:f64[1] = div jle 6.283185307179586
                jmy:f64[1] = add jmx 0.5
                jmz:f64[1] = add jmy jmw
                jna:f64[1] = pjit[name=remainder jaxpr=remainder1] jmz 1
                jnb:bool[1] = lt jna 0.5
                jnc:bool[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] False
                jnd:bool[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] True
                jne:bool[1] = select_n jnb jnc jnd
                jnf:f64[1] = div jna 0.5
                jng:f64[1] = sub jna 0.5
                jnh:f64[1] = div jng 0.5
                jni:f64[1] = select_n jne jnh jnf
                jnj:f64[8] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(8,)
                ] 0.0
                jnk:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] dge
                jnl:f64[] = squeeze[dimensions=(0,)] jnk
                jnm:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] dgf
                jnn:f64[] = squeeze[dimensions=(0,)] jnm
                jno:f64[] = select_n True jnn jnl
                jnp:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] dge
                jnq:f64[] = squeeze[dimensions=(0,)] jnp
                jnr:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] dgg
                jns:f64[] = squeeze[dimensions=(0,)] jnr
                jnt:f64[] = select_n True jns jnq
                jnu:f64[] = mul 0.0 0.25
                jnv:f64[] = atan2 jnt jno
                jnw:f64[] = add jnv jnu
                jnx:f64[] = cos jnw
                jny:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] dgh
                jnz:f64[] = mul jny jnx
                joa:f64[] = sub jnz jno
                job:f64[] = atan2 jnt jno
                joc:f64[] = add job jnu
                jod:f64[] = sin joc
                joe:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] dgh
                jof:f64[] = mul joe jod
                jog:f64[] = sub jof jnt
                joh:f64[2] = slice[
                  limit_indices=(2,)
                  start_indices=(0,)
                  strides=None
                ] jnj
                joi:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] joh
                joj:f64[] = squeeze[dimensions=(0,)] joi
                jok:f64[2] = slice[
                  limit_indices=(2,)
                  start_indices=(0,)
                  strides=None
                ] jnj
                jol:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] jok
                jom:f64[] = squeeze[dimensions=(0,)] jol
                jon:f64[] = mul jkz 0.25
                joo:f64[] = add jon joa
                jop:f64[] = add joo joj
                joq:f64[] = add jog jom
                jor:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] jop
                jos:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] joq
                jot:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] 0.0
                jou:f64[3] = concatenate[dimension=0] jor jos jot
                jov:f64[3] = neg jou
                jow:f64[8] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(8,)
                ] 0.0
                jox:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] dge
                joy:f64[] = squeeze[dimensions=(0,)] jox
                joz:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] dgf
                jpa:f64[] = squeeze[dimensions=(0,)] joz
                jpb:f64[] = select_n True jpa joy
                jpc:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] dge
                jpd:f64[] = squeeze[dimensions=(0,)] jpc
                jpe:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] dgg
                jpf:f64[] = squeeze[dimensions=(0,)] jpe
                jpg:f64[] = select_n False jpf jpd
                jph:f64[] = mul 0.0 0.25
                jpi:f64[] = atan2 jpg jpb
                jpj:f64[] = add jpi jph
                jpk:f64[] = cos jpj
                jpl:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] dgh
                jpm:f64[] = mul jpl jpk
                jpn:f64[] = sub jpm jpb
                jpo:f64[] = atan2 jpg jpb
                jpp:f64[] = add jpo jph
                jpq:f64[] = sin jpp
                jpr:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] dgh
                jps:f64[] = mul jpr jpq
                jpt:f64[] = sub jps jpg
                jpu:f64[2] = slice[
                  limit_indices=(4,)
                  start_indices=(2,)
                  strides=None
                ] jow
                jpv:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] jpu
                jpw:f64[] = squeeze[dimensions=(0,)] jpv
                jpx:f64[2] = slice[
                  limit_indices=(4,)
                  start_indices=(2,)
                  strides=None
                ] jow
                jpy:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] jpx
                jpz:f64[] = squeeze[dimensions=(0,)] jpy
                jqa:f64[] = mul jkz 0.25
                jqb:f64[] = add jqa jpn
                jqc:f64[] = add jqb jpw
                jqd:f64[] = add jpt jpz
                jqe:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] jqc
                jqf:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] jqd
                jqg:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] 0.0
                jqh:f64[3] = concatenate[dimension=0] jqe jqf jqg
                jqi:f64[3] = neg jqh
                jqj:f64[8] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(8,)
                ] 0.0
                jqk:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] dge
                jql:f64[] = squeeze[dimensions=(0,)] jqk
                jqm:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] dgf
                jqn:f64[] = squeeze[dimensions=(0,)] jqm
                jqo:f64[] = select_n False jqn jql
                jqp:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] dge
                jqq:f64[] = squeeze[dimensions=(0,)] jqp
                jqr:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] dgg
                jqs:f64[] = squeeze[dimensions=(0,)] jqr
                jqt:f64[] = select_n True jqs jqq
                jqu:f64[] = mul 0.0 0.25
                jqv:f64[] = atan2 jqt jqo
                jqw:f64[] = add jqv jqu
                jqx:f64[] = cos jqw
                jqy:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] dgh
                jqz:f64[] = mul jqy jqx
                jra:f64[] = sub jqz jqo
                jrb:f64[] = atan2 jqt jqo
                jrc:f64[] = add jrb jqu
                jrd:f64[] = sin jrc
                jre:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] dgh
                jrf:f64[] = mul jre jrd
                jrg:f64[] = sub jrf jqt
                jrh:f64[2] = slice[
                  limit_indices=(6,)
                  start_indices=(4,)
                  strides=None
                ] jqj
                jri:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] jrh
                jrj:f64[] = squeeze[dimensions=(0,)] jri
                jrk:f64[2] = slice[
                  limit_indices=(6,)
                  start_indices=(4,)
                  strides=None
                ] jqj
                jrl:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] jrk
                jrm:f64[] = squeeze[dimensions=(0,)] jrl
                jrn:f64[] = mul jkz 0.25
                jro:f64[] = add jrn jra
                jrp:f64[] = add jro jrj
                jrq:f64[] = add jrg jrm
                jrr:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] jrp
                jrs:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] jrq
                jrt:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] 0.0
                jru:f64[3] = concatenate[dimension=0] jrr jrs jrt
                jrv:f64[3] = neg jru
                jrw:f64[8] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(8,)
                ] 0.0
                jrx:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] dge
                jry:f64[] = squeeze[dimensions=(0,)] jrx
                jrz:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] dgf
                jsa:f64[] = squeeze[dimensions=(0,)] jrz
                jsb:f64[] = select_n False jsa jry
                jsc:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] dge
                jsd:f64[] = squeeze[dimensions=(0,)] jsc
                jse:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] dgg
                jsf:f64[] = squeeze[dimensions=(0,)] jse
                jsg:f64[] = select_n False jsf jsd
                jsh:f64[] = mul 0.0 0.25
                jsi:f64[] = atan2 jsg jsb
                jsj:f64[] = add jsi jsh
                jsk:f64[] = cos jsj
                jsl:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] dgh
                jsm:f64[] = mul jsl jsk
                jsn:f64[] = sub jsm jsb
                jso:f64[] = atan2 jsg jsb
                jsp:f64[] = add jso jsh
                jsq:f64[] = sin jsp
                jsr:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] dgh
                jss:f64[] = mul jsr jsq
                jst:f64[] = sub jss jsg
                jsu:f64[2] = slice[
                  limit_indices=(8,)
                  start_indices=(6,)
                  strides=None
                ] jrw
                jsv:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] jsu
                jsw:f64[] = squeeze[dimensions=(0,)] jsv
                jsx:f64[2] = slice[
                  limit_indices=(8,)
                  start_indices=(6,)
                  strides=None
                ] jrw
                jsy:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] jsx
                jsz:f64[] = squeeze[dimensions=(0,)] jsy
                jta:f64[] = mul jkz 0.25
                jtb:f64[] = add jta jsn
                jtc:f64[] = add jtb jsw
                jtd:f64[] = add jst jsz
                jte:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] jtc
                jtf:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] jtd
                jtg:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] 0.0
                jth:f64[3] = concatenate[dimension=0] jte jtf jtg
                jti:f64[3] = neg jth
                jtj:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] dge
                jtk:f64[] = squeeze[dimensions=(0,)] jtj
                jtl:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] dgf
                jtm:f64[] = squeeze[dimensions=(0,)] jtl
                jtn:f64[] = select_n True jtm jtk
                jto:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] dge
                jtp:f64[] = squeeze[dimensions=(0,)] jto
                jtq:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] dgg
                jtr:f64[] = squeeze[dimensions=(0,)] jtq
                jts:f64[] = select_n True jtr jtp
                jtt:f64[] = mul 0.0 0.25
                jtu:f64[] = atan2 jts jtn
                jtv:f64[] = add jtu jtt
                jtw:f64[] = cos jtv
                jtx:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] dgh
                jty:f64[] = mul jtx jtw
                jtz:f64[] = sub jty jtn
                jua:f64[] = atan2 jts jtn
                jub:f64[] = add jua jtt
                juc:f64[] = sin jub
                jud:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] dgh
                jue:f64[] = mul jud juc
                juf:f64[] = sub jue jts
                jug:f64[2] = slice[
                  limit_indices=(2,)
                  start_indices=(0,)
                  strides=None
                ] dgi
                juh:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] jug
                jui:f64[] = squeeze[dimensions=(0,)] juh
                juj:f64[2] = slice[
                  limit_indices=(2,)
                  start_indices=(0,)
                  strides=None
                ] dgi
                juk:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] juj
                jul:f64[] = squeeze[dimensions=(0,)] juk
                jum:f64[] = mul jkz 0.25
                jun:f64[] = add jum jtz
                juo:f64[] = add jun jui
                jup:f64[] = add juf jul
                juq:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] juo
                jur:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] jup
                jus:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] 0.0
                jut:f64[3] = concatenate[dimension=0] juq jur jus
                juu:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] dge
                juv:f64[] = squeeze[dimensions=(0,)] juu
                juw:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] dgf
                jux:f64[] = squeeze[dimensions=(0,)] juw
                juy:f64[] = select_n True jux juv
                juz:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] dge
                jva:f64[] = squeeze[dimensions=(0,)] juz
                jvb:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] dgg
                jvc:f64[] = squeeze[dimensions=(0,)] jvb
                jvd:f64[] = select_n False jvc jva
                jve:f64[] = mul 0.0 0.25
                jvf:f64[] = atan2 jvd juy
                jvg:f64[] = add jvf jve
                jvh:f64[] = cos jvg
                jvi:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] dgh
                jvj:f64[] = mul jvi jvh
                jvk:f64[] = sub jvj juy
                jvl:f64[] = atan2 jvd juy
                jvm:f64[] = add jvl jve
                jvn:f64[] = sin jvm
                jvo:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] dgh
                jvp:f64[] = mul jvo jvn
                jvq:f64[] = sub jvp jvd
                jvr:f64[2] = slice[
                  limit_indices=(4,)
                  start_indices=(2,)
                  strides=None
                ] dgi
                jvs:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] jvr
                jvt:f64[] = squeeze[dimensions=(0,)] jvs
                jvu:f64[2] = slice[
                  limit_indices=(4,)
                  start_indices=(2,)
                  strides=None
                ] dgi
                jvv:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] jvu
                jvw:f64[] = squeeze[dimensions=(0,)] jvv
                jvx:f64[] = mul jkz 0.25
                jvy:f64[] = add jvx jvk
                jvz:f64[] = add jvy jvt
                jwa:f64[] = add jvq jvw
                jwb:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] jvz
                jwc:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] jwa
                jwd:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] 0.0
                jwe:f64[3] = concatenate[dimension=0] jwb jwc jwd
                jwf:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] dge
                jwg:f64[] = squeeze[dimensions=(0,)] jwf
                jwh:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] dgf
                jwi:f64[] = squeeze[dimensions=(0,)] jwh
                jwj:f64[] = select_n False jwi jwg
                jwk:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] dge
                jwl:f64[] = squeeze[dimensions=(0,)] jwk
                jwm:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] dgg
                jwn:f64[] = squeeze[dimensions=(0,)] jwm
                jwo:f64[] = select_n True jwn jwl
                jwp:f64[] = mul 0.0 0.25
                jwq:f64[] = atan2 jwo jwj
                jwr:f64[] = add jwq jwp
                jws:f64[] = cos jwr
                jwt:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] dgh
                jwu:f64[] = mul jwt jws
                jwv:f64[] = sub jwu jwj
                jww:f64[] = atan2 jwo jwj
                jwx:f64[] = add jww jwp
                jwy:f64[] = sin jwx
                jwz:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] dgh
                jxa:f64[] = mul jwz jwy
                jxb:f64[] = sub jxa jwo
                jxc:f64[2] = slice[
                  limit_indices=(6,)
                  start_indices=(4,)
                  strides=None
                ] dgi
                jxd:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] jxc
                jxe:f64[] = squeeze[dimensions=(0,)] jxd
                jxf:f64[2] = slice[
                  limit_indices=(6,)
                  start_indices=(4,)
                  strides=None
                ] dgi
                jxg:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] jxf
                jxh:f64[] = squeeze[dimensions=(0,)] jxg
                jxi:f64[] = mul jkz 0.25
                jxj:f64[] = add jxi jwv
                jxk:f64[] = add jxj jxe
                jxl:f64[] = add jxb jxh
                jxm:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] jxk
                jxn:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] jxl
                jxo:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] 0.0
                jxp:f64[3] = concatenate[dimension=0] jxm jxn jxo
                jxq:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] dge
                jxr:f64[] = squeeze[dimensions=(0,)] jxq
                jxs:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] dgf
                jxt:f64[] = squeeze[dimensions=(0,)] jxs
                jxu:f64[] = select_n False jxt jxr
                jxv:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] dge
                jxw:f64[] = squeeze[dimensions=(0,)] jxv
                jxx:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] dgg
                jxy:f64[] = squeeze[dimensions=(0,)] jxx
                jxz:f64[] = select_n False jxy jxw
                jya:f64[] = mul 0.0 0.25
                jyb:f64[] = atan2 jxz jxu
                jyc:f64[] = add jyb jya
                jyd:f64[] = cos jyc
                jye:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] dgh
                jyf:f64[] = mul jye jyd
                jyg:f64[] = sub jyf jxu
                jyh:f64[] = atan2 jxz jxu
                jyi:f64[] = add jyh jya
                jyj:f64[] = sin jyi
                jyk:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] dgh
                jyl:f64[] = mul jyk jyj
                jym:f64[] = sub jyl jxz
                jyn:f64[2] = slice[
                  limit_indices=(8,)
                  start_indices=(6,)
                  strides=None
                ] dgi
                jyo:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] jyn
                jyp:f64[] = squeeze[dimensions=(0,)] jyo
                jyq:f64[2] = slice[
                  limit_indices=(8,)
                  start_indices=(6,)
                  strides=None
                ] dgi
                jyr:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] jyq
                jys:f64[] = squeeze[dimensions=(0,)] jyr
                jyt:f64[] = mul jkz 0.25
                jyu:f64[] = add jyt jyg
                jyv:f64[] = add jyu jyp
                jyw:f64[] = add jym jys
                jyx:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] jyv
                jyy:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] jyw
                jyz:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] 0.0
                jza:f64[3] = concatenate[dimension=0] jyx jyy jyz
                jzb:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] jov
                jzc:f64[] = squeeze[dimensions=(0,)] jzb
                jzd:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] jut
                jze:f64[] = squeeze[dimensions=(0,)] jzd
                jzf:f64[] = sub jze jzc
                jzg:f64[] = div jzf 6.283185307179586
                jzh:f64[1] = mul 6.283185307179586 jls
                jzi:f64[1] = mul 6.283185307179586 jls
                jzj:f64[1] = sin jzi
                jzk:f64[1] = sub jzh jzj
                jzl:f64[1] = mul jzg jzk
                jzm:f64[1] = add jzl jzc
                jzn:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] jov
                jzo:f64[] = squeeze[dimensions=(0,)] jzn
                jzp:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] jut
                jzq:f64[] = squeeze[dimensions=(0,)] jzp
                jzr:f64[] = sub jzq jzo
                jzs:f64[] = div jzr 6.283185307179586
                jzt:f64[1] = mul 6.283185307179586 jls
                jzu:f64[1] = mul 6.283185307179586 jls
                jzv:f64[1] = sin jzu
                jzw:f64[1] = sub jzt jzv
                jzx:f64[1] = mul jzs jzw
                jzy:f64[1] = add jzx jzo
                jzz:f64[1] = mul 6.283185307179586 jls
                kaa:f64[1] = cos jzz
                kab:f64[1] = sub 1.0 kaa
                kac:f64[1] = mul 0.045 kab
                kad:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] jzm
                kae:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] jzy
                kaf:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] kac
                kag:f64[1,3] = concatenate[dimension=1] kad kae kaf
                kah:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] jqi
                kai:f64[] = squeeze[dimensions=(0,)] kah
                kaj:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] jwe
                kak:f64[] = squeeze[dimensions=(0,)] kaj
                kal:f64[] = sub kak kai
                kam:f64[] = div kal 6.283185307179586
                kan:f64[1] = mul 6.283185307179586 jmg
                kao:f64[1] = mul 6.283185307179586 jmg
                kap:f64[1] = sin kao
                kaq:f64[1] = sub kan kap
                kar:f64[1] = mul kam kaq
                kas:f64[1] = add kar kai
                kat:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] jqi
                kau:f64[] = squeeze[dimensions=(0,)] kat
                kav:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] jwe
                kaw:f64[] = squeeze[dimensions=(0,)] kav
                kax:f64[] = sub kaw kau
                kay:f64[] = div kax 6.283185307179586
                kaz:f64[1] = mul 6.283185307179586 jmg
                kba:f64[1] = mul 6.283185307179586 jmg
                kbb:f64[1] = sin kba
                kbc:f64[1] = sub kaz kbb
                kbd:f64[1] = mul kay kbc
                kbe:f64[1] = add kbd kau
                kbf:f64[1] = mul 6.283185307179586 jmg
                kbg:f64[1] = cos kbf
                kbh:f64[1] = sub 1.0 kbg
                kbi:f64[1] = mul 0.045 kbh
                kbj:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] kas
                kbk:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] kbe
                kbl:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] kbi
                kbm:f64[1,3] = concatenate[dimension=1] kbj kbk kbl
                kbn:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] jrv
                kbo:f64[] = squeeze[dimensions=(0,)] kbn
                kbp:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] jxp
                kbq:f64[] = squeeze[dimensions=(0,)] kbp
                kbr:f64[] = sub kbq kbo
                kbs:f64[] = div kbr 6.283185307179586
                kbt:f64[1] = mul 6.283185307179586 jmu
                kbu:f64[1] = mul 6.283185307179586 jmu
                kbv:f64[1] = sin kbu
                kbw:f64[1] = sub kbt kbv
                kbx:f64[1] = mul kbs kbw
                kby:f64[1] = add kbx kbo
                kbz:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] jrv
                kca:f64[] = squeeze[dimensions=(0,)] kbz
                kcb:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] jxp
                kcc:f64[] = squeeze[dimensions=(0,)] kcb
                kcd:f64[] = sub kcc kca
                kce:f64[] = div kcd 6.283185307179586
                kcf:f64[1] = mul 6.283185307179586 jmu
                kcg:f64[1] = mul 6.283185307179586 jmu
                kch:f64[1] = sin kcg
                kci:f64[1] = sub kcf kch
                kcj:f64[1] = mul kce kci
                kck:f64[1] = add kcj kca
                kcl:f64[1] = mul 6.283185307179586 jmu
                kcm:f64[1] = cos kcl
                kcn:f64[1] = sub 1.0 kcm
                kco:f64[1] = mul 0.045 kcn
                kcp:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] kby
                kcq:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] kck
                kcr:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] kco
                kcs:f64[1,3] = concatenate[dimension=1] kcp kcq kcr
                kct:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] jti
                kcu:f64[] = squeeze[dimensions=(0,)] kct
                kcv:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] jza
                kcw:f64[] = squeeze[dimensions=(0,)] kcv
                kcx:f64[] = sub kcw kcu
                kcy:f64[] = div kcx 6.283185307179586
                kcz:f64[1] = mul 6.283185307179586 jni
                kda:f64[1] = mul 6.283185307179586 jni
                kdb:f64[1] = sin kda
                kdc:f64[1] = sub kcz kdb
                kdd:f64[1] = mul kcy kdc
                kde:f64[1] = add kdd kcu
                kdf:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] jti
                kdg:f64[] = squeeze[dimensions=(0,)] kdf
                kdh:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] jza
                kdi:f64[] = squeeze[dimensions=(0,)] kdh
                kdj:f64[] = sub kdi kdg
                kdk:f64[] = div kdj 6.283185307179586
                kdl:f64[1] = mul 6.283185307179586 jni
                kdm:f64[1] = mul 6.283185307179586 jni
                kdn:f64[1] = sin kdm
                kdo:f64[1] = sub kdl kdn
                kdp:f64[1] = mul kdk kdo
                kdq:f64[1] = add kdp kdg
                kdr:f64[1] = mul 6.283185307179586 jni
                kds:f64[1] = cos kdr
                kdt:f64[1] = sub 1.0 kds
                kdu:f64[1] = mul 0.045 kdt
                kdv:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] kde
                kdw:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] kdq
                kdx:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] kdu
                kdy:f64[1,3] = concatenate[dimension=1] kdv kdw kdx
                kdz:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] jut
                kea:f64[] = squeeze[dimensions=(0,)] kdz
                keb:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] jov
                kec:f64[] = squeeze[dimensions=(0,)] keb
                ked:f64[] = sub kec kea
                kee:f64[] = div ked 6.283185307179586
                kef:f64[1] = mul 6.283185307179586 jls
                keg:f64[1] = mul 6.283185307179586 jls
                keh:f64[1] = sin keg
                kei:f64[1] = sub kef keh
                kej:f64[1] = mul kee kei
                kek:f64[1] = add kej kea
                kel:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] jut
                kem:f64[] = squeeze[dimensions=(0,)] kel
                ken:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] jov
                keo:f64[] = squeeze[dimensions=(0,)] ken
                kep:f64[] = sub keo kem
                keq:f64[] = div kep 6.283185307179586
                ker:f64[1] = mul 6.283185307179586 jls
                kes:f64[1] = mul 6.283185307179586 jls
                ket:f64[1] = sin kes
                keu:f64[1] = sub ker ket
                kev:f64[1] = mul keq keu
                kew:f64[1] = add kev kem
                kex:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] kek
                key:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] kew
                kez:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] 0.0
                kfa:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 1)
                ] kez
                kfb:f64[1,3] = concatenate[dimension=1] kex key kfa
                kfc:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] jwe
                kfd:f64[] = squeeze[dimensions=(0,)] kfc
                kfe:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] jqi
                kff:f64[] = squeeze[dimensions=(0,)] kfe
                kfg:f64[] = sub kff kfd
                kfh:f64[] = div kfg 6.283185307179586
                kfi:f64[1] = mul 6.283185307179586 jmg
                kfj:f64[1] = mul 6.283185307179586 jmg
                kfk:f64[1] = sin kfj
                kfl:f64[1] = sub kfi kfk
                kfm:f64[1] = mul kfh kfl
                kfn:f64[1] = add kfm kfd
                kfo:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] jwe
                kfp:f64[] = squeeze[dimensions=(0,)] kfo
                kfq:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] jqi
                kfr:f64[] = squeeze[dimensions=(0,)] kfq
                kfs:f64[] = sub kfr kfp
                kft:f64[] = div kfs 6.283185307179586
                kfu:f64[1] = mul 6.283185307179586 jmg
                kfv:f64[1] = mul 6.283185307179586 jmg
                kfw:f64[1] = sin kfv
                kfx:f64[1] = sub kfu kfw
                kfy:f64[1] = mul kft kfx
                kfz:f64[1] = add kfy kfp
                kga:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] kfn
                kgb:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] kfz
                kgc:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] 0.0
                kgd:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 1)
                ] kgc
                kge:f64[1,3] = concatenate[dimension=1] kga kgb kgd
                kgf:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] jxp
                kgg:f64[] = squeeze[dimensions=(0,)] kgf
                kgh:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] jrv
                kgi:f64[] = squeeze[dimensions=(0,)] kgh
                kgj:f64[] = sub kgi kgg
                kgk:f64[] = div kgj 6.283185307179586
                kgl:f64[1] = mul 6.283185307179586 jmu
                kgm:f64[1] = mul 6.283185307179586 jmu
                kgn:f64[1] = sin kgm
                kgo:f64[1] = sub kgl kgn
                kgp:f64[1] = mul kgk kgo
                kgq:f64[1] = add kgp kgg
                kgr:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] jxp
                kgs:f64[] = squeeze[dimensions=(0,)] kgr
                kgt:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] jrv
                kgu:f64[] = squeeze[dimensions=(0,)] kgt
                kgv:f64[] = sub kgu kgs
                kgw:f64[] = div kgv 6.283185307179586
                kgx:f64[1] = mul 6.283185307179586 jmu
                kgy:f64[1] = mul 6.283185307179586 jmu
                kgz:f64[1] = sin kgy
                kha:f64[1] = sub kgx kgz
                khb:f64[1] = mul kgw kha
                khc:f64[1] = add khb kgs
                khd:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] kgq
                khe:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] khc
                khf:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] 0.0
                khg:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 1)
                ] khf
                khh:f64[1,3] = concatenate[dimension=1] khd khe khg
                khi:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] jza
                khj:f64[] = squeeze[dimensions=(0,)] khi
                khk:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] jti
                khl:f64[] = squeeze[dimensions=(0,)] khk
                khm:f64[] = sub khl khj
                khn:f64[] = div khm 6.283185307179586
                kho:f64[1] = mul 6.283185307179586 jni
                khp:f64[1] = mul 6.283185307179586 jni
                khq:f64[1] = sin khp
                khr:f64[1] = sub kho khq
                khs:f64[1] = mul khn khr
                kht:f64[1] = add khs khj
                khu:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] jza
                khv:f64[] = squeeze[dimensions=(0,)] khu
                khw:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] jti
                khx:f64[] = squeeze[dimensions=(0,)] khw
                khy:f64[] = sub khx khv
                khz:f64[] = div khy 6.283185307179586
                kia:f64[1] = mul 6.283185307179586 jni
                kib:f64[1] = mul 6.283185307179586 jni
                kic:f64[1] = sin kib
                kid:f64[1] = sub kia kic
                kie:f64[1] = mul khz kid
                kif:f64[1] = add kie khv
                kig:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] kht
                kih:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] kif
                kii:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] 0.0
                kij:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 1)
                ] kii
                kik:f64[1,3] = concatenate[dimension=1] kig kih kij
                kil:bool[1,3] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 3)
                ] jlo
                kim:f64[1,3] = select_n kil kag kfb
                kin:f64[1,3] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 3)
                ] dge
                kio:f64[1,3] = add kin kim
                kip:bool[1,3] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 3)
                ] jmc
                kiq:f64[1,3] = select_n kip kbm kge
                kir:f64[1,3] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 3)
                ] dgg
                kis:f64[1,3] = add kir kiq
                kit:bool[1,3] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 3)
                ] jmq
                kiu:f64[1,3] = select_n kit kcs khh
                kiv:f64[1,3] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 3)
                ] dgf
                kiw:f64[1,3] = add kiv kiu
                kix:bool[1,3] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 3)
                ] jne
                kiy:f64[1,3] = select_n kix kdy kik
                kiz:f64[1,3] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 3)
                ] dgj
                kja:f64[1,3] = add kiz kiy
                kjb:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] 0.0
                kjc:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] 0.0
                kjd:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] jky
                kje:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 1)
                ] kjb
                kjf:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 1)
                ] kjc
                kjg:f64[1,3] = concatenate[dimension=1] kje kjf kjd
                kjh:f64[1,1,3] = reshape[dimensions=None new_sizes=(1, 1, 3)] kjg
                kji:f64[1,3] = squeeze[dimensions=(1,)] kjh
                kjj:f64[1,4,3] = broadcast_in_dim[
                  broadcast_dimensions=(0, 2)
                  shape=(1, 4, 3)
                ] kji
                kjk:f64[1,12] = reshape[dimensions=None new_sizes=(1, 12)] kjj
                kjl:f64[1,12] = concatenate[dimension=1] kio kis kiw kja
                kjm:f64[1,12] = sub kjl kjk
                kjn:f64[1,8] = slice[
                  limit_indices=(1, 8)
                  start_indices=(0, 0)
                  strides=None
                ] jkj
                kjo:f64[1,1] = slice[
                  limit_indices=(1, 1)
                  start_indices=(0, 0)
                  strides=None
                ] kjn
                kjp:f64[1] = squeeze[dimensions=(1,)] kjo
                kjq:f64[1,1] = slice[
                  limit_indices=(1, 5)
                  start_indices=(0, 4)
                  strides=None
                ] kjn
                kjr:f64[1] = squeeze[dimensions=(1,)] kjq
                kjs:f64[1,1] = slice[
                  limit_indices=(1, 2)
                  start_indices=(0, 1)
                  strides=None
                ] kjn
                kjt:f64[1] = squeeze[dimensions=(1,)] kjs
                kju:f64[1,1] = slice[
                  limit_indices=(1, 6)
                  start_indices=(0, 5)
                  strides=None
                ] kjn
                kjv:f64[1] = squeeze[dimensions=(1,)] kju
                kjw:f64[1,1] = slice[
                  limit_indices=(1, 3)
                  start_indices=(0, 2)
                  strides=None
                ] kjn
                kjx:f64[1] = squeeze[dimensions=(1,)] kjw
                kjy:f64[1,1] = slice[
                  limit_indices=(1, 7)
                  start_indices=(0, 6)
                  strides=None
                ] kjn
                kjz:f64[1] = squeeze[dimensions=(1,)] kjy
                kka:f64[1,1] = slice[
                  limit_indices=(1, 4)
                  start_indices=(0, 3)
                  strides=None
                ] kjn
                kkb:f64[1] = squeeze[dimensions=(1,)] kka
                kkc:f64[1,1] = slice[
                  limit_indices=(1, 8)
                  start_indices=(0, 7)
                  strides=None
                ] kjn
                kkd:f64[1] = squeeze[dimensions=(1,)] kkc
                kke:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] kjp
                kkf:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] kjr
                kkg:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] 0.0
                kkh:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] kjt
                kki:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] kjv
                kkj:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] 0.0
                kkk:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] kjx
                kkl:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] kjz
                kkm:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] 0.0
                kkn:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] kkb
                kko:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] kkd
                kkp:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] 0.0
                kkq:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 1)
                ] kkg
                kkr:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 1)
                ] kkj
                kks:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 1)
                ] kkm
                kkt:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 1)
                ] kkp
                kku:f64[1,12] = concatenate[dimension=1] kke kkf kkq kkh kki kkr
                  kkk kkl kks kkn kko kkt
                kkv:f64[1,12] = add kjm kku
                kkw:f64[1,3] = slice[
                  limit_indices=(1, 3)
                  start_indices=(0, 0)
                  strides=None
                ] kkv
                kkx:f64[] = select_n False 0.1881 -0.1881
                kky:f64[] = select_n True 0.04675 -0.04675
                kkz:f64[1,1] = slice[
                  limit_indices=(1, 1)
                  start_indices=(0, 0)
                  strides=None
                ] kkw
                kla:f64[1] = squeeze[dimensions=(1,)] kkz
                klb:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] kkx
                klc:f64[1] = sub kla klb
                kld:f64[1,1] = slice[
                  limit_indices=(1, 2)
                  start_indices=(0, 1)
                  strides=None
                ] kkw
                kle:f64[1] = squeeze[dimensions=(1,)] kld
                klf:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] kky
                klg:f64[1] = sub kle klf
                klh:f64[1,1] = slice[
                  limit_indices=(1, 3)
                  start_indices=(0, 2)
                  strides=None
                ] kkw
                kli:f64[1] = squeeze[dimensions=(1,)] klh
                klj:f64[] = select_n True 0.08 -0.08
                klk:f64[1] = integer_pow[y=2] klc
                kll:f64[1] = integer_pow[y=2] klg
                klm:f64[1] = add klk kll
                kln:f64[1] = integer_pow[y=2] kli
                klo:f64[1] = add klm kln
                klp:f64[1] = sqrt klo
                klq:f64[1] = integer_pow[y=2] klp
                klr:f64[1] = sub klq 0.0064
                kls:f64[1] = sqrt klr
                klt:f64[1] = integer_pow[y=2] klg
                klu:f64[1] = integer_pow[y=2] kli
                klv:f64[1] = add klt klu
                klw:f64[] = integer_pow[y=2] klj
                klx:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] klw
                kly:f64[1] = sub klv klx
                klz:f64[1] = sqrt kly
                kma:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] klj
                kmb:f64[1] = mul kli kma
                kmc:f64[1] = mul klg klz
                kmd:f64[1] = add kmb kmc
                kme:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] klj
                kmf:f64[1] = mul klg kme
                kmg:f64[1] = mul kli klz
                kmh:f64[1] = sub kmf kmg
                kmi:f64[1] = atan2 kmd kmh
                kmj:f64[1] = integer_pow[y=2] kls
                kmk:f64[1] = sub 0.090738 kmj
                kml:f64[] = abs 0.045369
                kmm:f64[] = mul 2.0 kml
                kmn:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] kmm
                kmo:f64[1] = div kmk kmn
                kmp:f64[1] = slice[
                  limit_indices=(3,)
                  start_indices=(2,)
                  strides=None
                ] dgk
                kmq:f64[] = squeeze[dimensions=(0,)] kmp
                kmr:f64[1] = slice[
                  limit_indices=(3,)
                  start_indices=(2,)
                  strides=None
                ] dgl
                kms:f64[] = squeeze[dimensions=(0,)] kmr
                kmt:f64[] = add 3.141592653589793 kmq
                kmu:f64[] = cos kmt
                kmv:f64[] = add 3.141592653589793 kms
                kmw:f64[] = cos kmv
                kmx:f64[1] = pjit[name=clip jaxpr=clip] kmo kmu kmw
                kmy:f64[1] = acos kmx
                kmz:f64[1] = sub 3.141592653589793 kmy
                kna:f64[1] = neg kmz
                knb:f64[1] = sin kmi
                knc:f64[1] = mul klg knb
                knd:f64[1] = cos kmi
                kne:f64[1] = mul kli knd
                knf:f64[1] = sub knc kne
                kng:f64[1] = sin kna
                knh:f64[1] = mul -0.213 kng
                kni:f64[1] = cos kna
                knj:f64[1] = mul -0.213 kni
                knk:f64[1] = add -0.213 knj
                knl:f64[1] = mul knh knf
                knm:f64[1] = mul knk klc
                knn:f64[1] = add knl knm
                kno:f64[1] = mul knh klc
                knp:f64[1] = mul knk knf
                knq:f64[1] = sub kno knp
                knr:f64[1] = atan2 knn knq
                kns:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] kmi
                knt:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] knr
                knu:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] kna
                knv:f64[1,3] = concatenate[dimension=1] kns knt knu
                knw:f64[1,3] = slice[
                  limit_indices=(1, 6)
                  start_indices=(0, 3)
                  strides=None
                ] kkv
                knx:f64[] = select_n False 0.1881 -0.1881
                kny:f64[] = select_n False 0.04675 -0.04675
                knz:f64[1,1] = slice[
                  limit_indices=(1, 1)
                  start_indices=(0, 0)
                  strides=None
                ] knw
                koa:f64[1] = squeeze[dimensions=(1,)] knz
                kob:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] knx
                koc:f64[1] = sub koa kob
                kod:f64[1,1] = slice[
                  limit_indices=(1, 2)
                  start_indices=(0, 1)
                  strides=None
                ] knw
                koe:f64[1] = squeeze[dimensions=(1,)] kod
                kof:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] kny
                kog:f64[1] = sub koe kof
                koh:f64[1,1] = slice[
                  limit_indices=(1, 3)
                  start_indices=(0, 2)
                  strides=None
                ] knw
                koi:f64[1] = squeeze[dimensions=(1,)] koh
                koj:f64[] = select_n False 0.08 -0.08
                kok:f64[1] = integer_pow[y=2] koc
                kol:f64[1] = integer_pow[y=2] kog
                kom:f64[1] = add kok kol
                kon:f64[1] = integer_pow[y=2] koi
                koo:f64[1] = add kom kon
                kop:f64[1] = sqrt koo
                koq:f64[1] = integer_pow[y=2] kop
                kor:f64[1] = sub koq 0.0064
                kos:f64[1] = sqrt kor
                kot:f64[1] = integer_pow[y=2] kog
                kou:f64[1] = integer_pow[y=2] koi
                kov:f64[1] = add kot kou
                kow:f64[] = integer_pow[y=2] koj
                kox:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] kow
                koy:f64[1] = sub kov kox
                koz:f64[1] = sqrt koy
                kpa:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] koj
                kpb:f64[1] = mul koi kpa
                kpc:f64[1] = mul kog koz
                kpd:f64[1] = add kpb kpc
                kpe:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] koj
                kpf:f64[1] = mul kog kpe
                kpg:f64[1] = mul koi koz
                kph:f64[1] = sub kpf kpg
                kpi:f64[1] = atan2 kpd kph
                kpj:f64[1] = integer_pow[y=2] kos
                kpk:f64[1] = sub 0.090738 kpj
                kpl:f64[] = abs 0.045369
                kpm:f64[] = mul 2.0 kpl
                kpn:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] kpm
                kpo:f64[1] = div kpk kpn
                kpp:f64[1] = slice[
                  limit_indices=(3,)
                  start_indices=(2,)
                  strides=None
                ] dgk
                kpq:f64[] = squeeze[dimensions=(0,)] kpp
                kpr:f64[1] = slice[
                  limit_indices=(3,)
                  start_indices=(2,)
                  strides=None
                ] dgl
                kps:f64[] = squeeze[dimensions=(0,)] kpr
                kpt:f64[] = add 3.141592653589793 kpq
                kpu:f64[] = cos kpt
                kpv:f64[] = add 3.141592653589793 kps
                kpw:f64[] = cos kpv
                kpx:f64[1] = pjit[name=clip jaxpr=clip] kpo kpu kpw
                kpy:f64[1] = acos kpx
                kpz:f64[1] = sub 3.141592653589793 kpy
                kqa:f64[1] = neg kpz
                kqb:f64[1] = sin kpi
                kqc:f64[1] = mul kog kqb
                kqd:f64[1] = cos kpi
                kqe:f64[1] = mul koi kqd
                kqf:f64[1] = sub kqc kqe
                kqg:f64[1] = sin kqa
                kqh:f64[1] = mul -0.213 kqg
                kqi:f64[1] = cos kqa
                kqj:f64[1] = mul -0.213 kqi
                kqk:f64[1] = add -0.213 kqj
                kql:f64[1] = mul kqh kqf
                kqm:f64[1] = mul kqk koc
                kqn:f64[1] = add kql kqm
                kqo:f64[1] = mul kqh koc
                kqp:f64[1] = mul kqk kqf
                kqq:f64[1] = sub kqo kqp
                kqr:f64[1] = atan2 kqn kqq
                kqs:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] kpi
                kqt:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] kqr
                kqu:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] kqa
                kqv:f64[1,3] = concatenate[dimension=1] kqs kqt kqu
                kqw:f64[1,3] = slice[
                  limit_indices=(1, 9)
                  start_indices=(0, 6)
                  strides=None
                ] kkv
                kqx:f64[] = select_n True 0.1881 -0.1881
                kqy:f64[] = select_n True 0.04675 -0.04675
                kqz:f64[1,1] = slice[
                  limit_indices=(1, 1)
                  start_indices=(0, 0)
                  strides=None
                ] kqw
                kra:f64[1] = squeeze[dimensions=(1,)] kqz
                krb:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] kqx
                krc:f64[1] = sub kra krb
                krd:f64[1,1] = slice[
                  limit_indices=(1, 2)
                  start_indices=(0, 1)
                  strides=None
                ] kqw
                kre:f64[1] = squeeze[dimensions=(1,)] krd
                krf:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] kqy
                krg:f64[1] = sub kre krf
                krh:f64[1,1] = slice[
                  limit_indices=(1, 3)
                  start_indices=(0, 2)
                  strides=None
                ] kqw
                kri:f64[1] = squeeze[dimensions=(1,)] krh
                krj:f64[] = select_n True 0.08 -0.08
                krk:f64[1] = integer_pow[y=2] krc
                krl:f64[1] = integer_pow[y=2] krg
                krm:f64[1] = add krk krl
                krn:f64[1] = integer_pow[y=2] kri
                kro:f64[1] = add krm krn
                krp:f64[1] = sqrt kro
                krq:f64[1] = integer_pow[y=2] krp
                krr:f64[1] = sub krq 0.0064
                krs:f64[1] = sqrt krr
                krt:f64[1] = integer_pow[y=2] krg
                kru:f64[1] = integer_pow[y=2] kri
                krv:f64[1] = add krt kru
                krw:f64[] = integer_pow[y=2] krj
                krx:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] krw
                kry:f64[1] = sub krv krx
                krz:f64[1] = sqrt kry
                ksa:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] krj
                ksb:f64[1] = mul kri ksa
                ksc:f64[1] = mul krg krz
                ksd:f64[1] = add ksb ksc
                kse:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] krj
                ksf:f64[1] = mul krg kse
                ksg:f64[1] = mul kri krz
                ksh:f64[1] = sub ksf ksg
                ksi:f64[1] = atan2 ksd ksh
                ksj:f64[1] = integer_pow[y=2] krs
                ksk:f64[1] = sub 0.090738 ksj
                ksl:f64[] = abs 0.045369
                ksm:f64[] = mul 2.0 ksl
                ksn:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] ksm
                kso:f64[1] = div ksk ksn
                ksp:f64[1] = slice[
                  limit_indices=(3,)
                  start_indices=(2,)
                  strides=None
                ] dgk
                ksq:f64[] = squeeze[dimensions=(0,)] ksp
                ksr:f64[1] = slice[
                  limit_indices=(3,)
                  start_indices=(2,)
                  strides=None
                ] dgl
                kss:f64[] = squeeze[dimensions=(0,)] ksr
                kst:f64[] = add 3.141592653589793 ksq
                ksu:f64[] = cos kst
                ksv:f64[] = add 3.141592653589793 kss
                ksw:f64[] = cos ksv
                ksx:f64[1] = pjit[name=clip jaxpr=clip] kso ksu ksw
                ksy:f64[1] = acos ksx
                ksz:f64[1] = sub 3.141592653589793 ksy
                kta:f64[1] = neg ksz
                ktb:f64[1] = sin ksi
                ktc:f64[1] = mul krg ktb
                ktd:f64[1] = cos ksi
                kte:f64[1] = mul kri ktd
                ktf:f64[1] = sub ktc kte
                ktg:f64[1] = sin kta
                kth:f64[1] = mul -0.213 ktg
                kti:f64[1] = cos kta
                ktj:f64[1] = mul -0.213 kti
                ktk:f64[1] = add -0.213 ktj
                ktl:f64[1] = mul kth ktf
                ktm:f64[1] = mul ktk krc
                ktn:f64[1] = add ktl ktm
                kto:f64[1] = mul kth krc
                ktp:f64[1] = mul ktk ktf
                ktq:f64[1] = sub kto ktp
                ktr:f64[1] = atan2 ktn ktq
                kts:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] ksi
                ktt:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] ktr
                ktu:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] kta
                ktv:f64[1,3] = concatenate[dimension=1] kts ktt ktu
                ktw:f64[1,3] = slice[
                  limit_indices=(1, 12)
                  start_indices=(0, 9)
                  strides=None
                ] kkv
                ktx:f64[] = select_n True 0.1881 -0.1881
                kty:f64[] = select_n False 0.04675 -0.04675
                ktz:f64[1,1] = slice[
                  limit_indices=(1, 1)
                  start_indices=(0, 0)
                  strides=None
                ] ktw
                kua:f64[1] = squeeze[dimensions=(1,)] ktz
                kub:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] ktx
                kuc:f64[1] = sub kua kub
                kud:f64[1,1] = slice[
                  limit_indices=(1, 2)
                  start_indices=(0, 1)
                  strides=None
                ] ktw
                kue:f64[1] = squeeze[dimensions=(1,)] kud
                kuf:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] kty
                kug:f64[1] = sub kue kuf
                kuh:f64[1,1] = slice[
                  limit_indices=(1, 3)
                  start_indices=(0, 2)
                  strides=None
                ] ktw
                kui:f64[1] = squeeze[dimensions=(1,)] kuh
                kuj:f64[] = select_n False 0.08 -0.08
                kuk:f64[1] = integer_pow[y=2] kuc
                kul:f64[1] = integer_pow[y=2] kug
                kum:f64[1] = add kuk kul
                kun:f64[1] = integer_pow[y=2] kui
                kuo:f64[1] = add kum kun
                kup:f64[1] = sqrt kuo
                kuq:f64[1] = integer_pow[y=2] kup
                kur:f64[1] = sub kuq 0.0064
                kus:f64[1] = sqrt kur
                kut:f64[1] = integer_pow[y=2] kug
                kuu:f64[1] = integer_pow[y=2] kui
                kuv:f64[1] = add kut kuu
                kuw:f64[] = integer_pow[y=2] kuj
                kux:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] kuw
                kuy:f64[1] = sub kuv kux
                kuz:f64[1] = sqrt kuy
                kva:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] kuj
                kvb:f64[1] = mul kui kva
                kvc:f64[1] = mul kug kuz
                kvd:f64[1] = add kvb kvc
                kve:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] kuj
                kvf:f64[1] = mul kug kve
                kvg:f64[1] = mul kui kuz
                kvh:f64[1] = sub kvf kvg
                kvi:f64[1] = atan2 kvd kvh
                kvj:f64[1] = integer_pow[y=2] kus
                kvk:f64[1] = sub 0.090738 kvj
                kvl:f64[] = abs 0.045369
                kvm:f64[] = mul 2.0 kvl
                kvn:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] kvm
                kvo:f64[1] = div kvk kvn
                kvp:f64[1] = slice[
                  limit_indices=(3,)
                  start_indices=(2,)
                  strides=None
                ] dgk
                kvq:f64[] = squeeze[dimensions=(0,)] kvp
                kvr:f64[1] = slice[
                  limit_indices=(3,)
                  start_indices=(2,)
                  strides=None
                ] dgl
                kvs:f64[] = squeeze[dimensions=(0,)] kvr
                kvt:f64[] = add 3.141592653589793 kvq
                kvu:f64[] = cos kvt
                kvv:f64[] = add 3.141592653589793 kvs
                kvw:f64[] = cos kvv
                kvx:f64[1] = pjit[name=clip jaxpr=clip] kvo kvu kvw
                kvy:f64[1] = acos kvx
                kvz:f64[1] = sub 3.141592653589793 kvy
                kwa:f64[1] = neg kvz
                kwb:f64[1] = sin kvi
                kwc:f64[1] = mul kug kwb
                kwd:f64[1] = cos kvi
                kwe:f64[1] = mul kui kwd
                kwf:f64[1] = sub kwc kwe
                kwg:f64[1] = sin kwa
                kwh:f64[1] = mul -0.213 kwg
                kwi:f64[1] = cos kwa
                kwj:f64[1] = mul -0.213 kwi
                kwk:f64[1] = add -0.213 kwj
                kwl:f64[1] = mul kwh kwf
                kwm:f64[1] = mul kwk kuc
                kwn:f64[1] = add kwl kwm
                kwo:f64[1] = mul kwh kuc
                kwp:f64[1] = mul kwk kwf
                kwq:f64[1] = sub kwo kwp
                kwr:f64[1] = atan2 kwn kwq
                kws:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] kvi
                kwt:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] kwr
                kwu:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] kwa
                kwv:f64[1,3] = concatenate[dimension=1] kws kwt kwu
                kww:f64[1,12] = concatenate[dimension=1] knv kqv ktv kwv
                kwx:f64[1,3] = reshape[dimensions=None new_sizes=(1, 3)] dgl
                kwy:f64[3] = squeeze[dimensions=(0,)] kwx
                kwz:f64[4,3] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(4, 3)
                ] kwy
                kxa:f64[12] = reshape[dimensions=None new_sizes=(12,)] kwz
                kxb:f64[1,3] = reshape[dimensions=None new_sizes=(1, 3)] dgk
                kxc:f64[3] = squeeze[dimensions=(0,)] kxb
                kxd:f64[4,3] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(4, 3)
                ] kxc
                kxe:f64[12] = reshape[dimensions=None new_sizes=(12,)] kxd
                kxf:f64[1,12] = pjit[name=clip jaxpr=clip1] kww kxa kxe
                kxg:f64[12] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(12,)
                ] 0.0
                kxh:i64[1,3] = reshape[dimensions=None new_sizes=(1, 3)] dku
                kxi:i64[3] = squeeze[dimensions=(0,)] kxh
                kxj:i64[4,3] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(4, 3)
                ] kxi
                kxk:i64[12] = reshape[dimensions=None new_sizes=(12,)] kxj
                kxl:f64[12] = convert_element_type[
                  new_dtype=float64
                  weak_type=True
                ] kxk
                kxm:f64[12] = mul kxl 1.4
                kxn:f64[1,3] = reshape[dimensions=None new_sizes=(1, 3)] dkv
                kxo:f64[3] = squeeze[dimensions=(0,)] kxn
                kxp:f64[4,3] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(4, 3)
                ] kxo
                kxq:f64[12] = reshape[dimensions=None new_sizes=(12,)] kxp
                kxr:f64[1,12] = cond[
                  branches=(
                    { lambda ; kxs:f64[12] kxt:f64[12] kxu:f64[1,36] kxv:f64[1,12]
                        kxw:f64[12] kxx:f64[12] kxy:f64[12]. let
                        kxz:f64[1,12] = broadcast_in_dim[
                          broadcast_dimensions=(1,)
                          shape=(1, 12)
                        ] kxt
                      in (kxz,) }
                    { lambda ; kya:f64[12] kyb:f64[12] kyc:f64[1,36] kyd:f64[1,12]
                        kye:f64[12] kyf:f64[12] kyg:f64[12]. let
                        kyh:f64[1,12] = slice[
                          limit_indices=(1, 16)
                          start_indices=(0, 4)
                          strides=None
                        ] kyc
                        kyi:f64[1,12] = slice[
                          limit_indices=(1, 34)
                          start_indices=(0, 22)
                          strides=None
                        ] kyc
                        kyj:f64[1,12] = sub kyd kyh
                        kyk:f64[12] = convert_element_type[
                          new_dtype=float64
                          weak_type=False
                        ] kyf
                        kyl:f64[1,12] = broadcast_in_dim[
                          broadcast_dimensions=(1,)
                          shape=(1, 12)
                        ] kyk
                        kym:f64[1,12] = mul kyl kyj
                        kyn:f64[1,12] = broadcast_in_dim[
                          broadcast_dimensions=(1,)
                          shape=(1, 12)
                        ] kye
                        kyo:f64[1,12] = sub kyn kyi
                        kyp:f64[1,12] = broadcast_in_dim[
                          broadcast_dimensions=(1,)
                          shape=(1, 12)
                        ] kyg
                        kyq:f64[1,12] = mul kyp kyo
                        kyr:f64[1,12] = add kym kyq
                        kys:f64[1,12] = sub kyd kyh
                        kyt:bool[1,12] = ne kys 0.0
                        kyu:f64[1,12] = sub kyd kyh
                        kyv:f64[1,12] = pjit[name=_where jaxpr=_where8] kyt kyu 1
                        kyw:f64[1,12] = broadcast_in_dim[
                          broadcast_dimensions=(1,)
                          shape=(1, 12)
                        ] kya
                        kyx:bool[1,12] = gt kyr kyw
                        kyy:f64[1,12] = broadcast_in_dim[
                          broadcast_dimensions=(1,)
                          shape=(1, 12)
                        ] kye
                        kyz:f64[1,12] = sub kyy kyi
                        kza:f64[1,12] = broadcast_in_dim[
                          broadcast_dimensions=(1,)
                          shape=(1, 12)
                        ] kyg
                        kzb:f64[1,12] = mul kza kyz
                        kzc:f64[1,12] = broadcast_in_dim[
                          broadcast_dimensions=(1,)
                          shape=(1, 12)
                        ] kya
                        kzd:f64[1,12] = sub kzc kzb
                        kze:f64[1,12] = div kzd kyv
                        kzf:f64[1,12] = pjit[name=_where jaxpr=_where9] kyx kze kyf
                        kzg:f64[12] = neg kya
                        kzh:f64[1,12] = broadcast_in_dim[
                          broadcast_dimensions=(1,)
                          shape=(1, 12)
                        ] kzg
                        kzi:bool[1,12] = lt kyr kzh
                        kzj:f64[12] = neg kya
                        kzk:f64[1,12] = broadcast_in_dim[
                          broadcast_dimensions=(1,)
                          shape=(1, 12)
                        ] kye
                        kzl:f64[1,12] = sub kzk kyi
                        kzm:f64[1,12] = broadcast_in_dim[
                          broadcast_dimensions=(1,)
                          shape=(1, 12)
                        ] kyg
                        kzn:f64[1,12] = mul kzm kzl
                        kzo:f64[1,12] = broadcast_in_dim[
                          broadcast_dimensions=(1,)
                          shape=(1, 12)
                        ] kzj
                        kzp:f64[1,12] = sub kzo kzn
                        kzq:f64[1,12] = div kzp kyv
                        kzr:f64[1,12] = pjit[name=_where jaxpr=_where10] kzi kzq
                          kzf
                      in (kzr,) }
                  )
                  linear=(False, False, False, False, False, False, False)
                ] 0 dgo kxm jkw kxf kxg kxm kxq
                kzs:f64[1,12] = slice[
                  limit_indices=(1, 16)
                  start_indices=(0, 4)
                  strides=None
                ] jkw
                kzt:f64[1,12] = slice[
                  limit_indices=(1, 34)
                  start_indices=(0, 22)
                  strides=None
                ] jkw
                kzu:f64[1,12] = sub kxf kzs
                kzv:f64[1,12] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] kxr
                kzw:f64[1,12] = mul kzv kzu
                kzx:f64[1,12] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 12)
                ] kxg
                kzy:f64[1,12] = sub kzx kzt
                kzz:f64[1,12] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 12)
                ] kxq
                laa:f64[1,12] = mul kzz kzy
                lab:f64[1,12] = add kzw laa
                lac:f64[1,1] = slice[
                  limit_indices=(1, 17)
                  start_indices=(0, 16)
                  strides=None
                ] jjg
                lad:f64[1] = squeeze[dimensions=(1,)] lac
                lae:f64[1,1] = slice[
                  limit_indices=(1, 22)
                  start_indices=(0, 21)
                  strides=None
                ] jjg
                laf:f64[1] = squeeze[dimensions=(1,)] lae
                lag:f64[1] = integer_pow[y=2] laf
                lah:f64[1] = neg lag
                lai:f64[1] = div lah 0.2
                laj:f64[1] = exp lai
                lak:f64[1,4] = slice[
                  limit_indices=(1, 4)
                  start_indices=(0, 0)
                  strides=None
                ] jjg
                lal:f64[1,1] = slice[
                  limit_indices=(1, 3)
                  start_indices=(0, 2)
                  strides=None
                ] lak
                lam:f64[1] = squeeze[dimensions=(1,)] lal
                lan:f64[1,1] = slice[
                  limit_indices=(1, 4)
                  start_indices=(0, 3)
                  strides=None
                ] lak
                lao:f64[1] = squeeze[dimensions=(1,)] lan
                lap:f64[1] = mul lam lao
                laq:f64[1,1] = slice[
                  limit_indices=(1, 1)
                  start_indices=(0, 0)
                  strides=None
                ] lak
                lar:f64[1] = squeeze[dimensions=(1,)] laq
                las:f64[1,1] = slice[
                  limit_indices=(1, 2)
                  start_indices=(0, 1)
                  strides=None
                ] lak
                lat:f64[1] = squeeze[dimensions=(1,)] las
                lau:f64[1] = mul lar lat
                lav:f64[1] = add lap lau
                law:f64[1,1] = slice[
                  limit_indices=(1, 2)
                  start_indices=(0, 1)
                  strides=None
                ] lak
                lax:f64[1] = squeeze[dimensions=(1,)] law
                lay:f64[1,1] = slice[
                  limit_indices=(1, 2)
                  start_indices=(0, 1)
                  strides=None
                ] lak
                laz:f64[1] = squeeze[dimensions=(1,)] lay
                lba:f64[1] = mul lax laz
                lbb:f64[1,1] = slice[
                  limit_indices=(1, 3)
                  start_indices=(0, 2)
                  strides=None
                ] lak
                lbc:f64[1] = squeeze[dimensions=(1,)] lbb
                lbd:f64[1,1] = slice[
                  limit_indices=(1, 3)
                  start_indices=(0, 2)
                  strides=None
                ] lak
                lbe:f64[1] = squeeze[dimensions=(1,)] lbd
                lbf:f64[1] = mul lbc lbe
                lbg:f64[1] = add lba lbf
                lbh:f64[1] = sub 0.5 lbg
                lbi:f64[1] = atan2 lav lbh
                lbj:f64[1,1] = slice[
                  limit_indices=(1, 2)
                  start_indices=(0, 1)
                  strides=None
                ] lak
                lbk:f64[1] = squeeze[dimensions=(1,)] lbj
                lbl:f64[1,1] = slice[
                  limit_indices=(1, 4)
                  start_indices=(0, 3)
                  strides=None
                ] lak
                lbm:f64[1] = squeeze[dimensions=(1,)] lbl
                lbn:f64[1] = mul lbk lbm
                lbo:f64[1,1] = slice[
                  limit_indices=(1, 1)
                  start_indices=(0, 0)
                  strides=None
                ] lak
                lbp:f64[1] = squeeze[dimensions=(1,)] lbo
                lbq:f64[1,1] = slice[
                  limit_indices=(1, 3)
                  start_indices=(0, 2)
                  strides=None
                ] lak
                lbr:f64[1] = squeeze[dimensions=(1,)] lbq
                lbs:f64[1] = mul lbp lbr
                lbt:f64[1] = sub lbn lbs
                lbu:f64[1] = mul -2.0 lbt
                lbv:f64[1] = pjit[name=clip jaxpr=clip2] lbu -1.0 1.0
                lbw:f64[1] = custom_jvp_call[
                  call_jaxpr={ lambda ; lbx:f64[1]. let
                      lby:f64[1] = asin lbx
                    in (lby,) }
                  jvp_jaxpr_thunk=<function _memoize.<locals>.memoized at 0x7d8348236310>
                  num_consts=0
                  symbolic_zeros=False
                ] lbv
                lbz:f64[1,1] = slice[
                  limit_indices=(1, 2)
                  start_indices=(0, 1)
                  strides=None
                ] lak
                lca:f64[1] = squeeze[dimensions=(1,)] lbz
                lcb:f64[1,1] = slice[
                  limit_indices=(1, 3)
                  start_indices=(0, 2)
                  strides=None
                ] lak
                lcc:f64[1] = squeeze[dimensions=(1,)] lcb
                lcd:f64[1] = mul lca lcc
                lce:f64[1,1] = slice[
                  limit_indices=(1, 1)
                  start_indices=(0, 0)
                  strides=None
                ] lak
                lcf:f64[1] = squeeze[dimensions=(1,)] lce
                lcg:f64[1,1] = slice[
                  limit_indices=(1, 4)
                  start_indices=(0, 3)
                  strides=None
                ] lak
                lch:f64[1] = squeeze[dimensions=(1,)] lcg
                lci:f64[1] = mul lcf lch
                lcj:f64[1] = add lcd lci
                lck:f64[1,1] = slice[
                  limit_indices=(1, 3)
                  start_indices=(0, 2)
                  strides=None
                ] lak
                lcl:f64[1] = squeeze[dimensions=(1,)] lck
                lcm:f64[1,1] = slice[
                  limit_indices=(1, 3)
                  start_indices=(0, 2)
                  strides=None
                ] lak
                lcn:f64[1] = squeeze[dimensions=(1,)] lcm
                lco:f64[1] = mul lcl lcn
                lcp:f64[1,1] = slice[
                  limit_indices=(1, 4)
                  start_indices=(0, 3)
                  strides=None
                ] lak
                lcq:f64[1] = squeeze[dimensions=(1,)] lcp
                lcr:f64[1,1] = slice[
                  limit_indices=(1, 4)
                  start_indices=(0, 3)
                  strides=None
                ] lak
                lcs:f64[1] = squeeze[dimensions=(1,)] lcr
                lct:f64[1] = mul lcq lcs
                lcu:f64[1] = add lco lct
                lcv:f64[1] = sub 0.5 lcu
                lcw:f64[1] = atan2 lcj lcv
                lcx:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] lbi
                lcy:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] lbw
                lcz:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] lcw
                lda:f64[1,3] = concatenate[dimension=1] lcx lcy lcz
                ldb:f64[1,1] = slice[
                  limit_indices=(1, 1)
                  start_indices=(0, 0)
                  strides=(1, 1)
                ] lda
                ldc:f64[1] = squeeze[dimensions=(1,)] ldb
                ldd:f64[1,1] = slice[
                  limit_indices=(1, 2)
                  start_indices=(0, 1)
                  strides=(1, 1)
                ] lda
                lde:f64[1] = squeeze[dimensions=(1,)] ldd
                ldf:f64[1,1] = slice[
                  limit_indices=(1, 3)
                  start_indices=(0, 2)
                  strides=(1, 1)
                ] lda
                ldg:f64[1] = squeeze[dimensions=(1,)] ldf
                ldh:f64[1,4] = slice[
                  limit_indices=(1, 4)
                  start_indices=(0, 0)
                  strides=None
                ] jjt
                ldi:f64[1,1] = slice[
                  limit_indices=(1, 3)
                  start_indices=(0, 2)
                  strides=None
                ] ldh
                ldj:f64[1] = squeeze[dimensions=(1,)] ldi
                ldk:f64[1,1] = slice[
                  limit_indices=(1, 4)
                  start_indices=(0, 3)
                  strides=None
                ] ldh
                ldl:f64[1] = squeeze[dimensions=(1,)] ldk
                ldm:f64[1] = mul ldj ldl
                ldn:f64[1,1] = slice[
                  limit_indices=(1, 1)
                  start_indices=(0, 0)
                  strides=None
                ] ldh
                ldo:f64[1] = squeeze[dimensions=(1,)] ldn
                ldp:f64[1,1] = slice[
                  limit_indices=(1, 2)
                  start_indices=(0, 1)
                  strides=None
                ] ldh
                ldq:f64[1] = squeeze[dimensions=(1,)] ldp
                ldr:f64[1] = mul ldo ldq
                lds:f64[1] = add ldm ldr
                ldt:f64[1,1] = slice[
                  limit_indices=(1, 2)
                  start_indices=(0, 1)
                  strides=None
                ] ldh
                ldu:f64[1] = squeeze[dimensions=(1,)] ldt
                ldv:f64[1,1] = slice[
                  limit_indices=(1, 2)
                  start_indices=(0, 1)
                  strides=None
                ] ldh
                ldw:f64[1] = squeeze[dimensions=(1,)] ldv
                ldx:f64[1] = mul ldu ldw
                ldy:f64[1,1] = slice[
                  limit_indices=(1, 3)
                  start_indices=(0, 2)
                  strides=None
                ] ldh
                ldz:f64[1] = squeeze[dimensions=(1,)] ldy
                lea:f64[1,1] = slice[
                  limit_indices=(1, 3)
                  start_indices=(0, 2)
                  strides=None
                ] ldh
                leb:f64[1] = squeeze[dimensions=(1,)] lea
                lec:f64[1] = mul ldz leb
                led:f64[1] = add ldx lec
                lee:f64[1] = sub 0.5 led
                lef:f64[1] = atan2 lds lee
                leg:f64[1,1] = slice[
                  limit_indices=(1, 2)
                  start_indices=(0, 1)
                  strides=None
                ] ldh
                leh:f64[1] = squeeze[dimensions=(1,)] leg
                lei:f64[1,1] = slice[
                  limit_indices=(1, 4)
                  start_indices=(0, 3)
                  strides=None
                ] ldh
                lej:f64[1] = squeeze[dimensions=(1,)] lei
                lek:f64[1] = mul leh lej
                lel:f64[1,1] = slice[
                  limit_indices=(1, 1)
                  start_indices=(0, 0)
                  strides=None
                ] ldh
                lem:f64[1] = squeeze[dimensions=(1,)] lel
                len:f64[1,1] = slice[
                  limit_indices=(1, 3)
                  start_indices=(0, 2)
                  strides=None
                ] ldh
                leo:f64[1] = squeeze[dimensions=(1,)] len
                lep:f64[1] = mul lem leo
                leq:f64[1] = sub lek lep
                ler:f64[1] = mul -2.0 leq
                les:f64[1] = pjit[name=clip jaxpr=clip2] ler -1.0 1.0
                let:f64[1] = custom_jvp_call[
                  call_jaxpr={ lambda ; leu:f64[1]. let
                      lev:f64[1] = asin leu
                    in (lev,) }
                  jvp_jaxpr_thunk=<function _memoize.<locals>.memoized at 0x7d83482364c0>
                  num_consts=0
                  symbolic_zeros=False
                ] les
                lew:f64[1,1] = slice[
                  limit_indices=(1, 2)
                  start_indices=(0, 1)
                  strides=None
                ] ldh
                lex:f64[1] = squeeze[dimensions=(1,)] lew
                ley:f64[1,1] = slice[
                  limit_indices=(1, 3)
                  start_indices=(0, 2)
                  strides=None
                ] ldh
                lez:f64[1] = squeeze[dimensions=(1,)] ley
                lfa:f64[1] = mul lex lez
                lfb:f64[1,1] = slice[
                  limit_indices=(1, 1)
                  start_indices=(0, 0)
                  strides=None
                ] ldh
                lfc:f64[1] = squeeze[dimensions=(1,)] lfb
                lfd:f64[1,1] = slice[
                  limit_indices=(1, 4)
                  start_indices=(0, 3)
                  strides=None
                ] ldh
                lfe:f64[1] = squeeze[dimensions=(1,)] lfd
                lff:f64[1] = mul lfc lfe
                lfg:f64[1] = add lfa lff
                lfh:f64[1,1] = slice[
                  limit_indices=(1, 3)
                  start_indices=(0, 2)
                  strides=None
                ] ldh
                lfi:f64[1] = squeeze[dimensions=(1,)] lfh
                lfj:f64[1,1] = slice[
                  limit_indices=(1, 3)
                  start_indices=(0, 2)
                  strides=None
                ] ldh
                lfk:f64[1] = squeeze[dimensions=(1,)] lfj
                lfl:f64[1] = mul lfi lfk
                lfm:f64[1,1] = slice[
                  limit_indices=(1, 4)
                  start_indices=(0, 3)
                  strides=None
                ] ldh
                lfn:f64[1] = squeeze[dimensions=(1,)] lfm
                lfo:f64[1,1] = slice[
                  limit_indices=(1, 4)
                  start_indices=(0, 3)
                  strides=None
                ] ldh
                lfp:f64[1] = squeeze[dimensions=(1,)] lfo
                lfq:f64[1] = mul lfn lfp
                lfr:f64[1] = add lfl lfq
                lfs:f64[1] = sub 0.5 lfr
                lft:f64[1] = atan2 lfg lfs
                lfu:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] lef
                lfv:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] let
                lfw:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] lft
                lfx:f64[1,3] = concatenate[dimension=1] lfu lfv lfw
                lfy:f64[1,1] = slice[
                  limit_indices=(1, 1)
                  start_indices=(0, 0)
                  strides=(1, 1)
                ] lfx
                lfz:f64[1] = squeeze[dimensions=(1,)] lfy
                lga:f64[1,1] = slice[
                  limit_indices=(1, 2)
                  start_indices=(0, 1)
                  strides=(1, 1)
                ] lfx
                lgb:f64[1] = squeeze[dimensions=(1,)] lga
                lgc:f64[1] = integer_pow[y=2] lde
                lgd:f64[1] = neg lgc
                lge:f64[1] = div lgd 0.25
                lgf:f64[1] = exp lge
                lgg:f64[1] = integer_pow[y=2] ldc
                lgh:f64[1] = neg lgg
                lgi:f64[1] = div lgh 0.25
                lgj:f64[1] = exp lgi
                lgk:f64[1] = integer_pow[y=2] ldg
                lgl:f64[1] = neg lgk
                lgm:f64[1] = div lgl 0.07
                lgn:f64[1] = exp lgm
                lgo:f64[1,1] = slice[
                  limit_indices=(1, 18)
                  start_indices=(0, 17)
                  strides=None
                ] jjg
                lgp:f64[1] = squeeze[dimensions=(1,)] lgo
                lgq:f64[1] = integer_pow[y=2] lgp
                lgr:f64[1] = neg lgq
                lgs:f64[1] = div lgr 0.01
                lgt:f64[1] = exp lgs
                lgu:f64[1,1] = slice[
                  limit_indices=(1, 19)
                  start_indices=(0, 18)
                  strides=None
                ] jjg
                lgv:f64[1] = squeeze[dimensions=(1,)] lgu
                lgw:f64[1,1] = slice[
                  limit_indices=(1, 19)
                  start_indices=(0, 18)
                  strides=None
                ] jjt
                lgx:f64[1] = squeeze[dimensions=(1,)] lgw
                lgy:f64[1] = sub lgv lgx
                lgz:f64[1] = integer_pow[y=2] lgy
                lha:f64[1] = neg lgz
                lhb:f64[1] = div lha 0.02
                lhc:f64[1] = exp lhb
                lhd:f64[1,1] = slice[
                  limit_indices=(1, 20)
                  start_indices=(0, 19)
                  strides=None
                ] jjg
                lhe:f64[1] = squeeze[dimensions=(1,)] lhd
                lhf:f64[1] = integer_pow[y=2] lhe
                lhg:f64[1] = neg lhf
                lhh:f64[1] = div lhg 0.2
                lhi:f64[1,1] = slice[
                  limit_indices=(1, 21)
                  start_indices=(0, 20)
                  strides=None
                ] jjg
                lhj:f64[1] = squeeze[dimensions=(1,)] lhi
                lhk:f64[1] = integer_pow[y=2] lhj
                lhl:f64[1] = div lhk 0.2
                lhm:f64[1] = sub lhh lhl
                lhn:f64[1] = exp lhm
                lho:f64[1] = sub ldc lfz
                lhp:f64[1] = integer_pow[y=2] lho
                lhq:f64[1] = neg lhp
                lhr:f64[1] = div lhq 0.001
                lhs:f64[1] = exp lhr
                lht:f64[1] = sub lde lgb
                lhu:f64[1] = integer_pow[y=2] lht
                lhv:f64[1] = neg lhu
                lhw:f64[1] = div lhv 0.005
                lhx:f64[1] = exp lhw
                lhy:f64[1] = add lhs lhx
                lhz:f64[1] = div lhy 2.0
                lia:f64[1,12] = slice[
                  limit_indices=(1, 16)
                  start_indices=(0, 4)
                  strides=None
                ] jjg
                lib:f64[1,3] = reshape[dimensions=None new_sizes=(1, 3)] dgl
                lic:f64[3] = squeeze[dimensions=(0,)] lib
                lid:f64[4,3] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(4, 3)
                ] lic
                lie:f64[12] = reshape[dimensions=None new_sizes=(12,)] lid
                lif:f64[1,3] = reshape[dimensions=None new_sizes=(1, 3)] dgk
                lig:f64[3] = squeeze[dimensions=(0,)] lif
                lih:f64[4,3] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(4, 3)
                ] lig
                lii:f64[12] = reshape[dimensions=None new_sizes=(12,)] lih
                lij:f64[1,12] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 12)
                ] lie
                lik:f64[1,12] = sub lia lij
                lil:f64[1,12] = mul -10.0 lik
                lim:f64[1,12] = exp lil
                lin:f64[1,12] = add 1.0 lim
                lio:f64[1,12] = div 1.0 lin
                lip:f64[1,12] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 12)
                ] lii
                liq:f64[1,12] = sub lia lip
                lir:f64[1,12] = mul 10.0 liq
                lis:f64[1,12] = exp lir
                lit:f64[1,12] = add 1.0 lis
                liu:f64[1,12] = div 1.0 lit
                liv:f64[1,12] = add lio liu
                liw:f64[1,12] = sub liv 1.0
                lix:f64[1] = reduce_sum[axes=(1,)] liw
                liy:f64[1] = div lix 12.0
                liz:f64[12] = mul -0.9 dgo
                lja:f64[12] = mul 0.9 dgo
                ljb:f64[1,12] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 12)
                ] liz
                ljc:f64[1,12] = sub lab ljb
                ljd:f64[1,12] = mul -0.2 ljc
                lje:f64[1,12] = exp ljd
                ljf:f64[1,12] = add 1.0 lje
                ljg:f64[1,12] = div 1.0 ljf
                ljh:f64[1,12] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 12)
                ] lja
                lji:f64[1,12] = sub lab ljh
                ljj:f64[1,12] = mul 0.2 lji
                ljk:f64[1,12] = exp ljj
                ljl:f64[1,12] = add 1.0 ljk
                ljm:f64[1,12] = div 1.0 ljl
                ljn:f64[1,12] = add ljg ljm
                ljo:f64[1,12] = sub ljn 1.0
                ljp:f64[1] = reduce_sum[axes=(1,)] ljo
                ljq:f64[1] = div ljp 12.0
                ljr:f64[1,12] = slice[
                  limit_indices=(1, 34)
                  start_indices=(0, 22)
                  strides=None
                ] jjg
                ljs:f64[1,12] = slice[
                  limit_indices=(1, 34)
                  start_indices=(0, 22)
                  strides=None
                ] jjt
                ljt:f64[1,12] = sub ljr ljs
                lju:f64[1,12] = integer_pow[y=2] ljt
                ljv:f64[1] = reduce_sum[axes=(1,)] lju
                ljw:f64[1] = neg ljv
                ljx:f64[1] = div ljw 4.0
                ljy:f64[1] = exp ljx
                ljz:f64[1,9] = integer_pow[y=2] dga
                lka:f64[1,9] = neg ljz
                lkb:f64[1,9] = div lka 0.25
                lkc:f64[1,9] = exp lkb
                lkd:f64[1] = reduce_sum[axes=(1,)] lkc
                lke:f64[1] = div lkd 9.0
                lkf:f64[1,12] = slice[
                  limit_indices=(1, 16)
                  start_indices=(0, 4)
                  strides=None
                ] jjg
                lkg:f64[1,12] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 12)
                ] dkw
                lkh:f64[1,12] = sub lkf lkg
                lki:f64[1,12] = integer_pow[y=2] lkh
                lkj:f64[1,12] = neg lki
                lkk:f64[1,12] = div lkj 0.05
                lkl:f64[1,12] = exp lkk
                lkm:f64[1] = reduce_sum[axes=(1,)] lkl
                lkn:f64[1] = div lkm 12.0
                lko:f64[1,12] = slice[
                  limit_indices=(1, 34)
                  start_indices=(0, 22)
                  strides=None
                ] jjg
                lkp:f64[1,12] = mul lab lko
                lkq:f64[1,12] = abs lkp
                lkr:f64[1] = reduce_sum[axes=(1,)] lkq
                lks:f64[1] = integer_pow[y=2] lkr
                lkt:f64[1] = neg lks
                lku:f64[1] = div lkt 450.0
                lkv:f64[1] = exp lku
                lkw:f64[1,12] = slice[
                  limit_indices=(1, 16)
                  start_indices=(0, 4)
                  strides=None
                ] jjg
                lkx:f64[1,3] = slice[
                  limit_indices=(1, 3)
                  start_indices=(0, 0)
                  strides=None
                ] lkw
                lky:i64[] = select_n True 1 -1
                lkz:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=True
                ] lky
                lla:f64[] = mul lkz 0.08
                llb:f64[1,1] = slice[
                  limit_indices=(1, 1)
                  start_indices=(0, 0)
                  strides=None
                ] lkx
                llc:f64[1] = squeeze[dimensions=(1,)] llb
                lld:f64[1] = sin llc
                lle:f64[1,1] = slice[
                  limit_indices=(1, 2)
                  start_indices=(0, 1)
                  strides=None
                ] lkx
                llf:f64[1] = squeeze[dimensions=(1,)] lle
                llg:f64[1] = sin llf
                llh:f64[1,1] = slice[
                  limit_indices=(1, 3)
                  start_indices=(0, 2)
                  strides=None
                ] lkx
                lli:f64[1] = squeeze[dimensions=(1,)] llh
                llj:f64[1] = sin lli
                llk:f64[1,1] = slice[
                  limit_indices=(1, 1)
                  start_indices=(0, 0)
                  strides=None
                ] lkx
                lll:f64[1] = squeeze[dimensions=(1,)] llk
                llm:f64[1] = cos lll
                lln:f64[1,1] = slice[
                  limit_indices=(1, 2)
                  start_indices=(0, 1)
                  strides=None
                ] lkx
                llo:f64[1] = squeeze[dimensions=(1,)] lln
                llp:f64[1] = cos llo
                llq:f64[1,1] = slice[
                  limit_indices=(1, 3)
                  start_indices=(0, 2)
                  strides=None
                ] lkx
                llr:f64[1] = squeeze[dimensions=(1,)] llq
                lls:f64[1] = cos llr
                llt:f64[1] = mul llp lls
                llu:f64[1] = mul llg llj
                llv:f64[1] = sub llt llu
                llw:f64[1] = mul llg lls
                llx:f64[1] = mul llp llj
                lly:f64[1] = add llw llx
                llz:f64[1] = mul -0.213 lly
                lma:f64[1] = mul -0.213 llg
                lmb:f64[1] = add llz lma
                lmc:f64[1] = mul 0.213 lld
                lmd:f64[1] = mul lmc llv
                lme:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] lla
                lmf:f64[1] = mul lme llm
                lmg:f64[1] = add lmd lmf
                lmh:f64[1] = mul -0.213 llp
                lmi:f64[1] = mul lmh lld
                lmj:f64[1] = sub lmg lmi
                lmk:f64[1] = mul -0.213 llm
                lml:f64[1] = mul lmk llv
                lmm:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] lla
                lmn:f64[1] = mul lmm lld
                lmo:f64[1] = add lml lmn
                lmp:f64[1] = mul -0.213 llm
                lmq:f64[1] = mul lmp llp
                lmr:f64[1] = add lmo lmq
                lms:f64[] = select_n True -0.1881 0.1881
                lmt:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] lms
                lmu:f64[1] = add lmb lmt
                lmv:f64[] = select_n True 0.04675 -0.04675
                lmw:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] lmv
                lmx:f64[1] = add lmj lmw
                lmy:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] lmu
                lmz:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] lmx
                lna:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] lmr
                lnb:f64[1,3] = concatenate[dimension=1] lmy lmz lna
                lnc:f64[1,3] = slice[
                  limit_indices=(1, 6)
                  start_indices=(0, 3)
                  strides=None
                ] lkw
                lnd:i64[] = select_n False 1 -1
                lne:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=True
                ] lnd
                lnf:f64[] = mul lne 0.08
                lng:f64[1,1] = slice[
                  limit_indices=(1, 1)
                  start_indices=(0, 0)
                  strides=None
                ] lnc
                lnh:f64[1] = squeeze[dimensions=(1,)] lng
                lni:f64[1] = sin lnh
                lnj:f64[1,1] = slice[
                  limit_indices=(1, 2)
                  start_indices=(0, 1)
                  strides=None
                ] lnc
                lnk:f64[1] = squeeze[dimensions=(1,)] lnj
                lnl:f64[1] = sin lnk
                lnm:f64[1,1] = slice[
                  limit_indices=(1, 3)
                  start_indices=(0, 2)
                  strides=None
                ] lnc
                lnn:f64[1] = squeeze[dimensions=(1,)] lnm
                lno:f64[1] = sin lnn
                lnp:f64[1,1] = slice[
                  limit_indices=(1, 1)
                  start_indices=(0, 0)
                  strides=None
                ] lnc
                lnq:f64[1] = squeeze[dimensions=(1,)] lnp
                lnr:f64[1] = cos lnq
                lns:f64[1,1] = slice[
                  limit_indices=(1, 2)
                  start_indices=(0, 1)
                  strides=None
                ] lnc
                lnt:f64[1] = squeeze[dimensions=(1,)] lns
                lnu:f64[1] = cos lnt
                lnv:f64[1,1] = slice[
                  limit_indices=(1, 3)
                  start_indices=(0, 2)
                  strides=None
                ] lnc
                lnw:f64[1] = squeeze[dimensions=(1,)] lnv
                lnx:f64[1] = cos lnw
                lny:f64[1] = mul lnu lnx
                lnz:f64[1] = mul lnl lno
                loa:f64[1] = sub lny lnz
                lob:f64[1] = mul lnl lnx
                loc:f64[1] = mul lnu lno
                lod:f64[1] = add lob loc
                loe:f64[1] = mul -0.213 lod
                lof:f64[1] = mul -0.213 lnl
                log:f64[1] = add loe lof
                loh:f64[1] = mul 0.213 lni
                loi:f64[1] = mul loh loa
                loj:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] lnf
                lok:f64[1] = mul loj lnr
                lol:f64[1] = add loi lok
                lom:f64[1] = mul -0.213 lnu
                lon:f64[1] = mul lom lni
                loo:f64[1] = sub lol lon
                lop:f64[1] = mul -0.213 lnr
                loq:f64[1] = mul lop loa
                lor:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] lnf
                los:f64[1] = mul lor lni
                lot:f64[1] = add loq los
                lou:f64[1] = mul -0.213 lnr
                lov:f64[1] = mul lou lnu
                low:f64[1] = add lot lov
                lox:f64[] = select_n True -0.1881 0.1881
                loy:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] lox
                loz:f64[1] = add log loy
                lpa:f64[] = select_n False 0.04675 -0.04675
                lpb:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] lpa
                lpc:f64[1] = add loo lpb
                lpd:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] loz
                lpe:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] lpc
                lpf:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] low
                lpg:f64[1,3] = concatenate[dimension=1] lpd lpe lpf
                lph:f64[1,3] = slice[
                  limit_indices=(1, 9)
                  start_indices=(0, 6)
                  strides=None
                ] lkw
                lpi:i64[] = select_n True 1 -1
                lpj:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=True
                ] lpi
                lpk:f64[] = mul lpj 0.08
                lpl:f64[1,1] = slice[
                  limit_indices=(1, 1)
                  start_indices=(0, 0)
                  strides=None
                ] lph
                lpm:f64[1] = squeeze[dimensions=(1,)] lpl
                lpn:f64[1] = sin lpm
                lpo:f64[1,1] = slice[
                  limit_indices=(1, 2)
                  start_indices=(0, 1)
                  strides=None
                ] lph
                lpp:f64[1] = squeeze[dimensions=(1,)] lpo
                lpq:f64[1] = sin lpp
                lpr:f64[1,1] = slice[
                  limit_indices=(1, 3)
                  start_indices=(0, 2)
                  strides=None
                ] lph
                lps:f64[1] = squeeze[dimensions=(1,)] lpr
                lpt:f64[1] = sin lps
                lpu:f64[1,1] = slice[
                  limit_indices=(1, 1)
                  start_indices=(0, 0)
                  strides=None
                ] lph
                lpv:f64[1] = squeeze[dimensions=(1,)] lpu
                lpw:f64[1] = cos lpv
                lpx:f64[1,1] = slice[
                  limit_indices=(1, 2)
                  start_indices=(0, 1)
                  strides=None
                ] lph
                lpy:f64[1] = squeeze[dimensions=(1,)] lpx
                lpz:f64[1] = cos lpy
                lqa:f64[1,1] = slice[
                  limit_indices=(1, 3)
                  start_indices=(0, 2)
                  strides=None
                ] lph
                lqb:f64[1] = squeeze[dimensions=(1,)] lqa
                lqc:f64[1] = cos lqb
                lqd:f64[1] = mul lpz lqc
                lqe:f64[1] = mul lpq lpt
                lqf:f64[1] = sub lqd lqe
                lqg:f64[1] = mul lpq lqc
                lqh:f64[1] = mul lpz lpt
                lqi:f64[1] = add lqg lqh
                lqj:f64[1] = mul -0.213 lqi
                lqk:f64[1] = mul -0.213 lpq
                lql:f64[1] = add lqj lqk
                lqm:f64[1] = mul 0.213 lpn
                lqn:f64[1] = mul lqm lqf
                lqo:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] lpk
                lqp:f64[1] = mul lqo lpw
                lqq:f64[1] = add lqn lqp
                lqr:f64[1] = mul -0.213 lpz
                lqs:f64[1] = mul lqr lpn
                lqt:f64[1] = sub lqq lqs
                lqu:f64[1] = mul -0.213 lpw
                lqv:f64[1] = mul lqu lqf
                lqw:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] lpk
                lqx:f64[1] = mul lqw lpn
                lqy:f64[1] = add lqv lqx
                lqz:f64[1] = mul -0.213 lpw
                lra:f64[1] = mul lqz lpz
                lrb:f64[1] = add lqy lra
                lrc:f64[] = select_n False -0.1881 0.1881
                lrd:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] lrc
                lre:f64[1] = add lql lrd
                lrf:f64[] = select_n True 0.04675 -0.04675
                lrg:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] lrf
                lrh:f64[1] = add lqt lrg
                lri:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] lre
                lrj:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] lrh
                lrk:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] lrb
                lrl:f64[1,3] = concatenate[dimension=1] lri lrj lrk
                lrm:f64[1,3] = slice[
                  limit_indices=(1, 12)
                  start_indices=(0, 9)
                  strides=None
                ] lkw
                lrn:i64[] = select_n False 1 -1
                lro:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=True
                ] lrn
                lrp:f64[] = mul lro 0.08
                lrq:f64[1,1] = slice[
                  limit_indices=(1, 1)
                  start_indices=(0, 0)
                  strides=None
                ] lrm
                lrr:f64[1] = squeeze[dimensions=(1,)] lrq
                lrs:f64[1] = sin lrr
                lrt:f64[1,1] = slice[
                  limit_indices=(1, 2)
                  start_indices=(0, 1)
                  strides=None
                ] lrm
                lru:f64[1] = squeeze[dimensions=(1,)] lrt
                lrv:f64[1] = sin lru
                lrw:f64[1,1] = slice[
                  limit_indices=(1, 3)
                  start_indices=(0, 2)
                  strides=None
                ] lrm
                lrx:f64[1] = squeeze[dimensions=(1,)] lrw
                lry:f64[1] = sin lrx
                lrz:f64[1,1] = slice[
                  limit_indices=(1, 1)
                  start_indices=(0, 0)
                  strides=None
                ] lrm
                lsa:f64[1] = squeeze[dimensions=(1,)] lrz
                lsb:f64[1] = cos lsa
                lsc:f64[1,1] = slice[
                  limit_indices=(1, 2)
                  start_indices=(0, 1)
                  strides=None
                ] lrm
                lsd:f64[1] = squeeze[dimensions=(1,)] lsc
                lse:f64[1] = cos lsd
                lsf:f64[1,1] = slice[
                  limit_indices=(1, 3)
                  start_indices=(0, 2)
                  strides=None
                ] lrm
                lsg:f64[1] = squeeze[dimensions=(1,)] lsf
                lsh:f64[1] = cos lsg
                lsi:f64[1] = mul lse lsh
                lsj:f64[1] = mul lrv lry
                lsk:f64[1] = sub lsi lsj
                lsl:f64[1] = mul lrv lsh
                lsm:f64[1] = mul lse lry
                lsn:f64[1] = add lsl lsm
                lso:f64[1] = mul -0.213 lsn
                lsp:f64[1] = mul -0.213 lrv
                lsq:f64[1] = add lso lsp
                lsr:f64[1] = mul 0.213 lrs
                lss:f64[1] = mul lsr lsk
                lst:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] lrp
                lsu:f64[1] = mul lst lsb
                lsv:f64[1] = add lss lsu
                lsw:f64[1] = mul -0.213 lse
                lsx:f64[1] = mul lsw lrs
                lsy:f64[1] = sub lsv lsx
                lsz:f64[1] = mul -0.213 lsb
                lta:f64[1] = mul lsz lsk
                ltb:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] lrp
                ltc:f64[1] = mul ltb lrs
                ltd:f64[1] = add lta ltc
                lte:f64[1] = mul -0.213 lsb
                ltf:f64[1] = mul lte lse
                ltg:f64[1] = add ltd ltf
                lth:f64[] = select_n False -0.1881 0.1881
                lti:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] lth
                ltj:f64[1] = add lsq lti
                ltk:f64[] = select_n False 0.04675 -0.04675
                ltl:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] ltk
                ltm:f64[1] = add lsy ltl
                ltn:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] ltj
                lto:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] ltm
                ltp:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] ltg
                ltq:f64[1,3] = concatenate[dimension=1] ltn lto ltp
                ltr:f64[1,12] = concatenate[dimension=1] lnb lpg lrl ltq
                lts:bool[4] = lt dkx 0
                ltt:i64[4] = add dkx 12
                ltu:i64[4] = select_n lts dkx ltt
                ltv:i32[4] = convert_element_type[
                  new_dtype=int32
                  weak_type=False
                ] ltu
                ltw:i32[4,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(4, 1)
                ] ltv
                ltx:f64[1,4] = gather[
                  dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
                  fill_value=None
                  indices_are_sorted=False
                  mode=GatherScatterMode.PROMISE_IN_BOUNDS
                  slice_sizes=(1, 1)
                  unique_indices=False
                ] ltr ltw
                lty:bool[4] = lt dkx 0
                ltz:i64[4] = add dkx 12
                lua:i64[4] = select_n lty dkx ltz
                lub:i32[4] = convert_element_type[
                  new_dtype=int32
                  weak_type=False
                ] lua
                luc:i32[4,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(4, 1)
                ] lub
                lud:f64[1,4] = gather[
                  dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
                  fill_value=None
                  indices_are_sorted=False
                  mode=GatherScatterMode.PROMISE_IN_BOUNDS
                  slice_sizes=(1, 1)
                  unique_indices=False
                ] kkv luc
                lue:f64[1,4] = sub ltx lud
                luf:f64[1,4] = integer_pow[y=2] lue
                lug:f64[1,4] = neg luf
                luh:f64[1,4] = div lug 0.002
                lui:f64[1,4] = exp luh
                luj:f64[1] = reduce_sum[axes=(1,)] lui
                luk:f64[1] = div luj 4.0
                lul:f64[1,12] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 12)
                ] dgo
                lum:bool[1,12] = gt lab lul
                lun:f64[1,12] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 12)
                ] dgo
                luo:f64[1,12] = sub lab lun
                lup:f64[1,12] = add luo 1.0
                luq:f64[1,12] = neg lup
                lur:f64[1,12] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 12)
                ] dgo
                lus:f64[1,12] = sub lab lur
                lut:f64[1,12] = exp lus
                luu:f64[1,12] = neg lut
                luv:f64[1,12] = select_n lum luu luq
                luw:f64[12] = neg dgo
                lux:f64[1,12] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 12)
                ] luw
                luy:bool[1,12] = lt lab lux
                luz:f64[1,12] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 12)
                ] dgo
                lva:f64[1,12] = add lab luz
                lvb:f64[1,12] = sub lva 1.0
                lvc:f64[1,12] = neg lab
                lvd:f64[1,12] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 12)
                ] dgo
                lve:f64[1,12] = sub lvc lvd
                lvf:f64[1,12] = exp lve
                lvg:f64[1,12] = neg lvf
                lvh:f64[1,12] = select_n luy lvg lvb
                lvi:f64[1,12] = add luv lvh
                lvj:f64[1] = reduce_sum[axes=(1,)] lvi
                lvk:f64[1] = div lvj 12.0
                lvl:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] lad
                lvm:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] laj
                lvn:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] lgf
                lvo:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] lgj
                lvp:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] lgn
                lvq:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] lgt
                lvr:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] lhc
                lvs:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] lhn
                lvt:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] lhz
                lvu:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] liy
                lvv:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] ljq
                lvw:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] ljy
                lvx:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] lke
                lvy:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] lkn
                lvz:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] lkv
                lwa:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] luk
                lwb:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] lvk
                lwc:f64[1,16] = concatenate[dimension=1] lvl lvm lvn lvo lvp lvq
                  lvr lvs lvt lvu lvv lvw lvx lvy lvz lwa
                lwd:f64[1,17] = concatenate[dimension=1] lwc lwb
                lwe:f64[1,17] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 17)
                ] dky
                lwf:f64[1,17] = mul lwe lwd
                lwg:f64[1,1] = slice[
                  limit_indices=(1, 1)
                  start_indices=(0, 0)
                  strides=None
                ] lwf
                lwh:f64[1] = squeeze[dimensions=(1,)] lwg
                lwi:f64[1,1] = slice[
                  limit_indices=(1, 2)
                  start_indices=(0, 1)
                  strides=None
                ] lwf
                lwj:f64[1] = squeeze[dimensions=(1,)] lwi
                lwk:f64[1,1] = slice[
                  limit_indices=(1, 3)
                  start_indices=(0, 2)
                  strides=None
                ] lwf
                lwl:f64[1] = squeeze[dimensions=(1,)] lwk
                lwm:f64[1,1] = slice[
                  limit_indices=(1, 4)
                  start_indices=(0, 3)
                  strides=None
                ] lwf
                lwn:f64[1] = squeeze[dimensions=(1,)] lwm
                lwo:f64[1,1] = slice[
                  limit_indices=(1, 5)
                  start_indices=(0, 4)
                  strides=None
                ] lwf
                lwp:f64[1] = squeeze[dimensions=(1,)] lwo
                lwq:f64[1,1] = slice[
                  limit_indices=(1, 6)
                  start_indices=(0, 5)
                  strides=None
                ] lwf
                lwr:f64[1] = squeeze[dimensions=(1,)] lwq
                lws:f64[1,1] = slice[
                  limit_indices=(1, 7)
                  start_indices=(0, 6)
                  strides=None
                ] lwf
                lwt:f64[1] = squeeze[dimensions=(1,)] lws
                lwu:f64[1,1] = slice[
                  limit_indices=(1, 8)
                  start_indices=(0, 7)
                  strides=None
                ] lwf
                lwv:f64[1] = squeeze[dimensions=(1,)] lwu
                lww:f64[1,1] = slice[
                  limit_indices=(1, 9)
                  start_indices=(0, 8)
                  strides=None
                ] lwf
                lwx:f64[1] = squeeze[dimensions=(1,)] lww
                lwy:f64[1,1] = slice[
                  limit_indices=(1, 10)
                  start_indices=(0, 9)
                  strides=None
                ] lwf
                lwz:f64[1] = squeeze[dimensions=(1,)] lwy
                lxa:f64[1,1] = slice[
                  limit_indices=(1, 11)
                  start_indices=(0, 10)
                  strides=None
                ] lwf
                lxb:f64[1] = squeeze[dimensions=(1,)] lxa
                lxc:f64[1,1] = slice[
                  limit_indices=(1, 12)
                  start_indices=(0, 11)
                  strides=None
                ] lwf
                lxd:f64[1] = squeeze[dimensions=(1,)] lxc
                lxe:f64[1,1] = slice[
                  limit_indices=(1, 13)
                  start_indices=(0, 12)
                  strides=None
                ] lwf
                lxf:f64[1] = squeeze[dimensions=(1,)] lxe
                lxg:f64[1,1] = slice[
                  limit_indices=(1, 14)
                  start_indices=(0, 13)
                  strides=None
                ] lwf
                lxh:f64[1] = squeeze[dimensions=(1,)] lxg
                lxi:f64[1,1] = slice[
                  limit_indices=(1, 15)
                  start_indices=(0, 14)
                  strides=None
                ] lwf
                lxj:f64[1] = squeeze[dimensions=(1,)] lxi
                lxk:f64[1,1] = slice[
                  limit_indices=(1, 16)
                  start_indices=(0, 15)
                  strides=None
                ] lwf
                lxl:f64[1] = squeeze[dimensions=(1,)] lxk
                lxm:f64[1,1] = slice[
                  limit_indices=(1, 17)
                  start_indices=(0, 16)
                  strides=None
                ] lwf
                lxn:f64[1] = squeeze[dimensions=(1,)] lxm
                lxo:f64[1] = reduce_sum[axes=(1,)] lwf
                lxp:f64[1,36] = add jie 1.0
                lxq:f64[36,1] = slice[
                  limit_indices=(36, 2)
                  start_indices=(0, 1)
                  strides=None
                ] dfy
                lxr:f64[36] = squeeze[dimensions=(1,)] lxq
                lxs:f64[36,1] = slice[
                  limit_indices=(36, 1)
                  start_indices=(0, 0)
                  strides=None
                ] dfy
                lxt:f64[36] = squeeze[dimensions=(1,)] lxs
                lxu:f64[36] = sub lxr lxt
                lxv:f64[1,36] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 36)
                ] lxu
                lxw:f64[1,36] = mul lxp lxv
                lxx:f64[1,36] = div lxw 2.0
                lxy:f64[36,1] = slice[
                  limit_indices=(36, 1)
                  start_indices=(0, 0)
                  strides=None
                ] dfy
                lxz:f64[36] = squeeze[dimensions=(1,)] lxy
                lya:f64[1,36] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 36)
                ] lxz
                lyb:f64[1,36] = add lxx lya
                lyc:f64[1,4] = slice[
                  limit_indices=(1, 4)
                  start_indices=(0, 0)
                  strides=None
                ] lyb
                lyd:f64[1,1] = slice[
                  limit_indices=(1, 3)
                  start_indices=(0, 2)
                  strides=None
                ] lyc
                lye:f64[1] = squeeze[dimensions=(1,)] lyd
                lyf:f64[1,1] = slice[
                  limit_indices=(1, 4)
                  start_indices=(0, 3)
                  strides=None
                ] lyc
                lyg:f64[1] = squeeze[dimensions=(1,)] lyf
                lyh:f64[1] = mul lye lyg
                lyi:f64[1,1] = slice[
                  limit_indices=(1, 1)
                  start_indices=(0, 0)
                  strides=None
                ] lyc
                lyj:f64[1] = squeeze[dimensions=(1,)] lyi
                lyk:f64[1,1] = slice[
                  limit_indices=(1, 2)
                  start_indices=(0, 1)
                  strides=None
                ] lyc
                lyl:f64[1] = squeeze[dimensions=(1,)] lyk
                lym:f64[1] = mul lyj lyl
                lyn:f64[1] = add lyh lym
                lyo:f64[1,1] = slice[
                  limit_indices=(1, 2)
                  start_indices=(0, 1)
                  strides=None
                ] lyc
                lyp:f64[1] = squeeze[dimensions=(1,)] lyo
                lyq:f64[1,1] = slice[
                  limit_indices=(1, 2)
                  start_indices=(0, 1)
                  strides=None
                ] lyc
                lyr:f64[1] = squeeze[dimensions=(1,)] lyq
                lys:f64[1] = mul lyp lyr
                lyt:f64[1,1] = slice[
                  limit_indices=(1, 3)
                  start_indices=(0, 2)
                  strides=None
                ] lyc
                lyu:f64[1] = squeeze[dimensions=(1,)] lyt
                lyv:f64[1,1] = slice[
                  limit_indices=(1, 3)
                  start_indices=(0, 2)
                  strides=None
                ] lyc
                lyw:f64[1] = squeeze[dimensions=(1,)] lyv
                lyx:f64[1] = mul lyu lyw
                lyy:f64[1] = add lys lyx
                lyz:f64[1] = sub 0.5 lyy
                lza:f64[1] = atan2 lyn lyz
                lzb:f64[1,1] = slice[
                  limit_indices=(1, 2)
                  start_indices=(0, 1)
                  strides=None
                ] lyc
                lzc:f64[1] = squeeze[dimensions=(1,)] lzb
                lzd:f64[1,1] = slice[
                  limit_indices=(1, 4)
                  start_indices=(0, 3)
                  strides=None
                ] lyc
                lze:f64[1] = squeeze[dimensions=(1,)] lzd
                lzf:f64[1] = mul lzc lze
                lzg:f64[1,1] = slice[
                  limit_indices=(1, 1)
                  start_indices=(0, 0)
                  strides=None
                ] lyc
                lzh:f64[1] = squeeze[dimensions=(1,)] lzg
                lzi:f64[1,1] = slice[
                  limit_indices=(1, 3)
                  start_indices=(0, 2)
                  strides=None
                ] lyc
                lzj:f64[1] = squeeze[dimensions=(1,)] lzi
                lzk:f64[1] = mul lzh lzj
                lzl:f64[1] = sub lzf lzk
                lzm:f64[1] = mul -2.0 lzl
                lzn:f64[1] = pjit[name=clip jaxpr=clip2] lzm -1.0 1.0
                lzo:f64[1] = custom_jvp_call[
                  call_jaxpr={ lambda ; lzp:f64[1]. let
                      lzq:f64[1] = asin lzp
                    in (lzq,) }
                  jvp_jaxpr_thunk=<function _memoize.<locals>.memoized at 0x7d8348236670>
                  num_consts=0
                  symbolic_zeros=False
                ] lzn
                lzr:f64[1,1] = slice[
                  limit_indices=(1, 2)
                  start_indices=(0, 1)
                  strides=None
                ] lyc
                lzs:f64[1] = squeeze[dimensions=(1,)] lzr
                lzt:f64[1,1] = slice[
                  limit_indices=(1, 3)
                  start_indices=(0, 2)
                  strides=None
                ] lyc
                lzu:f64[1] = squeeze[dimensions=(1,)] lzt
                lzv:f64[1] = mul lzs lzu
                lzw:f64[1,1] = slice[
                  limit_indices=(1, 1)
                  start_indices=(0, 0)
                  strides=None
                ] lyc
                lzx:f64[1] = squeeze[dimensions=(1,)] lzw
                lzy:f64[1,1] = slice[
                  limit_indices=(1, 4)
                  start_indices=(0, 3)
                  strides=None
                ] lyc
                lzz:f64[1] = squeeze[dimensions=(1,)] lzy
                maa:f64[1] = mul lzx lzz
                mab:f64[1] = add lzv maa
                mac:f64[1,1] = slice[
                  limit_indices=(1, 3)
                  start_indices=(0, 2)
                  strides=None
                ] lyc
                mad:f64[1] = squeeze[dimensions=(1,)] mac
                mae:f64[1,1] = slice[
                  limit_indices=(1, 3)
                  start_indices=(0, 2)
                  strides=None
                ] lyc
                maf:f64[1] = squeeze[dimensions=(1,)] mae
                mag:f64[1] = mul mad maf
                mah:f64[1,1] = slice[
                  limit_indices=(1, 4)
                  start_indices=(0, 3)
                  strides=None
                ] lyc
                mai:f64[1] = squeeze[dimensions=(1,)] mah
                maj:f64[1,1] = slice[
                  limit_indices=(1, 4)
                  start_indices=(0, 3)
                  strides=None
                ] lyc
                mak:f64[1] = squeeze[dimensions=(1,)] maj
                mal:f64[1] = mul mai mak
                mam:f64[1] = add mag mal
                man:f64[1] = sub 0.5 mam
                mao:f64[1] = atan2 mab man
                map:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] lza
                maq:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] lzo
                mar:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] mao
                mas:f64[1,3] = concatenate[dimension=1] map maq mar
                mat:f64[1,1] = slice[
                  limit_indices=(1, 1)
                  start_indices=(0, 0)
                  strides=(1, 1)
                ] mas
                mau:f64[1] = squeeze[dimensions=(1,)] mat
                mav:f64[1,1] = slice[
                  limit_indices=(1, 2)
                  start_indices=(0, 1)
                  strides=(1, 1)
                ] mas
                maw:f64[1] = squeeze[dimensions=(1,)] mav
                max:f64[1] = abs mau
                may:bool[1] = lt max 0.785
                maz:f64[1] = abs maw
                mba:bool[1] = lt maz 0.785
                mbb:bool[1] = and may mba
                mbc:f64[1] = pjit[name=_where jaxpr=_where7] mbb 1.0 0.0
                mbd:f64[1] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] mbc
                mbe:f64[1] = add lxo mbd
                mbf:f64[1] = sub mbe 1.0
                mbg:f64[1,36] = add jie 1.0
                mbh:f64[36,1] = slice[
                  limit_indices=(36, 2)
                  start_indices=(0, 1)
                  strides=None
                ] dfy
                mbi:f64[36] = squeeze[dimensions=(1,)] mbh
                mbj:f64[36,1] = slice[
                  limit_indices=(36, 1)
                  start_indices=(0, 0)
                  strides=None
                ] dfy
                mbk:f64[36] = squeeze[dimensions=(1,)] mbj
                mbl:f64[36] = sub mbi mbk
                mbm:f64[1,36] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 36)
                ] mbl
                mbn:f64[1,36] = mul mbg mbm
                mbo:f64[1,36] = div mbn 2.0
                mbp:f64[36,1] = slice[
                  limit_indices=(36, 1)
                  start_indices=(0, 0)
                  strides=None
                ] dfy
                mbq:f64[36] = squeeze[dimensions=(1,)] mbp
                mbr:f64[1,36] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 36)
                ] mbq
                mbs:f64[1,36] = add mbo mbr
                mbt:f64[1,4] = slice[
                  limit_indices=(1, 4)
                  start_indices=(0, 0)
                  strides=None
                ] mbs
                mbu:f64[1,1] = slice[
                  limit_indices=(1, 3)
                  start_indices=(0, 2)
                  strides=None
                ] mbt
                mbv:f64[1] = squeeze[dimensions=(1,)] mbu
                mbw:f64[1,1] = slice[
                  limit_indices=(1, 4)
                  start_indices=(0, 3)
                  strides=None
                ] mbt
                mbx:f64[1] = squeeze[dimensions=(1,)] mbw
                mby:f64[1] = mul mbv mbx
                mbz:f64[1,1] = slice[
                  limit_indices=(1, 1)
                  start_indices=(0, 0)
                  strides=None
                ] mbt
                mca:f64[1] = squeeze[dimensions=(1,)] mbz
                mcb:f64[1,1] = slice[
                  limit_indices=(1, 2)
                  start_indices=(0, 1)
                  strides=None
                ] mbt
                mcc:f64[1] = squeeze[dimensions=(1,)] mcb
                mcd:f64[1] = mul mca mcc
                mce:f64[1] = add mby mcd
                mcf:f64[1,1] = slice[
                  limit_indices=(1, 2)
                  start_indices=(0, 1)
                  strides=None
                ] mbt
                mcg:f64[1] = squeeze[dimensions=(1,)] mcf
                mch:f64[1,1] = slice[
                  limit_indices=(1, 2)
                  start_indices=(0, 1)
                  strides=None
                ] mbt
                mci:f64[1] = squeeze[dimensions=(1,)] mch
                mcj:f64[1] = mul mcg mci
                mck:f64[1,1] = slice[
                  limit_indices=(1, 3)
                  start_indices=(0, 2)
                  strides=None
                ] mbt
                mcl:f64[1] = squeeze[dimensions=(1,)] mck
                mcm:f64[1,1] = slice[
                  limit_indices=(1, 3)
                  start_indices=(0, 2)
                  strides=None
                ] mbt
                mcn:f64[1] = squeeze[dimensions=(1,)] mcm
                mco:f64[1] = mul mcl mcn
                mcp:f64[1] = add mcj mco
                mcq:f64[1] = sub 0.5 mcp
                mcr:f64[1] = atan2 mce mcq
                mcs:f64[1,1] = slice[
                  limit_indices=(1, 2)
                  start_indices=(0, 1)
                  strides=None
                ] mbt
                mct:f64[1] = squeeze[dimensions=(1,)] mcs
                mcu:f64[1,1] = slice[
                  limit_indices=(1, 4)
                  start_indices=(0, 3)
                  strides=None
                ] mbt
                mcv:f64[1] = squeeze[dimensions=(1,)] mcu
                mcw:f64[1] = mul mct mcv
                mcx:f64[1,1] = slice[
                  limit_indices=(1, 1)
                  start_indices=(0, 0)
                  strides=None
                ] mbt
                mcy:f64[1] = squeeze[dimensions=(1,)] mcx
                mcz:f64[1,1] = slice[
                  limit_indices=(1, 3)
                  start_indices=(0, 2)
                  strides=None
                ] mbt
                mda:f64[1] = squeeze[dimensions=(1,)] mcz
                mdb:f64[1] = mul mcy mda
                mdc:f64[1] = sub mcw mdb
                mdd:f64[1] = mul -2.0 mdc
                mde:f64[1] = pjit[name=clip jaxpr=clip2] mdd -1.0 1.0
                mdf:f64[1] = custom_jvp_call[
                  call_jaxpr={ lambda ; mdg:f64[1]. let
                      mdh:f64[1] = asin mdg
                    in (mdh,) }
                  jvp_jaxpr_thunk=<function _memoize.<locals>.memoized at 0x7d8348236820>
                  num_consts=0
                  symbolic_zeros=False
                ] mde
                mdi:f64[1,1] = slice[
                  limit_indices=(1, 2)
                  start_indices=(0, 1)
                  strides=None
                ] mbt
                mdj:f64[1] = squeeze[dimensions=(1,)] mdi
                mdk:f64[1,1] = slice[
                  limit_indices=(1, 3)
                  start_indices=(0, 2)
                  strides=None
                ] mbt
                mdl:f64[1] = squeeze[dimensions=(1,)] mdk
                mdm:f64[1] = mul mdj mdl
                mdn:f64[1,1] = slice[
                  limit_indices=(1, 1)
                  start_indices=(0, 0)
                  strides=None
                ] mbt
                mdo:f64[1] = squeeze[dimensions=(1,)] mdn
                mdp:f64[1,1] = slice[
                  limit_indices=(1, 4)
                  start_indices=(0, 3)
                  strides=None
                ] mbt
                mdq:f64[1] = squeeze[dimensions=(1,)] mdp
                mdr:f64[1] = mul mdo mdq
                mds:f64[1] = add mdm mdr
                mdt:f64[1,1] = slice[
                  limit_indices=(1, 3)
                  start_indices=(0, 2)
                  strides=None
                ] mbt
                mdu:f64[1] = squeeze[dimensions=(1,)] mdt
                mdv:f64[1,1] = slice[
                  limit_indices=(1, 3)
                  start_indices=(0, 2)
                  strides=None
                ] mbt
                mdw:f64[1] = squeeze[dimensions=(1,)] mdv
                mdx:f64[1] = mul mdu mdw
                mdy:f64[1,1] = slice[
                  limit_indices=(1, 4)
                  start_indices=(0, 3)
                  strides=None
                ] mbt
                mdz:f64[1] = squeeze[dimensions=(1,)] mdy
                mea:f64[1,1] = slice[
                  limit_indices=(1, 4)
                  start_indices=(0, 3)
                  strides=None
                ] mbt
                meb:f64[1] = squeeze[dimensions=(1,)] mea
                mec:f64[1] = mul mdz meb
                med:f64[1] = add mdx mec
                mee:f64[1] = sub 0.5 med
                mef:f64[1] = atan2 mds mee
                meg:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] mcr
                meh:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] mdf
                mei:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] mef
                mej:f64[1,3] = concatenate[dimension=1] meg meh mei
                mek:f64[1,1] = slice[
                  limit_indices=(1, 1)
                  start_indices=(0, 0)
                  strides=(1, 1)
                ] mej
                mel:f64[1] = squeeze[dimensions=(1,)] mek
                mem:f64[1,1] = slice[
                  limit_indices=(1, 2)
                  start_indices=(0, 1)
                  strides=(1, 1)
                ] mej
                men:f64[1] = squeeze[dimensions=(1,)] mem
                meo:f64[1] = abs mel
                mep:bool[1] = lt meo 0.785
                meq:f64[1] = abs men
                mer:bool[1] = lt meq 0.785
                mes:bool[1] = and mep mer
                met:f64[1] = pjit[name=_where jaxpr=_where7] mes 1.0 0.0
                meu:f64[1] = sub 1.0 met
                mev:f64[1,36] = add dsg 1.0
                mew:f64[36,1] = slice[
                  limit_indices=(36, 2)
                  start_indices=(0, 1)
                  strides=None
                ] dfy
                mex:f64[36] = squeeze[dimensions=(1,)] mew
                mey:f64[36,1] = slice[
                  limit_indices=(36, 1)
                  start_indices=(0, 0)
                  strides=None
                ] dfy
                mez:f64[36] = squeeze[dimensions=(1,)] mey
                mfa:f64[36] = sub mex mez
                mfb:f64[1,36] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 36)
                ] mfa
                mfc:f64[1,36] = mul mev mfb
                mfd:f64[1,36] = div mfc 2.0
                mfe:f64[36,1] = slice[
                  limit_indices=(36, 1)
                  start_indices=(0, 0)
                  strides=None
                ] dfy
                mff:f64[36] = squeeze[dimensions=(1,)] mfe
                mfg:f64[1,36] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 36)
                ] mff
                mfh:f64[1,36] = add mfd mfg
                mfi:f64[1,1] = slice[
                  limit_indices=(1, 9)
                  start_indices=(0, 8)
                  strides=None
                ] dsw
                mfj:f64[1] = squeeze[dimensions=(1,)] mfi
                mfk:f64[] = mul dgd 1.0
                mfl:f64[1,1] = slice[
                  limit_indices=(1, 35)
                  start_indices=(0, 34)
                  strides=None
                ] mfh
                mfm:f64[1] = squeeze[dimensions=(1,)] mfl
                mfn:f64[1,1] = slice[
                  limit_indices=(1, 36)
                  start_indices=(0, 35)
                  strides=None
                ] mfh
                mfo:f64[1] = squeeze[dimensions=(1,)] mfn
                mfp:f64[1] = atan2 mfo mfm
                mfq:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] dkz
                mfr:f64[] = squeeze[dimensions=(0,)] mfq
                mfs:f64[1] = div mfp 6.283185307179586
                mft:f64[1] = add mfs 0.5
                mfu:f64[1] = add mft mfr
                mfv:f64[1] = pjit[name=remainder jaxpr=remainder1] mfu 1
                mfw:bool[1] = lt mfv 0.5
                mfx:bool[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] False
                mfy:bool[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] True
                mfz:bool[1] = select_n mfw mfx mfy
                mga:f64[1] = div mfv 0.5
                mgb:f64[1] = sub mfv 0.5
                mgc:f64[1] = div mgb 0.5
                mgd:f64[1] = select_n mfz mgc mga
                mge:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] dkz
                mgf:f64[] = squeeze[dimensions=(0,)] mge
                mgg:f64[1] = div mfp 6.283185307179586
                mgh:f64[1] = add mgg 0.5
                mgi:f64[1] = add mgh mgf
                mgj:f64[1] = pjit[name=remainder jaxpr=remainder1] mgi 1
                mgk:bool[1] = lt mgj 0.5
                mgl:bool[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] False
                mgm:bool[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] True
                mgn:bool[1] = select_n mgk mgl mgm
                mgo:f64[1] = div mgj 0.5
                mgp:f64[1] = sub mgj 0.5
                mgq:f64[1] = div mgp 0.5
                mgr:f64[1] = select_n mgn mgq mgo
                mgs:f64[1] = slice[
                  limit_indices=(3,)
                  start_indices=(2,)
                  strides=None
                ] dkz
                mgt:f64[] = squeeze[dimensions=(0,)] mgs
                mgu:f64[1] = div mfp 6.283185307179586
                mgv:f64[1] = add mgu 0.5
                mgw:f64[1] = add mgv mgt
                mgx:f64[1] = pjit[name=remainder jaxpr=remainder1] mgw 1
                mgy:bool[1] = lt mgx 0.5
                mgz:bool[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] False
                mha:bool[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] True
                mhb:bool[1] = select_n mgy mgz mha
                mhc:f64[1] = div mgx 0.5
                mhd:f64[1] = sub mgx 0.5
                mhe:f64[1] = div mhd 0.5
                mhf:f64[1] = select_n mhb mhe mhc
                mhg:f64[1] = slice[
                  limit_indices=(4,)
                  start_indices=(3,)
                  strides=None
                ] dkz
                mhh:f64[] = squeeze[dimensions=(0,)] mhg
                mhi:f64[1] = div mfp 6.283185307179586
                mhj:f64[1] = add mhi 0.5
                mhk:f64[1] = add mhj mhh
                mhl:f64[1] = pjit[name=remainder jaxpr=remainder1] mhk 1
                mhm:bool[1] = lt mhl 0.5
                mhn:bool[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] False
                mho:bool[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] True
                mhp:bool[1] = select_n mhm mhn mho
                mhq:f64[1] = div mhl 0.5
                mhr:f64[1] = sub mhl 0.5
                mhs:f64[1] = div mhr 0.5
                mht:f64[1] = select_n mhp mhs mhq
                mhu:f64[8] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(8,)
                ] 0.0
                mhv:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] dge
                mhw:f64[] = squeeze[dimensions=(0,)] mhv
                mhx:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] dgf
                mhy:f64[] = squeeze[dimensions=(0,)] mhx
                mhz:f64[] = select_n True mhy mhw
                mia:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] dge
                mib:f64[] = squeeze[dimensions=(0,)] mia
                mic:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] dgg
                mid:f64[] = squeeze[dimensions=(0,)] mic
                mie:f64[] = select_n True mid mib
                mif:f64[] = mul 0.0 0.25
                mig:f64[] = atan2 mie mhz
                mih:f64[] = add mig mif
                mii:f64[] = cos mih
                mij:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] dgh
                mik:f64[] = mul mij mii
                mil:f64[] = sub mik mhz
                mim:f64[] = atan2 mie mhz
                min:f64[] = add mim mif
                mio:f64[] = sin min
                mip:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] dgh
                miq:f64[] = mul mip mio
                mir:f64[] = sub miq mie
                mis:f64[2] = slice[
                  limit_indices=(2,)
                  start_indices=(0,)
                  strides=None
                ] mhu
                mit:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] mis
                miu:f64[] = squeeze[dimensions=(0,)] mit
                miv:f64[2] = slice[
                  limit_indices=(2,)
                  start_indices=(0,)
                  strides=None
                ] mhu
                miw:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] miv
                mix:f64[] = squeeze[dimensions=(0,)] miw
                miy:f64[] = mul mfk 0.25
                miz:f64[] = add miy mil
                mja:f64[] = add miz miu
                mjb:f64[] = add mir mix
                mjc:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] mja
                mjd:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] mjb
                mje:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] 0.0
                mjf:f64[3] = concatenate[dimension=0] mjc mjd mje
                mjg:f64[3] = neg mjf
                mjh:f64[8] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(8,)
                ] 0.0
                mji:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] dge
                mjj:f64[] = squeeze[dimensions=(0,)] mji
                mjk:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] dgf
                mjl:f64[] = squeeze[dimensions=(0,)] mjk
                mjm:f64[] = select_n True mjl mjj
                mjn:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] dge
                mjo:f64[] = squeeze[dimensions=(0,)] mjn
                mjp:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] dgg
                mjq:f64[] = squeeze[dimensions=(0,)] mjp
                mjr:f64[] = select_n False mjq mjo
                mjs:f64[] = mul 0.0 0.25
                mjt:f64[] = atan2 mjr mjm
                mju:f64[] = add mjt mjs
                mjv:f64[] = cos mju
                mjw:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] dgh
                mjx:f64[] = mul mjw mjv
                mjy:f64[] = sub mjx mjm
                mjz:f64[] = atan2 mjr mjm
                mka:f64[] = add mjz mjs
                mkb:f64[] = sin mka
                mkc:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] dgh
                mkd:f64[] = mul mkc mkb
                mke:f64[] = sub mkd mjr
                mkf:f64[2] = slice[
                  limit_indices=(4,)
                  start_indices=(2,)
                  strides=None
                ] mjh
                mkg:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] mkf
                mkh:f64[] = squeeze[dimensions=(0,)] mkg
                mki:f64[2] = slice[
                  limit_indices=(4,)
                  start_indices=(2,)
                  strides=None
                ] mjh
                mkj:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] mki
                mkk:f64[] = squeeze[dimensions=(0,)] mkj
                mkl:f64[] = mul mfk 0.25
                mkm:f64[] = add mkl mjy
                mkn:f64[] = add mkm mkh
                mko:f64[] = add mke mkk
                mkp:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] mkn
                mkq:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] mko
                mkr:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] 0.0
                mks:f64[3] = concatenate[dimension=0] mkp mkq mkr
                mkt:f64[3] = neg mks
                mku:f64[8] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(8,)
                ] 0.0
                mkv:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] dge
                mkw:f64[] = squeeze[dimensions=(0,)] mkv
                mkx:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] dgf
                mky:f64[] = squeeze[dimensions=(0,)] mkx
                mkz:f64[] = select_n False mky mkw
                mla:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] dge
                mlb:f64[] = squeeze[dimensions=(0,)] mla
                mlc:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] dgg
                mld:f64[] = squeeze[dimensions=(0,)] mlc
                mle:f64[] = select_n True mld mlb
                mlf:f64[] = mul 0.0 0.25
                mlg:f64[] = atan2 mle mkz
                mlh:f64[] = add mlg mlf
                mli:f64[] = cos mlh
                mlj:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] dgh
                mlk:f64[] = mul mlj mli
                mll:f64[] = sub mlk mkz
                mlm:f64[] = atan2 mle mkz
                mln:f64[] = add mlm mlf
                mlo:f64[] = sin mln
                mlp:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] dgh
                mlq:f64[] = mul mlp mlo
                mlr:f64[] = sub mlq mle
                mls:f64[2] = slice[
                  limit_indices=(6,)
                  start_indices=(4,)
                  strides=None
                ] mku
                mlt:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] mls
                mlu:f64[] = squeeze[dimensions=(0,)] mlt
                mlv:f64[2] = slice[
                  limit_indices=(6,)
                  start_indices=(4,)
                  strides=None
                ] mku
                mlw:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] mlv
                mlx:f64[] = squeeze[dimensions=(0,)] mlw
                mly:f64[] = mul mfk 0.25
                mlz:f64[] = add mly mll
                mma:f64[] = add mlz mlu
                mmb:f64[] = add mlr mlx
                mmc:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] mma
                mmd:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] mmb
                mme:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] 0.0
                mmf:f64[3] = concatenate[dimension=0] mmc mmd mme
                mmg:f64[3] = neg mmf
                mmh:f64[8] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(8,)
                ] 0.0
                mmi:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] dge
                mmj:f64[] = squeeze[dimensions=(0,)] mmi
                mmk:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] dgf
                mml:f64[] = squeeze[dimensions=(0,)] mmk
                mmm:f64[] = select_n False mml mmj
                mmn:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] dge
                mmo:f64[] = squeeze[dimensions=(0,)] mmn
                mmp:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] dgg
                mmq:f64[] = squeeze[dimensions=(0,)] mmp
                mmr:f64[] = select_n False mmq mmo
                mms:f64[] = mul 0.0 0.25
                mmt:f64[] = atan2 mmr mmm
                mmu:f64[] = add mmt mms
                mmv:f64[] = cos mmu
                mmw:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] dgh
                mmx:f64[] = mul mmw mmv
                mmy:f64[] = sub mmx mmm
                mmz:f64[] = atan2 mmr mmm
                mna:f64[] = add mmz mms
                mnb:f64[] = sin mna
                mnc:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] dgh
                mnd:f64[] = mul mnc mnb
                mne:f64[] = sub mnd mmr
                mnf:f64[2] = slice[
                  limit_indices=(8,)
                  start_indices=(6,)
                  strides=None
                ] mmh
                mng:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] mnf
                mnh:f64[] = squeeze[dimensions=(0,)] mng
                mni:f64[2] = slice[
                  limit_indices=(8,)
                  start_indices=(6,)
                  strides=None
                ] mmh
                mnj:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] mni
                mnk:f64[] = squeeze[dimensions=(0,)] mnj
                mnl:f64[] = mul mfk 0.25
                mnm:f64[] = add mnl mmy
                mnn:f64[] = add mnm mnh
                mno:f64[] = add mne mnk
                mnp:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] mnn
                mnq:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] mno
                mnr:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] 0.0
                mns:f64[3] = concatenate[dimension=0] mnp mnq mnr
                mnt:f64[3] = neg mns
                mnu:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] dge
                mnv:f64[] = squeeze[dimensions=(0,)] mnu
                mnw:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] dgf
                mnx:f64[] = squeeze[dimensions=(0,)] mnw
                mny:f64[] = select_n True mnx mnv
                mnz:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] dge
                moa:f64[] = squeeze[dimensions=(0,)] mnz
                mob:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] dgg
                moc:f64[] = squeeze[dimensions=(0,)] mob
                mod:f64[] = select_n True moc moa
                moe:f64[] = mul 0.0 0.25
                mof:f64[] = atan2 mod mny
                mog:f64[] = add mof moe
                moh:f64[] = cos mog
                moi:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] dgh
                moj:f64[] = mul moi moh
                mok:f64[] = sub moj mny
                mol:f64[] = atan2 mod mny
                mom:f64[] = add mol moe
                mon:f64[] = sin mom
                moo:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] dgh
                mop:f64[] = mul moo mon
                moq:f64[] = sub mop mod
                mor:f64[2] = slice[
                  limit_indices=(2,)
                  start_indices=(0,)
                  strides=None
                ] dgi
                mos:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] mor
                mot:f64[] = squeeze[dimensions=(0,)] mos
                mou:f64[2] = slice[
                  limit_indices=(2,)
                  start_indices=(0,)
                  strides=None
                ] dgi
                mov:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] mou
                mow:f64[] = squeeze[dimensions=(0,)] mov
                mox:f64[] = mul mfk 0.25
                moy:f64[] = add mox mok
                moz:f64[] = add moy mot
                mpa:f64[] = add moq mow
                mpb:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] moz
                mpc:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] mpa
                mpd:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] 0.0
                mpe:f64[3] = concatenate[dimension=0] mpb mpc mpd
                mpf:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] dge
                mpg:f64[] = squeeze[dimensions=(0,)] mpf
                mph:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] dgf
                mpi:f64[] = squeeze[dimensions=(0,)] mph
                mpj:f64[] = select_n True mpi mpg
                mpk:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] dge
                mpl:f64[] = squeeze[dimensions=(0,)] mpk
                mpm:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] dgg
                mpn:f64[] = squeeze[dimensions=(0,)] mpm
                mpo:f64[] = select_n False mpn mpl
                mpp:f64[] = mul 0.0 0.25
                mpq:f64[] = atan2 mpo mpj
                mpr:f64[] = add mpq mpp
                mps:f64[] = cos mpr
                mpt:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] dgh
                mpu:f64[] = mul mpt mps
                mpv:f64[] = sub mpu mpj
                mpw:f64[] = atan2 mpo mpj
                mpx:f64[] = add mpw mpp
                mpy:f64[] = sin mpx
                mpz:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] dgh
                mqa:f64[] = mul mpz mpy
                mqb:f64[] = sub mqa mpo
                mqc:f64[2] = slice[
                  limit_indices=(4,)
                  start_indices=(2,)
                  strides=None
                ] dgi
                mqd:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] mqc
                mqe:f64[] = squeeze[dimensions=(0,)] mqd
                mqf:f64[2] = slice[
                  limit_indices=(4,)
                  start_indices=(2,)
                  strides=None
                ] dgi
                mqg:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] mqf
                mqh:f64[] = squeeze[dimensions=(0,)] mqg
                mqi:f64[] = mul mfk 0.25
                mqj:f64[] = add mqi mpv
                mqk:f64[] = add mqj mqe
                mql:f64[] = add mqb mqh
                mqm:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] mqk
                mqn:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] mql
                mqo:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] 0.0
                mqp:f64[3] = concatenate[dimension=0] mqm mqn mqo
                mqq:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] dge
                mqr:f64[] = squeeze[dimensions=(0,)] mqq
                mqs:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] dgf
                mqt:f64[] = squeeze[dimensions=(0,)] mqs
                mqu:f64[] = select_n False mqt mqr
                mqv:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] dge
                mqw:f64[] = squeeze[dimensions=(0,)] mqv
                mqx:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] dgg
                mqy:f64[] = squeeze[dimensions=(0,)] mqx
                mqz:f64[] = select_n True mqy mqw
                mra:f64[] = mul 0.0 0.25
                mrb:f64[] = atan2 mqz mqu
                mrc:f64[] = add mrb mra
                mrd:f64[] = cos mrc
                mre:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] dgh
                mrf:f64[] = mul mre mrd
                mrg:f64[] = sub mrf mqu
                mrh:f64[] = atan2 mqz mqu
                mri:f64[] = add mrh mra
                mrj:f64[] = sin mri
                mrk:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] dgh
                mrl:f64[] = mul mrk mrj
                mrm:f64[] = sub mrl mqz
                mrn:f64[2] = slice[
                  limit_indices=(6,)
                  start_indices=(4,)
                  strides=None
                ] dgi
                mro:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] mrn
                mrp:f64[] = squeeze[dimensions=(0,)] mro
                mrq:f64[2] = slice[
                  limit_indices=(6,)
                  start_indices=(4,)
                  strides=None
                ] dgi
                mrr:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] mrq
                mrs:f64[] = squeeze[dimensions=(0,)] mrr
                mrt:f64[] = mul mfk 0.25
                mru:f64[] = add mrt mrg
                mrv:f64[] = add mru mrp
                mrw:f64[] = add mrm mrs
                mrx:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] mrv
                mry:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] mrw
                mrz:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] 0.0
                msa:f64[3] = concatenate[dimension=0] mrx mry mrz
                msb:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] dge
                msc:f64[] = squeeze[dimensions=(0,)] msb
                msd:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] dgf
                mse:f64[] = squeeze[dimensions=(0,)] msd
                msf:f64[] = select_n False mse msc
                msg:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] dge
                msh:f64[] = squeeze[dimensions=(0,)] msg
                msi:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] dgg
                msj:f64[] = squeeze[dimensions=(0,)] msi
                msk:f64[] = select_n False msj msh
                msl:f64[] = mul 0.0 0.25
                msm:f64[] = atan2 msk msf
                msn:f64[] = add msm msl
                mso:f64[] = cos msn
                msp:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] dgh
                msq:f64[] = mul msp mso
                msr:f64[] = sub msq msf
                mss:f64[] = atan2 msk msf
                mst:f64[] = add mss msl
                msu:f64[] = sin mst
                msv:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] dgh
                msw:f64[] = mul msv msu
                msx:f64[] = sub msw msk
                msy:f64[2] = slice[
                  limit_indices=(8,)
                  start_indices=(6,)
                  strides=None
                ] dgi
                msz:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] msy
                mta:f64[] = squeeze[dimensions=(0,)] msz
                mtb:f64[2] = slice[
                  limit_indices=(8,)
                  start_indices=(6,)
                  strides=None
                ] dgi
                mtc:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] mtb
                mtd:f64[] = squeeze[dimensions=(0,)] mtc
                mte:f64[] = mul mfk 0.25
                mtf:f64[] = add mte msr
                mtg:f64[] = add mtf mta
                mth:f64[] = add msx mtd
                mti:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] mtg
                mtj:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] mth
                mtk:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] 0.0
                mtl:f64[3] = concatenate[dimension=0] mti mtj mtk
                mtm:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] mjg
                mtn:f64[] = squeeze[dimensions=(0,)] mtm
                mto:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] mpe
                mtp:f64[] = squeeze[dimensions=(0,)] mto
                mtq:f64[] = sub mtp mtn
                mtr:f64[] = div mtq 6.283185307179586
                mts:f64[1] = mul 6.283185307179586 mgd
                mtt:f64[1] = mul 6.283185307179586 mgd
                mtu:f64[1] = sin mtt
                mtv:f64[1] = sub mts mtu
                mtw:f64[1] = mul mtr mtv
                mtx:f64[1] = add mtw mtn
                mty:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] mjg
                mtz:f64[] = squeeze[dimensions=(0,)] mty
                mua:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] mpe
                mub:f64[] = squeeze[dimensions=(0,)] mua
                muc:f64[] = sub mub mtz
                mud:f64[] = div muc 6.283185307179586
                mue:f64[1] = mul 6.283185307179586 mgd
                muf:f64[1] = mul 6.283185307179586 mgd
                mug:f64[1] = sin muf
                muh:f64[1] = sub mue mug
                mui:f64[1] = mul mud muh
                muj:f64[1] = add mui mtz
                muk:f64[1] = mul 6.283185307179586 mgd
                mul:f64[1] = cos muk
                mum:f64[1] = sub 1.0 mul
                mun:f64[1] = mul 0.045 mum
                muo:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] mtx
                mup:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] muj
                muq:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] mun
                mur:f64[1,3] = concatenate[dimension=1] muo mup muq
                mus:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] mkt
                mut:f64[] = squeeze[dimensions=(0,)] mus
                muu:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] mqp
                muv:f64[] = squeeze[dimensions=(0,)] muu
                muw:f64[] = sub muv mut
                mux:f64[] = div muw 6.283185307179586
                muy:f64[1] = mul 6.283185307179586 mgr
                muz:f64[1] = mul 6.283185307179586 mgr
                mva:f64[1] = sin muz
                mvb:f64[1] = sub muy mva
                mvc:f64[1] = mul mux mvb
                mvd:f64[1] = add mvc mut
                mve:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] mkt
                mvf:f64[] = squeeze[dimensions=(0,)] mve
                mvg:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] mqp
                mvh:f64[] = squeeze[dimensions=(0,)] mvg
                mvi:f64[] = sub mvh mvf
                mvj:f64[] = div mvi 6.283185307179586
                mvk:f64[1] = mul 6.283185307179586 mgr
                mvl:f64[1] = mul 6.283185307179586 mgr
                mvm:f64[1] = sin mvl
                mvn:f64[1] = sub mvk mvm
                mvo:f64[1] = mul mvj mvn
                mvp:f64[1] = add mvo mvf
                mvq:f64[1] = mul 6.283185307179586 mgr
                mvr:f64[1] = cos mvq
                mvs:f64[1] = sub 1.0 mvr
                mvt:f64[1] = mul 0.045 mvs
                mvu:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] mvd
                mvv:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] mvp
                mvw:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] mvt
                mvx:f64[1,3] = concatenate[dimension=1] mvu mvv mvw
                mvy:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] mmg
                mvz:f64[] = squeeze[dimensions=(0,)] mvy
                mwa:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] msa
                mwb:f64[] = squeeze[dimensions=(0,)] mwa
                mwc:f64[] = sub mwb mvz
                mwd:f64[] = div mwc 6.283185307179586
                mwe:f64[1] = mul 6.283185307179586 mhf
                mwf:f64[1] = mul 6.283185307179586 mhf
                mwg:f64[1] = sin mwf
                mwh:f64[1] = sub mwe mwg
                mwi:f64[1] = mul mwd mwh
                mwj:f64[1] = add mwi mvz
                mwk:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] mmg
                mwl:f64[] = squeeze[dimensions=(0,)] mwk
                mwm:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] msa
                mwn:f64[] = squeeze[dimensions=(0,)] mwm
                mwo:f64[] = sub mwn mwl
                mwp:f64[] = div mwo 6.283185307179586
                mwq:f64[1] = mul 6.283185307179586 mhf
                mwr:f64[1] = mul 6.283185307179586 mhf
                mws:f64[1] = sin mwr
                mwt:f64[1] = sub mwq mws
                mwu:f64[1] = mul mwp mwt
                mwv:f64[1] = add mwu mwl
                mww:f64[1] = mul 6.283185307179586 mhf
                mwx:f64[1] = cos mww
                mwy:f64[1] = sub 1.0 mwx
                mwz:f64[1] = mul 0.045 mwy
                mxa:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] mwj
                mxb:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] mwv
                mxc:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] mwz
                mxd:f64[1,3] = concatenate[dimension=1] mxa mxb mxc
                mxe:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] mnt
                mxf:f64[] = squeeze[dimensions=(0,)] mxe
                mxg:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] mtl
                mxh:f64[] = squeeze[dimensions=(0,)] mxg
                mxi:f64[] = sub mxh mxf
                mxj:f64[] = div mxi 6.283185307179586
                mxk:f64[1] = mul 6.283185307179586 mht
                mxl:f64[1] = mul 6.283185307179586 mht
                mxm:f64[1] = sin mxl
                mxn:f64[1] = sub mxk mxm
                mxo:f64[1] = mul mxj mxn
                mxp:f64[1] = add mxo mxf
                mxq:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] mnt
                mxr:f64[] = squeeze[dimensions=(0,)] mxq
                mxs:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] mtl
                mxt:f64[] = squeeze[dimensions=(0,)] mxs
                mxu:f64[] = sub mxt mxr
                mxv:f64[] = div mxu 6.283185307179586
                mxw:f64[1] = mul 6.283185307179586 mht
                mxx:f64[1] = mul 6.283185307179586 mht
                mxy:f64[1] = sin mxx
                mxz:f64[1] = sub mxw mxy
                mya:f64[1] = mul mxv mxz
                myb:f64[1] = add mya mxr
                myc:f64[1] = mul 6.283185307179586 mht
                myd:f64[1] = cos myc
                mye:f64[1] = sub 1.0 myd
                myf:f64[1] = mul 0.045 mye
                myg:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] mxp
                myh:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] myb
                myi:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] myf
                myj:f64[1,3] = concatenate[dimension=1] myg myh myi
                myk:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] mpe
                myl:f64[] = squeeze[dimensions=(0,)] myk
                mym:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] mjg
                myn:f64[] = squeeze[dimensions=(0,)] mym
                myo:f64[] = sub myn myl
                myp:f64[] = div myo 6.283185307179586
                myq:f64[1] = mul 6.283185307179586 mgd
                myr:f64[1] = mul 6.283185307179586 mgd
                mys:f64[1] = sin myr
                myt:f64[1] = sub myq mys
                myu:f64[1] = mul myp myt
                myv:f64[1] = add myu myl
                myw:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] mpe
                myx:f64[] = squeeze[dimensions=(0,)] myw
                myy:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] mjg
                myz:f64[] = squeeze[dimensions=(0,)] myy
                mza:f64[] = sub myz myx
                mzb:f64[] = div mza 6.283185307179586
                mzc:f64[1] = mul 6.283185307179586 mgd
                mzd:f64[1] = mul 6.283185307179586 mgd
                mze:f64[1] = sin mzd
                mzf:f64[1] = sub mzc mze
                mzg:f64[1] = mul mzb mzf
                mzh:f64[1] = add mzg myx
                mzi:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] myv
                mzj:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] mzh
                mzk:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] 0.0
                mzl:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 1)
                ] mzk
                mzm:f64[1,3] = concatenate[dimension=1] mzi mzj mzl
                mzn:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] mqp
                mzo:f64[] = squeeze[dimensions=(0,)] mzn
                mzp:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] mkt
                mzq:f64[] = squeeze[dimensions=(0,)] mzp
                mzr:f64[] = sub mzq mzo
                mzs:f64[] = div mzr 6.283185307179586
                mzt:f64[1] = mul 6.283185307179586 mgr
                mzu:f64[1] = mul 6.283185307179586 mgr
                mzv:f64[1] = sin mzu
                mzw:f64[1] = sub mzt mzv
                mzx:f64[1] = mul mzs mzw
                mzy:f64[1] = add mzx mzo
                mzz:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] mqp
                naa:f64[] = squeeze[dimensions=(0,)] mzz
                nab:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] mkt
                nac:f64[] = squeeze[dimensions=(0,)] nab
                nad:f64[] = sub nac naa
                nae:f64[] = div nad 6.283185307179586
                naf:f64[1] = mul 6.283185307179586 mgr
                nag:f64[1] = mul 6.283185307179586 mgr
                nah:f64[1] = sin nag
                nai:f64[1] = sub naf nah
                naj:f64[1] = mul nae nai
                nak:f64[1] = add naj naa
                nal:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] mzy
                nam:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] nak
                nan:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] 0.0
                nao:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 1)
                ] nan
                nap:f64[1,3] = concatenate[dimension=1] nal nam nao
                naq:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] msa
                nar:f64[] = squeeze[dimensions=(0,)] naq
                nas:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] mmg
                nat:f64[] = squeeze[dimensions=(0,)] nas
                nau:f64[] = sub nat nar
                nav:f64[] = div nau 6.283185307179586
                naw:f64[1] = mul 6.283185307179586 mhf
                nax:f64[1] = mul 6.283185307179586 mhf
                nay:f64[1] = sin nax
                naz:f64[1] = sub naw nay
                nba:f64[1] = mul nav naz
                nbb:f64[1] = add nba nar
                nbc:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] msa
                nbd:f64[] = squeeze[dimensions=(0,)] nbc
                nbe:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] mmg
                nbf:f64[] = squeeze[dimensions=(0,)] nbe
                nbg:f64[] = sub nbf nbd
                nbh:f64[] = div nbg 6.283185307179586
                nbi:f64[1] = mul 6.283185307179586 mhf
                nbj:f64[1] = mul 6.283185307179586 mhf
                nbk:f64[1] = sin nbj
                nbl:f64[1] = sub nbi nbk
                nbm:f64[1] = mul nbh nbl
                nbn:f64[1] = add nbm nbd
                nbo:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] nbb
                nbp:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] nbn
                nbq:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] 0.0
                nbr:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 1)
                ] nbq
                nbs:f64[1,3] = concatenate[dimension=1] nbo nbp nbr
                nbt:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] mtl
                nbu:f64[] = squeeze[dimensions=(0,)] nbt
                nbv:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] mnt
                nbw:f64[] = squeeze[dimensions=(0,)] nbv
                nbx:f64[] = sub nbw nbu
                nby:f64[] = div nbx 6.283185307179586
                nbz:f64[1] = mul 6.283185307179586 mht
                nca:f64[1] = mul 6.283185307179586 mht
                ncb:f64[1] = sin nca
                ncc:f64[1] = sub nbz ncb
                ncd:f64[1] = mul nby ncc
                nce:f64[1] = add ncd nbu
                ncf:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] mtl
                ncg:f64[] = squeeze[dimensions=(0,)] ncf
                nch:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] mnt
                nci:f64[] = squeeze[dimensions=(0,)] nch
                ncj:f64[] = sub nci ncg
                nck:f64[] = div ncj 6.283185307179586
                ncl:f64[1] = mul 6.283185307179586 mht
                ncm:f64[1] = mul 6.283185307179586 mht
                ncn:f64[1] = sin ncm
                nco:f64[1] = sub ncl ncn
                ncp:f64[1] = mul nck nco
                ncq:f64[1] = add ncp ncg
                ncr:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] nce
                ncs:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] ncq
                nct:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] 0.0
                ncu:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 1)
                ] nct
                ncv:f64[1,3] = concatenate[dimension=1] ncr ncs ncu
                ncw:bool[1,3] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 3)
                ] mfz
                ncx:f64[1,3] = select_n ncw mur mzm
                ncy:f64[1,3] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 3)
                ] dge
                ncz:f64[1,3] = add ncy ncx
                nda:bool[1,3] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 3)
                ] mgn
                ndb:f64[1,3] = select_n nda mvx nap
                ndc:f64[1,3] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 3)
                ] dgg
                ndd:f64[1,3] = add ndc ndb
                nde:bool[1,3] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 3)
                ] mhb
                ndf:f64[1,3] = select_n nde mxd nbs
                ndg:f64[1,3] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 3)
                ] dgf
                ndh:f64[1,3] = add ndg ndf
                ndi:bool[1,3] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 3)
                ] mhp
                ndj:f64[1,3] = select_n ndi myj ncv
                ndk:f64[1,3] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 3)
                ] dgj
                ndl:f64[1,3] = add ndk ndj
                ndm:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] 0.0
                ndn:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] 0.0
                ndo:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] mfj
                ndp:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 1)
                ] ndm
                ndq:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 1)
                ] ndn
                ndr:f64[1,3] = concatenate[dimension=1] ndp ndq ndo
                nds:f64[1,1,3] = reshape[dimensions=None new_sizes=(1, 1, 3)] ndr
                ndt:f64[1,3] = squeeze[dimensions=(1,)] nds
                ndu:f64[1,4,3] = broadcast_in_dim[
                  broadcast_dimensions=(0, 2)
                  shape=(1, 4, 3)
                ] ndt
                ndv:f64[1,12] = reshape[dimensions=None new_sizes=(1, 12)] ndu
                ndw:f64[1,12] = concatenate[dimension=1] ncz ndd ndh ndl
                ndx:f64[1,12] = sub ndw ndv
                ndy:bool[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] mfz
                ndz:bool[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] mgn
                nea:bool[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] mhb
                neb:bool[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] mhp
                nec:bool[1,4] = concatenate[dimension=1] ndy ndz nea neb
                ned:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] mgd
                nee:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] mgr
                nef:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] mhf
                neg:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] mht
                neh:f64[1,4] = concatenate[dimension=1] ned nee nef neg
                nei:f64[1,8] = slice[
                  limit_indices=(1, 8)
                  start_indices=(0, 0)
                  strides=None
                ] dsw
                nej:f64[1,1] = slice[
                  limit_indices=(1, 1)
                  start_indices=(0, 0)
                  strides=None
                ] nei
                nek:f64[1] = squeeze[dimensions=(1,)] nej
                nel:f64[1,1] = slice[
                  limit_indices=(1, 5)
                  start_indices=(0, 4)
                  strides=None
                ] nei
                nem:f64[1] = squeeze[dimensions=(1,)] nel
                nen:f64[1,1] = slice[
                  limit_indices=(1, 2)
                  start_indices=(0, 1)
                  strides=None
                ] nei
                neo:f64[1] = squeeze[dimensions=(1,)] nen
                nep:f64[1,1] = slice[
                  limit_indices=(1, 6)
                  start_indices=(0, 5)
                  strides=None
                ] nei
                neq:f64[1] = squeeze[dimensions=(1,)] nep
                ner:f64[1,1] = slice[
                  limit_indices=(1, 3)
                  start_indices=(0, 2)
                  strides=None
                ] nei
                nes:f64[1] = squeeze[dimensions=(1,)] ner
                net:f64[1,1] = slice[
                  limit_indices=(1, 7)
                  start_indices=(0, 6)
                  strides=None
                ] nei
                neu:f64[1] = squeeze[dimensions=(1,)] net
                nev:f64[1,1] = slice[
                  limit_indices=(1, 4)
                  start_indices=(0, 3)
                  strides=None
                ] nei
                new:f64[1] = squeeze[dimensions=(1,)] nev
                nex:f64[1,1] = slice[
                  limit_indices=(1, 8)
                  start_indices=(0, 7)
                  strides=None
                ] nei
                ney:f64[1] = squeeze[dimensions=(1,)] nex
                nez:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] nek
                nfa:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] nem
                nfb:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] 0.0
                nfc:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] neo
                nfd:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] neq
                nfe:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] 0.0
                nff:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] nes
                nfg:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] neu
                nfh:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] 0.0
                nfi:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] new
                nfj:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] ney
                nfk:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] 0.0
                nfl:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 1)
                ] nfb
                nfm:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 1)
                ] nfe
                nfn:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 1)
                ] nfh
                nfo:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 1)
                ] nfk
                nfp:f64[1,12] = concatenate[dimension=1] nez nfa nfl nfc nfd nfm
                  nff nfg nfn nfi nfj nfo
                nfq:f64[1,12] = add ndx nfp
                nfr:f64[1,3] = slice[
                  limit_indices=(1, 3)
                  start_indices=(0, 0)
                  strides=None
                ] nfq
                nfs:f64[] = select_n False 0.1881 -0.1881
                nft:f64[] = select_n True 0.04675 -0.04675
                nfu:f64[1,1] = slice[
                  limit_indices=(1, 1)
                  start_indices=(0, 0)
                  strides=None
                ] nfr
                nfv:f64[1] = squeeze[dimensions=(1,)] nfu
                nfw:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] nfs
                nfx:f64[1] = sub nfv nfw
                nfy:f64[1,1] = slice[
                  limit_indices=(1, 2)
                  start_indices=(0, 1)
                  strides=None
                ] nfr
                nfz:f64[1] = squeeze[dimensions=(1,)] nfy
                nga:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] nft
                ngb:f64[1] = sub nfz nga
                ngc:f64[1,1] = slice[
                  limit_indices=(1, 3)
                  start_indices=(0, 2)
                  strides=None
                ] nfr
                ngd:f64[1] = squeeze[dimensions=(1,)] ngc
                nge:f64[] = select_n True 0.08 -0.08
                ngf:f64[1] = integer_pow[y=2] nfx
                ngg:f64[1] = integer_pow[y=2] ngb
                ngh:f64[1] = add ngf ngg
                ngi:f64[1] = integer_pow[y=2] ngd
                ngj:f64[1] = add ngh ngi
                ngk:f64[1] = sqrt ngj
                ngl:f64[1] = integer_pow[y=2] ngk
                ngm:f64[1] = sub ngl 0.0064
                ngn:f64[1] = sqrt ngm
                ngo:f64[1] = integer_pow[y=2] ngb
                ngp:f64[1] = integer_pow[y=2] ngd
                ngq:f64[1] = add ngo ngp
                ngr:f64[] = integer_pow[y=2] nge
                ngs:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] ngr
                ngt:f64[1] = sub ngq ngs
                ngu:f64[1] = sqrt ngt
                ngv:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] nge
                ngw:f64[1] = mul ngd ngv
                ngx:f64[1] = mul ngb ngu
                ngy:f64[1] = add ngw ngx
                ngz:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] nge
                nha:f64[1] = mul ngb ngz
                nhb:f64[1] = mul ngd ngu
                nhc:f64[1] = sub nha nhb
                nhd:f64[1] = atan2 ngy nhc
                nhe:f64[1] = integer_pow[y=2] ngn
                nhf:f64[1] = sub 0.090738 nhe
                nhg:f64[] = abs 0.045369
                nhh:f64[] = mul 2.0 nhg
                nhi:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] nhh
                nhj:f64[1] = div nhf nhi
                nhk:f64[1] = slice[
                  limit_indices=(3,)
                  start_indices=(2,)
                  strides=None
                ] dgk
                nhl:f64[] = squeeze[dimensions=(0,)] nhk
                nhm:f64[1] = slice[
                  limit_indices=(3,)
                  start_indices=(2,)
                  strides=None
                ] dgl
                nhn:f64[] = squeeze[dimensions=(0,)] nhm
                nho:f64[] = add 3.141592653589793 nhl
                nhp:f64[] = cos nho
                nhq:f64[] = add 3.141592653589793 nhn
                nhr:f64[] = cos nhq
                nhs:f64[1] = pjit[name=clip jaxpr=clip] nhj nhp nhr
                nht:f64[1] = acos nhs
                nhu:f64[1] = sub 3.141592653589793 nht
                nhv:f64[1] = neg nhu
                nhw:f64[1] = sin nhd
                nhx:f64[1] = mul ngb nhw
                nhy:f64[1] = cos nhd
                nhz:f64[1] = mul ngd nhy
                nia:f64[1] = sub nhx nhz
                nib:f64[1] = sin nhv
                nic:f64[1] = mul -0.213 nib
                nid:f64[1] = cos nhv
                nie:f64[1] = mul -0.213 nid
                nif:f64[1] = add -0.213 nie
                nig:f64[1] = mul nic nia
                nih:f64[1] = mul nif nfx
                nii:f64[1] = add nig nih
                nij:f64[1] = mul nic nfx
                nik:f64[1] = mul nif nia
                nil:f64[1] = sub nij nik
                nim:f64[1] = atan2 nii nil
                nin:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] nhd
                nio:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] nim
                nip:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] nhv
                niq:f64[1,3] = concatenate[dimension=1] nin nio nip
                nir:f64[1,3] = slice[
                  limit_indices=(1, 6)
                  start_indices=(0, 3)
                  strides=None
                ] nfq
                nis:f64[] = select_n False 0.1881 -0.1881
                nit:f64[] = select_n False 0.04675 -0.04675
                niu:f64[1,1] = slice[
                  limit_indices=(1, 1)
                  start_indices=(0, 0)
                  strides=None
                ] nir
                niv:f64[1] = squeeze[dimensions=(1,)] niu
                niw:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] nis
                nix:f64[1] = sub niv niw
                niy:f64[1,1] = slice[
                  limit_indices=(1, 2)
                  start_indices=(0, 1)
                  strides=None
                ] nir
                niz:f64[1] = squeeze[dimensions=(1,)] niy
                nja:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] nit
                njb:f64[1] = sub niz nja
                njc:f64[1,1] = slice[
                  limit_indices=(1, 3)
                  start_indices=(0, 2)
                  strides=None
                ] nir
                njd:f64[1] = squeeze[dimensions=(1,)] njc
                nje:f64[] = select_n False 0.08 -0.08
                njf:f64[1] = integer_pow[y=2] nix
                njg:f64[1] = integer_pow[y=2] njb
                njh:f64[1] = add njf njg
                nji:f64[1] = integer_pow[y=2] njd
                njj:f64[1] = add njh nji
                njk:f64[1] = sqrt njj
                njl:f64[1] = integer_pow[y=2] njk
                njm:f64[1] = sub njl 0.0064
                njn:f64[1] = sqrt njm
                njo:f64[1] = integer_pow[y=2] njb
                njp:f64[1] = integer_pow[y=2] njd
                njq:f64[1] = add njo njp
                njr:f64[] = integer_pow[y=2] nje
                njs:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] njr
                njt:f64[1] = sub njq njs
                nju:f64[1] = sqrt njt
                njv:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] nje
                njw:f64[1] = mul njd njv
                njx:f64[1] = mul njb nju
                njy:f64[1] = add njw njx
                njz:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] nje
                nka:f64[1] = mul njb njz
                nkb:f64[1] = mul njd nju
                nkc:f64[1] = sub nka nkb
                nkd:f64[1] = atan2 njy nkc
                nke:f64[1] = integer_pow[y=2] njn
                nkf:f64[1] = sub 0.090738 nke
                nkg:f64[] = abs 0.045369
                nkh:f64[] = mul 2.0 nkg
                nki:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] nkh
                nkj:f64[1] = div nkf nki
                nkk:f64[1] = slice[
                  limit_indices=(3,)
                  start_indices=(2,)
                  strides=None
                ] dgk
                nkl:f64[] = squeeze[dimensions=(0,)] nkk
                nkm:f64[1] = slice[
                  limit_indices=(3,)
                  start_indices=(2,)
                  strides=None
                ] dgl
                nkn:f64[] = squeeze[dimensions=(0,)] nkm
                nko:f64[] = add 3.141592653589793 nkl
                nkp:f64[] = cos nko
                nkq:f64[] = add 3.141592653589793 nkn
                nkr:f64[] = cos nkq
                nks:f64[1] = pjit[name=clip jaxpr=clip] nkj nkp nkr
                nkt:f64[1] = acos nks
                nku:f64[1] = sub 3.141592653589793 nkt
                nkv:f64[1] = neg nku
                nkw:f64[1] = sin nkd
                nkx:f64[1] = mul njb nkw
                nky:f64[1] = cos nkd
                nkz:f64[1] = mul njd nky
                nla:f64[1] = sub nkx nkz
                nlb:f64[1] = sin nkv
                nlc:f64[1] = mul -0.213 nlb
                nld:f64[1] = cos nkv
                nle:f64[1] = mul -0.213 nld
                nlf:f64[1] = add -0.213 nle
                nlg:f64[1] = mul nlc nla
                nlh:f64[1] = mul nlf nix
                nli:f64[1] = add nlg nlh
                nlj:f64[1] = mul nlc nix
                nlk:f64[1] = mul nlf nla
                nll:f64[1] = sub nlj nlk
                nlm:f64[1] = atan2 nli nll
                nln:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] nkd
                nlo:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] nlm
                nlp:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] nkv
                nlq:f64[1,3] = concatenate[dimension=1] nln nlo nlp
                nlr:f64[1,3] = slice[
                  limit_indices=(1, 9)
                  start_indices=(0, 6)
                  strides=None
                ] nfq
                nls:f64[] = select_n True 0.1881 -0.1881
                nlt:f64[] = select_n True 0.04675 -0.04675
                nlu:f64[1,1] = slice[
                  limit_indices=(1, 1)
                  start_indices=(0, 0)
                  strides=None
                ] nlr
                nlv:f64[1] = squeeze[dimensions=(1,)] nlu
                nlw:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] nls
                nlx:f64[1] = sub nlv nlw
                nly:f64[1,1] = slice[
                  limit_indices=(1, 2)
                  start_indices=(0, 1)
                  strides=None
                ] nlr
                nlz:f64[1] = squeeze[dimensions=(1,)] nly
                nma:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] nlt
                nmb:f64[1] = sub nlz nma
                nmc:f64[1,1] = slice[
                  limit_indices=(1, 3)
                  start_indices=(0, 2)
                  strides=None
                ] nlr
                nmd:f64[1] = squeeze[dimensions=(1,)] nmc
                nme:f64[] = select_n True 0.08 -0.08
                nmf:f64[1] = integer_pow[y=2] nlx
                nmg:f64[1] = integer_pow[y=2] nmb
                nmh:f64[1] = add nmf nmg
                nmi:f64[1] = integer_pow[y=2] nmd
                nmj:f64[1] = add nmh nmi
                nmk:f64[1] = sqrt nmj
                nml:f64[1] = integer_pow[y=2] nmk
                nmm:f64[1] = sub nml 0.0064
                nmn:f64[1] = sqrt nmm
                nmo:f64[1] = integer_pow[y=2] nmb
                nmp:f64[1] = integer_pow[y=2] nmd
                nmq:f64[1] = add nmo nmp
                nmr:f64[] = integer_pow[y=2] nme
                nms:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] nmr
                nmt:f64[1] = sub nmq nms
                nmu:f64[1] = sqrt nmt
                nmv:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] nme
                nmw:f64[1] = mul nmd nmv
                nmx:f64[1] = mul nmb nmu
                nmy:f64[1] = add nmw nmx
                nmz:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] nme
                nna:f64[1] = mul nmb nmz
                nnb:f64[1] = mul nmd nmu
                nnc:f64[1] = sub nna nnb
                nnd:f64[1] = atan2 nmy nnc
                nne:f64[1] = integer_pow[y=2] nmn
                nnf:f64[1] = sub 0.090738 nne
                nng:f64[] = abs 0.045369
                nnh:f64[] = mul 2.0 nng
                nni:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] nnh
                nnj:f64[1] = div nnf nni
                nnk:f64[1] = slice[
                  limit_indices=(3,)
                  start_indices=(2,)
                  strides=None
                ] dgk
                nnl:f64[] = squeeze[dimensions=(0,)] nnk
                nnm:f64[1] = slice[
                  limit_indices=(3,)
                  start_indices=(2,)
                  strides=None
                ] dgl
                nnn:f64[] = squeeze[dimensions=(0,)] nnm
                nno:f64[] = add 3.141592653589793 nnl
                nnp:f64[] = cos nno
                nnq:f64[] = add 3.141592653589793 nnn
                nnr:f64[] = cos nnq
                nns:f64[1] = pjit[name=clip jaxpr=clip] nnj nnp nnr
                nnt:f64[1] = acos nns
                nnu:f64[1] = sub 3.141592653589793 nnt
                nnv:f64[1] = neg nnu
                nnw:f64[1] = sin nnd
                nnx:f64[1] = mul nmb nnw
                nny:f64[1] = cos nnd
                nnz:f64[1] = mul nmd nny
                noa:f64[1] = sub nnx nnz
                nob:f64[1] = sin nnv
                noc:f64[1] = mul -0.213 nob
                nod:f64[1] = cos nnv
                noe:f64[1] = mul -0.213 nod
                nof:f64[1] = add -0.213 noe
                nog:f64[1] = mul noc noa
                noh:f64[1] = mul nof nlx
                noi:f64[1] = add nog noh
                noj:f64[1] = mul noc nlx
                nok:f64[1] = mul nof noa
                nol:f64[1] = sub noj nok
                nom:f64[1] = atan2 noi nol
                non:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] nnd
                noo:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] nom
                nop:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] nnv
                noq:f64[1,3] = concatenate[dimension=1] non noo nop
                nor:f64[1,3] = slice[
                  limit_indices=(1, 12)
                  start_indices=(0, 9)
                  strides=None
                ] nfq
                nos:f64[] = select_n True 0.1881 -0.1881
                not:f64[] = select_n False 0.04675 -0.04675
                nou:f64[1,1] = slice[
                  limit_indices=(1, 1)
                  start_indices=(0, 0)
                  strides=None
                ] nor
                nov:f64[1] = squeeze[dimensions=(1,)] nou
                now:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] nos
                nox:f64[1] = sub nov now
                noy:f64[1,1] = slice[
                  limit_indices=(1, 2)
                  start_indices=(0, 1)
                  strides=None
                ] nor
                noz:f64[1] = squeeze[dimensions=(1,)] noy
                npa:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] not
                npb:f64[1] = sub noz npa
                npc:f64[1,1] = slice[
                  limit_indices=(1, 3)
                  start_indices=(0, 2)
                  strides=None
                ] nor
                npd:f64[1] = squeeze[dimensions=(1,)] npc
                npe:f64[] = select_n False 0.08 -0.08
                npf:f64[1] = integer_pow[y=2] nox
                npg:f64[1] = integer_pow[y=2] npb
                nph:f64[1] = add npf npg
                npi:f64[1] = integer_pow[y=2] npd
                npj:f64[1] = add nph npi
                npk:f64[1] = sqrt npj
                npl:f64[1] = integer_pow[y=2] npk
                npm:f64[1] = sub npl 0.0064
                npn:f64[1] = sqrt npm
                npo:f64[1] = integer_pow[y=2] npb
                npp:f64[1] = integer_pow[y=2] npd
                npq:f64[1] = add npo npp
                npr:f64[] = integer_pow[y=2] npe
                nps:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] npr
                npt:f64[1] = sub npq nps
                npu:f64[1] = sqrt npt
                npv:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] npe
                npw:f64[1] = mul npd npv
                npx:f64[1] = mul npb npu
                npy:f64[1] = add npw npx
                npz:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] npe
                nqa:f64[1] = mul npb npz
                nqb:f64[1] = mul npd npu
                nqc:f64[1] = sub nqa nqb
                nqd:f64[1] = atan2 npy nqc
                nqe:f64[1] = integer_pow[y=2] npn
                nqf:f64[1] = sub 0.090738 nqe
                nqg:f64[] = abs 0.045369
                nqh:f64[] = mul 2.0 nqg
                nqi:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] nqh
                nqj:f64[1] = div nqf nqi
                nqk:f64[1] = slice[
                  limit_indices=(3,)
                  start_indices=(2,)
                  strides=None
                ] dgk
                nql:f64[] = squeeze[dimensions=(0,)] nqk
                nqm:f64[1] = slice[
                  limit_indices=(3,)
                  start_indices=(2,)
                  strides=None
                ] dgl
                nqn:f64[] = squeeze[dimensions=(0,)] nqm
                nqo:f64[] = add 3.141592653589793 nql
                nqp:f64[] = cos nqo
                nqq:f64[] = add 3.141592653589793 nqn
                nqr:f64[] = cos nqq
                nqs:f64[1] = pjit[name=clip jaxpr=clip] nqj nqp nqr
                nqt:f64[1] = acos nqs
                nqu:f64[1] = sub 3.141592653589793 nqt
                nqv:f64[1] = neg nqu
                nqw:f64[1] = sin nqd
                nqx:f64[1] = mul npb nqw
                nqy:f64[1] = cos nqd
                nqz:f64[1] = mul npd nqy
                nra:f64[1] = sub nqx nqz
                nrb:f64[1] = sin nqv
                nrc:f64[1] = mul -0.213 nrb
                nrd:f64[1] = cos nqv
                nre:f64[1] = mul -0.213 nrd
                nrf:f64[1] = add -0.213 nre
                nrg:f64[1] = mul nrc nra
                nrh:f64[1] = mul nrf nox
                nri:f64[1] = add nrg nrh
                nrj:f64[1] = mul nrc nox
                nrk:f64[1] = mul nrf nra
                nrl:f64[1] = sub nrj nrk
                nrm:f64[1] = atan2 nri nrl
                nrn:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] nqd
                nro:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] nrm
                nrp:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 1)
                ] nqv
                nrq:f64[1,3] = concatenate[dimension=1] nrn nro nrp
                nrr:f64[1,12] = concatenate[dimension=1] niq nlq noq nrq
                nrs:f64[1,3] = reshape[dimensions=None new_sizes=(1, 3)] dgl
                nrt:f64[3] = squeeze[dimensions=(0,)] nrs
                nru:f64[4,3] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(4, 3)
                ] nrt
                nrv:f64[12] = reshape[dimensions=None new_sizes=(12,)] nru
                nrw:f64[1,3] = reshape[dimensions=None new_sizes=(1, 3)] dgk
                nrx:f64[3] = squeeze[dimensions=(0,)] nrw
                nry:f64[4,3] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(4, 3)
                ] nrx
                nrz:f64[12] = reshape[dimensions=None new_sizes=(12,)] nry
                nsa:f64[1,12] = pjit[name=clip jaxpr=clip1] nrr nrv nrz
                nsb:f64[12] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(12,)
                ] 0.0
                nsc:i64[1,3] = reshape[dimensions=None new_sizes=(1, 3)] dla
                nsd:i64[3] = squeeze[dimensions=(0,)] nsc
                nse:i64[4,3] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(4, 3)
                ] nsd
                nsf:i64[12] = reshape[dimensions=None new_sizes=(12,)] nse
                nsg:f64[12] = convert_element_type[
                  new_dtype=float64
                  weak_type=True
                ] nsf
                nsh:f64[12] = mul nsg 1.4
                nsi:f64[1,3] = reshape[dimensions=None new_sizes=(1, 3)] dlb
                nsj:f64[3] = squeeze[dimensions=(0,)] nsi
                nsk:f64[4,3] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(4, 3)
                ] nsj
                nsl:f64[12] = reshape[dimensions=None new_sizes=(12,)] nsk
                nsm:f64[1,12] = cond[
                  branches=(
                    { lambda ; nsn:f64[12] nso:f64[12] nsp:f64[1,36] nsq:f64[1,12]
                        nsr:f64[12] nss:f64[12] nst:f64[12]. let
                        nsu:f64[1,12] = broadcast_in_dim[
                          broadcast_dimensions=(1,)
                          shape=(1, 12)
                        ] nso
                      in (nsu,) }
                    { lambda ; nsv:f64[12] nsw:f64[12] nsx:f64[1,36] nsy:f64[1,12]
                        nsz:f64[12] nta:f64[12] ntb:f64[12]. let
                        ntc:f64[1,12] = slice[
                          limit_indices=(1, 16)
                          start_indices=(0, 4)
                          strides=None
                        ] nsx
                        ntd:f64[1,12] = slice[
                          limit_indices=(1, 34)
                          start_indices=(0, 22)
                          strides=None
                        ] nsx
                        nte:f64[1,12] = sub nsy ntc
                        ntf:f64[12] = convert_element_type[
                          new_dtype=float64
                          weak_type=False
                        ] nta
                        ntg:f64[1,12] = broadcast_in_dim[
                          broadcast_dimensions=(1,)
                          shape=(1, 12)
                        ] ntf
                        nth:f64[1,12] = mul ntg nte
                        nti:f64[1,12] = broadcast_in_dim[
                          broadcast_dimensions=(1,)
                          shape=(1, 12)
                        ] nsz
                        ntj:f64[1,12] = sub nti ntd
                        ntk:f64[1,12] = broadcast_in_dim[
                          broadcast_dimensions=(1,)
                          shape=(1, 12)
                        ] ntb
                        ntl:f64[1,12] = mul ntk ntj
                        ntm:f64[1,12] = add nth ntl
                        ntn:f64[1,12] = sub nsy ntc
                        nto:bool[1,12] = ne ntn 0.0
                        ntp:f64[1,12] = sub nsy ntc
                        ntq:f64[1,12] = pjit[name=_where jaxpr=_where8] nto ntp 1
                        ntr:f64[1,12] = broadcast_in_dim[
                          broadcast_dimensions=(1,)
                          shape=(1, 12)
                        ] nsv
                        nts:bool[1,12] = gt ntm ntr
                        ntt:f64[1,12] = broadcast_in_dim[
                          broadcast_dimensions=(1,)
                          shape=(1, 12)
                        ] nsz
                        ntu:f64[1,12] = sub ntt ntd
                        ntv:f64[1,12] = broadcast_in_dim[
                          broadcast_dimensions=(1,)
                          shape=(1, 12)
                        ] ntb
                        ntw:f64[1,12] = mul ntv ntu
                        ntx:f64[1,12] = broadcast_in_dim[
                          broadcast_dimensions=(1,)
                          shape=(1, 12)
                        ] nsv
                        nty:f64[1,12] = sub ntx ntw
                        ntz:f64[1,12] = div nty ntq
                        nua:f64[1,12] = pjit[name=_where jaxpr=_where9] nts ntz nta
                        nub:f64[12] = neg nsv
                        nuc:f64[1,12] = broadcast_in_dim[
                          broadcast_dimensions=(1,)
                          shape=(1, 12)
                        ] nub
                        nud:bool[1,12] = lt ntm nuc
                        nue:f64[12] = neg nsv
                        nuf:f64[1,12] = broadcast_in_dim[
                          broadcast_dimensions=(1,)
                          shape=(1, 12)
                        ] nsz
                        nug:f64[1,12] = sub nuf ntd
                        nuh:f64[1,12] = broadcast_in_dim[
                          broadcast_dimensions=(1,)
                          shape=(1, 12)
                        ] ntb
                        nui:f64[1,12] = mul nuh nug
                        nuj:f64[1,12] = broadcast_in_dim[
                          broadcast_dimensions=(1,)
                          shape=(1, 12)
                        ] nue
                        nuk:f64[1,12] = sub nuj nui
                        nul:f64[1,12] = div nuk ntq
                        num:f64[1,12] = pjit[name=_where jaxpr=_where10] nud nul
                          nua
                      in (num,) }
                  )
                  linear=(False, False, False, False, False, False, False)
                ] 1 dgo nsh mfh nsa nsb nsh nsl
                nun:f64[1,144] = slice[
                  limit_indices=(1, 144)
                  start_indices=(0, 0)
                  strides=None
                ] dly
                nuo:f64[1,180] = concatenate[dimension=1] jie nun
                nup:f64[1,12] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 12)
                ] nsb
                nuq:f64[1,12] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 12)
                ] nsl
              in (dsx, dsy, dsz, dta, dtb, dtc, dtd, dte, dtf, dtg, dth, dti, dtj,
                dtk, dtl, dtm, dtn, dto, dtp, dtq, dtr, dts, nuo, meu, jit, lxn,
                lxf, lwx, lwv, lxh, lxj, lxl, lwh, lxd, lwz, lwl, lwn, lwr, lxb,
                lwj, lwp, lwt, jfp, nsa, nup, nsm, nuq, nec, neh, nfq, dna, dnb,
                dnc, dnd, dne, dnf, dng, dnh, dni, dnj, dnk, dnl, dnm, dnn, dno,
                dnp, dnq, dnr, dns, dnt, dnu, dnv, dnw, dnx, dny, dnz, doa, dob,
                doc, dod, doe, dof, dog, doh, doi, doj, dok, dol, dom, don, doo,
                dop, doq, dor, dos, dot, dou, dov, dow, dox, doy, doz, dpa, dpb,
                dpc, dsw, dly, mbf) }
            length=1
            linear=(False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False)
            num_carry=107
            num_consts=143
            reverse=False
            unroll=1
          ] cou cov cow cox coy coz cpa cpb cpc cpd cpe dbh cpf cpg cph cpi cpj cpk
            cpl cpm cpn cpo cpp cpq cpr cps cpt cpu cpv cpw cpx cpy cpz cqa cqb cqc
            cqd cqe cqf cqg cqh cqi cqj cqk cql cqm cqn cqo cqp cqq cqr cqs cqt cqu
            cqv cqw cqx cqy cqz cra crb crc crd cre crf crg crh cri crj crk crl crm
            crn cro crp crq crr crs crt cru crv crw crx cry crz csa csb csc csd cse
            csf csg csh csi csj csk csl csm csn cso csp csq csr css cst csu csv csw
            csx csy csz cta ctb ctc ctd cte ctf ctg cth cti ctj ctk ctl ctm ctn cto
            ctp ctq ctr cts ctt ctu ctv ctw ctx cty ctz cua cub cuc cud cue cuf cvw
            cvx cvy cvz cwa cwb cwc cwd cwe cwf cwg cwh cwi cwj cwk cwl cwm cwn cwo
            cws cwt cwv cww dbk cwz cxa cxb cxc cxd cxe cxf cxg cxh cxi cxj cxk cxl
            cxm cxn cxo cxp cxq cxr cxs cxt cxu cxv cxw cxx cxy cxz cya cyb cyc cyd
            cye cyf cyg cyh cyi cyj cyk cyl cym cyn cyo cyp cyq cyr cys cyt cyu cyv
            cyw cyx cyy cyz cza czb czc czd cze czf czg czh czi czj czk czl czm czn
            czo czp czq czr czs czt czu czv czw czx czy czz daa dbj dad dae
          nur:f64[1] = reduce_sum[axes=(0,)] dfo
          nus:f64[1] = add dfl 1.0
          nut:bool[1] = ge nus 1000.0
          nuu:bool[1] = and nut True
          nuv:f64[1] = pjit[
            name=_where
            jaxpr={ lambda ; nuw:bool[1] nux:f64[] nuy:f64[1]. let
                nuz:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] nux
                nva:f64[1] = select_n nuw nuy nuz
              in (nva,) }
          ] nuu 1.0 dci
          nvb:bool[1] = ge nus 1000.0
          nvc:f64[1] = sub 1.0 dci
          nvd:f64[1] = pjit[
            name=_where
            jaxpr={ lambda ; nve:bool[1] nvf:f64[1] nvg:f64[]. let
                nvh:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] nvg
                nvi:f64[1] = select_n nve nvh nvf
              in (nvi,) }
          ] nvb nvc 0.0
          nvj:f64[1,1] = reshape[dimensions=None new_sizes=(1, 1)] nuv
          nvk:f64[1,19] = pjit[
            name=_where
            jaxpr={ lambda ; nvl:f64[1,1] nvm:f64[1,19] nvn:f64[1,19]. let
                nvo:bool[1,1] = ne nvl 0.0
                nvp:bool[1] = squeeze[dimensions=(1,)] nvo
                nvq:bool[1,19] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 19)
                ] nvp
                nvr:f64[1,19] = select_n nvq nvn nvm
              in (nvr,) }
          ] nvj def dbl
          nvs:f64[1,1] = reshape[dimensions=None new_sizes=(1, 1)] nuv
          nvt:f64[1,18] = pjit[name=_where jaxpr=_where1] nvs deg dbm
          nvu:f64[1,1,1] = reshape[dimensions=None new_sizes=(1, 1, 1)] nuv
          nvv:f64[1,13,3] = pjit[name=_where jaxpr=_where2] nvu deh dbn
          nvw:f64[1,1,1] = reshape[dimensions=None new_sizes=(1, 1, 1)] nuv
          nvx:f64[1,13,4] = pjit[name=_where jaxpr=_where3] nvw dei dbo
          nvy:f64[1,1,1] = reshape[dimensions=None new_sizes=(1, 1, 1)] nuv
          nvz:f64[1,13,3] = pjit[name=_where jaxpr=_where2] nvy dej dbp
          nwa:f64[1,1,1] = reshape[dimensions=None new_sizes=(1, 1, 1)] nuv
          nwb:f64[1,13,3] = pjit[name=_where jaxpr=_where2] nwa dek dbq
          nwc:f64[1,1,1] = reshape[dimensions=None new_sizes=(1, 1, 1)] nuv
          nwd:f64[1,13,3] = pjit[name=_where jaxpr=_where2] nwc del dbr
          nwe:f64[1,1,1] = reshape[dimensions=None new_sizes=(1, 1, 1)] nuv
          nwf:f64[1,13,3] = pjit[name=_where jaxpr=_where2] nwe dem dbs
          nwg:f64[1,1,1] = reshape[dimensions=None new_sizes=(1, 1, 1)] nuv
          nwh:f64[1,13,4] = pjit[name=_where jaxpr=_where3] nwg den dbt
          nwi:f64[1,1,1,1] = reshape[dimensions=None new_sizes=(1, 1, 1, 1)] nuv
          nwj:f64[1,13,3,3] = pjit[
            name=_where
            jaxpr={ lambda ; nwk:f64[1,1,1,1] nwl:f64[1,13,3,3] nwm:f64[1,13,3,3]. let
                nwn:bool[1,1,1,1] = ne nwk 0.0
                nwo:bool[1] = squeeze[dimensions=(1, 2, 3)] nwn
                nwp:bool[1,13,3,3] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 13, 3, 3)
                ] nwo
                nwq:f64[1,13,3,3] = select_n nwp nwm nwl
              in (nwq,) }
          ] nwi deo dbu
          nwr:f64[1,1] = reshape[dimensions=None new_sizes=(1, 1)] nuv
          nws:f64[1,13] = pjit[
            name=_where
            jaxpr={ lambda ; nwt:f64[1,1] nwu:f64[1,13] nwv:f64[1,13]. let
                nww:bool[1,1] = ne nwt 0.0
                nwx:bool[1] = squeeze[dimensions=(1,)] nww
                nwy:bool[1,13] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 13)
                ] nwx
                nwz:f64[1,13] = select_n nwy nwv nwu
              in (nwz,) }
          ] nwr dep dbv
          nxa:f64[1,1,1] = reshape[dimensions=None new_sizes=(1, 1, 1)] nuv
          nxb:f64[1,13,3] = pjit[name=_where jaxpr=_where2] nxa deq dbw
          nxc:f64[1,1,1] = reshape[dimensions=None new_sizes=(1, 1, 1)] nuv
          nxd:f64[1,13,3] = pjit[name=_where jaxpr=_where2] nxc der dbx
          nxe:f64[1,1,1] = reshape[dimensions=None new_sizes=(1, 1, 1)] nuv
          nxf:f64[1,18,3] = pjit[name=_where jaxpr=_where4] nxe des dby
          nxg:f64[1,1,1] = reshape[dimensions=None new_sizes=(1, 1, 1)] nuv
          nxh:f64[1,18,3] = pjit[name=_where jaxpr=_where4] nxg det dbz
          nxi:f64[1,1,1] = reshape[dimensions=None new_sizes=(1, 1, 1)] nuv
          nxj:f64[1,18,3] = pjit[name=_where jaxpr=_where4] nxi deu dca
          nxk:f64[1,1,1] = reshape[dimensions=None new_sizes=(1, 1, 1)] nuv
          nxl:f64[1,18,3] = pjit[name=_where jaxpr=_where4] nxk dev dcb
          nxm:f64[1,1,1] = reshape[dimensions=None new_sizes=(1, 1, 1)] nuv
          nxn:f64[1,18,18] = pjit[name=_where jaxpr=_where5] nxm dew dcc
          nxo:f64[1,1,1] = reshape[dimensions=None new_sizes=(1, 1, 1)] nuv
          nxp:f64[1,18,18] = pjit[name=_where jaxpr=_where5] nxo dex dcd
          nxq:f64[1,1] = reshape[dimensions=None new_sizes=(1, 1)] nuv
          nxr:f64[1,18] = pjit[name=_where jaxpr=_where1] nxq dfb dce
          nxs:f64[1,1] = reshape[dimensions=None new_sizes=(1, 1)] nuv
          nxt:f64[1,18] = pjit[name=_where jaxpr=_where1] nxs dfc dcf
          nxu:f64[1,1] = reshape[dimensions=None new_sizes=(1, 1)] nuv
          nxv:f64[1,18] = pjit[name=_where jaxpr=_where1] nxu dfe dcg
          nxw:f64[1,1] = reshape[dimensions=None new_sizes=(1, 1)] nuv
          nxx:f64[1,180] = pjit[
            name=_where
            jaxpr={ lambda ; nxy:f64[1,1] nxz:f64[1,180] nya:f64[1,180]. let
                nyb:bool[1,1] = ne nxy 0.0
                nyc:bool[1] = squeeze[dimensions=(1,)] nyb
                nyd:bool[1,180] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(1, 180)
                ] nyc
                nye:f64[1,180] = select_n nyd nya nxz
              in (nye,) }
          ] nxw dee dch
          nyf:f64[1] = pjit[name=_where jaxpr=_where] nuv ddl dcj
          nyg:f64[1] = pjit[name=_where jaxpr=_where] nuv ddm dck
          nyh:f64[1] = pjit[name=_where jaxpr=_where] nuv ddn dcl
          nyi:f64[1] = pjit[name=_where jaxpr=_where] nuv ddo dcm
          nyj:f64[1] = pjit[name=_where jaxpr=_where] nuv ddp dcn
          nyk:f64[1] = pjit[name=_where jaxpr=_where] nuv ddq dco
          nyl:f64[1] = pjit[name=_where jaxpr=_where] nuv ddr dcp
          nym:f64[1] = pjit[name=_where jaxpr=_where] nuv dds dcq
          nyn:f64[1] = pjit[name=_where jaxpr=_where] nuv ddt dcr
          nyo:f64[1] = pjit[name=_where jaxpr=_where] nuv ddu dcs
          nyp:f64[1] = pjit[name=_where jaxpr=_where] nuv ddv dct
          nyq:f64[1] = pjit[name=_where jaxpr=_where] nuv ddw dcu
          nyr:f64[1] = pjit[name=_where jaxpr=_where] nuv ddx dcv
          nys:f64[1] = pjit[name=_where jaxpr=_where] nuv ddy dcw
          nyt:f64[1] = pjit[name=_where jaxpr=_where] nuv ddz dcx
          nyu:f64[1] = pjit[name=_where jaxpr=_where] nuv dea dcy
          nyv:f64[1] = pjit[name=_where jaxpr=_where] nuv deb dcz
          nyw:f64[1] = pjit[name=_where jaxpr=_where] nuv dec dda
          nyx:f64[1] = pjit[name=_where jaxpr=_where] nuv ded ddb
          nyy:f64[1] = sub 1.0 nuv
          nyz:i64[] = reduce_prod[axes=(0,)] cug
          nza:f64[] = convert_element_type[new_dtype=float64 weak_type=False] nyz
          nzb:f64[] = add cvu nza
          nzc:f64[1,180] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 180)
          ] cvs
          nzd:f64[1,180] = sub cww nzc
          nze:f64[180] = reduce_sum[axes=(0,)] nzd
          nzf:f64[180] = div nze nzb
          nzg:f64[180] = add cvs nzf
          nzh:f64[1,180] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 180)
          ] nzg
          nzi:f64[1,180] = sub cww nzh
          nzj:f64[1,180] = mul nzd nzi
          nzk:f64[180] = reduce_sum[axes=(0,)] nzj
          nzl:f64[180] = add cvv nzk
          nzm:f64[180] = max nzl 0.0
          nzn:f64[180] = div nzm nzb
          nzo:f64[180] = sqrt nzn
          nzp:f64[180] = pjit[
            name=clip
            jaxpr={ lambda ; nzq:f64[180] nzr:f64[] nzs:f64[]. let
                nzt:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] nzr
                nzu:f64[180] = max nzt nzq
                nzv:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] nzs
                nzw:f64[180] = min nzv nzu
              in (nzw,) }
          ] nzo 1e-06 1000000.0
          nzx:f64[1,1] = reshape[dimensions=None new_sizes=(1, 1)] nur
          nzy:f64[1,1] = reshape[dimensions=None new_sizes=(1, 1)] nyy
          nzz:f64[1,1] = reshape[dimensions=None new_sizes=(1, 1)] nvd
          oaa:f64[1,1] = convert_element_type[new_dtype=float64 weak_type=False] nzy
          oab:f64[1,1] = convert_element_type[new_dtype=float64 weak_type=False] nzz
          oac:f64[1,372] = concatenate[dimension=1] cww dbh nzx oaa nxx oab
          oad:i32[] = sub 4000 dag
          oae:i32[] = sub oad 1
          oaf:i32[] = min 0 oae
          oag:bool[] = ne oaf 0
          oah:i32[] = convert_element_type[new_dtype=int32 weak_type=False] oag
          oai:f64[4000,372] = cond[
            branches=(
              { lambda ; oaj_:f64[4000,372] oak_:i32[] oal:f64[4000,372]. let
                  
                in (oal,) }
              { lambda ; oam:f64[4000,372] oan:i32[] oao_:f64[4000,372]. let
                  oap:f64[4000,372] = pjit[
                    name=_roll_dynamic
                    jaxpr=_roll_dynamic
                  ] oam oan
                in (oap,) }
            )
            linear=(False, False, False)
          ] oah daf oaf daf
          oaq:i32[] = add dag oaf
          oar:bool[] = lt oaq 0
          oas:i32[] = add oaq 4000
          oat:i32[] = select_n oar oaq oas
          oau:i32[] = add 0 372
          oav:i32[] = select_n False 0 oau
          oaw:f64[4000,372] = dynamic_update_slice oai oac oat oav
          oax:i32[] = add oaq 1
          oay:i32[] = pjit[name=remainder jaxpr=remainder] oax 4001
          oaz:i32[] = add dah oaf
          oba:i32[] = max 0 oaz
          obb:f64[] = add cvr 1.0
        in (cuh, cui, cuj, cuk, cul, cum, cun, cuo, cup, cuq, cur, cus, cut, cuu,
          cuv, cuw, cux, cuy, cuz, cva, cvb, cvc, cvd, cve, cvf, cvg, cvh, cvi, cvj,
          cvk, cvl, cvm, cvn, cvo, cvp, cvq, obb, nzg, nzp, nzb, nzl, nvk, nvt, nvv,
          nvx, nvz, nwb, nwd, nwf, nwh, nwj, nws, nxb, nxd, nxf, nxh, nxj, nxl, nxn,
          nxp, dey, dez, dfa, nxr, nxt, dfd, nxv, nxx, nur, nuv, nyf, nyg, nyh, nyi,
          nyj, nyk, nyl, nym, nyn, nyo, nyp, nyq, nyr, nys, nyt, nyu, nyv, nyw, nyx,
          ddc, ddd, dde, ddf, ddg, ddh, ddi, ddj, ddk, ddl, ddm, ddn, ddo, ddp, ddq,
          ddr, dds, ddt, ddu, ddv, ddw, ddx, ddy, ddz, dea, deb, dec, ded, dee, def,
          deg, deh, dei, dej, dek, del, dem, den, deo, dep, deq, der, des, det, deu,
          dev, dew, dex, dey, dez, dfa, dfb, dfc, dfd, dfe, dff, dfg, dfh, dfi, dfj,
          dfk, nus, nvd, dfm, dfn, oaw, oay, oba, dai, dao, cww, dbh, nur, nyy, nxx,
          nvd) }
      length=1000
      linear=(False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False)
      num_carry=159
      num_consts=149
      reverse=False
      unroll=1
    ] cau cat caw cav cay cax bti btj btk btl btm btn bto btp btq btr bts btt btu
      btv btw btx bty btz bua bub buc bud bue buf bug buh bui buj buk bul bum bun
      buo bup buq bur bus but buu buv buw bux buy buz bva bvb bvc bvd bve bvf bvg
      bvh bvi bvj bvk bvl bvm bvn bvo bvp bvq bvr bvs bvt bvu bvv bvw bvx bvy bvz
      bwa bwb bwc bwd bwe bwf bwg bwh bwi bwj bwk bwl bwm bwn bwo bwp bwq bwr bws
      bwt bwu bwv bww bwx bwy bwz bxa bxb bxc bxd bxe bxf bxg bxh bxi bxj bxk bxl
      bxm bxn bxo bxp bxq bxr bxs bxt bxu bxv bxw bxx bxy bxz bya byb byc byd bye
      byf byg byh byi byj byk byl bym byn byo byp byq byr bys byt byu byv byw byx
      byy byz bza bzb bzc bzd bze bzf bzg bzh bzi bzj bzk bzl bzm bzn bzo bzp bzq
      bzr bzs bzt bzu bzv bzw bzx bzy bzz caa cab cac cad cae caf cdc cdd cde cdf
      cdg cdh cdi cdj cdk cdl cdm cdn cdo cdp cdq cdr cds cdt cdu cdv cdw cdx cdy
      cdz cea ceb cec ced cee cef ceg ceh cei cej cek cel cem cen ceo cep ceq cer
      ces cet ceu cev cew cex cey cez cfa cfb cfc cfd cfe cff cfg cfh cfi cfj cfk
      cfl cfm cfn cfo cfp cfq cfr cfs cft cfu cfv cfw cfx cfy cfz cga cgb cgc cgd
      cge cgf cgg cgh cgi cgj cgk cgl cgm cgn cgo cgp cgq cgr cgs cgt cgu cgv cgw
      cgx cgy cgz cha chb chc chd che chf chg chh chi chj chk chl chm chn cho cht
      chu chv chw cic
    obc:f64[1000,180] = reshape[dimensions=None new_sizes=(1000, 180)] coi
    obd:f64[1000,9] = reshape[dimensions=None new_sizes=(1000, 9)] coj
    obe:f64[1000,180] = reshape[dimensions=None new_sizes=(1000, 180)] com
    obf:f64[1000,1] = convert_element_type[new_dtype=float64 weak_type=False] col
    obg:f64[1000,1] = convert_element_type[new_dtype=float64 weak_type=False] con
    obh:f64[1000,372] = concatenate[dimension=1] obc obd cok obf obe obg
    obi:i32[] = sub 15000 chq
    obj:i32[] = sub obi 1000
    obk:i32[] = min 0 obj
    obl:bool[] = ne obk 0
    obm:i32[] = convert_element_type[new_dtype=int32 weak_type=False] obl
    obn:f64[15000,372] = cond[
      branches=(
        { lambda ; obo_:f64[15000,372] obp_:i32[] obq:f64[15000,372]. let
            
          in (obq,) }
        { lambda ; obr:f64[15000,372] obs:i32[] obt_:f64[15000,372]. let
            obu:f64[15000,372] = pjit[
              name=_roll_dynamic
              jaxpr={ lambda ; obv:f64[15000,372] obw:i32[]. let
                  obx:i32[1] = broadcast_in_dim[
                    broadcast_dimensions=()
                    shape=(1,)
                  ] obw
                  oby:i32[1] = slice[
                    limit_indices=(1,)
                    start_indices=(0,)
                    strides=(1,)
                  ] obx
                  obz:i32[] = squeeze[dimensions=(0,)] oby
                  oca:i32[] = max 15000 1
                  ocb:i32[] = pjit[
                    name=remainder
                    jaxpr={ lambda ; fa:i32[] fb:i32[]. let
                        fc:bool[] = eq fb 0
                        fd:i32[] = pjit[name=_where jaxpr=_where6] fc 1 fb
                        fe:i32[] = rem fa fd
                        ff:bool[] = ne fe 0
                        fg:bool[] = lt fe 0
                        fh:bool[] = lt fd 0
                        fi:bool[] = ne fg fh
                        fj:bool[] = and fi ff
                        fk:i32[] = add fe fd
                        fl:i32[] = select_n fj fe fk
                      in (fl,) }
                  ] obz oca
                  occ:f64[30000,372] = concatenate[dimension=0] obv obv
                  ocd:i32[] = sub 15000 ocb
                  oce:bool[] = lt ocd 0
                  ocf:i32[] = add ocd 30000
                  ocg:i32[] = select_n oce ocd ocf
                  och:i32[] = add 0 372
                  oci:i32[] = select_n False 0 och
                  ocj:f64[15000,372] = dynamic_slice[slice_sizes=(15000, 372)] occ
                    ocg oci
                in (ocj,) }
            ] obr obs
          in (obu,) }
      )
      linear=(False, False, False)
    ] obm chp obk chp
    ock:i32[] = add chq obk
    ocl:bool[] = lt ock 0
    ocm:i32[] = add ock 15000
    ocn:i32[] = select_n ocl ock ocm
    oco:i32[] = add 0 372
    ocp:i32[] = select_n False 0 oco
    ocq:f64[15000,372] = dynamic_update_slice obn obh ocn ocp
    ocr:i32[] = add ock 1000
    ocs:i32[] = pjit[name=remainder jaxpr=remainder] ocr 15001
    oct:i32[] = add chr obk
    ocu:i32[] = max 0 oct
    ocv:i32[] ocw:f32[512] ocx:f32[180,512] ocy:f32[512] ocz:f32[512,512] oda:f32[18]
      odb:f32[512,18] odc:f32[512] odd:f32[180,512] ode:f32[512] odf:f32[512,512]
      odg:f32[18] odh:f32[512,18] odi:f32[512] odj:f32[180,512] odk:f32[512] odl:f32[512,512]
      odm:f32[18] odn:f32[512,18] odo:i32[] odp:f32[512] odq:f32[189,512] odr:f32[512]
      ods:f32[512,512] odt:f32[1] odu:f32[512,1] odv:f32[512] odw:f32[189,512] odx:f32[512]
      ody:f32[512,512] odz:f32[1] oea:f32[512,1] oeb:f32[512] oec:f32[189,512] oed:f32[512]
      oee:f32[512,512] oef:f32[1] oeg:f32[512,1] oeh:f32[512] oei:f32[189,512] oej:f32[512]
      oek:f32[512,512] oel:f32[1] oem:f32[512,1] oen:f32[512] oeo:f32[189,512] oep:f32[512]
      oeq:f32[512,512] oer:f32[1] oes:f32[512,1] oet:f32[512] oeu:f32[189,512] oev:f32[512]
      oew:f32[512,512] oex:f32[1] oey:f32[512,1] oez:f32[512] ofa:f32[189,512] ofb:f32[512]
      ofc:f32[512,512] ofd:f32[1] ofe:f32[512,1] off:f32[512] ofg:f32[189,512] ofh:f32[512]
      ofi:f32[512,512] ofj:f32[1] ofk:f32[512,1] ofl:f64[] ofm:f64[] ofn:i32[] ofo:f32[]
      ofp:f32[] ofq:f32[] ofr:f64[180] ofs:f64[180] oft:f64[] ofu:f64[180] ofv:f64[15000,372]
      ofw:i32[] ofx:i32[] ofy:u32[2] ofz:f64[4000,372] oga:i32[] ogb:i32[] ogc:u32[2]
      ogd:f64[] oge:f32[] ogf:f64[] ogg:f32[] ogh:f64[] = pjit[
      name=policy_update
      jaxpr={ lambda ogi:f64[0] ogj:f64[36,2] ogk:f64[9,2] ogl:f64[19] ogm:i64[4]
          ogn:f64[18,3] ogo:f64[18,3] ogp:f64[13,3] ogq:f64[13,4] ogr:f64[13,4] ogs:f64[13,3]
          ogt:i64[4] ogu:i64[4] ogv:i64[4] ogw:i64[4] ogx:i64[4] ogy:i64[4] ogz:i64[4]
          oha:i64[4] ohb:i64[4] ohc:i64[4] ohd:i64[4] ohe:i64[4] ohf:i64[4] ohg:i64[4]
          ohh:i64[4] ohi:i64[4] ohj:i64[13] ohk:i64[13] ohl:i64[13] ohm:i64[13] ohn:f64[4]
          oho:f64[13,3] ohp:f64[13,4] ohq:i32[13] ohr:f64[13] ohs:f64[13,3,3] oht:i32[13]
          ohu:f64[4] ohv:f64[4] ohw:i64[18] ohx:f64[4] ohy:i64[18] ohz:i64[4] oia:i64[18]
          oib:i64[4] oic:i64[4] oid:i64[4] oie:i64[4] oif:i64[4] oig:i64[4] oih:i64[4]
          oii:i64[4] oij:i64[4] oik:i64[4] oil:i64[4] oim:i64[13] oin:i64[13] oio:i64[4]
          oip:i64[4] oiq:i64[4] oir:i64[4] ois:i64[4] oit:i64[4] oiu:i64[4] oiv:i64[4]
          oiw:i64[4] oix:i64[4] oiy:i64[4] oiz:i64[4] oja:i64[4] ojb:i64[4] ojc:i64[4]
          ojd:i64[13] oje:i64[13] ojf:i64[13] ojg:i64[13] ojh:i64[18] oji:i64[132]
          ojj:i64[132] ojk:f64[18] ojl:f64[18] ojm:f64[18] ojn:f64[18] ojo:f64[18,7]
          ojp:i64[18] ojq:f64[3] ojr:i64[4] ojs:i64[4] ojt:i64[4] oju:i64[4] ojv:i64[4]
          ojw:i64[4] ojx:i64[4] ojy:i64[4] ojz:i64[4] oka:i64[4] okb:i64[4] okc:i64[4]
          okd:i64[4] oke:i64[4] okf:i64[13] okg:i64[13] okh:i64[4] oki:i64[4] okj:i64[4]
          okk:i64[4] okl:i64[4] okm:i64[4] okn:i64[4] oko:i64[4] okp:i64[4] okq:i64[13]
          okr:i64[13] oks:i64[18] okt:i64[4] oku:f64[4] okv:f64[] okw:f64[3] okx:f64[3]
          oky:f64[3] okz:f64[] ola:f64[8] olb:f64[3] olc:f64[3] old:f64[3] ole:i64[3]
          olf:f64[3] olg:f64[12] olh:i32[12] oli:i32[12] olj:f64[12,2] olk:f64[12]
          oll:f64[12] olm:f64[12] oln:f64[12] olo:f64[12,2] olp:f64[13] olq:f64[13]
          olr:f64[13] ols:f64[13] olt:f64[13] olu:i64[4] olv:f64[4] olw:i64[3] olx:f64[3]
          oly:f64[12] olz:i64[4] oma:f64[17]; omb:i64[5] omc:f64[7,400] omd:f64[7,189,400]
          ome:f64[7,400] omf:f64[7,400,400] omg:f64[7,400] omh:f64[7,400,400] omi:f64[7,400]
          omj:f64[7,400,400] omk:f64[7,54] oml:f64[7,400,54] omm:f64[180] omn:f64[180]
          omo:f64[9] omp:f64[9] omq:i32[] omr:f32[512] oms:f32[180,512] omt:f32[512]
          omu:f32[512,512] omv:f32[18] omw:f32[512,18] omx:f32[512] omy:f32[180,512]
          omz:f32[512] ona:f32[512,512] onb:f32[18] onc:f32[512,18] ond:f32[512]
          one:f32[180,512] onf:f32[512] ong:f32[512,512] onh:f32[18] oni:f32[512,18]
          onj:i32[] onk:f32[512] onl:f32[189,512] onm:f32[512] onn:f32[512,512] ono:f32[1]
          onp:f32[512,1] onq:f32[512] onr:f32[189,512] ons:f32[512] ont:f32[512,512]
          onu:f32[1] onv:f32[512,1] onw:f32[512] onx:f32[189,512] ony:f32[512] onz:f32[512,512]
          ooa:f32[1] oob:f32[512,1] ooc:f32[512] ood:f32[189,512] ooe:f32[512] oof:f32[512,512]
          oog:f32[1] ooh:f32[512,1] ooi:f32[512] ooj:f32[189,512] ook:f32[512] ool:f32[512,512]
          oom:f32[1] oon:f32[512,1] ooo:f32[512] oop:f32[189,512] ooq:f32[512] oor:f32[512,512]
          oos:f32[1] oot:f32[512,1] oou:f32[512] oov:f32[189,512] oow:f32[512] oox:f32[512,512]
          ooy:f32[1] ooz:f32[512,1] opa:f32[512] opb:f32[189,512] opc:f32[512] opd:f32[512,512]
          ope:f32[1] opf:f32[512,1] opg:f64[] oph:f64[] opi:i32[] opj:f32[] opk:f32[]
          opl:f32[] opm:f64[180] opn:f64[180] opo:f64[] opp:f64[180] opq:f64[15000,372]
          opr:i32[] ops:i32[] opt:u32[2] opu:f64[4000,372] opv:i32[] opw:i32[] opx:u32[2]
          opy:u32[2]. let
          opz:i32[] oqa:f32[512] oqb:f32[180,512] oqc:f32[512] oqd:f32[512,512] oqe:f32[18]
            oqf:f32[512,18] oqg:f32[512] oqh:f32[180,512] oqi:f32[512] oqj:f32[512,512]
            oqk:f32[18] oql:f32[512,18] oqm:f32[512] oqn:f32[180,512] oqo:f32[512]
            oqp:f32[512,512] oqq:f32[18] oqr:f32[512,18] oqs:i32[] oqt:f32[512] oqu:f32[189,512]
            oqv:f32[512] oqw:f32[512,512] oqx:f32[1] oqy:f32[512,1] oqz:f32[512]
            ora:f32[189,512] orb:f32[512] orc:f32[512,512] ord:f32[1] ore:f32[512,1]
            orf:f32[512] org:f32[189,512] orh:f32[512] ori:f32[512,512] orj:f32[1]
            ork:f32[512,1] orl:f32[512] orm:f32[189,512] orn:f32[512] oro:f32[512,512]
            orp:f32[1] orq:f32[512,1] orr:f32[512] ors:f32[189,512] ort:f32[512]
            oru:f32[512,512] orv:f32[1] orw:f32[512,1] orx:f32[512] ory:f32[189,512]
            orz:f32[512] osa:f32[512,512] osb:f32[1] osc:f32[512,1] osd:f32[512]
            ose:f32[189,512] osf:f32[512] osg:f32[512,512] osh:f32[1] osi:f32[512,1]
            osj:f32[512] osk:f32[189,512] osl:f32[512] osm:f32[512,512] osn:f32[1]
            oso:f32[512,1] osp:f64[] osq:f64[] osr:i32[] oss:f32[] ost:f32[] osu:f32[]
            osv:f64[180] osw:f64[180] osx:f64[] osy:f64[180] osz:f64[4000,372] ota:i32[]
            otb:i32[] otc:u32[2] otd:f64[15000,372] ote:i32[] otf:i32[] otg:u32[2]
            _:u32[2] oth:f64[10,60] oti:f32[10,60] otj:f64[10,60] otk:i32[10] otl:f64[10,60] = scan[
            _split_transpose=False
            jaxpr={ lambda ; otm:f64[180] otn:f64[180] oto:f64[9] otp:f64[9] otq:f64[7,189,400]
                otr:f64[7,400] ots:f64[7,400,400] ott:f64[7,400] otu:f64[7,400,400]
                otv:f64[7,400] otw:f64[7,400,400] otx:f64[7,400] oty:f64[7,400,54]
                otz:f64[7,54] oua:i64[5] oub:f64[36,2] ouc:f64[9,2] oud:f64[19] oue:i64[4]
                ouf:f64[18,3] oug:f64[18,3] ouh:f64[13,3] oui:f64[13,4] ouj:f64[13,4]
                ouk:f64[13,3] oul:i64[4] oum:i64[4] oun:i64[4] ouo:i64[4] oup:i64[4]
                ouq:i64[4] our:i64[4] ous:i64[4] out:i64[13] ouu:i64[13] ouv:f64[13,3]
                ouw:f64[13,4] oux:i32[13] ouy:f64[13] ouz:f64[13,3,3] ova:i32[13]
                ovb:f64[4] ovc:f64[4] ovd:i64[18] ove:f64[4] ovf:i64[18] ovg:i64[4]
                ovh:i64[18] ovi:i64[4] ovj:i64[4] ovk:i64[4] ovl:i64[4] ovm:i64[4]
                ovn:i64[4] ovo:i64[4] ovp:i64[4] ovq:i64[4] ovr:i64[4] ovs:i64[4]
                ovt:i64[13] ovu:i64[13] ovv:i64[4] ovw:i64[4] ovx:i64[4] ovy:i64[4]
                ovz:i64[4] owa:i64[4] owb:i64[4] owc:i64[4] owd:i64[4] owe:i64[4]
                owf:i64[4] owg:i64[4] owh:i64[13] owi:i64[13] owj:i64[13] owk:i64[18]
                owl:i64[132] owm:i64[132] own:f64[18] owo:f64[18] owp:f64[18] owq:i64[18]
                owr:f64[3] ows:i64[4] owt:i64[4] owu:i64[4] owv:i64[4] oww:i64[4]
                owx:i64[4] owy:i64[4] owz:i64[4] oxa:i64[4] oxb:i64[4] oxc:i64[4]
                oxd:i64[4] oxe:i64[4] oxf:i64[4] oxg:i64[13] oxh:i64[13] oxi:i64[4]
                oxj:i64[4] oxk:i64[4] oxl:i64[4] oxm:i64[4] oxn:i64[4] oxo:i64[4]
                oxp:i64[4] oxq:i64[4] oxr:i64[13] oxs:i64[13] oxt:i64[18] oxu:i64[4]
                oxv:f64[4] oxw:f64[] oxx:f64[3] oxy:f64[3] oxz:f64[3] oya:f64[] oyb:f64[8]
                oyc:f64[3] oyd:f64[3] oye:f64[3] oyf:i64[3] oyg:f64[3] oyh:f64[12]
                oyi:i32[12] oyj:i32[12] oyk:f64[12,2] oyl:f64[12] oym:f64[12] oyn:f64[12]
                oyo:f64[12] oyp:f64[12,2] oyq:i64[4] oyr:f64[4] oys:i64[3] oyt:f64[3]
                oyu:f64[12] oyv:i64[4] oyw:f64[17] oyx:i32[] oyy:f32[512] oyz:f32[180,512]
                oza:f32[512] ozb:f32[512,512] ozc:f32[18] ozd:f32[512,18] oze:f32[512]
                ozf:f32[180,512] ozg:f32[512] ozh:f32[512,512] ozi:f32[18] ozj:f32[512,18]
                ozk:f32[512] ozl:f32[180,512] ozm:f32[512] ozn:f32[512,512] ozo:f32[18]
                ozp:f32[512,18] ozq:i32[] ozr:f32[512] ozs:f32[189,512] ozt:f32[512]
                ozu:f32[512,512] ozv:f32[1] ozw:f32[512,1] ozx:f32[512] ozy:f32[189,512]
                ozz:f32[512] paa:f32[512,512] pab:f32[1] pac:f32[512,1] pad:f32[512]
                pae:f32[189,512] paf:f32[512] pag:f32[512,512] pah:f32[1] pai:f32[512,1]
                paj:f32[512] pak:f32[189,512] pal:f32[512] pam:f32[512,512] pan:f32[1]
                pao:f32[512,1] pap:f32[512] paq:f32[189,512] par:f32[512] pas:f32[512,512]
                pat:f32[1] pau:f32[512,1] pav:f32[512] paw:f32[189,512] pax:f32[512]
                pay:f32[512,512] paz:f32[1] pba:f32[512,1] pbb:f32[512] pbc:f32[189,512]
                pbd:f32[512] pbe:f32[512,512] pbf:f32[1] pbg:f32[512,1] pbh:f32[512]
                pbi:f32[189,512] pbj:f32[512] pbk:f32[512,512] pbl:f32[1] pbm:f32[512,1]
                pbn:f64[] pbo:f64[] pbp:i32[] pbq:f32[] pbr:f32[] pbs:f32[] pbt:f64[180]
                pbu:f64[180] pbv:f64[] pbw:f64[180] pbx:f64[4000,372] pby:i32[] pbz:i32[]
                pca:u32[2] pcb:f64[15000,372] pcc:i32[] pcd:i32[] pce:u32[2] pcf:u32[2]. let
                pcg:key<fry>[] = random_wrap[impl=fry] pce
                pch:key<fry>[2] = random_split[shape=(2,)] pcg
                pci:u32[2,2] = random_unwrap pch
                pcj:u32[1,2] = slice[
                  limit_indices=(1, 2)
                  start_indices=(0, 0)
                  strides=(1, 1)
                ] pci
                pck:u32[2] = squeeze[dimensions=(0,)] pcj
                pcl:u32[1,2] = slice[
                  limit_indices=(2, 2)
                  start_indices=(1, 0)
                  strides=(1, 1)
                ] pci
                pcm:u32[2] = squeeze[dimensions=(0,)] pcl
                pcn:key<fry>[] = random_wrap[impl=fry] pcm
                pco:i64[400] = pjit[name=_randint jaxpr=_randint] pcn pcd pcc
                pcp:f64[400,372] = pjit[name=_take jaxpr=_take] pcb pco
                pcq:f64[400,180] = slice[
                  limit_indices=(400, 180)
                  start_indices=(0, 0)
                  strides=None
                ] pcp
                pcr:f64[400] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(400,)
                ] 0.0
                pcs:f64[400] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(400,)
                ] 0.0
                _:f64[400,180] _:f64[400] _:f64[400,180] _:f64[400] pct:f64[4000,372]
                  pcu:i32[] pcv:i32[] pcw:u32[2] pcx:u32[2] = scan[
                  _split_transpose=False
                  jaxpr={ lambda ; pcy:f32[180,512] pcz:f32[512] pda:f32[512,512]
                      pdb:f32[512] pdc:f32[512,18] pdd:f32[18] pde:f64[180] pdf:f64[180]
                      pdg:f64[9] pdh:f64[9] pdi:f64[7,189,400] pdj:f64[7,400] pdk:f64[7,400,400]
                      pdl:f64[7,400] pdm:f64[7,400,400] pdn:f64[7,400] pdo:f64[7,400,400]
                      pdp:f64[7,400] pdq:f64[7,400,54] pdr:f64[7,54] pds:i64[5] pdt:f64[36,2]
                      pdu:f64[9,2] pdv:f64[19] pdw:i64[4] pdx:f64[18,3] pdy:f64[18,3]
                      pdz:f64[13,3] pea:f64[13,4] peb:f64[13,4] pec:f64[13,3] ped:i64[4]
                      pee:i64[4] pef:i64[4] peg:i64[4] peh:i64[4] pei:i64[4] pej:i64[4]
                      pek:i64[4] pel:i64[13] pem:i64[13] pen:f64[13,3] peo:f64[13,4]
                      pep:i32[13] peq:f64[13] per:f64[13,3,3] pes:i32[13] pet:f64[4]
                      peu:f64[4] pev:i64[18] pew:f64[4] pex:i64[18] pey:i64[4] pez:i64[18]
                      pfa:i64[4] pfb:i64[4] pfc:i64[4] pfd:i64[4] pfe:i64[4] pff:i64[4]
                      pfg:i64[4] pfh:i64[4] pfi:i64[4] pfj:i64[4] pfk:i64[4] pfl:i64[13]
                      pfm:i64[13] pfn:i64[4] pfo:i64[4] pfp:i64[4] pfq:i64[4] pfr:i64[4]
                      pfs:i64[4] pft:i64[4] pfu:i64[4] pfv:i64[4] pfw:i64[4] pfx:i64[4]
                      pfy:i64[4] pfz:i64[13] pga:i64[13] pgb:i64[13] pgc:i64[18]
                      pgd:i64[132] pge:i64[132] pgf:f64[18] pgg:f64[18] pgh:f64[18]
                      pgi:i64[18] pgj:f64[3] pgk:i64[4] pgl:i64[4] pgm:i64[4] pgn:i64[4]
                      pgo:i64[4] pgp:i64[4] pgq:i64[4] pgr:i64[4] pgs:i64[4] pgt:i64[4]
                      pgu:i64[4] pgv:i64[4] pgw:i64[4] pgx:i64[4] pgy:i64[13] pgz:i64[13]
                      pha:i64[4] phb:i64[4] phc:i64[4] phd:i64[4] phe:i64[4] phf:i64[4]
                      phg:i64[4] phh:i64[4] phi:i64[4] phj:i64[13] phk:i64[13] phl:i64[18]
                      phm:i64[4] phn:f64[4] pho:f64[] php:f64[3] phq:f64[3] phr:f64[3]
                      phs:f64[] pht:f64[8] phu:f64[3] phv:f64[3] phw:f64[3] phx:i64[3]
                      phy:f64[3] phz:f64[12] pia:i32[12] pib:i32[12] pic:f64[12,2]
                      pid:f64[12] pie:f64[12] pif:f64[12] pig:f64[12] pih:f64[12,2]
                      pii:i64[4] pij:f64[4] pik:i64[3] pil:f64[3] pim:f64[12] pin:i64[4]
                      pio:f64[17] pip:f64[400,180] piq:f64[400] pir:f64[400,180]
                      pis:f64[400] pit:f64[4000,372] piu:i32[] piv:i32[] piw:u32[2]
                      pix:u32[2]. let
                      piy:key<fry>[] = random_wrap[impl=fry] pix
                      piz:key<fry>[2] = random_split[shape=(2,)] piy
                      pja:u32[2,2] = random_unwrap piz
                      pjb:u32[1,2] = slice[
                        limit_indices=(1, 2)
                        start_indices=(0, 0)
                        strides=(1, 1)
                      ] pja
                      pjc:u32[2] = squeeze[dimensions=(0,)] pjb
                      pjd:u32[1,2] = slice[
                        limit_indices=(2, 2)
                        start_indices=(1, 0)
                        strides=(1, 1)
                      ] pja
                      pje:u32[2] = squeeze[dimensions=(0,)] pjd
                      pjf:key<fry>[] = random_wrap[impl=fry] pjc
                      pjg:key<fry>[2] = random_split[shape=(2,)] pjf
                      pjh:u32[2,2] = random_unwrap pjg
                      pji:u32[1,2] = slice[
                        limit_indices=(1, 2)
                        start_indices=(0, 0)
                        strides=(1, 1)
                      ] pjh
                      pjj:u32[2] = squeeze[dimensions=(0,)] pji
                      pjk:u32[1,2] = slice[
                        limit_indices=(2, 2)
                        start_indices=(1, 0)
                        strides=(1, 1)
                      ] pjh
                      pjl:u32[2] = squeeze[dimensions=(0,)] pjk
                      pjm:f64[180,512] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] pcy
                      pjn:f64[512] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] pcz
                      pjo:f64[400,512] = dot_general[
                        dimension_numbers=(([1], [0]), ([], []))
                      ] pip pjm
                      pjp:f64[1,512] = reshape[
                        dimensions=None
                        new_sizes=(1, 512)
                      ] pjn
                      pjq:f64[400,512] = add pjo pjp
                      pjr:f64[400,512] = pjit[name=silu jaxpr=silu1] pjq
                      pjs:f64[512,512] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] pda
                      pjt:f64[512] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] pdb
                      pju:f64[400,512] = dot_general[
                        dimension_numbers=(([1], [0]), ([], []))
                      ] pjr pjs
                      pjv:f64[1,512] = reshape[
                        dimensions=None
                        new_sizes=(1, 512)
                      ] pjt
                      pjw:f64[400,512] = add pju pjv
                      pjx:f64[400,512] = pjit[name=silu jaxpr=silu1] pjw
                      pjy:f64[512,18] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] pdc
                      pjz:f64[18] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] pdd
                      pka:f64[400,18] = dot_general[
                        dimension_numbers=(([1], [0]), ([], []))
                      ] pjx pjy
                      pkb:f64[1,18] = reshape[dimensions=None new_sizes=(1, 18)] pjz
                      pkc:f64[400,18] = add pka pkb
                      pkd:f64[400,9] = slice[
                        limit_indices=(400, 9)
                        start_indices=(0, 0)
                        strides=None
                      ] pkc
                      pke:f64[400,9] = slice[
                        limit_indices=(400, 18)
                        start_indices=(0, 9)
                        strides=None
                      ] pkc
                      pkf:f64[400,9] = pjit[
                        name=softplus
                        jaxpr={ lambda ; pkg:f64[400,9]. let
                            pkh:f64[400,9] = custom_jvp_call[
                              call_jaxpr={ lambda ; pki:f64[400,9] pkj:i64[]. let
                                  pkk:f64[400,9] = pjit[
                                    name=logaddexp
                                    jaxpr={ lambda ; pkl:f64[400,9] pkm:i64[]. let
                                        pkn:f64[] = convert_element_type[
                                          new_dtype=float64
                                          weak_type=False
                                        ] pkm
                                        pko:f64[400,9] = max pkl pkn
                                        pkp:f64[400,9] = sub pkl pkn
                                        pkq:bool[400,9] = ne pkp pkp
                                        pkr:f64[400,9] = add pkl pkn
                                        pks:f64[400,9] = abs pkp
                                        pkt:f64[400,9] = neg pks
                                        pku:f64[400,9] = exp pkt
                                        pkv:f64[400,9] = log1p pku
                                        pkw:f64[400,9] = add pko pkv
                                        pkx:f64[400,9] = select_n pkq pkw pkr
                                      in (pkx,) }
                                  ] pki pkj
                                in (pkk,) }
                              jvp_jaxpr_thunk=<function _memoize.<locals>.memoized at 0x7d832d5a2940>
                              num_consts=0
                              symbolic_zeros=False
                            ] pkg 0
                          in (pkh,) }
                      ] pke
                      pky:f64[400,9] = add pkf 0.001
                      pkz:key<fry>[] = random_wrap[impl=fry] pjj
                      pla:f64[400,9] = pjit[
                        name=_normal
                        jaxpr={ lambda ; plb:key<fry>[]. let
                            plc:f64[400,9] = pjit[
                              name=_normal_real
                              jaxpr={ lambda ; pld:key<fry>[]. let
                                  ple:f64[400,9] = pjit[
                                    name=_uniform
                                    jaxpr={ lambda ; plf:key<fry>[] plg:f64[] plh:f64[]. let
                                        pli:f64[1,1] = broadcast_in_dim[
                                          broadcast_dimensions=()
                                          shape=(1, 1)
                                        ] plg
                                        plj:f64[1,1] = broadcast_in_dim[
                                          broadcast_dimensions=()
                                          shape=(1, 1)
                                        ] plh
                                        plk:u64[400,9] = random_bits[
                                          bit_width=64
                                          shape=(400, 9)
                                        ] plf
                                        pll:u64[400,9] = shift_right_logical plk
                                          12
                                        plm:u64[400,9] = or pll 4607182418800017408
                                        pln:f64[400,9] = bitcast_convert_type[
                                          new_dtype=float64
                                        ] plm
                                        plo:f64[400,9] = sub pln 1.0
                                        plp:f64[1,1] = sub plj pli
                                        plq:f64[400,9] = mul plo plp
                                        plr:f64[400,9] = add plq pli
                                        pls:f64[400,9] = max pli plr
                                      in (pls,) }
                                  ] pld -0.9999999999999999 1.0
                                  plt:f64[400,9] = erf_inv ple
                                  plu:f64[400,9] = mul 1.4142135623730951 plt
                                in (plu,) }
                            ] plb
                          in (plc,) }
                      ] pkz
                      plv:f64[400,9] = mul pla pky
                      plw:f64[400,9] = add plv pkd
                      plx:f64[400,9] = tanh plw
                      ply:key<fry>[] = random_wrap[impl=fry] pjl
                      plz:key<fry>[400] = random_split[shape=(400,)] ply
                      pma:u32[400,2] = random_unwrap plz
                      pmb:f64[400,36] = slice[
                        limit_indices=(400, 36)
                        start_indices=(0, 0)
                        strides=None
                      ] pip
                      pmc:f64[1,180] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 180)
                      ] pde
                      pmd:f64[400,180] = sub pip pmc
                      pme:f64[1,180] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 180)
                      ] pdf
                      pmf:f64[400,180] = div pmd pme
                      pmg:f64[1,9] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 9)
                      ] pdg
                      pmh:f64[400,9] = sub plx pmg
                      pmi:f64[1,9] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 9)
                      ] pdh
                      pmj:f64[400,9] = div pmh pmi
                      pmk:f64[400,189] = concatenate[dimension=1] pmf pmj
                      pml:f64[400,1,1,1,189] = reshape[
                        dimensions=None
                        new_sizes=(400, 1, 1, 1, 189)
                      ] pmk
                      pmm:f64[400,1,1,189] = squeeze[dimensions=(1,)] pml
                      pmn:f64[400,7,1,1,189] = broadcast_in_dim[
                        broadcast_dimensions=(0, 2, 3, 4)
                        shape=(400, 7, 1, 1, 189)
                      ] pmm
                      pmo:f64[400,7,189] = reshape[
                        dimensions=None
                        new_sizes=(400, 7, 189)
                      ] pmn
                      pmp:f64[1,36] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1, 36)
                      ] 1.0
                      pmq:f64[1,36] = mul 0.5 pmp
                      pmr:f64[1,36] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1, 36)
                      ] 1.0
                      pms:f64[1,36] = mul -10.0 pmr
                      pmt:f64[7,400,400] = dot_general[
                        dimension_numbers=(([2], [1]), ([1], [0]))
                        preferred_element_type=float64
                      ] pmo pdi
                      pmu:f64[400,7,400] = transpose[permutation=(1, 0, 2)] pmt
                      pmv:f64[1,7,400] = broadcast_in_dim[
                        broadcast_dimensions=(1, 2)
                        shape=(1, 7, 400)
                      ] pdj
                      pmw:f64[400,7,400] = add pmu pmv
                      pmx:f64[400,7,400] = pjit[name=silu jaxpr=silu2] pmw
                      pmy:f64[7,400,400] = dot_general[
                        dimension_numbers=(([2], [1]), ([1], [0]))
                        preferred_element_type=float64
                      ] pmx pdk
                      pmz:f64[400,7,400] = transpose[permutation=(1, 0, 2)] pmy
                      pna:f64[1,7,400] = broadcast_in_dim[
                        broadcast_dimensions=(1, 2)
                        shape=(1, 7, 400)
                      ] pdl
                      pnb:f64[400,7,400] = add pmz pna
                      pnc:f64[400,7,400] = pjit[name=silu jaxpr=silu2] pnb
                      pnd:f64[7,400,400] = dot_general[
                        dimension_numbers=(([2], [1]), ([1], [0]))
                        preferred_element_type=float64
                      ] pnc pdm
                      pne:f64[400,7,400] = transpose[permutation=(1, 0, 2)] pnd
                      pnf:f64[1,7,400] = broadcast_in_dim[
                        broadcast_dimensions=(1, 2)
                        shape=(1, 7, 400)
                      ] pdn
                      png:f64[400,7,400] = add pne pnf
                      pnh:f64[400,7,400] = pjit[name=silu jaxpr=silu2] png
                      pni:f64[7,400,400] = dot_general[
                        dimension_numbers=(([2], [1]), ([1], [0]))
                        preferred_element_type=float64
                      ] pnh pdo
                      pnj:f64[400,7,400] = transpose[permutation=(1, 0, 2)] pni
                      pnk:f64[1,7,400] = broadcast_in_dim[
                        broadcast_dimensions=(1, 2)
                        shape=(1, 7, 400)
                      ] pdp
                      pnl:f64[400,7,400] = add pnj pnk
                      pnm:f64[400,7,400] = pjit[name=silu jaxpr=silu2] pnl
                      pnn:f64[7,400,54] = dot_general[
                        dimension_numbers=(([2], [1]), ([1], [0]))
                        preferred_element_type=float64
                      ] pnm pdq
                      pno:f64[400,7,54] = transpose[permutation=(1, 0, 2)] pnn
                      pnp:f64[1,7,54] = broadcast_in_dim[
                        broadcast_dimensions=(1, 2)
                        shape=(1, 7, 54)
                      ] pdr
                      pnq:f64[400,7,54] = add pno pnp
                      pnr:f64[400,7,18] = slice[
                        limit_indices=(400, 7, 18)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] pnq
                      pns:f64[400,7,36] = slice[
                        limit_indices=(400, 7, 54)
                        start_indices=(0, 0, 18)
                        strides=None
                      ] pnq
                      pnt:f64[1,1,36] = broadcast_in_dim[
                        broadcast_dimensions=(1, 2)
                        shape=(1, 1, 36)
                      ] pmq
                      pnu:f64[400,7,36] = sub pnt pns
                      pnv:f64[400,7,36] = pjit[name=softplus jaxpr=softplus] pnu
                      pnw:f64[1,1,36] = broadcast_in_dim[
                        broadcast_dimensions=(1, 2)
                        shape=(1, 1, 36)
                      ] pmq
                      pnx:f64[400,7,36] = sub pnw pnv
                      pny:f64[1,1,36] = broadcast_in_dim[
                        broadcast_dimensions=(1, 2)
                        shape=(1, 1, 36)
                      ] pms
                      pnz:f64[400,7,36] = sub pnx pny
                      poa:f64[400,7,36] = pjit[name=softplus jaxpr=softplus] pnz
                      pob:f64[1,1,36] = broadcast_in_dim[
                        broadcast_dimensions=(1, 2)
                        shape=(1, 1, 36)
                      ] pms
                      poc:f64[400,7,36] = add pob poa
                      pod:key<fry>[400] = random_wrap[impl=fry] pma
                      poe:key<fry>[400,2] = random_split[shape=(2,)] pod
                      pof:u32[400,2,2] = random_unwrap poe
                      pog:u32[400,1,2] = slice[
                        limit_indices=(400, 1, 2)
                        start_indices=(0, 0, 0)
                        strides=(1, 1, 1)
                      ] pof
                      poh:u32[400,2] = squeeze[dimensions=(1,)] pog
                      poi:u32[400,1,2] = slice[
                        limit_indices=(400, 2, 2)
                        start_indices=(0, 1, 0)
                        strides=(1, 1, 1)
                      ] pof
                      poj:u32[400,2] = squeeze[dimensions=(1,)] poi
                      pok:key<fry>[400] = random_wrap[impl=fry] poj
                      pol:i64[400] = pjit[
                        name=_randint
                        jaxpr={ lambda ; pom:key<fry>[400] pon:i64[] poo:i64[]. let
                            pop:i64[] = pjit[
                              name=clip
                              jaxpr={ lambda ; fy:i64[] fz:i64[] ga:i64[]. let
                                  gb:i64[] = max fz fy
                                  gc:i64[] = min ga gb
                                in (gc,) }
                            ] 9223372036854775807 -9223372036854775808 9223372036854775807
                            poq:bool[] = gt poo pop
                            por:i64[] = pjit[name=clip jaxpr=clip7] pon -9223372036854775808
                              9223372036854775807
                            pos:i64[] = convert_element_type[
                              new_dtype=int64
                              weak_type=False
                            ] por
                            pot:i64[] = pjit[name=clip jaxpr=clip7] poo -9223372036854775808
                              9223372036854775807
                            pou:i64[] = convert_element_type[
                              new_dtype=int64
                              weak_type=False
                            ] pot
                            pov:key<fry>[400,2] = random_split[shape=(2,)] pom
                            pow:key<fry>[400,1] = slice[
                              limit_indices=(400, 1)
                              start_indices=(0, 0)
                              strides=(1, 1)
                            ] pov
                            pox:key<fry>[400] = squeeze[dimensions=(1,)] pow
                            poy:key<fry>[400,1] = slice[
                              limit_indices=(400, 2)
                              start_indices=(0, 1)
                              strides=(1, 1)
                            ] pov
                            poz:key<fry>[400] = squeeze[dimensions=(1,)] poy
                            ppa:u64[400] = random_bits[bit_width=64 shape=()] pox
                            ppb:u64[400] = random_bits[bit_width=64 shape=()] poz
                            ppc:i64[] = sub pou pos
                            ppd:u64[] = convert_element_type[
                              new_dtype=uint64
                              weak_type=False
                            ] ppc
                            ppe:bool[] = le pou pos
                            ppf:u64[] = select_n ppe ppd 1
                            ppg:bool[] = gt pou pos
                            pph:bool[] = and poq ppg
                            ppi:u64[] = add ppf 1
                            ppj:u64[] = select_n pph ppf ppi
                            ppk:u64[] = rem 4294967296 ppj
                            ppl:u64[] = mul ppk ppk
                            ppm:u64[] = rem ppl ppj
                            ppn:u64[400] = rem ppa ppj
                            ppo:u64[400] = mul ppn ppm
                            ppp:u64[400] = rem ppb ppj
                            ppq:u64[400] = add ppo ppp
                            ppr:u64[400] = rem ppq ppj
                            pps:i64[400] = convert_element_type[
                              new_dtype=int64
                              weak_type=False
                            ] ppr
                            ppt:i64[400] = add pos pps
                          in (ppt,) }
                      ] pok 0 5
                      ppu:i64[400] = pjit[
                        name=_take
                        jaxpr={ lambda ; ppv:i64[5] ppw:i64[400]. let
                            ppx:bool[400] = lt ppw 0
                            ppy:i64[400] = add ppw 5
                            ppz:i64[400] = pjit[
                              name=_where
                              jaxpr={ lambda ; pqa:bool[400] pqb:i64[400] pqc:i64[400]. let
                                  pqd:i64[400] = select_n pqa pqc pqb
                                in (pqd,) }
                            ] ppx ppy ppw
                            pqe:i64[400,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(400, 1)
                            ] ppz
                            pqf:i64[400] = gather[
                              dimension_numbers=GatherDimensionNumbers(offset_dims=(), collapsed_slice_dims=(0,), start_index_map=(0,))
                              fill_value=-9223372036854775808
                              indices_are_sorted=False
                              mode=GatherScatterMode.FILL_OR_DROP
                              slice_sizes=(1,)
                              unique_indices=False
                            ] ppv pqe
                          in (pqf,) }
                      ] pds pol
                      pqg:bool[400] = lt ppu 0
                      pqh:i64[400] = add ppu 7
                      pqi:i64[400] = select_n pqg ppu pqh
                      pqj:bool[] = lt 0 0
                      pqk:i64[] = add 0 18
                      pql:i64[] = select_n pqj 0 pqk
                      pqm:i64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] pqi
                      pqn:i64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(400, 1)
                      ] pql
                      pqo:i64[400,2] = concatenate[dimension=1] pqm pqn
                      pqp:i64[400,1] = iota[
                        dimension=0
                        dtype=int64
                        shape=(400, 1)
                      ] 
                      pqq:i64[400,3] = concatenate[dimension=1] pqp pqo
                      pqr:f64[400,1,18] = gather[
                        dimension_numbers=GatherDimensionNumbers(offset_dims=(1, 2), collapsed_slice_dims=(0,), start_index_map=(0, 1, 2))
                        fill_value=None
                        indices_are_sorted=True
                        mode=GatherScatterMode.PROMISE_IN_BOUNDS
                        slice_sizes=(1, 1, 18)
                        unique_indices=True
                      ] pnr pqq
                      pqs:f64[400,18] = squeeze[dimensions=(1,)] pqr
                      pqt:bool[400] = lt ppu 0
                      pqu:i64[400] = add ppu 7
                      pqv:i64[400] = select_n pqt ppu pqu
                      pqw:bool[] = lt 0 0
                      pqx:i64[] = add 0 36
                      pqy:i64[] = select_n pqw 0 pqx
                      pqz:i64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] pqv
                      pra:i64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(400, 1)
                      ] pqy
                      prb:i64[400,2] = concatenate[dimension=1] pqz pra
                      prc:i64[400,1] = iota[
                        dimension=0
                        dtype=int64
                        shape=(400, 1)
                      ] 
                      prd:i64[400,3] = concatenate[dimension=1] prc prb
                      pre:f64[400,1,36] = gather[
                        dimension_numbers=GatherDimensionNumbers(offset_dims=(1, 2), collapsed_slice_dims=(0,), start_index_map=(0, 1, 2))
                        fill_value=None
                        indices_are_sorted=True
                        mode=GatherScatterMode.PROMISE_IN_BOUNDS
                        slice_sizes=(1, 1, 36)
                        unique_indices=True
                      ] poc prd
                      prf:f64[400,36] = squeeze[dimensions=(1,)] pre
                      prg:f64[400,36] = exp prf
                      prh:f64[400,36] = sqrt prg
                      pri:f64[400,36] = scan[
                        _split_transpose=False
                        jaxpr={ lambda ; prj:f64[36,2] prk:f64[9,2] prl:f64[400,9]
                            prm:f64[19] prn:i64[4] pro:f64[18,3] prp:f64[18,3] prq:f64[13,3]
                            prr:f64[13,4] prs:f64[13,4] prt:f64[13,3] pru:i64[4]
                            prv:i64[4] prw:i64[4] prx:i64[4] pry:i64[4] prz:i64[4]
                            psa:i64[4] psb:i64[4] psc:i64[13] psd:i64[13] pse:f64[13,3]
                            psf:f64[13,4] psg:i32[13] psh:f64[13] psi:f64[13,3,3]
                            psj:i32[13] psk:f64[4] psl:f64[4] psm:i64[18] psn:f64[4]
                            pso:i64[18] psp:i64[4] psq:i64[18] psr:i64[4] pss:i64[4]
                            pst:i64[4] psu:i64[4] psv:i64[4] psw:i64[4] psx:i64[4]
                            psy:i64[4] psz:i64[4] pta:i64[4] ptb:i64[4] ptc:i64[13]
                            ptd:i64[13] pte:i64[4] ptf:i64[4] ptg:i64[4] pth:i64[4]
                            pti:i64[4] ptj:i64[4] ptk:i64[4] ptl:i64[4] ptm:i64[4]
                            ptn:i64[4] pto:i64[4] ptp:i64[4] ptq:i64[13] ptr:i64[13]
                            pts:i64[13] ptt:i64[18] ptu:i64[132] ptv:i64[132] ptw:f64[18]
                            ptx:f64[18] pty:f64[18] ptz:i64[18] pua:f64[3] pub:i64[4]
                            puc:i64[4] pud:i64[4] pue:i64[4] puf:i64[4] pug:i64[4]
                            puh:i64[4] pui:i64[4] puj:i64[4] puk:i64[4] pul:i64[4]
                            pum:i64[4] pun:i64[4] puo:i64[4] pup:i64[13] puq:i64[13]
                            pur:i64[4] pus:i64[4] put:i64[4] puu:i64[4] puv:i64[4]
                            puw:i64[4] pux:i64[4] puy:i64[4] puz:i64[4] pva:i64[13]
                            pvb:i64[13] pvc:i64[18] pvd:i64[4] pve:f64[4] pvf:f64[]
                            pvg:f64[3] pvh:f64[3] pvi:f64[3] pvj:f64[] pvk:f64[8]
                            pvl:f64[3] pvm:f64[3] pvn:f64[3] pvo:i64[3] pvp:f64[3]
                            pvq:f64[12] pvr:i32[12] pvs:i32[12] pvt:f64[12,2] pvu:f64[12]
                            pvv:f64[12] pvw:f64[12] pvx:f64[12] pvy:f64[12,2] pvz:f64[400,18]
                            pwa:i64[4] pwb:f64[400,36]. let
                            pwc:f64[400,36] = add pwb 1.0
                            pwd:f64[36,1] = slice[
                              limit_indices=(36, 2)
                              start_indices=(0, 1)
                              strides=None
                            ] prj
                            pwe:f64[36] = squeeze[dimensions=(1,)] pwd
                            pwf:f64[36,1] = slice[
                              limit_indices=(36, 1)
                              start_indices=(0, 0)
                              strides=None
                            ] prj
                            pwg:f64[36] = squeeze[dimensions=(1,)] pwf
                            pwh:f64[36] = sub pwe pwg
                            pwi:f64[1,36] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 36)
                            ] pwh
                            pwj:f64[400,36] = mul pwc pwi
                            pwk:f64[400,36] = div pwj 2.0
                            pwl:f64[36,1] = slice[
                              limit_indices=(36, 1)
                              start_indices=(0, 0)
                              strides=None
                            ] prj
                            pwm:f64[36] = squeeze[dimensions=(1,)] pwl
                            pwn:f64[1,36] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 36)
                            ] pwm
                            pwo:f64[400,36] = add pwk pwn
                            pwp:f64[400,1] = slice[
                              limit_indices=(400, 36)
                              start_indices=(0, 35)
                              strides=None
                            ] pwo
                            pwq:f64[400] = squeeze[dimensions=(1,)] pwp
                            pwr:f64[400,1] = slice[
                              limit_indices=(400, 35)
                              start_indices=(0, 34)
                              strides=None
                            ] pwo
                            pws:f64[400] = squeeze[dimensions=(1,)] pwr
                            pwt:f64[400] = atan2 pwq pws
                            pwu:f64[400] = add pwt 0.12566370614359174
                            pwv:f64[400] = cos pwu
                            pww:i32[1] = broadcast_in_dim[
                              broadcast_dimensions=()
                              shape=(1,)
                            ] 34
                            pwx:f64[400,36] = scatter[
                              dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0,), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                              indices_are_sorted=True
                              mode=GatherScatterMode.FILL_OR_DROP
                              unique_indices=True
                              update_consts=()
                              update_jaxpr=None
                            ] pwo pww pwv
                            pwy:f64[400] = sin pwu
                            pwz:i32[1] = broadcast_in_dim[
                              broadcast_dimensions=()
                              shape=(1,)
                            ] 35
                            pxa:f64[400,36] = scatter[
                              dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0,), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                              indices_are_sorted=True
                              mode=GatherScatterMode.FILL_OR_DROP
                              unique_indices=True
                              update_consts=()
                              update_jaxpr=None
                            ] pwx pwz pwy
                            pxb:f64[36,1] = slice[
                              limit_indices=(36, 1)
                              start_indices=(0, 0)
                              strides=None
                            ] prj
                            pxc:f64[36] = squeeze[dimensions=(1,)] pxb
                            pxd:f64[1,36] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 36)
                            ] pxc
                            pxe:f64[400,36] = sub pxa pxd
                            pxf:f64[400,36] = mul 2.0 pxe
                            pxg:f64[36,1] = slice[
                              limit_indices=(36, 2)
                              start_indices=(0, 1)
                              strides=None
                            ] prj
                            pxh:f64[36] = squeeze[dimensions=(1,)] pxg
                            pxi:f64[36,1] = slice[
                              limit_indices=(36, 1)
                              start_indices=(0, 0)
                              strides=None
                            ] prj
                            pxj:f64[36] = squeeze[dimensions=(1,)] pxi
                            pxk:f64[36] = sub pxh pxj
                            pxl:f64[1,36] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 36)
                            ] pxk
                            pxm:f64[400,36] = div pxf pxl
                            pxn:f64[400,36] = sub pxm 1.0
                            pxo:f64[9,1] = slice[
                              limit_indices=(9, 2)
                              start_indices=(0, 1)
                              strides=None
                            ] prk
                            pxp:f64[9] = squeeze[dimensions=(1,)] pxo
                            pxq:f64[9,1] = slice[
                              limit_indices=(9, 1)
                              start_indices=(0, 0)
                              strides=None
                            ] prk
                            pxr:f64[9] = squeeze[dimensions=(1,)] pxq
                            pxs:f64[9] = sub pxp pxr
                            pxt:f64[1,9] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 9)
                            ] pxs
                            pxu:f64[400,9] = mul pxt prl
                            pxv:f64[400,9] = div pxu 2.0
                            pxw:f64[9,1] = slice[
                              limit_indices=(9, 2)
                              start_indices=(0, 1)
                              strides=None
                            ] prk
                            pxx:f64[9] = squeeze[dimensions=(1,)] pxw
                            pxy:f64[9,1] = slice[
                              limit_indices=(9, 1)
                              start_indices=(0, 0)
                              strides=None
                            ] prk
                            pxz:f64[9] = squeeze[dimensions=(1,)] pxy
                            pya:f64[9] = add pxx pxz
                            pyb:f64[9] = div pya 2.0
                            pyc:f64[1,9] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 9)
                            ] pyb
                            pyd:f64[400,9] = add pxv pyc
                            pye:f64[400,36] = add pwb 1.0
                            pyf:f64[36,1] = slice[
                              limit_indices=(36, 2)
                              start_indices=(0, 1)
                              strides=None
                            ] prj
                            pyg:f64[36] = squeeze[dimensions=(1,)] pyf
                            pyh:f64[36,1] = slice[
                              limit_indices=(36, 1)
                              start_indices=(0, 0)
                              strides=None
                            ] prj
                            pyi:f64[36] = squeeze[dimensions=(1,)] pyh
                            pyj:f64[36] = sub pyg pyi
                            pyk:f64[1,36] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 36)
                            ] pyj
                            pyl:f64[400,36] = mul pye pyk
                            pym:f64[400,36] = div pyl 2.0
                            pyn:f64[36,1] = slice[
                              limit_indices=(36, 1)
                              start_indices=(0, 0)
                              strides=None
                            ] prj
                            pyo:f64[36] = squeeze[dimensions=(1,)] pyn
                            pyp:f64[1,36] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 36)
                            ] pyo
                            pyq:f64[400,36] = add pym pyp
                            pyr:f64[400,36] = add pxn 1.0
                            pys:f64[36,1] = slice[
                              limit_indices=(36, 2)
                              start_indices=(0, 1)
                              strides=None
                            ] prj
                            pyt:f64[36] = squeeze[dimensions=(1,)] pys
                            pyu:f64[36,1] = slice[
                              limit_indices=(36, 1)
                              start_indices=(0, 0)
                              strides=None
                            ] prj
                            pyv:f64[36] = squeeze[dimensions=(1,)] pyu
                            pyw:f64[36] = sub pyt pyv
                            pyx:f64[1,36] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 36)
                            ] pyw
                            pyy:f64[400,36] = mul pyr pyx
                            pyz:f64[400,36] = div pyy 2.0
                            pza:f64[36,1] = slice[
                              limit_indices=(36, 1)
                              start_indices=(0, 0)
                              strides=None
                            ] prj
                            pzb:f64[36] = squeeze[dimensions=(1,)] pza
                            pzc:f64[1,36] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 36)
                            ] pzb
                            pzd:f64[400,36] = add pyz pzc
                            pze:f64[400,4] = slice[
                              limit_indices=(400, 4)
                              start_indices=(0, 0)
                              strides=None
                            ] pyq
                            pzf:i32[1] = broadcast_in_dim[
                              broadcast_dimensions=()
                              shape=(1,)
                            ] 3
                            pzg:f64[400,19] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(400, 19)
                            ] prm
                            pzh:f64[400,19] = scatter[
                              dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1), inserted_window_dims=(), scatter_dims_to_operand_dims=(1,))
                              indices_are_sorted=True
                              mode=GatherScatterMode.FILL_OR_DROP
                              unique_indices=True
                              update_consts=()
                              update_jaxpr=None
                            ] pzg pzf pze
                            pzi:f64[400,12] = slice[
                              limit_indices=(400, 16)
                              start_indices=(0, 4)
                              strides=None
                            ] pyq
                            pzj:i32[1] = broadcast_in_dim[
                              broadcast_dimensions=()
                              shape=(1,)
                            ] 7
                            pzk:f64[400,19] = scatter[
                              dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1), inserted_window_dims=(), scatter_dims_to_operand_dims=(1,))
                              indices_are_sorted=True
                              mode=GatherScatterMode.FILL_OR_DROP
                              unique_indices=True
                              update_consts=()
                              update_jaxpr=None
                            ] pzh pzj pzi
                            pzl:f64[400,4] = slice[
                              limit_indices=(400, 4)
                              start_indices=(0, 0)
                              strides=None
                            ] pyq
                            pzm:f64[400,3] = slice[
                              limit_indices=(400, 19)
                              start_indices=(0, 16)
                              strides=None
                            ] pyq
                            pzn:f64[400,1] = slice[
                              limit_indices=(400, 1)
                              start_indices=(0, 0)
                              strides=None
                            ] pzl
                            pzo:f64[400] = squeeze[dimensions=(1,)] pzn
                            pzp:f64[400,3] = slice[
                              limit_indices=(400, 4)
                              start_indices=(0, 1)
                              strides=None
                            ] pzl
                            pzq:f64[400] = dot_general[
                              dimension_numbers=(([1], [1]), ([0], [0]))
                              preferred_element_type=float64
                            ] pzp pzm
                            pzr:f64[400,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(400, 1)
                            ] pzq
                            pzs:f64[400,3] = mul pzr pzp
                            pzt:f64[400,3] = mul 2.0 pzs
                            pzu:f64[400] = mul pzo pzo
                            pzv:f64[400] = dot_general[
                              dimension_numbers=(([1], [1]), ([0], [0]))
                              preferred_element_type=float64
                            ] pzp pzp
                            pzw:f64[400] = sub pzu pzv
                            pzx:f64[400,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(400, 1)
                            ] pzw
                            pzy:f64[400,3] = mul pzx pzm
                            pzz:f64[400,3] = add pzt pzy
                            qaa:f64[400] = mul 2.0 pzo
                            qab:f64[400,3] = pjit[name=cross jaxpr=cross9] pzp pzm
                            qac:f64[400,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(400, 1)
                            ] qaa
                            qad:f64[400,3] = mul qac qab
                            qae:f64[400,3] = add pzz qad
                            qaf:f64[400,3] = slice[
                              limit_indices=(400, 22)
                              start_indices=(0, 19)
                              strides=None
                            ] pyq
                            qag:f64[4] = convert_element_type[
                              new_dtype=float64
                              weak_type=False
                            ] prn
                            qah:f64[1,4] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 4)
                            ] qag
                            qai:f64[400,4] = mul pzl qah
                            qaj:f64[400,1] = slice[
                              limit_indices=(400, 1)
                              start_indices=(0, 0)
                              strides=None
                            ] qai
                            qak:f64[400] = squeeze[dimensions=(1,)] qaj
                            qal:f64[400,3] = slice[
                              limit_indices=(400, 4)
                              start_indices=(0, 1)
                              strides=None
                            ] qai
                            qam:f64[400] = dot_general[
                              dimension_numbers=(([1], [1]), ([0], [0]))
                              preferred_element_type=float64
                            ] qal qaf
                            qan:f64[400,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(400, 1)
                            ] qam
                            qao:f64[400,3] = mul qan qal
                            qap:f64[400,3] = mul 2.0 qao
                            qaq:f64[400] = mul qak qak
                            qar:f64[400] = dot_general[
                              dimension_numbers=(([1], [1]), ([0], [0]))
                              preferred_element_type=float64
                            ] qal qal
                            qas:f64[400] = sub qaq qar
                            qat:f64[400,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(400, 1)
                            ] qas
                            qau:f64[400,3] = mul qat qaf
                            qav:f64[400,3] = add qap qau
                            qaw:f64[400] = mul 2.0 qak
                            qax:f64[400,3] = pjit[name=cross jaxpr=cross9] qal qaf
                            qay:f64[400,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(400, 1)
                            ] qaw
                            qaz:f64[400,3] = mul qay qax
                            qba:f64[400,3] = add qav qaz
                            qbb:f64[18] = broadcast_in_dim[
                              broadcast_dimensions=()
                              shape=(18,)
                            ] 0.0
                            qbc:i32[1] = broadcast_in_dim[
                              broadcast_dimensions=()
                              shape=(1,)
                            ] 0
                            qbd:f64[400,18] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(400, 18)
                            ] qbb
                            qbe:f64[400,18] = scatter[
                              dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1), inserted_window_dims=(), scatter_dims_to_operand_dims=(1,))
                              indices_are_sorted=True
                              mode=GatherScatterMode.FILL_OR_DROP
                              unique_indices=True
                              update_consts=()
                              update_jaxpr=None
                            ] qbd qbc qae
                            qbf:i32[1] = broadcast_in_dim[
                              broadcast_dimensions=()
                              shape=(1,)
                            ] 3
                            qbg:f64[400,18] = scatter[
                              dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1), inserted_window_dims=(), scatter_dims_to_operand_dims=(1,))
                              indices_are_sorted=True
                              mode=GatherScatterMode.FILL_OR_DROP
                              unique_indices=True
                              update_consts=()
                              update_jaxpr=None
                            ] qbe qbf qba
                            qbh:f64[400,12] = slice[
                              limit_indices=(400, 34)
                              start_indices=(0, 22)
                              strides=None
                            ] pyq
                            qbi:i32[1] = broadcast_in_dim[
                              broadcast_dimensions=()
                              shape=(1,)
                            ] 6
                            qbj:f64[400,18] = scatter[
                              dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1), inserted_window_dims=(), scatter_dims_to_operand_dims=(1,))
                              indices_are_sorted=True
                              mode=GatherScatterMode.FILL_OR_DROP
                              unique_indices=True
                              update_consts=()
                              update_jaxpr=None
                            ] qbg qbi qbh
                            qbk:f64[400,7] = slice[
                              limit_indices=(400, 7)
                              start_indices=(0, 0)
                              strides=None
                            ] pzk
                            qbl:f64[400,1,7] = reshape[
                              dimensions=None
                              new_sizes=(400, 1, 7)
                            ] qbk
                            qbm:f64[400,1,3] = slice[
                              limit_indices=(400, 1, 3)
                              start_indices=(0, 0, 0)
                              strides=None
                            ] qbl
                            qbn:f64[400,1,4] = slice[
                              limit_indices=(400, 1, 7)
                              start_indices=(0, 0, 3)
                              strides=None
                            ] qbl
                            qbo:f64[400,12] = slice[
                              limit_indices=(400, 19)
                              start_indices=(0, 7)
                              strides=None
                            ] pzk
                            qbp:f64[12,3] = slice[
                              limit_indices=(18, 3)
                              start_indices=(6, 0)
                              strides=None
                            ] pro
                            qbq:f64[12,3] = slice[
                              limit_indices=(18, 3)
                              start_indices=(6, 0)
                              strides=None
                            ] prp
                            qbr:f64[12,1] = slice[
                              limit_indices=(12, 1)
                              start_indices=(0, 0)
                              strides=None
                            ] qbp
                            qbs:f64[12] = squeeze[dimensions=(1,)] qbr
                            qbt:f64[400,12] = div qbo 2.0
                            qbu:f64[400,12] = sin qbt
                            qbv:f64[1,12] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 12)
                            ] qbs
                            qbw:f64[400,12] = mul qbv qbu
                            qbx:f64[12,1] = slice[
                              limit_indices=(12, 2)
                              start_indices=(0, 1)
                              strides=None
                            ] qbp
                            qby:f64[12] = squeeze[dimensions=(1,)] qbx
                            qbz:f64[400,12] = div qbo 2.0
                            qca:f64[400,12] = sin qbz
                            qcb:f64[1,12] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 12)
                            ] qby
                            qcc:f64[400,12] = mul qcb qca
                            qcd:f64[12,1] = slice[
                              limit_indices=(12, 3)
                              start_indices=(0, 2)
                              strides=None
                            ] qbp
                            qce:f64[12] = squeeze[dimensions=(1,)] qcd
                            qcf:f64[400,12] = div qbo 2.0
                            qcg:f64[400,12] = sin qcf
                            qch:f64[1,12] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 12)
                            ] qce
                            qci:f64[400,12] = mul qch qcg
                            qcj:f64[400,12] = div qbo 2.0
                            qck:f64[400,12] = cos qcj
                            qcl:f64[400,12,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(400, 12, 1)
                            ] qck
                            qcm:f64[400,12,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(400, 12, 1)
                            ] qbw
                            qcn:f64[400,12,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(400, 12, 1)
                            ] qcc
                            qco:f64[400,12,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(400, 12, 1)
                            ] qci
                            qcp:f64[400,12,4] = concatenate[dimension=2] qcl qcm
                              qcn qco
                            qcq:bool[400,12] = pjit[
                              name=allclose
                              jaxpr={ lambda ; qcr:f64[400,12,4] qcs:f64[]. let
                                  qct:bool[400,12,4] = pjit[
                                    name=isclose
                                    jaxpr={ lambda ; qcu:f64[400,12,4] qcv:f64[]
                                        qcw:f64[] qcx:f64[]. let
                                        qcy:f64[] = convert_element_type[
                                          new_dtype=float64
                                          weak_type=False
                                        ] qcv
                                        qcz:f64[] = convert_element_type[
                                          new_dtype=float64
                                          weak_type=False
                                        ] qcw
                                        qda:f64[] = convert_element_type[
                                          new_dtype=float64
                                          weak_type=False
                                        ] qcx
                                        qdb:f64[400,12,4] = sub qcu qcy
                                        qdc:f64[400,12,4] = abs qdb
                                        qdd:f64[] = abs qcy
                                        qde:f64[] = mul qcz qdd
                                        qdf:f64[] = add qda qde
                                        qdg:bool[400,12,4] = le qdc qdf
                                        qdh:bool[400,12,4] = pjit[
                                          name=isinf
                                          jaxpr={ lambda ; qdi:f64[400,12,4]. let
                                              qdj:f64[400,12,4] = abs qdi
                                              qdk:bool[400,12,4] = eq qdj inf
                                            in (qdk,) }
                                        ] qcu
                                        qdl:bool[] = pjit[
                                          name=isinf
                                          jaxpr=isinf1
                                        ] qcy
                                        qdm:bool[400,12,4] = or qdh qdl
                                        qdn:bool[400,12,4] = and qdh qdl
                                        qdo:bool[400,12,4] = not qdm
                                        qdp:bool[400,12,4] = and qdg qdo
                                        qdq:bool[400,12,4] = eq qcu qcy
                                        qdr:bool[400,12,4] = and qdn qdq
                                        qds:bool[400,12,4] = or qdp qdr
                                        qdt:bool[400,12,4] = ne qcu qcu
                                        qdu:bool[] = ne qcy qcy
                                        qdv:bool[400,12,4] = or qdt qdu
                                        qdw:bool[400,12,4] = not qdv
                                        qdx:bool[400,12,4] = and qds qdw
                                      in (qdx,) }
                                  ] qcr qcs 1e-05 1e-08
                                  qdy:bool[400,12] = reduce_and[axes=(2,)] qct
                                in (qdy,) }
                            ] qcp 0.0
                            qdz:f64[4] = broadcast_in_dim[
                              broadcast_dimensions=()
                              shape=(4,)
                            ] 1.0
                            qea:f64[400,12,4] = pjit[
                              name=_where
                              jaxpr={ lambda ; qeb:bool[400,12] qec:f64[4] qed:f64[400,12,4]. let
                                  qee:bool[400,12,4] = broadcast_in_dim[
                                    broadcast_dimensions=(0, 1)
                                    shape=(400, 12, 4)
                                  ] qeb
                                  qef:f64[12,4] = broadcast_in_dim[
                                    broadcast_dimensions=(1,)
                                    shape=(12, 4)
                                  ] qec
                                  qeg:f64[400,12,4] = broadcast_in_dim[
                                    broadcast_dimensions=(1, 2)
                                    shape=(400, 12, 4)
                                  ] qef
                                  qeh:f64[400,12,4] = select_n qee qed qeg
                                in (qeh,) }
                            ] qcq qdz qcp
                            qei:f64[400,12] = pjit[
                              name=norm
                              jaxpr={ lambda ; qej:f64[400,12,4]. let
                                  qek:f64[400,12,4] = mul qej qej
                                  qel:f64[400,12] = reduce_sum[axes=(2,)] qek
                                  qem:f64[400,12] = sqrt qel
                                in (qem,) }
                            ] qea
                            qen:f64[400,12] = pjit[
                              name=_where
                              jaxpr={ lambda ; qeo:bool[400,12] qep:f64[] qeq:f64[400,12]. let
                                  qer:f64[] = convert_element_type[
                                    new_dtype=float64
                                    weak_type=False
                                  ] qep
                                  qes:f64[12] = broadcast_in_dim[
                                    broadcast_dimensions=()
                                    shape=(12,)
                                  ] qer
                                  qet:f64[400,12] = broadcast_in_dim[
                                    broadcast_dimensions=(1,)
                                    shape=(400, 12)
                                  ] qes
                                  qeu:f64[400,12] = select_n qeo qeq qet
                                in (qeu,) }
                            ] qcq 0.0 qei
                            qev:bool[400,12] = eq qen 0.0
                            qew:f64[400,12] = convert_element_type[
                              new_dtype=float64
                              weak_type=True
                            ] qev
                            qex:f64[400,12] = mul 1e-06 qew
                            qey:f64[400,12] = convert_element_type[
                              new_dtype=float64
                              weak_type=False
                            ] qex
                            qez:f64[400,12] = add qen qey
                            qfa:f64[400,12,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(400, 12, 1)
                            ] qez
                            qfb:f64[400,12,4] = div qcp qfa
                            qfc:f64[400,12,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(400, 12, 1)
                            ] qbo
                            qfd:f64[1,12,3] = broadcast_in_dim[
                              broadcast_dimensions=(1, 2)
                              shape=(1, 12, 3)
                            ] qbq
                            qfe:f64[400,12,3] = mul qfd qfc
                            qff:f64[400,12,1,3] = reshape[
                              dimensions=None
                              new_sizes=(400, 12, 1, 3)
                            ] qfe
                            qfg:f64[400,12,1,4] = reshape[
                              dimensions=None
                              new_sizes=(400, 12, 1, 4)
                            ] qfb
                            qfh:f64[400,12,3] = pjit[
                              name=_take
                              jaxpr={ lambda ; qfi:f64[400,12,1,3] qfj:i64[]. let
                                  qfk:i64[] = pjit[
                                    name=remainder
                                    jaxpr=remainder9
                                  ] qfj 1
                                  qfl:i64[1] = broadcast_in_dim[
                                    broadcast_dimensions=()
                                    shape=(1,)
                                  ] qfk
                                  qfm:f64[400,12,3] = gather[
                                    dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(2,), start_index_map=(2,))
                                    fill_value=None
                                    indices_are_sorted=False
                                    mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                    slice_sizes=(400, 12, 1, 3)
                                    unique_indices=False
                                  ] qfi qfl
                                in (qfm,) }
                            ] qff 0
                            qfn:f64[400,12,4] = pjit[
                              name=_take
                              jaxpr={ lambda ; qfo:f64[400,12,1,4] qfp:i64[]. let
                                  qfq:i64[] = pjit[
                                    name=remainder
                                    jaxpr=remainder9
                                  ] qfp 1
                                  qfr:i64[1] = broadcast_in_dim[
                                    broadcast_dimensions=()
                                    shape=(1,)
                                  ] qfq
                                  qfs:f64[400,12,4] = gather[
                                    dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(2,), start_index_map=(2,))
                                    fill_value=None
                                    indices_are_sorted=False
                                    mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                    slice_sizes=(400, 12, 1, 4)
                                    unique_indices=False
                                  ] qfo qfr
                                in (qfs,) }
                            ] qfg 0
                            qft:f64[400,13,3] = concatenate[dimension=1] qbm qfh
                            qfu:f64[400,13,4] = concatenate[dimension=1] qbn qfn
                            qfv:f64[13,3] = broadcast_in_dim[
                              broadcast_dimensions=()
                              shape=(13, 3)
                            ] 0.0
                            qfw:f64[400,13,1] = slice[
                              limit_indices=(400, 13, 1)
                              start_indices=(0, 0, 0)
                              strides=None
                            ] qfu
                            qfx:f64[400,13] = squeeze[dimensions=(2,)] qfw
                            qfy:f64[400,13,3] = slice[
                              limit_indices=(400, 13, 4)
                              start_indices=(0, 0, 1)
                              strides=None
                            ] qfu
                            qfz:f64[13,400] = dot_general[
                              dimension_numbers=(([2], [1]), ([1], [0]))
                              preferred_element_type=float64
                            ] qfy prq
                            qga:f64[400,13] = transpose[permutation=(1, 0)] qfz
                            qgb:f64[400,13,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(400, 13, 1)
                            ] qga
                            qgc:f64[400,13,3] = mul qgb qfy
                            qgd:f64[400,13,3] = mul 2.0 qgc
                            qge:f64[400,13] = mul qfx qfx
                            qgf:f64[400,13] = dot_general[
                              dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
                              preferred_element_type=float64
                            ] qfy qfy
                            qgg:f64[400,13] = sub qge qgf
                            qgh:f64[400,13,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(400, 13, 1)
                            ] qgg
                            qgi:f64[1,13,3] = broadcast_in_dim[
                              broadcast_dimensions=(1, 2)
                              shape=(1, 13, 3)
                            ] prq
                            qgj:f64[400,13,3] = mul qgh qgi
                            qgk:f64[400,13,3] = add qgd qgj
                            qgl:f64[400,13] = mul 2.0 qfx
                            qgm:f64[400,13,3] = pjit[name=cross jaxpr=cross10] qfy
                              prq
                            qgn:f64[400,13,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(400, 13, 1)
                            ] qgl
                            qgo:f64[400,13,3] = mul qgn qgm
                            qgp:f64[400,13,3] = add qgk qgo
                            qgq:f64[1,13,3] = broadcast_in_dim[
                              broadcast_dimensions=(1, 2)
                              shape=(1, 13, 3)
                            ] qfv
                            qgr:f64[400,13,3] = add qgq qgp
                            qgs:f64[1,13,3] = broadcast_in_dim[
                              broadcast_dimensions=(1, 2)
                              shape=(1, 13, 3)
                            ] prq
                            qgt:f64[400,13,3] = add qft qgs
                            qgu:f64[400,13,3] = sub qgt qgr
                            qgv:f64[13,1] = slice[
                              limit_indices=(13, 1)
                              start_indices=(0, 0)
                              strides=None
                            ] prs
                            qgw:f64[13] = squeeze[dimensions=(1,)] qgv
                            qgx:f64[13,3] = slice[
                              limit_indices=(13, 4)
                              start_indices=(0, 1)
                              strides=None
                            ] prs
                            qgy:f64[13,400] = dot_general[
                              dimension_numbers=(([1], [2]), ([0], [1]))
                              preferred_element_type=float64
                            ] qgx qgu
                            qgz:f64[400,13] = transpose[permutation=(1, 0)] qgy
                            qha:f64[400,13,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(400, 13, 1)
                            ] qgz
                            qhb:f64[1,13,3] = broadcast_in_dim[
                              broadcast_dimensions=(1, 2)
                              shape=(1, 13, 3)
                            ] qgx
                            qhc:f64[400,13,3] = mul qha qhb
                            qhd:f64[400,13,3] = mul 2.0 qhc
                            qhe:f64[13] = mul qgw qgw
                            qhf:f64[13] = dot_general[
                              dimension_numbers=(([1], [1]), ([0], [0]))
                              preferred_element_type=float64
                            ] qgx qgx
                            qhg:f64[13] = sub qhe qhf
                            qhh:f64[13,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(13, 1)
                            ] qhg
                            qhi:f64[1,13,1] = broadcast_in_dim[
                              broadcast_dimensions=(1, 2)
                              shape=(1, 13, 1)
                            ] qhh
                            qhj:f64[400,13,3] = mul qhi qgu
                            qhk:f64[400,13,3] = add qhd qhj
                            qhl:f64[13] = mul 2.0 qgw
                            qhm:f64[400,13,3] = pjit[
                              name=cross
                              jaxpr={ lambda ; qhn:f64[13,3] qho:f64[400,13,3]. let
                                  qhp:i32[1] = broadcast_in_dim[
                                    broadcast_dimensions=()
                                    shape=(1,)
                                  ] 0
                                  qhq:f64[13] = gather[
                                    dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
                                    fill_value=None
                                    indices_are_sorted=True
                                    mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                    slice_sizes=(13, 1)
                                    unique_indices=True
                                  ] qhn qhp
                                  qhr:i32[1] = broadcast_in_dim[
                                    broadcast_dimensions=()
                                    shape=(1,)
                                  ] 1
                                  qhs:f64[13] = gather[
                                    dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
                                    fill_value=None
                                    indices_are_sorted=True
                                    mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                    slice_sizes=(13, 1)
                                    unique_indices=True
                                  ] qhn qhr
                                  qht:i32[1] = broadcast_in_dim[
                                    broadcast_dimensions=()
                                    shape=(1,)
                                  ] 2
                                  qhu:f64[13] = gather[
                                    dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
                                    fill_value=None
                                    indices_are_sorted=True
                                    mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                    slice_sizes=(13, 1)
                                    unique_indices=True
                                  ] qhn qht
                                  qhv:i32[1] = broadcast_in_dim[
                                    broadcast_dimensions=()
                                    shape=(1,)
                                  ] 0
                                  qhw:f64[400,13] = gather[
                                    dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
                                    fill_value=None
                                    indices_are_sorted=True
                                    mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                    slice_sizes=(400, 13, 1)
                                    unique_indices=True
                                  ] qho qhv
                                  qhx:i32[1] = broadcast_in_dim[
                                    broadcast_dimensions=()
                                    shape=(1,)
                                  ] 1
                                  qhy:f64[400,13] = gather[
                                    dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
                                    fill_value=None
                                    indices_are_sorted=True
                                    mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                    slice_sizes=(400, 13, 1)
                                    unique_indices=True
                                  ] qho qhx
                                  qhz:i32[1] = broadcast_in_dim[
                                    broadcast_dimensions=()
                                    shape=(1,)
                                  ] 2
                                  qia:f64[400,13] = gather[
                                    dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
                                    fill_value=None
                                    indices_are_sorted=True
                                    mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                    slice_sizes=(400, 13, 1)
                                    unique_indices=True
                                  ] qho qhz
                                  qib:f64[1,13] = broadcast_in_dim[
                                    broadcast_dimensions=(1,)
                                    shape=(1, 13)
                                  ] qhs
                                  qic:f64[400,13] = mul qib qia
                                  qid:f64[1,13] = broadcast_in_dim[
                                    broadcast_dimensions=(1,)
                                    shape=(1, 13)
                                  ] qhu
                                  qie:f64[400,13] = mul qid qhy
                                  qif:f64[400,13] = sub qic qie
                                  qig:f64[1,13] = broadcast_in_dim[
                                    broadcast_dimensions=(1,)
                                    shape=(1, 13)
                                  ] qhu
                                  qih:f64[400,13] = mul qig qhw
                                  qii:f64[1,13] = broadcast_in_dim[
                                    broadcast_dimensions=(1,)
                                    shape=(1, 13)
                                  ] qhq
                                  qij:f64[400,13] = mul qii qia
                                  qik:f64[400,13] = sub qih qij
                                  qil:f64[1,13] = broadcast_in_dim[
                                    broadcast_dimensions=(1,)
                                    shape=(1, 13)
                                  ] qhq
                                  qim:f64[400,13] = mul qil qhy
                                  qin:f64[1,13] = broadcast_in_dim[
                                    broadcast_dimensions=(1,)
                                    shape=(1, 13)
                                  ] qhs
                                  qio:f64[400,13] = mul qin qhw
                                  qip:f64[400,13] = sub qim qio
                                  qiq:f64[400,13,1] = broadcast_in_dim[
                                    broadcast_dimensions=(0, 1)
                                    shape=(400, 13, 1)
                                  ] qif
                                  qir:f64[400,13,1] = broadcast_in_dim[
                                    broadcast_dimensions=(0, 1)
                                    shape=(400, 13, 1)
                                  ] qik
                                  qis:f64[400,13,1] = broadcast_in_dim[
                                    broadcast_dimensions=(0, 1)
                                    shape=(400, 13, 1)
                                  ] qip
                                  qit:f64[400,13,3] = concatenate[dimension=2] qiq
                                    qir qis
                                in (qit,) }
                            ] qgx qgu
                            qiu:f64[13,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(13, 1)
                            ] qhl
                            qiv:f64[1,13,1] = broadcast_in_dim[
                              broadcast_dimensions=(1, 2)
                              shape=(1, 13, 1)
                            ] qiu
                            qiw:f64[400,13,3] = mul qiv qhm
                            qix:f64[400,13,3] = add qhk qiw
                            qiy:f64[1,13,3] = broadcast_in_dim[
                              broadcast_dimensions=(1, 2)
                              shape=(1, 13, 3)
                            ] prt
                            qiz:f64[400,13,3] = add qiy qix
                            qja:f64[13,1] = slice[
                              limit_indices=(13, 1)
                              start_indices=(0, 0)
                              strides=None
                            ] prs
                            qjb:f64[13] = squeeze[dimensions=(1,)] qja
                            qjc:f64[400,13,1] = slice[
                              limit_indices=(400, 13, 1)
                              start_indices=(0, 0, 0)
                              strides=None
                            ] qfu
                            qjd:f64[400,13] = squeeze[dimensions=(2,)] qjc
                            qje:f64[1,13] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 13)
                            ] qjb
                            qjf:f64[400,13] = mul qje qjd
                            qjg:f64[13,1] = slice[
                              limit_indices=(13, 2)
                              start_indices=(0, 1)
                              strides=None
                            ] prs
                            qjh:f64[13] = squeeze[dimensions=(1,)] qjg
                            qji:f64[400,13,1] = slice[
                              limit_indices=(400, 13, 2)
                              start_indices=(0, 0, 1)
                              strides=None
                            ] qfu
                            qjj:f64[400,13] = squeeze[dimensions=(2,)] qji
                            qjk:f64[1,13] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 13)
                            ] qjh
                            qjl:f64[400,13] = mul qjk qjj
                            qjm:f64[400,13] = sub qjf qjl
                            qjn:f64[13,1] = slice[
                              limit_indices=(13, 3)
                              start_indices=(0, 2)
                              strides=None
                            ] prs
                            qjo:f64[13] = squeeze[dimensions=(1,)] qjn
                            qjp:f64[400,13,1] = slice[
                              limit_indices=(400, 13, 3)
                              start_indices=(0, 0, 2)
                              strides=None
                            ] qfu
                            qjq:f64[400,13] = squeeze[dimensions=(2,)] qjp
                            qjr:f64[1,13] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 13)
                            ] qjo
                            qjs:f64[400,13] = mul qjr qjq
                            qjt:f64[400,13] = sub qjm qjs
                            qju:f64[13,1] = slice[
                              limit_indices=(13, 4)
                              start_indices=(0, 3)
                              strides=None
                            ] prs
                            qjv:f64[13] = squeeze[dimensions=(1,)] qju
                            qjw:f64[400,13,1] = slice[
                              limit_indices=(400, 13, 4)
                              start_indices=(0, 0, 3)
                              strides=None
                            ] qfu
                            qjx:f64[400,13] = squeeze[dimensions=(2,)] qjw
                            qjy:f64[1,13] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 13)
                            ] qjv
                            qjz:f64[400,13] = mul qjy qjx
                            qka:f64[400,13] = sub qjt qjz
                            qkb:f64[13,1] = slice[
                              limit_indices=(13, 1)
                              start_indices=(0, 0)
                              strides=None
                            ] prs
                            qkc:f64[13] = squeeze[dimensions=(1,)] qkb
                            qkd:f64[400,13,1] = slice[
                              limit_indices=(400, 13, 2)
                              start_indices=(0, 0, 1)
                              strides=None
                            ] qfu
                            qke:f64[400,13] = squeeze[dimensions=(2,)] qkd
                            qkf:f64[1,13] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 13)
                            ] qkc
                            qkg:f64[400,13] = mul qkf qke
                            qkh:f64[13,1] = slice[
                              limit_indices=(13, 2)
                              start_indices=(0, 1)
                              strides=None
                            ] prs
                            qki:f64[13] = squeeze[dimensions=(1,)] qkh
                            qkj:f64[400,13,1] = slice[
                              limit_indices=(400, 13, 1)
                              start_indices=(0, 0, 0)
                              strides=None
                            ] qfu
                            qkk:f64[400,13] = squeeze[dimensions=(2,)] qkj
                            qkl:f64[1,13] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 13)
                            ] qki
                            qkm:f64[400,13] = mul qkl qkk
                            qkn:f64[400,13] = add qkg qkm
                            qko:f64[13,1] = slice[
                              limit_indices=(13, 3)
                              start_indices=(0, 2)
                              strides=None
                            ] prs
                            qkp:f64[13] = squeeze[dimensions=(1,)] qko
                            qkq:f64[400,13,1] = slice[
                              limit_indices=(400, 13, 4)
                              start_indices=(0, 0, 3)
                              strides=None
                            ] qfu
                            qkr:f64[400,13] = squeeze[dimensions=(2,)] qkq
                            qks:f64[1,13] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 13)
                            ] qkp
                            qkt:f64[400,13] = mul qks qkr
                            qku:f64[400,13] = add qkn qkt
                            qkv:f64[13,1] = slice[
                              limit_indices=(13, 4)
                              start_indices=(0, 3)
                              strides=None
                            ] prs
                            qkw:f64[13] = squeeze[dimensions=(1,)] qkv
                            qkx:f64[400,13,1] = slice[
                              limit_indices=(400, 13, 3)
                              start_indices=(0, 0, 2)
                              strides=None
                            ] qfu
                            qky:f64[400,13] = squeeze[dimensions=(2,)] qkx
                            qkz:f64[1,13] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 13)
                            ] qkw
                            qla:f64[400,13] = mul qkz qky
                            qlb:f64[400,13] = sub qku qla
                            qlc:f64[13,1] = slice[
                              limit_indices=(13, 1)
                              start_indices=(0, 0)
                              strides=None
                            ] prs
                            qld:f64[13] = squeeze[dimensions=(1,)] qlc
                            qle:f64[400,13,1] = slice[
                              limit_indices=(400, 13, 3)
                              start_indices=(0, 0, 2)
                              strides=None
                            ] qfu
                            qlf:f64[400,13] = squeeze[dimensions=(2,)] qle
                            qlg:f64[1,13] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 13)
                            ] qld
                            qlh:f64[400,13] = mul qlg qlf
                            qli:f64[13,1] = slice[
                              limit_indices=(13, 2)
                              start_indices=(0, 1)
                              strides=None
                            ] prs
                            qlj:f64[13] = squeeze[dimensions=(1,)] qli
                            qlk:f64[400,13,1] = slice[
                              limit_indices=(400, 13, 4)
                              start_indices=(0, 0, 3)
                              strides=None
                            ] qfu
                            qll:f64[400,13] = squeeze[dimensions=(2,)] qlk
                            qlm:f64[1,13] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 13)
                            ] qlj
                            qln:f64[400,13] = mul qlm qll
                            qlo:f64[400,13] = sub qlh qln
                            qlp:f64[13,1] = slice[
                              limit_indices=(13, 3)
                              start_indices=(0, 2)
                              strides=None
                            ] prs
                            qlq:f64[13] = squeeze[dimensions=(1,)] qlp
                            qlr:f64[400,13,1] = slice[
                              limit_indices=(400, 13, 1)
                              start_indices=(0, 0, 0)
                              strides=None
                            ] qfu
                            qls:f64[400,13] = squeeze[dimensions=(2,)] qlr
                            qlt:f64[1,13] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 13)
                            ] qlq
                            qlu:f64[400,13] = mul qlt qls
                            qlv:f64[400,13] = add qlo qlu
                            qlw:f64[13,1] = slice[
                              limit_indices=(13, 4)
                              start_indices=(0, 3)
                              strides=None
                            ] prs
                            qlx:f64[13] = squeeze[dimensions=(1,)] qlw
                            qly:f64[400,13,1] = slice[
                              limit_indices=(400, 13, 2)
                              start_indices=(0, 0, 1)
                              strides=None
                            ] qfu
                            qlz:f64[400,13] = squeeze[dimensions=(2,)] qly
                            qma:f64[1,13] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 13)
                            ] qlx
                            qmb:f64[400,13] = mul qma qlz
                            qmc:f64[400,13] = add qlv qmb
                            qmd:f64[13,1] = slice[
                              limit_indices=(13, 1)
                              start_indices=(0, 0)
                              strides=None
                            ] prs
                            qme:f64[13] = squeeze[dimensions=(1,)] qmd
                            qmf:f64[400,13,1] = slice[
                              limit_indices=(400, 13, 4)
                              start_indices=(0, 0, 3)
                              strides=None
                            ] qfu
                            qmg:f64[400,13] = squeeze[dimensions=(2,)] qmf
                            qmh:f64[1,13] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 13)
                            ] qme
                            qmi:f64[400,13] = mul qmh qmg
                            qmj:f64[13,1] = slice[
                              limit_indices=(13, 2)
                              start_indices=(0, 1)
                              strides=None
                            ] prs
                            qmk:f64[13] = squeeze[dimensions=(1,)] qmj
                            qml:f64[400,13,1] = slice[
                              limit_indices=(400, 13, 3)
                              start_indices=(0, 0, 2)
                              strides=None
                            ] qfu
                            qmm:f64[400,13] = squeeze[dimensions=(2,)] qml
                            qmn:f64[1,13] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 13)
                            ] qmk
                            qmo:f64[400,13] = mul qmn qmm
                            qmp:f64[400,13] = add qmi qmo
                            qmq:f64[13,1] = slice[
                              limit_indices=(13, 3)
                              start_indices=(0, 2)
                              strides=None
                            ] prs
                            qmr:f64[13] = squeeze[dimensions=(1,)] qmq
                            qms:f64[400,13,1] = slice[
                              limit_indices=(400, 13, 2)
                              start_indices=(0, 0, 1)
                              strides=None
                            ] qfu
                            qmt:f64[400,13] = squeeze[dimensions=(2,)] qms
                            qmu:f64[1,13] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 13)
                            ] qmr
                            qmv:f64[400,13] = mul qmu qmt
                            qmw:f64[400,13] = sub qmp qmv
                            qmx:f64[13,1] = slice[
                              limit_indices=(13, 4)
                              start_indices=(0, 3)
                              strides=None
                            ] prs
                            qmy:f64[13] = squeeze[dimensions=(1,)] qmx
                            qmz:f64[400,13,1] = slice[
                              limit_indices=(400, 13, 1)
                              start_indices=(0, 0, 0)
                              strides=None
                            ] qfu
                            qna:f64[400,13] = squeeze[dimensions=(2,)] qmz
                            qnb:f64[1,13] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 13)
                            ] qmy
                            qnc:f64[400,13] = mul qnb qna
                            qnd:f64[400,13] = add qmw qnc
                            qne:f64[400,13,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(400, 13, 1)
                            ] qka
                            qnf:f64[400,13,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(400, 13, 1)
                            ] qlb
                            qng:f64[400,13,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(400, 13, 1)
                            ] qmc
                            qnh:f64[400,13,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(400, 13, 1)
                            ] qnd
                            qni:f64[400,13,4] = concatenate[dimension=2] qne qnf
                              qng qnh
                            qnj:f64[400,1,3] = slice[
                              limit_indices=(400, 1, 3)
                              start_indices=(0, 0, 0)
                              strides=None
                            ] qiz
                            qnk:f64[400,1,4] = slice[
                              limit_indices=(400, 1, 4)
                              start_indices=(0, 0, 0)
                              strides=None
                            ] qni
                            qnl:f64[400,4,3] = pjit[name=_take jaxpr=_take15] qiz
                              pru
                            qnm:f64[400,4,4] = pjit[name=_take jaxpr=_take16] qni
                              prv
                            qnn:f64[400,4,3] = pjit[name=_take jaxpr=_take17] qnj
                              prw
                            qno:f64[400,4,4] = pjit[
                              name=_take
                              jaxpr={ lambda ; qnp:f64[400,1,4] qnq:i64[4]. let
                                  qnr:i64[4] = pjit[
                                    name=remainder
                                    jaxpr=remainder5
                                  ] qnq 1
                                  qns:i64[4,1] = broadcast_in_dim[
                                    broadcast_dimensions=(0,)
                                    shape=(4, 1)
                                  ] qnr
                                  qnt:f64[400,4,4] = gather[
                                    dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 2), collapsed_slice_dims=(1,), start_index_map=(1,))
                                    fill_value=None
                                    indices_are_sorted=False
                                    mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                    slice_sizes=(400, 1, 4)
                                    unique_indices=False
                                  ] qnp qns
                                in (qnt,) }
                            ] qnk prx
                            qnu:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 1)
                              start_indices=(0, 0, 0)
                              strides=None
                            ] qno
                            qnv:f64[400,4] = squeeze[dimensions=(2,)] qnu
                            qnw:f64[400,4,3] = slice[
                              limit_indices=(400, 4, 4)
                              start_indices=(0, 0, 1)
                              strides=None
                            ] qno
                            qnx:f64[400,4] = dot_general[
                              dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
                              preferred_element_type=float64
                            ] qnw qnl
                            qny:f64[400,4,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(400, 4, 1)
                            ] qnx
                            qnz:f64[400,4,3] = mul qny qnw
                            qoa:f64[400,4,3] = mul 2.0 qnz
                            qob:f64[400,4] = mul qnv qnv
                            qoc:f64[400,4] = dot_general[
                              dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
                              preferred_element_type=float64
                            ] qnw qnw
                            qod:f64[400,4] = sub qob qoc
                            qoe:f64[400,4,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(400, 4, 1)
                            ] qod
                            qof:f64[400,4,3] = mul qoe qnl
                            qog:f64[400,4,3] = add qoa qof
                            qoh:f64[400,4] = mul 2.0 qnv
                            qoi:f64[400,4,3] = pjit[name=cross jaxpr=cross11] qnw
                              qnl
                            qoj:f64[400,4,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(400, 4, 1)
                            ] qoh
                            qok:f64[400,4,3] = mul qoj qoi
                            qol:f64[400,4,3] = add qog qok
                            qom:f64[400,4,3] = add qnn qol
                            qon:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 1)
                              start_indices=(0, 0, 0)
                              strides=None
                            ] qno
                            qoo:f64[400,4] = squeeze[dimensions=(2,)] qon
                            qop:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 1)
                              start_indices=(0, 0, 0)
                              strides=None
                            ] qnm
                            qoq:f64[400,4] = squeeze[dimensions=(2,)] qop
                            qor:f64[400,4] = mul qoo qoq
                            qos:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 2)
                              start_indices=(0, 0, 1)
                              strides=None
                            ] qno
                            qot:f64[400,4] = squeeze[dimensions=(2,)] qos
                            qou:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 2)
                              start_indices=(0, 0, 1)
                              strides=None
                            ] qnm
                            qov:f64[400,4] = squeeze[dimensions=(2,)] qou
                            qow:f64[400,4] = mul qot qov
                            qox:f64[400,4] = sub qor qow
                            qoy:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 3)
                              start_indices=(0, 0, 2)
                              strides=None
                            ] qno
                            qoz:f64[400,4] = squeeze[dimensions=(2,)] qoy
                            qpa:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 3)
                              start_indices=(0, 0, 2)
                              strides=None
                            ] qnm
                            qpb:f64[400,4] = squeeze[dimensions=(2,)] qpa
                            qpc:f64[400,4] = mul qoz qpb
                            qpd:f64[400,4] = sub qox qpc
                            qpe:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 4)
                              start_indices=(0, 0, 3)
                              strides=None
                            ] qno
                            qpf:f64[400,4] = squeeze[dimensions=(2,)] qpe
                            qpg:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 4)
                              start_indices=(0, 0, 3)
                              strides=None
                            ] qnm
                            qph:f64[400,4] = squeeze[dimensions=(2,)] qpg
                            qpi:f64[400,4] = mul qpf qph
                            qpj:f64[400,4] = sub qpd qpi
                            qpk:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 1)
                              start_indices=(0, 0, 0)
                              strides=None
                            ] qno
                            qpl:f64[400,4] = squeeze[dimensions=(2,)] qpk
                            qpm:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 2)
                              start_indices=(0, 0, 1)
                              strides=None
                            ] qnm
                            qpn:f64[400,4] = squeeze[dimensions=(2,)] qpm
                            qpo:f64[400,4] = mul qpl qpn
                            qpp:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 2)
                              start_indices=(0, 0, 1)
                              strides=None
                            ] qno
                            qpq:f64[400,4] = squeeze[dimensions=(2,)] qpp
                            qpr:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 1)
                              start_indices=(0, 0, 0)
                              strides=None
                            ] qnm
                            qps:f64[400,4] = squeeze[dimensions=(2,)] qpr
                            qpt:f64[400,4] = mul qpq qps
                            qpu:f64[400,4] = add qpo qpt
                            qpv:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 3)
                              start_indices=(0, 0, 2)
                              strides=None
                            ] qno
                            qpw:f64[400,4] = squeeze[dimensions=(2,)] qpv
                            qpx:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 4)
                              start_indices=(0, 0, 3)
                              strides=None
                            ] qnm
                            qpy:f64[400,4] = squeeze[dimensions=(2,)] qpx
                            qpz:f64[400,4] = mul qpw qpy
                            qqa:f64[400,4] = add qpu qpz
                            qqb:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 4)
                              start_indices=(0, 0, 3)
                              strides=None
                            ] qno
                            qqc:f64[400,4] = squeeze[dimensions=(2,)] qqb
                            qqd:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 3)
                              start_indices=(0, 0, 2)
                              strides=None
                            ] qnm
                            qqe:f64[400,4] = squeeze[dimensions=(2,)] qqd
                            qqf:f64[400,4] = mul qqc qqe
                            qqg:f64[400,4] = sub qqa qqf
                            qqh:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 1)
                              start_indices=(0, 0, 0)
                              strides=None
                            ] qno
                            qqi:f64[400,4] = squeeze[dimensions=(2,)] qqh
                            qqj:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 3)
                              start_indices=(0, 0, 2)
                              strides=None
                            ] qnm
                            qqk:f64[400,4] = squeeze[dimensions=(2,)] qqj
                            qql:f64[400,4] = mul qqi qqk
                            qqm:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 2)
                              start_indices=(0, 0, 1)
                              strides=None
                            ] qno
                            qqn:f64[400,4] = squeeze[dimensions=(2,)] qqm
                            qqo:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 4)
                              start_indices=(0, 0, 3)
                              strides=None
                            ] qnm
                            qqp:f64[400,4] = squeeze[dimensions=(2,)] qqo
                            qqq:f64[400,4] = mul qqn qqp
                            qqr:f64[400,4] = sub qql qqq
                            qqs:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 3)
                              start_indices=(0, 0, 2)
                              strides=None
                            ] qno
                            qqt:f64[400,4] = squeeze[dimensions=(2,)] qqs
                            qqu:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 1)
                              start_indices=(0, 0, 0)
                              strides=None
                            ] qnm
                            qqv:f64[400,4] = squeeze[dimensions=(2,)] qqu
                            qqw:f64[400,4] = mul qqt qqv
                            qqx:f64[400,4] = add qqr qqw
                            qqy:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 4)
                              start_indices=(0, 0, 3)
                              strides=None
                            ] qno
                            qqz:f64[400,4] = squeeze[dimensions=(2,)] qqy
                            qra:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 2)
                              start_indices=(0, 0, 1)
                              strides=None
                            ] qnm
                            qrb:f64[400,4] = squeeze[dimensions=(2,)] qra
                            qrc:f64[400,4] = mul qqz qrb
                            qrd:f64[400,4] = add qqx qrc
                            qre:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 1)
                              start_indices=(0, 0, 0)
                              strides=None
                            ] qno
                            qrf:f64[400,4] = squeeze[dimensions=(2,)] qre
                            qrg:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 4)
                              start_indices=(0, 0, 3)
                              strides=None
                            ] qnm
                            qrh:f64[400,4] = squeeze[dimensions=(2,)] qrg
                            qri:f64[400,4] = mul qrf qrh
                            qrj:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 2)
                              start_indices=(0, 0, 1)
                              strides=None
                            ] qno
                            qrk:f64[400,4] = squeeze[dimensions=(2,)] qrj
                            qrl:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 3)
                              start_indices=(0, 0, 2)
                              strides=None
                            ] qnm
                            qrm:f64[400,4] = squeeze[dimensions=(2,)] qrl
                            qrn:f64[400,4] = mul qrk qrm
                            qro:f64[400,4] = add qri qrn
                            qrp:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 3)
                              start_indices=(0, 0, 2)
                              strides=None
                            ] qno
                            qrq:f64[400,4] = squeeze[dimensions=(2,)] qrp
                            qrr:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 2)
                              start_indices=(0, 0, 1)
                              strides=None
                            ] qnm
                            qrs:f64[400,4] = squeeze[dimensions=(2,)] qrr
                            qrt:f64[400,4] = mul qrq qrs
                            qru:f64[400,4] = sub qro qrt
                            qrv:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 4)
                              start_indices=(0, 0, 3)
                              strides=None
                            ] qno
                            qrw:f64[400,4] = squeeze[dimensions=(2,)] qrv
                            qrx:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 1)
                              start_indices=(0, 0, 0)
                              strides=None
                            ] qnm
                            qry:f64[400,4] = squeeze[dimensions=(2,)] qrx
                            qrz:f64[400,4] = mul qrw qry
                            qsa:f64[400,4] = add qru qrz
                            qsb:f64[400,4,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(400, 4, 1)
                            ] qpj
                            qsc:f64[400,4,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(400, 4, 1)
                            ] qqg
                            qsd:f64[400,4,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(400, 4, 1)
                            ] qrd
                            qse:f64[400,4,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(400, 4, 1)
                            ] qsa
                            qsf:f64[400,4,4] = concatenate[dimension=2] qsb qsc qsd
                              qse
                            qsg:f64[400,4,3] = pjit[name=_take jaxpr=_take15] qiz
                              pry
                            qsh:f64[400,4,4] = pjit[name=_take jaxpr=_take16] qni
                              prz
                            qsi:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 1)
                              start_indices=(0, 0, 0)
                              strides=None
                            ] qsf
                            qsj:f64[400,4] = squeeze[dimensions=(2,)] qsi
                            qsk:f64[400,4,3] = slice[
                              limit_indices=(400, 4, 4)
                              start_indices=(0, 0, 1)
                              strides=None
                            ] qsf
                            qsl:f64[400,4] = dot_general[
                              dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
                              preferred_element_type=float64
                            ] qsk qsg
                            qsm:f64[400,4,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(400, 4, 1)
                            ] qsl
                            qsn:f64[400,4,3] = mul qsm qsk
                            qso:f64[400,4,3] = mul 2.0 qsn
                            qsp:f64[400,4] = mul qsj qsj
                            qsq:f64[400,4] = dot_general[
                              dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
                              preferred_element_type=float64
                            ] qsk qsk
                            qsr:f64[400,4] = sub qsp qsq
                            qss:f64[400,4,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(400, 4, 1)
                            ] qsr
                            qst:f64[400,4,3] = mul qss qsg
                            qsu:f64[400,4,3] = add qso qst
                            qsv:f64[400,4] = mul 2.0 qsj
                            qsw:f64[400,4,3] = pjit[name=cross jaxpr=cross11] qsk
                              qsg
                            qsx:f64[400,4,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(400, 4, 1)
                            ] qsv
                            qsy:f64[400,4,3] = mul qsx qsw
                            qsz:f64[400,4,3] = add qsu qsy
                            qta:f64[400,4,3] = add qom qsz
                            qtb:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 1)
                              start_indices=(0, 0, 0)
                              strides=None
                            ] qsf
                            qtc:f64[400,4] = squeeze[dimensions=(2,)] qtb
                            qtd:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 1)
                              start_indices=(0, 0, 0)
                              strides=None
                            ] qsh
                            qte:f64[400,4] = squeeze[dimensions=(2,)] qtd
                            qtf:f64[400,4] = mul qtc qte
                            qtg:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 2)
                              start_indices=(0, 0, 1)
                              strides=None
                            ] qsf
                            qth:f64[400,4] = squeeze[dimensions=(2,)] qtg
                            qti:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 2)
                              start_indices=(0, 0, 1)
                              strides=None
                            ] qsh
                            qtj:f64[400,4] = squeeze[dimensions=(2,)] qti
                            qtk:f64[400,4] = mul qth qtj
                            qtl:f64[400,4] = sub qtf qtk
                            qtm:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 3)
                              start_indices=(0, 0, 2)
                              strides=None
                            ] qsf
                            qtn:f64[400,4] = squeeze[dimensions=(2,)] qtm
                            qto:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 3)
                              start_indices=(0, 0, 2)
                              strides=None
                            ] qsh
                            qtp:f64[400,4] = squeeze[dimensions=(2,)] qto
                            qtq:f64[400,4] = mul qtn qtp
                            qtr:f64[400,4] = sub qtl qtq
                            qts:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 4)
                              start_indices=(0, 0, 3)
                              strides=None
                            ] qsf
                            qtt:f64[400,4] = squeeze[dimensions=(2,)] qts
                            qtu:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 4)
                              start_indices=(0, 0, 3)
                              strides=None
                            ] qsh
                            qtv:f64[400,4] = squeeze[dimensions=(2,)] qtu
                            qtw:f64[400,4] = mul qtt qtv
                            qtx:f64[400,4] = sub qtr qtw
                            qty:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 1)
                              start_indices=(0, 0, 0)
                              strides=None
                            ] qsf
                            qtz:f64[400,4] = squeeze[dimensions=(2,)] qty
                            qua:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 2)
                              start_indices=(0, 0, 1)
                              strides=None
                            ] qsh
                            qub:f64[400,4] = squeeze[dimensions=(2,)] qua
                            quc:f64[400,4] = mul qtz qub
                            qud:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 2)
                              start_indices=(0, 0, 1)
                              strides=None
                            ] qsf
                            que:f64[400,4] = squeeze[dimensions=(2,)] qud
                            quf:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 1)
                              start_indices=(0, 0, 0)
                              strides=None
                            ] qsh
                            qug:f64[400,4] = squeeze[dimensions=(2,)] quf
                            quh:f64[400,4] = mul que qug
                            qui:f64[400,4] = add quc quh
                            quj:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 3)
                              start_indices=(0, 0, 2)
                              strides=None
                            ] qsf
                            quk:f64[400,4] = squeeze[dimensions=(2,)] quj
                            qul:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 4)
                              start_indices=(0, 0, 3)
                              strides=None
                            ] qsh
                            qum:f64[400,4] = squeeze[dimensions=(2,)] qul
                            qun:f64[400,4] = mul quk qum
                            quo:f64[400,4] = add qui qun
                            qup:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 4)
                              start_indices=(0, 0, 3)
                              strides=None
                            ] qsf
                            quq:f64[400,4] = squeeze[dimensions=(2,)] qup
                            qur:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 3)
                              start_indices=(0, 0, 2)
                              strides=None
                            ] qsh
                            qus:f64[400,4] = squeeze[dimensions=(2,)] qur
                            qut:f64[400,4] = mul quq qus
                            quu:f64[400,4] = sub quo qut
                            quv:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 1)
                              start_indices=(0, 0, 0)
                              strides=None
                            ] qsf
                            quw:f64[400,4] = squeeze[dimensions=(2,)] quv
                            qux:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 3)
                              start_indices=(0, 0, 2)
                              strides=None
                            ] qsh
                            quy:f64[400,4] = squeeze[dimensions=(2,)] qux
                            quz:f64[400,4] = mul quw quy
                            qva:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 2)
                              start_indices=(0, 0, 1)
                              strides=None
                            ] qsf
                            qvb:f64[400,4] = squeeze[dimensions=(2,)] qva
                            qvc:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 4)
                              start_indices=(0, 0, 3)
                              strides=None
                            ] qsh
                            qvd:f64[400,4] = squeeze[dimensions=(2,)] qvc
                            qve:f64[400,4] = mul qvb qvd
                            qvf:f64[400,4] = sub quz qve
                            qvg:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 3)
                              start_indices=(0, 0, 2)
                              strides=None
                            ] qsf
                            qvh:f64[400,4] = squeeze[dimensions=(2,)] qvg
                            qvi:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 1)
                              start_indices=(0, 0, 0)
                              strides=None
                            ] qsh
                            qvj:f64[400,4] = squeeze[dimensions=(2,)] qvi
                            qvk:f64[400,4] = mul qvh qvj
                            qvl:f64[400,4] = add qvf qvk
                            qvm:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 4)
                              start_indices=(0, 0, 3)
                              strides=None
                            ] qsf
                            qvn:f64[400,4] = squeeze[dimensions=(2,)] qvm
                            qvo:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 2)
                              start_indices=(0, 0, 1)
                              strides=None
                            ] qsh
                            qvp:f64[400,4] = squeeze[dimensions=(2,)] qvo
                            qvq:f64[400,4] = mul qvn qvp
                            qvr:f64[400,4] = add qvl qvq
                            qvs:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 1)
                              start_indices=(0, 0, 0)
                              strides=None
                            ] qsf
                            qvt:f64[400,4] = squeeze[dimensions=(2,)] qvs
                            qvu:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 4)
                              start_indices=(0, 0, 3)
                              strides=None
                            ] qsh
                            qvv:f64[400,4] = squeeze[dimensions=(2,)] qvu
                            qvw:f64[400,4] = mul qvt qvv
                            qvx:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 2)
                              start_indices=(0, 0, 1)
                              strides=None
                            ] qsf
                            qvy:f64[400,4] = squeeze[dimensions=(2,)] qvx
                            qvz:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 3)
                              start_indices=(0, 0, 2)
                              strides=None
                            ] qsh
                            qwa:f64[400,4] = squeeze[dimensions=(2,)] qvz
                            qwb:f64[400,4] = mul qvy qwa
                            qwc:f64[400,4] = add qvw qwb
                            qwd:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 3)
                              start_indices=(0, 0, 2)
                              strides=None
                            ] qsf
                            qwe:f64[400,4] = squeeze[dimensions=(2,)] qwd
                            qwf:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 2)
                              start_indices=(0, 0, 1)
                              strides=None
                            ] qsh
                            qwg:f64[400,4] = squeeze[dimensions=(2,)] qwf
                            qwh:f64[400,4] = mul qwe qwg
                            qwi:f64[400,4] = sub qwc qwh
                            qwj:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 4)
                              start_indices=(0, 0, 3)
                              strides=None
                            ] qsf
                            qwk:f64[400,4] = squeeze[dimensions=(2,)] qwj
                            qwl:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 1)
                              start_indices=(0, 0, 0)
                              strides=None
                            ] qsh
                            qwm:f64[400,4] = squeeze[dimensions=(2,)] qwl
                            qwn:f64[400,4] = mul qwk qwm
                            qwo:f64[400,4] = add qwi qwn
                            qwp:f64[400,4,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(400, 4, 1)
                            ] qtx
                            qwq:f64[400,4,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(400, 4, 1)
                            ] quu
                            qwr:f64[400,4,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(400, 4, 1)
                            ] qvr
                            qws:f64[400,4,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(400, 4, 1)
                            ] qwo
                            qwt:f64[400,4,4] = concatenate[dimension=2] qwp qwq qwr
                              qws
                            qwu:f64[400,4,3] = pjit[name=_take jaxpr=_take15] qiz
                              psa
                            qwv:f64[400,4,4] = pjit[name=_take jaxpr=_take16] qni
                              psb
                            qww:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 1)
                              start_indices=(0, 0, 0)
                              strides=None
                            ] qwt
                            qwx:f64[400,4] = squeeze[dimensions=(2,)] qww
                            qwy:f64[400,4,3] = slice[
                              limit_indices=(400, 4, 4)
                              start_indices=(0, 0, 1)
                              strides=None
                            ] qwt
                            qwz:f64[400,4] = dot_general[
                              dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
                              preferred_element_type=float64
                            ] qwy qwu
                            qxa:f64[400,4,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(400, 4, 1)
                            ] qwz
                            qxb:f64[400,4,3] = mul qxa qwy
                            qxc:f64[400,4,3] = mul 2.0 qxb
                            qxd:f64[400,4] = mul qwx qwx
                            qxe:f64[400,4] = dot_general[
                              dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
                              preferred_element_type=float64
                            ] qwy qwy
                            qxf:f64[400,4] = sub qxd qxe
                            qxg:f64[400,4,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(400, 4, 1)
                            ] qxf
                            qxh:f64[400,4,3] = mul qxg qwu
                            qxi:f64[400,4,3] = add qxc qxh
                            qxj:f64[400,4] = mul 2.0 qwx
                            qxk:f64[400,4,3] = pjit[name=cross jaxpr=cross11] qwy
                              qwu
                            qxl:f64[400,4,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(400, 4, 1)
                            ] qxj
                            qxm:f64[400,4,3] = mul qxl qxk
                            qxn:f64[400,4,3] = add qxi qxm
                            qxo:f64[400,4,3] = add qta qxn
                            qxp:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 1)
                              start_indices=(0, 0, 0)
                              strides=None
                            ] qwt
                            qxq:f64[400,4] = squeeze[dimensions=(2,)] qxp
                            qxr:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 1)
                              start_indices=(0, 0, 0)
                              strides=None
                            ] qwv
                            qxs:f64[400,4] = squeeze[dimensions=(2,)] qxr
                            qxt:f64[400,4] = mul qxq qxs
                            qxu:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 2)
                              start_indices=(0, 0, 1)
                              strides=None
                            ] qwt
                            qxv:f64[400,4] = squeeze[dimensions=(2,)] qxu
                            qxw:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 2)
                              start_indices=(0, 0, 1)
                              strides=None
                            ] qwv
                            qxx:f64[400,4] = squeeze[dimensions=(2,)] qxw
                            qxy:f64[400,4] = mul qxv qxx
                            qxz:f64[400,4] = sub qxt qxy
                            qya:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 3)
                              start_indices=(0, 0, 2)
                              strides=None
                            ] qwt
                            qyb:f64[400,4] = squeeze[dimensions=(2,)] qya
                            qyc:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 3)
                              start_indices=(0, 0, 2)
                              strides=None
                            ] qwv
                            qyd:f64[400,4] = squeeze[dimensions=(2,)] qyc
                            qye:f64[400,4] = mul qyb qyd
                            qyf:f64[400,4] = sub qxz qye
                            qyg:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 4)
                              start_indices=(0, 0, 3)
                              strides=None
                            ] qwt
                            qyh:f64[400,4] = squeeze[dimensions=(2,)] qyg
                            qyi:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 4)
                              start_indices=(0, 0, 3)
                              strides=None
                            ] qwv
                            qyj:f64[400,4] = squeeze[dimensions=(2,)] qyi
                            qyk:f64[400,4] = mul qyh qyj
                            qyl:f64[400,4] = sub qyf qyk
                            qym:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 1)
                              start_indices=(0, 0, 0)
                              strides=None
                            ] qwt
                            qyn:f64[400,4] = squeeze[dimensions=(2,)] qym
                            qyo:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 2)
                              start_indices=(0, 0, 1)
                              strides=None
                            ] qwv
                            qyp:f64[400,4] = squeeze[dimensions=(2,)] qyo
                            qyq:f64[400,4] = mul qyn qyp
                            qyr:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 2)
                              start_indices=(0, 0, 1)
                              strides=None
                            ] qwt
                            qys:f64[400,4] = squeeze[dimensions=(2,)] qyr
                            qyt:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 1)
                              start_indices=(0, 0, 0)
                              strides=None
                            ] qwv
                            qyu:f64[400,4] = squeeze[dimensions=(2,)] qyt
                            qyv:f64[400,4] = mul qys qyu
                            qyw:f64[400,4] = add qyq qyv
                            qyx:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 3)
                              start_indices=(0, 0, 2)
                              strides=None
                            ] qwt
                            qyy:f64[400,4] = squeeze[dimensions=(2,)] qyx
                            qyz:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 4)
                              start_indices=(0, 0, 3)
                              strides=None
                            ] qwv
                            qza:f64[400,4] = squeeze[dimensions=(2,)] qyz
                            qzb:f64[400,4] = mul qyy qza
                            qzc:f64[400,4] = add qyw qzb
                            qzd:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 4)
                              start_indices=(0, 0, 3)
                              strides=None
                            ] qwt
                            qze:f64[400,4] = squeeze[dimensions=(2,)] qzd
                            qzf:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 3)
                              start_indices=(0, 0, 2)
                              strides=None
                            ] qwv
                            qzg:f64[400,4] = squeeze[dimensions=(2,)] qzf
                            qzh:f64[400,4] = mul qze qzg
                            qzi:f64[400,4] = sub qzc qzh
                            qzj:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 1)
                              start_indices=(0, 0, 0)
                              strides=None
                            ] qwt
                            qzk:f64[400,4] = squeeze[dimensions=(2,)] qzj
                            qzl:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 3)
                              start_indices=(0, 0, 2)
                              strides=None
                            ] qwv
                            qzm:f64[400,4] = squeeze[dimensions=(2,)] qzl
                            qzn:f64[400,4] = mul qzk qzm
                            qzo:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 2)
                              start_indices=(0, 0, 1)
                              strides=None
                            ] qwt
                            qzp:f64[400,4] = squeeze[dimensions=(2,)] qzo
                            qzq:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 4)
                              start_indices=(0, 0, 3)
                              strides=None
                            ] qwv
                            qzr:f64[400,4] = squeeze[dimensions=(2,)] qzq
                            qzs:f64[400,4] = mul qzp qzr
                            qzt:f64[400,4] = sub qzn qzs
                            qzu:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 3)
                              start_indices=(0, 0, 2)
                              strides=None
                            ] qwt
                            qzv:f64[400,4] = squeeze[dimensions=(2,)] qzu
                            qzw:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 1)
                              start_indices=(0, 0, 0)
                              strides=None
                            ] qwv
                            qzx:f64[400,4] = squeeze[dimensions=(2,)] qzw
                            qzy:f64[400,4] = mul qzv qzx
                            qzz:f64[400,4] = add qzt qzy
                            raa:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 4)
                              start_indices=(0, 0, 3)
                              strides=None
                            ] qwt
                            rab:f64[400,4] = squeeze[dimensions=(2,)] raa
                            rac:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 2)
                              start_indices=(0, 0, 1)
                              strides=None
                            ] qwv
                            rad:f64[400,4] = squeeze[dimensions=(2,)] rac
                            rae:f64[400,4] = mul rab rad
                            raf:f64[400,4] = add qzz rae
                            rag:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 1)
                              start_indices=(0, 0, 0)
                              strides=None
                            ] qwt
                            rah:f64[400,4] = squeeze[dimensions=(2,)] rag
                            rai:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 4)
                              start_indices=(0, 0, 3)
                              strides=None
                            ] qwv
                            raj:f64[400,4] = squeeze[dimensions=(2,)] rai
                            rak:f64[400,4] = mul rah raj
                            ral:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 2)
                              start_indices=(0, 0, 1)
                              strides=None
                            ] qwt
                            ram:f64[400,4] = squeeze[dimensions=(2,)] ral
                            ran:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 3)
                              start_indices=(0, 0, 2)
                              strides=None
                            ] qwv
                            rao:f64[400,4] = squeeze[dimensions=(2,)] ran
                            rap:f64[400,4] = mul ram rao
                            raq:f64[400,4] = add rak rap
                            rar:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 3)
                              start_indices=(0, 0, 2)
                              strides=None
                            ] qwt
                            ras:f64[400,4] = squeeze[dimensions=(2,)] rar
                            rat:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 2)
                              start_indices=(0, 0, 1)
                              strides=None
                            ] qwv
                            rau:f64[400,4] = squeeze[dimensions=(2,)] rat
                            rav:f64[400,4] = mul ras rau
                            raw:f64[400,4] = sub raq rav
                            rax:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 4)
                              start_indices=(0, 0, 3)
                              strides=None
                            ] qwt
                            ray:f64[400,4] = squeeze[dimensions=(2,)] rax
                            raz:f64[400,4,1] = slice[
                              limit_indices=(400, 4, 1)
                              start_indices=(0, 0, 0)
                              strides=None
                            ] qwv
                            rba:f64[400,4] = squeeze[dimensions=(2,)] raz
                            rbb:f64[400,4] = mul ray rba
                            rbc:f64[400,4] = add raw rbb
                            rbd:f64[400,4,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(400, 4, 1)
                            ] qyl
                            rbe:f64[400,4,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(400, 4, 1)
                            ] qzi
                            rbf:f64[400,4,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(400, 4, 1)
                            ] raf
                            rbg:f64[400,4,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(400, 4, 1)
                            ] rbc
                            rbh:f64[400,4,4] = concatenate[dimension=2] rbd rbe rbf
                              rbg
                            rbi:f64[400,13,3] = concatenate[dimension=1] qnj qom
                              qta qxo
                            rbj:f64[400,13,4] = concatenate[dimension=1] qnk qsf
                              qwt rbh
                            rbk:f64[400,13,3] = pjit[name=_take jaxpr=_take18] rbi
                              psc
                            rbl:f64[400,13,4] = pjit[
                              name=_take
                              jaxpr={ lambda ; rbm:f64[400,13,4] rbn:i64[13]. let
                                  rbo:i64[13] = pjit[
                                    name=remainder
                                    jaxpr=remainder7
                                  ] rbn 13
                                  rbp:i64[13,1] = broadcast_in_dim[
                                    broadcast_dimensions=(0,)
                                    shape=(13, 1)
                                  ] rbo
                                  rbq:f64[400,13,4] = gather[
                                    dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 2), collapsed_slice_dims=(1,), start_index_map=(1,))
                                    fill_value=None
                                    indices_are_sorted=False
                                    mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                    slice_sizes=(400, 1, 4)
                                    unique_indices=False
                                  ] rbm rbp
                                in (rbq,) }
                            ] rbj psd
                            rbr:bool[400,13] = pjit[
                              name=allclose
                              jaxpr={ lambda ; rbs:f64[400,13,4] rbt:f64[]. let
                                  rbu:bool[400,13,4] = pjit[
                                    name=isclose
                                    jaxpr={ lambda ; rbv:f64[400,13,4] rbw:f64[]
                                        rbx:f64[] rby:f64[]. let
                                        rbz:f64[] = convert_element_type[
                                          new_dtype=float64
                                          weak_type=False
                                        ] rbw
                                        rca:f64[] = convert_element_type[
                                          new_dtype=float64
                                          weak_type=False
                                        ] rbx
                                        rcb:f64[] = convert_element_type[
                                          new_dtype=float64
                                          weak_type=False
                                        ] rby
                                        rcc:f64[400,13,4] = sub rbv rbz
                                        rcd:f64[400,13,4] = abs rcc
                                        rce:f64[] = abs rbz
                                        rcf:f64[] = mul rca rce
                                        rcg:f64[] = add rcb rcf
                                        rch:bool[400,13,4] = le rcd rcg
                                        rci:bool[400,13,4] = pjit[
                                          name=isinf
                                          jaxpr={ lambda ; rcj:f64[400,13,4]. let
                                              rck:f64[400,13,4] = abs rcj
                                              rcl:bool[400,13,4] = eq rck inf
                                            in (rcl,) }
                                        ] rbv
                                        rcm:bool[] = pjit[
                                          name=isinf
                                          jaxpr=isinf1
                                        ] rbz
                                        rcn:bool[400,13,4] = or rci rcm
                                        rco:bool[400,13,4] = and rci rcm
                                        rcp:bool[400,13,4] = not rcn
                                        rcq:bool[400,13,4] = and rch rcp
                                        rcr:bool[400,13,4] = eq rbv rbz
                                        rcs:bool[400,13,4] = and rco rcr
                                        rct:bool[400,13,4] = or rcq rcs
                                        rcu:bool[400,13,4] = ne rbv rbv
                                        rcv:bool[] = ne rbz rbz
                                        rcw:bool[400,13,4] = or rcu rcv
                                        rcx:bool[400,13,4] = not rcw
                                        rcy:bool[400,13,4] = and rct rcx
                                      in (rcy,) }
                                  ] rbs rbt 1e-05 1e-08
                                  rcz:bool[400,13] = reduce_and[axes=(2,)] rbu
                                in (rcz,) }
                            ] rbl 0.0
                            rda:f64[4] = broadcast_in_dim[
                              broadcast_dimensions=()
                              shape=(4,)
                            ] 1.0
                            rdb:f64[400,13,4] = pjit[
                              name=_where
                              jaxpr={ lambda ; rdc:bool[400,13] rdd:f64[4] rde:f64[400,13,4]. let
                                  rdf:bool[400,13,4] = broadcast_in_dim[
                                    broadcast_dimensions=(0, 1)
                                    shape=(400, 13, 4)
                                  ] rdc
                                  rdg:f64[13,4] = broadcast_in_dim[
                                    broadcast_dimensions=(1,)
                                    shape=(13, 4)
                                  ] rdd
                                  rdh:f64[400,13,4] = broadcast_in_dim[
                                    broadcast_dimensions=(1, 2)
                                    shape=(400, 13, 4)
                                  ] rdg
                                  rdi:f64[400,13,4] = select_n rdf rde rdh
                                in (rdi,) }
                            ] rbr rda rbl
                            rdj:f64[400,13] = pjit[
                              name=norm
                              jaxpr={ lambda ; rdk:f64[400,13,4]. let
                                  rdl:f64[400,13,4] = mul rdk rdk
                                  rdm:f64[400,13] = reduce_sum[axes=(2,)] rdl
                                  rdn:f64[400,13] = sqrt rdm
                                in (rdn,) }
                            ] rdb
                            rdo:f64[400,13] = pjit[
                              name=_where
                              jaxpr={ lambda ; rdp:bool[400,13] rdq:f64[] rdr:f64[400,13]. let
                                  rds:f64[] = convert_element_type[
                                    new_dtype=float64
                                    weak_type=False
                                  ] rdq
                                  rdt:f64[13] = broadcast_in_dim[
                                    broadcast_dimensions=()
                                    shape=(13,)
                                  ] rds
                                  rdu:f64[400,13] = broadcast_in_dim[
                                    broadcast_dimensions=(1,)
                                    shape=(400, 13)
                                  ] rdt
                                  rdv:f64[400,13] = select_n rdp rdr rdu
                                in (rdv,) }
                            ] rbr 0.0 rdj
                            rdw:bool[400,13] = eq rdo 0.0
                            rdx:f64[400,13] = convert_element_type[
                              new_dtype=float64
                              weak_type=True
                            ] rdw
                            rdy:f64[400,13] = mul 1e-06 rdx
                            rdz:f64[400,13] = convert_element_type[
                              new_dtype=float64
                              weak_type=False
                            ] rdy
                            rea:f64[400,13] = add rdo rdz
                            reb:f64[400,13,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(400, 13, 1)
                            ] rea
                            rec:f64[400,13,4] = div rbl reb
                            red:f64[400,13,1] = slice[
                              limit_indices=(400, 13, 1)
                              start_indices=(0, 0, 0)
                              strides=None
                            ] rec
                            ree:f64[400,13] = squeeze[dimensions=(2,)] red
                            ref:f64[400,13,3] = slice[
                              limit_indices=(400, 13, 4)
                              start_indices=(0, 0, 1)
                              strides=None
                            ] rec
                            reg:f64[13,400] = dot_general[
                              dimension_numbers=(([2], [1]), ([1], [0]))
                              preferred_element_type=float64
                            ] ref pse
                            reh:f64[400,13] = transpose[permutation=(1, 0)] reg
                            rei:f64[400,13,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(400, 13, 1)
                            ] reh
                            rej:f64[400,13,3] = mul rei ref
                            rek:f64[400,13,3] = mul 2.0 rej
                            rel:f64[400,13] = mul ree ree
                            rem:f64[400,13] = dot_general[
                              dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
                              preferred_element_type=float64
                            ] ref ref
                            ren:f64[400,13] = sub rel rem
                            reo:f64[400,13,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(400, 13, 1)
                            ] ren
                            rep:f64[1,13,3] = broadcast_in_dim[
                              broadcast_dimensions=(1, 2)
                              shape=(1, 13, 3)
                            ] pse
                            req:f64[400,13,3] = mul reo rep
                            rer:f64[400,13,3] = add rek req
                            res:f64[400,13] = mul 2.0 ree
                            ret:f64[400,13,3] = pjit[name=cross jaxpr=cross10] ref
                              pse
                            reu:f64[400,13,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(400, 13, 1)
                            ] res
                            rev:f64[400,13,3] = mul reu ret
                            rew:f64[400,13,3] = add rer rev
                            rex:f64[400,13,3] = add rbk rew
                            rey:f64[400,13,1] = slice[
                              limit_indices=(400, 13, 1)
                              start_indices=(0, 0, 0)
                              strides=None
                            ] rec
                            rez:f64[400,13] = squeeze[dimensions=(2,)] rey
                            rfa:f64[13,1] = slice[
                              limit_indices=(13, 1)
                              start_indices=(0, 0)
                              strides=None
                            ] psf
                            rfb:f64[13] = squeeze[dimensions=(1,)] rfa
                            rfc:f64[1,13] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 13)
                            ] rfb
                            rfd:f64[400,13] = mul rez rfc
                            rfe:f64[400,13,1] = slice[
                              limit_indices=(400, 13, 2)
                              start_indices=(0, 0, 1)
                              strides=None
                            ] rec
                            rff:f64[400,13] = squeeze[dimensions=(2,)] rfe
                            rfg:f64[13,1] = slice[
                              limit_indices=(13, 2)
                              start_indices=(0, 1)
                              strides=None
                            ] psf
                            rfh:f64[13] = squeeze[dimensions=(1,)] rfg
                            rfi:f64[1,13] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 13)
                            ] rfh
                            rfj:f64[400,13] = mul rff rfi
                            rfk:f64[400,13] = sub rfd rfj
                            rfl:f64[400,13,1] = slice[
                              limit_indices=(400, 13, 3)
                              start_indices=(0, 0, 2)
                              strides=None
                            ] rec
                            rfm:f64[400,13] = squeeze[dimensions=(2,)] rfl
                            rfn:f64[13,1] = slice[
                              limit_indices=(13, 3)
                              start_indices=(0, 2)
                              strides=None
                            ] psf
                            rfo:f64[13] = squeeze[dimensions=(1,)] rfn
                            rfp:f64[1,13] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 13)
                            ] rfo
                            rfq:f64[400,13] = mul rfm rfp
                            rfr:f64[400,13] = sub rfk rfq
                            rfs:f64[400,13,1] = slice[
                              limit_indices=(400, 13, 4)
                              start_indices=(0, 0, 3)
                              strides=None
                            ] rec
                            rft:f64[400,13] = squeeze[dimensions=(2,)] rfs
                            rfu:f64[13,1] = slice[
                              limit_indices=(13, 4)
                              start_indices=(0, 3)
                              strides=None
                            ] psf
                            rfv:f64[13] = squeeze[dimensions=(1,)] rfu
                            rfw:f64[1,13] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 13)
                            ] rfv
                            rfx:f64[400,13] = mul rft rfw
                            rfy:f64[400,13] = sub rfr rfx
                            rfz:f64[400,13,1] = slice[
                              limit_indices=(400, 13, 1)
                              start_indices=(0, 0, 0)
                              strides=None
                            ] rec
                            rga:f64[400,13] = squeeze[dimensions=(2,)] rfz
                            rgb:f64[13,1] = slice[
                              limit_indices=(13, 2)
                              start_indices=(0, 1)
                              strides=None
                            ] psf
                            rgc:f64[13] = squeeze[dimensions=(1,)] rgb
                            rgd:f64[1,13] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 13)
                            ] rgc
                            rge:f64[400,13] = mul rga rgd
                            rgf:f64[400,13,1] = slice[
                              limit_indices=(400, 13, 2)
                              start_indices=(0, 0, 1)
                              strides=None
                            ] rec
                            rgg:f64[400,13] = squeeze[dimensions=(2,)] rgf
                            rgh:f64[13,1] = slice[
                              limit_indices=(13, 1)
                              start_indices=(0, 0)
                              strides=None
                            ] psf
                            rgi:f64[13] = squeeze[dimensions=(1,)] rgh
                            rgj:f64[1,13] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 13)
                            ] rgi
                            rgk:f64[400,13] = mul rgg rgj
                            rgl:f64[400,13] = add rge rgk
                            rgm:f64[400,13,1] = slice[
                              limit_indices=(400, 13, 3)
                              start_indices=(0, 0, 2)
                              strides=None
                            ] rec
                            rgn:f64[400,13] = squeeze[dimensions=(2,)] rgm
                            rgo:f64[13,1] = slice[
                              limit_indices=(13, 4)
                              start_indices=(0, 3)
                              strides=None
                            ] psf
                            rgp:f64[13] = squeeze[dimensions=(1,)] rgo
                            rgq:f64[1,13] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 13)
                            ] rgp
                            rgr:f64[400,13] = mul rgn rgq
                            rgs:f64[400,13] = add rgl rgr
                            rgt:f64[400,13,1] = slice[
                              limit_indices=(400, 13, 4)
                              start_indices=(0, 0, 3)
                              strides=None
                            ] rec
                            rgu:f64[400,13] = squeeze[dimensions=(2,)] rgt
                            rgv:f64[13,1] = slice[
                              limit_indices=(13, 3)
                              start_indices=(0, 2)
                              strides=None
                            ] psf
                            rgw:f64[13] = squeeze[dimensions=(1,)] rgv
                            rgx:f64[1,13] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 13)
                            ] rgw
                            rgy:f64[400,13] = mul rgu rgx
                            rgz:f64[400,13] = sub rgs rgy
                            rha:f64[400,13,1] = slice[
                              limit_indices=(400, 13, 1)
                              start_indices=(0, 0, 0)
                              strides=None
                            ] rec
                            rhb:f64[400,13] = squeeze[dimensions=(2,)] rha
                            rhc:f64[13,1] = slice[
                              limit_indices=(13, 3)
                              start_indices=(0, 2)
                              strides=None
                            ] psf
                            rhd:f64[13] = squeeze[dimensions=(1,)] rhc
                            rhe:f64[1,13] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 13)
                            ] rhd
                            rhf:f64[400,13] = mul rhb rhe
                            rhg:f64[400,13,1] = slice[
                              limit_indices=(400, 13, 2)
                              start_indices=(0, 0, 1)
                              strides=None
                            ] rec
                            rhh:f64[400,13] = squeeze[dimensions=(2,)] rhg
                            rhi:f64[13,1] = slice[
                              limit_indices=(13, 4)
                              start_indices=(0, 3)
                              strides=None
                            ] psf
                            rhj:f64[13] = squeeze[dimensions=(1,)] rhi
                            rhk:f64[1,13] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 13)
                            ] rhj
                            rhl:f64[400,13] = mul rhh rhk
                            rhm:f64[400,13] = sub rhf rhl
                            rhn:f64[400,13,1] = slice[
                              limit_indices=(400, 13, 3)
                              start_indices=(0, 0, 2)
                              strides=None
                            ] rec
                            rho:f64[400,13] = squeeze[dimensions=(2,)] rhn
                            rhp:f64[13,1] = slice[
                              limit_indices=(13, 1)
                              start_indices=(0, 0)
                              strides=None
                            ] psf
                            rhq:f64[13] = squeeze[dimensions=(1,)] rhp
                            rhr:f64[1,13] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 13)
                            ] rhq
                            rhs:f64[400,13] = mul rho rhr
                            rht:f64[400,13] = add rhm rhs
                            rhu:f64[400,13,1] = slice[
                              limit_indices=(400, 13, 4)
                              start_indices=(0, 0, 3)
                              strides=None
                            ] rec
                            rhv:f64[400,13] = squeeze[dimensions=(2,)] rhu
                            rhw:f64[13,1] = slice[
                              limit_indices=(13, 2)
                              start_indices=(0, 1)
                              strides=None
                            ] psf
                            rhx:f64[13] = squeeze[dimensions=(1,)] rhw
                            rhy:f64[1,13] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 13)
                            ] rhx
                            rhz:f64[400,13] = mul rhv rhy
                            ria:f64[400,13] = add rht rhz
                            rib:f64[400,13,1] = slice[
                              limit_indices=(400, 13, 1)
                              start_indices=(0, 0, 0)
                              strides=None
                            ] rec
                            ric:f64[400,13] = squeeze[dimensions=(2,)] rib
                            rid:f64[13,1] = slice[
                              limit_indices=(13, 4)
                              start_indices=(0, 3)
                              strides=None
                            ] psf
                            rie:f64[13] = squeeze[dimensions=(1,)] rid
                            rif:f64[1,13] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 13)
                            ] rie
                            rig:f64[400,13] = mul ric rif
                            rih:f64[400,13,1] = slice[
                              limit_indices=(400, 13, 2)
                              start_indices=(0, 0, 1)
                              strides=None
                            ] rec
                            rii:f64[400,13] = squeeze[dimensions=(2,)] rih
                            rij:f64[13,1] = slice[
                              limit_indices=(13, 3)
                              start_indices=(0, 2)
                              strides=None
                            ] psf
                            rik:f64[13] = squeeze[dimensions=(1,)] rij
                            ril:f64[1,13] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 13)
                            ] rik
                            rim:f64[400,13] = mul rii ril
                            rin:f64[400,13] = add rig rim
                            rio:f64[400,13,1] = slice[
                              limit_indices=(400, 13, 3)
                              start_indices=(0, 0, 2)
                              strides=None
                            ] rec
                            rip:f64[400,13] = squeeze[dimensions=(2,)] rio
                            riq:f64[13,1] = slice[
                              limit_indices=(13, 2)
                              start_indices=(0, 1)
                              strides=None
                            ] psf
                            rir:f64[13] = squeeze[dimensions=(1,)] riq
                            ris:f64[1,13] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 13)
                            ] rir
                            rit:f64[400,13] = mul rip ris
                            riu:f64[400,13] = sub rin rit
                            riv:f64[400,13,1] = slice[
                              limit_indices=(400, 13, 4)
                              start_indices=(0, 0, 3)
                              strides=None
                            ] rec
                            riw:f64[400,13] = squeeze[dimensions=(2,)] riv
                            rix:f64[13,1] = slice[
                              limit_indices=(13, 1)
                              start_indices=(0, 0)
                              strides=None
                            ] psf
                            riy:f64[13] = squeeze[dimensions=(1,)] rix
                            riz:f64[1,13] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 13)
                            ] riy
                            rja:f64[400,13] = mul riw riz
                            rjb:f64[400,13] = add riu rja
                            rjc:f64[400,13,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(400, 13, 1)
                            ] rfy
                            rjd:f64[400,13,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(400, 13, 1)
                            ] rgz
                            rje:f64[400,13,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(400, 13, 1)
                            ] ria
                            rjf:f64[400,13,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(400, 13, 1)
                            ] rjb
                            rjg:f64[400,13,4] = concatenate[dimension=2] rjc rjd
                              rje rjf
                            rjh:f64[13,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(13, 1)
                            ] psh
                            rji:f64[1,13,1] = broadcast_in_dim[
                              broadcast_dimensions=(1, 2)
                              shape=(1, 13, 1)
                            ] rjh
                            rjj:f64[400,13,3] = mul rji rex
                            rjk:f64[13,3] = broadcast_in_dim[
                              broadcast_dimensions=()
                              shape=(13, 3)
                            ] 0.0
                            rjl:i32[13,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(13, 1)
                            ] psg
                            rjm:f64[400,13,3] = broadcast_in_dim[
                              broadcast_dimensions=(1, 2)
                              shape=(400, 13, 3)
                            ] rjk
                            rjn:f64[400,13,3] = scatter-add[
                              dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                              indices_are_sorted=False
                              mode=GatherScatterMode.FILL_OR_DROP
                              unique_indices=False
                              update_consts=()
                              update_jaxpr=jaxpr
                            ] rjm rjl rjj
                            rjo:f64[13] = broadcast_in_dim[
                              broadcast_dimensions=()
                              shape=(13,)
                            ] 0.0
                            rjp:i32[13,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(13, 1)
                            ] psg
                            rjq:f64[13] = scatter-add[
                              dimension_numbers=ScatterDimensionNumbers(update_window_dims=(), inserted_window_dims=(0,), scatter_dims_to_operand_dims=(0,))
                              indices_are_sorted=False
                              mode=GatherScatterMode.FILL_OR_DROP
                              unique_indices=False
                              update_consts=()
                              update_jaxpr=jaxpr
                            ] rjo rjp psh
                            rjr:bool[13] = lt psg 0
                            rjs:i32[13] = add psg 13
                            rjt:i32[13] = select_n rjr psg rjs
                            rju:i32[13,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(13, 1)
                            ] rjt
                            rjv:f64[400,13,3] = gather[
                              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 2), collapsed_slice_dims=(1,), start_index_map=(1,))
                              fill_value=None
                              indices_are_sorted=False
                              mode=GatherScatterMode.PROMISE_IN_BOUNDS
                              slice_sizes=(400, 1, 3)
                              unique_indices=False
                            ] rjn rju
                            rjw:bool[13] = lt psg 0
                            rjx:i32[13] = add psg 13
                            rjy:i32[13] = select_n rjw psg rjx
                            rjz:i32[13,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(13, 1)
                            ] rjy
                            rka:f64[13] = gather[
                              dimension_numbers=GatherDimensionNumbers(offset_dims=(), collapsed_slice_dims=(0,), start_index_map=(0,))
                              fill_value=None
                              indices_are_sorted=False
                              mode=GatherScatterMode.PROMISE_IN_BOUNDS
                              slice_sizes=(1,)
                              unique_indices=False
                            ] rjq rjz
                            rkb:f64[13,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(13, 1)
                            ] rka
                            rkc:f64[1,13,1] = broadcast_in_dim[
                              broadcast_dimensions=(1, 2)
                              shape=(1, 13, 1)
                            ] rkb
                            rkd:f64[400,13,3] = div rjv rkc
                            rke:f64[400,13,3] = sub rex rkd
                            rkf:i64[3,3] = iota[
                              dimension=0
                              dtype=int64
                              shape=(3, 3)
                            ] 
                            rkg:i64[3,3] = iota[
                              dimension=1
                              dtype=int64
                              shape=(3, 3)
                            ] 
                            rkh:i64[3,3] = add rkf 0
                            rki:bool[3,3] = eq rkh rkg
                            rkj:f64[3,3] = convert_element_type[
                              new_dtype=float64
                              weak_type=False
                            ] rki
                            rkk:f64[3,3] = neg rkj
                            rkl:f64[400,13,3,3] = pjit[
                              name=cross
                              jaxpr={ lambda ; rkm:f64[400,13,3] rkn:f64[3,3]. let
                                  rko:i32[1] = broadcast_in_dim[
                                    broadcast_dimensions=()
                                    shape=(1,)
                                  ] 0
                                  rkp:f64[400,13] = gather[
                                    dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
                                    fill_value=None
                                    indices_are_sorted=True
                                    mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                    slice_sizes=(400, 13, 1)
                                    unique_indices=True
                                  ] rkm rko
                                  rkq:i32[1] = broadcast_in_dim[
                                    broadcast_dimensions=()
                                    shape=(1,)
                                  ] 1
                                  rkr:f64[400,13] = gather[
                                    dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
                                    fill_value=None
                                    indices_are_sorted=True
                                    mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                    slice_sizes=(400, 13, 1)
                                    unique_indices=True
                                  ] rkm rkq
                                  rks:i32[1] = broadcast_in_dim[
                                    broadcast_dimensions=()
                                    shape=(1,)
                                  ] 2
                                  rkt:f64[400,13] = gather[
                                    dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
                                    fill_value=None
                                    indices_are_sorted=True
                                    mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                    slice_sizes=(400, 13, 1)
                                    unique_indices=True
                                  ] rkm rks
                                  rku:f64[3,1] = slice[
                                    limit_indices=(3, 1)
                                    start_indices=(0, 0)
                                    strides=None
                                  ] rkn
                                  rkv:f64[3] = squeeze[dimensions=(1,)] rku
                                  rkw:f64[3,1] = slice[
                                    limit_indices=(3, 2)
                                    start_indices=(0, 1)
                                    strides=None
                                  ] rkn
                                  rkx:f64[3] = squeeze[dimensions=(1,)] rkw
                                  rky:f64[3,1] = slice[
                                    limit_indices=(3, 3)
                                    start_indices=(0, 2)
                                    strides=None
                                  ] rkn
                                  rkz:f64[3] = squeeze[dimensions=(1,)] rky
                                  rla:f64[1,3] = broadcast_in_dim[
                                    broadcast_dimensions=(1,)
                                    shape=(1, 3)
                                  ] rkz
                                  rlb:f64[400,13,1] = broadcast_in_dim[
                                    broadcast_dimensions=(0, 1)
                                    shape=(400, 13, 1)
                                  ] rkr
                                  rlc:f64[1,1,3] = broadcast_in_dim[
                                    broadcast_dimensions=(1, 2)
                                    shape=(1, 1, 3)
                                  ] rla
                                  rld:f64[400,13,3] = mul rlb rlc
                                  rle:f64[1,3] = broadcast_in_dim[
                                    broadcast_dimensions=(1,)
                                    shape=(1, 3)
                                  ] rkx
                                  rlf:f64[400,13,1] = broadcast_in_dim[
                                    broadcast_dimensions=(0, 1)
                                    shape=(400, 13, 1)
                                  ] rkt
                                  rlg:f64[1,1,3] = broadcast_in_dim[
                                    broadcast_dimensions=(1, 2)
                                    shape=(1, 1, 3)
                                  ] rle
                                  rlh:f64[400,13,3] = mul rlf rlg
                                  rli:f64[400,13,3] = sub rld rlh
                                  rlj:f64[1,3] = broadcast_in_dim[
                                    broadcast_dimensions=(1,)
                                    shape=(1, 3)
                                  ] rkv
                                  rlk:f64[400,13,1] = broadcast_in_dim[
                                    broadcast_dimensions=(0, 1)
                                    shape=(400, 13, 1)
                                  ] rkt
                                  rll:f64[1,1,3] = broadcast_in_dim[
                                    broadcast_dimensions=(1, 2)
                                    shape=(1, 1, 3)
                                  ] rlj
                                  rlm:f64[400,13,3] = mul rlk rll
                                  rln:f64[1,3] = broadcast_in_dim[
                                    broadcast_dimensions=(1,)
                                    shape=(1, 3)
                                  ] rkz
                                  rlo:f64[400,13,1] = broadcast_in_dim[
                                    broadcast_dimensions=(0, 1)
                                    shape=(400, 13, 1)
                                  ] rkp
                                  rlp:f64[1,1,3] = broadcast_in_dim[
                                    broadcast_dimensions=(1, 2)
                                    shape=(1, 1, 3)
                                  ] rln
                                  rlq:f64[400,13,3] = mul rlo rlp
                                  rlr:f64[400,13,3] = sub rlm rlq
                                  rls:f64[1,3] = broadcast_in_dim[
                                    broadcast_dimensions=(1,)
                                    shape=(1, 3)
                                  ] rkx
                                  rlt:f64[400,13,1] = broadcast_in_dim[
                                    broadcast_dimensions=(0, 1)
                                    shape=(400, 13, 1)
                                  ] rkp
                                  rlu:f64[1,1,3] = broadcast_in_dim[
                                    broadcast_dimensions=(1, 2)
                                    shape=(1, 1, 3)
                                  ] rls
                                  rlv:f64[400,13,3] = mul rlt rlu
                                  rlw:f64[1,3] = broadcast_in_dim[
                                    broadcast_dimensions=(1,)
                                    shape=(1, 3)
                                  ] rkv
                                  rlx:f64[400,13,1] = broadcast_in_dim[
                                    broadcast_dimensions=(0, 1)
                                    shape=(400, 13, 1)
                                  ] rkr
                                  rly:f64[1,1,3] = broadcast_in_dim[
                                    broadcast_dimensions=(1, 2)
                                    shape=(1, 1, 3)
                                  ] rlw
                                  rlz:f64[400,13,3] = mul rlx rly
                                  rma:f64[400,13,3] = sub rlv rlz
                                  rmb:f64[400,13,1,3] = broadcast_in_dim[
                                    broadcast_dimensions=(0, 1, 3)
                                    shape=(400, 13, 1, 3)
                                  ] rli
                                  rmc:f64[400,13,1,3] = broadcast_in_dim[
                                    broadcast_dimensions=(0, 1, 3)
                                    shape=(400, 13, 1, 3)
                                  ] rlr
                                  rmd:f64[400,13,1,3] = broadcast_in_dim[
                                    broadcast_dimensions=(0, 1, 3)
                                    shape=(400, 13, 1, 3)
                                  ] rma
                                  rme:f64[400,13,3,3] = concatenate[dimension=2] rmb
                                    rmc rmd
                                  rmf:f64[400,13,3,3] = transpose[
                                    permutation=(0, 1, 3, 2)
                                  ] rme
                                in (rmf,) }
                            ] rke rkk
                            rmg:f64[400,13] = dot_general[
                              dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
                              preferred_element_type=float64
                            ] rjg rjg
                            rmh:f64[400,13,1] = slice[
                              limit_indices=(400, 13, 1)
                              start_indices=(0, 0, 0)
                              strides=(1, 1, 1)
                            ] rjg
                            rmi:f64[400,13] = squeeze[dimensions=(2,)] rmh
                            rmj:f64[400,13,1] = slice[
                              limit_indices=(400, 13, 2)
                              start_indices=(0, 0, 1)
                              strides=(1, 1, 1)
                            ] rjg
                            rmk:f64[400,13] = squeeze[dimensions=(2,)] rmj
                            rml:f64[400,13,1] = slice[
                              limit_indices=(400, 13, 3)
                              start_indices=(0, 0, 2)
                              strides=(1, 1, 1)
                            ] rjg
                            rmm:f64[400,13] = squeeze[dimensions=(2,)] rml
                            rmn:f64[400,13,1] = slice[
                              limit_indices=(400, 13, 4)
                              start_indices=(0, 0, 3)
                              strides=(1, 1, 1)
                            ] rjg
                            rmo:f64[400,13] = squeeze[dimensions=(2,)] rmn
                            rmp:f64[400,13] = div 2.0 rmg
                            rmq:f64[400,13] = mul rmk rmp
                            rmr:f64[400,13] = mul rmm rmp
                            rms:f64[400,13] = mul rmo rmp
                            rmt:f64[400,13] = mul rmi rmq
                            rmu:f64[400,13] = mul rmi rmr
                            rmv:f64[400,13] = mul rmi rms
                            rmw:f64[400,13] = mul rmk rmq
                            rmx:f64[400,13] = mul rmk rmr
                            rmy:f64[400,13] = mul rmk rms
                            rmz:f64[400,13] = mul rmm rmr
                            rna:f64[400,13] = mul rmm rms
                            rnb:f64[400,13] = mul rmo rms
                            rnc:f64[400,13] = add rmz rnb
                            rnd:f64[400,13] = sub 1.0 rnc
                            rne:f64[400,13] = sub rmx rmv
                            rnf:f64[400,13] = add rmy rmu
                            rng:f64[400,13,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(400, 13, 1)
                            ] rnd
                            rnh:f64[400,13,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(400, 13, 1)
                            ] rne
                            rni:f64[400,13,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(400, 13, 1)
                            ] rnf
                            rnj:f64[400,13,3] = concatenate[dimension=2] rng rnh
                              rni
                            rnk:f64[400,13] = add rmx rmv
                            rnl:f64[400,13] = add rmw rnb
                            rnm:f64[400,13] = sub 1.0 rnl
                            rnn:f64[400,13] = sub rna rmt
                            rno:f64[400,13,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(400, 13, 1)
                            ] rnk
                            rnp:f64[400,13,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(400, 13, 1)
                            ] rnm
                            rnq:f64[400,13,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(400, 13, 1)
                            ] rnn
                            rnr:f64[400,13,3] = concatenate[dimension=2] rno rnp
                              rnq
                            rns:f64[400,13] = sub rmy rmu
                            rnt:f64[400,13] = add rna rmt
                            rnu:f64[400,13] = add rmw rmz
                            rnv:f64[400,13] = sub 1.0 rnu
                            rnw:f64[400,13,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(400, 13, 1)
                            ] rns
                            rnx:f64[400,13,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(400, 13, 1)
                            ] rnt
                            rny:f64[400,13,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(400, 13, 1)
                            ] rnv
                            rnz:f64[400,13,3] = concatenate[dimension=2] rnw rnx
                              rny
                            roa:f64[400,13,1,3] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1, 3)
                              shape=(400, 13, 1, 3)
                            ] rnj
                            rob:f64[400,13,1,3] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1, 3)
                              shape=(400, 13, 1, 3)
                            ] rnr
                            roc:f64[400,13,1,3] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1, 3)
                              shape=(400, 13, 1, 3)
                            ] rnz
                            rod:f64[400,13,3,3] = concatenate[dimension=2] roa rob
                              roc
                            roe:f64[13,400,3,3] = dot_general[
                              dimension_numbers=(([3], [1]), ([1], [0]))
                              preferred_element_type=float64
                            ] rod psi
                            rof:f64[400,13,3,3] = transpose[
                              permutation=(0, 1, 3, 2)
                            ] rod
                            rog:f64[400,13,3,3] = dot_general[
                              dimension_numbers=(([3], [2]), ([1, 0], [0, 1]))
                              preferred_element_type=float64
                            ] roe rof
                            roh:f64[400,13,3,3] = transpose[
                              permutation=(0, 1, 3, 2)
                            ] rkl
                            roi:f64[400,13,3,3] = dot_general[
                              dimension_numbers=(([3], [2]), ([0, 1], [0, 1]))
                              preferred_element_type=float64
                            ] rkl roh
                            roj:f64[13,1,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(13, 1, 1)
                            ] psh
                            rok:f64[1,13,1,1] = broadcast_in_dim[
                              broadcast_dimensions=(1, 2, 3)
                              shape=(1, 13, 1, 1)
                            ] roj
                            rol:f64[400,13,3,3] = mul roi rok
                            rom:f64[400,13,3,3] = add rog rol
                            ron:f64[13,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(13, 1)
                            ] psh
                            roo:f64[1,13,1] = broadcast_in_dim[
                              broadcast_dimensions=(1, 2)
                              shape=(1, 13, 1)
                            ] ron
                            rop:f64[400,13,3] = mul rke roo
                            roq:f64[1,3] = broadcast_in_dim[
                              broadcast_dimensions=()
                              shape=(1, 3)
                            ] 0.0
                            ror:f64[1,1,1,4] = reshape[
                              dimensions=None
                              new_sizes=(1, 1, 1, 4)
                            ] psk
                            ros:f64[1,4] = reshape[
                              dimensions=None
                              new_sizes=(1, 4)
                            ] ror
                            rot:f64[400,1,3] = broadcast_in_dim[
                              broadcast_dimensions=(1, 2)
                              shape=(400, 1, 3)
                            ] roq
                            rou:f64[400,14,3] = concatenate[dimension=1] rbk rot
                            rov:f64[400,1,4] = broadcast_in_dim[
                              broadcast_dimensions=(1, 2)
                              shape=(400, 1, 4)
                            ] ros
                            row:f64[400,14,4] = concatenate[dimension=1] rec rov
                            rox:f64[400,13,3] = pjit[name=_take jaxpr=_take19] rou
                              psj
                            roy:f64[400,13,4] = pjit[
                              name=_take
                              jaxpr={ lambda ; roz:f64[400,14,4] rpa:i32[13]. let
                                  rpb:i32[13] = pjit[
                                    name=remainder
                                    jaxpr=remainder10
                                  ] rpa 14
                                  rpc:i32[13,1] = broadcast_in_dim[
                                    broadcast_dimensions=(0,)
                                    shape=(13, 1)
                                  ] rpb
                                  rpd:f64[400,13,4] = gather[
                                    dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 2), collapsed_slice_dims=(1,), start_index_map=(1,))
                                    fill_value=None
                                    indices_are_sorted=False
                                    mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                    slice_sizes=(400, 1, 4)
                                    unique_indices=False
                                  ] roz rpc
                                in (rpd,) }
                            ] row psj
                            rpe:f64[400,13,1] = slice[
                              limit_indices=(400, 13, 1)
                              start_indices=(0, 0, 0)
                              strides=None
                            ] roy
                            rpf:f64[400,13] = squeeze[dimensions=(2,)] rpe
                            rpg:f64[400,13,3] = slice[
                              limit_indices=(400, 13, 4)
                              start_indices=(0, 0, 1)
                              strides=None
                            ] roy
                            rph:f64[13,400] = dot_general[
                              dimension_numbers=(([2], [1]), ([1], [0]))
                              preferred_element_type=float64
                            ] rpg prt
                            rpi:f64[400,13] = transpose[permutation=(1, 0)] rph
                            rpj:f64[400,13,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(400, 13, 1)
                            ] rpi
                            rpk:f64[400,13,3] = mul rpj rpg
                            rpl:f64[400,13,3] = mul 2.0 rpk
                            rpm:f64[400,13] = mul rpf rpf
                            rpn:f64[400,13] = dot_general[
                              dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
                              preferred_element_type=float64
                            ] rpg rpg
                            rpo:f64[400,13] = sub rpm rpn
                            rpp:f64[400,13,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(400, 13, 1)
                            ] rpo
                            rpq:f64[1,13,3] = broadcast_in_dim[
                              broadcast_dimensions=(1, 2)
                              shape=(1, 13, 3)
                            ] prt
                            rpr:f64[400,13,3] = mul rpp rpq
                            rps:f64[400,13,3] = add rpl rpr
                            rpt:f64[400,13] = mul 2.0 rpf
                            rpu:f64[400,13,3] = pjit[name=cross jaxpr=cross10] rpg
                              prt
                            rpv:f64[400,13,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(400, 13, 1)
                            ] rpt
                            rpw:f64[400,13,3] = mul rpv rpu
                            rpx:f64[400,13,3] = add rps rpw
                            rpy:f64[400,13,3] = add rox rpx
                            rpz:f64[400,13,1] = slice[
                              limit_indices=(400, 13, 1)
                              start_indices=(0, 0, 0)
                              strides=None
                            ] roy
                            rqa:f64[400,13] = squeeze[dimensions=(2,)] rpz
                            rqb:f64[13,1] = slice[
                              limit_indices=(13, 1)
                              start_indices=(0, 0)
                              strides=None
                            ] prs
                            rqc:f64[13] = squeeze[dimensions=(1,)] rqb
                            rqd:f64[1,13] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 13)
                            ] rqc
                            rqe:f64[400,13] = mul rqa rqd
                            rqf:f64[400,13,1] = slice[
                              limit_indices=(400, 13, 2)
                              start_indices=(0, 0, 1)
                              strides=None
                            ] roy
                            rqg:f64[400,13] = squeeze[dimensions=(2,)] rqf
                            rqh:f64[13,1] = slice[
                              limit_indices=(13, 2)
                              start_indices=(0, 1)
                              strides=None
                            ] prs
                            rqi:f64[13] = squeeze[dimensions=(1,)] rqh
                            rqj:f64[1,13] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 13)
                            ] rqi
                            rqk:f64[400,13] = mul rqg rqj
                            rql:f64[400,13] = sub rqe rqk
                            rqm:f64[400,13,1] = slice[
                              limit_indices=(400, 13, 3)
                              start_indices=(0, 0, 2)
                              strides=None
                            ] roy
                            rqn:f64[400,13] = squeeze[dimensions=(2,)] rqm
                            rqo:f64[13,1] = slice[
                              limit_indices=(13, 3)
                              start_indices=(0, 2)
                              strides=None
                            ] prs
                            rqp:f64[13] = squeeze[dimensions=(1,)] rqo
                            rqq:f64[1,13] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 13)
                            ] rqp
                            rqr:f64[400,13] = mul rqn rqq
                            rqs:f64[400,13] = sub rql rqr
                            rqt:f64[400,13,1] = slice[
                              limit_indices=(400, 13, 4)
                              start_indices=(0, 0, 3)
                              strides=None
                            ] roy
                            rqu:f64[400,13] = squeeze[dimensions=(2,)] rqt
                            rqv:f64[13,1] = slice[
                              limit_indices=(13, 4)
                              start_indices=(0, 3)
                              strides=None
                            ] prs
                            rqw:f64[13] = squeeze[dimensions=(1,)] rqv
                            rqx:f64[1,13] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 13)
                            ] rqw
                            rqy:f64[400,13] = mul rqu rqx
                            rqz:f64[400,13] = sub rqs rqy
                            rra:f64[400,13,1] = slice[
                              limit_indices=(400, 13, 1)
                              start_indices=(0, 0, 0)
                              strides=None
                            ] roy
                            rrb:f64[400,13] = squeeze[dimensions=(2,)] rra
                            rrc:f64[13,1] = slice[
                              limit_indices=(13, 2)
                              start_indices=(0, 1)
                              strides=None
                            ] prs
                            rrd:f64[13] = squeeze[dimensions=(1,)] rrc
                            rre:f64[1,13] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 13)
                            ] rrd
                            rrf:f64[400,13] = mul rrb rre
                            rrg:f64[400,13,1] = slice[
                              limit_indices=(400, 13, 2)
                              start_indices=(0, 0, 1)
                              strides=None
                            ] roy
                            rrh:f64[400,13] = squeeze[dimensions=(2,)] rrg
                            rri:f64[13,1] = slice[
                              limit_indices=(13, 1)
                              start_indices=(0, 0)
                              strides=None
                            ] prs
                            rrj:f64[13] = squeeze[dimensions=(1,)] rri
                            rrk:f64[1,13] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 13)
                            ] rrj
                            rrl:f64[400,13] = mul rrh rrk
                            rrm:f64[400,13] = add rrf rrl
                            rrn:f64[400,13,1] = slice[
                              limit_indices=(400, 13, 3)
                              start_indices=(0, 0, 2)
                              strides=None
                            ] roy
                            rro:f64[400,13] = squeeze[dimensions=(2,)] rrn
                            rrp:f64[13,1] = slice[
                              limit_indices=(13, 4)
                              start_indices=(0, 3)
                              strides=None
                            ] prs
                            rrq:f64[13] = squeeze[dimensions=(1,)] rrp
                            rrr:f64[1,13] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 13)
                            ] rrq
                            rrs:f64[400,13] = mul rro rrr
                            rrt:f64[400,13] = add rrm rrs
                            rru:f64[400,13,1] = slice[
                              limit_indices=(400, 13, 4)
                              start_indices=(0, 0, 3)
                              strides=None
                            ] roy
                            rrv:f64[400,13] = squeeze[dimensions=(2,)] rru
                            rrw:f64[13,1] = slice[
                              limit_indices=(13, 3)
                              start_indices=(0, 2)
                              strides=None
                            ] prs
                            rrx:f64[13] = squeeze[dimensions=(1,)] rrw
                            rry:f64[1,13] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 13)
                            ] rrx
                            rrz:f64[400,13] = mul rrv rry
                            rsa:f64[400,13] = sub rrt rrz
                            rsb:f64[400,13,1] = slice[
                              limit_indices=(400, 13, 1)
                              start_indices=(0, 0, 0)
                              strides=None
                            ] roy
                            rsc:f64[400,13] = squeeze[dimensions=(2,)] rsb
                            rsd:f64[13,1] = slice[
                              limit_indices=(13, 3)
                              start_indices=(0, 2)
                              strides=None
                            ] prs
                            rse:f64[13] = squeeze[dimensions=(1,)] rsd
                            rsf:f64[1,13] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 13)
                            ] rse
                            rsg:f64[400,13] = mul rsc rsf
                            rsh:f64[400,13,1] = slice[
                              limit_indices=(400, 13, 2)
                              start_indices=(0, 0, 1)
                              strides=None
                            ] roy
                            rsi:f64[400,13] = squeeze[dimensions=(2,)] rsh
                            rsj:f64[13,1] = slice[
                              limit_indices=(13, 4)
                              start_indices=(0, 3)
                              strides=None
                            ] prs
                            rsk:f64[13] = squeeze[dimensions=(1,)] rsj
                            rsl:f64[1,13] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 13)
                            ] rsk
                            rsm:f64[400,13] = mul rsi rsl
                            rsn:f64[400,13] = sub rsg rsm
                            rso:f64[400,13,1] = slice[
                              limit_indices=(400, 13, 3)
                              start_indices=(0, 0, 2)
                              strides=None
                            ] roy
                            rsp:f64[400,13] = squeeze[dimensions=(2,)] rso
                            rsq:f64[13,1] = slice[
                              limit_indices=(13, 1)
                              start_indices=(0, 0)
                              strides=None
                            ] prs
                            rsr:f64[13] = squeeze[dimensions=(1,)] rsq
                            rss:f64[1,13] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 13)
                            ] rsr
                            rst:f64[400,13] = mul rsp rss
                            rsu:f64[400,13] = add rsn rst
                            rsv:f64[400,13,1] = slice[
                              limit_indices=(400, 13, 4)
                              start_indices=(0, 0, 3)
                              strides=None
                            ] roy
                            rsw:f64[400,13] = squeeze[dimensions=(2,)] rsv
                            rsx:f64[13,1] = slice[
                              limit_indices=(13, 2)
                              start_indices=(0, 1)
                              strides=None
                            ] prs
                            rsy:f64[13] = squeeze[dimensions=(1,)] rsx
                            rsz:f64[1,13] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 13)
                            ] rsy
                            rta:f64[400,13] = mul rsw rsz
                            rtb:f64[400,13] = add rsu rta
                            rtc:f64[400,13,1] = slice[
                              limit_indices=(400, 13, 1)
                              start_indices=(0, 0, 0)
                              strides=None
                            ] roy
                            rtd:f64[400,13] = squeeze[dimensions=(2,)] rtc
                            rte:f64[13,1] = slice[
                              limit_indices=(13, 4)
                              start_indices=(0, 3)
                              strides=None
                            ] prs
                            rtf:f64[13] = squeeze[dimensions=(1,)] rte
                            rtg:f64[1,13] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 13)
                            ] rtf
                            rth:f64[400,13] = mul rtd rtg
                            rti:f64[400,13,1] = slice[
                              limit_indices=(400, 13, 2)
                              start_indices=(0, 0, 1)
                              strides=None
                            ] roy
                            rtj:f64[400,13] = squeeze[dimensions=(2,)] rti
                            rtk:f64[13,1] = slice[
                              limit_indices=(13, 3)
                              start_indices=(0, 2)
                              strides=None
                            ] prs
                            rtl:f64[13] = squeeze[dimensions=(1,)] rtk
                            rtm:f64[1,13] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 13)
                            ] rtl
                            rtn:f64[400,13] = mul rtj rtm
                            rto:f64[400,13] = add rth rtn
                            rtp:f64[400,13,1] = slice[
                              limit_indices=(400, 13, 3)
                              start_indices=(0, 0, 2)
                              strides=None
                            ] roy
                            rtq:f64[400,13] = squeeze[dimensions=(2,)] rtp
                            rtr:f64[13,1] = slice[
                              limit_indices=(13, 2)
                              start_indices=(0, 1)
                              strides=None
                            ] prs
                            rts:f64[13] = squeeze[dimensions=(1,)] rtr
                            rtt:f64[1,13] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 13)
                            ] rts
                            rtu:f64[400,13] = mul rtq rtt
                            rtv:f64[400,13] = sub rto rtu
                            rtw:f64[400,13,1] = slice[
                              limit_indices=(400, 13, 4)
                              start_indices=(0, 0, 3)
                              strides=None
                            ] roy
                            rtx:f64[400,13] = squeeze[dimensions=(2,)] rtw
                            rty:f64[13,1] = slice[
                              limit_indices=(13, 1)
                              start_indices=(0, 0)
                              strides=None
                            ] prs
                            rtz:f64[13] = squeeze[dimensions=(1,)] rty
                            rua:f64[1,13] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 13)
                            ] rtz
                            rub:f64[400,13] = mul rtx rua
                            ruc:f64[400,13] = add rtv rub
                            rud:f64[400,13,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(400, 13, 1)
                            ] rqz
                            rue:f64[400,13,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(400, 13, 1)
                            ] rsa
                            ruf:f64[400,13,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(400, 13, 1)
                            ] rtb
                            rug:f64[400,13,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(400, 13, 1)
                            ] ruc
                            ruh:f64[400,13,4] = concatenate[dimension=2] rud rue
                              ruf rug
                            rui:f64[400,13,1] = slice[
                              limit_indices=(400, 13, 1)
                              start_indices=(0, 0, 0)
                              strides=None
                            ] ruh
                            ruj:f64[400,13] = squeeze[dimensions=(2,)] rui
                            ruk:f64[400,13,3] = slice[
                              limit_indices=(400, 13, 4)
                              start_indices=(0, 0, 1)
                              strides=None
                            ] ruh
                            rul:f64[13,400] = dot_general[
                              dimension_numbers=(([2], [1]), ([1], [0]))
                              preferred_element_type=float64
                            ] ruk prq
                            rum:f64[400,13] = transpose[permutation=(1, 0)] rul
                            run:f64[400,13,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(400, 13, 1)
                            ] rum
                            ruo:f64[400,13,3] = mul run ruk
                            rup:f64[400,13,3] = mul 2.0 ruo
                            ruq:f64[400,13] = mul ruj ruj
                            rur:f64[400,13] = dot_general[
                              dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
                              preferred_element_type=float64
                            ] ruk ruk
                            rus:f64[400,13] = sub ruq rur
                            rut:f64[400,13,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(400, 13, 1)
                            ] rus
                            ruu:f64[1,13,3] = broadcast_in_dim[
                              broadcast_dimensions=(1, 2)
                              shape=(1, 13, 3)
                            ] prq
                            ruv:f64[400,13,3] = mul rut ruu
                            ruw:f64[400,13,3] = add rup ruv
                            rux:f64[400,13] = mul 2.0 ruj
                            ruy:f64[400,13,3] = pjit[name=cross jaxpr=cross10] ruk
                              prq
                            ruz:f64[400,13,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(400, 13, 1)
                            ] rux
                            rva:f64[400,13,3] = mul ruz ruy
                            rvb:f64[400,13,3] = add ruw rva
                            rvc:f64[400,13,3] = add rpy rvb
                            rvd:f64[400,13,1] = slice[
                              limit_indices=(400, 13, 1)
                              start_indices=(0, 0, 0)
                              strides=None
                            ] ruh
                            rve:f64[400,13] = squeeze[dimensions=(2,)] rvd
                            rvf:f64[13,1] = slice[
                              limit_indices=(13, 1)
                              start_indices=(0, 0)
                              strides=None
                            ] prr
                            rvg:f64[13] = squeeze[dimensions=(1,)] rvf
                            rvh:f64[1,13] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 13)
                            ] rvg
                            rvi:f64[400,13] = mul rve rvh
                            rvj:f64[400,13,1] = slice[
                              limit_indices=(400, 13, 2)
                              start_indices=(0, 0, 1)
                              strides=None
                            ] ruh
                            rvk:f64[400,13] = squeeze[dimensions=(2,)] rvj
                            rvl:f64[13,1] = slice[
                              limit_indices=(13, 2)
                              start_indices=(0, 1)
                              strides=None
                            ] prr
                            rvm:f64[13] = squeeze[dimensions=(1,)] rvl
                            rvn:f64[1,13] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 13)
                            ] rvm
                            rvo:f64[400,13] = mul rvk rvn
                            rvp:f64[400,13] = sub rvi rvo
                            rvq:f64[400,13,1] = slice[
                              limit_indices=(400, 13, 3)
                              start_indices=(0, 0, 2)
                              strides=None
                            ] ruh
                            rvr:f64[400,13] = squeeze[dimensions=(2,)] rvq
                            rvs:f64[13,1] = slice[
                              limit_indices=(13, 3)
                              start_indices=(0, 2)
                              strides=None
                            ] prr
                            rvt:f64[13] = squeeze[dimensions=(1,)] rvs
                            rvu:f64[1,13] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 13)
                            ] rvt
                            rvv:f64[400,13] = mul rvr rvu
                            rvw:f64[400,13] = sub rvp rvv
                            rvx:f64[400,13,1] = slice[
                              limit_indices=(400, 13, 4)
                              start_indices=(0, 0, 3)
                              strides=None
                            ] ruh
                            rvy:f64[400,13] = squeeze[dimensions=(2,)] rvx
                            rvz:f64[13,1] = slice[
                              limit_indices=(13, 4)
                              start_indices=(0, 3)
                              strides=None
                            ] prr
                            rwa:f64[13] = squeeze[dimensions=(1,)] rvz
                            rwb:f64[1,13] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 13)
                            ] rwa
                            rwc:f64[400,13] = mul rvy rwb
                            rwd:f64[400,13] = sub rvw rwc
                            rwe:f64[400,13,1] = slice[
                              limit_indices=(400, 13, 1)
                              start_indices=(0, 0, 0)
                              strides=None
                            ] ruh
                            rwf:f64[400,13] = squeeze[dimensions=(2,)] rwe
                            rwg:f64[13,1] = slice[
                              limit_indices=(13, 2)
                              start_indices=(0, 1)
                              strides=None
                            ] prr
                            rwh:f64[13] = squeeze[dimensions=(1,)] rwg
                            rwi:f64[1,13] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 13)
                            ] rwh
                            rwj:f64[400,13] = mul rwf rwi
                            rwk:f64[400,13,1] = slice[
                              limit_indices=(400, 13, 2)
                              start_indices=(0, 0, 1)
                              strides=None
                            ] ruh
                            rwl:f64[400,13] = squeeze[dimensions=(2,)] rwk
                            rwm:f64[13,1] = slice[
                              limit_indices=(13, 1)
                              start_indices=(0, 0)
                              strides=None
                            ] prr
                            rwn:f64[13] = squeeze[dimensions=(1,)] rwm
                            rwo:f64[1,13] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 13)
                            ] rwn
                            rwp:f64[400,13] = mul rwl rwo
                            rwq:f64[400,13] = add rwj rwp
                            rwr:f64[400,13,1] = slice[
                              limit_indices=(400, 13, 3)
                              start_indices=(0, 0, 2)
                              strides=None
                            ] ruh
                            rws:f64[400,13] = squeeze[dimensions=(2,)] rwr
                            rwt:f64[13,1] = slice[
                              limit_indices=(13, 4)
                              start_indices=(0, 3)
                              strides=None
                            ] prr
                            rwu:f64[13] = squeeze[dimensions=(1,)] rwt
                            rwv:f64[1,13] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 13)
                            ] rwu
                            rww:f64[400,13] = mul rws rwv
                            rwx:f64[400,13] = add rwq rww
                            rwy:f64[400,13,1] = slice[
                              limit_indices=(400, 13, 4)
                              start_indices=(0, 0, 3)
                              strides=None
                            ] ruh
                            rwz:f64[400,13] = squeeze[dimensions=(2,)] rwy
                            rxa:f64[13,1] = slice[
                              limit_indices=(13, 3)
                              start_indices=(0, 2)
                              strides=None
                            ] prr
                            rxb:f64[13] = squeeze[dimensions=(1,)] rxa
                            rxc:f64[1,13] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 13)
                            ] rxb
                            rxd:f64[400,13] = mul rwz rxc
                            rxe:f64[400,13] = sub rwx rxd
                            rxf:f64[400,13,1] = slice[
                              limit_indices=(400, 13, 1)
                              start_indices=(0, 0, 0)
                              strides=None
                            ] ruh
                            rxg:f64[400,13] = squeeze[dimensions=(2,)] rxf
                            rxh:f64[13,1] = slice[
                              limit_indices=(13, 3)
                              start_indices=(0, 2)
                              strides=None
                            ] prr
                            rxi:f64[13] = squeeze[dimensions=(1,)] rxh
                            rxj:f64[1,13] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 13)
                            ] rxi
                            rxk:f64[400,13] = mul rxg rxj
                            rxl:f64[400,13,1] = slice[
                              limit_indices=(400, 13, 2)
                              start_indices=(0, 0, 1)
                              strides=None
                            ] ruh
                            rxm:f64[400,13] = squeeze[dimensions=(2,)] rxl
                            rxn:f64[13,1] = slice[
                              limit_indices=(13, 4)
                              start_indices=(0, 3)
                              strides=None
                            ] prr
                            rxo:f64[13] = squeeze[dimensions=(1,)] rxn
                            rxp:f64[1,13] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 13)
                            ] rxo
                            rxq:f64[400,13] = mul rxm rxp
                            rxr:f64[400,13] = sub rxk rxq
                            rxs:f64[400,13,1] = slice[
                              limit_indices=(400, 13, 3)
                              start_indices=(0, 0, 2)
                              strides=None
                            ] ruh
                            rxt:f64[400,13] = squeeze[dimensions=(2,)] rxs
                            rxu:f64[13,1] = slice[
                              limit_indices=(13, 1)
                              start_indices=(0, 0)
                              strides=None
                            ] prr
                            rxv:f64[13] = squeeze[dimensions=(1,)] rxu
                            rxw:f64[1,13] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 13)
                            ] rxv
                            rxx:f64[400,13] = mul rxt rxw
                            rxy:f64[400,13] = add rxr rxx
                            rxz:f64[400,13,1] = slice[
                              limit_indices=(400, 13, 4)
                              start_indices=(0, 0, 3)
                              strides=None
                            ] ruh
                            rya:f64[400,13] = squeeze[dimensions=(2,)] rxz
                            ryb:f64[13,1] = slice[
                              limit_indices=(13, 2)
                              start_indices=(0, 1)
                              strides=None
                            ] prr
                            ryc:f64[13] = squeeze[dimensions=(1,)] ryb
                            ryd:f64[1,13] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 13)
                            ] ryc
                            rye:f64[400,13] = mul rya ryd
                            ryf:f64[400,13] = add rxy rye
                            ryg:f64[400,13,1] = slice[
                              limit_indices=(400, 13, 1)
                              start_indices=(0, 0, 0)
                              strides=None
                            ] ruh
                            ryh:f64[400,13] = squeeze[dimensions=(2,)] ryg
                            ryi:f64[13,1] = slice[
                              limit_indices=(13, 4)
                              start_indices=(0, 3)
                              strides=None
                            ] prr
                            ryj:f64[13] = squeeze[dimensions=(1,)] ryi
                            ryk:f64[1,13] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 13)
                            ] ryj
                            ryl:f64[400,13] = mul ryh ryk
                            rym:f64[400,13,1] = slice[
                              limit_indices=(400, 13, 2)
                              start_indices=(0, 0, 1)
                              strides=None
                            ] ruh
                            ryn:f64[400,13] = squeeze[dimensions=(2,)] rym
                            ryo:f64[13,1] = slice[
                              limit_indices=(13, 3)
                              start_indices=(0, 2)
                              strides=None
                            ] prr
                            ryp:f64[13] = squeeze[dimensions=(1,)] ryo
                            ryq:f64[1,13] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 13)
                            ] ryp
                            ryr:f64[400,13] = mul ryn ryq
                            rys:f64[400,13] = add ryl ryr
                            ryt:f64[400,13,1] = slice[
                              limit_indices=(400, 13, 3)
                              start_indices=(0, 0, 2)
                              strides=None
                            ] ruh
                            ryu:f64[400,13] = squeeze[dimensions=(2,)] ryt
                            ryv:f64[13,1] = slice[
                              limit_indices=(13, 2)
                              start_indices=(0, 1)
                              strides=None
                            ] prr
                            ryw:f64[13] = squeeze[dimensions=(1,)] ryv
                            ryx:f64[1,13] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 13)
                            ] ryw
                            ryy:f64[400,13] = mul ryu ryx
                            ryz:f64[400,13] = sub rys ryy
                            rza:f64[400,13,1] = slice[
                              limit_indices=(400, 13, 4)
                              start_indices=(0, 0, 3)
                              strides=None
                            ] ruh
                            rzb:f64[400,13] = squeeze[dimensions=(2,)] rza
                            rzc:f64[13,1] = slice[
                              limit_indices=(13, 1)
                              start_indices=(0, 0)
                              strides=None
                            ] prr
                            rzd:f64[13] = squeeze[dimensions=(1,)] rzc
                            rze:f64[1,13] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 13)
                            ] rzd
                            rzf:f64[400,13] = mul rzb rze
                            rzg:f64[400,13] = add ryz rzf
                            rzh:f64[400,13,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(400, 13, 1)
                            ] rwd
                            rzi:f64[400,13,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(400, 13, 1)
                            ] rxe
                            rzj:f64[400,13,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(400, 13, 1)
                            ] ryf
                            rzk:f64[400,13,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(400, 13, 1)
                            ] rzg
                            rzl:f64[400,13,4] = concatenate[dimension=2] rzh rzi
                              rzj rzk
                            rzm:f64[6,3] = slice[
                              limit_indices=(6, 3)
                              start_indices=(0, 0)
                              strides=None
                            ] pro
                            rzn:f64[6,3] = slice[
                              limit_indices=(6, 3)
                              start_indices=(0, 0)
                              strides=None
                            ] prp
                            rzo:f64[12,3] = slice[
                              limit_indices=(18, 3)
                              start_indices=(6, 0)
                              strides=None
                            ] pro
                            rzp:f64[12,3] = slice[
                              limit_indices=(18, 3)
                              start_indices=(6, 0)
                              strides=None
                            ] prp
                            rzq:f64[12,1,3] = reshape[
                              dimensions=None
                              new_sizes=(12, 1, 3)
                            ] rzo
                            rzr:f64[12,1,3] = reshape[
                              dimensions=None
                              new_sizes=(12, 1, 3)
                            ] rzp
                            rzs:f64[12,3] = broadcast_in_dim[
                              broadcast_dimensions=()
                              shape=(12, 3)
                            ] 0.0
                            rzt:f64[1,1,1,4] = reshape[
                              dimensions=None
                              new_sizes=(1, 1, 1, 4)
                            ] psl
                            rzu:f64[1,1,4] = squeeze[dimensions=(0,)] rzt
                            rzv:f64[12,1,1,4] = broadcast_in_dim[
                              broadcast_dimensions=(1, 2, 3)
                              shape=(12, 1, 1, 4)
                            ] rzu
                            rzw:f64[12,4] = reshape[
                              dimensions=None
                              new_sizes=(12, 4)
                            ] rzv
                            rzx:f64[12,3] = pjit[name=_take jaxpr=_take11] rzq 0
                            rzy:f64[12,3] = pjit[name=_take jaxpr=_take11] rzr 0
                            rzz:f64[12,1] = slice[
                              limit_indices=(12, 1)
                              start_indices=(0, 0)
                              strides=None
                            ] rzw
                            saa:f64[12] = squeeze[dimensions=(1,)] rzz
                            sab:f64[12,3] = slice[
                              limit_indices=(12, 4)
                              start_indices=(0, 1)
                              strides=None
                            ] rzw
                            sac:f64[12] = dot_general[
                              dimension_numbers=(([1], [1]), ([0], [0]))
                              preferred_element_type=float64
                            ] sab rzx
                            sad:f64[12,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(12, 1)
                            ] sac
                            sae:f64[12,3] = mul sad sab
                            saf:f64[12,3] = mul 2.0 sae
                            sag:f64[12] = mul saa saa
                            sah:f64[12] = dot_general[
                              dimension_numbers=(([1], [1]), ([0], [0]))
                              preferred_element_type=float64
                            ] sab sab
                            sai:f64[12] = sub sag sah
                            saj:f64[12,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(12, 1)
                            ] sai
                            sak:f64[12,3] = mul saj rzx
                            sal:f64[12,3] = add saf sak
                            sam:f64[12] = mul 2.0 saa
                            san:f64[12,3] = pjit[name=cross jaxpr=cross4] sab rzx
                            sao:f64[12,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(12, 1)
                            ] sam
                            sap:f64[12,3] = mul sao san
                            saq:f64[12,3] = add sal sap
                            sar:f64[12,1] = slice[
                              limit_indices=(12, 1)
                              start_indices=(0, 0)
                              strides=None
                            ] rzw
                            sas:f64[12] = squeeze[dimensions=(1,)] sar
                            sat:f64[12,3] = slice[
                              limit_indices=(12, 4)
                              start_indices=(0, 1)
                              strides=None
                            ] rzw
                            sau:f64[12] = dot_general[
                              dimension_numbers=(([1], [1]), ([0], [0]))
                              preferred_element_type=float64
                            ] sat rzy
                            sav:f64[12,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(12, 1)
                            ] sau
                            saw:f64[12,3] = mul sav sat
                            sax:f64[12,3] = mul 2.0 saw
                            say:f64[12] = mul sas sas
                            saz:f64[12] = dot_general[
                              dimension_numbers=(([1], [1]), ([0], [0]))
                              preferred_element_type=float64
                            ] sat sat
                            sba:f64[12] = sub say saz
                            sbb:f64[12,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(12, 1)
                            ] sba
                            sbc:f64[12,3] = mul sbb rzy
                            sbd:f64[12,3] = add sax sbc
                            sbe:f64[12] = mul 2.0 sas
                            sbf:f64[12,3] = pjit[name=cross jaxpr=cross4] sat rzy
                            sbg:f64[12,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(12, 1)
                            ] sbe
                            sbh:f64[12,3] = mul sbg sbf
                            sbi:f64[12,3] = add sbd sbh
                            sbj:f64[12,3] = pjit[name=cross jaxpr=cross4] rzs saq
                            sbk:f64[12,3] = add sbi sbj
                            sbl:f64[18,3] = concatenate[dimension=0] rzm saq
                            sbm:f64[18,3] = concatenate[dimension=0] rzn sbk
                            sbn:f64[400,18,4] = pjit[
                              name=_take
                              jaxpr={ lambda ; sbo:f64[400,13,4] sbp:i64[18]. let
                                  sbq:i64[18] = pjit[
                                    name=remainder
                                    jaxpr=remainder8
                                  ] sbp 13
                                  sbr:i64[18,1] = broadcast_in_dim[
                                    broadcast_dimensions=(0,)
                                    shape=(18, 1)
                                  ] sbq
                                  sbs:f64[400,18,4] = gather[
                                    dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 2), collapsed_slice_dims=(1,), start_index_map=(1,))
                                    fill_value=None
                                    indices_are_sorted=False
                                    mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                    slice_sizes=(400, 1, 4)
                                    unique_indices=False
                                  ] sbo sbr
                                in (sbs,) }
                            ] rzl psm
                            sbt:f64[400,18,1] = slice[
                              limit_indices=(400, 18, 1)
                              start_indices=(0, 0, 0)
                              strides=None
                            ] sbn
                            sbu:f64[400,18] = squeeze[dimensions=(2,)] sbt
                            sbv:f64[400,18,3] = slice[
                              limit_indices=(400, 18, 4)
                              start_indices=(0, 0, 1)
                              strides=None
                            ] sbn
                            sbw:f64[18,400] = dot_general[
                              dimension_numbers=(([2], [1]), ([1], [0]))
                              preferred_element_type=float64
                            ] sbv sbl
                            sbx:f64[400,18] = transpose[permutation=(1, 0)] sbw
                            sby:f64[400,18,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(400, 18, 1)
                            ] sbx
                            sbz:f64[400,18,3] = mul sby sbv
                            sca:f64[400,18,3] = mul 2.0 sbz
                            scb:f64[400,18] = mul sbu sbu
                            scc:f64[400,18] = dot_general[
                              dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
                              preferred_element_type=float64
                            ] sbv sbv
                            scd:f64[400,18] = sub scb scc
                            sce:f64[400,18,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(400, 18, 1)
                            ] scd
                            scf:f64[1,18,3] = broadcast_in_dim[
                              broadcast_dimensions=(1, 2)
                              shape=(1, 18, 3)
                            ] sbl
                            scg:f64[400,18,3] = mul sce scf
                            sch:f64[400,18,3] = add sca scg
                            sci:f64[400,18] = mul 2.0 sbu
                            scj:f64[400,18,3] = pjit[
                              name=cross
                              jaxpr={ lambda ; sck:f64[400,18,3] scl:f64[18,3]. let
                                  scm:i32[1] = broadcast_in_dim[
                                    broadcast_dimensions=()
                                    shape=(1,)
                                  ] 0
                                  scn:f64[400,18] = gather[
                                    dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
                                    fill_value=None
                                    indices_are_sorted=True
                                    mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                    slice_sizes=(400, 18, 1)
                                    unique_indices=True
                                  ] sck scm
                                  sco:i32[1] = broadcast_in_dim[
                                    broadcast_dimensions=()
                                    shape=(1,)
                                  ] 1
                                  scp:f64[400,18] = gather[
                                    dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
                                    fill_value=None
                                    indices_are_sorted=True
                                    mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                    slice_sizes=(400, 18, 1)
                                    unique_indices=True
                                  ] sck sco
                                  scq:i32[1] = broadcast_in_dim[
                                    broadcast_dimensions=()
                                    shape=(1,)
                                  ] 2
                                  scr:f64[400,18] = gather[
                                    dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
                                    fill_value=None
                                    indices_are_sorted=True
                                    mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                    slice_sizes=(400, 18, 1)
                                    unique_indices=True
                                  ] sck scq
                                  scs:i32[1] = broadcast_in_dim[
                                    broadcast_dimensions=()
                                    shape=(1,)
                                  ] 0
                                  sct:f64[18] = gather[
                                    dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
                                    fill_value=None
                                    indices_are_sorted=True
                                    mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                    slice_sizes=(18, 1)
                                    unique_indices=True
                                  ] scl scs
                                  scu:i32[1] = broadcast_in_dim[
                                    broadcast_dimensions=()
                                    shape=(1,)
                                  ] 1
                                  scv:f64[18] = gather[
                                    dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
                                    fill_value=None
                                    indices_are_sorted=True
                                    mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                    slice_sizes=(18, 1)
                                    unique_indices=True
                                  ] scl scu
                                  scw:i32[1] = broadcast_in_dim[
                                    broadcast_dimensions=()
                                    shape=(1,)
                                  ] 2
                                  scx:f64[18] = gather[
                                    dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
                                    fill_value=None
                                    indices_are_sorted=True
                                    mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                    slice_sizes=(18, 1)
                                    unique_indices=True
                                  ] scl scw
                                  scy:f64[1,18] = broadcast_in_dim[
                                    broadcast_dimensions=(1,)
                                    shape=(1, 18)
                                  ] scx
                                  scz:f64[400,18] = mul scp scy
                                  sda:f64[1,18] = broadcast_in_dim[
                                    broadcast_dimensions=(1,)
                                    shape=(1, 18)
                                  ] scv
                                  sdb:f64[400,18] = mul scr sda
                                  sdc:f64[400,18] = sub scz sdb
                                  sdd:f64[1,18] = broadcast_in_dim[
                                    broadcast_dimensions=(1,)
                                    shape=(1, 18)
                                  ] sct
                                  sde:f64[400,18] = mul scr sdd
                                  sdf:f64[1,18] = broadcast_in_dim[
                                    broadcast_dimensions=(1,)
                                    shape=(1, 18)
                                  ] scx
                                  sdg:f64[400,18] = mul scn sdf
                                  sdh:f64[400,18] = sub sde sdg
                                  sdi:f64[1,18] = broadcast_in_dim[
                                    broadcast_dimensions=(1,)
                                    shape=(1, 18)
                                  ] scv
                                  sdj:f64[400,18] = mul scn sdi
                                  sdk:f64[1,18] = broadcast_in_dim[
                                    broadcast_dimensions=(1,)
                                    shape=(1, 18)
                                  ] sct
                                  sdl:f64[400,18] = mul scp sdk
                                  sdm:f64[400,18] = sub sdj sdl
                                  sdn:f64[400,18,1] = broadcast_in_dim[
                                    broadcast_dimensions=(0, 1)
                                    shape=(400, 18, 1)
                                  ] sdc
                                  sdo:f64[400,18,1] = broadcast_in_dim[
                                    broadcast_dimensions=(0, 1)
                                    shape=(400, 18, 1)
                                  ] sdh
                                  sdp:f64[400,18,1] = broadcast_in_dim[
                                    broadcast_dimensions=(0, 1)
                                    shape=(400, 18, 1)
                                  ] sdm
                                  sdq:f64[400,18,3] = concatenate[dimension=2] sdn
                                    sdo sdp
                                in (sdq,) }
                            ] sbv sbl
                            sdr:f64[400,18,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(400, 18, 1)
                            ] sci
                            sds:f64[400,18,3] = mul sdr scj
                            sdt:f64[400,18,3] = add sch sds
                            sdu:f64[400,13,3] = sub rkd rvc
                            sdv:f64[1,1,1,4] = reshape[
                              dimensions=None
                              new_sizes=(1, 1, 1, 4)
                            ] psn
                            sdw:f64[1,1,4] = squeeze[dimensions=(0,)] sdv
                            sdx:f64[13,1,1,4] = broadcast_in_dim[
                              broadcast_dimensions=(1, 2, 3)
                              shape=(13, 1, 1, 4)
                            ] sdw
                            sdy:f64[13,4] = reshape[
                              dimensions=None
                              new_sizes=(13, 4)
                            ] sdx
                            sdz:f64[400,18,3] = pjit[name=_take jaxpr=_take20] sdu
                              pso
                            sea:f64[18,4] = pjit[name=_take jaxpr=_take12] sdy pso
                            seb:f64[4] = convert_element_type[
                              new_dtype=float64
                              weak_type=False
                            ] psp
                            sec:f64[1,4] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 4)
                            ] seb
                            sed:f64[18,4] = mul sea sec
                            see:f64[18,1] = slice[
                              limit_indices=(18, 1)
                              start_indices=(0, 0)
                              strides=None
                            ] sed
                            sef:f64[18] = squeeze[dimensions=(1,)] see
                            seg:f64[18,3] = slice[
                              limit_indices=(18, 4)
                              start_indices=(0, 1)
                              strides=None
                            ] sed
                            seh:f64[18,400] = dot_general[
                              dimension_numbers=(([1], [2]), ([0], [1]))
                              preferred_element_type=float64
                            ] seg sdt
                            sei:f64[400,18] = transpose[permutation=(1, 0)] seh
                            sej:f64[400,18,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(400, 18, 1)
                            ] sei
                            sek:f64[1,18,3] = broadcast_in_dim[
                              broadcast_dimensions=(1, 2)
                              shape=(1, 18, 3)
                            ] seg
                            sel:f64[400,18,3] = mul sej sek
                            sem:f64[400,18,3] = mul 2.0 sel
                            sen:f64[18] = mul sef sef
                            seo:f64[18] = dot_general[
                              dimension_numbers=(([1], [1]), ([0], [0]))
                              preferred_element_type=float64
                            ] seg seg
                            sep:f64[18] = sub sen seo
                            seq:f64[18,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(18, 1)
                            ] sep
                            ser:f64[1,18,1] = broadcast_in_dim[
                              broadcast_dimensions=(1, 2)
                              shape=(1, 18, 1)
                            ] seq
                            ses:f64[400,18,3] = mul ser sdt
                            set:f64[400,18,3] = add sem ses
                            seu:f64[18] = mul 2.0 sef
                            sev:f64[400,18,3] = pjit[name=cross jaxpr=cross12] seg
                              sdt
                            sew:f64[18,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(18, 1)
                            ] seu
                            sex:f64[1,18,1] = broadcast_in_dim[
                              broadcast_dimensions=(1, 2)
                              shape=(1, 18, 1)
                            ] sew
                            sey:f64[400,18,3] = mul sex sev
                            sez:f64[400,18,3] = add set sey
                            sfa:f64[400,18,3] = pjit[name=cross jaxpr=cross13] sdz
                              sdt
                            sfb:f64[1,18,3] = broadcast_in_dim[
                              broadcast_dimensions=(1, 2)
                              shape=(1, 18, 3)
                            ] sbm
                            sfc:f64[400,18,3] = sub sfb sfa
                            sfd:f64[18,1] = slice[
                              limit_indices=(18, 1)
                              start_indices=(0, 0)
                              strides=None
                            ] sed
                            sfe:f64[18] = squeeze[dimensions=(1,)] sfd
                            sff:f64[18,3] = slice[
                              limit_indices=(18, 4)
                              start_indices=(0, 1)
                              strides=None
                            ] sed
                            sfg:f64[18,400] = dot_general[
                              dimension_numbers=(([1], [2]), ([0], [1]))
                              preferred_element_type=float64
                            ] sff sfc
                            sfh:f64[400,18] = transpose[permutation=(1, 0)] sfg
                            sfi:f64[400,18,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(400, 18, 1)
                            ] sfh
                            sfj:f64[1,18,3] = broadcast_in_dim[
                              broadcast_dimensions=(1, 2)
                              shape=(1, 18, 3)
                            ] sff
                            sfk:f64[400,18,3] = mul sfi sfj
                            sfl:f64[400,18,3] = mul 2.0 sfk
                            sfm:f64[18] = mul sfe sfe
                            sfn:f64[18] = dot_general[
                              dimension_numbers=(([1], [1]), ([0], [0]))
                              preferred_element_type=float64
                            ] sff sff
                            sfo:f64[18] = sub sfm sfn
                            sfp:f64[18,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(18, 1)
                            ] sfo
                            sfq:f64[1,18,1] = broadcast_in_dim[
                              broadcast_dimensions=(1, 2)
                              shape=(1, 18, 1)
                            ] sfp
                            sfr:f64[400,18,3] = mul sfq sfc
                            sfs:f64[400,18,3] = add sfl sfr
                            sft:f64[18] = mul 2.0 sfe
                            sfu:f64[400,18,3] = pjit[name=cross jaxpr=cross12] sff
                              sfc
                            sfv:f64[18,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(18, 1)
                            ] sft
                            sfw:f64[1,18,1] = broadcast_in_dim[
                              broadcast_dimensions=(1, 2)
                              shape=(1, 18, 1)
                            ] sfv
                            sfx:f64[400,18,3] = mul sfw sfu
                            sfy:f64[400,18,3] = add sfs sfx
                            sfz:f64[400,18,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(400, 18, 1)
                            ] qbj
                            sga:f64[400,18,3] = mul sez sfz
                            sgb:f64[400,18,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(400, 18, 1)
                            ] qbj
                            sgc:f64[400,18,3] = mul sfy sgb
                            sgd:f64[400,6,3] = slice[
                              limit_indices=(400, 6, 3)
                              start_indices=(0, 0, 0)
                              strides=None
                            ] sga
                            sge:f64[400,6,3] = slice[
                              limit_indices=(400, 6, 3)
                              start_indices=(0, 0, 0)
                              strides=None
                            ] sgc
                            sgf:i64[6] = slice[
                              limit_indices=(6,)
                              start_indices=(0,)
                              strides=None
                            ] psq
                            sgg:f64[1,3] = broadcast_in_dim[
                              broadcast_dimensions=()
                              shape=(1, 3)
                            ] 0.0
                            sgh:f64[1,3] = broadcast_in_dim[
                              broadcast_dimensions=()
                              shape=(1, 3)
                            ] 0.0
                            sgi:bool[6] = lt sgf 0
                            sgj:i64[6] = add sgf 1
                            sgk:i64[6] = select_n sgi sgf sgj
                            sgl:i32[6] = convert_element_type[
                              new_dtype=int32
                              weak_type=False
                            ] sgk
                            sgm:i32[6,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(6, 1)
                            ] sgl
                            sgn:f64[400,1,3] = broadcast_in_dim[
                              broadcast_dimensions=(1, 2)
                              shape=(400, 1, 3)
                            ] sgg
                            sgo:f64[400,1,3] = scatter-add[
                              dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                              indices_are_sorted=False
                              mode=GatherScatterMode.FILL_OR_DROP
                              unique_indices=False
                              update_consts=()
                              update_jaxpr=jaxpr
                            ] sgn sgm sgd
                            sgp:bool[6] = lt sgf 0
                            sgq:i64[6] = add sgf 1
                            sgr:i64[6] = select_n sgp sgf sgq
                            sgs:i32[6] = convert_element_type[
                              new_dtype=int32
                              weak_type=False
                            ] sgr
                            sgt:i32[6,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(6, 1)
                            ] sgs
                            sgu:f64[400,1,3] = broadcast_in_dim[
                              broadcast_dimensions=(1, 2)
                              shape=(400, 1, 3)
                            ] sgh
                            sgv:f64[400,1,3] = scatter-add[
                              dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                              indices_are_sorted=False
                              mode=GatherScatterMode.FILL_OR_DROP
                              unique_indices=False
                              update_consts=()
                              update_jaxpr=jaxpr
                            ] sgu sgt sge
                            sgw:f64[400,4,3] = pjit[name=_take jaxpr=_take21] sga
                              psr
                            sgx:f64[400,4,3] = pjit[name=_take jaxpr=_take21] sgc
                              pss
                            sgy:i64[4] = pjit[name=_take jaxpr=_take3] psq pst
                            sgz:f64[400,4,3] = pjit[name=_take jaxpr=_take17] sgo
                              psu
                            sha:f64[400,4,3] = pjit[name=_take jaxpr=_take17] sgv
                              psv
                            shb:bool[4] = lt sgy 0
                            shc:i64[4] = add sgy 4
                            shd:i64[4] = select_n shb sgy shc
                            she:i32[4] = convert_element_type[
                              new_dtype=int32
                              weak_type=False
                            ] shd
                            shf:i32[4,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(4, 1)
                            ] she
                            shg:f64[400,4,3] = scatter-add[
                              dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                              indices_are_sorted=False
                              mode=GatherScatterMode.FILL_OR_DROP
                              unique_indices=False
                              update_consts=()
                              update_jaxpr=jaxpr
                            ] sgz shf sgw
                            shh:bool[4] = lt sgy 0
                            shi:i64[4] = add sgy 4
                            shj:i64[4] = select_n shh sgy shi
                            shk:i32[4] = convert_element_type[
                              new_dtype=int32
                              weak_type=False
                            ] shj
                            shl:i32[4,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(4, 1)
                            ] shk
                            shm:f64[400,4,3] = scatter-add[
                              dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                              indices_are_sorted=False
                              mode=GatherScatterMode.FILL_OR_DROP
                              unique_indices=False
                              update_consts=()
                              update_jaxpr=jaxpr
                            ] sha shl sgx
                            shn:f64[400,4,3] = pjit[name=_take jaxpr=_take21] sga
                              psw
                            sho:f64[400,4,3] = pjit[name=_take jaxpr=_take21] sgc
                              psx
                            shp:i64[4] = pjit[name=_take jaxpr=_take3] psq psy
                            shq:bool[4] = lt shp 0
                            shr:i64[4] = add shp 4
                            shs:i64[4] = select_n shq shp shr
                            sht:i32[4] = convert_element_type[
                              new_dtype=int32
                              weak_type=False
                            ] shs
                            shu:i32[4,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(4, 1)
                            ] sht
                            shv:f64[400,4,3] = scatter-add[
                              dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                              indices_are_sorted=False
                              mode=GatherScatterMode.FILL_OR_DROP
                              unique_indices=False
                              update_consts=()
                              update_jaxpr=jaxpr
                            ] shg shu shn
                            shw:bool[4] = lt shp 0
                            shx:i64[4] = add shp 4
                            shy:i64[4] = select_n shw shp shx
                            shz:i32[4] = convert_element_type[
                              new_dtype=int32
                              weak_type=False
                            ] shy
                            sia:i32[4,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(4, 1)
                            ] shz
                            sib:f64[400,4,3] = scatter-add[
                              dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                              indices_are_sorted=False
                              mode=GatherScatterMode.FILL_OR_DROP
                              unique_indices=False
                              update_consts=()
                              update_jaxpr=jaxpr
                            ] shm sia sho
                            sic:f64[400,4,3] = pjit[name=_take jaxpr=_take21] sga
                              psz
                            sid:f64[400,4,3] = pjit[name=_take jaxpr=_take21] sgc
                              pta
                            sie:i64[4] = pjit[name=_take jaxpr=_take3] psq ptb
                            sif:bool[4] = lt sie 0
                            sig:i64[4] = add sie 4
                            sih:i64[4] = select_n sif sie sig
                            sii:i32[4] = convert_element_type[
                              new_dtype=int32
                              weak_type=False
                            ] sih
                            sij:i32[4,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(4, 1)
                            ] sii
                            sik:f64[400,4,3] = scatter-add[
                              dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                              indices_are_sorted=False
                              mode=GatherScatterMode.FILL_OR_DROP
                              unique_indices=False
                              update_consts=()
                              update_jaxpr=jaxpr
                            ] shv sij sic
                            sil:bool[4] = lt sie 0
                            sim:i64[4] = add sie 4
                            sin:i64[4] = select_n sil sie sim
                            sio:i32[4] = convert_element_type[
                              new_dtype=int32
                              weak_type=False
                            ] sin
                            sip:i32[4,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(4, 1)
                            ] sio
                            siq:f64[400,4,3] = scatter-add[
                              dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                              indices_are_sorted=False
                              mode=GatherScatterMode.FILL_OR_DROP
                              unique_indices=False
                              update_consts=()
                              update_jaxpr=jaxpr
                            ] sib sip sid
                            sir:f64[400,13,3] = concatenate[dimension=1] sgo shg
                              shv sik
                            sis:f64[400,13,3] = concatenate[dimension=1] sgv shm
                              sib siq
                            sit:f64[400,13,3] = pjit[name=_take jaxpr=_take18] sir
                              ptc
                            siu:f64[400,13,3] = pjit[name=_take jaxpr=_take18] sis
                              ptd
                            siv:f64[1,3] = broadcast_in_dim[
                              broadcast_dimensions=()
                              shape=(1, 3)
                            ] 0.0
                            siw:f64[1,3] = broadcast_in_dim[
                              broadcast_dimensions=()
                              shape=(1, 3)
                            ] 0.0
                            six:f64[400,1,3] = broadcast_in_dim[
                              broadcast_dimensions=(1, 2)
                              shape=(400, 1, 3)
                            ] siv
                            siy:f64[400,14,3] = concatenate[dimension=1] sit six
                            siz:f64[400,1,3] = broadcast_in_dim[
                              broadcast_dimensions=(1, 2)
                              shape=(400, 1, 3)
                            ] siw
                            sja:f64[400,14,3] = concatenate[dimension=1] siu siz
                            sjb:f64[400,13,3] = pjit[name=_take jaxpr=_take19] siy
                              psj
                            sjc:f64[400,13,3] = pjit[name=_take jaxpr=_take19] sja
                              psj
                            sjd:f64[400,6,3] = slice[
                              limit_indices=(400, 6, 3)
                              start_indices=(0, 0, 0)
                              strides=None
                            ] sez
                            sje:f64[400,6,3] = slice[
                              limit_indices=(400, 6, 3)
                              start_indices=(0, 0, 0)
                              strides=None
                            ] sfy
                            sjf:f64[400,6,3] = slice[
                              limit_indices=(400, 6, 3)
                              start_indices=(0, 0, 0)
                              strides=None
                            ] sga
                            sjg:f64[400,6,3] = slice[
                              limit_indices=(400, 6, 3)
                              start_indices=(0, 0, 0)
                              strides=None
                            ] sgc
                            sjh:f64[400,1,6,3] = reshape[
                              dimensions=None
                              new_sizes=(400, 1, 6, 3)
                            ] sjf
                            sji:f64[400,1,6,3] = reshape[
                              dimensions=None
                              new_sizes=(400, 1, 6, 3)
                            ] sjg
                            sjj:f64[400,1,3,3] = slice[
                              limit_indices=(400, 1, 3, 3)
                              start_indices=(0, 0, 0, 0)
                              strides=None
                            ] sjh
                            sjk:f64[400,1,3] = reduce_sum[axes=(2,)] sjj
                            sjl:f64[400,1,3,3] = slice[
                              limit_indices=(400, 1, 3, 3)
                              start_indices=(0, 0, 0, 0)
                              strides=None
                            ] sji
                            sjm:f64[400,1,3] = reduce_sum[axes=(2,)] sjl
                            sjn:f64[400,1,6,3] = reshape[
                              dimensions=None
                              new_sizes=(400, 1, 6, 3)
                            ] sjd
                            sjo:f64[400,1,6,3] = reshape[
                              dimensions=None
                              new_sizes=(400, 1, 6, 3)
                            ] sje
                            sjp:f64[400,1,6,3] = pjit[name=cross jaxpr=cross14] sjk
                              sjo
                            sjq:f64[400,1,6,3] = pjit[name=cross jaxpr=cross14] sjm
                              sjn
                            sjr:f64[400,1,6,3] = add sjp sjq
                            sjs:f64[400,1,6,3] = pjit[name=cross jaxpr=cross14] sjk
                              sjn
                            sjt:f64[3] = broadcast_in_dim[
                              broadcast_dimensions=()
                              shape=(3,)
                            ] 0.0
                            sju:i32[1] = broadcast_in_dim[
                              broadcast_dimensions=()
                              shape=(1,)
                            ] 0
                            sjv:f64[1,3,3] = broadcast_in_dim[
                              broadcast_dimensions=(2,)
                              shape=(1, 3, 3)
                            ] sjt
                            sjw:f64[400,1,3,3] = broadcast_in_dim[
                              broadcast_dimensions=(1, 2, 3)
                              shape=(400, 1, 3, 3)
                            ] sjv
                            sjx:f64[400,1,6,3] = scatter[
                              dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2, 3), inserted_window_dims=(), scatter_dims_to_operand_dims=(2,))
                              indices_are_sorted=True
                              mode=GatherScatterMode.FILL_OR_DROP
                              unique_indices=True
                              update_consts=()
                              update_jaxpr=None
                            ] sjs sju sjw
                            sjy:f64[3] = broadcast_in_dim[
                              broadcast_dimensions=()
                              shape=(3,)
                            ] 0.0
                            sjz:i32[1] = broadcast_in_dim[
                              broadcast_dimensions=()
                              shape=(1,)
                            ] 0
                            ska:f64[1,3,3] = broadcast_in_dim[
                              broadcast_dimensions=(2,)
                              shape=(1, 3, 3)
                            ] sjy
                            skb:f64[400,1,3,3] = broadcast_in_dim[
                              broadcast_dimensions=(1, 2, 3)
                              shape=(400, 1, 3, 3)
                            ] ska
                            skc:f64[400,1,6,3] = scatter[
                              dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2, 3), inserted_window_dims=(), scatter_dims_to_operand_dims=(2,))
                              indices_are_sorted=True
                              mode=GatherScatterMode.FILL_OR_DROP
                              unique_indices=True
                              update_consts=()
                              update_jaxpr=None
                            ] sjr sjz skb
                            skd:f64[400,6,3] = reshape[
                              dimensions=None
                              new_sizes=(400, 6, 3)
                            ] sjx
                            ske:f64[400,6,3] = reshape[
                              dimensions=None
                              new_sizes=(400, 6, 3)
                            ] skc
                            skf:f64[400,12,3] = slice[
                              limit_indices=(400, 13, 3)
                              start_indices=(0, 1, 0)
                              strides=None
                            ] sjb
                            skg:f64[400,12,3] = slice[
                              limit_indices=(400, 13, 3)
                              start_indices=(0, 1, 0)
                              strides=None
                            ] sjc
                            skh:f64[400,12,3] = slice[
                              limit_indices=(400, 18, 3)
                              start_indices=(0, 6, 0)
                              strides=None
                            ] sez
                            ski:f64[400,12,3] = slice[
                              limit_indices=(400, 18, 3)
                              start_indices=(0, 6, 0)
                              strides=None
                            ] sfy
                            skj:f64[400,12,3] = pjit[name=cross jaxpr=cross15] skf
                              ski
                            skk:f64[400,12,3] = pjit[name=cross jaxpr=cross15] skg
                              skh
                            skl:f64[400,12,3] = add skj skk
                            skm:f64[400,12,3] = pjit[name=cross jaxpr=cross15] skf
                              skh
                            skn:f64[400,18,3] = concatenate[dimension=1] skd skm
                            sko:f64[400,18,3] = concatenate[dimension=1] ske skl
                            skp:f64[400,4,3] = pjit[name=_take jaxpr=_take15] rop
                              pte
                            skq:f64[400,4,3,3] = pjit[name=_take jaxpr=_take22] rom
                              ptf
                            skr:f64[4] = pjit[name=_take jaxpr=_take23] psh ptg
                            sks:f64[400,4,3] = pjit[name=_take jaxpr=_take15] rop
                              pth
                            skt:f64[400,4,3,3] = pjit[name=_take jaxpr=_take22] rom
                              pti
                            sku:f64[4] = pjit[name=_take jaxpr=_take23] psh ptj
                            skv:f64[4,3] = broadcast_in_dim[
                              broadcast_dimensions=()
                              shape=(4, 3)
                            ] 0.0
                            skw:bool[4] = lt ptk 0
                            skx:i64[4] = add ptk 4
                            sky:i64[4] = select_n skw ptk skx
                            skz:i32[4] = convert_element_type[
                              new_dtype=int32
                              weak_type=False
                            ] sky
                            sla:i32[4,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(4, 1)
                            ] skz
                            slb:f64[400,4,3] = broadcast_in_dim[
                              broadcast_dimensions=(1, 2)
                              shape=(400, 4, 3)
                            ] skv
                            slc:f64[400,4,3] = scatter-add[
                              dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                              indices_are_sorted=False
                              mode=GatherScatterMode.FILL_OR_DROP
                              unique_indices=False
                              update_consts=()
                              update_jaxpr=jaxpr
                            ] slb sla skp
                            sld:f64[4,3,3] = broadcast_in_dim[
                              broadcast_dimensions=()
                              shape=(4, 3, 3)
                            ] 0.0
                            sle:bool[4] = lt ptk 0
                            slf:i64[4] = add ptk 4
                            slg:i64[4] = select_n sle ptk slf
                            slh:i32[4] = convert_element_type[
                              new_dtype=int32
                              weak_type=False
                            ] slg
                            sli:i32[4,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(4, 1)
                            ] slh
                            slj:f64[400,4,3,3] = broadcast_in_dim[
                              broadcast_dimensions=(1, 2, 3)
                              shape=(400, 4, 3, 3)
                            ] sld
                            slk:f64[400,4,3,3] = scatter-add[
                              dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2, 3), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                              indices_are_sorted=False
                              mode=GatherScatterMode.FILL_OR_DROP
                              unique_indices=False
                              update_consts=()
                              update_jaxpr=jaxpr
                            ] slj sli skq
                            sll:f64[4] = broadcast_in_dim[
                              broadcast_dimensions=()
                              shape=(4,)
                            ] 0.0
                            slm:bool[4] = lt ptk 0
                            sln:i64[4] = add ptk 4
                            slo:i64[4] = select_n slm ptk sln
                            slp:i32[4] = convert_element_type[
                              new_dtype=int32
                              weak_type=False
                            ] slo
                            slq:i32[4,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(4, 1)
                            ] slp
                            slr:f64[4] = scatter-add[
                              dimension_numbers=ScatterDimensionNumbers(update_window_dims=(), inserted_window_dims=(0,), scatter_dims_to_operand_dims=(0,))
                              indices_are_sorted=False
                              mode=GatherScatterMode.FILL_OR_DROP
                              unique_indices=False
                              update_consts=()
                              update_jaxpr=jaxpr
                            ] sll slq skr
                            sls:f64[400,4,3] = add sks slc
                            slt:f64[400,4,3,3] = add skt slk
                            slu:f64[4] = add sku slr
                            slv:f64[400,4,3] = pjit[name=_take jaxpr=_take15] rop
                              ptl
                            slw:f64[400,4,3,3] = pjit[name=_take jaxpr=_take22] rom
                              ptm
                            slx:f64[4] = pjit[name=_take jaxpr=_take23] psh ptn
                            sly:f64[4,3] = broadcast_in_dim[
                              broadcast_dimensions=()
                              shape=(4, 3)
                            ] 0.0
                            slz:bool[4] = lt pto 0
                            sma:i64[4] = add pto 4
                            smb:i64[4] = select_n slz pto sma
                            smc:i32[4] = convert_element_type[
                              new_dtype=int32
                              weak_type=False
                            ] smb
                            smd:i32[4,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(4, 1)
                            ] smc
                            sme:f64[400,4,3] = broadcast_in_dim[
                              broadcast_dimensions=(1, 2)
                              shape=(400, 4, 3)
                            ] sly
                            smf:f64[400,4,3] = scatter-add[
                              dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                              indices_are_sorted=False
                              mode=GatherScatterMode.FILL_OR_DROP
                              unique_indices=False
                              update_consts=()
                              update_jaxpr=jaxpr
                            ] sme smd sls
                            smg:f64[4,3,3] = broadcast_in_dim[
                              broadcast_dimensions=()
                              shape=(4, 3, 3)
                            ] 0.0
                            smh:bool[4] = lt pto 0
                            smi:i64[4] = add pto 4
                            smj:i64[4] = select_n smh pto smi
                            smk:i32[4] = convert_element_type[
                              new_dtype=int32
                              weak_type=False
                            ] smj
                            sml:i32[4,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(4, 1)
                            ] smk
                            smm:f64[400,4,3,3] = broadcast_in_dim[
                              broadcast_dimensions=(1, 2, 3)
                              shape=(400, 4, 3, 3)
                            ] smg
                            smn:f64[400,4,3,3] = scatter-add[
                              dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2, 3), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                              indices_are_sorted=False
                              mode=GatherScatterMode.FILL_OR_DROP
                              unique_indices=False
                              update_consts=()
                              update_jaxpr=jaxpr
                            ] smm sml slt
                            smo:f64[4] = broadcast_in_dim[
                              broadcast_dimensions=()
                              shape=(4,)
                            ] 0.0
                            smp:bool[4] = lt pto 0
                            smq:i64[4] = add pto 4
                            smr:i64[4] = select_n smp pto smq
                            sms:i32[4] = convert_element_type[
                              new_dtype=int32
                              weak_type=False
                            ] smr
                            smt:i32[4,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(4, 1)
                            ] sms
                            smu:f64[4] = scatter-add[
                              dimension_numbers=ScatterDimensionNumbers(update_window_dims=(), inserted_window_dims=(0,), scatter_dims_to_operand_dims=(0,))
                              indices_are_sorted=False
                              mode=GatherScatterMode.FILL_OR_DROP
                              unique_indices=False
                              update_consts=()
                              update_jaxpr=jaxpr
                            ] smo smt slu
                            smv:f64[400,4,3] = add slv smf
                            smw:f64[400,4,3,3] = add slw smn
                            smx:f64[4] = add slx smu
                            smy:f64[400,1,3] = slice[
                              limit_indices=(400, 1, 3)
                              start_indices=(0, 0, 0)
                              strides=None
                            ] rop
                            smz:f64[400,1,3,3] = slice[
                              limit_indices=(400, 1, 3, 3)
                              start_indices=(0, 0, 0, 0)
                              strides=None
                            ] rom
                            sna:f64[1] = slice[
                              limit_indices=(1,)
                              start_indices=(0,)
                              strides=None
                            ] psh
                            snb:f64[1,3] = broadcast_in_dim[
                              broadcast_dimensions=()
                              shape=(1, 3)
                            ] 0.0
                            snc:bool[4] = lt ptp 0
                            snd:i64[4] = add ptp 1
                            sne:i64[4] = select_n snc ptp snd
                            snf:i32[4] = convert_element_type[
                              new_dtype=int32
                              weak_type=False
                            ] sne
                            sng:i32[4,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(4, 1)
                            ] snf
                            snh:f64[400,1,3] = broadcast_in_dim[
                              broadcast_dimensions=(1, 2)
                              shape=(400, 1, 3)
                            ] snb
                            sni:f64[400,1,3] = scatter-add[
                              dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                              indices_are_sorted=False
                              mode=GatherScatterMode.FILL_OR_DROP
                              unique_indices=False
                              update_consts=()
                              update_jaxpr=jaxpr
                            ] snh sng smv
                            snj:f64[1,3,3] = broadcast_in_dim[
                              broadcast_dimensions=()
                              shape=(1, 3, 3)
                            ] 0.0
                            snk:bool[4] = lt ptp 0
                            snl:i64[4] = add ptp 1
                            snm:i64[4] = select_n snk ptp snl
                            snn:i32[4] = convert_element_type[
                              new_dtype=int32
                              weak_type=False
                            ] snm
                            sno:i32[4,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(4, 1)
                            ] snn
                            snp:f64[400,1,3,3] = broadcast_in_dim[
                              broadcast_dimensions=(1, 2, 3)
                              shape=(400, 1, 3, 3)
                            ] snj
                            snq:f64[400,1,3,3] = scatter-add[
                              dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2, 3), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                              indices_are_sorted=False
                              mode=GatherScatterMode.FILL_OR_DROP
                              unique_indices=False
                              update_consts=()
                              update_jaxpr=jaxpr
                            ] snp sno smw
                            snr:f64[1] = broadcast_in_dim[
                              broadcast_dimensions=()
                              shape=(1,)
                            ] 0.0
                            sns:bool[4] = lt ptp 0
                            snt:i64[4] = add ptp 1
                            snu:i64[4] = select_n sns ptp snt
                            snv:i32[4] = convert_element_type[
                              new_dtype=int32
                              weak_type=False
                            ] snu
                            snw:i32[4,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(4, 1)
                            ] snv
                            snx:f64[1] = scatter-add[
                              dimension_numbers=ScatterDimensionNumbers(update_window_dims=(), inserted_window_dims=(0,), scatter_dims_to_operand_dims=(0,))
                              indices_are_sorted=False
                              mode=GatherScatterMode.FILL_OR_DROP
                              unique_indices=False
                              update_consts=()
                              update_jaxpr=jaxpr
                            ] snr snw smx
                            sny:f64[400,1,3] = add smy sni
                            snz:f64[400,1,3,3] = add smz snq
                            soa:f64[1] = add sna snx
                            sob:f64[400,13,3] = concatenate[dimension=1] sny smv
                              sls skp
                            soc:f64[400,13,3,3] = concatenate[dimension=1] snz smw
                              slt skq
                            sod:f64[13] = concatenate[dimension=0] soa smx slu skr
                            soe:f64[400,13,3] = pjit[name=_take jaxpr=_take18] sob
                              ptq
                            sof:f64[400,13,3,3] = pjit[
                              name=_take
                              jaxpr={ lambda ; sog:f64[400,13,3,3] soh:i64[13]. let
                                  soi:i64[13] = pjit[
                                    name=remainder
                                    jaxpr=remainder7
                                  ] soh 13
                                  soj:i64[13,1] = broadcast_in_dim[
                                    broadcast_dimensions=(0,)
                                    shape=(13, 1)
                                  ] soi
                                  sok:f64[400,13,3,3] = gather[
                                    dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 2, 3), collapsed_slice_dims=(1,), start_index_map=(1,))
                                    fill_value=None
                                    indices_are_sorted=False
                                    mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                    slice_sizes=(400, 1, 3, 3)
                                    unique_indices=False
                                  ] sog soj
                                in (sok,) }
                            ] soc ptr
                            sol:f64[13] = pjit[
                              name=_take
                              jaxpr={ lambda ; som:f64[13] son:i64[13]. let
                                  soo:i64[13] = pjit[
                                    name=remainder
                                    jaxpr={ lambda ; jx:i64[13] jy:i64[]. let
                                        jz:bool[] = eq jy 0
                                        ka:i64[] = pjit[
                                          name=_where
                                          jaxpr=_where17
                                        ] jz 1 jy
                                        kb:i64[13] = rem jx ka
                                        kc:bool[13] = ne kb 0
                                        kd:bool[13] = lt kb 0
                                        ke:bool[] = lt ka 0
                                        kf:bool[13] = ne kd ke
                                        kg:bool[13] = and kf kc
                                        kh:i64[13] = add kb ka
                                        ki:i64[13] = select_n kg kb kh
                                      in (ki,) }
                                  ] son 13
                                  sop:i64[13,1] = broadcast_in_dim[
                                    broadcast_dimensions=(0,)
                                    shape=(13, 1)
                                  ] soo
                                  soq:f64[13] = gather[
                                    dimension_numbers=GatherDimensionNumbers(offset_dims=(), collapsed_slice_dims=(0,), start_index_map=(0,))
                                    fill_value=None
                                    indices_are_sorted=False
                                    mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                    slice_sizes=(1,)
                                    unique_indices=False
                                  ] som sop
                                in (soq,) }
                            ] sod pts
                            sor:f64[400,18,3] = pjit[
                              name=_take
                              jaxpr={ lambda ; sos:f64[400,13,3] sot:i64[18]. let
                                  sou:i64[18] = pjit[
                                    name=remainder
                                    jaxpr=remainder13
                                  ] sot 13
                                  sov:i64[18,1] = broadcast_in_dim[
                                    broadcast_dimensions=(0,)
                                    shape=(18, 1)
                                  ] sou
                                  sow:f64[400,18,3] = gather[
                                    dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 2), collapsed_slice_dims=(1,), start_index_map=(1,))
                                    fill_value=None
                                    indices_are_sorted=False
                                    mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                    slice_sizes=(400, 1, 3)
                                    unique_indices=False
                                  ] sos sov
                                in (sow,) }
                            ] soe ptt
                            sox:f64[400,18,3,3] = pjit[
                              name=_take
                              jaxpr={ lambda ; soy:f64[400,13,3,3] soz:i64[18]. let
                                  spa:i64[18] = pjit[
                                    name=remainder
                                    jaxpr=remainder13
                                  ] soz 13
                                  spb:i64[18,1] = broadcast_in_dim[
                                    broadcast_dimensions=(0,)
                                    shape=(18, 1)
                                  ] spa
                                  spc:f64[400,18,3,3] = gather[
                                    dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 2, 3), collapsed_slice_dims=(1,), start_index_map=(1,))
                                    fill_value=None
                                    indices_are_sorted=False
                                    mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                    slice_sizes=(400, 1, 3, 3)
                                    unique_indices=False
                                  ] soy spb
                                in (spc,) }
                            ] sof ptt
                            spd:f64[18] = pjit[
                              name=_take
                              jaxpr={ lambda ; spe:f64[13] spf:i64[18]. let
                                  spg:i64[18] = pjit[
                                    name=remainder
                                    jaxpr={ lambda ; bcc:i64[18] bcd:i64[]. let
                                        bce:bool[] = eq bcd 0
                                        bcf:i64[] = pjit[
                                          name=_where
                                          jaxpr=_where19
                                        ] bce 1 bcd
                                        bcg:i64[18] = rem bcc bcf
                                        bch:bool[18] = ne bcg 0
                                        bci:bool[18] = lt bcg 0
                                        bcj:bool[] = lt bcf 0
                                        bck:bool[18] = ne bci bcj
                                        bcl:bool[18] = and bck bch
                                        bcm:i64[18] = add bcg bcf
                                        bcn:i64[18] = select_n bcl bcg bcm
                                      in (bcn,) }
                                  ] spf 13
                                  sph:i64[18,1] = broadcast_in_dim[
                                    broadcast_dimensions=(0,)
                                    shape=(18, 1)
                                  ] spg
                                  spi:f64[18] = gather[
                                    dimension_numbers=GatherDimensionNumbers(offset_dims=(), collapsed_slice_dims=(0,), start_index_map=(0,))
                                    fill_value=None
                                    indices_are_sorted=False
                                    mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                    slice_sizes=(1,)
                                    unique_indices=False
                                  ] spe sph
                                in (spi,) }
                            ] sol ptt
                            spj:f64[400,18,3] = dot_general[
                              dimension_numbers=(([3], [2]), ([0, 1], [0, 1]))
                              preferred_element_type=float64
                            ] sox sez
                            spk:f64[400,18,3] = pjit[name=cross jaxpr=cross13] sor
                              sfy
                            spl:f64[400,18,3] = add spj spk
                            spm:f64[18,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(18, 1)
                            ] spd
                            spn:f64[1,18,1] = broadcast_in_dim[
                              broadcast_dimensions=(1, 2)
                              shape=(1, 18, 1)
                            ] spm
                            spo:f64[400,18,3] = mul spn sfy
                            spp:f64[400,18,3] = pjit[name=cross jaxpr=cross13] sor
                              sez
                            spq:f64[400,18,3] = sub spo spp
                            spr:f64[400,18,18] = dot_general[
                              dimension_numbers=(([2], [2]), ([0], [0]))
                              preferred_element_type=float64
                            ] sfy spq
                            sps:f64[400,18,18] = dot_general[
                              dimension_numbers=(([2], [2]), ([0], [0]))
                              preferred_element_type=float64
                            ] sez spl
                            spt:f64[400,18,18] = add spr sps
                            spu:f64[400,18,18] = transpose[
                              permutation=(0, 2, 1)
                            ] spt
                            spv:f64[18,18] = broadcast_in_dim[
                              broadcast_dimensions=()
                              shape=(18, 18)
                            ] 0.0
                            spw:bool[132] = lt ptu 0
                            spx:i64[132] = add ptu 18
                            spy:i64[132] = select_n spw ptu spx
                            spz:bool[132] = lt ptv 0
                            sqa:i64[132] = add ptv 18
                            sqb:i64[132] = select_n spz ptv sqa
                            sqc:i32[132] = convert_element_type[
                              new_dtype=int32
                              weak_type=False
                            ] spy
                            sqd:i32[132] = convert_element_type[
                              new_dtype=int32
                              weak_type=False
                            ] sqb
                            sqe:i32[132,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(132, 1)
                            ] sqc
                            sqf:i32[132,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(132, 1)
                            ] sqd
                            sqg:i32[132,2] = concatenate[dimension=1] sqe sqf
                            sqh:f64[132] = broadcast_in_dim[
                              broadcast_dimensions=()
                              shape=(132,)
                            ] 1.0
                            sqi:f64[18,18] = scatter[
                              dimension_numbers=ScatterDimensionNumbers(update_window_dims=(), inserted_window_dims=(0, 1), scatter_dims_to_operand_dims=(0, 1))
                              indices_are_sorted=False
                              mode=GatherScatterMode.FILL_OR_DROP
                              unique_indices=False
                              update_consts=()
                              update_jaxpr=None
                            ] spv sqg sqh
                            sqj:f64[1,18,18] = broadcast_in_dim[
                              broadcast_dimensions=(1, 2)
                              shape=(1, 18, 18)
                            ] sqi
                            sqk:f64[400,18,18] = mul spu sqj
                            sql:f64[400,18,18] = pjit[
                              name=tril
                              jaxpr={ lambda ; sqm:f64[400,18,18]. let
                                  sqn:i32[18,18] = iota[
                                    dimension=0
                                    dtype=int32
                                    shape=(18, 18)
                                  ] 
                                  sqo:i32[18,18] = add sqn 0
                                  sqp:i32[18,18] = iota[
                                    dimension=1
                                    dtype=int32
                                    shape=(18, 18)
                                  ] 
                                  sqq:bool[18,18] = ge sqo sqp
                                  sqr:f64[18,18] = broadcast_in_dim[
                                    broadcast_dimensions=()
                                    shape=(18, 18)
                                  ] 0.0
                                  sqs:bool[400,18,18] = broadcast_in_dim[
                                    broadcast_dimensions=(1, 2)
                                    shape=(400, 18, 18)
                                  ] sqq
                                  sqt:f64[400,18,18] = broadcast_in_dim[
                                    broadcast_dimensions=(1, 2)
                                    shape=(400, 18, 18)
                                  ] sqr
                                  squ:f64[400,18,18] = select_n sqs sqt sqm
                                in (squ,) }
                            ] sqk
                            sqv:f64[400,18,18] = pjit[
                              name=tril
                              jaxpr={ lambda ; sqw:f64[400,18,18]. let
                                  sqx:i32[18,18] = iota[
                                    dimension=0
                                    dtype=int32
                                    shape=(18, 18)
                                  ] 
                                  sqy:i32[18,18] = add sqx -1
                                  sqz:i32[18,18] = iota[
                                    dimension=1
                                    dtype=int32
                                    shape=(18, 18)
                                  ] 
                                  sra:bool[18,18] = ge sqy sqz
                                  srb:f64[18,18] = broadcast_in_dim[
                                    broadcast_dimensions=()
                                    shape=(18, 18)
                                  ] 0.0
                                  src:bool[400,18,18] = broadcast_in_dim[
                                    broadcast_dimensions=(1, 2)
                                    shape=(400, 18, 18)
                                  ] sra
                                  srd:f64[400,18,18] = broadcast_in_dim[
                                    broadcast_dimensions=(1, 2)
                                    shape=(400, 18, 18)
                                  ] srb
                                  sre:f64[400,18,18] = select_n src srd sqw
                                in (sre,) }
                            ] sqk
                            srf:f64[400,18,18] = transpose[
                              permutation=(0, 2, 1)
                            ] sqv
                            srg:f64[400,18,18] = add sql srf
                            srh:f64[18,18] = pjit[name=_diag jaxpr=_diag] ptw
                            sri:f64[1,18,18] = broadcast_in_dim[
                              broadcast_dimensions=(1, 2)
                              shape=(1, 18, 18)
                            ] srh
                            srj:f64[400,18,18] = add srg sri
                            srk:f64[18] = broadcast_in_dim[
                              broadcast_dimensions=()
                              shape=(18,)
                            ] 0.0
                            srl:f64[6] = broadcast_in_dim[
                              broadcast_dimensions=()
                              shape=(6,)
                            ] 0.0
                            srm:f64[400,12] = slice[
                              limit_indices=(400, 19)
                              start_indices=(0, 7)
                              strides=None
                            ] pzk
                            srn:f64[12] = slice[
                              limit_indices=(18,)
                              start_indices=(6,)
                              strides=None
                            ] ptx
                            sro:f64[400,12] = neg srm
                            srp:f64[1,12] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 12)
                            ] srn
                            srq:f64[400,12] = mul sro srp
                            srr:f64[400,6] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(400, 6)
                            ] srl
                            srs:f64[400,18] = concatenate[dimension=1] srr srq
                            srt:f64[1,18] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 18)
                            ] pty
                            sru:f64[400,18] = mul srt qbj
                            srv:f64[400,18] = sub srs sru
                            srw:f64[400,6,3] = slice[
                              limit_indices=(400, 6, 3)
                              start_indices=(0, 0, 0)
                              strides=None
                            ] skn
                            srx:f64[400,6,3] = slice[
                              limit_indices=(400, 6, 3)
                              start_indices=(0, 0, 0)
                              strides=None
                            ] sko
                            sry:f64[400,6] = slice[
                              limit_indices=(400, 6)
                              start_indices=(0, 0)
                              strides=None
                            ] qbj
                            srz:i64[6] = slice[
                              limit_indices=(6,)
                              start_indices=(0,)
                              strides=None
                            ] ptz
                            ssa:f64[1,1,1,3] = reshape[
                              dimensions=None
                              new_sizes=(1, 1, 1, 3)
                            ] pua
                            ssb:f64[1,3] = reshape[
                              dimensions=None
                              new_sizes=(1, 3)
                            ] ssa
                            ssc:f64[1,3] = neg ssb
                            ssd:f64[1,3] = broadcast_in_dim[
                              broadcast_dimensions=()
                              shape=(1, 3)
                            ] 0.0
                            sse:f64[400,6,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(400, 6, 1)
                            ] sry
                            ssf:f64[400,6,3] = mul srw sse
                            ssg:f64[400,6,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(400, 6, 1)
                            ] sry
                            ssh:f64[400,6,3] = mul srx ssg
                            ssi:bool[6] = lt srz 0
                            ssj:i64[6] = add srz 1
                            ssk:i64[6] = select_n ssi srz ssj
                            ssl:i32[6] = convert_element_type[
                              new_dtype=int32
                              weak_type=False
                            ] ssk
                            ssm:i32[6,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(6, 1)
                            ] ssl
                            ssn:f64[400,1,3] = broadcast_in_dim[
                              broadcast_dimensions=(1, 2)
                              shape=(400, 1, 3)
                            ] ssd
                            sso:f64[400,1,3] = scatter-add[
                              dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                              indices_are_sorted=False
                              mode=GatherScatterMode.FILL_OR_DROP
                              unique_indices=False
                              update_consts=()
                              update_jaxpr=jaxpr
                            ] ssn ssm ssf
                            ssp:bool[6] = lt srz 0
                            ssq:i64[6] = add srz 1
                            ssr:i64[6] = select_n ssp srz ssq
                            sss:i32[6] = convert_element_type[
                              new_dtype=int32
                              weak_type=False
                            ] ssr
                            sst:i32[6,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(6, 1)
                            ] sss
                            ssu:f64[400,1,3] = broadcast_in_dim[
                              broadcast_dimensions=(1, 2)
                              shape=(400, 1, 3)
                            ] ssc
                            ssv:f64[400,1,3] = scatter-add[
                              dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                              indices_are_sorted=False
                              mode=GatherScatterMode.FILL_OR_DROP
                              unique_indices=False
                              update_consts=()
                              update_jaxpr=jaxpr
                            ] ssu sst ssh
                            ssw:f64[400,4,3] = pjit[name=_take jaxpr=_take21] skn
                              pub
                            ssx:f64[400,4,3] = pjit[name=_take jaxpr=_take21] sko
                              puc
                            ssy:f64[400,4] = pjit[name=_take jaxpr=_take24] qbj pud
                            ssz:i64[4] = pjit[name=_take jaxpr=_take3] ptz pue
                            sta:f64[400,4,3] = pjit[name=_take jaxpr=_take17] sso
                              puf
                            stb:f64[400,4,3] = pjit[name=_take jaxpr=_take17] ssv
                              pug
                            stc:f64[400,4,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(400, 4, 1)
                            ] ssy
                            std:f64[400,4,3] = mul ssw stc
                            ste:f64[400,4,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(400, 4, 1)
                            ] ssy
                            stf:f64[400,4,3] = mul ssx ste
                            stg:bool[4] = lt ssz 0
                            sth:i64[4] = add ssz 4
                            sti:i64[4] = select_n stg ssz sth
                            stj:i32[4] = convert_element_type[
                              new_dtype=int32
                              weak_type=False
                            ] sti
                            stk:i32[4,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(4, 1)
                            ] stj
                            stl:f64[400,4,3] = scatter-add[
                              dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                              indices_are_sorted=False
                              mode=GatherScatterMode.FILL_OR_DROP
                              unique_indices=False
                              update_consts=()
                              update_jaxpr=jaxpr
                            ] sta stk std
                            stm:bool[4] = lt ssz 0
                            stn:i64[4] = add ssz 4
                            sto:i64[4] = select_n stm ssz stn
                            stp:i32[4] = convert_element_type[
                              new_dtype=int32
                              weak_type=False
                            ] sto
                            stq:i32[4,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(4, 1)
                            ] stp
                            str:f64[400,4,3] = scatter-add[
                              dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                              indices_are_sorted=False
                              mode=GatherScatterMode.FILL_OR_DROP
                              unique_indices=False
                              update_consts=()
                              update_jaxpr=jaxpr
                            ] stb stq stf
                            sts:f64[400,4,3] = pjit[name=_take jaxpr=_take21] skn
                              puh
                            stt:f64[400,4,3] = pjit[name=_take jaxpr=_take21] sko
                              pui
                            stu:f64[400,4] = pjit[name=_take jaxpr=_take24] qbj puj
                            stv:i64[4] = pjit[name=_take jaxpr=_take3] ptz puk
                            stw:f64[400,4,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(400, 4, 1)
                            ] stu
                            stx:f64[400,4,3] = mul sts stw
                            sty:f64[400,4,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(400, 4, 1)
                            ] stu
                            stz:f64[400,4,3] = mul stt sty
                            sua:bool[4] = lt stv 0
                            sub:i64[4] = add stv 4
                            suc:i64[4] = select_n sua stv sub
                            sud:i32[4] = convert_element_type[
                              new_dtype=int32
                              weak_type=False
                            ] suc
                            sue:i32[4,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(4, 1)
                            ] sud
                            suf:f64[400,4,3] = scatter-add[
                              dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                              indices_are_sorted=False
                              mode=GatherScatterMode.FILL_OR_DROP
                              unique_indices=False
                              update_consts=()
                              update_jaxpr=jaxpr
                            ] stl sue stx
                            sug:bool[4] = lt stv 0
                            suh:i64[4] = add stv 4
                            sui:i64[4] = select_n sug stv suh
                            suj:i32[4] = convert_element_type[
                              new_dtype=int32
                              weak_type=False
                            ] sui
                            suk:i32[4,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(4, 1)
                            ] suj
                            sul:f64[400,4,3] = scatter-add[
                              dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                              indices_are_sorted=False
                              mode=GatherScatterMode.FILL_OR_DROP
                              unique_indices=False
                              update_consts=()
                              update_jaxpr=jaxpr
                            ] str suk stz
                            sum:f64[400,4,3] = pjit[name=_take jaxpr=_take21] skn
                              pul
                            sun:f64[400,4,3] = pjit[name=_take jaxpr=_take21] sko
                              pum
                            suo:f64[400,4] = pjit[name=_take jaxpr=_take24] qbj pun
                            sup:i64[4] = pjit[name=_take jaxpr=_take3] ptz puo
                            suq:f64[400,4,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(400, 4, 1)
                            ] suo
                            sur:f64[400,4,3] = mul sum suq
                            sus:f64[400,4,1] = broadcast_in_dim[
                              broadcast_dimensions=(0, 1)
                              shape=(400, 4, 1)
                            ] suo
                            sut:f64[400,4,3] = mul sun sus
                            suu:bool[4] = lt sup 0
                            suv:i64[4] = add sup 4
                            suw:i64[4] = select_n suu sup suv
                            sux:i32[4] = convert_element_type[
                              new_dtype=int32
                              weak_type=False
                            ] suw
                            suy:i32[4,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(4, 1)
                            ] sux
                            suz:f64[400,4,3] = scatter-add[
                              dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                              indices_are_sorted=False
                              mode=GatherScatterMode.FILL_OR_DROP
                              unique_indices=False
                              update_consts=()
                              update_jaxpr=jaxpr
                            ] suf suy sur
                            sva:bool[4] = lt sup 0
                            svb:i64[4] = add sup 4
                            svc:i64[4] = select_n sva sup svb
                            svd:i32[4] = convert_element_type[
                              new_dtype=int32
                              weak_type=False
                            ] svc
                            sve:i32[4,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(4, 1)
                            ] svd
                            svf:f64[400,4,3] = scatter-add[
                              dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                              indices_are_sorted=False
                              mode=GatherScatterMode.FILL_OR_DROP
                              unique_indices=False
                              update_consts=()
                              update_jaxpr=jaxpr
                            ] sul sve sut
                            svg:f64[400,13,3] = concatenate[dimension=1] sso stl
                              suf suz
                            svh:f64[400,13,3] = concatenate[dimension=1] ssv str
                              sul svf
                            svi:f64[400,13,3] = pjit[name=_take jaxpr=_take18] svg
                              pup
                            svj:f64[400,13,3] = pjit[name=_take jaxpr=_take18] svh
                              puq
                            svk:f64[400,13,3] = dot_general[
                              dimension_numbers=(([3], [2]), ([0, 1], [0, 1]))
                              preferred_element_type=float64
                            ] rom svi
                            svl:f64[400,13,3] = pjit[name=cross jaxpr=cross16] rop
                              svj
                            svm:f64[400,13,3] = add svk svl
                            svn:f64[13,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(13, 1)
                            ] psh
                            svo:f64[1,13,1] = broadcast_in_dim[
                              broadcast_dimensions=(1, 2)
                              shape=(1, 13, 1)
                            ] svn
                            svp:f64[400,13,3] = mul svo svj
                            svq:f64[400,13,3] = pjit[name=cross jaxpr=cross16] rop
                              svi
                            svr:f64[400,13,3] = sub svp svq
                            svs:f64[400,13,3] = dot_general[
                              dimension_numbers=(([3], [2]), ([0, 1], [0, 1]))
                              preferred_element_type=float64
                            ] rom sit
                            svt:f64[400,13,3] = pjit[name=cross jaxpr=cross16] rop
                              siu
                            svu:f64[400,13,3] = add svs svt
                            svv:f64[13,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(13, 1)
                            ] psh
                            svw:f64[1,13,1] = broadcast_in_dim[
                              broadcast_dimensions=(1, 2)
                              shape=(1, 13, 1)
                            ] svv
                            svx:f64[400,13,3] = mul svw siu
                            svy:f64[400,13,3] = pjit[name=cross jaxpr=cross16] rop
                              sit
                            svz:f64[400,13,3] = sub svx svy
                            swa:f64[400,13,3] = pjit[name=cross jaxpr=cross16] sit
                              svz
                            swb:f64[400,13,3] = pjit[name=cross jaxpr=cross16] sit
                              svu
                            swc:f64[400,13,3] = pjit[name=cross jaxpr=cross16] siu
                              svz
                            swd:f64[400,13,3] = add swb swc
                            swe:f64[400,13,3] = add svm swd
                            swf:f64[400,13,3] = add svr swa
                            swg:f64[400,4,3] = pjit[name=_take jaxpr=_take15] swe
                              pur
                            swh:f64[400,4,3] = pjit[name=_take jaxpr=_take15] swf
                              pus
                            swi:f64[400,4,3] = pjit[name=_take jaxpr=_take15] swe
                              put
                            swj:f64[400,4,3] = pjit[name=_take jaxpr=_take15] swf
                              puu
                            swk:f64[4,3] = broadcast_in_dim[
                              broadcast_dimensions=()
                              shape=(4, 3)
                            ] 0.0
                            swl:bool[4] = lt puv 0
                            swm:i64[4] = add puv 4
                            swn:i64[4] = select_n swl puv swm
                            swo:i32[4] = convert_element_type[
                              new_dtype=int32
                              weak_type=False
                            ] swn
                            swp:i32[4,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(4, 1)
                            ] swo
                            swq:f64[400,4,3] = broadcast_in_dim[
                              broadcast_dimensions=(1, 2)
                              shape=(400, 4, 3)
                            ] swk
                            swr:f64[400,4,3] = scatter-add[
                              dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                              indices_are_sorted=False
                              mode=GatherScatterMode.FILL_OR_DROP
                              unique_indices=False
                              update_consts=()
                              update_jaxpr=jaxpr
                            ] swq swp swg
                            sws:f64[4,3] = broadcast_in_dim[
                              broadcast_dimensions=()
                              shape=(4, 3)
                            ] 0.0
                            swt:bool[4] = lt puv 0
                            swu:i64[4] = add puv 4
                            swv:i64[4] = select_n swt puv swu
                            sww:i32[4] = convert_element_type[
                              new_dtype=int32
                              weak_type=False
                            ] swv
                            swx:i32[4,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(4, 1)
                            ] sww
                            swy:f64[400,4,3] = broadcast_in_dim[
                              broadcast_dimensions=(1, 2)
                              shape=(400, 4, 3)
                            ] sws
                            swz:f64[400,4,3] = scatter-add[
                              dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                              indices_are_sorted=False
                              mode=GatherScatterMode.FILL_OR_DROP
                              unique_indices=False
                              update_consts=()
                              update_jaxpr=jaxpr
                            ] swy swx swh
                            sxa:f64[400,4,3] = add swi swr
                            sxb:f64[400,4,3] = add swj swz
                            sxc:f64[400,4,3] = pjit[name=_take jaxpr=_take15] swe
                              puw
                            sxd:f64[400,4,3] = pjit[name=_take jaxpr=_take15] swf
                              pux
                            sxe:f64[4,3] = broadcast_in_dim[
                              broadcast_dimensions=()
                              shape=(4, 3)
                            ] 0.0
                            sxf:bool[4] = lt puy 0
                            sxg:i64[4] = add puy 4
                            sxh:i64[4] = select_n sxf puy sxg
                            sxi:i32[4] = convert_element_type[
                              new_dtype=int32
                              weak_type=False
                            ] sxh
                            sxj:i32[4,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(4, 1)
                            ] sxi
                            sxk:f64[400,4,3] = broadcast_in_dim[
                              broadcast_dimensions=(1, 2)
                              shape=(400, 4, 3)
                            ] sxe
                            sxl:f64[400,4,3] = scatter-add[
                              dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                              indices_are_sorted=False
                              mode=GatherScatterMode.FILL_OR_DROP
                              unique_indices=False
                              update_consts=()
                              update_jaxpr=jaxpr
                            ] sxk sxj sxa
                            sxm:f64[4,3] = broadcast_in_dim[
                              broadcast_dimensions=()
                              shape=(4, 3)
                            ] 0.0
                            sxn:bool[4] = lt puy 0
                            sxo:i64[4] = add puy 4
                            sxp:i64[4] = select_n sxn puy sxo
                            sxq:i32[4] = convert_element_type[
                              new_dtype=int32
                              weak_type=False
                            ] sxp
                            sxr:i32[4,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(4, 1)
                            ] sxq
                            sxs:f64[400,4,3] = broadcast_in_dim[
                              broadcast_dimensions=(1, 2)
                              shape=(400, 4, 3)
                            ] sxm
                            sxt:f64[400,4,3] = scatter-add[
                              dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                              indices_are_sorted=False
                              mode=GatherScatterMode.FILL_OR_DROP
                              unique_indices=False
                              update_consts=()
                              update_jaxpr=jaxpr
                            ] sxs sxr sxb
                            sxu:f64[400,4,3] = add sxc sxl
                            sxv:f64[400,4,3] = add sxd sxt
                            sxw:f64[400,1,3] = slice[
                              limit_indices=(400, 1, 3)
                              start_indices=(0, 0, 0)
                              strides=None
                            ] swe
                            sxx:f64[400,1,3] = slice[
                              limit_indices=(400, 1, 3)
                              start_indices=(0, 0, 0)
                              strides=None
                            ] swf
                            sxy:f64[1,3] = broadcast_in_dim[
                              broadcast_dimensions=()
                              shape=(1, 3)
                            ] 0.0
                            sxz:bool[4] = lt puz 0
                            sya:i64[4] = add puz 1
                            syb:i64[4] = select_n sxz puz sya
                            syc:i32[4] = convert_element_type[
                              new_dtype=int32
                              weak_type=False
                            ] syb
                            syd:i32[4,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(4, 1)
                            ] syc
                            sye:f64[400,1,3] = broadcast_in_dim[
                              broadcast_dimensions=(1, 2)
                              shape=(400, 1, 3)
                            ] sxy
                            syf:f64[400,1,3] = scatter-add[
                              dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                              indices_are_sorted=False
                              mode=GatherScatterMode.FILL_OR_DROP
                              unique_indices=False
                              update_consts=()
                              update_jaxpr=jaxpr
                            ] sye syd sxu
                            syg:f64[1,3] = broadcast_in_dim[
                              broadcast_dimensions=()
                              shape=(1, 3)
                            ] 0.0
                            syh:bool[4] = lt puz 0
                            syi:i64[4] = add puz 1
                            syj:i64[4] = select_n syh puz syi
                            syk:i32[4] = convert_element_type[
                              new_dtype=int32
                              weak_type=False
                            ] syj
                            syl:i32[4,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(4, 1)
                            ] syk
                            sym:f64[400,1,3] = broadcast_in_dim[
                              broadcast_dimensions=(1, 2)
                              shape=(400, 1, 3)
                            ] syg
                            syn:f64[400,1,3] = scatter-add[
                              dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                              indices_are_sorted=False
                              mode=GatherScatterMode.FILL_OR_DROP
                              unique_indices=False
                              update_consts=()
                              update_jaxpr=jaxpr
                            ] sym syl sxv
                            syo:f64[400,1,3] = add sxw syf
                            syp:f64[400,1,3] = add sxx syn
                            syq:f64[400,13,3] = concatenate[dimension=1] syo sxu
                              sxa swg
                            syr:f64[400,13,3] = concatenate[dimension=1] syp sxv
                              sxb swh
                            sys:f64[400,13,3] = pjit[name=_take jaxpr=_take18] syq
                              pva
                            syt:f64[400,13,3] = pjit[name=_take jaxpr=_take18] syr
                              pvb
                            syu:f64[400,18,3] = pjit[name=_take jaxpr=_take20] sys
                              pvc
                            syv:f64[400,18,3] = pjit[name=_take jaxpr=_take20] syt
                              pvc
                            syw:f64[400,18] = dot_general[
                              dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
                              preferred_element_type=float64
                            ] sfy syv
                            syx:f64[400,18] = dot_general[
                              dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
                              preferred_element_type=float64
                            ] sez syu
                            syy:f64[400,18] = add syw syx
                            syz:f64[400,18] = sub srv syy
                            sza:f64[1,18] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 18)
                            ] srk
                            szb:f64[400,18] = add syz sza
                            szc:f64[400,19] szd:f64[400,18] _:f64[400,18,18] _:f64[400,18] = scan[
                              _split_transpose=False
                              jaxpr={ lambda ; sze:i64[4] szf:f64[400,36] szg:f64[36,2]
                                  szh:f64[400,9] szi:f64[4] szj:f64[] szk:f64[3]
                                  szl:f64[3] szm:f64[3] szn:f64[] szo:f64[8] szp:f64[3]
                                  szq:f64[3] szr:f64[3] szs:i64[3] szt:f64[3] szu:f64[12]
                                  szv:i32[12] szw:i32[12] szx:f64[12,2] szy:f64[12]
                                  szz:f64[12] taa:f64[12] tab:f64[12] tac:f64[12,2]
                                  tad:f64[400,18] tae:f64[18] taf:f64[400,19] tag:f64[400,18]
                                  tah:f64[400,18,18] tai:f64[400,18]. let
                                  taj:f64[400,4] = slice[
                                    limit_indices=(400, 7)
                                    start_indices=(0, 3)
                                    strides=None
                                  ] taf
                                  tak:f64[400,12] = slice[
                                    limit_indices=(400, 19)
                                    start_indices=(0, 7)
                                    strides=None
                                  ] taf
                                  tal:f64[400,3] = slice[
                                    limit_indices=(400, 3)
                                    start_indices=(0, 0)
                                    strides=None
                                  ] tag
                                  tam:f64[4] = convert_element_type[
                                    new_dtype=float64
                                    weak_type=False
                                  ] sze
                                  tan:f64[1,4] = broadcast_in_dim[
                                    broadcast_dimensions=(1,)
                                    shape=(1, 4)
                                  ] tam
                                  tao:f64[400,4] = mul taj tan
                                  tap:f64[400,1] = slice[
                                    limit_indices=(400, 1)
                                    start_indices=(0, 0)
                                    strides=None
                                  ] tao
                                  taq:f64[400] = squeeze[dimensions=(1,)] tap
                                  tar:f64[400,3] = slice[
                                    limit_indices=(400, 4)
                                    start_indices=(0, 1)
                                    strides=None
                                  ] tao
                                  tas:f64[400] = dot_general[
                                    dimension_numbers=(([1], [1]), ([0], [0]))
                                    preferred_element_type=float64
                                  ] tar tal
                                  tat:f64[400,1] = broadcast_in_dim[
                                    broadcast_dimensions=(0,)
                                    shape=(400, 1)
                                  ] tas
                                  tau:f64[400,3] = mul tat tar
                                  tav:f64[400,3] = mul 2.0 tau
                                  taw:f64[400] = mul taq taq
                                  tax:f64[400] = dot_general[
                                    dimension_numbers=(([1], [1]), ([0], [0]))
                                    preferred_element_type=float64
                                  ] tar tar
                                  tay:f64[400] = sub taw tax
                                  taz:f64[400,1] = broadcast_in_dim[
                                    broadcast_dimensions=(0,)
                                    shape=(400, 1)
                                  ] tay
                                  tba:f64[400,3] = mul taz tal
                                  tbb:f64[400,3] = add tav tba
                                  tbc:f64[400] = mul 2.0 taq
                                  tbd:f64[400,3] = pjit[name=cross jaxpr=cross9] tar
                                    tal
                                  tbe:f64[400,1] = broadcast_in_dim[
                                    broadcast_dimensions=(0,)
                                    shape=(400, 1)
                                  ] tbc
                                  tbf:f64[400,3] = mul tbe tbd
                                  tbg:f64[400,3] = add tbb tbf
                                  tbh:f64[400,3] = slice[
                                    limit_indices=(400, 6)
                                    start_indices=(0, 3)
                                    strides=None
                                  ] tag
                                  tbi:f64[400,1] = slice[
                                    limit_indices=(400, 1)
                                    start_indices=(0, 0)
                                    strides=None
                                  ] taj
                                  tbj:f64[400] = squeeze[dimensions=(1,)] tbi
                                  tbk:f64[400,3] = slice[
                                    limit_indices=(400, 4)
                                    start_indices=(0, 1)
                                    strides=None
                                  ] taj
                                  tbl:f64[400] = dot_general[
                                    dimension_numbers=(([1], [1]), ([0], [0]))
                                    preferred_element_type=float64
                                  ] tbk tbh
                                  tbm:f64[400,1] = broadcast_in_dim[
                                    broadcast_dimensions=(0,)
                                    shape=(400, 1)
                                  ] tbl
                                  tbn:f64[400,3] = mul tbm tbk
                                  tbo:f64[400,3] = mul 2.0 tbn
                                  tbp:f64[400] = mul tbj tbj
                                  tbq:f64[400] = dot_general[
                                    dimension_numbers=(([1], [1]), ([0], [0]))
                                    preferred_element_type=float64
                                  ] tbk tbk
                                  tbr:f64[400] = sub tbp tbq
                                  tbs:f64[400,1] = broadcast_in_dim[
                                    broadcast_dimensions=(0,)
                                    shape=(400, 1)
                                  ] tbr
                                  tbt:f64[400,3] = mul tbs tbh
                                  tbu:f64[400,3] = add tbo tbt
                                  tbv:f64[400] = mul 2.0 tbj
                                  tbw:f64[400,3] = pjit[name=cross jaxpr=cross9] tbk
                                    tbh
                                  tbx:f64[400,1] = broadcast_in_dim[
                                    broadcast_dimensions=(0,)
                                    shape=(400, 1)
                                  ] tbv
                                  tby:f64[400,3] = mul tbx tbw
                                  tbz:f64[400,3] = add tbu tby
                                  tca:f64[400,12] = slice[
                                    limit_indices=(400, 18)
                                    start_indices=(0, 6)
                                    strides=None
                                  ] tag
                                  tcb:f64[400,34] = concatenate[dimension=1] taj
                                    tak tbg tbz tca
                                  tcc:f64[400,1] = slice[
                                    limit_indices=(400, 35)
                                    start_indices=(0, 34)
                                    strides=None
                                  ] szf
                                  tcd:f64[400] = squeeze[dimensions=(1,)] tcc
                                  tce:f64[400,1] = slice[
                                    limit_indices=(400, 36)
                                    start_indices=(0, 35)
                                    strides=None
                                  ] szf
                                  tcf:f64[400] = squeeze[dimensions=(1,)] tce
                                  tcg:f64[400,1] = broadcast_in_dim[
                                    broadcast_dimensions=(0,)
                                    shape=(400, 1)
                                  ] tcd
                                  tch:f64[400,1] = broadcast_in_dim[
                                    broadcast_dimensions=(0,)
                                    shape=(400, 1)
                                  ] tcf
                                  tci:f64[400,2] = concatenate[dimension=1] tcg tch
                                  tcj:f64[400,36] = concatenate[dimension=1] tcb
                                    tci
                                  tck:f64[36,1] = slice[
                                    limit_indices=(36, 1)
                                    start_indices=(0, 0)
                                    strides=None
                                  ] szg
                                  tcl:f64[36] = squeeze[dimensions=(1,)] tck
                                  tcm:f64[1,36] = broadcast_in_dim[
                                    broadcast_dimensions=(1,)
                                    shape=(1, 36)
                                  ] tcl
                                  tcn:f64[400,36] = sub tcj tcm
                                  tco:f64[400,36] = mul 2.0 tcn
                                  tcp:f64[36,1] = slice[
                                    limit_indices=(36, 2)
                                    start_indices=(0, 1)
                                    strides=None
                                  ] szg
                                  tcq:f64[36] = squeeze[dimensions=(1,)] tcp
                                  tcr:f64[36,1] = slice[
                                    limit_indices=(36, 1)
                                    start_indices=(0, 0)
                                    strides=None
                                  ] szg
                                  tcs:f64[36] = squeeze[dimensions=(1,)] tcr
                                  tct:f64[36] = sub tcq tcs
                                  tcu:f64[1,36] = broadcast_in_dim[
                                    broadcast_dimensions=(1,)
                                    shape=(1, 36)
                                  ] tct
                                  tcv:f64[400,36] = div tco tcu
                                  tcw:f64[400,36] = sub tcv 1.0
                                  tcx:f64[400,36] = add tcw 1.0
                                  tcy:f64[36,1] = slice[
                                    limit_indices=(36, 2)
                                    start_indices=(0, 1)
                                    strides=None
                                  ] szg
                                  tcz:f64[36] = squeeze[dimensions=(1,)] tcy
                                  tda:f64[36,1] = slice[
                                    limit_indices=(36, 1)
                                    start_indices=(0, 0)
                                    strides=None
                                  ] szg
                                  tdb:f64[36] = squeeze[dimensions=(1,)] tda
                                  tdc:f64[36] = sub tcz tdb
                                  tdd:f64[1,36] = broadcast_in_dim[
                                    broadcast_dimensions=(1,)
                                    shape=(1, 36)
                                  ] tdc
                                  tde:f64[400,36] = mul tcx tdd
                                  tdf:f64[400,36] = div tde 2.0
                                  tdg:f64[36,1] = slice[
                                    limit_indices=(36, 1)
                                    start_indices=(0, 0)
                                    strides=None
                                  ] szg
                                  tdh:f64[36] = squeeze[dimensions=(1,)] tdg
                                  tdi:f64[1,36] = broadcast_in_dim[
                                    broadcast_dimensions=(1,)
                                    shape=(1, 36)
                                  ] tdh
                                  tdj:f64[400,36] = add tdf tdi
                                  tdk:f64[400,1] = slice[
                                    limit_indices=(400, 9)
                                    start_indices=(0, 8)
                                    strides=None
                                  ] szh
                                  tdl:f64[400] = squeeze[dimensions=(1,)] tdk
                                  tdm:f64[] = mul szj 1.0
                                  tdn:f64[400,1] = slice[
                                    limit_indices=(400, 35)
                                    start_indices=(0, 34)
                                    strides=None
                                  ] tdj
                                  tdo:f64[400] = squeeze[dimensions=(1,)] tdn
                                  tdp:f64[400,1] = slice[
                                    limit_indices=(400, 36)
                                    start_indices=(0, 35)
                                    strides=None
                                  ] tdj
                                  tdq:f64[400] = squeeze[dimensions=(1,)] tdp
                                  tdr:f64[400] = atan2 tdq tdo
                                  tds:f64[1] = slice[
                                    limit_indices=(1,)
                                    start_indices=(0,)
                                    strides=None
                                  ] szi
                                  tdt:f64[] = squeeze[dimensions=(0,)] tds
                                  tdu:f64[400] = div tdr 6.283185307179586
                                  tdv:f64[400] = add tdu 0.5
                                  tdw:f64[400] = add tdv tdt
                                  tdx:f64[400] = pjit[
                                    name=remainder
                                    jaxpr=remainder14
                                  ] tdw 1
                                  tdy:bool[400] = lt tdx 0.5
                                  tdz:bool[400] = broadcast_in_dim[
                                    broadcast_dimensions=()
                                    shape=(400,)
                                  ] False
                                  tea:bool[400] = broadcast_in_dim[
                                    broadcast_dimensions=()
                                    shape=(400,)
                                  ] True
                                  teb:bool[400] = select_n tdy tdz tea
                                  tec:f64[400] = div tdx 0.5
                                  ted:f64[400] = sub tdx 0.5
                                  tee:f64[400] = div ted 0.5
                                  tef:f64[400] = select_n teb tee tec
                                  teg:f64[1] = slice[
                                    limit_indices=(2,)
                                    start_indices=(1,)
                                    strides=None
                                  ] szi
                                  teh:f64[] = squeeze[dimensions=(0,)] teg
                                  tei:f64[400] = div tdr 6.283185307179586
                                  tej:f64[400] = add tei 0.5
                                  tek:f64[400] = add tej teh
                                  tel:f64[400] = pjit[
                                    name=remainder
                                    jaxpr=remainder14
                                  ] tek 1
                                  tem:bool[400] = lt tel 0.5
                                  ten:bool[400] = broadcast_in_dim[
                                    broadcast_dimensions=()
                                    shape=(400,)
                                  ] False
                                  teo:bool[400] = broadcast_in_dim[
                                    broadcast_dimensions=()
                                    shape=(400,)
                                  ] True
                                  tep:bool[400] = select_n tem ten teo
                                  teq:f64[400] = div tel 0.5
                                  ter:f64[400] = sub tel 0.5
                                  tes:f64[400] = div ter 0.5
                                  tet:f64[400] = select_n tep tes teq
                                  teu:f64[1] = slice[
                                    limit_indices=(3,)
                                    start_indices=(2,)
                                    strides=None
                                  ] szi
                                  tev:f64[] = squeeze[dimensions=(0,)] teu
                                  tew:f64[400] = div tdr 6.283185307179586
                                  tex:f64[400] = add tew 0.5
                                  tey:f64[400] = add tex tev
                                  tez:f64[400] = pjit[
                                    name=remainder
                                    jaxpr=remainder14
                                  ] tey 1
                                  tfa:bool[400] = lt tez 0.5
                                  tfb:bool[400] = broadcast_in_dim[
                                    broadcast_dimensions=()
                                    shape=(400,)
                                  ] False
                                  tfc:bool[400] = broadcast_in_dim[
                                    broadcast_dimensions=()
                                    shape=(400,)
                                  ] True
                                  tfd:bool[400] = select_n tfa tfb tfc
                                  tfe:f64[400] = div tez 0.5
                                  tff:f64[400] = sub tez 0.5
                                  tfg:f64[400] = div tff 0.5
                                  tfh:f64[400] = select_n tfd tfg tfe
                                  tfi:f64[1] = slice[
                                    limit_indices=(4,)
                                    start_indices=(3,)
                                    strides=None
                                  ] szi
                                  tfj:f64[] = squeeze[dimensions=(0,)] tfi
                                  tfk:f64[400] = div tdr 6.283185307179586
                                  tfl:f64[400] = add tfk 0.5
                                  tfm:f64[400] = add tfl tfj
                                  tfn:f64[400] = pjit[
                                    name=remainder
                                    jaxpr=remainder14
                                  ] tfm 1
                                  tfo:bool[400] = lt tfn 0.5
                                  tfp:bool[400] = broadcast_in_dim[
                                    broadcast_dimensions=()
                                    shape=(400,)
                                  ] False
                                  tfq:bool[400] = broadcast_in_dim[
                                    broadcast_dimensions=()
                                    shape=(400,)
                                  ] True
                                  tfr:bool[400] = select_n tfo tfp tfq
                                  tfs:f64[400] = div tfn 0.5
                                  tft:f64[400] = sub tfn 0.5
                                  tfu:f64[400] = div tft 0.5
                                  tfv:f64[400] = select_n tfr tfu tfs
                                  tfw:f64[8] = broadcast_in_dim[
                                    broadcast_dimensions=()
                                    shape=(8,)
                                  ] 0.0
                                  tfx:f64[1] = slice[
                                    limit_indices=(1,)
                                    start_indices=(0,)
                                    strides=None
                                  ] szk
                                  tfy:f64[] = squeeze[dimensions=(0,)] tfx
                                  tfz:f64[1] = slice[
                                    limit_indices=(1,)
                                    start_indices=(0,)
                                    strides=None
                                  ] szl
                                  tga:f64[] = squeeze[dimensions=(0,)] tfz
                                  tgb:f64[] = select_n True tga tfy
                                  tgc:f64[1] = slice[
                                    limit_indices=(2,)
                                    start_indices=(1,)
                                    strides=None
                                  ] szk
                                  tgd:f64[] = squeeze[dimensions=(0,)] tgc
                                  tge:f64[1] = slice[
                                    limit_indices=(2,)
                                    start_indices=(1,)
                                    strides=None
                                  ] szm
                                  tgf:f64[] = squeeze[dimensions=(0,)] tge
                                  tgg:f64[] = select_n True tgf tgd
                                  tgh:f64[] = mul 0.0 0.25
                                  tgi:f64[] = atan2 tgg tgb
                                  tgj:f64[] = add tgi tgh
                                  tgk:f64[] = cos tgj
                                  tgl:f64[] = convert_element_type[
                                    new_dtype=float64
                                    weak_type=False
                                  ] szn
                                  tgm:f64[] = mul tgl tgk
                                  tgn:f64[] = sub tgm tgb
                                  tgo:f64[] = atan2 tgg tgb
                                  tgp:f64[] = add tgo tgh
                                  tgq:f64[] = sin tgp
                                  tgr:f64[] = convert_element_type[
                                    new_dtype=float64
                                    weak_type=False
                                  ] szn
                                  tgs:f64[] = mul tgr tgq
                                  tgt:f64[] = sub tgs tgg
                                  tgu:f64[2] = slice[
                                    limit_indices=(2,)
                                    start_indices=(0,)
                                    strides=None
                                  ] tfw
                                  tgv:f64[1] = slice[
                                    limit_indices=(1,)
                                    start_indices=(0,)
                                    strides=None
                                  ] tgu
                                  tgw:f64[] = squeeze[dimensions=(0,)] tgv
                                  tgx:f64[2] = slice[
                                    limit_indices=(2,)
                                    start_indices=(0,)
                                    strides=None
                                  ] tfw
                                  tgy:f64[1] = slice[
                                    limit_indices=(2,)
                                    start_indices=(1,)
                                    strides=None
                                  ] tgx
                                  tgz:f64[] = squeeze[dimensions=(0,)] tgy
                                  tha:f64[] = mul tdm 0.25
                                  thb:f64[] = add tha tgn
                                  thc:f64[] = add thb tgw
                                  thd:f64[] = add tgt tgz
                                  the:f64[1] = broadcast_in_dim[
                                    broadcast_dimensions=()
                                    shape=(1,)
                                  ] thc
                                  thf:f64[1] = broadcast_in_dim[
                                    broadcast_dimensions=()
                                    shape=(1,)
                                  ] thd
                                  thg:f64[1] = broadcast_in_dim[
                                    broadcast_dimensions=()
                                    shape=(1,)
                                  ] 0.0
                                  thh:f64[3] = concatenate[dimension=0] the thf thg
                                  thi:f64[3] = neg thh
                                  thj:f64[8] = broadcast_in_dim[
                                    broadcast_dimensions=()
                                    shape=(8,)
                                  ] 0.0
                                  thk:f64[1] = slice[
                                    limit_indices=(1,)
                                    start_indices=(0,)
                                    strides=None
                                  ] szk
                                  thl:f64[] = squeeze[dimensions=(0,)] thk
                                  thm:f64[1] = slice[
                                    limit_indices=(1,)
                                    start_indices=(0,)
                                    strides=None
                                  ] szl
                                  thn:f64[] = squeeze[dimensions=(0,)] thm
                                  tho:f64[] = select_n True thn thl
                                  thp:f64[1] = slice[
                                    limit_indices=(2,)
                                    start_indices=(1,)
                                    strides=None
                                  ] szk
                                  thq:f64[] = squeeze[dimensions=(0,)] thp
                                  thr:f64[1] = slice[
                                    limit_indices=(2,)
                                    start_indices=(1,)
                                    strides=None
                                  ] szm
                                  ths:f64[] = squeeze[dimensions=(0,)] thr
                                  tht:f64[] = select_n False ths thq
                                  thu:f64[] = mul 0.0 0.25
                                  thv:f64[] = atan2 tht tho
                                  thw:f64[] = add thv thu
                                  thx:f64[] = cos thw
                                  thy:f64[] = convert_element_type[
                                    new_dtype=float64
                                    weak_type=False
                                  ] szn
                                  thz:f64[] = mul thy thx
                                  tia:f64[] = sub thz tho
                                  tib:f64[] = atan2 tht tho
                                  tic:f64[] = add tib thu
                                  tid:f64[] = sin tic
                                  tie:f64[] = convert_element_type[
                                    new_dtype=float64
                                    weak_type=False
                                  ] szn
                                  tif:f64[] = mul tie tid
                                  tig:f64[] = sub tif tht
                                  tih:f64[2] = slice[
                                    limit_indices=(4,)
                                    start_indices=(2,)
                                    strides=None
                                  ] thj
                                  tii:f64[1] = slice[
                                    limit_indices=(1,)
                                    start_indices=(0,)
                                    strides=None
                                  ] tih
                                  tij:f64[] = squeeze[dimensions=(0,)] tii
                                  tik:f64[2] = slice[
                                    limit_indices=(4,)
                                    start_indices=(2,)
                                    strides=None
                                  ] thj
                                  til:f64[1] = slice[
                                    limit_indices=(2,)
                                    start_indices=(1,)
                                    strides=None
                                  ] tik
                                  tim:f64[] = squeeze[dimensions=(0,)] til
                                  tin:f64[] = mul tdm 0.25
                                  tio:f64[] = add tin tia
                                  tip:f64[] = add tio tij
                                  tiq:f64[] = add tig tim
                                  tir:f64[1] = broadcast_in_dim[
                                    broadcast_dimensions=()
                                    shape=(1,)
                                  ] tip
                                  tis:f64[1] = broadcast_in_dim[
                                    broadcast_dimensions=()
                                    shape=(1,)
                                  ] tiq
                                  tit:f64[1] = broadcast_in_dim[
                                    broadcast_dimensions=()
                                    shape=(1,)
                                  ] 0.0
                                  tiu:f64[3] = concatenate[dimension=0] tir tis tit
                                  tiv:f64[3] = neg tiu
                                  tiw:f64[8] = broadcast_in_dim[
                                    broadcast_dimensions=()
                                    shape=(8,)
                                  ] 0.0
                                  tix:f64[1] = slice[
                                    limit_indices=(1,)
                                    start_indices=(0,)
                                    strides=None
                                  ] szk
                                  tiy:f64[] = squeeze[dimensions=(0,)] tix
                                  tiz:f64[1] = slice[
                                    limit_indices=(1,)
                                    start_indices=(0,)
                                    strides=None
                                  ] szl
                                  tja:f64[] = squeeze[dimensions=(0,)] tiz
                                  tjb:f64[] = select_n False tja tiy
                                  tjc:f64[1] = slice[
                                    limit_indices=(2,)
                                    start_indices=(1,)
                                    strides=None
                                  ] szk
                                  tjd:f64[] = squeeze[dimensions=(0,)] tjc
                                  tje:f64[1] = slice[
                                    limit_indices=(2,)
                                    start_indices=(1,)
                                    strides=None
                                  ] szm
                                  tjf:f64[] = squeeze[dimensions=(0,)] tje
                                  tjg:f64[] = select_n True tjf tjd
                                  tjh:f64[] = mul 0.0 0.25
                                  tji:f64[] = atan2 tjg tjb
                                  tjj:f64[] = add tji tjh
                                  tjk:f64[] = cos tjj
                                  tjl:f64[] = convert_element_type[
                                    new_dtype=float64
                                    weak_type=False
                                  ] szn
                                  tjm:f64[] = mul tjl tjk
                                  tjn:f64[] = sub tjm tjb
                                  tjo:f64[] = atan2 tjg tjb
                                  tjp:f64[] = add tjo tjh
                                  tjq:f64[] = sin tjp
                                  tjr:f64[] = convert_element_type[
                                    new_dtype=float64
                                    weak_type=False
                                  ] szn
                                  tjs:f64[] = mul tjr tjq
                                  tjt:f64[] = sub tjs tjg
                                  tju:f64[2] = slice[
                                    limit_indices=(6,)
                                    start_indices=(4,)
                                    strides=None
                                  ] tiw
                                  tjv:f64[1] = slice[
                                    limit_indices=(1,)
                                    start_indices=(0,)
                                    strides=None
                                  ] tju
                                  tjw:f64[] = squeeze[dimensions=(0,)] tjv
                                  tjx:f64[2] = slice[
                                    limit_indices=(6,)
                                    start_indices=(4,)
                                    strides=None
                                  ] tiw
                                  tjy:f64[1] = slice[
                                    limit_indices=(2,)
                                    start_indices=(1,)
                                    strides=None
                                  ] tjx
                                  tjz:f64[] = squeeze[dimensions=(0,)] tjy
                                  tka:f64[] = mul tdm 0.25
                                  tkb:f64[] = add tka tjn
                                  tkc:f64[] = add tkb tjw
                                  tkd:f64[] = add tjt tjz
                                  tke:f64[1] = broadcast_in_dim[
                                    broadcast_dimensions=()
                                    shape=(1,)
                                  ] tkc
                                  tkf:f64[1] = broadcast_in_dim[
                                    broadcast_dimensions=()
                                    shape=(1,)
                                  ] tkd
                                  tkg:f64[1] = broadcast_in_dim[
                                    broadcast_dimensions=()
                                    shape=(1,)
                                  ] 0.0
                                  tkh:f64[3] = concatenate[dimension=0] tke tkf tkg
                                  tki:f64[3] = neg tkh
                                  tkj:f64[8] = broadcast_in_dim[
                                    broadcast_dimensions=()
                                    shape=(8,)
                                  ] 0.0
                                  tkk:f64[1] = slice[
                                    limit_indices=(1,)
                                    start_indices=(0,)
                                    strides=None
                                  ] szk
                                  tkl:f64[] = squeeze[dimensions=(0,)] tkk
                                  tkm:f64[1] = slice[
                                    limit_indices=(1,)
                                    start_indices=(0,)
                                    strides=None
                                  ] szl
                                  tkn:f64[] = squeeze[dimensions=(0,)] tkm
                                  tko:f64[] = select_n False tkn tkl
                                  tkp:f64[1] = slice[
                                    limit_indices=(2,)
                                    start_indices=(1,)
                                    strides=None
                                  ] szk
                                  tkq:f64[] = squeeze[dimensions=(0,)] tkp
                                  tkr:f64[1] = slice[
                                    limit_indices=(2,)
                                    start_indices=(1,)
                                    strides=None
                                  ] szm
                                  tks:f64[] = squeeze[dimensions=(0,)] tkr
                                  tkt:f64[] = select_n False tks tkq
                                  tku:f64[] = mul 0.0 0.25
                                  tkv:f64[] = atan2 tkt tko
                                  tkw:f64[] = add tkv tku
                                  tkx:f64[] = cos tkw
                                  tky:f64[] = convert_element_type[
                                    new_dtype=float64
                                    weak_type=False
                                  ] szn
                                  tkz:f64[] = mul tky tkx
                                  tla:f64[] = sub tkz tko
                                  tlb:f64[] = atan2 tkt tko
                                  tlc:f64[] = add tlb tku
                                  tld:f64[] = sin tlc
                                  tle:f64[] = convert_element_type[
                                    new_dtype=float64
                                    weak_type=False
                                  ] szn
                                  tlf:f64[] = mul tle tld
                                  tlg:f64[] = sub tlf tkt
                                  tlh:f64[2] = slice[
                                    limit_indices=(8,)
                                    start_indices=(6,)
                                    strides=None
                                  ] tkj
                                  tli:f64[1] = slice[
                                    limit_indices=(1,)
                                    start_indices=(0,)
                                    strides=None
                                  ] tlh
                                  tlj:f64[] = squeeze[dimensions=(0,)] tli
                                  tlk:f64[2] = slice[
                                    limit_indices=(8,)
                                    start_indices=(6,)
                                    strides=None
                                  ] tkj
                                  tll:f64[1] = slice[
                                    limit_indices=(2,)
                                    start_indices=(1,)
                                    strides=None
                                  ] tlk
                                  tlm:f64[] = squeeze[dimensions=(0,)] tll
                                  tln:f64[] = mul tdm 0.25
                                  tlo:f64[] = add tln tla
                                  tlp:f64[] = add tlo tlj
                                  tlq:f64[] = add tlg tlm
                                  tlr:f64[1] = broadcast_in_dim[
                                    broadcast_dimensions=()
                                    shape=(1,)
                                  ] tlp
                                  tls:f64[1] = broadcast_in_dim[
                                    broadcast_dimensions=()
                                    shape=(1,)
                                  ] tlq
                                  tlt:f64[1] = broadcast_in_dim[
                                    broadcast_dimensions=()
                                    shape=(1,)
                                  ] 0.0
                                  tlu:f64[3] = concatenate[dimension=0] tlr tls tlt
                                  tlv:f64[3] = neg tlu
                                  tlw:f64[1] = slice[
                                    limit_indices=(1,)
                                    start_indices=(0,)
                                    strides=None
                                  ] szk
                                  tlx:f64[] = squeeze[dimensions=(0,)] tlw
                                  tly:f64[1] = slice[
                                    limit_indices=(1,)
                                    start_indices=(0,)
                                    strides=None
                                  ] szl
                                  tlz:f64[] = squeeze[dimensions=(0,)] tly
                                  tma:f64[] = select_n True tlz tlx
                                  tmb:f64[1] = slice[
                                    limit_indices=(2,)
                                    start_indices=(1,)
                                    strides=None
                                  ] szk
                                  tmc:f64[] = squeeze[dimensions=(0,)] tmb
                                  tmd:f64[1] = slice[
                                    limit_indices=(2,)
                                    start_indices=(1,)
                                    strides=None
                                  ] szm
                                  tme:f64[] = squeeze[dimensions=(0,)] tmd
                                  tmf:f64[] = select_n True tme tmc
                                  tmg:f64[] = mul 0.0 0.25
                                  tmh:f64[] = atan2 tmf tma
                                  tmi:f64[] = add tmh tmg
                                  tmj:f64[] = cos tmi
                                  tmk:f64[] = convert_element_type[
                                    new_dtype=float64
                                    weak_type=False
                                  ] szn
                                  tml:f64[] = mul tmk tmj
                                  tmm:f64[] = sub tml tma
                                  tmn:f64[] = atan2 tmf tma
                                  tmo:f64[] = add tmn tmg
                                  tmp:f64[] = sin tmo
                                  tmq:f64[] = convert_element_type[
                                    new_dtype=float64
                                    weak_type=False
                                  ] szn
                                  tmr:f64[] = mul tmq tmp
                                  tms:f64[] = sub tmr tmf
                                  tmt:f64[2] = slice[
                                    limit_indices=(2,)
                                    start_indices=(0,)
                                    strides=None
                                  ] szo
                                  tmu:f64[1] = slice[
                                    limit_indices=(1,)
                                    start_indices=(0,)
                                    strides=None
                                  ] tmt
                                  tmv:f64[] = squeeze[dimensions=(0,)] tmu
                                  tmw:f64[2] = slice[
                                    limit_indices=(2,)
                                    start_indices=(0,)
                                    strides=None
                                  ] szo
                                  tmx:f64[1] = slice[
                                    limit_indices=(2,)
                                    start_indices=(1,)
                                    strides=None
                                  ] tmw
                                  tmy:f64[] = squeeze[dimensions=(0,)] tmx
                                  tmz:f64[] = mul tdm 0.25
                                  tna:f64[] = add tmz tmm
                                  tnb:f64[] = add tna tmv
                                  tnc:f64[] = add tms tmy
                                  tnd:f64[1] = broadcast_in_dim[
                                    broadcast_dimensions=()
                                    shape=(1,)
                                  ] tnb
                                  tne:f64[1] = broadcast_in_dim[
                                    broadcast_dimensions=()
                                    shape=(1,)
                                  ] tnc
                                  tnf:f64[1] = broadcast_in_dim[
                                    broadcast_dimensions=()
                                    shape=(1,)
                                  ] 0.0
                                  tng:f64[3] = concatenate[dimension=0] tnd tne tnf
                                  tnh:f64[1] = slice[
                                    limit_indices=(1,)
                                    start_indices=(0,)
                                    strides=None
                                  ] szk
                                  tni:f64[] = squeeze[dimensions=(0,)] tnh
                                  tnj:f64[1] = slice[
                                    limit_indices=(1,)
                                    start_indices=(0,)
                                    strides=None
                                  ] szl
                                  tnk:f64[] = squeeze[dimensions=(0,)] tnj
                                  tnl:f64[] = select_n True tnk tni
                                  tnm:f64[1] = slice[
                                    limit_indices=(2,)
                                    start_indices=(1,)
                                    strides=None
                                  ] szk
                                  tnn:f64[] = squeeze[dimensions=(0,)] tnm
                                  tno:f64[1] = slice[
                                    limit_indices=(2,)
                                    start_indices=(1,)
                                    strides=None
                                  ] szm
                                  tnp:f64[] = squeeze[dimensions=(0,)] tno
                                  tnq:f64[] = select_n False tnp tnn
                                  tnr:f64[] = mul 0.0 0.25
                                  tns:f64[] = atan2 tnq tnl
                                  tnt:f64[] = add tns tnr
                                  tnu:f64[] = cos tnt
                                  tnv:f64[] = convert_element_type[
                                    new_dtype=float64
                                    weak_type=False
                                  ] szn
                                  tnw:f64[] = mul tnv tnu
                                  tnx:f64[] = sub tnw tnl
                                  tny:f64[] = atan2 tnq tnl
                                  tnz:f64[] = add tny tnr
                                  toa:f64[] = sin tnz
                                  tob:f64[] = convert_element_type[
                                    new_dtype=float64
                                    weak_type=False
                                  ] szn
                                  toc:f64[] = mul tob toa
                                  tod:f64[] = sub toc tnq
                                  toe:f64[2] = slice[
                                    limit_indices=(4,)
                                    start_indices=(2,)
                                    strides=None
                                  ] szo
                                  tof:f64[1] = slice[
                                    limit_indices=(1,)
                                    start_indices=(0,)
                                    strides=None
                                  ] toe
                                  tog:f64[] = squeeze[dimensions=(0,)] tof
                                  toh:f64[2] = slice[
                                    limit_indices=(4,)
                                    start_indices=(2,)
                                    strides=None
                                  ] szo
                                  toi:f64[1] = slice[
                                    limit_indices=(2,)
                                    start_indices=(1,)
                                    strides=None
                                  ] toh
                                  toj:f64[] = squeeze[dimensions=(0,)] toi
                                  tok:f64[] = mul tdm 0.25
                                  tol:f64[] = add tok tnx
                                  tom:f64[] = add tol tog
                                  ton:f64[] = add tod toj
                                  too:f64[1] = broadcast_in_dim[
                                    broadcast_dimensions=()
                                    shape=(1,)
                                  ] tom
                                  top:f64[1] = broadcast_in_dim[
                                    broadcast_dimensions=()
                                    shape=(1,)
                                  ] ton
                                  toq:f64[1] = broadcast_in_dim[
                                    broadcast_dimensions=()
                                    shape=(1,)
                                  ] 0.0
                                  tor:f64[3] = concatenate[dimension=0] too top toq
                                  tos:f64[1] = slice[
                                    limit_indices=(1,)
                                    start_indices=(0,)
                                    strides=None
                                  ] szk
                                  tot:f64[] = squeeze[dimensions=(0,)] tos
                                  tou:f64[1] = slice[
                                    limit_indices=(1,)
                                    start_indices=(0,)
                                    strides=None
                                  ] szl
                                  tov:f64[] = squeeze[dimensions=(0,)] tou
                                  tow:f64[] = select_n False tov tot
                                  tox:f64[1] = slice[
                                    limit_indices=(2,)
                                    start_indices=(1,)
                                    strides=None
                                  ] szk
                                  toy:f64[] = squeeze[dimensions=(0,)] tox
                                  toz:f64[1] = slice[
                                    limit_indices=(2,)
                                    start_indices=(1,)
                                    strides=None
                                  ] szm
                                  tpa:f64[] = squeeze[dimensions=(0,)] toz
                                  tpb:f64[] = select_n True tpa toy
                                  tpc:f64[] = mul 0.0 0.25
                                  tpd:f64[] = atan2 tpb tow
                                  tpe:f64[] = add tpd tpc
                                  tpf:f64[] = cos tpe
                                  tpg:f64[] = convert_element_type[
                                    new_dtype=float64
                                    weak_type=False
                                  ] szn
                                  tph:f64[] = mul tpg tpf
                                  tpi:f64[] = sub tph tow
                                  tpj:f64[] = atan2 tpb tow
                                  tpk:f64[] = add tpj tpc
                                  tpl:f64[] = sin tpk
                                  tpm:f64[] = convert_element_type[
                                    new_dtype=float64
                                    weak_type=False
                                  ] szn
                                  tpn:f64[] = mul tpm tpl
                                  tpo:f64[] = sub tpn tpb
                                  tpp:f64[2] = slice[
                                    limit_indices=(6,)
                                    start_indices=(4,)
                                    strides=None
                                  ] szo
                                  tpq:f64[1] = slice[
                                    limit_indices=(1,)
                                    start_indices=(0,)
                                    strides=None
                                  ] tpp
                                  tpr:f64[] = squeeze[dimensions=(0,)] tpq
                                  tps:f64[2] = slice[
                                    limit_indices=(6,)
                                    start_indices=(4,)
                                    strides=None
                                  ] szo
                                  tpt:f64[1] = slice[
                                    limit_indices=(2,)
                                    start_indices=(1,)
                                    strides=None
                                  ] tps
                                  tpu:f64[] = squeeze[dimensions=(0,)] tpt
                                  tpv:f64[] = mul tdm 0.25
                                  tpw:f64[] = add tpv tpi
                                  tpx:f64[] = add tpw tpr
                                  tpy:f64[] = add tpo tpu
                                  tpz:f64[1] = broadcast_in_dim[
                                    broadcast_dimensions=()
                                    shape=(1,)
                                  ] tpx
                                  tqa:f64[1] = broadcast_in_dim[
                                    broadcast_dimensions=()
                                    shape=(1,)
                                  ] tpy
                                  tqb:f64[1] = broadcast_in_dim[
                                    broadcast_dimensions=()
                                    shape=(1,)
                                  ] 0.0
                                  tqc:f64[3] = concatenate[dimension=0] tpz tqa tqb
                                  tqd:f64[1] = slice[
                                    limit_indices=(1,)
                                    start_indices=(0,)
                                    strides=None
                                  ] szk
                                  tqe:f64[] = squeeze[dimensions=(0,)] tqd
                                  tqf:f64[1] = slice[
                                    limit_indices=(1,)
                                    start_indices=(0,)
                                    strides=None
                                  ] szl
                                  tqg:f64[] = squeeze[dimensions=(0,)] tqf
                                  tqh:f64[] = select_n False tqg tqe
                                  tqi:f64[1] = slice[
                                    limit_indices=(2,)
                                    start_indices=(1,)
                                    strides=None
                                  ] szk
                                  tqj:f64[] = squeeze[dimensions=(0,)] tqi
                                  tqk:f64[1] = slice[
                                    limit_indices=(2,)
                                    start_indices=(1,)
                                    strides=None
                                  ] szm
                                  tql:f64[] = squeeze[dimensions=(0,)] tqk
                                  tqm:f64[] = select_n False tql tqj
                                  tqn:f64[] = mul 0.0 0.25
                                  tqo:f64[] = atan2 tqm tqh
                                  tqp:f64[] = add tqo tqn
                                  tqq:f64[] = cos tqp
                                  tqr:f64[] = convert_element_type[
                                    new_dtype=float64
                                    weak_type=False
                                  ] szn
                                  tqs:f64[] = mul tqr tqq
                                  tqt:f64[] = sub tqs tqh
                                  tqu:f64[] = atan2 tqm tqh
                                  tqv:f64[] = add tqu tqn
                                  tqw:f64[] = sin tqv
                                  tqx:f64[] = convert_element_type[
                                    new_dtype=float64
                                    weak_type=False
                                  ] szn
                                  tqy:f64[] = mul tqx tqw
                                  tqz:f64[] = sub tqy tqm
                                  tra:f64[2] = slice[
                                    limit_indices=(8,)
                                    start_indices=(6,)
                                    strides=None
                                  ] szo
                                  trb:f64[1] = slice[
                                    limit_indices=(1,)
                                    start_indices=(0,)
                                    strides=None
                                  ] tra
                                  trc:f64[] = squeeze[dimensions=(0,)] trb
                                  trd:f64[2] = slice[
                                    limit_indices=(8,)
                                    start_indices=(6,)
                                    strides=None
                                  ] szo
                                  tre:f64[1] = slice[
                                    limit_indices=(2,)
                                    start_indices=(1,)
                                    strides=None
                                  ] trd
                                  trf:f64[] = squeeze[dimensions=(0,)] tre
                                  trg:f64[] = mul tdm 0.25
                                  trh:f64[] = add trg tqt
                                  tri:f64[] = add trh trc
                                  trj:f64[] = add tqz trf
                                  trk:f64[1] = broadcast_in_dim[
                                    broadcast_dimensions=()
                                    shape=(1,)
                                  ] tri
                                  trl:f64[1] = broadcast_in_dim[
                                    broadcast_dimensions=()
                                    shape=(1,)
                                  ] trj
                                  trm:f64[1] = broadcast_in_dim[
                                    broadcast_dimensions=()
                                    shape=(1,)
                                  ] 0.0
                                  trn:f64[3] = concatenate[dimension=0] trk trl trm
                                  tro:f64[1] = slice[
                                    limit_indices=(1,)
                                    start_indices=(0,)
                                    strides=None
                                  ] thi
                                  trp:f64[] = squeeze[dimensions=(0,)] tro
                                  trq:f64[1] = slice[
                                    limit_indices=(1,)
                                    start_indices=(0,)
                                    strides=None
                                  ] tng
                                  trr:f64[] = squeeze[dimensions=(0,)] trq
                                  trs:f64[] = sub trr trp
                                  trt:f64[] = div trs 6.283185307179586
                                  tru:f64[400] = mul 6.283185307179586 tef
                                  trv:f64[400] = mul 6.283185307179586 tef
                                  trw:f64[400] = sin trv
                                  trx:f64[400] = sub tru trw
                                  try:f64[400] = mul trt trx
                                  trz:f64[400] = add try trp
                                  tsa:f64[1] = slice[
                                    limit_indices=(2,)
                                    start_indices=(1,)
                                    strides=None
                                  ] thi
                                  tsb:f64[] = squeeze[dimensions=(0,)] tsa
                                  tsc:f64[1] = slice[
                                    limit_indices=(2,)
                                    start_indices=(1,)
                                    strides=None
                                  ] tng
                                  tsd:f64[] = squeeze[dimensions=(0,)] tsc
                                  tse:f64[] = sub tsd tsb
                                  tsf:f64[] = div tse 6.283185307179586
                                  tsg:f64[400] = mul 6.283185307179586 tef
                                  tsh:f64[400] = mul 6.283185307179586 tef
                                  tsi:f64[400] = sin tsh
                                  tsj:f64[400] = sub tsg tsi
                                  tsk:f64[400] = mul tsf tsj
                                  tsl:f64[400] = add tsk tsb
                                  tsm:f64[400] = mul 6.283185307179586 tef
                                  tsn:f64[400] = cos tsm
                                  tso:f64[400] = sub 1.0 tsn
                                  tsp:f64[400] = mul 0.045 tso
                                  tsq:f64[400,1] = broadcast_in_dim[
                                    broadcast_dimensions=(0,)
                                    shape=(400, 1)
                                  ] trz
                                  tsr:f64[400,1] = broadcast_in_dim[
                                    broadcast_dimensions=(0,)
                                    shape=(400, 1)
                                  ] tsl
                                  tss:f64[400,1] = broadcast_in_dim[
                                    broadcast_dimensions=(0,)
                                    shape=(400, 1)
                                  ] tsp
                                  tst:f64[400,3] = concatenate[dimension=1] tsq tsr
                                    tss
                                  tsu:f64[1] = slice[
                                    limit_indices=(1,)
                                    start_indices=(0,)
                                    strides=None
                                  ] tiv
                                  tsv:f64[] = squeeze[dimensions=(0,)] tsu
                                  tsw:f64[1] = slice[
                                    limit_indices=(1,)
                                    start_indices=(0,)
                                    strides=None
                                  ] tor
                                  tsx:f64[] = squeeze[dimensions=(0,)] tsw
                                  tsy:f64[] = sub tsx tsv
                                  tsz:f64[] = div tsy 6.283185307179586
                                  tta:f64[400] = mul 6.283185307179586 tet
                                  ttb:f64[400] = mul 6.283185307179586 tet
                                  ttc:f64[400] = sin ttb
                                  ttd:f64[400] = sub tta ttc
                                  tte:f64[400] = mul tsz ttd
                                  ttf:f64[400] = add tte tsv
                                  ttg:f64[1] = slice[
                                    limit_indices=(2,)
                                    start_indices=(1,)
                                    strides=None
                                  ] tiv
                                  tth:f64[] = squeeze[dimensions=(0,)] ttg
                                  tti:f64[1] = slice[
                                    limit_indices=(2,)
                                    start_indices=(1,)
                                    strides=None
                                  ] tor
                                  ttj:f64[] = squeeze[dimensions=(0,)] tti
                                  ttk:f64[] = sub ttj tth
                                  ttl:f64[] = div ttk 6.283185307179586
                                  ttm:f64[400] = mul 6.283185307179586 tet
                                  ttn:f64[400] = mul 6.283185307179586 tet
                                  tto:f64[400] = sin ttn
                                  ttp:f64[400] = sub ttm tto
                                  ttq:f64[400] = mul ttl ttp
                                  ttr:f64[400] = add ttq tth
                                  tts:f64[400] = mul 6.283185307179586 tet
                                  ttt:f64[400] = cos tts
                                  ttu:f64[400] = sub 1.0 ttt
                                  ttv:f64[400] = mul 0.045 ttu
                                  ttw:f64[400,1] = broadcast_in_dim[
                                    broadcast_dimensions=(0,)
                                    shape=(400, 1)
                                  ] ttf
                                  ttx:f64[400,1] = broadcast_in_dim[
                                    broadcast_dimensions=(0,)
                                    shape=(400, 1)
                                  ] ttr
                                  tty:f64[400,1] = broadcast_in_dim[
                                    broadcast_dimensions=(0,)
                                    shape=(400, 1)
                                  ] ttv
                                  ttz:f64[400,3] = concatenate[dimension=1] ttw ttx
                                    tty
                                  tua:f64[1] = slice[
                                    limit_indices=(1,)
                                    start_indices=(0,)
                                    strides=None
                                  ] tki
                                  tub:f64[] = squeeze[dimensions=(0,)] tua
                                  tuc:f64[1] = slice[
                                    limit_indices=(1,)
                                    start_indices=(0,)
                                    strides=None
                                  ] tqc
                                  tud:f64[] = squeeze[dimensions=(0,)] tuc
                                  tue:f64[] = sub tud tub
                                  tuf:f64[] = div tue 6.283185307179586
                                  tug:f64[400] = mul 6.283185307179586 tfh
                                  tuh:f64[400] = mul 6.283185307179586 tfh
                                  tui:f64[400] = sin tuh
                                  tuj:f64[400] = sub tug tui
                                  tuk:f64[400] = mul tuf tuj
                                  tul:f64[400] = add tuk tub
                                  tum:f64[1] = slice[
                                    limit_indices=(2,)
                                    start_indices=(1,)
                                    strides=None
                                  ] tki
                                  tun:f64[] = squeeze[dimensions=(0,)] tum
                                  tuo:f64[1] = slice[
                                    limit_indices=(2,)
                                    start_indices=(1,)
                                    strides=None
                                  ] tqc
                                  tup:f64[] = squeeze[dimensions=(0,)] tuo
                                  tuq:f64[] = sub tup tun
                                  tur:f64[] = div tuq 6.283185307179586
                                  tus:f64[400] = mul 6.283185307179586 tfh
                                  tut:f64[400] = mul 6.283185307179586 tfh
                                  tuu:f64[400] = sin tut
                                  tuv:f64[400] = sub tus tuu
                                  tuw:f64[400] = mul tur tuv
                                  tux:f64[400] = add tuw tun
                                  tuy:f64[400] = mul 6.283185307179586 tfh
                                  tuz:f64[400] = cos tuy
                                  tva:f64[400] = sub 1.0 tuz
                                  tvb:f64[400] = mul 0.045 tva
                                  tvc:f64[400,1] = broadcast_in_dim[
                                    broadcast_dimensions=(0,)
                                    shape=(400, 1)
                                  ] tul
                                  tvd:f64[400,1] = broadcast_in_dim[
                                    broadcast_dimensions=(0,)
                                    shape=(400, 1)
                                  ] tux
                                  tve:f64[400,1] = broadcast_in_dim[
                                    broadcast_dimensions=(0,)
                                    shape=(400, 1)
                                  ] tvb
                                  tvf:f64[400,3] = concatenate[dimension=1] tvc tvd
                                    tve
                                  tvg:f64[1] = slice[
                                    limit_indices=(1,)
                                    start_indices=(0,)
                                    strides=None
                                  ] tlv
                                  tvh:f64[] = squeeze[dimensions=(0,)] tvg
                                  tvi:f64[1] = slice[
                                    limit_indices=(1,)
                                    start_indices=(0,)
                                    strides=None
                                  ] trn
                                  tvj:f64[] = squeeze[dimensions=(0,)] tvi
                                  tvk:f64[] = sub tvj tvh
                                  tvl:f64[] = div tvk 6.283185307179586
                                  tvm:f64[400] = mul 6.283185307179586 tfv
                                  tvn:f64[400] = mul 6.283185307179586 tfv
                                  tvo:f64[400] = sin tvn
                                  tvp:f64[400] = sub tvm tvo
                                  tvq:f64[400] = mul tvl tvp
                                  tvr:f64[400] = add tvq tvh
                                  tvs:f64[1] = slice[
                                    limit_indices=(2,)
                                    start_indices=(1,)
                                    strides=None
                                  ] tlv
                                  tvt:f64[] = squeeze[dimensions=(0,)] tvs
                                  tvu:f64[1] = slice[
                                    limit_indices=(2,)
                                    start_indices=(1,)
                                    strides=None
                                  ] trn
                                  tvv:f64[] = squeeze[dimensions=(0,)] tvu
                                  tvw:f64[] = sub tvv tvt
                                  tvx:f64[] = div tvw 6.283185307179586
                                  tvy:f64[400] = mul 6.283185307179586 tfv
                                  tvz:f64[400] = mul 6.283185307179586 tfv
                                  twa:f64[400] = sin tvz
                                  twb:f64[400] = sub tvy twa
                                  twc:f64[400] = mul tvx twb
                                  twd:f64[400] = add twc tvt
                                  twe:f64[400] = mul 6.283185307179586 tfv
                                  twf:f64[400] = cos twe
                                  twg:f64[400] = sub 1.0 twf
                                  twh:f64[400] = mul 0.045 twg
                                  twi:f64[400,1] = broadcast_in_dim[
                                    broadcast_dimensions=(0,)
                                    shape=(400, 1)
                                  ] tvr
                                  twj:f64[400,1] = broadcast_in_dim[
                                    broadcast_dimensions=(0,)
                                    shape=(400, 1)
                                  ] twd
                                  twk:f64[400,1] = broadcast_in_dim[
                                    broadcast_dimensions=(0,)
                                    shape=(400, 1)
                                  ] twh
                                  twl:f64[400,3] = concatenate[dimension=1] twi twj
                                    twk
                                  twm:f64[1] = slice[
                                    limit_indices=(1,)
                                    start_indices=(0,)
                                    strides=None
                                  ] tng
                                  twn:f64[] = squeeze[dimensions=(0,)] twm
                                  two:f64[1] = slice[
                                    limit_indices=(1,)
                                    start_indices=(0,)
                                    strides=None
                                  ] thi
                                  twp:f64[] = squeeze[dimensions=(0,)] two
                                  twq:f64[] = sub twp twn
                                  twr:f64[] = div twq 6.283185307179586
                                  tws:f64[400] = mul 6.283185307179586 tef
                                  twt:f64[400] = mul 6.283185307179586 tef
                                  twu:f64[400] = sin twt
                                  twv:f64[400] = sub tws twu
                                  tww:f64[400] = mul twr twv
                                  twx:f64[400] = add tww twn
                                  twy:f64[1] = slice[
                                    limit_indices=(2,)
                                    start_indices=(1,)
                                    strides=None
                                  ] tng
                                  twz:f64[] = squeeze[dimensions=(0,)] twy
                                  txa:f64[1] = slice[
                                    limit_indices=(2,)
                                    start_indices=(1,)
                                    strides=None
                                  ] thi
                                  txb:f64[] = squeeze[dimensions=(0,)] txa
                                  txc:f64[] = sub txb twz
                                  txd:f64[] = div txc 6.283185307179586
                                  txe:f64[400] = mul 6.283185307179586 tef
                                  txf:f64[400] = mul 6.283185307179586 tef
                                  txg:f64[400] = sin txf
                                  txh:f64[400] = sub txe txg
                                  txi:f64[400] = mul txd txh
                                  txj:f64[400] = add txi twz
                                  txk:f64[400,1] = broadcast_in_dim[
                                    broadcast_dimensions=(0,)
                                    shape=(400, 1)
                                  ] twx
                                  txl:f64[400,1] = broadcast_in_dim[
                                    broadcast_dimensions=(0,)
                                    shape=(400, 1)
                                  ] txj
                                  txm:f64[1] = broadcast_in_dim[
                                    broadcast_dimensions=()
                                    shape=(1,)
                                  ] 0.0
                                  txn:f64[400,1] = broadcast_in_dim[
                                    broadcast_dimensions=(1,)
                                    shape=(400, 1)
                                  ] txm
                                  txo:f64[400,3] = concatenate[dimension=1] txk txl
                                    txn
                                  txp:f64[1] = slice[
                                    limit_indices=(1,)
                                    start_indices=(0,)
                                    strides=None
                                  ] tor
                                  txq:f64[] = squeeze[dimensions=(0,)] txp
                                  txr:f64[1] = slice[
                                    limit_indices=(1,)
                                    start_indices=(0,)
                                    strides=None
                                  ] tiv
                                  txs:f64[] = squeeze[dimensions=(0,)] txr
                                  txt:f64[] = sub txs txq
                                  txu:f64[] = div txt 6.283185307179586
                                  txv:f64[400] = mul 6.283185307179586 tet
                                  txw:f64[400] = mul 6.283185307179586 tet
                                  txx:f64[400] = sin txw
                                  txy:f64[400] = sub txv txx
                                  txz:f64[400] = mul txu txy
                                  tya:f64[400] = add txz txq
                                  tyb:f64[1] = slice[
                                    limit_indices=(2,)
                                    start_indices=(1,)
                                    strides=None
                                  ] tor
                                  tyc:f64[] = squeeze[dimensions=(0,)] tyb
                                  tyd:f64[1] = slice[
                                    limit_indices=(2,)
                                    start_indices=(1,)
                                    strides=None
                                  ] tiv
                                  tye:f64[] = squeeze[dimensions=(0,)] tyd
                                  tyf:f64[] = sub tye tyc
                                  tyg:f64[] = div tyf 6.283185307179586
                                  tyh:f64[400] = mul 6.283185307179586 tet
                                  tyi:f64[400] = mul 6.283185307179586 tet
                                  tyj:f64[400] = sin tyi
                                  tyk:f64[400] = sub tyh tyj
                                  tyl:f64[400] = mul tyg tyk
                                  tym:f64[400] = add tyl tyc
                                  tyn:f64[400,1] = broadcast_in_dim[
                                    broadcast_dimensions=(0,)
                                    shape=(400, 1)
                                  ] tya
                                  tyo:f64[400,1] = broadcast_in_dim[
                                    broadcast_dimensions=(0,)
                                    shape=(400, 1)
                                  ] tym
                                  typ:f64[1] = broadcast_in_dim[
                                    broadcast_dimensions=()
                                    shape=(1,)
                                  ] 0.0
                                  tyq:f64[400,1] = broadcast_in_dim[
                                    broadcast_dimensions=(1,)
                                    shape=(400, 1)
                                  ] typ
                                  tyr:f64[400,3] = concatenate[dimension=1] tyn tyo
                                    tyq
                                  tys:f64[1] = slice[
                                    limit_indices=(1,)
                                    start_indices=(0,)
                                    strides=None
                                  ] tqc
                                  tyt:f64[] = squeeze[dimensions=(0,)] tys
                                  tyu:f64[1] = slice[
                                    limit_indices=(1,)
                                    start_indices=(0,)
                                    strides=None
                                  ] tki
                                  tyv:f64[] = squeeze[dimensions=(0,)] tyu
                                  tyw:f64[] = sub tyv tyt
                                  tyx:f64[] = div tyw 6.283185307179586
                                  tyy:f64[400] = mul 6.283185307179586 tfh
                                  tyz:f64[400] = mul 6.283185307179586 tfh
                                  tza:f64[400] = sin tyz
                                  tzb:f64[400] = sub tyy tza
                                  tzc:f64[400] = mul tyx tzb
                                  tzd:f64[400] = add tzc tyt
                                  tze:f64[1] = slice[
                                    limit_indices=(2,)
                                    start_indices=(1,)
                                    strides=None
                                  ] tqc
                                  tzf:f64[] = squeeze[dimensions=(0,)] tze
                                  tzg:f64[1] = slice[
                                    limit_indices=(2,)
                                    start_indices=(1,)
                                    strides=None
                                  ] tki
                                  tzh:f64[] = squeeze[dimensions=(0,)] tzg
                                  tzi:f64[] = sub tzh tzf
                                  tzj:f64[] = div tzi 6.283185307179586
                                  tzk:f64[400] = mul 6.283185307179586 tfh
                                  tzl:f64[400] = mul 6.283185307179586 tfh
                                  tzm:f64[400] = sin tzl
                                  tzn:f64[400] = sub tzk tzm
                                  tzo:f64[400] = mul tzj tzn
                                  tzp:f64[400] = add tzo tzf
                                  tzq:f64[400,1] = broadcast_in_dim[
                                    broadcast_dimensions=(0,)
                                    shape=(400, 1)
                                  ] tzd
                                  tzr:f64[400,1] = broadcast_in_dim[
                                    broadcast_dimensions=(0,)
                                    shape=(400, 1)
                                  ] tzp
                                  tzs:f64[1] = broadcast_in_dim[
                                    broadcast_dimensions=()
                                    shape=(1,)
                                  ] 0.0
                                  tzt:f64[400,1] = broadcast_in_dim[
                                    broadcast_dimensions=(1,)
                                    shape=(400, 1)
                                  ] tzs
                                  tzu:f64[400,3] = concatenate[dimension=1] tzq tzr
                                    tzt
                                  tzv:f64[1] = slice[
                                    limit_indices=(1,)
                                    start_indices=(0,)
                                    strides=None
                                  ] trn
                                  tzw:f64[] = squeeze[dimensions=(0,)] tzv
                                  tzx:f64[1] = slice[
                                    limit_indices=(1,)
                                    start_indices=(0,)
                                    strides=None
                                  ] tlv
                                  tzy:f64[] = squeeze[dimensions=(0,)] tzx
                                  tzz:f64[] = sub tzy tzw
                                  uaa:f64[] = div tzz 6.283185307179586
                                  uab:f64[400] = mul 6.283185307179586 tfv
                                  uac:f64[400] = mul 6.283185307179586 tfv
                                  uad:f64[400] = sin uac
                                  uae:f64[400] = sub uab uad
                                  uaf:f64[400] = mul uaa uae
                                  uag:f64[400] = add uaf tzw
                                  uah:f64[1] = slice[
                                    limit_indices=(2,)
                                    start_indices=(1,)
                                    strides=None
                                  ] trn
                                  uai:f64[] = squeeze[dimensions=(0,)] uah
                                  uaj:f64[1] = slice[
                                    limit_indices=(2,)
                                    start_indices=(1,)
                                    strides=None
                                  ] tlv
                                  uak:f64[] = squeeze[dimensions=(0,)] uaj
                                  ual:f64[] = sub uak uai
                                  uam:f64[] = div ual 6.283185307179586
                                  uan:f64[400] = mul 6.283185307179586 tfv
                                  uao:f64[400] = mul 6.283185307179586 tfv
                                  uap:f64[400] = sin uao
                                  uaq:f64[400] = sub uan uap
                                  uar:f64[400] = mul uam uaq
                                  uas:f64[400] = add uar uai
                                  uat:f64[400,1] = broadcast_in_dim[
                                    broadcast_dimensions=(0,)
                                    shape=(400, 1)
                                  ] uag
                                  uau:f64[400,1] = broadcast_in_dim[
                                    broadcast_dimensions=(0,)
                                    shape=(400, 1)
                                  ] uas
                                  uav:f64[1] = broadcast_in_dim[
                                    broadcast_dimensions=()
                                    shape=(1,)
                                  ] 0.0
                                  uaw:f64[400,1] = broadcast_in_dim[
                                    broadcast_dimensions=(1,)
                                    shape=(400, 1)
                                  ] uav
                                  uax:f64[400,3] = concatenate[dimension=1] uat uau
                                    uaw
                                  uay:bool[400,3] = broadcast_in_dim[
                                    broadcast_dimensions=(0,)
                                    shape=(400, 3)
                                  ] teb
                                  uaz:f64[400,3] = select_n uay tst txo
                                  uba:f64[1,3] = broadcast_in_dim[
                                    broadcast_dimensions=(1,)
                                    shape=(1, 3)
                                  ] szk
                                  ubb:f64[400,3] = add uba uaz
                                  ubc:bool[400,3] = broadcast_in_dim[
                                    broadcast_dimensions=(0,)
                                    shape=(400, 3)
                                  ] tep
                                  ubd:f64[400,3] = select_n ubc ttz tyr
                                  ube:f64[1,3] = broadcast_in_dim[
                                    broadcast_dimensions=(1,)
                                    shape=(1, 3)
                                  ] szm
                                  ubf:f64[400,3] = add ube ubd
                                  ubg:bool[400,3] = broadcast_in_dim[
                                    broadcast_dimensions=(0,)
                                    shape=(400, 3)
                                  ] tfd
                                  ubh:f64[400,3] = select_n ubg tvf tzu
                                  ubi:f64[1,3] = broadcast_in_dim[
                                    broadcast_dimensions=(1,)
                                    shape=(1, 3)
                                  ] szl
                                  ubj:f64[400,3] = add ubi ubh
                                  ubk:bool[400,3] = broadcast_in_dim[
                                    broadcast_dimensions=(0,)
                                    shape=(400, 3)
                                  ] tfr
                                  ubl:f64[400,3] = select_n ubk twl uax
                                  ubm:f64[1,3] = broadcast_in_dim[
                                    broadcast_dimensions=(1,)
                                    shape=(1, 3)
                                  ] szp
                                  ubn:f64[400,3] = add ubm ubl
                                  ubo:f64[1] = broadcast_in_dim[
                                    broadcast_dimensions=()
                                    shape=(1,)
                                  ] 0.0
                                  ubp:f64[1] = broadcast_in_dim[
                                    broadcast_dimensions=()
                                    shape=(1,)
                                  ] 0.0
                                  ubq:f64[400,1] = broadcast_in_dim[
                                    broadcast_dimensions=(0,)
                                    shape=(400, 1)
                                  ] tdl
                                  ubr:f64[400,1] = broadcast_in_dim[
                                    broadcast_dimensions=(1,)
                                    shape=(400, 1)
                                  ] ubo
                                  ubs:f64[400,1] = broadcast_in_dim[
                                    broadcast_dimensions=(1,)
                                    shape=(400, 1)
                                  ] ubp
                                  ubt:f64[400,3] = concatenate[dimension=1] ubr ubs
                                    ubq
                                  ubu:f64[400,1,3] = reshape[
                                    dimensions=None
                                    new_sizes=(400, 1, 3)
                                  ] ubt
                                  ubv:f64[400,3] = squeeze[dimensions=(1,)] ubu
                                  ubw:f64[400,4,3] = broadcast_in_dim[
                                    broadcast_dimensions=(0, 2)
                                    shape=(400, 4, 3)
                                  ] ubv
                                  ubx:f64[400,12] = reshape[
                                    dimensions=None
                                    new_sizes=(400, 12)
                                  ] ubw
                                  uby:f64[400,12] = concatenate[dimension=1] ubb
                                    ubf ubj ubn
                                  ubz:f64[400,12] = sub uby ubx
                                  uca:f64[400,8] = slice[
                                    limit_indices=(400, 8)
                                    start_indices=(0, 0)
                                    strides=None
                                  ] szh
                                  ucb:f64[400,1] = slice[
                                    limit_indices=(400, 1)
                                    start_indices=(0, 0)
                                    strides=None
                                  ] uca
                                  ucc:f64[400] = squeeze[dimensions=(1,)] ucb
                                  ucd:f64[400,1] = slice[
                                    limit_indices=(400, 5)
                                    start_indices=(0, 4)
                                    strides=None
                                  ] uca
                                  uce:f64[400] = squeeze[dimensions=(1,)] ucd
                                  ucf:f64[400,1] = slice[
                                    limit_indices=(400, 2)
                                    start_indices=(0, 1)
                                    strides=None
                                  ] uca
                                  ucg:f64[400] = squeeze[dimensions=(1,)] ucf
                                  uch:f64[400,1] = slice[
                                    limit_indices=(400, 6)
                                    start_indices=(0, 5)
                                    strides=None
                                  ] uca
                                  uci:f64[400] = squeeze[dimensions=(1,)] uch
                                  ucj:f64[400,1] = slice[
                                    limit_indices=(400, 3)
                                    start_indices=(0, 2)
                                    strides=None
                                  ] uca
                                  uck:f64[400] = squeeze[dimensions=(1,)] ucj
                                  ucl:f64[400,1] = slice[
                                    limit_indices=(400, 7)
                                    start_indices=(0, 6)
                                    strides=None
                                  ] uca
                                  ucm:f64[400] = squeeze[dimensions=(1,)] ucl
                                  ucn:f64[400,1] = slice[
                                    limit_indices=(400, 4)
                                    start_indices=(0, 3)
                                    strides=None
                                  ] uca
                                  uco:f64[400] = squeeze[dimensions=(1,)] ucn
                                  ucp:f64[400,1] = slice[
                                    limit_indices=(400, 8)
                                    start_indices=(0, 7)
                                    strides=None
                                  ] uca
                                  ucq:f64[400] = squeeze[dimensions=(1,)] ucp
                                  ucr:f64[400,1] = broadcast_in_dim[
                                    broadcast_dimensions=(0,)
                                    shape=(400, 1)
                                  ] ucc
                                  ucs:f64[400,1] = broadcast_in_dim[
                                    broadcast_dimensions=(0,)
                                    shape=(400, 1)
                                  ] uce
                                  uct:f64[1] = broadcast_in_dim[
                                    broadcast_dimensions=()
                                    shape=(1,)
                                  ] 0.0
                                  ucu:f64[400,1] = broadcast_in_dim[
                                    broadcast_dimensions=(0,)
                                    shape=(400, 1)
                                  ] ucg
                                  ucv:f64[400,1] = broadcast_in_dim[
                                    broadcast_dimensions=(0,)
                                    shape=(400, 1)
                                  ] uci
                                  ucw:f64[1] = broadcast_in_dim[
                                    broadcast_dimensions=()
                                    shape=(1,)
                                  ] 0.0
                                  ucx:f64[400,1] = broadcast_in_dim[
                                    broadcast_dimensions=(0,)
                                    shape=(400, 1)
                                  ] uck
                                  ucy:f64[400,1] = broadcast_in_dim[
                                    broadcast_dimensions=(0,)
                                    shape=(400, 1)
                                  ] ucm
                                  ucz:f64[1] = broadcast_in_dim[
                                    broadcast_dimensions=()
                                    shape=(1,)
                                  ] 0.0
                                  uda:f64[400,1] = broadcast_in_dim[
                                    broadcast_dimensions=(0,)
                                    shape=(400, 1)
                                  ] uco
                                  udb:f64[400,1] = broadcast_in_dim[
                                    broadcast_dimensions=(0,)
                                    shape=(400, 1)
                                  ] ucq
                                  udc:f64[1] = broadcast_in_dim[
                                    broadcast_dimensions=()
                                    shape=(1,)
                                  ] 0.0
                                  udd:f64[400,1] = broadcast_in_dim[
                                    broadcast_dimensions=(1,)
                                    shape=(400, 1)
                                  ] uct
                                  ude:f64[400,1] = broadcast_in_dim[
                                    broadcast_dimensions=(1,)
                                    shape=(400, 1)
                                  ] ucw
                                  udf:f64[400,1] = broadcast_in_dim[
                                    broadcast_dimensions=(1,)
                                    shape=(400, 1)
                                  ] ucz
                                  udg:f64[400,1] = broadcast_in_dim[
                                    broadcast_dimensions=(1,)
                                    shape=(400, 1)
                                  ] udc
                                  udh:f64[400,12] = concatenate[dimension=1] ucr
                                    ucs udd ucu ucv ude ucx ucy udf uda udb udg
                                  udi:f64[400,12] = add ubz udh
                                  udj:f64[400,3] = slice[
                                    limit_indices=(400, 3)
                                    start_indices=(0, 0)
                                    strides=None
                                  ] udi
                                  udk:f64[] = select_n False 0.1881 -0.1881
                                  udl:f64[] = select_n True 0.04675 -0.04675
                                  udm:f64[400,1] = slice[
                                    limit_indices=(400, 1)
                                    start_indices=(0, 0)
                                    strides=None
                                  ] udj
                                  udn:f64[400] = squeeze[dimensions=(1,)] udm
                                  udo:f64[] = convert_element_type[
                                    new_dtype=float64
                                    weak_type=False
                                  ] udk
                                  udp:f64[400] = sub udn udo
                                  udq:f64[400,1] = slice[
                                    limit_indices=(400, 2)
                                    start_indices=(0, 1)
                                    strides=None
                                  ] udj
                                  udr:f64[400] = squeeze[dimensions=(1,)] udq
                                  uds:f64[] = convert_element_type[
                                    new_dtype=float64
                                    weak_type=False
                                  ] udl
                                  udt:f64[400] = sub udr uds
                                  udu:f64[400,1] = slice[
                                    limit_indices=(400, 3)
                                    start_indices=(0, 2)
                                    strides=None
                                  ] udj
                                  udv:f64[400] = squeeze[dimensions=(1,)] udu
                                  udw:f64[] = select_n True 0.08 -0.08
                                  udx:f64[400] = integer_pow[y=2] udp
                                  udy:f64[400] = integer_pow[y=2] udt
                                  udz:f64[400] = add udx udy
                                  uea:f64[400] = integer_pow[y=2] udv
                                  ueb:f64[400] = add udz uea
                                  uec:f64[400] = sqrt ueb
                                  ued:f64[400] = integer_pow[y=2] uec
                                  uee:f64[400] = sub ued 0.0064
                                  uef:f64[400] = sqrt uee
                                  ueg:f64[400] = integer_pow[y=2] udt
                                  ueh:f64[400] = integer_pow[y=2] udv
                                  uei:f64[400] = add ueg ueh
                                  uej:f64[] = integer_pow[y=2] udw
                                  uek:f64[] = convert_element_type[
                                    new_dtype=float64
                                    weak_type=False
                                  ] uej
                                  uel:f64[400] = sub uei uek
                                  uem:f64[400] = sqrt uel
                                  uen:f64[] = convert_element_type[
                                    new_dtype=float64
                                    weak_type=False
                                  ] udw
                                  ueo:f64[400] = mul udv uen
                                  uep:f64[400] = mul udt uem
                                  ueq:f64[400] = add ueo uep
                                  uer:f64[] = convert_element_type[
                                    new_dtype=float64
                                    weak_type=False
                                  ] udw
                                  ues:f64[400] = mul udt uer
                                  uet:f64[400] = mul udv uem
                                  ueu:f64[400] = sub ues uet
                                  uev:f64[400] = atan2 ueq ueu
                                  uew:f64[400] = integer_pow[y=2] uef
                                  uex:f64[400] = sub 0.090738 uew
                                  uey:f64[] = abs 0.045369
                                  uez:f64[] = mul 2.0 uey
                                  ufa:f64[] = convert_element_type[
                                    new_dtype=float64
                                    weak_type=False
                                  ] uez
                                  ufb:f64[400] = div uex ufa
                                  ufc:f64[1] = slice[
                                    limit_indices=(3,)
                                    start_indices=(2,)
                                    strides=None
                                  ] szq
                                  ufd:f64[] = squeeze[dimensions=(0,)] ufc
                                  ufe:f64[1] = slice[
                                    limit_indices=(3,)
                                    start_indices=(2,)
                                    strides=None
                                  ] szr
                                  uff:f64[] = squeeze[dimensions=(0,)] ufe
                                  ufg:f64[] = add 3.141592653589793 ufd
                                  ufh:f64[] = cos ufg
                                  ufi:f64[] = add 3.141592653589793 uff
                                  ufj:f64[] = cos ufi
                                  ufk:f64[400] = pjit[name=clip jaxpr=clip8] ufb
                                    ufh ufj
                                  ufl:f64[400] = acos ufk
                                  ufm:f64[400] = sub 3.141592653589793 ufl
                                  ufn:f64[400] = neg ufm
                                  ufo:f64[400] = sin uev
                                  ufp:f64[400] = mul udt ufo
                                  ufq:f64[400] = cos uev
                                  ufr:f64[400] = mul udv ufq
                                  ufs:f64[400] = sub ufp ufr
                                  uft:f64[400] = sin ufn
                                  ufu:f64[400] = mul -0.213 uft
                                  ufv:f64[400] = cos ufn
                                  ufw:f64[400] = mul -0.213 ufv
                                  ufx:f64[400] = add -0.213 ufw
                                  ufy:f64[400] = mul ufu ufs
                                  ufz:f64[400] = mul ufx udp
                                  uga:f64[400] = add ufy ufz
                                  ugb:f64[400] = mul ufu udp
                                  ugc:f64[400] = mul ufx ufs
                                  ugd:f64[400] = sub ugb ugc
                                  uge:f64[400] = atan2 uga ugd
                                  ugf:f64[400,1] = broadcast_in_dim[
                                    broadcast_dimensions=(0,)
                                    shape=(400, 1)
                                  ] uev
                                  ugg:f64[400,1] = broadcast_in_dim[
                                    broadcast_dimensions=(0,)
                                    shape=(400, 1)
                                  ] uge
                                  ugh:f64[400,1] = broadcast_in_dim[
                                    broadcast_dimensions=(0,)
                                    shape=(400, 1)
                                  ] ufn
                                  ugi:f64[400,3] = concatenate[dimension=1] ugf ugg
                                    ugh
                                  ugj:f64[400,3] = slice[
                                    limit_indices=(400, 6)
                                    start_indices=(0, 3)
                                    strides=None
                                  ] udi
                                  ugk:f64[] = select_n False 0.1881 -0.1881
                                  ugl:f64[] = select_n False 0.04675 -0.04675
                                  ugm:f64[400,1] = slice[
                                    limit_indices=(400, 1)
                                    start_indices=(0, 0)
                                    strides=None
                                  ] ugj
                                  ugn:f64[400] = squeeze[dimensions=(1,)] ugm
                                  ugo:f64[] = convert_element_type[
                                    new_dtype=float64
                                    weak_type=False
                                  ] ugk
                                  ugp:f64[400] = sub ugn ugo
                                  ugq:f64[400,1] = slice[
                                    limit_indices=(400, 2)
                                    start_indices=(0, 1)
                                    strides=None
                                  ] ugj
                                  ugr:f64[400] = squeeze[dimensions=(1,)] ugq
                                  ugs:f64[] = convert_element_type[
                                    new_dtype=float64
                                    weak_type=False
                                  ] ugl
                                  ugt:f64[400] = sub ugr ugs
                                  ugu:f64[400,1] = slice[
                                    limit_indices=(400, 3)
                                    start_indices=(0, 2)
                                    strides=None
                                  ] ugj
                                  ugv:f64[400] = squeeze[dimensions=(1,)] ugu
                                  ugw:f64[] = select_n False 0.08 -0.08
                                  ugx:f64[400] = integer_pow[y=2] ugp
                                  ugy:f64[400] = integer_pow[y=2] ugt
                                  ugz:f64[400] = add ugx ugy
                                  uha:f64[400] = integer_pow[y=2] ugv
                                  uhb:f64[400] = add ugz uha
                                  uhc:f64[400] = sqrt uhb
                                  uhd:f64[400] = integer_pow[y=2] uhc
                                  uhe:f64[400] = sub uhd 0.0064
                                  uhf:f64[400] = sqrt uhe
                                  uhg:f64[400] = integer_pow[y=2] ugt
                                  uhh:f64[400] = integer_pow[y=2] ugv
                                  uhi:f64[400] = add uhg uhh
                                  uhj:f64[] = integer_pow[y=2] ugw
                                  uhk:f64[] = convert_element_type[
                                    new_dtype=float64
                                    weak_type=False
                                  ] uhj
                                  uhl:f64[400] = sub uhi uhk
                                  uhm:f64[400] = sqrt uhl
                                  uhn:f64[] = convert_element_type[
                                    new_dtype=float64
                                    weak_type=False
                                  ] ugw
                                  uho:f64[400] = mul ugv uhn
                                  uhp:f64[400] = mul ugt uhm
                                  uhq:f64[400] = add uho uhp
                                  uhr:f64[] = convert_element_type[
                                    new_dtype=float64
                                    weak_type=False
                                  ] ugw
                                  uhs:f64[400] = mul ugt uhr
                                  uht:f64[400] = mul ugv uhm
                                  uhu:f64[400] = sub uhs uht
                                  uhv:f64[400] = atan2 uhq uhu
                                  uhw:f64[400] = integer_pow[y=2] uhf
                                  uhx:f64[400] = sub 0.090738 uhw
                                  uhy:f64[] = abs 0.045369
                                  uhz:f64[] = mul 2.0 uhy
                                  uia:f64[] = convert_element_type[
                                    new_dtype=float64
                                    weak_type=False
                                  ] uhz
                                  uib:f64[400] = div uhx uia
                                  uic:f64[1] = slice[
                                    limit_indices=(3,)
                                    start_indices=(2,)
                                    strides=None
                                  ] szq
                                  uid:f64[] = squeeze[dimensions=(0,)] uic
                                  uie:f64[1] = slice[
                                    limit_indices=(3,)
                                    start_indices=(2,)
                                    strides=None
                                  ] szr
                                  uif:f64[] = squeeze[dimensions=(0,)] uie
                                  uig:f64[] = add 3.141592653589793 uid
                                  uih:f64[] = cos uig
                                  uii:f64[] = add 3.141592653589793 uif
                                  uij:f64[] = cos uii
                                  uik:f64[400] = pjit[name=clip jaxpr=clip8] uib
                                    uih uij
                                  uil:f64[400] = acos uik
                                  uim:f64[400] = sub 3.141592653589793 uil
                                  uin:f64[400] = neg uim
                                  uio:f64[400] = sin uhv
                                  uip:f64[400] = mul ugt uio
                                  uiq:f64[400] = cos uhv
                                  uir:f64[400] = mul ugv uiq
                                  uis:f64[400] = sub uip uir
                                  uit:f64[400] = sin uin
                                  uiu:f64[400] = mul -0.213 uit
                                  uiv:f64[400] = cos uin
                                  uiw:f64[400] = mul -0.213 uiv
                                  uix:f64[400] = add -0.213 uiw
                                  uiy:f64[400] = mul uiu uis
                                  uiz:f64[400] = mul uix ugp
                                  uja:f64[400] = add uiy uiz
                                  ujb:f64[400] = mul uiu ugp
                                  ujc:f64[400] = mul uix uis
                                  ujd:f64[400] = sub ujb ujc
                                  uje:f64[400] = atan2 uja ujd
                                  ujf:f64[400,1] = broadcast_in_dim[
                                    broadcast_dimensions=(0,)
                                    shape=(400, 1)
                                  ] uhv
                                  ujg:f64[400,1] = broadcast_in_dim[
                                    broadcast_dimensions=(0,)
                                    shape=(400, 1)
                                  ] uje
                                  ujh:f64[400,1] = broadcast_in_dim[
                                    broadcast_dimensions=(0,)
                                    shape=(400, 1)
                                  ] uin
                                  uji:f64[400,3] = concatenate[dimension=1] ujf ujg
                                    ujh
                                  ujj:f64[400,3] = slice[
                                    limit_indices=(400, 9)
                                    start_indices=(0, 6)
                                    strides=None
                                  ] udi
                                  ujk:f64[] = select_n True 0.1881 -0.1881
                                  ujl:f64[] = select_n True 0.04675 -0.04675
                                  ujm:f64[400,1] = slice[
                                    limit_indices=(400, 1)
                                    start_indices=(0, 0)
                                    strides=None
                                  ] ujj
                                  ujn:f64[400] = squeeze[dimensions=(1,)] ujm
                                  ujo:f64[] = convert_element_type[
                                    new_dtype=float64
                                    weak_type=False
                                  ] ujk
                                  ujp:f64[400] = sub ujn ujo
                                  ujq:f64[400,1] = slice[
                                    limit_indices=(400, 2)
                                    start_indices=(0, 1)
                                    strides=None
                                  ] ujj
                                  ujr:f64[400] = squeeze[dimensions=(1,)] ujq
                                  ujs:f64[] = convert_element_type[
                                    new_dtype=float64
                                    weak_type=False
                                  ] ujl
                                  ujt:f64[400] = sub ujr ujs
                                  uju:f64[400,1] = slice[
                                    limit_indices=(400, 3)
                                    start_indices=(0, 2)
                                    strides=None
                                  ] ujj
                                  ujv:f64[400] = squeeze[dimensions=(1,)] uju
                                  ujw:f64[] = select_n True 0.08 -0.08
                                  ujx:f64[400] = integer_pow[y=2] ujp
                                  ujy:f64[400] = integer_pow[y=2] ujt
                                  ujz:f64[400] = add ujx ujy
                                  uka:f64[400] = integer_pow[y=2] ujv
                                  ukb:f64[400] = add ujz uka
                                  ukc:f64[400] = sqrt ukb
                                  ukd:f64[400] = integer_pow[y=2] ukc
                                  uke:f64[400] = sub ukd 0.0064
                                  ukf:f64[400] = sqrt uke
                                  ukg:f64[400] = integer_pow[y=2] ujt
                                  ukh:f64[400] = integer_pow[y=2] ujv
                                  uki:f64[400] = add ukg ukh
                                  ukj:f64[] = integer_pow[y=2] ujw
                                  ukk:f64[] = convert_element_type[
                                    new_dtype=float64
                                    weak_type=False
                                  ] ukj
                                  ukl:f64[400] = sub uki ukk
                                  ukm:f64[400] = sqrt ukl
                                  ukn:f64[] = convert_element_type[
                                    new_dtype=float64
                                    weak_type=False
                                  ] ujw
                                  uko:f64[400] = mul ujv ukn
                                  ukp:f64[400] = mul ujt ukm
                                  ukq:f64[400] = add uko ukp
                                  ukr:f64[] = convert_element_type[
                                    new_dtype=float64
                                    weak_type=False
                                  ] ujw
                                  uks:f64[400] = mul ujt ukr
                                  ukt:f64[400] = mul ujv ukm
                                  uku:f64[400] = sub uks ukt
                                  ukv:f64[400] = atan2 ukq uku
                                  ukw:f64[400] = integer_pow[y=2] ukf
                                  ukx:f64[400] = sub 0.090738 ukw
                                  uky:f64[] = abs 0.045369
                                  ukz:f64[] = mul 2.0 uky
                                  ula:f64[] = convert_element_type[
                                    new_dtype=float64
                                    weak_type=False
                                  ] ukz
                                  ulb:f64[400] = div ukx ula
                                  ulc:f64[1] = slice[
                                    limit_indices=(3,)
                                    start_indices=(2,)
                                    strides=None
                                  ] szq
                                  uld:f64[] = squeeze[dimensions=(0,)] ulc
                                  ule:f64[1] = slice[
                                    limit_indices=(3,)
                                    start_indices=(2,)
                                    strides=None
                                  ] szr
                                  ulf:f64[] = squeeze[dimensions=(0,)] ule
                                  ulg:f64[] = add 3.141592653589793 uld
                                  ulh:f64[] = cos ulg
                                  uli:f64[] = add 3.141592653589793 ulf
                                  ulj:f64[] = cos uli
                                  ulk:f64[400] = pjit[name=clip jaxpr=clip8] ulb
                                    ulh ulj
                                  ull:f64[400] = acos ulk
                                  ulm:f64[400] = sub 3.141592653589793 ull
                                  uln:f64[400] = neg ulm
                                  ulo:f64[400] = sin ukv
                                  ulp:f64[400] = mul ujt ulo
                                  ulq:f64[400] = cos ukv
                                  ulr:f64[400] = mul ujv ulq
                                  uls:f64[400] = sub ulp ulr
                                  ult:f64[400] = sin uln
                                  ulu:f64[400] = mul -0.213 ult
                                  ulv:f64[400] = cos uln
                                  ulw:f64[400] = mul -0.213 ulv
                                  ulx:f64[400] = add -0.213 ulw
                                  uly:f64[400] = mul ulu uls
                                  ulz:f64[400] = mul ulx ujp
                                  uma:f64[400] = add uly ulz
                                  umb:f64[400] = mul ulu ujp
                                  umc:f64[400] = mul ulx uls
                                  umd:f64[400] = sub umb umc
                                  ume:f64[400] = atan2 uma umd
                                  umf:f64[400,1] = broadcast_in_dim[
                                    broadcast_dimensions=(0,)
                                    shape=(400, 1)
                                  ] ukv
                                  umg:f64[400,1] = broadcast_in_dim[
                                    broadcast_dimensions=(0,)
                                    shape=(400, 1)
                                  ] ume
                                  umh:f64[400,1] = broadcast_in_dim[
                                    broadcast_dimensions=(0,)
                                    shape=(400, 1)
                                  ] uln
                                  umi:f64[400,3] = concatenate[dimension=1] umf umg
                                    umh
                                  umj:f64[400,3] = slice[
                                    limit_indices=(400, 12)
                                    start_indices=(0, 9)
                                    strides=None
                                  ] udi
                                  umk:f64[] = select_n True 0.1881 -0.1881
                                  uml:f64[] = select_n False 0.04675 -0.04675
                                  umm:f64[400,1] = slice[
                                    limit_indices=(400, 1)
                                    start_indices=(0, 0)
                                    strides=None
                                  ] umj
                                  umn:f64[400] = squeeze[dimensions=(1,)] umm
                                  umo:f64[] = convert_element_type[
                                    new_dtype=float64
                                    weak_type=False
                                  ] umk
                                  ump:f64[400] = sub umn umo
                                  umq:f64[400,1] = slice[
                                    limit_indices=(400, 2)
                                    start_indices=(0, 1)
                                    strides=None
                                  ] umj
                                  umr:f64[400] = squeeze[dimensions=(1,)] umq
                                  ums:f64[] = convert_element_type[
                                    new_dtype=float64
                                    weak_type=False
                                  ] uml
                                  umt:f64[400] = sub umr ums
                                  umu:f64[400,1] = slice[
                                    limit_indices=(400, 3)
                                    start_indices=(0, 2)
                                    strides=None
                                  ] umj
                                  umv:f64[400] = squeeze[dimensions=(1,)] umu
                                  umw:f64[] = select_n False 0.08 -0.08
                                  umx:f64[400] = integer_pow[y=2] ump
                                  umy:f64[400] = integer_pow[y=2] umt
                                  umz:f64[400] = add umx umy
                                  una:f64[400] = integer_pow[y=2] umv
                                  unb:f64[400] = add umz una
                                  unc:f64[400] = sqrt unb
                                  und:f64[400] = integer_pow[y=2] unc
                                  une:f64[400] = sub und 0.0064
                                  unf:f64[400] = sqrt une
                                  ung:f64[400] = integer_pow[y=2] umt
                                  unh:f64[400] = integer_pow[y=2] umv
                                  uni:f64[400] = add ung unh
                                  unj:f64[] = integer_pow[y=2] umw
                                  unk:f64[] = convert_element_type[
                                    new_dtype=float64
                                    weak_type=False
                                  ] unj
                                  unl:f64[400] = sub uni unk
                                  unm:f64[400] = sqrt unl
                                  unn:f64[] = convert_element_type[
                                    new_dtype=float64
                                    weak_type=False
                                  ] umw
                                  uno:f64[400] = mul umv unn
                                  unp:f64[400] = mul umt unm
                                  unq:f64[400] = add uno unp
                                  unr:f64[] = convert_element_type[
                                    new_dtype=float64
                                    weak_type=False
                                  ] umw
                                  uns:f64[400] = mul umt unr
                                  unt:f64[400] = mul umv unm
                                  unu:f64[400] = sub uns unt
                                  unv:f64[400] = atan2 unq unu
                                  unw:f64[400] = integer_pow[y=2] unf
                                  unx:f64[400] = sub 0.090738 unw
                                  uny:f64[] = abs 0.045369
                                  unz:f64[] = mul 2.0 uny
                                  uoa:f64[] = convert_element_type[
                                    new_dtype=float64
                                    weak_type=False
                                  ] unz
                                  uob:f64[400] = div unx uoa
                                  uoc:f64[1] = slice[
                                    limit_indices=(3,)
                                    start_indices=(2,)
                                    strides=None
                                  ] szq
                                  uod:f64[] = squeeze[dimensions=(0,)] uoc
                                  uoe:f64[1] = slice[
                                    limit_indices=(3,)
                                    start_indices=(2,)
                                    strides=None
                                  ] szr
                                  uof:f64[] = squeeze[dimensions=(0,)] uoe
                                  uog:f64[] = add 3.141592653589793 uod
                                  uoh:f64[] = cos uog
                                  uoi:f64[] = add 3.141592653589793 uof
                                  uoj:f64[] = cos uoi
                                  uok:f64[400] = pjit[name=clip jaxpr=clip8] uob
                                    uoh uoj
                                  uol:f64[400] = acos uok
                                  uom:f64[400] = sub 3.141592653589793 uol
                                  uon:f64[400] = neg uom
                                  uoo:f64[400] = sin unv
                                  uop:f64[400] = mul umt uoo
                                  uoq:f64[400] = cos unv
                                  uor:f64[400] = mul umv uoq
                                  uos:f64[400] = sub uop uor
                                  uot:f64[400] = sin uon
                                  uou:f64[400] = mul -0.213 uot
                                  uov:f64[400] = cos uon
                                  uow:f64[400] = mul -0.213 uov
                                  uox:f64[400] = add -0.213 uow
                                  uoy:f64[400] = mul uou uos
                                  uoz:f64[400] = mul uox ump
                                  upa:f64[400] = add uoy uoz
                                  upb:f64[400] = mul uou ump
                                  upc:f64[400] = mul uox uos
                                  upd:f64[400] = sub upb upc
                                  upe:f64[400] = atan2 upa upd
                                  upf:f64[400,1] = broadcast_in_dim[
                                    broadcast_dimensions=(0,)
                                    shape=(400, 1)
                                  ] unv
                                  upg:f64[400,1] = broadcast_in_dim[
                                    broadcast_dimensions=(0,)
                                    shape=(400, 1)
                                  ] upe
                                  uph:f64[400,1] = broadcast_in_dim[
                                    broadcast_dimensions=(0,)
                                    shape=(400, 1)
                                  ] uon
                                  upi:f64[400,3] = concatenate[dimension=1] upf upg
                                    uph
                                  upj:f64[400,12] = concatenate[dimension=1] ugi
                                    uji umi upi
                                  upk:f64[1,3] = reshape[
                                    dimensions=None
                                    new_sizes=(1, 3)
                                  ] szr
                                  upl:f64[3] = squeeze[dimensions=(0,)] upk
                                  upm:f64[4,3] = broadcast_in_dim[
                                    broadcast_dimensions=(1,)
                                    shape=(4, 3)
                                  ] upl
                                  upn:f64[12] = reshape[
                                    dimensions=None
                                    new_sizes=(12,)
                                  ] upm
                                  upo:f64[1,3] = reshape[
                                    dimensions=None
                                    new_sizes=(1, 3)
                                  ] szq
                                  upp:f64[3] = squeeze[dimensions=(0,)] upo
                                  upq:f64[4,3] = broadcast_in_dim[
                                    broadcast_dimensions=(1,)
                                    shape=(4, 3)
                                  ] upp
                                  upr:f64[12] = reshape[
                                    dimensions=None
                                    new_sizes=(12,)
                                  ] upq
                                  ups:f64[400,12] = pjit[name=clip jaxpr=clip9] upj
                                    upn upr
                                  upt:f64[12] = broadcast_in_dim[
                                    broadcast_dimensions=()
                                    shape=(12,)
                                  ] 0.0
                                  upu:i64[1,3] = reshape[
                                    dimensions=None
                                    new_sizes=(1, 3)
                                  ] szs
                                  upv:i64[3] = squeeze[dimensions=(0,)] upu
                                  upw:i64[4,3] = broadcast_in_dim[
                                    broadcast_dimensions=(1,)
                                    shape=(4, 3)
                                  ] upv
                                  upx:i64[12] = reshape[
                                    dimensions=None
                                    new_sizes=(12,)
                                  ] upw
                                  upy:f64[12] = convert_element_type[
                                    new_dtype=float64
                                    weak_type=True
                                  ] upx
                                  upz:f64[12] = mul upy 1.4
                                  uqa:f64[1,3] = reshape[
                                    dimensions=None
                                    new_sizes=(1, 3)
                                  ] szt
                                  uqb:f64[3] = squeeze[dimensions=(0,)] uqa
                                  uqc:f64[4,3] = broadcast_in_dim[
                                    broadcast_dimensions=(1,)
                                    shape=(4, 3)
                                  ] uqb
                                  uqd:f64[12] = reshape[
                                    dimensions=None
                                    new_sizes=(12,)
                                  ] uqc
                                  uqe:f64[400,12] = cond[
                                    branches=(
                                      { lambda ; uqf:f64[12] uqg:f64[12] uqh:f64[400,36]
                                          uqi:f64[400,12] uqj:f64[12] uqk:f64[12]
                                          uql:f64[12]. let
                                          uqm:f64[400,12] = broadcast_in_dim[
                                            broadcast_dimensions=(1,)
                                            shape=(400, 12)
                                          ] uqg
                                        in (uqm,) }
                                      { lambda ; uqn:f64[12] uqo:f64[12] uqp:f64[400,36]
                                          uqq:f64[400,12] uqr:f64[12] uqs:f64[12]
                                          uqt:f64[12]. let
                                          uqu:f64[400,12] = slice[
                                            limit_indices=(400, 16)
                                            start_indices=(0, 4)
                                            strides=None
                                          ] uqp
                                          uqv:f64[400,12] = slice[
                                            limit_indices=(400, 34)
                                            start_indices=(0, 22)
                                            strides=None
                                          ] uqp
                                          uqw:f64[400,12] = sub uqq uqu
                                          uqx:f64[12] = convert_element_type[
                                            new_dtype=float64
                                            weak_type=False
                                          ] uqs
                                          uqy:f64[1,12] = broadcast_in_dim[
                                            broadcast_dimensions=(1,)
                                            shape=(1, 12)
                                          ] uqx
                                          uqz:f64[400,12] = mul uqy uqw
                                          ura:f64[1,12] = broadcast_in_dim[
                                            broadcast_dimensions=(1,)
                                            shape=(1, 12)
                                          ] uqr
                                          urb:f64[400,12] = sub ura uqv
                                          urc:f64[1,12] = broadcast_in_dim[
                                            broadcast_dimensions=(1,)
                                            shape=(1, 12)
                                          ] uqt
                                          urd:f64[400,12] = mul urc urb
                                          ure:f64[400,12] = add uqz urd
                                          urf:f64[400,12] = sub uqq uqu
                                          urg:bool[400,12] = ne urf 0.0
                                          urh:f64[400,12] = sub uqq uqu
                                          uri:f64[400,12] = pjit[
                                            name=_where
                                            jaxpr=_where13
                                          ] urg urh 1
                                          urj:f64[1,12] = broadcast_in_dim[
                                            broadcast_dimensions=(1,)
                                            shape=(1, 12)
                                          ] uqn
                                          urk:bool[400,12] = gt ure urj
                                          url:f64[1,12] = broadcast_in_dim[
                                            broadcast_dimensions=(1,)
                                            shape=(1, 12)
                                          ] uqr
                                          urm:f64[400,12] = sub url uqv
                                          urn:f64[1,12] = broadcast_in_dim[
                                            broadcast_dimensions=(1,)
                                            shape=(1, 12)
                                          ] uqt
                                          uro:f64[400,12] = mul urn urm
                                          urp:f64[1,12] = broadcast_in_dim[
                                            broadcast_dimensions=(1,)
                                            shape=(1, 12)
                                          ] uqn
                                          urq:f64[400,12] = sub urp uro
                                          urr:f64[400,12] = div urq uri
                                          urs:f64[400,12] = pjit[
                                            name=_where
                                            jaxpr=_where14
                                          ] urk urr uqs
                                          urt:f64[12] = neg uqn
                                          uru:f64[1,12] = broadcast_in_dim[
                                            broadcast_dimensions=(1,)
                                            shape=(1, 12)
                                          ] urt
                                          urv:bool[400,12] = lt ure uru
                                          urw:f64[12] = neg uqn
                                          urx:f64[1,12] = broadcast_in_dim[
                                            broadcast_dimensions=(1,)
                                            shape=(1, 12)
                                          ] uqr
                                          ury:f64[400,12] = sub urx uqv
                                          urz:f64[1,12] = broadcast_in_dim[
                                            broadcast_dimensions=(1,)
                                            shape=(1, 12)
                                          ] uqt
                                          usa:f64[400,12] = mul urz ury
                                          usb:f64[1,12] = broadcast_in_dim[
                                            broadcast_dimensions=(1,)
                                            shape=(1, 12)
                                          ] urw
                                          usc:f64[400,12] = sub usb usa
                                          usd:f64[400,12] = div usc uri
                                          use:f64[400,12] = pjit[
                                            name=_where
                                            jaxpr=_where15
                                          ] urv usd urs
                                        in (use,) }
                                    )
                                    linear=(False, False, False, False, False, False, False)
                                  ] 1 szu upz tdj ups upt upz uqd
                                  usf:f64[400,12] = slice[
                                    limit_indices=(400, 16)
                                    start_indices=(0, 4)
                                    strides=None
                                  ] tdj
                                  usg:f64[400,12] = slice[
                                    limit_indices=(400, 34)
                                    start_indices=(0, 22)
                                    strides=None
                                  ] tdj
                                  ush:f64[400,12] = sub ups usf
                                  usi:f64[400,12] = convert_element_type[
                                    new_dtype=float64
                                    weak_type=False
                                  ] uqe
                                  usj:f64[400,12] = mul usi ush
                                  usk:f64[1,12] = broadcast_in_dim[
                                    broadcast_dimensions=(1,)
                                    shape=(1, 12)
                                  ] upt
                                  usl:f64[400,12] = sub usk usg
                                  usm:f64[1,12] = broadcast_in_dim[
                                    broadcast_dimensions=(1,)
                                    shape=(1, 12)
                                  ] uqd
                                  usn:f64[400,12] = mul usm usl
                                  uso:f64[400,12] = add usj usn
                                  usp:bool[12] = lt szv 0
                                  usq:i32[12] = add szv 19
                                  usr:i32[12] = select_n usp szv usq
                                  uss:i32[12,1] = broadcast_in_dim[
                                    broadcast_dimensions=(0,)
                                    shape=(12, 1)
                                  ] usr
                                  ust:f64[400,12] = gather[
                                    dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
                                    fill_value=None
                                    indices_are_sorted=False
                                    mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                    slice_sizes=(400, 1)
                                    unique_indices=False
                                  ] taf uss
                                  usu:bool[12] = lt szw 0
                                  usv:i32[12] = add szw 18
                                  usw:i32[12] = select_n usu szw usv
                                  usx:i32[12,1] = broadcast_in_dim[
                                    broadcast_dimensions=(0,)
                                    shape=(12, 1)
                                  ] usw
                                  usy:f64[400,12] = gather[
                                    dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
                                    fill_value=None
                                    indices_are_sorted=False
                                    mode=GatherScatterMode.PROMISE_IN_BOUNDS
                                    slice_sizes=(400, 1)
                                    unique_indices=False
                                  ] tag usx
                                  usz:f64[12,1] = slice[
                                    limit_indices=(12, 1)
                                    start_indices=(0, 0)
                                    strides=None
                                  ] szx
                                  uta:f64[12] = squeeze[dimensions=(1,)] usz
                                  utb:f64[12,1] = slice[
                                    limit_indices=(12, 2)
                                    start_indices=(0, 1)
                                    strides=None
                                  ] szx
                                  utc:f64[12] = squeeze[dimensions=(1,)] utb
                                  utd:f64[400,12] = pjit[name=clip jaxpr=clip9] uso
                                    uta utc
                                  ute:f64[1,12] = broadcast_in_dim[
                                    broadcast_dimensions=(1,)
                                    shape=(1, 12)
                                  ] szy
                                  utf:f64[400,12] = mul ust ute
                                  utg:f64[1,12] = broadcast_in_dim[
                                    broadcast_dimensions=(1,)
                                    shape=(1, 12)
                                  ] szz
                                  uth:f64[400,12] = mul usy utg
                                  uti:f64[400,12] = add utf uth
                                  utj:f64[1,12] = broadcast_in_dim[
                                    broadcast_dimensions=(1,)
                                    shape=(1, 12)
                                  ] taa
                                  utk:f64[400,12] = mul utj uti
                                  utl:f64[1,12] = broadcast_in_dim[
                                    broadcast_dimensions=(1,)
                                    shape=(1, 12)
                                  ] tab
                                  utm:f64[400,12] = mul utl utd
                                  utn:f64[400,12] = add utm utk
                                  uto:f64[12,1] = slice[
                                    limit_indices=(12, 1)
                                    start_indices=(0, 0)
                                    strides=None
                                  ] tac
                                  utp:f64[12] = squeeze[dimensions=(1,)] uto
                                  utq:f64[12,1] = slice[
                                    limit_indices=(12, 2)
                                    start_indices=(0, 1)
                                    strides=None
                                  ] tac
                                  utr:f64[12] = squeeze[dimensions=(1,)] utq
                                  uts:f64[400,12] = pjit[name=clip jaxpr=clip9] utn
                                    utp utr
                                  utt:f64[1,12] = broadcast_in_dim[
                                    broadcast_dimensions=(1,)
                                    shape=(1, 12)
                                  ] taa
                                  utu:f64[400,12] = mul uts utt
                                  utv:f64[18] = broadcast_in_dim[
                                    broadcast_dimensions=()
                                    shape=(18,)
                                  ] 0.0
                                  utw:bool[12] = lt szw 0
                                  utx:i32[12] = add szw 18
                                  uty:i32[12] = select_n utw szw utx
                                  utz:i32[12,1] = broadcast_in_dim[
                                    broadcast_dimensions=(0,)
                                    shape=(12, 1)
                                  ] uty
                                  uua:f64[400,18] = broadcast_in_dim[
                                    broadcast_dimensions=(1,)
                                    shape=(400, 18)
                                  ] utv
                                  uub:f64[400,18] = scatter-add[
                                    dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0,), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                                    indices_are_sorted=False
                                    mode=GatherScatterMode.FILL_OR_DROP
                                    unique_indices=False
                                    update_consts=()
                                    update_jaxpr=jaxpr
                                  ] uua utz utu
                                  uuc:f64[400,18] = add tad uub
                                  uud:f64[18,18] = pjit[name=_diag jaxpr=_diag] tae
                                  uue:f64[18,18] = mul uud 0.0025
                                  uuf:f64[1,18,18] = broadcast_in_dim[
                                    broadcast_dimensions=(1, 2)
                                    shape=(1, 18, 18)
                                  ] uue
                                  uug:f64[400,18,18] = add tah uuf
                                  uuh:i64[18,18] = iota[
                                    dimension=0
                                    dtype=int64
                                    shape=(18, 18)
                                  ] 
                                  uui:i64[18,18] = iota[
                                    dimension=1
                                    dtype=int64
                                    shape=(18, 18)
                                  ] 
                                  uuj:i64[18,18] = add uuh 0
                                  uuk:bool[18,18] = eq uuj uui
                                  uul:f64[18,18] = convert_element_type[
                                    new_dtype=float64
                                    weak_type=False
                                  ] uuk
                                  uum:f64[400,18,18] = pjit[
                                    name=_solve
                                    jaxpr={ lambda ; uun:f64[400,18,18] uuo:f64[18,18]. let
                                        uup:f64[400,18,18] = stop_gradient uun
                                        uuq:f64[400,18,18] = pjit[
                                          name=_cholesky
                                          jaxpr={ lambda ; uur:f64[400,18,18]. let
                                              uus:f64[400,18,18] = transpose[
                                                permutation=(0, 2, 1)
                                              ] uur
                                              uut:f64[400,18,18] = transpose[
                                                permutation=(0, 2, 1)
                                              ] uus
                                              uuu:f64[400,18,18] = add uus uut
                                              uuv:f64[400,18,18] = div uuu 2.0
                                              uuw:f64[400,18,18] = cholesky uuv
                                              uux:f64[400,18,18] = pjit[
                                                name=tril
                                                jaxpr={ lambda ; uuy:f64[400,18,18]. let
                                                    uuz:i32[18,18] = iota[
                                                      dimension=0
                                                      dtype=int32
                                                      shape=(18, 18)
                                                    ] 
                                                    uva:i32[18,18] = add uuz 0
                                                    uvb:i32[18,18] = iota[
                                                      dimension=1
                                                      dtype=int32
                                                      shape=(18, 18)
                                                    ] 
                                                    uvc:bool[18,18] = ge uva uvb
                                                    uvd:bool[400,18,18] = broadcast_in_dim[
                                                      broadcast_dimensions=(1, 2)
                                                      shape=(400, 18, 18)
                                                    ] uvc
                                                    uve:f64[400,18,18] = broadcast_in_dim[
                                                      broadcast_dimensions=()
                                                      shape=(400, 18, 18)
                                                    ] 0.0
                                                    uvf:f64[400,18,18] = select_n uvd
                                                      uve uuy
                                                  in (uvf,) }
                                              ] uuw
                                              uvg:f64[400,18,18] = pjit[
                                                name=tril
                                                jaxpr={ lambda ; uvh:f64[400,18,18]. let
                                                    uvi:i32[18,18] = iota[
                                                      dimension=0
                                                      dtype=int32
                                                      shape=(18, 18)
                                                    ] 
                                                    uvj:i32[18,18] = add uvi 0
                                                    uvk:i32[18,18] = iota[
                                                      dimension=1
                                                      dtype=int32
                                                      shape=(18, 18)
                                                    ] 
                                                    uvl:bool[18,18] = ge uvj uvk
                                                    uvm:f64[18,18] = broadcast_in_dim[
                                                      broadcast_dimensions=()
                                                      shape=(18, 18)
                                                    ] 0.0
                                                    uvn:bool[400,18,18] = broadcast_in_dim[
                                                      broadcast_dimensions=(1, 2)
                                                      shape=(400, 18, 18)
                                                    ] uvl
                                                    uvo:f64[400,18,18] = broadcast_in_dim[
                                                      broadcast_dimensions=(1, 2)
                                                      shape=(400, 18, 18)
                                                    ] uvm
                                                    uvp:f64[400,18,18] = select_n uvn
                                                      uvo uvh
                                                  in (uvp,) }
                                              ] uux
                                              uvq:f64[400,18,18] = transpose[
                                                permutation=(0, 2, 1)
                                              ] uvg
                                            in (uvq,) }
                                        ] uup
                                        uvr:f64[18,18] = transpose[
                                          permutation=(1, 0)
                                        ] uuo
                                        uvs:f64[400,18,18] = broadcast_in_dim[
                                          broadcast_dimensions=(1, 2)
                                          shape=(400, 18, 18)
                                        ] uvr
                                        uvt:f64[400,18,18] = custom_linear_solve[
                                          const_lengths=_LinearSolveTuple(matvec=1, vecmat=1, solve=1, transpose_solve=1)
                                          jaxprs=_LinearSolveTuple(matvec={ lambda ; a:f64[400,18,18] b:f64[400,18,18]. let
    c:f64[400,18,18] = dot_general[
      dimension_numbers=(([2], [2]), ([0], [0]))
      precision=(Precision.HIGHEST, Precision.HIGHEST)
    ] a b
    d:f64[400,18,18] = transpose[permutation=(0, 2, 1)] c
  in (d,) }, vecmat={ lambda ; a:f64[400,18,18] b:f64[400,18,18]. let
    c:f64[400,18,18] = dot_general[
      dimension_numbers=(([2], [2]), ([0], [0]))
      precision=(Precision.HIGHEST, Precision.HIGHEST)
    ] a b
    d:f64[400,18,18] = transpose[permutation=(0, 2, 1)] c
  in (d,) }, solve={ lambda ; a:f64[400,18,18] b:f64[400,18,18]. let
    c:f64[400,18,18] = pjit[
      name=_cho_solve
      jaxpr={ lambda ; d:f64[400,18,18] e:f64[400,18,18]. let
          f:f64[400,18,18,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(400, 18, 18, 1)
          ] e
          g:f64[400,18,1,18] = transpose[permutation=(0, 2, 3, 1)] f
          h:f64[400,18,18] = reshape[dimensions=None new_sizes=(400, 18, 18)] g
          i:f64[400,18,18] = triangular_solve[
            conjugate_a=False
            left_side=True
            lower=False
            transpose_a=True
            unit_diagonal=False
          ] d h
          j:f64[400,18,1,18] = reshape[
            dimensions=None
            new_sizes=(400, 18, 1, 18)
          ] i
          k:f64[400,18,1,18] = slice[
            limit_indices=(400, 18, 1, 18)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] j
          l:f64[400,18,18,1] = transpose[permutation=(0, 3, 1, 2)] k
          m:f64[400,18,18] = squeeze[dimensions=(3,)] l
          n:f64[400,18,18,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(400, 18, 18, 1)
          ] m
          o:f64[400,18,1,18] = transpose[permutation=(0, 2, 3, 1)] n
          p:f64[400,18,18] = reshape[dimensions=None new_sizes=(400, 18, 18)] o
          q:f64[400,18,18] = triangular_solve[
            conjugate_a=False
            left_side=True
            lower=False
            transpose_a=False
            unit_diagonal=False
          ] d p
          r:f64[400,18,1,18] = reshape[
            dimensions=None
            new_sizes=(400, 18, 1, 18)
          ] q
          s:f64[400,18,1,18] = slice[
            limit_indices=(400, 18, 1, 18)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] r
          t:f64[400,18,18,1] = transpose[permutation=(0, 3, 1, 2)] s
          u:f64[400,18,18] = squeeze[dimensions=(3,)] t
        in (u,) }
    ] a b
  in (c,) }, transpose_solve={ lambda ; a:f64[400,18,18] b:f64[400,18,18]. let
    c:f64[400,18,18] = pjit[
      name=_cho_solve
      jaxpr={ lambda ; d:f64[400,18,18] e:f64[400,18,18]. let
          f:f64[400,18,18,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(400, 18, 18, 1)
          ] e
          g:f64[400,18,1,18] = transpose[permutation=(0, 2, 3, 1)] f
          h:f64[400,18,18] = reshape[dimensions=None new_sizes=(400, 18, 18)] g
          i:f64[400,18,18] = triangular_solve[
            conjugate_a=False
            left_side=True
            lower=False
            transpose_a=True
            unit_diagonal=False
          ] d h
          j:f64[400,18,1,18] = reshape[
            dimensions=None
            new_sizes=(400, 18, 1, 18)
          ] i
          k:f64[400,18,1,18] = slice[
            limit_indices=(400, 18, 1, 18)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] j
          l:f64[400,18,18,1] = transpose[permutation=(0, 3, 1, 2)] k
          m:f64[400,18,18] = squeeze[dimensions=(3,)] l
          n:f64[400,18,18,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(400, 18, 18, 1)
          ] m
          o:f64[400,18,1,18] = transpose[permutation=(0, 2, 3, 1)] n
          p:f64[400,18,18] = reshape[dimensions=None new_sizes=(400, 18, 18)] o
          q:f64[400,18,18] = triangular_solve[
            conjugate_a=False
            left_side=True
            lower=False
            transpose_a=False
            unit_diagonal=False
          ] d p
          r:f64[400,18,1,18] = reshape[
            dimensions=None
            new_sizes=(400, 18, 1, 18)
          ] q
          s:f64[400,18,1,18] = slice[
            limit_indices=(400, 18, 1, 18)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] r
          t:f64[400,18,18,1] = transpose[permutation=(0, 3, 1, 2)] s
          u:f64[400,18,18] = squeeze[dimensions=(3,)] t
        in (u,) }
    ] a b
  in (c,) })
                                        ] uun uun uuq uuq uvs
                                        uvu:f64[400,18,18] = transpose[
                                          permutation=(0, 2, 1)
                                        ] uvt
                                      in (uvu,) }
                                  ] uug uul
                                  uvv:f64[400,18] = add uuc tai
                                  uvw:f64[400,18] = dot_general[
                                    dimension_numbers=(([2], [1]), ([0], [0]))
                                    preferred_element_type=float64
                                  ] uum uvv
                                  uvx:f64[400,18] = mul uvw 0.0025
                                  uvy:f64[400,18] = add tag uvx
                                  uvz:f64[400,7] = slice[
                                    limit_indices=(400, 7)
                                    start_indices=(0, 0)
                                    strides=None
                                  ] taf
                                  uwa:f64[400,6] = slice[
                                    limit_indices=(400, 6)
                                    start_indices=(0, 0)
                                    strides=None
                                  ] uvy
                                  uwb:f64[400,1,7] = reshape[
                                    dimensions=None
                                    new_sizes=(400, 1, 7)
                                  ] uvz
                                  uwc:f64[400,1,6] = reshape[
                                    dimensions=None
                                    new_sizes=(400, 1, 6)
                                  ] uwa
                                  uwd:f64[400,1,4] = slice[
                                    limit_indices=(400, 1, 7)
                                    start_indices=(0, 0, 3)
                                    strides=None
                                  ] uwb
                                  uwe:f64[400,1,3] = slice[
                                    limit_indices=(400, 1, 6)
                                    start_indices=(0, 0, 3)
                                    strides=None
                                  ] uwc
                                  uwf:f64[400,1] = pjit[
                                    name=norm
                                    jaxpr={ lambda ; uwg:f64[400,1,3]. let
                                        uwh:f64[400,1,3] = mul uwg uwg
                                        uwi:f64[400,1] = reduce_sum[axes=(2,)] uwh
                                        uwj:f64[400,1] = sqrt uwi
                                      in (uwj,) }
                                  ] uwe
                                  uwk:f64[400,1] = add uwf 1e-08
                                  uwl:f64[400,1,1] = broadcast_in_dim[
                                    broadcast_dimensions=(0, 1)
                                    shape=(400, 1, 1)
                                  ] uwk
                                  uwm:f64[400,1,3] = div uwe uwl
                                  uwn:f64[400,1] = mul 0.0025 uwk
                                  uwo:f64[400,1,1] = slice[
                                    limit_indices=(400, 1, 1)
                                    start_indices=(0, 0, 0)
                                    strides=None
                                  ] uwm
                                  uwp:f64[400,1] = squeeze[dimensions=(2,)] uwo
                                  uwq:f64[400,1] = div uwn 2.0
                                  uwr:f64[400,1] = sin uwq
                                  uws:f64[400,1] = mul uwp uwr
                                  uwt:f64[400,1,1] = slice[
                                    limit_indices=(400, 1, 2)
                                    start_indices=(0, 0, 1)
                                    strides=None
                                  ] uwm
                                  uwu:f64[400,1] = squeeze[dimensions=(2,)] uwt
                                  uwv:f64[400,1] = div uwn 2.0
                                  uww:f64[400,1] = sin uwv
                                  uwx:f64[400,1] = mul uwu uww
                                  uwy:f64[400,1,1] = slice[
                                    limit_indices=(400, 1, 3)
                                    start_indices=(0, 0, 2)
                                    strides=None
                                  ] uwm
                                  uwz:f64[400,1] = squeeze[dimensions=(2,)] uwy
                                  uxa:f64[400,1] = div uwn 2.0
                                  uxb:f64[400,1] = sin uxa
                                  uxc:f64[400,1] = mul uwz uxb
                                  uxd:f64[400,1] = div uwn 2.0
                                  uxe:f64[400,1] = cos uxd
                                  uxf:f64[400,1,1] = broadcast_in_dim[
                                    broadcast_dimensions=(0, 1)
                                    shape=(400, 1, 1)
                                  ] uxe
                                  uxg:f64[400,1,1] = broadcast_in_dim[
                                    broadcast_dimensions=(0, 1)
                                    shape=(400, 1, 1)
                                  ] uws
                                  uxh:f64[400,1,1] = broadcast_in_dim[
                                    broadcast_dimensions=(0, 1)
                                    shape=(400, 1, 1)
                                  ] uwx
                                  uxi:f64[400,1,1] = broadcast_in_dim[
                                    broadcast_dimensions=(0, 1)
                                    shape=(400, 1, 1)
                                  ] uxc
                                  uxj:f64[400,1,4] = concatenate[dimension=2] uxf
                                    uxg uxh uxi
                                  uxk:f64[400,1,1] = slice[
                                    limit_indices=(400, 1, 1)
                                    start_indices=(0, 0, 0)
                                    strides=None
                                  ] uwd
                                  uxl:f64[400,1] = squeeze[dimensions=(2,)] uxk
                                  uxm:f64[400,1,1] = slice[
                                    limit_indices=(400, 1, 1)
                                    start_indices=(0, 0, 0)
                                    strides=None
                                  ] uxj
                                  uxn:f64[400,1] = squeeze[dimensions=(2,)] uxm
                                  uxo:f64[400,1] = mul uxl uxn
                                  uxp:f64[400,1,1] = slice[
                                    limit_indices=(400, 1, 2)
                                    start_indices=(0, 0, 1)
                                    strides=None
                                  ] uwd
                                  uxq:f64[400,1] = squeeze[dimensions=(2,)] uxp
                                  uxr:f64[400,1,1] = slice[
                                    limit_indices=(400, 1, 2)
                                    start_indices=(0, 0, 1)
                                    strides=None
                                  ] uxj
                                  uxs:f64[400,1] = squeeze[dimensions=(2,)] uxr
                                  uxt:f64[400,1] = mul uxq uxs
                                  uxu:f64[400,1] = sub uxo uxt
                                  uxv:f64[400,1,1] = slice[
                                    limit_indices=(400, 1, 3)
                                    start_indices=(0, 0, 2)
                                    strides=None
                                  ] uwd
                                  uxw:f64[400,1] = squeeze[dimensions=(2,)] uxv
                                  uxx:f64[400,1,1] = slice[
                                    limit_indices=(400, 1, 3)
                                    start_indices=(0, 0, 2)
                                    strides=None
                                  ] uxj
                                  uxy:f64[400,1] = squeeze[dimensions=(2,)] uxx
                                  uxz:f64[400,1] = mul uxw uxy
                                  uya:f64[400,1] = sub uxu uxz
                                  uyb:f64[400,1,1] = slice[
                                    limit_indices=(400, 1, 4)
                                    start_indices=(0, 0, 3)
                                    strides=None
                                  ] uwd
                                  uyc:f64[400,1] = squeeze[dimensions=(2,)] uyb
                                  uyd:f64[400,1,1] = slice[
                                    limit_indices=(400, 1, 4)
                                    start_indices=(0, 0, 3)
                                    strides=None
                                  ] uxj
                                  uye:f64[400,1] = squeeze[dimensions=(2,)] uyd
                                  uyf:f64[400,1] = mul uyc uye
                                  uyg:f64[400,1] = sub uya uyf
                                  uyh:f64[400,1,1] = slice[
                                    limit_indices=(400, 1, 1)
                                    start_indices=(0, 0, 0)
                                    strides=None
                                  ] uwd
                                  uyi:f64[400,1] = squeeze[dimensions=(2,)] uyh
                                  uyj:f64[400,1,1] = slice[
                                    limit_indices=(400, 1, 2)
                                    start_indices=(0, 0, 1)
                                    strides=None
                                  ] uxj
                                  uyk:f64[400,1] = squeeze[dimensions=(2,)] uyj
                                  uyl:f64[400,1] = mul uyi uyk
                                  uym:f64[400,1,1] = slice[
                                    limit_indices=(400, 1, 2)
                                    start_indices=(0, 0, 1)
                                    strides=None
                                  ] uwd
                                  uyn:f64[400,1] = squeeze[dimensions=(2,)] uym
                                  uyo:f64[400,1,1] = slice[
                                    limit_indices=(400, 1, 1)
                                    start_indices=(0, 0, 0)
                                    strides=None
                                  ] uxj
                                  uyp:f64[400,1] = squeeze[dimensions=(2,)] uyo
                                  uyq:f64[400,1] = mul uyn uyp
                                  uyr:f64[400,1] = add uyl uyq
                                  uys:f64[400,1,1] = slice[
                                    limit_indices=(400, 1, 3)
                                    start_indices=(0, 0, 2)
                                    strides=None
                                  ] uwd
                                  uyt:f64[400,1] = squeeze[dimensions=(2,)] uys
                                  uyu:f64[400,1,1] = slice[
                                    limit_indices=(400, 1, 4)
                                    start_indices=(0, 0, 3)
                                    strides=None
                                  ] uxj
                                  uyv:f64[400,1] = squeeze[dimensions=(2,)] uyu
                                  uyw:f64[400,1] = mul uyt uyv
                                  uyx:f64[400,1] = add uyr uyw
                                  uyy:f64[400,1,1] = slice[
                                    limit_indices=(400, 1, 4)
                                    start_indices=(0, 0, 3)
                                    strides=None
                                  ] uwd
                                  uyz:f64[400,1] = squeeze[dimensions=(2,)] uyy
                                  uza:f64[400,1,1] = slice[
                                    limit_indices=(400, 1, 3)
                                    start_indices=(0, 0, 2)
                                    strides=None
                                  ] uxj
                                  uzb:f64[400,1] = squeeze[dimensions=(2,)] uza
                                  uzc:f64[400,1] = mul uyz uzb
                                  uzd:f64[400,1] = sub uyx uzc
                                  uze:f64[400,1,1] = slice[
                                    limit_indices=(400, 1, 1)
                                    start_indices=(0, 0, 0)
                                    strides=None
                                  ] uwd
                                  uzf:f64[400,1] = squeeze[dimensions=(2,)] uze
                                  uzg:f64[400,1,1] = slice[
                                    limit_indices=(400, 1, 3)
                                    start_indices=(0, 0, 2)
                                    strides=None
                                  ] uxj
                                  uzh:f64[400,1] = squeeze[dimensions=(2,)] uzg
                                  uzi:f64[400,1] = mul uzf uzh
                                  uzj:f64[400,1,1] = slice[
                                    limit_indices=(400, 1, 2)
                                    start_indices=(0, 0, 1)
                                    strides=None
                                  ] uwd
                                  uzk:f64[400,1] = squeeze[dimensions=(2,)] uzj
                                  uzl:f64[400,1,1] = slice[
                                    limit_indices=(400, 1, 4)
                                    start_indices=(0, 0, 3)
                                    strides=None
                                  ] uxj
                                  uzm:f64[400,1] = squeeze[dimensions=(2,)] uzl
                                  uzn:f64[400,1] = mul uzk uzm
                                  uzo:f64[400,1] = sub uzi uzn
                                  uzp:f64[400,1,1] = slice[
                                    limit_indices=(400, 1, 3)
                                    start_indices=(0, 0, 2)
                                    strides=None
                                  ] uwd
                                  uzq:f64[400,1] = squeeze[dimensions=(2,)] uzp
                                  uzr:f64[400,1,1] = slice[
                                    limit_indices=(400, 1, 1)
                                    start_indices=(0, 0, 0)
                                    strides=None
                                  ] uxj
                                  uzs:f64[400,1] = squeeze[dimensions=(2,)] uzr
                                  uzt:f64[400,1] = mul uzq uzs
                                  uzu:f64[400,1] = add uzo uzt
                                  uzv:f64[400,1,1] = slice[
                                    limit_indices=(400, 1, 4)
                                    start_indices=(0, 0, 3)
                                    strides=None
                                  ] uwd
                                  uzw:f64[400,1] = squeeze[dimensions=(2,)] uzv
                                  uzx:f64[400,1,1] = slice[
                                    limit_indices=(400, 1, 2)
                                    start_indices=(0, 0, 1)
                                    strides=None
                                  ] uxj
                                  uzy:f64[400,1] = squeeze[dimensions=(2,)] uzx
                                  uzz:f64[400,1] = mul uzw uzy
                                  vaa:f64[400,1] = add uzu uzz
                                  vab:f64[400,1,1] = slice[
                                    limit_indices=(400, 1, 1)
                                    start_indices=(0, 0, 0)
                                    strides=None
                                  ] uwd
                                  vac:f64[400,1] = squeeze[dimensions=(2,)] vab
                                  vad:f64[400,1,1] = slice[
                                    limit_indices=(400, 1, 4)
                                    start_indices=(0, 0, 3)
                                    strides=None
                                  ] uxj
                                  vae:f64[400,1] = squeeze[dimensions=(2,)] vad
                                  vaf:f64[400,1] = mul vac vae
                                  vag:f64[400,1,1] = slice[
                                    limit_indices=(400, 1, 2)
                                    start_indices=(0, 0, 1)
                                    strides=None
                                  ] uwd
                                  vah:f64[400,1] = squeeze[dimensions=(2,)] vag
                                  vai:f64[400,1,1] = slice[
                                    limit_indices=(400, 1, 3)
                                    start_indices=(0, 0, 2)
                                    strides=None
                                  ] uxj
                                  vaj:f64[400,1] = squeeze[dimensions=(2,)] vai
                                  vak:f64[400,1] = mul vah vaj
                                  val:f64[400,1] = add vaf vak
                                  vam:f64[400,1,1] = slice[
                                    limit_indices=(400, 1, 3)
                                    start_indices=(0, 0, 2)
                                    strides=None
                                  ] uwd
                                  van:f64[400,1] = squeeze[dimensions=(2,)] vam
                                  vao:f64[400,1,1] = slice[
                                    limit_indices=(400, 1, 2)
                                    start_indices=(0, 0, 1)
                                    strides=None
                                  ] uxj
                                  vap:f64[400,1] = squeeze[dimensions=(2,)] vao
                                  vaq:f64[400,1] = mul van vap
                                  var:f64[400,1] = sub val vaq
                                  vas:f64[400,1,1] = slice[
                                    limit_indices=(400, 1, 4)
                                    start_indices=(0, 0, 3)
                                    strides=None
                                  ] uwd
                                  vat:f64[400,1] = squeeze[dimensions=(2,)] vas
                                  vau:f64[400,1,1] = slice[
                                    limit_indices=(400, 1, 1)
                                    start_indices=(0, 0, 0)
                                    strides=None
                                  ] uxj
                                  vav:f64[400,1] = squeeze[dimensions=(2,)] vau
                                  vaw:f64[400,1] = mul vat vav
                                  vax:f64[400,1] = add var vaw
                                  vay:f64[400,1,1] = broadcast_in_dim[
                                    broadcast_dimensions=(0, 1)
                                    shape=(400, 1, 1)
                                  ] uyg
                                  vaz:f64[400,1,1] = broadcast_in_dim[
                                    broadcast_dimensions=(0, 1)
                                    shape=(400, 1, 1)
                                  ] uzd
                                  vba:f64[400,1,1] = broadcast_in_dim[
                                    broadcast_dimensions=(0, 1)
                                    shape=(400, 1, 1)
                                  ] vaa
                                  vbb:f64[400,1,1] = broadcast_in_dim[
                                    broadcast_dimensions=(0, 1)
                                    shape=(400, 1, 1)
                                  ] vax
                                  vbc:f64[400,1,4] = concatenate[dimension=2] vay
                                    vaz vba vbb
                                  vbd:f64[400,1] = pjit[
                                    name=norm
                                    jaxpr={ lambda ; vbe:f64[400,1,4]. let
                                        vbf:f64[400,1,4] = mul vbe vbe
                                        vbg:f64[400,1] = reduce_sum[axes=(2,)] vbf
                                        vbh:f64[400,1] = sqrt vbg
                                      in (vbh,) }
                                  ] vbc
                                  vbi:f64[400,1,1] = broadcast_in_dim[
                                    broadcast_dimensions=(0, 1)
                                    shape=(400, 1, 1)
                                  ] vbd
                                  vbj:f64[400,1,4] = div vbc vbi
                                  vbk:f64[400,1,3] = slice[
                                    limit_indices=(400, 1, 3)
                                    start_indices=(0, 0, 0)
                                    strides=None
                                  ] uwb
                                  vbl:f64[400,1,3] = slice[
                                    limit_indices=(400, 1, 3)
                                    start_indices=(0, 0, 0)
                                    strides=None
                                  ] uwc
                                  vbm:f64[400,1,3] = mul vbl 0.0025
                                  vbn:f64[400,1,3] = add vbk vbm
                                  vbo:f64[400,1,7] = concatenate[dimension=2] vbn
                                    vbj
                                  vbp:f64[400,7] = reshape[
                                    dimensions=None
                                    new_sizes=(400, 7)
                                  ] vbo
                                  vbq:f64[400,12] = slice[
                                    limit_indices=(400, 19)
                                    start_indices=(0, 7)
                                    strides=None
                                  ] taf
                                  vbr:f64[400,12] = slice[
                                    limit_indices=(400, 18)
                                    start_indices=(0, 6)
                                    strides=None
                                  ] uvy
                                  vbs:f64[400,12,1] = reshape[
                                    dimensions=None
                                    new_sizes=(400, 12, 1)
                                  ] vbq
                                  vbt:f64[400,12,1] = reshape[
                                    dimensions=None
                                    new_sizes=(400, 12, 1)
                                  ] vbr
                                  vbu:f64[400,12,1] = mul vbt 0.0025
                                  vbv:f64[400,12,1] = add vbs vbu
                                  vbw:f64[400,12] = reshape[
                                    dimensions=None
                                    new_sizes=(400, 12)
                                  ] vbv
                                  vbx:f64[400,19] = concatenate[dimension=1] vbp
                                    vbw
                                in (vbx, uvy, tah, tai) }
                              length=4
                              linear=(False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False)
                              num_carry=4
                              num_consts=27
                              reverse=False
                              unroll=1
                            ] pvd pyq prj pyd pve pvf pvg pvh pvi pvj pvk pvl pvm
                              pvn pvo pvp pvq pvr pvs pvt pvu pvv pvw pvx pvy szb
                              pty pzk qbj srj pvz
                            vby:f64[400,4] = slice[
                              limit_indices=(400, 7)
                              start_indices=(0, 3)
                              strides=None
                            ] szc
                            vbz:f64[400,12] = slice[
                              limit_indices=(400, 19)
                              start_indices=(0, 7)
                              strides=None
                            ] szc
                            vca:f64[400,3] = slice[
                              limit_indices=(400, 3)
                              start_indices=(0, 0)
                              strides=None
                            ] szd
                            vcb:f64[4] = convert_element_type[
                              new_dtype=float64
                              weak_type=False
                            ] pwa
                            vcc:f64[1,4] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 4)
                            ] vcb
                            vcd:f64[400,4] = mul vby vcc
                            vce:f64[400,1] = slice[
                              limit_indices=(400, 1)
                              start_indices=(0, 0)
                              strides=None
                            ] vcd
                            vcf:f64[400] = squeeze[dimensions=(1,)] vce
                            vcg:f64[400,3] = slice[
                              limit_indices=(400, 4)
                              start_indices=(0, 1)
                              strides=None
                            ] vcd
                            vch:f64[400] = dot_general[
                              dimension_numbers=(([1], [1]), ([0], [0]))
                              preferred_element_type=float64
                            ] vcg vca
                            vci:f64[400,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(400, 1)
                            ] vch
                            vcj:f64[400,3] = mul vci vcg
                            vck:f64[400,3] = mul 2.0 vcj
                            vcl:f64[400] = mul vcf vcf
                            vcm:f64[400] = dot_general[
                              dimension_numbers=(([1], [1]), ([0], [0]))
                              preferred_element_type=float64
                            ] vcg vcg
                            vcn:f64[400] = sub vcl vcm
                            vco:f64[400,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(400, 1)
                            ] vcn
                            vcp:f64[400,3] = mul vco vca
                            vcq:f64[400,3] = add vck vcp
                            vcr:f64[400] = mul 2.0 vcf
                            vcs:f64[400,3] = pjit[name=cross jaxpr=cross9] vcg vca
                            vct:f64[400,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(400, 1)
                            ] vcr
                            vcu:f64[400,3] = mul vct vcs
                            vcv:f64[400,3] = add vcq vcu
                            vcw:f64[400,3] = slice[
                              limit_indices=(400, 6)
                              start_indices=(0, 3)
                              strides=None
                            ] szd
                            vcx:f64[400,1] = slice[
                              limit_indices=(400, 1)
                              start_indices=(0, 0)
                              strides=None
                            ] vby
                            vcy:f64[400] = squeeze[dimensions=(1,)] vcx
                            vcz:f64[400,3] = slice[
                              limit_indices=(400, 4)
                              start_indices=(0, 1)
                              strides=None
                            ] vby
                            vda:f64[400] = dot_general[
                              dimension_numbers=(([1], [1]), ([0], [0]))
                              preferred_element_type=float64
                            ] vcz vcw
                            vdb:f64[400,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(400, 1)
                            ] vda
                            vdc:f64[400,3] = mul vdb vcz
                            vdd:f64[400,3] = mul 2.0 vdc
                            vde:f64[400] = mul vcy vcy
                            vdf:f64[400] = dot_general[
                              dimension_numbers=(([1], [1]), ([0], [0]))
                              preferred_element_type=float64
                            ] vcz vcz
                            vdg:f64[400] = sub vde vdf
                            vdh:f64[400,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(400, 1)
                            ] vdg
                            vdi:f64[400,3] = mul vdh vcw
                            vdj:f64[400,3] = add vdd vdi
                            vdk:f64[400] = mul 2.0 vcy
                            vdl:f64[400,3] = pjit[name=cross jaxpr=cross9] vcz vcw
                            vdm:f64[400,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(400, 1)
                            ] vdk
                            vdn:f64[400,3] = mul vdm vdl
                            vdo:f64[400,3] = add vdj vdn
                            vdp:f64[400,12] = slice[
                              limit_indices=(400, 18)
                              start_indices=(0, 6)
                              strides=None
                            ] szd
                            vdq:f64[400,34] = concatenate[dimension=1] vby vbz vcv
                              vdo vdp
                            vdr:f64[400,1] = slice[
                              limit_indices=(400, 35)
                              start_indices=(0, 34)
                              strides=None
                            ] pzd
                            vds:f64[400] = squeeze[dimensions=(1,)] vdr
                            vdt:f64[400,1] = slice[
                              limit_indices=(400, 36)
                              start_indices=(0, 35)
                              strides=None
                            ] pzd
                            vdu:f64[400] = squeeze[dimensions=(1,)] vdt
                            vdv:f64[400,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(400, 1)
                            ] vds
                            vdw:f64[400,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(400, 1)
                            ] vdu
                            vdx:f64[400,2] = concatenate[dimension=1] vdv vdw
                            vdy:f64[400,36] = concatenate[dimension=1] vdq vdx
                            vdz:f64[36,1] = slice[
                              limit_indices=(36, 1)
                              start_indices=(0, 0)
                              strides=None
                            ] prj
                            vea:f64[36] = squeeze[dimensions=(1,)] vdz
                            veb:f64[1,36] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 36)
                            ] vea
                            vec:f64[400,36] = sub vdy veb
                            ved:f64[400,36] = mul 2.0 vec
                            vee:f64[36,1] = slice[
                              limit_indices=(36, 2)
                              start_indices=(0, 1)
                              strides=None
                            ] prj
                            vef:f64[36] = squeeze[dimensions=(1,)] vee
                            veg:f64[36,1] = slice[
                              limit_indices=(36, 1)
                              start_indices=(0, 0)
                              strides=None
                            ] prj
                            veh:f64[36] = squeeze[dimensions=(1,)] veg
                            vei:f64[36] = sub vef veh
                            vej:f64[1,36] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 36)
                            ] vei
                            vek:f64[400,36] = div ved vej
                            vel:f64[400,36] = sub vek 1.0
                          in (vel,) }
                        length=1
                        linear=(False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False)
                        num_carry=1
                        num_consts=122
                        reverse=False
                        unroll=1
                      ] pdt pdu plx pdv pdw pdx pdy pdz pea peb pec ped pee pef peg
                        peh pei pej pek pel pem pen peo pep peq per pes pet peu pev
                        pew pex pey pez pfa pfb pfc pfd pfe pff pfg pfh pfi pfj pfk
                        pfl pfm pfn pfo pfp pfq pfr pfs pft pfu pfv pfw pfx pfy pfz
                        pga pgb pgc pgd pge pgf pgg pgh pgi pgj pgk pgl pgm pgn pgo
                        pgp pgq pgr pgs pgt pgu pgv pgw pgx pgy pgz pha phb phc phd
                        phe phf phg phh phi phj phk phl phm phn pho php phq phr phs
                        pht phu phv phw phx phy phz pia pib pic pid pie pif pig pih
                        pqs pii pmb
                      vem:key<fry>[400] = random_wrap[impl=fry] poh
                      ven:f64[400,36] = pjit[
                        name=_normal
                        jaxpr={ lambda ; veo:key<fry>[400]. let
                            vep:f64[400,36] = pjit[
                              name=_normal_real
                              jaxpr={ lambda ; veq:key<fry>[400]. let
                                  ver:f64[400,36] = pjit[
                                    name=_uniform
                                    jaxpr={ lambda ; ves:key<fry>[400] vet:f64[]
                                        veu:f64[]. let
                                        vev:f64[1] = broadcast_in_dim[
                                          broadcast_dimensions=()
                                          shape=(1,)
                                        ] vet
                                        vew:f64[1] = broadcast_in_dim[
                                          broadcast_dimensions=()
                                          shape=(1,)
                                        ] veu
                                        vex:u64[400,36] = random_bits[
                                          bit_width=64
                                          shape=(36,)
                                        ] ves
                                        vey:u64[400,36] = shift_right_logical vex
                                          12
                                        vez:u64[400,36] = or vey 4607182418800017408
                                        vfa:f64[400,36] = bitcast_convert_type[
                                          new_dtype=float64
                                        ] vez
                                        vfb:f64[400,36] = sub vfa 1.0
                                        vfc:f64[1] = sub vew vev
                                        vfd:f64[1,1] = broadcast_in_dim[
                                          broadcast_dimensions=(1,)
                                          shape=(1, 1)
                                        ] vfc
                                        vfe:f64[400,36] = mul vfb vfd
                                        vff:f64[1,1] = broadcast_in_dim[
                                          broadcast_dimensions=(1,)
                                          shape=(1, 1)
                                        ] vev
                                        vfg:f64[400,36] = add vfe vff
                                        vfh:f64[1,1] = broadcast_in_dim[
                                          broadcast_dimensions=(1,)
                                          shape=(1, 1)
                                        ] vev
                                        vfi:f64[400,36] = max vfh vfg
                                      in (vfi,) }
                                  ] veq -0.9999999999999999 1.0
                                  vfj:f64[400,36] = erf_inv ver
                                  vfk:f64[400,36] = mul 1.4142135623730951 vfj
                                in (vfk,) }
                            ] veo
                          in (vep,) }
                      ] vem
                      vfl:f64[400,36] = mul prh ven
                      vfm:f64[400,36] = add pri vfl
                      vfn:f64[400,36] = add vfm 1.0
                      vfo:f64[36,1] = slice[
                        limit_indices=(36, 2)
                        start_indices=(0, 1)
                        strides=None
                      ] pdt
                      vfp:f64[36] = squeeze[dimensions=(1,)] vfo
                      vfq:f64[36,1] = slice[
                        limit_indices=(36, 1)
                        start_indices=(0, 0)
                        strides=None
                      ] pdt
                      vfr:f64[36] = squeeze[dimensions=(1,)] vfq
                      vfs:f64[36] = sub vfp vfr
                      vft:f64[1,36] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 36)
                      ] vfs
                      vfu:f64[400,36] = mul vfn vft
                      vfv:f64[400,36] = div vfu 2.0
                      vfw:f64[36,1] = slice[
                        limit_indices=(36, 1)
                        start_indices=(0, 0)
                        strides=None
                      ] pdt
                      vfx:f64[36] = squeeze[dimensions=(1,)] vfw
                      vfy:f64[1,36] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 36)
                      ] vfx
                      vfz:f64[400,36] = add vfv vfy
                      vga:f64[400,36] = add pmb 1.0
                      vgb:f64[36,1] = slice[
                        limit_indices=(36, 2)
                        start_indices=(0, 1)
                        strides=None
                      ] pdt
                      vgc:f64[36] = squeeze[dimensions=(1,)] vgb
                      vgd:f64[36,1] = slice[
                        limit_indices=(36, 1)
                        start_indices=(0, 0)
                        strides=None
                      ] pdt
                      vge:f64[36] = squeeze[dimensions=(1,)] vgd
                      vgf:f64[36] = sub vgc vge
                      vgg:f64[1,36] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 36)
                      ] vgf
                      vgh:f64[400,36] = mul vga vgg
                      vgi:f64[400,36] = div vgh 2.0
                      vgj:f64[36,1] = slice[
                        limit_indices=(36, 1)
                        start_indices=(0, 0)
                        strides=None
                      ] pdt
                      vgk:f64[36] = squeeze[dimensions=(1,)] vgj
                      vgl:f64[1,36] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 36)
                      ] vgk
                      vgm:f64[400,36] = add vgi vgl
                      vgn:f64[9,1] = slice[
                        limit_indices=(9, 2)
                        start_indices=(0, 1)
                        strides=None
                      ] pdu
                      vgo:f64[9] = squeeze[dimensions=(1,)] vgn
                      vgp:f64[9,1] = slice[
                        limit_indices=(9, 1)
                        start_indices=(0, 0)
                        strides=None
                      ] pdu
                      vgq:f64[9] = squeeze[dimensions=(1,)] vgp
                      vgr:f64[9] = sub vgo vgq
                      vgs:f64[1,9] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 9)
                      ] vgr
                      vgt:f64[400,9] = mul vgs plx
                      vgu:f64[400,9] = div vgt 2.0
                      vgv:f64[9,1] = slice[
                        limit_indices=(9, 2)
                        start_indices=(0, 1)
                        strides=None
                      ] pdu
                      vgw:f64[9] = squeeze[dimensions=(1,)] vgv
                      vgx:f64[9,1] = slice[
                        limit_indices=(9, 1)
                        start_indices=(0, 0)
                        strides=None
                      ] pdu
                      vgy:f64[9] = squeeze[dimensions=(1,)] vgx
                      vgz:f64[9] = add vgw vgy
                      vha:f64[9] = div vgz 2.0
                      vhb:f64[1,9] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 9)
                      ] vha
                      vhc:f64[400,9] = add vgu vhb
                      vhd:f64[400,36] = add pmb 1.0
                      vhe:f64[36,1] = slice[
                        limit_indices=(36, 2)
                        start_indices=(0, 1)
                        strides=None
                      ] pdt
                      vhf:f64[36] = squeeze[dimensions=(1,)] vhe
                      vhg:f64[36,1] = slice[
                        limit_indices=(36, 1)
                        start_indices=(0, 0)
                        strides=None
                      ] pdt
                      vhh:f64[36] = squeeze[dimensions=(1,)] vhg
                      vhi:f64[36] = sub vhf vhh
                      vhj:f64[1,36] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 36)
                      ] vhi
                      vhk:f64[400,36] = mul vhd vhj
                      vhl:f64[400,36] = div vhk 2.0
                      vhm:f64[36,1] = slice[
                        limit_indices=(36, 1)
                        start_indices=(0, 0)
                        strides=None
                      ] pdt
                      vhn:f64[36] = squeeze[dimensions=(1,)] vhm
                      vho:f64[1,36] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 36)
                      ] vhn
                      vhp:f64[400,36] = add vhl vho
                      vhq:f64[400,1] = slice[
                        limit_indices=(400, 9)
                        start_indices=(0, 8)
                        strides=None
                      ] vhc
                      vhr:f64[400] = squeeze[dimensions=(1,)] vhq
                      vhs:f64[] = mul pho 1.0
                      vht:f64[400,1] = slice[
                        limit_indices=(400, 35)
                        start_indices=(0, 34)
                        strides=None
                      ] vhp
                      vhu:f64[400] = squeeze[dimensions=(1,)] vht
                      vhv:f64[400,1] = slice[
                        limit_indices=(400, 36)
                        start_indices=(0, 35)
                        strides=None
                      ] vhp
                      vhw:f64[400] = squeeze[dimensions=(1,)] vhv
                      vhx:f64[400] = atan2 vhw vhu
                      vhy:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] pij
                      vhz:f64[] = squeeze[dimensions=(0,)] vhy
                      via:f64[400] = div vhx 6.283185307179586
                      vib:f64[400] = add via 0.5
                      vic:f64[400] = add vib vhz
                      vid:f64[400] = pjit[name=remainder jaxpr=remainder4] vic 1
                      vie:bool[400] = lt vid 0.5
                      vif:bool[400] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(400,)
                      ] False
                      vig:bool[400] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(400,)
                      ] True
                      vih:bool[400] = select_n vie vif vig
                      vii:f64[400] = div vid 0.5
                      vij:f64[400] = sub vid 0.5
                      vik:f64[400] = div vij 0.5
                      vil:f64[400] = select_n vih vik vii
                      vim:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] pij
                      vin:f64[] = squeeze[dimensions=(0,)] vim
                      vio:f64[400] = div vhx 6.283185307179586
                      vip:f64[400] = add vio 0.5
                      viq:f64[400] = add vip vin
                      vir:f64[400] = pjit[name=remainder jaxpr=remainder4] viq 1
                      vis:bool[400] = lt vir 0.5
                      vit:bool[400] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(400,)
                      ] False
                      viu:bool[400] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(400,)
                      ] True
                      viv:bool[400] = select_n vis vit viu
                      viw:f64[400] = div vir 0.5
                      vix:f64[400] = sub vir 0.5
                      viy:f64[400] = div vix 0.5
                      viz:f64[400] = select_n viv viy viw
                      vja:f64[1] = slice[
                        limit_indices=(3,)
                        start_indices=(2,)
                        strides=None
                      ] pij
                      vjb:f64[] = squeeze[dimensions=(0,)] vja
                      vjc:f64[400] = div vhx 6.283185307179586
                      vjd:f64[400] = add vjc 0.5
                      vje:f64[400] = add vjd vjb
                      vjf:f64[400] = pjit[name=remainder jaxpr=remainder4] vje 1
                      vjg:bool[400] = lt vjf 0.5
                      vjh:bool[400] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(400,)
                      ] False
                      vji:bool[400] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(400,)
                      ] True
                      vjj:bool[400] = select_n vjg vjh vji
                      vjk:f64[400] = div vjf 0.5
                      vjl:f64[400] = sub vjf 0.5
                      vjm:f64[400] = div vjl 0.5
                      vjn:f64[400] = select_n vjj vjm vjk
                      vjo:f64[1] = slice[
                        limit_indices=(4,)
                        start_indices=(3,)
                        strides=None
                      ] pij
                      vjp:f64[] = squeeze[dimensions=(0,)] vjo
                      vjq:f64[400] = div vhx 6.283185307179586
                      vjr:f64[400] = add vjq 0.5
                      vjs:f64[400] = add vjr vjp
                      vjt:f64[400] = pjit[name=remainder jaxpr=remainder4] vjs 1
                      vju:bool[400] = lt vjt 0.5
                      vjv:bool[400] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(400,)
                      ] False
                      vjw:bool[400] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(400,)
                      ] True
                      vjx:bool[400] = select_n vju vjv vjw
                      vjy:f64[400] = div vjt 0.5
                      vjz:f64[400] = sub vjt 0.5
                      vka:f64[400] = div vjz 0.5
                      vkb:f64[400] = select_n vjx vka vjy
                      vkc:f64[8] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(8,)
                      ] 0.0
                      vkd:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] php
                      vke:f64[] = squeeze[dimensions=(0,)] vkd
                      vkf:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] phq
                      vkg:f64[] = squeeze[dimensions=(0,)] vkf
                      vkh:f64[] = select_n True vkg vke
                      vki:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] php
                      vkj:f64[] = squeeze[dimensions=(0,)] vki
                      vkk:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] phr
                      vkl:f64[] = squeeze[dimensions=(0,)] vkk
                      vkm:f64[] = select_n True vkl vkj
                      vkn:f64[] = mul 0.0 0.25
                      vko:f64[] = atan2 vkm vkh
                      vkp:f64[] = add vko vkn
                      vkq:f64[] = cos vkp
                      vkr:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] phs
                      vks:f64[] = mul vkr vkq
                      vkt:f64[] = sub vks vkh
                      vku:f64[] = atan2 vkm vkh
                      vkv:f64[] = add vku vkn
                      vkw:f64[] = sin vkv
                      vkx:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] phs
                      vky:f64[] = mul vkx vkw
                      vkz:f64[] = sub vky vkm
                      vla:f64[2] = slice[
                        limit_indices=(2,)
                        start_indices=(0,)
                        strides=None
                      ] vkc
                      vlb:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] vla
                      vlc:f64[] = squeeze[dimensions=(0,)] vlb
                      vld:f64[2] = slice[
                        limit_indices=(2,)
                        start_indices=(0,)
                        strides=None
                      ] vkc
                      vle:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] vld
                      vlf:f64[] = squeeze[dimensions=(0,)] vle
                      vlg:f64[] = mul vhs 0.25
                      vlh:f64[] = add vlg vkt
                      vli:f64[] = add vlh vlc
                      vlj:f64[] = add vkz vlf
                      vlk:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] vli
                      vll:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] vlj
                      vlm:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] 0.0
                      vln:f64[3] = concatenate[dimension=0] vlk vll vlm
                      vlo:f64[3] = neg vln
                      vlp:f64[8] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(8,)
                      ] 0.0
                      vlq:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] php
                      vlr:f64[] = squeeze[dimensions=(0,)] vlq
                      vls:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] phq
                      vlt:f64[] = squeeze[dimensions=(0,)] vls
                      vlu:f64[] = select_n True vlt vlr
                      vlv:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] php
                      vlw:f64[] = squeeze[dimensions=(0,)] vlv
                      vlx:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] phr
                      vly:f64[] = squeeze[dimensions=(0,)] vlx
                      vlz:f64[] = select_n False vly vlw
                      vma:f64[] = mul 0.0 0.25
                      vmb:f64[] = atan2 vlz vlu
                      vmc:f64[] = add vmb vma
                      vmd:f64[] = cos vmc
                      vme:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] phs
                      vmf:f64[] = mul vme vmd
                      vmg:f64[] = sub vmf vlu
                      vmh:f64[] = atan2 vlz vlu
                      vmi:f64[] = add vmh vma
                      vmj:f64[] = sin vmi
                      vmk:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] phs
                      vml:f64[] = mul vmk vmj
                      vmm:f64[] = sub vml vlz
                      vmn:f64[2] = slice[
                        limit_indices=(4,)
                        start_indices=(2,)
                        strides=None
                      ] vlp
                      vmo:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] vmn
                      vmp:f64[] = squeeze[dimensions=(0,)] vmo
                      vmq:f64[2] = slice[
                        limit_indices=(4,)
                        start_indices=(2,)
                        strides=None
                      ] vlp
                      vmr:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] vmq
                      vms:f64[] = squeeze[dimensions=(0,)] vmr
                      vmt:f64[] = mul vhs 0.25
                      vmu:f64[] = add vmt vmg
                      vmv:f64[] = add vmu vmp
                      vmw:f64[] = add vmm vms
                      vmx:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] vmv
                      vmy:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] vmw
                      vmz:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] 0.0
                      vna:f64[3] = concatenate[dimension=0] vmx vmy vmz
                      vnb:f64[3] = neg vna
                      vnc:f64[8] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(8,)
                      ] 0.0
                      vnd:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] php
                      vne:f64[] = squeeze[dimensions=(0,)] vnd
                      vnf:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] phq
                      vng:f64[] = squeeze[dimensions=(0,)] vnf
                      vnh:f64[] = select_n False vng vne
                      vni:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] php
                      vnj:f64[] = squeeze[dimensions=(0,)] vni
                      vnk:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] phr
                      vnl:f64[] = squeeze[dimensions=(0,)] vnk
                      vnm:f64[] = select_n True vnl vnj
                      vnn:f64[] = mul 0.0 0.25
                      vno:f64[] = atan2 vnm vnh
                      vnp:f64[] = add vno vnn
                      vnq:f64[] = cos vnp
                      vnr:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] phs
                      vns:f64[] = mul vnr vnq
                      vnt:f64[] = sub vns vnh
                      vnu:f64[] = atan2 vnm vnh
                      vnv:f64[] = add vnu vnn
                      vnw:f64[] = sin vnv
                      vnx:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] phs
                      vny:f64[] = mul vnx vnw
                      vnz:f64[] = sub vny vnm
                      voa:f64[2] = slice[
                        limit_indices=(6,)
                        start_indices=(4,)
                        strides=None
                      ] vnc
                      vob:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] voa
                      voc:f64[] = squeeze[dimensions=(0,)] vob
                      vod:f64[2] = slice[
                        limit_indices=(6,)
                        start_indices=(4,)
                        strides=None
                      ] vnc
                      voe:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] vod
                      vof:f64[] = squeeze[dimensions=(0,)] voe
                      vog:f64[] = mul vhs 0.25
                      voh:f64[] = add vog vnt
                      voi:f64[] = add voh voc
                      voj:f64[] = add vnz vof
                      vok:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] voi
                      vol:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] voj
                      vom:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] 0.0
                      von:f64[3] = concatenate[dimension=0] vok vol vom
                      voo:f64[3] = neg von
                      vop:f64[8] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(8,)
                      ] 0.0
                      voq:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] php
                      vor:f64[] = squeeze[dimensions=(0,)] voq
                      vos:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] phq
                      vot:f64[] = squeeze[dimensions=(0,)] vos
                      vou:f64[] = select_n False vot vor
                      vov:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] php
                      vow:f64[] = squeeze[dimensions=(0,)] vov
                      vox:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] phr
                      voy:f64[] = squeeze[dimensions=(0,)] vox
                      voz:f64[] = select_n False voy vow
                      vpa:f64[] = mul 0.0 0.25
                      vpb:f64[] = atan2 voz vou
                      vpc:f64[] = add vpb vpa
                      vpd:f64[] = cos vpc
                      vpe:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] phs
                      vpf:f64[] = mul vpe vpd
                      vpg:f64[] = sub vpf vou
                      vph:f64[] = atan2 voz vou
                      vpi:f64[] = add vph vpa
                      vpj:f64[] = sin vpi
                      vpk:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] phs
                      vpl:f64[] = mul vpk vpj
                      vpm:f64[] = sub vpl voz
                      vpn:f64[2] = slice[
                        limit_indices=(8,)
                        start_indices=(6,)
                        strides=None
                      ] vop
                      vpo:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] vpn
                      vpp:f64[] = squeeze[dimensions=(0,)] vpo
                      vpq:f64[2] = slice[
                        limit_indices=(8,)
                        start_indices=(6,)
                        strides=None
                      ] vop
                      vpr:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] vpq
                      vps:f64[] = squeeze[dimensions=(0,)] vpr
                      vpt:f64[] = mul vhs 0.25
                      vpu:f64[] = add vpt vpg
                      vpv:f64[] = add vpu vpp
                      vpw:f64[] = add vpm vps
                      vpx:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] vpv
                      vpy:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] vpw
                      vpz:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] 0.0
                      vqa:f64[3] = concatenate[dimension=0] vpx vpy vpz
                      vqb:f64[3] = neg vqa
                      vqc:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] php
                      vqd:f64[] = squeeze[dimensions=(0,)] vqc
                      vqe:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] phq
                      vqf:f64[] = squeeze[dimensions=(0,)] vqe
                      vqg:f64[] = select_n True vqf vqd
                      vqh:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] php
                      vqi:f64[] = squeeze[dimensions=(0,)] vqh
                      vqj:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] phr
                      vqk:f64[] = squeeze[dimensions=(0,)] vqj
                      vql:f64[] = select_n True vqk vqi
                      vqm:f64[] = mul 0.0 0.25
                      vqn:f64[] = atan2 vql vqg
                      vqo:f64[] = add vqn vqm
                      vqp:f64[] = cos vqo
                      vqq:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] phs
                      vqr:f64[] = mul vqq vqp
                      vqs:f64[] = sub vqr vqg
                      vqt:f64[] = atan2 vql vqg
                      vqu:f64[] = add vqt vqm
                      vqv:f64[] = sin vqu
                      vqw:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] phs
                      vqx:f64[] = mul vqw vqv
                      vqy:f64[] = sub vqx vql
                      vqz:f64[2] = slice[
                        limit_indices=(2,)
                        start_indices=(0,)
                        strides=None
                      ] pht
                      vra:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] vqz
                      vrb:f64[] = squeeze[dimensions=(0,)] vra
                      vrc:f64[2] = slice[
                        limit_indices=(2,)
                        start_indices=(0,)
                        strides=None
                      ] pht
                      vrd:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] vrc
                      vre:f64[] = squeeze[dimensions=(0,)] vrd
                      vrf:f64[] = mul vhs 0.25
                      vrg:f64[] = add vrf vqs
                      vrh:f64[] = add vrg vrb
                      vri:f64[] = add vqy vre
                      vrj:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] vrh
                      vrk:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] vri
                      vrl:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] 0.0
                      vrm:f64[3] = concatenate[dimension=0] vrj vrk vrl
                      vrn:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] php
                      vro:f64[] = squeeze[dimensions=(0,)] vrn
                      vrp:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] phq
                      vrq:f64[] = squeeze[dimensions=(0,)] vrp
                      vrr:f64[] = select_n True vrq vro
                      vrs:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] php
                      vrt:f64[] = squeeze[dimensions=(0,)] vrs
                      vru:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] phr
                      vrv:f64[] = squeeze[dimensions=(0,)] vru
                      vrw:f64[] = select_n False vrv vrt
                      vrx:f64[] = mul 0.0 0.25
                      vry:f64[] = atan2 vrw vrr
                      vrz:f64[] = add vry vrx
                      vsa:f64[] = cos vrz
                      vsb:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] phs
                      vsc:f64[] = mul vsb vsa
                      vsd:f64[] = sub vsc vrr
                      vse:f64[] = atan2 vrw vrr
                      vsf:f64[] = add vse vrx
                      vsg:f64[] = sin vsf
                      vsh:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] phs
                      vsi:f64[] = mul vsh vsg
                      vsj:f64[] = sub vsi vrw
                      vsk:f64[2] = slice[
                        limit_indices=(4,)
                        start_indices=(2,)
                        strides=None
                      ] pht
                      vsl:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] vsk
                      vsm:f64[] = squeeze[dimensions=(0,)] vsl
                      vsn:f64[2] = slice[
                        limit_indices=(4,)
                        start_indices=(2,)
                        strides=None
                      ] pht
                      vso:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] vsn
                      vsp:f64[] = squeeze[dimensions=(0,)] vso
                      vsq:f64[] = mul vhs 0.25
                      vsr:f64[] = add vsq vsd
                      vss:f64[] = add vsr vsm
                      vst:f64[] = add vsj vsp
                      vsu:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] vss
                      vsv:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] vst
                      vsw:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] 0.0
                      vsx:f64[3] = concatenate[dimension=0] vsu vsv vsw
                      vsy:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] php
                      vsz:f64[] = squeeze[dimensions=(0,)] vsy
                      vta:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] phq
                      vtb:f64[] = squeeze[dimensions=(0,)] vta
                      vtc:f64[] = select_n False vtb vsz
                      vtd:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] php
                      vte:f64[] = squeeze[dimensions=(0,)] vtd
                      vtf:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] phr
                      vtg:f64[] = squeeze[dimensions=(0,)] vtf
                      vth:f64[] = select_n True vtg vte
                      vti:f64[] = mul 0.0 0.25
                      vtj:f64[] = atan2 vth vtc
                      vtk:f64[] = add vtj vti
                      vtl:f64[] = cos vtk
                      vtm:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] phs
                      vtn:f64[] = mul vtm vtl
                      vto:f64[] = sub vtn vtc
                      vtp:f64[] = atan2 vth vtc
                      vtq:f64[] = add vtp vti
                      vtr:f64[] = sin vtq
                      vts:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] phs
                      vtt:f64[] = mul vts vtr
                      vtu:f64[] = sub vtt vth
                      vtv:f64[2] = slice[
                        limit_indices=(6,)
                        start_indices=(4,)
                        strides=None
                      ] pht
                      vtw:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] vtv
                      vtx:f64[] = squeeze[dimensions=(0,)] vtw
                      vty:f64[2] = slice[
                        limit_indices=(6,)
                        start_indices=(4,)
                        strides=None
                      ] pht
                      vtz:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] vty
                      vua:f64[] = squeeze[dimensions=(0,)] vtz
                      vub:f64[] = mul vhs 0.25
                      vuc:f64[] = add vub vto
                      vud:f64[] = add vuc vtx
                      vue:f64[] = add vtu vua
                      vuf:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] vud
                      vug:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] vue
                      vuh:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] 0.0
                      vui:f64[3] = concatenate[dimension=0] vuf vug vuh
                      vuj:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] php
                      vuk:f64[] = squeeze[dimensions=(0,)] vuj
                      vul:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] phq
                      vum:f64[] = squeeze[dimensions=(0,)] vul
                      vun:f64[] = select_n False vum vuk
                      vuo:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] php
                      vup:f64[] = squeeze[dimensions=(0,)] vuo
                      vuq:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] phr
                      vur:f64[] = squeeze[dimensions=(0,)] vuq
                      vus:f64[] = select_n False vur vup
                      vut:f64[] = mul 0.0 0.25
                      vuu:f64[] = atan2 vus vun
                      vuv:f64[] = add vuu vut
                      vuw:f64[] = cos vuv
                      vux:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] phs
                      vuy:f64[] = mul vux vuw
                      vuz:f64[] = sub vuy vun
                      vva:f64[] = atan2 vus vun
                      vvb:f64[] = add vva vut
                      vvc:f64[] = sin vvb
                      vvd:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] phs
                      vve:f64[] = mul vvd vvc
                      vvf:f64[] = sub vve vus
                      vvg:f64[2] = slice[
                        limit_indices=(8,)
                        start_indices=(6,)
                        strides=None
                      ] pht
                      vvh:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] vvg
                      vvi:f64[] = squeeze[dimensions=(0,)] vvh
                      vvj:f64[2] = slice[
                        limit_indices=(8,)
                        start_indices=(6,)
                        strides=None
                      ] pht
                      vvk:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] vvj
                      vvl:f64[] = squeeze[dimensions=(0,)] vvk
                      vvm:f64[] = mul vhs 0.25
                      vvn:f64[] = add vvm vuz
                      vvo:f64[] = add vvn vvi
                      vvp:f64[] = add vvf vvl
                      vvq:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] vvo
                      vvr:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] vvp
                      vvs:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] 0.0
                      vvt:f64[3] = concatenate[dimension=0] vvq vvr vvs
                      vvu:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] vlo
                      vvv:f64[] = squeeze[dimensions=(0,)] vvu
                      vvw:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] vrm
                      vvx:f64[] = squeeze[dimensions=(0,)] vvw
                      vvy:f64[] = sub vvx vvv
                      vvz:f64[] = div vvy 6.283185307179586
                      vwa:f64[400] = mul 6.283185307179586 vil
                      vwb:f64[400] = mul 6.283185307179586 vil
                      vwc:f64[400] = sin vwb
                      vwd:f64[400] = sub vwa vwc
                      vwe:f64[400] = mul vvz vwd
                      vwf:f64[400] = add vwe vvv
                      vwg:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] vlo
                      vwh:f64[] = squeeze[dimensions=(0,)] vwg
                      vwi:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] vrm
                      vwj:f64[] = squeeze[dimensions=(0,)] vwi
                      vwk:f64[] = sub vwj vwh
                      vwl:f64[] = div vwk 6.283185307179586
                      vwm:f64[400] = mul 6.283185307179586 vil
                      vwn:f64[400] = mul 6.283185307179586 vil
                      vwo:f64[400] = sin vwn
                      vwp:f64[400] = sub vwm vwo
                      vwq:f64[400] = mul vwl vwp
                      vwr:f64[400] = add vwq vwh
                      vws:f64[400] = mul 6.283185307179586 vil
                      vwt:f64[400] = cos vws
                      vwu:f64[400] = sub 1.0 vwt
                      vwv:f64[400] = mul 0.045 vwu
                      vww:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] vwf
                      vwx:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] vwr
                      vwy:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] vwv
                      vwz:f64[400,3] = concatenate[dimension=1] vww vwx vwy
                      vxa:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] vnb
                      vxb:f64[] = squeeze[dimensions=(0,)] vxa
                      vxc:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] vsx
                      vxd:f64[] = squeeze[dimensions=(0,)] vxc
                      vxe:f64[] = sub vxd vxb
                      vxf:f64[] = div vxe 6.283185307179586
                      vxg:f64[400] = mul 6.283185307179586 viz
                      vxh:f64[400] = mul 6.283185307179586 viz
                      vxi:f64[400] = sin vxh
                      vxj:f64[400] = sub vxg vxi
                      vxk:f64[400] = mul vxf vxj
                      vxl:f64[400] = add vxk vxb
                      vxm:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] vnb
                      vxn:f64[] = squeeze[dimensions=(0,)] vxm
                      vxo:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] vsx
                      vxp:f64[] = squeeze[dimensions=(0,)] vxo
                      vxq:f64[] = sub vxp vxn
                      vxr:f64[] = div vxq 6.283185307179586
                      vxs:f64[400] = mul 6.283185307179586 viz
                      vxt:f64[400] = mul 6.283185307179586 viz
                      vxu:f64[400] = sin vxt
                      vxv:f64[400] = sub vxs vxu
                      vxw:f64[400] = mul vxr vxv
                      vxx:f64[400] = add vxw vxn
                      vxy:f64[400] = mul 6.283185307179586 viz
                      vxz:f64[400] = cos vxy
                      vya:f64[400] = sub 1.0 vxz
                      vyb:f64[400] = mul 0.045 vya
                      vyc:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] vxl
                      vyd:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] vxx
                      vye:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] vyb
                      vyf:f64[400,3] = concatenate[dimension=1] vyc vyd vye
                      vyg:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] voo
                      vyh:f64[] = squeeze[dimensions=(0,)] vyg
                      vyi:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] vui
                      vyj:f64[] = squeeze[dimensions=(0,)] vyi
                      vyk:f64[] = sub vyj vyh
                      vyl:f64[] = div vyk 6.283185307179586
                      vym:f64[400] = mul 6.283185307179586 vjn
                      vyn:f64[400] = mul 6.283185307179586 vjn
                      vyo:f64[400] = sin vyn
                      vyp:f64[400] = sub vym vyo
                      vyq:f64[400] = mul vyl vyp
                      vyr:f64[400] = add vyq vyh
                      vys:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] voo
                      vyt:f64[] = squeeze[dimensions=(0,)] vys
                      vyu:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] vui
                      vyv:f64[] = squeeze[dimensions=(0,)] vyu
                      vyw:f64[] = sub vyv vyt
                      vyx:f64[] = div vyw 6.283185307179586
                      vyy:f64[400] = mul 6.283185307179586 vjn
                      vyz:f64[400] = mul 6.283185307179586 vjn
                      vza:f64[400] = sin vyz
                      vzb:f64[400] = sub vyy vza
                      vzc:f64[400] = mul vyx vzb
                      vzd:f64[400] = add vzc vyt
                      vze:f64[400] = mul 6.283185307179586 vjn
                      vzf:f64[400] = cos vze
                      vzg:f64[400] = sub 1.0 vzf
                      vzh:f64[400] = mul 0.045 vzg
                      vzi:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] vyr
                      vzj:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] vzd
                      vzk:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] vzh
                      vzl:f64[400,3] = concatenate[dimension=1] vzi vzj vzk
                      vzm:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] vqb
                      vzn:f64[] = squeeze[dimensions=(0,)] vzm
                      vzo:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] vvt
                      vzp:f64[] = squeeze[dimensions=(0,)] vzo
                      vzq:f64[] = sub vzp vzn
                      vzr:f64[] = div vzq 6.283185307179586
                      vzs:f64[400] = mul 6.283185307179586 vkb
                      vzt:f64[400] = mul 6.283185307179586 vkb
                      vzu:f64[400] = sin vzt
                      vzv:f64[400] = sub vzs vzu
                      vzw:f64[400] = mul vzr vzv
                      vzx:f64[400] = add vzw vzn
                      vzy:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] vqb
                      vzz:f64[] = squeeze[dimensions=(0,)] vzy
                      waa:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] vvt
                      wab:f64[] = squeeze[dimensions=(0,)] waa
                      wac:f64[] = sub wab vzz
                      wad:f64[] = div wac 6.283185307179586
                      wae:f64[400] = mul 6.283185307179586 vkb
                      waf:f64[400] = mul 6.283185307179586 vkb
                      wag:f64[400] = sin waf
                      wah:f64[400] = sub wae wag
                      wai:f64[400] = mul wad wah
                      waj:f64[400] = add wai vzz
                      wak:f64[400] = mul 6.283185307179586 vkb
                      wal:f64[400] = cos wak
                      wam:f64[400] = sub 1.0 wal
                      wan:f64[400] = mul 0.045 wam
                      wao:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] vzx
                      wap:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] waj
                      waq:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] wan
                      war:f64[400,3] = concatenate[dimension=1] wao wap waq
                      was:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] vrm
                      wat:f64[] = squeeze[dimensions=(0,)] was
                      wau:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] vlo
                      wav:f64[] = squeeze[dimensions=(0,)] wau
                      waw:f64[] = sub wav wat
                      wax:f64[] = div waw 6.283185307179586
                      way:f64[400] = mul 6.283185307179586 vil
                      waz:f64[400] = mul 6.283185307179586 vil
                      wba:f64[400] = sin waz
                      wbb:f64[400] = sub way wba
                      wbc:f64[400] = mul wax wbb
                      wbd:f64[400] = add wbc wat
                      wbe:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] vrm
                      wbf:f64[] = squeeze[dimensions=(0,)] wbe
                      wbg:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] vlo
                      wbh:f64[] = squeeze[dimensions=(0,)] wbg
                      wbi:f64[] = sub wbh wbf
                      wbj:f64[] = div wbi 6.283185307179586
                      wbk:f64[400] = mul 6.283185307179586 vil
                      wbl:f64[400] = mul 6.283185307179586 vil
                      wbm:f64[400] = sin wbl
                      wbn:f64[400] = sub wbk wbm
                      wbo:f64[400] = mul wbj wbn
                      wbp:f64[400] = add wbo wbf
                      wbq:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] wbd
                      wbr:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] wbp
                      wbs:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] 0.0
                      wbt:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(400, 1)
                      ] wbs
                      wbu:f64[400,3] = concatenate[dimension=1] wbq wbr wbt
                      wbv:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] vsx
                      wbw:f64[] = squeeze[dimensions=(0,)] wbv
                      wbx:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] vnb
                      wby:f64[] = squeeze[dimensions=(0,)] wbx
                      wbz:f64[] = sub wby wbw
                      wca:f64[] = div wbz 6.283185307179586
                      wcb:f64[400] = mul 6.283185307179586 viz
                      wcc:f64[400] = mul 6.283185307179586 viz
                      wcd:f64[400] = sin wcc
                      wce:f64[400] = sub wcb wcd
                      wcf:f64[400] = mul wca wce
                      wcg:f64[400] = add wcf wbw
                      wch:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] vsx
                      wci:f64[] = squeeze[dimensions=(0,)] wch
                      wcj:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] vnb
                      wck:f64[] = squeeze[dimensions=(0,)] wcj
                      wcl:f64[] = sub wck wci
                      wcm:f64[] = div wcl 6.283185307179586
                      wcn:f64[400] = mul 6.283185307179586 viz
                      wco:f64[400] = mul 6.283185307179586 viz
                      wcp:f64[400] = sin wco
                      wcq:f64[400] = sub wcn wcp
                      wcr:f64[400] = mul wcm wcq
                      wcs:f64[400] = add wcr wci
                      wct:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] wcg
                      wcu:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] wcs
                      wcv:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] 0.0
                      wcw:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(400, 1)
                      ] wcv
                      wcx:f64[400,3] = concatenate[dimension=1] wct wcu wcw
                      wcy:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] vui
                      wcz:f64[] = squeeze[dimensions=(0,)] wcy
                      wda:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] voo
                      wdb:f64[] = squeeze[dimensions=(0,)] wda
                      wdc:f64[] = sub wdb wcz
                      wdd:f64[] = div wdc 6.283185307179586
                      wde:f64[400] = mul 6.283185307179586 vjn
                      wdf:f64[400] = mul 6.283185307179586 vjn
                      wdg:f64[400] = sin wdf
                      wdh:f64[400] = sub wde wdg
                      wdi:f64[400] = mul wdd wdh
                      wdj:f64[400] = add wdi wcz
                      wdk:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] vui
                      wdl:f64[] = squeeze[dimensions=(0,)] wdk
                      wdm:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] voo
                      wdn:f64[] = squeeze[dimensions=(0,)] wdm
                      wdo:f64[] = sub wdn wdl
                      wdp:f64[] = div wdo 6.283185307179586
                      wdq:f64[400] = mul 6.283185307179586 vjn
                      wdr:f64[400] = mul 6.283185307179586 vjn
                      wds:f64[400] = sin wdr
                      wdt:f64[400] = sub wdq wds
                      wdu:f64[400] = mul wdp wdt
                      wdv:f64[400] = add wdu wdl
                      wdw:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] wdj
                      wdx:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] wdv
                      wdy:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] 0.0
                      wdz:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(400, 1)
                      ] wdy
                      wea:f64[400,3] = concatenate[dimension=1] wdw wdx wdz
                      web:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] vvt
                      wec:f64[] = squeeze[dimensions=(0,)] web
                      wed:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] vqb
                      wee:f64[] = squeeze[dimensions=(0,)] wed
                      wef:f64[] = sub wee wec
                      weg:f64[] = div wef 6.283185307179586
                      weh:f64[400] = mul 6.283185307179586 vkb
                      wei:f64[400] = mul 6.283185307179586 vkb
                      wej:f64[400] = sin wei
                      wek:f64[400] = sub weh wej
                      wel:f64[400] = mul weg wek
                      wem:f64[400] = add wel wec
                      wen:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] vvt
                      weo:f64[] = squeeze[dimensions=(0,)] wen
                      wep:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] vqb
                      weq:f64[] = squeeze[dimensions=(0,)] wep
                      wer:f64[] = sub weq weo
                      wes:f64[] = div wer 6.283185307179586
                      wet:f64[400] = mul 6.283185307179586 vkb
                      weu:f64[400] = mul 6.283185307179586 vkb
                      wev:f64[400] = sin weu
                      wew:f64[400] = sub wet wev
                      wex:f64[400] = mul wes wew
                      wey:f64[400] = add wex weo
                      wez:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] wem
                      wfa:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] wey
                      wfb:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] 0.0
                      wfc:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(400, 1)
                      ] wfb
                      wfd:f64[400,3] = concatenate[dimension=1] wez wfa wfc
                      wfe:bool[400,3] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 3)
                      ] vih
                      wff:f64[400,3] = select_n wfe vwz wbu
                      wfg:f64[1,3] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 3)
                      ] php
                      wfh:f64[400,3] = add wfg wff
                      wfi:bool[400,3] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 3)
                      ] viv
                      wfj:f64[400,3] = select_n wfi vyf wcx
                      wfk:f64[1,3] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 3)
                      ] phr
                      wfl:f64[400,3] = add wfk wfj
                      wfm:bool[400,3] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 3)
                      ] vjj
                      wfn:f64[400,3] = select_n wfm vzl wea
                      wfo:f64[1,3] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 3)
                      ] phq
                      wfp:f64[400,3] = add wfo wfn
                      wfq:bool[400,3] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 3)
                      ] vjx
                      wfr:f64[400,3] = select_n wfq war wfd
                      wfs:f64[1,3] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 3)
                      ] phu
                      wft:f64[400,3] = add wfs wfr
                      wfu:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] 0.0
                      wfv:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] 0.0
                      wfw:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] vhr
                      wfx:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(400, 1)
                      ] wfu
                      wfy:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(400, 1)
                      ] wfv
                      wfz:f64[400,3] = concatenate[dimension=1] wfx wfy wfw
                      wga:f64[400,1,3] = reshape[
                        dimensions=None
                        new_sizes=(400, 1, 3)
                      ] wfz
                      wgb:f64[400,3] = squeeze[dimensions=(1,)] wga
                      wgc:f64[400,4,3] = broadcast_in_dim[
                        broadcast_dimensions=(0, 2)
                        shape=(400, 4, 3)
                      ] wgb
                      wgd:f64[400,12] = reshape[
                        dimensions=None
                        new_sizes=(400, 12)
                      ] wgc
                      wge:f64[400,12] = concatenate[dimension=1] wfh wfl wfp wft
                      wgf:f64[400,12] = sub wge wgd
                      wgg:f64[400,8] = slice[
                        limit_indices=(400, 8)
                        start_indices=(0, 0)
                        strides=None
                      ] vhc
                      wgh:f64[400,1] = slice[
                        limit_indices=(400, 1)
                        start_indices=(0, 0)
                        strides=None
                      ] wgg
                      wgi:f64[400] = squeeze[dimensions=(1,)] wgh
                      wgj:f64[400,1] = slice[
                        limit_indices=(400, 5)
                        start_indices=(0, 4)
                        strides=None
                      ] wgg
                      wgk:f64[400] = squeeze[dimensions=(1,)] wgj
                      wgl:f64[400,1] = slice[
                        limit_indices=(400, 2)
                        start_indices=(0, 1)
                        strides=None
                      ] wgg
                      wgm:f64[400] = squeeze[dimensions=(1,)] wgl
                      wgn:f64[400,1] = slice[
                        limit_indices=(400, 6)
                        start_indices=(0, 5)
                        strides=None
                      ] wgg
                      wgo:f64[400] = squeeze[dimensions=(1,)] wgn
                      wgp:f64[400,1] = slice[
                        limit_indices=(400, 3)
                        start_indices=(0, 2)
                        strides=None
                      ] wgg
                      wgq:f64[400] = squeeze[dimensions=(1,)] wgp
                      wgr:f64[400,1] = slice[
                        limit_indices=(400, 7)
                        start_indices=(0, 6)
                        strides=None
                      ] wgg
                      wgs:f64[400] = squeeze[dimensions=(1,)] wgr
                      wgt:f64[400,1] = slice[
                        limit_indices=(400, 4)
                        start_indices=(0, 3)
                        strides=None
                      ] wgg
                      wgu:f64[400] = squeeze[dimensions=(1,)] wgt
                      wgv:f64[400,1] = slice[
                        limit_indices=(400, 8)
                        start_indices=(0, 7)
                        strides=None
                      ] wgg
                      wgw:f64[400] = squeeze[dimensions=(1,)] wgv
                      wgx:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] wgi
                      wgy:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] wgk
                      wgz:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] 0.0
                      wha:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] wgm
                      whb:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] wgo
                      whc:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] 0.0
                      whd:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] wgq
                      whe:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] wgs
                      whf:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] 0.0
                      whg:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] wgu
                      whh:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] wgw
                      whi:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] 0.0
                      whj:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(400, 1)
                      ] wgz
                      whk:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(400, 1)
                      ] whc
                      whl:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(400, 1)
                      ] whf
                      whm:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(400, 1)
                      ] whi
                      whn:f64[400,12] = concatenate[dimension=1] wgx wgy whj wha
                        whb whk whd whe whl whg whh whm
                      who:f64[400,12] = add wgf whn
                      whp:f64[400,3] = slice[
                        limit_indices=(400, 3)
                        start_indices=(0, 0)
                        strides=None
                      ] who
                      whq:f64[] = select_n False 0.1881 -0.1881
                      whr:f64[] = select_n True 0.04675 -0.04675
                      whs:f64[400,1] = slice[
                        limit_indices=(400, 1)
                        start_indices=(0, 0)
                        strides=None
                      ] whp
                      wht:f64[400] = squeeze[dimensions=(1,)] whs
                      whu:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] whq
                      whv:f64[400] = sub wht whu
                      whw:f64[400,1] = slice[
                        limit_indices=(400, 2)
                        start_indices=(0, 1)
                        strides=None
                      ] whp
                      whx:f64[400] = squeeze[dimensions=(1,)] whw
                      why:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] whr
                      whz:f64[400] = sub whx why
                      wia:f64[400,1] = slice[
                        limit_indices=(400, 3)
                        start_indices=(0, 2)
                        strides=None
                      ] whp
                      wib:f64[400] = squeeze[dimensions=(1,)] wia
                      wic:f64[] = select_n True 0.08 -0.08
                      wid:f64[400] = integer_pow[y=2] whv
                      wie:f64[400] = integer_pow[y=2] whz
                      wif:f64[400] = add wid wie
                      wig:f64[400] = integer_pow[y=2] wib
                      wih:f64[400] = add wif wig
                      wii:f64[400] = sqrt wih
                      wij:f64[400] = integer_pow[y=2] wii
                      wik:f64[400] = sub wij 0.0064
                      wil:f64[400] = sqrt wik
                      wim:f64[400] = integer_pow[y=2] whz
                      win:f64[400] = integer_pow[y=2] wib
                      wio:f64[400] = add wim win
                      wip:f64[] = integer_pow[y=2] wic
                      wiq:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] wip
                      wir:f64[400] = sub wio wiq
                      wis:f64[400] = sqrt wir
                      wit:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] wic
                      wiu:f64[400] = mul wib wit
                      wiv:f64[400] = mul whz wis
                      wiw:f64[400] = add wiu wiv
                      wix:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] wic
                      wiy:f64[400] = mul whz wix
                      wiz:f64[400] = mul wib wis
                      wja:f64[400] = sub wiy wiz
                      wjb:f64[400] = atan2 wiw wja
                      wjc:f64[400] = integer_pow[y=2] wil
                      wjd:f64[400] = sub 0.090738 wjc
                      wje:f64[] = abs 0.045369
                      wjf:f64[] = mul 2.0 wje
                      wjg:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] wjf
                      wjh:f64[400] = div wjd wjg
                      wji:f64[1] = slice[
                        limit_indices=(3,)
                        start_indices=(2,)
                        strides=None
                      ] phv
                      wjj:f64[] = squeeze[dimensions=(0,)] wji
                      wjk:f64[1] = slice[
                        limit_indices=(3,)
                        start_indices=(2,)
                        strides=None
                      ] phw
                      wjl:f64[] = squeeze[dimensions=(0,)] wjk
                      wjm:f64[] = add 3.141592653589793 wjj
                      wjn:f64[] = cos wjm
                      wjo:f64[] = add 3.141592653589793 wjl
                      wjp:f64[] = cos wjo
                      wjq:f64[400] = pjit[name=clip jaxpr=clip5] wjh wjn wjp
                      wjr:f64[400] = acos wjq
                      wjs:f64[400] = sub 3.141592653589793 wjr
                      wjt:f64[400] = neg wjs
                      wju:f64[400] = sin wjb
                      wjv:f64[400] = mul whz wju
                      wjw:f64[400] = cos wjb
                      wjx:f64[400] = mul wib wjw
                      wjy:f64[400] = sub wjv wjx
                      wjz:f64[400] = sin wjt
                      wka:f64[400] = mul -0.213 wjz
                      wkb:f64[400] = cos wjt
                      wkc:f64[400] = mul -0.213 wkb
                      wkd:f64[400] = add -0.213 wkc
                      wke:f64[400] = mul wka wjy
                      wkf:f64[400] = mul wkd whv
                      wkg:f64[400] = add wke wkf
                      wkh:f64[400] = mul wka whv
                      wki:f64[400] = mul wkd wjy
                      wkj:f64[400] = sub wkh wki
                      wkk:f64[400] = atan2 wkg wkj
                      wkl:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] wjb
                      wkm:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] wkk
                      wkn:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] wjt
                      wko:f64[400,3] = concatenate[dimension=1] wkl wkm wkn
                      wkp:f64[400,3] = slice[
                        limit_indices=(400, 6)
                        start_indices=(0, 3)
                        strides=None
                      ] who
                      wkq:f64[] = select_n False 0.1881 -0.1881
                      wkr:f64[] = select_n False 0.04675 -0.04675
                      wks:f64[400,1] = slice[
                        limit_indices=(400, 1)
                        start_indices=(0, 0)
                        strides=None
                      ] wkp
                      wkt:f64[400] = squeeze[dimensions=(1,)] wks
                      wku:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] wkq
                      wkv:f64[400] = sub wkt wku
                      wkw:f64[400,1] = slice[
                        limit_indices=(400, 2)
                        start_indices=(0, 1)
                        strides=None
                      ] wkp
                      wkx:f64[400] = squeeze[dimensions=(1,)] wkw
                      wky:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] wkr
                      wkz:f64[400] = sub wkx wky
                      wla:f64[400,1] = slice[
                        limit_indices=(400, 3)
                        start_indices=(0, 2)
                        strides=None
                      ] wkp
                      wlb:f64[400] = squeeze[dimensions=(1,)] wla
                      wlc:f64[] = select_n False 0.08 -0.08
                      wld:f64[400] = integer_pow[y=2] wkv
                      wle:f64[400] = integer_pow[y=2] wkz
                      wlf:f64[400] = add wld wle
                      wlg:f64[400] = integer_pow[y=2] wlb
                      wlh:f64[400] = add wlf wlg
                      wli:f64[400] = sqrt wlh
                      wlj:f64[400] = integer_pow[y=2] wli
                      wlk:f64[400] = sub wlj 0.0064
                      wll:f64[400] = sqrt wlk
                      wlm:f64[400] = integer_pow[y=2] wkz
                      wln:f64[400] = integer_pow[y=2] wlb
                      wlo:f64[400] = add wlm wln
                      wlp:f64[] = integer_pow[y=2] wlc
                      wlq:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] wlp
                      wlr:f64[400] = sub wlo wlq
                      wls:f64[400] = sqrt wlr
                      wlt:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] wlc
                      wlu:f64[400] = mul wlb wlt
                      wlv:f64[400] = mul wkz wls
                      wlw:f64[400] = add wlu wlv
                      wlx:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] wlc
                      wly:f64[400] = mul wkz wlx
                      wlz:f64[400] = mul wlb wls
                      wma:f64[400] = sub wly wlz
                      wmb:f64[400] = atan2 wlw wma
                      wmc:f64[400] = integer_pow[y=2] wll
                      wmd:f64[400] = sub 0.090738 wmc
                      wme:f64[] = abs 0.045369
                      wmf:f64[] = mul 2.0 wme
                      wmg:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] wmf
                      wmh:f64[400] = div wmd wmg
                      wmi:f64[1] = slice[
                        limit_indices=(3,)
                        start_indices=(2,)
                        strides=None
                      ] phv
                      wmj:f64[] = squeeze[dimensions=(0,)] wmi
                      wmk:f64[1] = slice[
                        limit_indices=(3,)
                        start_indices=(2,)
                        strides=None
                      ] phw
                      wml:f64[] = squeeze[dimensions=(0,)] wmk
                      wmm:f64[] = add 3.141592653589793 wmj
                      wmn:f64[] = cos wmm
                      wmo:f64[] = add 3.141592653589793 wml
                      wmp:f64[] = cos wmo
                      wmq:f64[400] = pjit[name=clip jaxpr=clip5] wmh wmn wmp
                      wmr:f64[400] = acos wmq
                      wms:f64[400] = sub 3.141592653589793 wmr
                      wmt:f64[400] = neg wms
                      wmu:f64[400] = sin wmb
                      wmv:f64[400] = mul wkz wmu
                      wmw:f64[400] = cos wmb
                      wmx:f64[400] = mul wlb wmw
                      wmy:f64[400] = sub wmv wmx
                      wmz:f64[400] = sin wmt
                      wna:f64[400] = mul -0.213 wmz
                      wnb:f64[400] = cos wmt
                      wnc:f64[400] = mul -0.213 wnb
                      wnd:f64[400] = add -0.213 wnc
                      wne:f64[400] = mul wna wmy
                      wnf:f64[400] = mul wnd wkv
                      wng:f64[400] = add wne wnf
                      wnh:f64[400] = mul wna wkv
                      wni:f64[400] = mul wnd wmy
                      wnj:f64[400] = sub wnh wni
                      wnk:f64[400] = atan2 wng wnj
                      wnl:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] wmb
                      wnm:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] wnk
                      wnn:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] wmt
                      wno:f64[400,3] = concatenate[dimension=1] wnl wnm wnn
                      wnp:f64[400,3] = slice[
                        limit_indices=(400, 9)
                        start_indices=(0, 6)
                        strides=None
                      ] who
                      wnq:f64[] = select_n True 0.1881 -0.1881
                      wnr:f64[] = select_n True 0.04675 -0.04675
                      wns:f64[400,1] = slice[
                        limit_indices=(400, 1)
                        start_indices=(0, 0)
                        strides=None
                      ] wnp
                      wnt:f64[400] = squeeze[dimensions=(1,)] wns
                      wnu:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] wnq
                      wnv:f64[400] = sub wnt wnu
                      wnw:f64[400,1] = slice[
                        limit_indices=(400, 2)
                        start_indices=(0, 1)
                        strides=None
                      ] wnp
                      wnx:f64[400] = squeeze[dimensions=(1,)] wnw
                      wny:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] wnr
                      wnz:f64[400] = sub wnx wny
                      woa:f64[400,1] = slice[
                        limit_indices=(400, 3)
                        start_indices=(0, 2)
                        strides=None
                      ] wnp
                      wob:f64[400] = squeeze[dimensions=(1,)] woa
                      woc:f64[] = select_n True 0.08 -0.08
                      wod:f64[400] = integer_pow[y=2] wnv
                      woe:f64[400] = integer_pow[y=2] wnz
                      wof:f64[400] = add wod woe
                      wog:f64[400] = integer_pow[y=2] wob
                      woh:f64[400] = add wof wog
                      woi:f64[400] = sqrt woh
                      woj:f64[400] = integer_pow[y=2] woi
                      wok:f64[400] = sub woj 0.0064
                      wol:f64[400] = sqrt wok
                      wom:f64[400] = integer_pow[y=2] wnz
                      won:f64[400] = integer_pow[y=2] wob
                      woo:f64[400] = add wom won
                      wop:f64[] = integer_pow[y=2] woc
                      woq:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] wop
                      wor:f64[400] = sub woo woq
                      wos:f64[400] = sqrt wor
                      wot:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] woc
                      wou:f64[400] = mul wob wot
                      wov:f64[400] = mul wnz wos
                      wow:f64[400] = add wou wov
                      wox:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] woc
                      woy:f64[400] = mul wnz wox
                      woz:f64[400] = mul wob wos
                      wpa:f64[400] = sub woy woz
                      wpb:f64[400] = atan2 wow wpa
                      wpc:f64[400] = integer_pow[y=2] wol
                      wpd:f64[400] = sub 0.090738 wpc
                      wpe:f64[] = abs 0.045369
                      wpf:f64[] = mul 2.0 wpe
                      wpg:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] wpf
                      wph:f64[400] = div wpd wpg
                      wpi:f64[1] = slice[
                        limit_indices=(3,)
                        start_indices=(2,)
                        strides=None
                      ] phv
                      wpj:f64[] = squeeze[dimensions=(0,)] wpi
                      wpk:f64[1] = slice[
                        limit_indices=(3,)
                        start_indices=(2,)
                        strides=None
                      ] phw
                      wpl:f64[] = squeeze[dimensions=(0,)] wpk
                      wpm:f64[] = add 3.141592653589793 wpj
                      wpn:f64[] = cos wpm
                      wpo:f64[] = add 3.141592653589793 wpl
                      wpp:f64[] = cos wpo
                      wpq:f64[400] = pjit[name=clip jaxpr=clip5] wph wpn wpp
                      wpr:f64[400] = acos wpq
                      wps:f64[400] = sub 3.141592653589793 wpr
                      wpt:f64[400] = neg wps
                      wpu:f64[400] = sin wpb
                      wpv:f64[400] = mul wnz wpu
                      wpw:f64[400] = cos wpb
                      wpx:f64[400] = mul wob wpw
                      wpy:f64[400] = sub wpv wpx
                      wpz:f64[400] = sin wpt
                      wqa:f64[400] = mul -0.213 wpz
                      wqb:f64[400] = cos wpt
                      wqc:f64[400] = mul -0.213 wqb
                      wqd:f64[400] = add -0.213 wqc
                      wqe:f64[400] = mul wqa wpy
                      wqf:f64[400] = mul wqd wnv
                      wqg:f64[400] = add wqe wqf
                      wqh:f64[400] = mul wqa wnv
                      wqi:f64[400] = mul wqd wpy
                      wqj:f64[400] = sub wqh wqi
                      wqk:f64[400] = atan2 wqg wqj
                      wql:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] wpb
                      wqm:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] wqk
                      wqn:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] wpt
                      wqo:f64[400,3] = concatenate[dimension=1] wql wqm wqn
                      wqp:f64[400,3] = slice[
                        limit_indices=(400, 12)
                        start_indices=(0, 9)
                        strides=None
                      ] who
                      wqq:f64[] = select_n True 0.1881 -0.1881
                      wqr:f64[] = select_n False 0.04675 -0.04675
                      wqs:f64[400,1] = slice[
                        limit_indices=(400, 1)
                        start_indices=(0, 0)
                        strides=None
                      ] wqp
                      wqt:f64[400] = squeeze[dimensions=(1,)] wqs
                      wqu:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] wqq
                      wqv:f64[400] = sub wqt wqu
                      wqw:f64[400,1] = slice[
                        limit_indices=(400, 2)
                        start_indices=(0, 1)
                        strides=None
                      ] wqp
                      wqx:f64[400] = squeeze[dimensions=(1,)] wqw
                      wqy:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] wqr
                      wqz:f64[400] = sub wqx wqy
                      wra:f64[400,1] = slice[
                        limit_indices=(400, 3)
                        start_indices=(0, 2)
                        strides=None
                      ] wqp
                      wrb:f64[400] = squeeze[dimensions=(1,)] wra
                      wrc:f64[] = select_n False 0.08 -0.08
                      wrd:f64[400] = integer_pow[y=2] wqv
                      wre:f64[400] = integer_pow[y=2] wqz
                      wrf:f64[400] = add wrd wre
                      wrg:f64[400] = integer_pow[y=2] wrb
                      wrh:f64[400] = add wrf wrg
                      wri:f64[400] = sqrt wrh
                      wrj:f64[400] = integer_pow[y=2] wri
                      wrk:f64[400] = sub wrj 0.0064
                      wrl:f64[400] = sqrt wrk
                      wrm:f64[400] = integer_pow[y=2] wqz
                      wrn:f64[400] = integer_pow[y=2] wrb
                      wro:f64[400] = add wrm wrn
                      wrp:f64[] = integer_pow[y=2] wrc
                      wrq:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] wrp
                      wrr:f64[400] = sub wro wrq
                      wrs:f64[400] = sqrt wrr
                      wrt:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] wrc
                      wru:f64[400] = mul wrb wrt
                      wrv:f64[400] = mul wqz wrs
                      wrw:f64[400] = add wru wrv
                      wrx:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] wrc
                      wry:f64[400] = mul wqz wrx
                      wrz:f64[400] = mul wrb wrs
                      wsa:f64[400] = sub wry wrz
                      wsb:f64[400] = atan2 wrw wsa
                      wsc:f64[400] = integer_pow[y=2] wrl
                      wsd:f64[400] = sub 0.090738 wsc
                      wse:f64[] = abs 0.045369
                      wsf:f64[] = mul 2.0 wse
                      wsg:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] wsf
                      wsh:f64[400] = div wsd wsg
                      wsi:f64[1] = slice[
                        limit_indices=(3,)
                        start_indices=(2,)
                        strides=None
                      ] phv
                      wsj:f64[] = squeeze[dimensions=(0,)] wsi
                      wsk:f64[1] = slice[
                        limit_indices=(3,)
                        start_indices=(2,)
                        strides=None
                      ] phw
                      wsl:f64[] = squeeze[dimensions=(0,)] wsk
                      wsm:f64[] = add 3.141592653589793 wsj
                      wsn:f64[] = cos wsm
                      wso:f64[] = add 3.141592653589793 wsl
                      wsp:f64[] = cos wso
                      wsq:f64[400] = pjit[name=clip jaxpr=clip5] wsh wsn wsp
                      wsr:f64[400] = acos wsq
                      wss:f64[400] = sub 3.141592653589793 wsr
                      wst:f64[400] = neg wss
                      wsu:f64[400] = sin wsb
                      wsv:f64[400] = mul wqz wsu
                      wsw:f64[400] = cos wsb
                      wsx:f64[400] = mul wrb wsw
                      wsy:f64[400] = sub wsv wsx
                      wsz:f64[400] = sin wst
                      wta:f64[400] = mul -0.213 wsz
                      wtb:f64[400] = cos wst
                      wtc:f64[400] = mul -0.213 wtb
                      wtd:f64[400] = add -0.213 wtc
                      wte:f64[400] = mul wta wsy
                      wtf:f64[400] = mul wtd wqv
                      wtg:f64[400] = add wte wtf
                      wth:f64[400] = mul wta wqv
                      wti:f64[400] = mul wtd wsy
                      wtj:f64[400] = sub wth wti
                      wtk:f64[400] = atan2 wtg wtj
                      wtl:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] wsb
                      wtm:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] wtk
                      wtn:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] wst
                      wto:f64[400,3] = concatenate[dimension=1] wtl wtm wtn
                      wtp:f64[400,12] = concatenate[dimension=1] wko wno wqo wto
                      wtq:f64[1,3] = reshape[dimensions=None new_sizes=(1, 3)] phw
                      wtr:f64[3] = squeeze[dimensions=(0,)] wtq
                      wts:f64[4,3] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(4, 3)
                      ] wtr
                      wtt:f64[12] = reshape[dimensions=None new_sizes=(12,)] wts
                      wtu:f64[1,3] = reshape[dimensions=None new_sizes=(1, 3)] phv
                      wtv:f64[3] = squeeze[dimensions=(0,)] wtu
                      wtw:f64[4,3] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(4, 3)
                      ] wtv
                      wtx:f64[12] = reshape[dimensions=None new_sizes=(12,)] wtw
                      wty:f64[400,12] = pjit[
                        name=clip
                        jaxpr={ lambda ; wtz:f64[400,12] wua:f64[12] wub:f64[12]. let
                            wuc:f64[1,12] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 12)
                            ] wua
                            wud:f64[400,12] = max wuc wtz
                            wue:f64[1,12] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 12)
                            ] wub
                            wuf:f64[400,12] = min wue wud
                          in (wuf,) }
                      ] wtp wtt wtx
                      wug:f64[12] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(12,)
                      ] 0.0
                      wuh:i64[1,3] = reshape[dimensions=None new_sizes=(1, 3)] pik
                      wui:i64[3] = squeeze[dimensions=(0,)] wuh
                      wuj:i64[4,3] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(4, 3)
                      ] wui
                      wuk:i64[12] = reshape[dimensions=None new_sizes=(12,)] wuj
                      wul:f64[12] = convert_element_type[
                        new_dtype=float64
                        weak_type=True
                      ] wuk
                      wum:f64[12] = mul wul 1.4
                      wun:f64[1,3] = reshape[dimensions=None new_sizes=(1, 3)] pil
                      wuo:f64[3] = squeeze[dimensions=(0,)] wun
                      wup:f64[4,3] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(4, 3)
                      ] wuo
                      wuq:f64[12] = reshape[dimensions=None new_sizes=(12,)] wup
                      wur:f64[400,12] = cond[
                        branches=(
                          { lambda ; wus:f64[12] wut:f64[12] wuu:f64[400,36] wuv:f64[400,12]
                              wuw:f64[12] wux:f64[12] wuy:f64[12]. let
                              wuz:f64[400,12] = broadcast_in_dim[
                                broadcast_dimensions=(1,)
                                shape=(400, 12)
                              ] wut
                            in (wuz,) }
                          { lambda ; wva:f64[12] wvb:f64[12] wvc:f64[400,36] wvd:f64[400,12]
                              wve:f64[12] wvf:f64[12] wvg:f64[12]. let
                              wvh:f64[400,12] = slice[
                                limit_indices=(400, 16)
                                start_indices=(0, 4)
                                strides=None
                              ] wvc
                              wvi:f64[400,12] = slice[
                                limit_indices=(400, 34)
                                start_indices=(0, 22)
                                strides=None
                              ] wvc
                              wvj:f64[400,12] = sub wvd wvh
                              wvk:f64[12] = convert_element_type[
                                new_dtype=float64
                                weak_type=False
                              ] wvf
                              wvl:f64[1,12] = broadcast_in_dim[
                                broadcast_dimensions=(1,)
                                shape=(1, 12)
                              ] wvk
                              wvm:f64[400,12] = mul wvl wvj
                              wvn:f64[1,12] = broadcast_in_dim[
                                broadcast_dimensions=(1,)
                                shape=(1, 12)
                              ] wve
                              wvo:f64[400,12] = sub wvn wvi
                              wvp:f64[1,12] = broadcast_in_dim[
                                broadcast_dimensions=(1,)
                                shape=(1, 12)
                              ] wvg
                              wvq:f64[400,12] = mul wvp wvo
                              wvr:f64[400,12] = add wvm wvq
                              wvs:f64[400,12] = sub wvd wvh
                              wvt:bool[400,12] = ne wvs 0.0
                              wvu:f64[400,12] = sub wvd wvh
                              wvv:f64[400,12] = pjit[name=_where jaxpr=_where13] wvt
                                wvu 1
                              wvw:f64[1,12] = broadcast_in_dim[
                                broadcast_dimensions=(1,)
                                shape=(1, 12)
                              ] wva
                              wvx:bool[400,12] = gt wvr wvw
                              wvy:f64[1,12] = broadcast_in_dim[
                                broadcast_dimensions=(1,)
                                shape=(1, 12)
                              ] wve
                              wvz:f64[400,12] = sub wvy wvi
                              wwa:f64[1,12] = broadcast_in_dim[
                                broadcast_dimensions=(1,)
                                shape=(1, 12)
                              ] wvg
                              wwb:f64[400,12] = mul wwa wvz
                              wwc:f64[1,12] = broadcast_in_dim[
                                broadcast_dimensions=(1,)
                                shape=(1, 12)
                              ] wva
                              wwd:f64[400,12] = sub wwc wwb
                              wwe:f64[400,12] = div wwd wvv
                              wwf:f64[400,12] = pjit[name=_where jaxpr=_where14] wvx
                                wwe wvf
                              wwg:f64[12] = neg wva
                              wwh:f64[1,12] = broadcast_in_dim[
                                broadcast_dimensions=(1,)
                                shape=(1, 12)
                              ] wwg
                              wwi:bool[400,12] = lt wvr wwh
                              wwj:f64[12] = neg wva
                              wwk:f64[1,12] = broadcast_in_dim[
                                broadcast_dimensions=(1,)
                                shape=(1, 12)
                              ] wve
                              wwl:f64[400,12] = sub wwk wvi
                              wwm:f64[1,12] = broadcast_in_dim[
                                broadcast_dimensions=(1,)
                                shape=(1, 12)
                              ] wvg
                              wwn:f64[400,12] = mul wwm wwl
                              wwo:f64[1,12] = broadcast_in_dim[
                                broadcast_dimensions=(1,)
                                shape=(1, 12)
                              ] wwj
                              wwp:f64[400,12] = sub wwo wwn
                              wwq:f64[400,12] = div wwp wvv
                              wwr:f64[400,12] = pjit[name=_where jaxpr=_where15] wwi
                                wwq wwf
                            in (wwr,) }
                        )
                        linear=(False, False, False, False, False, False, False)
                      ] 0 phz wum vhp wty wug wum wuq
                      wws:f64[400,12] = slice[
                        limit_indices=(400, 16)
                        start_indices=(0, 4)
                        strides=None
                      ] vhp
                      wwt:f64[400,12] = slice[
                        limit_indices=(400, 34)
                        start_indices=(0, 22)
                        strides=None
                      ] vhp
                      wwu:f64[400,12] = sub wty wws
                      wwv:f64[400,12] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] wur
                      www:f64[400,12] = mul wwv wwu
                      wwx:f64[1,12] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 12)
                      ] wug
                      wwy:f64[400,12] = sub wwx wwt
                      wwz:f64[1,12] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 12)
                      ] wuq
                      wxa:f64[400,12] = mul wwz wwy
                      wxb:f64[400,12] = add www wxa
                      wxc:f64[400,1] = slice[
                        limit_indices=(400, 17)
                        start_indices=(0, 16)
                        strides=None
                      ] vfz
                      wxd:f64[400] = squeeze[dimensions=(1,)] wxc
                      wxe:f64[400,1] = slice[
                        limit_indices=(400, 22)
                        start_indices=(0, 21)
                        strides=None
                      ] vfz
                      wxf:f64[400] = squeeze[dimensions=(1,)] wxe
                      wxg:f64[400] = integer_pow[y=2] wxf
                      wxh:f64[400] = neg wxg
                      wxi:f64[400] = div wxh 0.2
                      wxj:f64[400] = exp wxi
                      wxk:f64[400,4] = slice[
                        limit_indices=(400, 4)
                        start_indices=(0, 0)
                        strides=None
                      ] vfz
                      wxl:f64[400,1] = slice[
                        limit_indices=(400, 3)
                        start_indices=(0, 2)
                        strides=None
                      ] wxk
                      wxm:f64[400] = squeeze[dimensions=(1,)] wxl
                      wxn:f64[400,1] = slice[
                        limit_indices=(400, 4)
                        start_indices=(0, 3)
                        strides=None
                      ] wxk
                      wxo:f64[400] = squeeze[dimensions=(1,)] wxn
                      wxp:f64[400] = mul wxm wxo
                      wxq:f64[400,1] = slice[
                        limit_indices=(400, 1)
                        start_indices=(0, 0)
                        strides=None
                      ] wxk
                      wxr:f64[400] = squeeze[dimensions=(1,)] wxq
                      wxs:f64[400,1] = slice[
                        limit_indices=(400, 2)
                        start_indices=(0, 1)
                        strides=None
                      ] wxk
                      wxt:f64[400] = squeeze[dimensions=(1,)] wxs
                      wxu:f64[400] = mul wxr wxt
                      wxv:f64[400] = add wxp wxu
                      wxw:f64[400,1] = slice[
                        limit_indices=(400, 2)
                        start_indices=(0, 1)
                        strides=None
                      ] wxk
                      wxx:f64[400] = squeeze[dimensions=(1,)] wxw
                      wxy:f64[400,1] = slice[
                        limit_indices=(400, 2)
                        start_indices=(0, 1)
                        strides=None
                      ] wxk
                      wxz:f64[400] = squeeze[dimensions=(1,)] wxy
                      wya:f64[400] = mul wxx wxz
                      wyb:f64[400,1] = slice[
                        limit_indices=(400, 3)
                        start_indices=(0, 2)
                        strides=None
                      ] wxk
                      wyc:f64[400] = squeeze[dimensions=(1,)] wyb
                      wyd:f64[400,1] = slice[
                        limit_indices=(400, 3)
                        start_indices=(0, 2)
                        strides=None
                      ] wxk
                      wye:f64[400] = squeeze[dimensions=(1,)] wyd
                      wyf:f64[400] = mul wyc wye
                      wyg:f64[400] = add wya wyf
                      wyh:f64[400] = sub 0.5 wyg
                      wyi:f64[400] = atan2 wxv wyh
                      wyj:f64[400,1] = slice[
                        limit_indices=(400, 2)
                        start_indices=(0, 1)
                        strides=None
                      ] wxk
                      wyk:f64[400] = squeeze[dimensions=(1,)] wyj
                      wyl:f64[400,1] = slice[
                        limit_indices=(400, 4)
                        start_indices=(0, 3)
                        strides=None
                      ] wxk
                      wym:f64[400] = squeeze[dimensions=(1,)] wyl
                      wyn:f64[400] = mul wyk wym
                      wyo:f64[400,1] = slice[
                        limit_indices=(400, 1)
                        start_indices=(0, 0)
                        strides=None
                      ] wxk
                      wyp:f64[400] = squeeze[dimensions=(1,)] wyo
                      wyq:f64[400,1] = slice[
                        limit_indices=(400, 3)
                        start_indices=(0, 2)
                        strides=None
                      ] wxk
                      wyr:f64[400] = squeeze[dimensions=(1,)] wyq
                      wys:f64[400] = mul wyp wyr
                      wyt:f64[400] = sub wyn wys
                      wyu:f64[400] = mul -2.0 wyt
                      wyv:f64[400] = pjit[name=clip jaxpr=clip6] wyu -1.0 1.0
                      wyw:f64[400] = custom_jvp_call[
                        call_jaxpr={ lambda ; wyx:f64[400]. let
                            wyy:f64[400] = asin wyx
                          in (wyy,) }
                        jvp_jaxpr_thunk=<function _memoize.<locals>.memoized at 0x7d83782973a0>
                        num_consts=0
                        symbolic_zeros=False
                      ] wyv
                      wyz:f64[400,1] = slice[
                        limit_indices=(400, 2)
                        start_indices=(0, 1)
                        strides=None
                      ] wxk
                      wza:f64[400] = squeeze[dimensions=(1,)] wyz
                      wzb:f64[400,1] = slice[
                        limit_indices=(400, 3)
                        start_indices=(0, 2)
                        strides=None
                      ] wxk
                      wzc:f64[400] = squeeze[dimensions=(1,)] wzb
                      wzd:f64[400] = mul wza wzc
                      wze:f64[400,1] = slice[
                        limit_indices=(400, 1)
                        start_indices=(0, 0)
                        strides=None
                      ] wxk
                      wzf:f64[400] = squeeze[dimensions=(1,)] wze
                      wzg:f64[400,1] = slice[
                        limit_indices=(400, 4)
                        start_indices=(0, 3)
                        strides=None
                      ] wxk
                      wzh:f64[400] = squeeze[dimensions=(1,)] wzg
                      wzi:f64[400] = mul wzf wzh
                      wzj:f64[400] = add wzd wzi
                      wzk:f64[400,1] = slice[
                        limit_indices=(400, 3)
                        start_indices=(0, 2)
                        strides=None
                      ] wxk
                      wzl:f64[400] = squeeze[dimensions=(1,)] wzk
                      wzm:f64[400,1] = slice[
                        limit_indices=(400, 3)
                        start_indices=(0, 2)
                        strides=None
                      ] wxk
                      wzn:f64[400] = squeeze[dimensions=(1,)] wzm
                      wzo:f64[400] = mul wzl wzn
                      wzp:f64[400,1] = slice[
                        limit_indices=(400, 4)
                        start_indices=(0, 3)
                        strides=None
                      ] wxk
                      wzq:f64[400] = squeeze[dimensions=(1,)] wzp
                      wzr:f64[400,1] = slice[
                        limit_indices=(400, 4)
                        start_indices=(0, 3)
                        strides=None
                      ] wxk
                      wzs:f64[400] = squeeze[dimensions=(1,)] wzr
                      wzt:f64[400] = mul wzq wzs
                      wzu:f64[400] = add wzo wzt
                      wzv:f64[400] = sub 0.5 wzu
                      wzw:f64[400] = atan2 wzj wzv
                      wzx:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] wyi
                      wzy:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] wyw
                      wzz:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] wzw
                      xaa:f64[400,3] = concatenate[dimension=1] wzx wzy wzz
                      xab:f64[400,1] = slice[
                        limit_indices=(400, 1)
                        start_indices=(0, 0)
                        strides=(1, 1)
                      ] xaa
                      xac:f64[400] = squeeze[dimensions=(1,)] xab
                      xad:f64[400,1] = slice[
                        limit_indices=(400, 2)
                        start_indices=(0, 1)
                        strides=(1, 1)
                      ] xaa
                      xae:f64[400] = squeeze[dimensions=(1,)] xad
                      xaf:f64[400,1] = slice[
                        limit_indices=(400, 3)
                        start_indices=(0, 2)
                        strides=(1, 1)
                      ] xaa
                      xag:f64[400] = squeeze[dimensions=(1,)] xaf
                      xah:f64[400,4] = slice[
                        limit_indices=(400, 4)
                        start_indices=(0, 0)
                        strides=None
                      ] vgm
                      xai:f64[400,1] = slice[
                        limit_indices=(400, 3)
                        start_indices=(0, 2)
                        strides=None
                      ] xah
                      xaj:f64[400] = squeeze[dimensions=(1,)] xai
                      xak:f64[400,1] = slice[
                        limit_indices=(400, 4)
                        start_indices=(0, 3)
                        strides=None
                      ] xah
                      xal:f64[400] = squeeze[dimensions=(1,)] xak
                      xam:f64[400] = mul xaj xal
                      xan:f64[400,1] = slice[
                        limit_indices=(400, 1)
                        start_indices=(0, 0)
                        strides=None
                      ] xah
                      xao:f64[400] = squeeze[dimensions=(1,)] xan
                      xap:f64[400,1] = slice[
                        limit_indices=(400, 2)
                        start_indices=(0, 1)
                        strides=None
                      ] xah
                      xaq:f64[400] = squeeze[dimensions=(1,)] xap
                      xar:f64[400] = mul xao xaq
                      xas:f64[400] = add xam xar
                      xat:f64[400,1] = slice[
                        limit_indices=(400, 2)
                        start_indices=(0, 1)
                        strides=None
                      ] xah
                      xau:f64[400] = squeeze[dimensions=(1,)] xat
                      xav:f64[400,1] = slice[
                        limit_indices=(400, 2)
                        start_indices=(0, 1)
                        strides=None
                      ] xah
                      xaw:f64[400] = squeeze[dimensions=(1,)] xav
                      xax:f64[400] = mul xau xaw
                      xay:f64[400,1] = slice[
                        limit_indices=(400, 3)
                        start_indices=(0, 2)
                        strides=None
                      ] xah
                      xaz:f64[400] = squeeze[dimensions=(1,)] xay
                      xba:f64[400,1] = slice[
                        limit_indices=(400, 3)
                        start_indices=(0, 2)
                        strides=None
                      ] xah
                      xbb:f64[400] = squeeze[dimensions=(1,)] xba
                      xbc:f64[400] = mul xaz xbb
                      xbd:f64[400] = add xax xbc
                      xbe:f64[400] = sub 0.5 xbd
                      xbf:f64[400] = atan2 xas xbe
                      xbg:f64[400,1] = slice[
                        limit_indices=(400, 2)
                        start_indices=(0, 1)
                        strides=None
                      ] xah
                      xbh:f64[400] = squeeze[dimensions=(1,)] xbg
                      xbi:f64[400,1] = slice[
                        limit_indices=(400, 4)
                        start_indices=(0, 3)
                        strides=None
                      ] xah
                      xbj:f64[400] = squeeze[dimensions=(1,)] xbi
                      xbk:f64[400] = mul xbh xbj
                      xbl:f64[400,1] = slice[
                        limit_indices=(400, 1)
                        start_indices=(0, 0)
                        strides=None
                      ] xah
                      xbm:f64[400] = squeeze[dimensions=(1,)] xbl
                      xbn:f64[400,1] = slice[
                        limit_indices=(400, 3)
                        start_indices=(0, 2)
                        strides=None
                      ] xah
                      xbo:f64[400] = squeeze[dimensions=(1,)] xbn
                      xbp:f64[400] = mul xbm xbo
                      xbq:f64[400] = sub xbk xbp
                      xbr:f64[400] = mul -2.0 xbq
                      xbs:f64[400] = pjit[name=clip jaxpr=clip6] xbr -1.0 1.0
                      xbt:f64[400] = custom_jvp_call[
                        call_jaxpr={ lambda ; xbu:f64[400]. let
                            xbv:f64[400] = asin xbu
                          in (xbv,) }
                        jvp_jaxpr_thunk=<function _memoize.<locals>.memoized at 0x7d839a29c9d0>
                        num_consts=0
                        symbolic_zeros=False
                      ] xbs
                      xbw:f64[400,1] = slice[
                        limit_indices=(400, 2)
                        start_indices=(0, 1)
                        strides=None
                      ] xah
                      xbx:f64[400] = squeeze[dimensions=(1,)] xbw
                      xby:f64[400,1] = slice[
                        limit_indices=(400, 3)
                        start_indices=(0, 2)
                        strides=None
                      ] xah
                      xbz:f64[400] = squeeze[dimensions=(1,)] xby
                      xca:f64[400] = mul xbx xbz
                      xcb:f64[400,1] = slice[
                        limit_indices=(400, 1)
                        start_indices=(0, 0)
                        strides=None
                      ] xah
                      xcc:f64[400] = squeeze[dimensions=(1,)] xcb
                      xcd:f64[400,1] = slice[
                        limit_indices=(400, 4)
                        start_indices=(0, 3)
                        strides=None
                      ] xah
                      xce:f64[400] = squeeze[dimensions=(1,)] xcd
                      xcf:f64[400] = mul xcc xce
                      xcg:f64[400] = add xca xcf
                      xch:f64[400,1] = slice[
                        limit_indices=(400, 3)
                        start_indices=(0, 2)
                        strides=None
                      ] xah
                      xci:f64[400] = squeeze[dimensions=(1,)] xch
                      xcj:f64[400,1] = slice[
                        limit_indices=(400, 3)
                        start_indices=(0, 2)
                        strides=None
                      ] xah
                      xck:f64[400] = squeeze[dimensions=(1,)] xcj
                      xcl:f64[400] = mul xci xck
                      xcm:f64[400,1] = slice[
                        limit_indices=(400, 4)
                        start_indices=(0, 3)
                        strides=None
                      ] xah
                      xcn:f64[400] = squeeze[dimensions=(1,)] xcm
                      xco:f64[400,1] = slice[
                        limit_indices=(400, 4)
                        start_indices=(0, 3)
                        strides=None
                      ] xah
                      xcp:f64[400] = squeeze[dimensions=(1,)] xco
                      xcq:f64[400] = mul xcn xcp
                      xcr:f64[400] = add xcl xcq
                      xcs:f64[400] = sub 0.5 xcr
                      xct:f64[400] = atan2 xcg xcs
                      xcu:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] xbf
                      xcv:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] xbt
                      xcw:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] xct
                      xcx:f64[400,3] = concatenate[dimension=1] xcu xcv xcw
                      xcy:f64[400,1] = slice[
                        limit_indices=(400, 1)
                        start_indices=(0, 0)
                        strides=(1, 1)
                      ] xcx
                      xcz:f64[400] = squeeze[dimensions=(1,)] xcy
                      xda:f64[400,1] = slice[
                        limit_indices=(400, 2)
                        start_indices=(0, 1)
                        strides=(1, 1)
                      ] xcx
                      xdb:f64[400] = squeeze[dimensions=(1,)] xda
                      xdc:f64[400] = integer_pow[y=2] xae
                      xdd:f64[400] = neg xdc
                      xde:f64[400] = div xdd 0.25
                      xdf:f64[400] = exp xde
                      xdg:f64[400] = integer_pow[y=2] xac
                      xdh:f64[400] = neg xdg
                      xdi:f64[400] = div xdh 0.25
                      xdj:f64[400] = exp xdi
                      xdk:f64[400] = integer_pow[y=2] xag
                      xdl:f64[400] = neg xdk
                      xdm:f64[400] = div xdl 0.07
                      xdn:f64[400] = exp xdm
                      xdo:f64[400,1] = slice[
                        limit_indices=(400, 18)
                        start_indices=(0, 17)
                        strides=None
                      ] vfz
                      xdp:f64[400] = squeeze[dimensions=(1,)] xdo
                      xdq:f64[400] = integer_pow[y=2] xdp
                      xdr:f64[400] = neg xdq
                      xds:f64[400] = div xdr 0.01
                      xdt:f64[400] = exp xds
                      xdu:f64[400,1] = slice[
                        limit_indices=(400, 19)
                        start_indices=(0, 18)
                        strides=None
                      ] vfz
                      xdv:f64[400] = squeeze[dimensions=(1,)] xdu
                      xdw:f64[400,1] = slice[
                        limit_indices=(400, 19)
                        start_indices=(0, 18)
                        strides=None
                      ] vgm
                      xdx:f64[400] = squeeze[dimensions=(1,)] xdw
                      xdy:f64[400] = sub xdv xdx
                      xdz:f64[400] = integer_pow[y=2] xdy
                      xea:f64[400] = neg xdz
                      xeb:f64[400] = div xea 0.02
                      xec:f64[400] = exp xeb
                      xed:f64[400,1] = slice[
                        limit_indices=(400, 20)
                        start_indices=(0, 19)
                        strides=None
                      ] vfz
                      xee:f64[400] = squeeze[dimensions=(1,)] xed
                      xef:f64[400] = integer_pow[y=2] xee
                      xeg:f64[400] = neg xef
                      xeh:f64[400] = div xeg 0.2
                      xei:f64[400,1] = slice[
                        limit_indices=(400, 21)
                        start_indices=(0, 20)
                        strides=None
                      ] vfz
                      xej:f64[400] = squeeze[dimensions=(1,)] xei
                      xek:f64[400] = integer_pow[y=2] xej
                      xel:f64[400] = div xek 0.2
                      xem:f64[400] = sub xeh xel
                      xen:f64[400] = exp xem
                      xeo:f64[400] = sub xac xcz
                      xep:f64[400] = integer_pow[y=2] xeo
                      xeq:f64[400] = neg xep
                      xer:f64[400] = div xeq 0.001
                      xes:f64[400] = exp xer
                      xet:f64[400] = sub xae xdb
                      xeu:f64[400] = integer_pow[y=2] xet
                      xev:f64[400] = neg xeu
                      xew:f64[400] = div xev 0.005
                      xex:f64[400] = exp xew
                      xey:f64[400] = add xes xex
                      xez:f64[400] = div xey 2.0
                      xfa:f64[400,12] = slice[
                        limit_indices=(400, 16)
                        start_indices=(0, 4)
                        strides=None
                      ] vfz
                      xfb:f64[1,3] = reshape[dimensions=None new_sizes=(1, 3)] phw
                      xfc:f64[3] = squeeze[dimensions=(0,)] xfb
                      xfd:f64[4,3] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(4, 3)
                      ] xfc
                      xfe:f64[12] = reshape[dimensions=None new_sizes=(12,)] xfd
                      xff:f64[1,3] = reshape[dimensions=None new_sizes=(1, 3)] phv
                      xfg:f64[3] = squeeze[dimensions=(0,)] xff
                      xfh:f64[4,3] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(4, 3)
                      ] xfg
                      xfi:f64[12] = reshape[dimensions=None new_sizes=(12,)] xfh
                      xfj:f64[1,12] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 12)
                      ] xfe
                      xfk:f64[400,12] = sub xfa xfj
                      xfl:f64[400,12] = mul -10.0 xfk
                      xfm:f64[400,12] = exp xfl
                      xfn:f64[400,12] = add 1.0 xfm
                      xfo:f64[400,12] = div 1.0 xfn
                      xfp:f64[1,12] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 12)
                      ] xfi
                      xfq:f64[400,12] = sub xfa xfp
                      xfr:f64[400,12] = mul 10.0 xfq
                      xfs:f64[400,12] = exp xfr
                      xft:f64[400,12] = add 1.0 xfs
                      xfu:f64[400,12] = div 1.0 xft
                      xfv:f64[400,12] = add xfo xfu
                      xfw:f64[400,12] = sub xfv 1.0
                      xfx:f64[400] = reduce_sum[axes=(1,)] xfw
                      xfy:f64[400] = div xfx 12.0
                      xfz:f64[12] = mul -0.9 phz
                      xga:f64[12] = mul 0.9 phz
                      xgb:f64[1,12] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 12)
                      ] xfz
                      xgc:f64[400,12] = sub wxb xgb
                      xgd:f64[400,12] = mul -0.2 xgc
                      xge:f64[400,12] = exp xgd
                      xgf:f64[400,12] = add 1.0 xge
                      xgg:f64[400,12] = div 1.0 xgf
                      xgh:f64[1,12] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 12)
                      ] xga
                      xgi:f64[400,12] = sub wxb xgh
                      xgj:f64[400,12] = mul 0.2 xgi
                      xgk:f64[400,12] = exp xgj
                      xgl:f64[400,12] = add 1.0 xgk
                      xgm:f64[400,12] = div 1.0 xgl
                      xgn:f64[400,12] = add xgg xgm
                      xgo:f64[400,12] = sub xgn 1.0
                      xgp:f64[400] = reduce_sum[axes=(1,)] xgo
                      xgq:f64[400] = div xgp 12.0
                      xgr:f64[400,12] = slice[
                        limit_indices=(400, 34)
                        start_indices=(0, 22)
                        strides=None
                      ] vfz
                      xgs:f64[400,12] = slice[
                        limit_indices=(400, 34)
                        start_indices=(0, 22)
                        strides=None
                      ] vgm
                      xgt:f64[400,12] = sub xgr xgs
                      xgu:f64[400,12] = integer_pow[y=2] xgt
                      xgv:f64[400] = reduce_sum[axes=(1,)] xgu
                      xgw:f64[400] = neg xgv
                      xgx:f64[400] = div xgw 4.0
                      xgy:f64[400] = exp xgx
                      xgz:f64[400,9] = integer_pow[y=2] plx
                      xha:f64[400,9] = neg xgz
                      xhb:f64[400,9] = div xha 0.25
                      xhc:f64[400,9] = exp xhb
                      xhd:f64[400] = reduce_sum[axes=(1,)] xhc
                      xhe:f64[400] = div xhd 9.0
                      xhf:f64[400,12] = slice[
                        limit_indices=(400, 16)
                        start_indices=(0, 4)
                        strides=None
                      ] vfz
                      xhg:f64[1,12] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 12)
                      ] pim
                      xhh:f64[400,12] = sub xhf xhg
                      xhi:f64[400,12] = integer_pow[y=2] xhh
                      xhj:f64[400,12] = neg xhi
                      xhk:f64[400,12] = div xhj 0.05
                      xhl:f64[400,12] = exp xhk
                      xhm:f64[400] = reduce_sum[axes=(1,)] xhl
                      xhn:f64[400] = div xhm 12.0
                      xho:f64[400,12] = slice[
                        limit_indices=(400, 34)
                        start_indices=(0, 22)
                        strides=None
                      ] vfz
                      xhp:f64[400,12] = mul wxb xho
                      xhq:f64[400,12] = abs xhp
                      xhr:f64[400] = reduce_sum[axes=(1,)] xhq
                      xhs:f64[400] = integer_pow[y=2] xhr
                      xht:f64[400] = neg xhs
                      xhu:f64[400] = div xht 450.0
                      xhv:f64[400] = exp xhu
                      xhw:f64[400,12] = slice[
                        limit_indices=(400, 16)
                        start_indices=(0, 4)
                        strides=None
                      ] vfz
                      xhx:f64[400,3] = slice[
                        limit_indices=(400, 3)
                        start_indices=(0, 0)
                        strides=None
                      ] xhw
                      xhy:i64[] = select_n True 1 -1
                      xhz:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=True
                      ] xhy
                      xia:f64[] = mul xhz 0.08
                      xib:f64[400,1] = slice[
                        limit_indices=(400, 1)
                        start_indices=(0, 0)
                        strides=None
                      ] xhx
                      xic:f64[400] = squeeze[dimensions=(1,)] xib
                      xid:f64[400] = sin xic
                      xie:f64[400,1] = slice[
                        limit_indices=(400, 2)
                        start_indices=(0, 1)
                        strides=None
                      ] xhx
                      xif:f64[400] = squeeze[dimensions=(1,)] xie
                      xig:f64[400] = sin xif
                      xih:f64[400,1] = slice[
                        limit_indices=(400, 3)
                        start_indices=(0, 2)
                        strides=None
                      ] xhx
                      xii:f64[400] = squeeze[dimensions=(1,)] xih
                      xij:f64[400] = sin xii
                      xik:f64[400,1] = slice[
                        limit_indices=(400, 1)
                        start_indices=(0, 0)
                        strides=None
                      ] xhx
                      xil:f64[400] = squeeze[dimensions=(1,)] xik
                      xim:f64[400] = cos xil
                      xin:f64[400,1] = slice[
                        limit_indices=(400, 2)
                        start_indices=(0, 1)
                        strides=None
                      ] xhx
                      xio:f64[400] = squeeze[dimensions=(1,)] xin
                      xip:f64[400] = cos xio
                      xiq:f64[400,1] = slice[
                        limit_indices=(400, 3)
                        start_indices=(0, 2)
                        strides=None
                      ] xhx
                      xir:f64[400] = squeeze[dimensions=(1,)] xiq
                      xis:f64[400] = cos xir
                      xit:f64[400] = mul xip xis
                      xiu:f64[400] = mul xig xij
                      xiv:f64[400] = sub xit xiu
                      xiw:f64[400] = mul xig xis
                      xix:f64[400] = mul xip xij
                      xiy:f64[400] = add xiw xix
                      xiz:f64[400] = mul -0.213 xiy
                      xja:f64[400] = mul -0.213 xig
                      xjb:f64[400] = add xiz xja
                      xjc:f64[400] = mul 0.213 xid
                      xjd:f64[400] = mul xjc xiv
                      xje:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] xia
                      xjf:f64[400] = mul xje xim
                      xjg:f64[400] = add xjd xjf
                      xjh:f64[400] = mul -0.213 xip
                      xji:f64[400] = mul xjh xid
                      xjj:f64[400] = sub xjg xji
                      xjk:f64[400] = mul -0.213 xim
                      xjl:f64[400] = mul xjk xiv
                      xjm:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] xia
                      xjn:f64[400] = mul xjm xid
                      xjo:f64[400] = add xjl xjn
                      xjp:f64[400] = mul -0.213 xim
                      xjq:f64[400] = mul xjp xip
                      xjr:f64[400] = add xjo xjq
                      xjs:f64[] = select_n True -0.1881 0.1881
                      xjt:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] xjs
                      xju:f64[400] = add xjb xjt
                      xjv:f64[] = select_n True 0.04675 -0.04675
                      xjw:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] xjv
                      xjx:f64[400] = add xjj xjw
                      xjy:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] xju
                      xjz:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] xjx
                      xka:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] xjr
                      xkb:f64[400,3] = concatenate[dimension=1] xjy xjz xka
                      xkc:f64[400,3] = slice[
                        limit_indices=(400, 6)
                        start_indices=(0, 3)
                        strides=None
                      ] xhw
                      xkd:i64[] = select_n False 1 -1
                      xke:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=True
                      ] xkd
                      xkf:f64[] = mul xke 0.08
                      xkg:f64[400,1] = slice[
                        limit_indices=(400, 1)
                        start_indices=(0, 0)
                        strides=None
                      ] xkc
                      xkh:f64[400] = squeeze[dimensions=(1,)] xkg
                      xki:f64[400] = sin xkh
                      xkj:f64[400,1] = slice[
                        limit_indices=(400, 2)
                        start_indices=(0, 1)
                        strides=None
                      ] xkc
                      xkk:f64[400] = squeeze[dimensions=(1,)] xkj
                      xkl:f64[400] = sin xkk
                      xkm:f64[400,1] = slice[
                        limit_indices=(400, 3)
                        start_indices=(0, 2)
                        strides=None
                      ] xkc
                      xkn:f64[400] = squeeze[dimensions=(1,)] xkm
                      xko:f64[400] = sin xkn
                      xkp:f64[400,1] = slice[
                        limit_indices=(400, 1)
                        start_indices=(0, 0)
                        strides=None
                      ] xkc
                      xkq:f64[400] = squeeze[dimensions=(1,)] xkp
                      xkr:f64[400] = cos xkq
                      xks:f64[400,1] = slice[
                        limit_indices=(400, 2)
                        start_indices=(0, 1)
                        strides=None
                      ] xkc
                      xkt:f64[400] = squeeze[dimensions=(1,)] xks
                      xku:f64[400] = cos xkt
                      xkv:f64[400,1] = slice[
                        limit_indices=(400, 3)
                        start_indices=(0, 2)
                        strides=None
                      ] xkc
                      xkw:f64[400] = squeeze[dimensions=(1,)] xkv
                      xkx:f64[400] = cos xkw
                      xky:f64[400] = mul xku xkx
                      xkz:f64[400] = mul xkl xko
                      xla:f64[400] = sub xky xkz
                      xlb:f64[400] = mul xkl xkx
                      xlc:f64[400] = mul xku xko
                      xld:f64[400] = add xlb xlc
                      xle:f64[400] = mul -0.213 xld
                      xlf:f64[400] = mul -0.213 xkl
                      xlg:f64[400] = add xle xlf
                      xlh:f64[400] = mul 0.213 xki
                      xli:f64[400] = mul xlh xla
                      xlj:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] xkf
                      xlk:f64[400] = mul xlj xkr
                      xll:f64[400] = add xli xlk
                      xlm:f64[400] = mul -0.213 xku
                      xln:f64[400] = mul xlm xki
                      xlo:f64[400] = sub xll xln
                      xlp:f64[400] = mul -0.213 xkr
                      xlq:f64[400] = mul xlp xla
                      xlr:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] xkf
                      xls:f64[400] = mul xlr xki
                      xlt:f64[400] = add xlq xls
                      xlu:f64[400] = mul -0.213 xkr
                      xlv:f64[400] = mul xlu xku
                      xlw:f64[400] = add xlt xlv
                      xlx:f64[] = select_n True -0.1881 0.1881
                      xly:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] xlx
                      xlz:f64[400] = add xlg xly
                      xma:f64[] = select_n False 0.04675 -0.04675
                      xmb:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] xma
                      xmc:f64[400] = add xlo xmb
                      xmd:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] xlz
                      xme:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] xmc
                      xmf:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] xlw
                      xmg:f64[400,3] = concatenate[dimension=1] xmd xme xmf
                      xmh:f64[400,3] = slice[
                        limit_indices=(400, 9)
                        start_indices=(0, 6)
                        strides=None
                      ] xhw
                      xmi:i64[] = select_n True 1 -1
                      xmj:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=True
                      ] xmi
                      xmk:f64[] = mul xmj 0.08
                      xml:f64[400,1] = slice[
                        limit_indices=(400, 1)
                        start_indices=(0, 0)
                        strides=None
                      ] xmh
                      xmm:f64[400] = squeeze[dimensions=(1,)] xml
                      xmn:f64[400] = sin xmm
                      xmo:f64[400,1] = slice[
                        limit_indices=(400, 2)
                        start_indices=(0, 1)
                        strides=None
                      ] xmh
                      xmp:f64[400] = squeeze[dimensions=(1,)] xmo
                      xmq:f64[400] = sin xmp
                      xmr:f64[400,1] = slice[
                        limit_indices=(400, 3)
                        start_indices=(0, 2)
                        strides=None
                      ] xmh
                      xms:f64[400] = squeeze[dimensions=(1,)] xmr
                      xmt:f64[400] = sin xms
                      xmu:f64[400,1] = slice[
                        limit_indices=(400, 1)
                        start_indices=(0, 0)
                        strides=None
                      ] xmh
                      xmv:f64[400] = squeeze[dimensions=(1,)] xmu
                      xmw:f64[400] = cos xmv
                      xmx:f64[400,1] = slice[
                        limit_indices=(400, 2)
                        start_indices=(0, 1)
                        strides=None
                      ] xmh
                      xmy:f64[400] = squeeze[dimensions=(1,)] xmx
                      xmz:f64[400] = cos xmy
                      xna:f64[400,1] = slice[
                        limit_indices=(400, 3)
                        start_indices=(0, 2)
                        strides=None
                      ] xmh
                      xnb:f64[400] = squeeze[dimensions=(1,)] xna
                      xnc:f64[400] = cos xnb
                      xnd:f64[400] = mul xmz xnc
                      xne:f64[400] = mul xmq xmt
                      xnf:f64[400] = sub xnd xne
                      xng:f64[400] = mul xmq xnc
                      xnh:f64[400] = mul xmz xmt
                      xni:f64[400] = add xng xnh
                      xnj:f64[400] = mul -0.213 xni
                      xnk:f64[400] = mul -0.213 xmq
                      xnl:f64[400] = add xnj xnk
                      xnm:f64[400] = mul 0.213 xmn
                      xnn:f64[400] = mul xnm xnf
                      xno:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] xmk
                      xnp:f64[400] = mul xno xmw
                      xnq:f64[400] = add xnn xnp
                      xnr:f64[400] = mul -0.213 xmz
                      xns:f64[400] = mul xnr xmn
                      xnt:f64[400] = sub xnq xns
                      xnu:f64[400] = mul -0.213 xmw
                      xnv:f64[400] = mul xnu xnf
                      xnw:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] xmk
                      xnx:f64[400] = mul xnw xmn
                      xny:f64[400] = add xnv xnx
                      xnz:f64[400] = mul -0.213 xmw
                      xoa:f64[400] = mul xnz xmz
                      xob:f64[400] = add xny xoa
                      xoc:f64[] = select_n False -0.1881 0.1881
                      xod:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] xoc
                      xoe:f64[400] = add xnl xod
                      xof:f64[] = select_n True 0.04675 -0.04675
                      xog:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] xof
                      xoh:f64[400] = add xnt xog
                      xoi:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] xoe
                      xoj:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] xoh
                      xok:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] xob
                      xol:f64[400,3] = concatenate[dimension=1] xoi xoj xok
                      xom:f64[400,3] = slice[
                        limit_indices=(400, 12)
                        start_indices=(0, 9)
                        strides=None
                      ] xhw
                      xon:i64[] = select_n False 1 -1
                      xoo:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=True
                      ] xon
                      xop:f64[] = mul xoo 0.08
                      xoq:f64[400,1] = slice[
                        limit_indices=(400, 1)
                        start_indices=(0, 0)
                        strides=None
                      ] xom
                      xor:f64[400] = squeeze[dimensions=(1,)] xoq
                      xos:f64[400] = sin xor
                      xot:f64[400,1] = slice[
                        limit_indices=(400, 2)
                        start_indices=(0, 1)
                        strides=None
                      ] xom
                      xou:f64[400] = squeeze[dimensions=(1,)] xot
                      xov:f64[400] = sin xou
                      xow:f64[400,1] = slice[
                        limit_indices=(400, 3)
                        start_indices=(0, 2)
                        strides=None
                      ] xom
                      xox:f64[400] = squeeze[dimensions=(1,)] xow
                      xoy:f64[400] = sin xox
                      xoz:f64[400,1] = slice[
                        limit_indices=(400, 1)
                        start_indices=(0, 0)
                        strides=None
                      ] xom
                      xpa:f64[400] = squeeze[dimensions=(1,)] xoz
                      xpb:f64[400] = cos xpa
                      xpc:f64[400,1] = slice[
                        limit_indices=(400, 2)
                        start_indices=(0, 1)
                        strides=None
                      ] xom
                      xpd:f64[400] = squeeze[dimensions=(1,)] xpc
                      xpe:f64[400] = cos xpd
                      xpf:f64[400,1] = slice[
                        limit_indices=(400, 3)
                        start_indices=(0, 2)
                        strides=None
                      ] xom
                      xpg:f64[400] = squeeze[dimensions=(1,)] xpf
                      xph:f64[400] = cos xpg
                      xpi:f64[400] = mul xpe xph
                      xpj:f64[400] = mul xov xoy
                      xpk:f64[400] = sub xpi xpj
                      xpl:f64[400] = mul xov xph
                      xpm:f64[400] = mul xpe xoy
                      xpn:f64[400] = add xpl xpm
                      xpo:f64[400] = mul -0.213 xpn
                      xpp:f64[400] = mul -0.213 xov
                      xpq:f64[400] = add xpo xpp
                      xpr:f64[400] = mul 0.213 xos
                      xps:f64[400] = mul xpr xpk
                      xpt:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] xop
                      xpu:f64[400] = mul xpt xpb
                      xpv:f64[400] = add xps xpu
                      xpw:f64[400] = mul -0.213 xpe
                      xpx:f64[400] = mul xpw xos
                      xpy:f64[400] = sub xpv xpx
                      xpz:f64[400] = mul -0.213 xpb
                      xqa:f64[400] = mul xpz xpk
                      xqb:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] xop
                      xqc:f64[400] = mul xqb xos
                      xqd:f64[400] = add xqa xqc
                      xqe:f64[400] = mul -0.213 xpb
                      xqf:f64[400] = mul xqe xpe
                      xqg:f64[400] = add xqd xqf
                      xqh:f64[] = select_n False -0.1881 0.1881
                      xqi:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] xqh
                      xqj:f64[400] = add xpq xqi
                      xqk:f64[] = select_n False 0.04675 -0.04675
                      xql:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] xqk
                      xqm:f64[400] = add xpy xql
                      xqn:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] xqj
                      xqo:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] xqm
                      xqp:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] xqg
                      xqq:f64[400,3] = concatenate[dimension=1] xqn xqo xqp
                      xqr:f64[400,12] = concatenate[dimension=1] xkb xmg xol xqq
                      xqs:bool[4] = lt pin 0
                      xqt:i64[4] = add pin 12
                      xqu:i64[4] = select_n xqs pin xqt
                      xqv:i32[4] = convert_element_type[
                        new_dtype=int32
                        weak_type=False
                      ] xqu
                      xqw:i32[4,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(4, 1)
                      ] xqv
                      xqx:f64[400,4] = gather[
                        dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
                        fill_value=None
                        indices_are_sorted=False
                        mode=GatherScatterMode.PROMISE_IN_BOUNDS
                        slice_sizes=(400, 1)
                        unique_indices=False
                      ] xqr xqw
                      xqy:bool[4] = lt pin 0
                      xqz:i64[4] = add pin 12
                      xra:i64[4] = select_n xqy pin xqz
                      xrb:i32[4] = convert_element_type[
                        new_dtype=int32
                        weak_type=False
                      ] xra
                      xrc:i32[4,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(4, 1)
                      ] xrb
                      xrd:f64[400,4] = gather[
                        dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
                        fill_value=None
                        indices_are_sorted=False
                        mode=GatherScatterMode.PROMISE_IN_BOUNDS
                        slice_sizes=(400, 1)
                        unique_indices=False
                      ] who xrc
                      xre:f64[400,4] = sub xqx xrd
                      xrf:f64[400,4] = integer_pow[y=2] xre
                      xrg:f64[400,4] = neg xrf
                      xrh:f64[400,4] = div xrg 0.002
                      xri:f64[400,4] = exp xrh
                      xrj:f64[400] = reduce_sum[axes=(1,)] xri
                      xrk:f64[400] = div xrj 4.0
                      xrl:f64[1,12] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 12)
                      ] phz
                      xrm:bool[400,12] = gt wxb xrl
                      xrn:f64[1,12] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 12)
                      ] phz
                      xro:f64[400,12] = sub wxb xrn
                      xrp:f64[400,12] = add xro 1.0
                      xrq:f64[400,12] = neg xrp
                      xrr:f64[1,12] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 12)
                      ] phz
                      xrs:f64[400,12] = sub wxb xrr
                      xrt:f64[400,12] = exp xrs
                      xru:f64[400,12] = neg xrt
                      xrv:f64[400,12] = select_n xrm xru xrq
                      xrw:f64[12] = neg phz
                      xrx:f64[1,12] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 12)
                      ] xrw
                      xry:bool[400,12] = lt wxb xrx
                      xrz:f64[1,12] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 12)
                      ] phz
                      xsa:f64[400,12] = add wxb xrz
                      xsb:f64[400,12] = sub xsa 1.0
                      xsc:f64[400,12] = neg wxb
                      xsd:f64[1,12] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 12)
                      ] phz
                      xse:f64[400,12] = sub xsc xsd
                      xsf:f64[400,12] = exp xse
                      xsg:f64[400,12] = neg xsf
                      xsh:f64[400,12] = select_n xry xsg xsb
                      xsi:f64[400,12] = add xrv xsh
                      xsj:f64[400] = reduce_sum[axes=(1,)] xsi
                      xsk:f64[400] = div xsj 12.0
                      xsl:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] wxd
                      xsm:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] wxj
                      xsn:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] xdf
                      xso:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] xdj
                      xsp:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] xdn
                      xsq:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] xdt
                      xsr:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] xec
                      xss:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] xen
                      xst:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] xez
                      xsu:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] xfy
                      xsv:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] xgq
                      xsw:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] xgy
                      xsx:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] xhe
                      xsy:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] xhn
                      xsz:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] xhv
                      xta:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] xrk
                      xtb:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] xsk
                      xtc:f64[400,16] = concatenate[dimension=1] xsl xsm xsn xso
                        xsp xsq xsr xss xst xsu xsv xsw xsx xsy xsz xta
                      xtd:f64[400,17] = concatenate[dimension=1] xtc xtb
                      xte:f64[1,17] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 17)
                      ] pio
                      xtf:f64[400,17] = mul xte xtd
                      xtg:f64[400] = reduce_sum[axes=(1,)] xtf
                      xth:f64[400,36] = add vfm 1.0
                      xti:f64[36,1] = slice[
                        limit_indices=(36, 2)
                        start_indices=(0, 1)
                        strides=None
                      ] pdt
                      xtj:f64[36] = squeeze[dimensions=(1,)] xti
                      xtk:f64[36,1] = slice[
                        limit_indices=(36, 1)
                        start_indices=(0, 0)
                        strides=None
                      ] pdt
                      xtl:f64[36] = squeeze[dimensions=(1,)] xtk
                      xtm:f64[36] = sub xtj xtl
                      xtn:f64[1,36] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 36)
                      ] xtm
                      xto:f64[400,36] = mul xth xtn
                      xtp:f64[400,36] = div xto 2.0
                      xtq:f64[36,1] = slice[
                        limit_indices=(36, 1)
                        start_indices=(0, 0)
                        strides=None
                      ] pdt
                      xtr:f64[36] = squeeze[dimensions=(1,)] xtq
                      xts:f64[1,36] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 36)
                      ] xtr
                      xtt:f64[400,36] = add xtp xts
                      xtu:f64[400,4] = slice[
                        limit_indices=(400, 4)
                        start_indices=(0, 0)
                        strides=None
                      ] xtt
                      xtv:f64[400,1] = slice[
                        limit_indices=(400, 3)
                        start_indices=(0, 2)
                        strides=None
                      ] xtu
                      xtw:f64[400] = squeeze[dimensions=(1,)] xtv
                      xtx:f64[400,1] = slice[
                        limit_indices=(400, 4)
                        start_indices=(0, 3)
                        strides=None
                      ] xtu
                      xty:f64[400] = squeeze[dimensions=(1,)] xtx
                      xtz:f64[400] = mul xtw xty
                      xua:f64[400,1] = slice[
                        limit_indices=(400, 1)
                        start_indices=(0, 0)
                        strides=None
                      ] xtu
                      xub:f64[400] = squeeze[dimensions=(1,)] xua
                      xuc:f64[400,1] = slice[
                        limit_indices=(400, 2)
                        start_indices=(0, 1)
                        strides=None
                      ] xtu
                      xud:f64[400] = squeeze[dimensions=(1,)] xuc
                      xue:f64[400] = mul xub xud
                      xuf:f64[400] = add xtz xue
                      xug:f64[400,1] = slice[
                        limit_indices=(400, 2)
                        start_indices=(0, 1)
                        strides=None
                      ] xtu
                      xuh:f64[400] = squeeze[dimensions=(1,)] xug
                      xui:f64[400,1] = slice[
                        limit_indices=(400, 2)
                        start_indices=(0, 1)
                        strides=None
                      ] xtu
                      xuj:f64[400] = squeeze[dimensions=(1,)] xui
                      xuk:f64[400] = mul xuh xuj
                      xul:f64[400,1] = slice[
                        limit_indices=(400, 3)
                        start_indices=(0, 2)
                        strides=None
                      ] xtu
                      xum:f64[400] = squeeze[dimensions=(1,)] xul
                      xun:f64[400,1] = slice[
                        limit_indices=(400, 3)
                        start_indices=(0, 2)
                        strides=None
                      ] xtu
                      xuo:f64[400] = squeeze[dimensions=(1,)] xun
                      xup:f64[400] = mul xum xuo
                      xuq:f64[400] = add xuk xup
                      xur:f64[400] = sub 0.5 xuq
                      xus:f64[400] = atan2 xuf xur
                      xut:f64[400,1] = slice[
                        limit_indices=(400, 2)
                        start_indices=(0, 1)
                        strides=None
                      ] xtu
                      xuu:f64[400] = squeeze[dimensions=(1,)] xut
                      xuv:f64[400,1] = slice[
                        limit_indices=(400, 4)
                        start_indices=(0, 3)
                        strides=None
                      ] xtu
                      xuw:f64[400] = squeeze[dimensions=(1,)] xuv
                      xux:f64[400] = mul xuu xuw
                      xuy:f64[400,1] = slice[
                        limit_indices=(400, 1)
                        start_indices=(0, 0)
                        strides=None
                      ] xtu
                      xuz:f64[400] = squeeze[dimensions=(1,)] xuy
                      xva:f64[400,1] = slice[
                        limit_indices=(400, 3)
                        start_indices=(0, 2)
                        strides=None
                      ] xtu
                      xvb:f64[400] = squeeze[dimensions=(1,)] xva
                      xvc:f64[400] = mul xuz xvb
                      xvd:f64[400] = sub xux xvc
                      xve:f64[400] = mul -2.0 xvd
                      xvf:f64[400] = pjit[name=clip jaxpr=clip6] xve -1.0 1.0
                      xvg:f64[400] = custom_jvp_call[
                        call_jaxpr={ lambda ; xvh:f64[400]. let
                            xvi:f64[400] = asin xvh
                          in (xvi,) }
                        jvp_jaxpr_thunk=<function _memoize.<locals>.memoized at 0x7d8349bd3310>
                        num_consts=0
                        symbolic_zeros=False
                      ] xvf
                      xvj:f64[400,1] = slice[
                        limit_indices=(400, 2)
                        start_indices=(0, 1)
                        strides=None
                      ] xtu
                      xvk:f64[400] = squeeze[dimensions=(1,)] xvj
                      xvl:f64[400,1] = slice[
                        limit_indices=(400, 3)
                        start_indices=(0, 2)
                        strides=None
                      ] xtu
                      xvm:f64[400] = squeeze[dimensions=(1,)] xvl
                      xvn:f64[400] = mul xvk xvm
                      xvo:f64[400,1] = slice[
                        limit_indices=(400, 1)
                        start_indices=(0, 0)
                        strides=None
                      ] xtu
                      xvp:f64[400] = squeeze[dimensions=(1,)] xvo
                      xvq:f64[400,1] = slice[
                        limit_indices=(400, 4)
                        start_indices=(0, 3)
                        strides=None
                      ] xtu
                      xvr:f64[400] = squeeze[dimensions=(1,)] xvq
                      xvs:f64[400] = mul xvp xvr
                      xvt:f64[400] = add xvn xvs
                      xvu:f64[400,1] = slice[
                        limit_indices=(400, 3)
                        start_indices=(0, 2)
                        strides=None
                      ] xtu
                      xvv:f64[400] = squeeze[dimensions=(1,)] xvu
                      xvw:f64[400,1] = slice[
                        limit_indices=(400, 3)
                        start_indices=(0, 2)
                        strides=None
                      ] xtu
                      xvx:f64[400] = squeeze[dimensions=(1,)] xvw
                      xvy:f64[400] = mul xvv xvx
                      xvz:f64[400,1] = slice[
                        limit_indices=(400, 4)
                        start_indices=(0, 3)
                        strides=None
                      ] xtu
                      xwa:f64[400] = squeeze[dimensions=(1,)] xvz
                      xwb:f64[400,1] = slice[
                        limit_indices=(400, 4)
                        start_indices=(0, 3)
                        strides=None
                      ] xtu
                      xwc:f64[400] = squeeze[dimensions=(1,)] xwb
                      xwd:f64[400] = mul xwa xwc
                      xwe:f64[400] = add xvy xwd
                      xwf:f64[400] = sub 0.5 xwe
                      xwg:f64[400] = atan2 xvt xwf
                      xwh:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] xus
                      xwi:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] xvg
                      xwj:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] xwg
                      xwk:f64[400,3] = concatenate[dimension=1] xwh xwi xwj
                      xwl:f64[400,1] = slice[
                        limit_indices=(400, 1)
                        start_indices=(0, 0)
                        strides=(1, 1)
                      ] xwk
                      xwm:f64[400] = squeeze[dimensions=(1,)] xwl
                      xwn:f64[400,1] = slice[
                        limit_indices=(400, 2)
                        start_indices=(0, 1)
                        strides=(1, 1)
                      ] xwk
                      xwo:f64[400] = squeeze[dimensions=(1,)] xwn
                      xwp:f64[400] = abs xwm
                      xwq:bool[400] = lt xwp 0.785
                      xwr:f64[400] = abs xwo
                      xws:bool[400] = lt xwr 0.785
                      xwt:bool[400] = and xwq xws
                      xwu:f64[400] = pjit[
                        name=_where
                        jaxpr={ lambda ; xwv:bool[400] xww:f64[] xwx:f64[]. let
                            xwy:f64[400] = broadcast_in_dim[
                              broadcast_dimensions=()
                              shape=(400,)
                            ] xwx
                            xwz:f64[400] = broadcast_in_dim[
                              broadcast_dimensions=()
                              shape=(400,)
                            ] xww
                            xxa:f64[400] = select_n xwv xwy xwz
                          in (xxa,) }
                      ] xwt 1.0 0.0
                      xxb:f64[400] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] xwu
                      xxc:f64[400] = add xtg xxb
                      xxd:f64[400] = sub xxc 1.0
                      xxe:f64[400] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(400,)
                      ] 0.0
                      xxf:f64[400] = pjit[
                        name=_where
                        jaxpr={ lambda ; xxg:f64[400] xxh:f64[400] xxi:f64[400]. let
                            xxj:bool[400] = ne xxg 0.0
                            xxk:f64[400] = select_n xxj xxi xxh
                          in (xxk,) }
                      ] piq xxe pis
                      xxl:f64[400] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(400,)
                      ] 0.0
                      xxm:f64[400,180] xxn:f64[400] xxo:f64[400,180] xxp:f64[400,36]
                        xxq:f64[400] xxr:f64[400] xxs:f64[1,400] = scan[
                        _split_transpose=False
                        jaxpr={ lambda ; xxt:f64[36,2] xxu:f64[400,180] xxv:f64[400]
                            xxw:f64[400,180] xxx:f64[400,36] xxy:f64[400] xxz:f64[400]. let
                            xya:f64[400,36] = add xxx 1.0
                            xyb:f64[36,1] = slice[
                              limit_indices=(36, 2)
                              start_indices=(0, 1)
                              strides=None
                            ] xxt
                            xyc:f64[36] = squeeze[dimensions=(1,)] xyb
                            xyd:f64[36,1] = slice[
                              limit_indices=(36, 1)
                              start_indices=(0, 0)
                              strides=None
                            ] xxt
                            xye:f64[36] = squeeze[dimensions=(1,)] xyd
                            xyf:f64[36] = sub xyc xye
                            xyg:f64[1,36] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 36)
                            ] xyf
                            xyh:f64[400,36] = mul xya xyg
                            xyi:f64[400,36] = div xyh 2.0
                            xyj:f64[36,1] = slice[
                              limit_indices=(36, 1)
                              start_indices=(0, 0)
                              strides=None
                            ] xxt
                            xyk:f64[36] = squeeze[dimensions=(1,)] xyj
                            xyl:f64[1,36] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 36)
                            ] xyk
                            xym:f64[400,36] = add xyi xyl
                            xyn:f64[400,4] = slice[
                              limit_indices=(400, 4)
                              start_indices=(0, 0)
                              strides=None
                            ] xym
                            xyo:f64[400,1] = slice[
                              limit_indices=(400, 3)
                              start_indices=(0, 2)
                              strides=None
                            ] xyn
                            xyp:f64[400] = squeeze[dimensions=(1,)] xyo
                            xyq:f64[400,1] = slice[
                              limit_indices=(400, 4)
                              start_indices=(0, 3)
                              strides=None
                            ] xyn
                            xyr:f64[400] = squeeze[dimensions=(1,)] xyq
                            xys:f64[400] = mul xyp xyr
                            xyt:f64[400,1] = slice[
                              limit_indices=(400, 1)
                              start_indices=(0, 0)
                              strides=None
                            ] xyn
                            xyu:f64[400] = squeeze[dimensions=(1,)] xyt
                            xyv:f64[400,1] = slice[
                              limit_indices=(400, 2)
                              start_indices=(0, 1)
                              strides=None
                            ] xyn
                            xyw:f64[400] = squeeze[dimensions=(1,)] xyv
                            xyx:f64[400] = mul xyu xyw
                            xyy:f64[400] = add xys xyx
                            xyz:f64[400,1] = slice[
                              limit_indices=(400, 2)
                              start_indices=(0, 1)
                              strides=None
                            ] xyn
                            xza:f64[400] = squeeze[dimensions=(1,)] xyz
                            xzb:f64[400,1] = slice[
                              limit_indices=(400, 2)
                              start_indices=(0, 1)
                              strides=None
                            ] xyn
                            xzc:f64[400] = squeeze[dimensions=(1,)] xzb
                            xzd:f64[400] = mul xza xzc
                            xze:f64[400,1] = slice[
                              limit_indices=(400, 3)
                              start_indices=(0, 2)
                              strides=None
                            ] xyn
                            xzf:f64[400] = squeeze[dimensions=(1,)] xze
                            xzg:f64[400,1] = slice[
                              limit_indices=(400, 3)
                              start_indices=(0, 2)
                              strides=None
                            ] xyn
                            xzh:f64[400] = squeeze[dimensions=(1,)] xzg
                            xzi:f64[400] = mul xzf xzh
                            xzj:f64[400] = add xzd xzi
                            xzk:f64[400] = sub 0.5 xzj
                            xzl:f64[400] = atan2 xyy xzk
                            xzm:f64[400,1] = slice[
                              limit_indices=(400, 2)
                              start_indices=(0, 1)
                              strides=None
                            ] xyn
                            xzn:f64[400] = squeeze[dimensions=(1,)] xzm
                            xzo:f64[400,1] = slice[
                              limit_indices=(400, 4)
                              start_indices=(0, 3)
                              strides=None
                            ] xyn
                            xzp:f64[400] = squeeze[dimensions=(1,)] xzo
                            xzq:f64[400] = mul xzn xzp
                            xzr:f64[400,1] = slice[
                              limit_indices=(400, 1)
                              start_indices=(0, 0)
                              strides=None
                            ] xyn
                            xzs:f64[400] = squeeze[dimensions=(1,)] xzr
                            xzt:f64[400,1] = slice[
                              limit_indices=(400, 3)
                              start_indices=(0, 2)
                              strides=None
                            ] xyn
                            xzu:f64[400] = squeeze[dimensions=(1,)] xzt
                            xzv:f64[400] = mul xzs xzu
                            xzw:f64[400] = sub xzq xzv
                            xzx:f64[400] = mul -2.0 xzw
                            xzy:f64[400] = pjit[
                              name=clip
                              jaxpr={ lambda ; xzz:f64[400] yaa:f64[] yab:f64[]. let
                                  yac:f64[] = convert_element_type[
                                    new_dtype=float64
                                    weak_type=False
                                  ] yaa
                                  yad:f64[400] = max yac xzz
                                  yae:f64[] = convert_element_type[
                                    new_dtype=float64
                                    weak_type=False
                                  ] yab
                                  yaf:f64[400] = min yae yad
                                in (yaf,) }
                            ] xzx -1.0 1.0
                            yag:f64[400] = custom_jvp_call[
                              call_jaxpr={ lambda ; yah:f64[400]. let
                                  yai:f64[400] = asin yah
                                in (yai,) }
                              jvp_jaxpr_thunk=<function _memoize.<locals>.memoized at 0x7d832d544f70>
                              num_consts=0
                              symbolic_zeros=False
                            ] xzy
                            yaj:f64[400,1] = slice[
                              limit_indices=(400, 2)
                              start_indices=(0, 1)
                              strides=None
                            ] xyn
                            yak:f64[400] = squeeze[dimensions=(1,)] yaj
                            yal:f64[400,1] = slice[
                              limit_indices=(400, 3)
                              start_indices=(0, 2)
                              strides=None
                            ] xyn
                            yam:f64[400] = squeeze[dimensions=(1,)] yal
                            yan:f64[400] = mul yak yam
                            yao:f64[400,1] = slice[
                              limit_indices=(400, 1)
                              start_indices=(0, 0)
                              strides=None
                            ] xyn
                            yap:f64[400] = squeeze[dimensions=(1,)] yao
                            yaq:f64[400,1] = slice[
                              limit_indices=(400, 4)
                              start_indices=(0, 3)
                              strides=None
                            ] xyn
                            yar:f64[400] = squeeze[dimensions=(1,)] yaq
                            yas:f64[400] = mul yap yar
                            yat:f64[400] = add yan yas
                            yau:f64[400,1] = slice[
                              limit_indices=(400, 3)
                              start_indices=(0, 2)
                              strides=None
                            ] xyn
                            yav:f64[400] = squeeze[dimensions=(1,)] yau
                            yaw:f64[400,1] = slice[
                              limit_indices=(400, 3)
                              start_indices=(0, 2)
                              strides=None
                            ] xyn
                            yax:f64[400] = squeeze[dimensions=(1,)] yaw
                            yay:f64[400] = mul yav yax
                            yaz:f64[400,1] = slice[
                              limit_indices=(400, 4)
                              start_indices=(0, 3)
                              strides=None
                            ] xyn
                            yba:f64[400] = squeeze[dimensions=(1,)] yaz
                            ybb:f64[400,1] = slice[
                              limit_indices=(400, 4)
                              start_indices=(0, 3)
                              strides=None
                            ] xyn
                            ybc:f64[400] = squeeze[dimensions=(1,)] ybb
                            ybd:f64[400] = mul yba ybc
                            ybe:f64[400] = add yay ybd
                            ybf:f64[400] = sub 0.5 ybe
                            ybg:f64[400] = atan2 yat ybf
                            ybh:f64[400,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(400, 1)
                            ] xzl
                            ybi:f64[400,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(400, 1)
                            ] yag
                            ybj:f64[400,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(400, 1)
                            ] ybg
                            ybk:f64[400,3] = concatenate[dimension=1] ybh ybi ybj
                            ybl:f64[400,1] = slice[
                              limit_indices=(400, 1)
                              start_indices=(0, 0)
                              strides=(1, 1)
                            ] ybk
                            ybm:f64[400] = squeeze[dimensions=(1,)] ybl
                            ybn:f64[400,1] = slice[
                              limit_indices=(400, 2)
                              start_indices=(0, 1)
                              strides=(1, 1)
                            ] ybk
                            ybo:f64[400] = squeeze[dimensions=(1,)] ybn
                            ybp:f64[400] = abs ybm
                            ybq:bool[400] = lt ybp 0.785
                            ybr:f64[400] = abs ybo
                            ybs:bool[400] = lt ybr 0.785
                            ybt:bool[400] = and ybq ybs
                            ybu:f64[400] = pjit[
                              name=_where
                              jaxpr={ lambda ; ybv:bool[400] ybw:f64[] ybx:f64[]. let
                                  yby:f64[400] = broadcast_in_dim[
                                    broadcast_dimensions=()
                                    shape=(400,)
                                  ] ybx
                                  ybz:f64[400] = broadcast_in_dim[
                                    broadcast_dimensions=()
                                    shape=(400,)
                                  ] ybw
                                  yca:f64[400] = select_n ybv yby ybz
                                in (yca,) }
                            ] ybt 1.0 0.0
                            ycb:f64[400] = sub 1.0 ybu
                            ycc:f64[400,144] = slice[
                              limit_indices=(400, 144)
                              start_indices=(0, 0)
                              strides=None
                            ] xxu
                            ycd:f64[400,180] = concatenate[dimension=1] xxx ycc
                          in (ycd, ycb, xxw, xxx, xxy, xxz, xxy) }
                        length=1
                        linear=(False, False, False, False, False, False, False)
                        num_carry=6
                        num_consts=1
                        reverse=False
                        unroll=1
                      ] pdt pip xxl pir vfm xxd xxf
                      yce:f64[400] = reduce_sum[axes=(0,)] xxs
                      ycf:f64[400] = add xxr 1.0
                      ycg:bool[400] = ge ycf 1000.0
                      ych:bool[400] = and ycg False
                      yci:f64[400] = pjit[
                        name=_where
                        jaxpr={ lambda ; ycj:bool[400] yck:f64[] ycl:f64[400]. let
                            ycm:f64[400] = broadcast_in_dim[
                              broadcast_dimensions=()
                              shape=(400,)
                            ] yck
                            ycn:f64[400] = select_n ycj ycl ycm
                          in (ycn,) }
                      ] ych 1.0 xxn
                      yco:bool[400] = ge ycf 1000.0
                      ycp:f64[400] = sub 1.0 xxn
                      ycq:f64[400] = pjit[
                        name=_where
                        jaxpr={ lambda ; ycr:bool[400] ycs:f64[400] yct:f64[]. let
                            ycu:f64[400] = broadcast_in_dim[
                              broadcast_dimensions=()
                              shape=(400,)
                            ] yct
                            ycv:f64[400] = select_n ycr ycu ycs
                          in (ycv,) }
                      ] yco ycp 0.0
                      ycw:f64[400,1] = reshape[
                        dimensions=None
                        new_sizes=(400, 1)
                      ] yci
                      ycx:f64[400,180] = pjit[
                        name=_where
                        jaxpr={ lambda ; ycy:f64[400,1] ycz:f64[400,180] yda:f64[400,180]. let
                            ydb:bool[400,1] = ne ycy 0.0
                            ydc:bool[400] = squeeze[dimensions=(1,)] ydb
                            ydd:bool[400,180] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(400, 180)
                            ] ydc
                            yde:f64[400,180] = select_n ydd yda ycz
                          in (yde,) }
                      ] ycw xxo xxm
                      ydf:f64[400] = sub 1.0 yci
                      ydg:f64[400,1] = reshape[
                        dimensions=None
                        new_sizes=(400, 1)
                      ] yce
                      ydh:f64[400,1] = reshape[
                        dimensions=None
                        new_sizes=(400, 1)
                      ] ydf
                      ydi:f64[400,1] = reshape[
                        dimensions=None
                        new_sizes=(400, 1)
                      ] ycq
                      ydj:f64[400,1] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] ydh
                      ydk:f64[400,1] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] ydi
                      ydl:f64[400,372] = concatenate[dimension=1] pip plx ydg ydj
                        ycx ydk
                      ydm:i32[] = sub 4000 piu
                      ydn:i32[] = sub ydm 400
                      ydo:i32[] = min 0 ydn
                      ydp:bool[] = ne ydo 0
                      ydq:i32[] = convert_element_type[
                        new_dtype=int32
                        weak_type=False
                      ] ydp
                      ydr:f64[4000,372] = cond[
                        branches=(
                          { lambda ; yds_:f64[4000,372] ydt_:i32[] ydu:f64[4000,372]. let
                              
                            in (ydu,) }
                          { lambda ; ydv:f64[4000,372] ydw:i32[] ydx_:f64[4000,372]. let
                              ydy:f64[4000,372] = pjit[
                                name=_roll_dynamic
                                jaxpr=_roll_dynamic
                              ] ydv ydw
                            in (ydy,) }
                        )
                        linear=(False, False, False)
                      ] ydq pit ydo pit
                      ydz:i32[] = add piu ydo
                      yea:bool[] = lt ydz 0
                      yeb:i32[] = add ydz 4000
                      yec:i32[] = select_n yea ydz yeb
                      yed:i32[] = add 0 372
                      yee:i32[] = select_n False 0 yed
                      yef:f64[4000,372] = dynamic_update_slice ydr ydl yec yee
                      yeg:i32[] = add ydz 400
                      yeh:i32[] = pjit[name=remainder jaxpr=remainder] yeg 4001
                      yei:i32[] = add piv ydo
                      yej:i32[] = max 0 yei
                    in (ycx, yci, xxo, ycf, yef, yeh, yej, piw, pje) }
                  length=1
                  linear=(False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False)
                  num_carry=9
                  num_consts=147
                  reverse=False
                  unroll=1
                ] ozl ozk ozn ozm ozp ozo otm otn oto otp otq otr ots ott otu otv
                  otw otx oty otz oua oub ouc oud oue ouf oug ouh oui ouj ouk oul
                  oum oun ouo oup ouq our ous out ouu ouv ouw oux ouy ouz ova ovb
                  ovc ovd ove ovf ovg ovh ovi ovj ovk ovl ovm ovn ovo ovp ovq ovr
                  ovs ovt ovu ovv ovw ovx ovy ovz owa owb owc owd owe owf owg owh
                  owi owj owk owl owm own owo owp owq owr ows owt owu owv oww owx
                  owy owz oxa oxb oxc oxd oxe oxf oxg oxh oxi oxj oxk oxl oxm oxn
                  oxo oxp oxq oxr oxs oxt oxu oxv oxw oxx oxy oxz oya oyb oyc oyd
                  oye oyf oyg oyh oyi oyj oyk oyl oym oyn oyo oyp oyq oyr oys oyt
                  oyu oyv oyw pcq pcr pcq pcs pbx pby pbz pca pcf
                yek:i32[] yel:f32[512] yem:f32[180,512] yen:f32[512] yeo:f32[512,512]
                  yep:f32[18] yeq:f32[512,18] yer:f32[512] yes:f32[180,512] yet:f32[512]
                  yeu:f32[512,512] yev:f32[18] yew:f32[512,18] yex:f32[512] yey:f32[180,512]
                  yez:f32[512] yfa:f32[512,512] yfb:f32[18] yfc:f32[512,18] yfd:i32[]
                  yfe:f32[512] yff:f32[189,512] yfg:f32[512] yfh:f32[512,512] yfi:f32[1]
                  yfj:f32[512,1] yfk:f32[512] yfl:f32[189,512] yfm:f32[512] yfn:f32[512,512]
                  yfo:f32[1] yfp:f32[512,1] yfq:f32[512] yfr:f32[189,512] yfs:f32[512]
                  yft:f32[512,512] yfu:f32[1] yfv:f32[512,1] yfw:f32[512] yfx:f32[189,512]
                  yfy:f32[512] yfz:f32[512,512] yga:f32[1] ygb:f32[512,1] ygc:f32[512]
                  ygd:f32[189,512] yge:f32[512] ygf:f32[512,512] ygg:f32[1] ygh:f32[512,1]
                  ygi:f32[512] ygj:f32[189,512] ygk:f32[512] ygl:f32[512,512] ygm:f32[1]
                  ygn:f32[512,1] ygo:f32[512] ygp:f32[189,512] ygq:f32[512] ygr:f32[512,512]
                  ygs:f32[1] ygt:f32[512,1] ygu:f32[512] ygv:f32[189,512] ygw:f32[512]
                  ygx:f32[512,512] ygy:f32[1] ygz:f32[512,1] yha:f64[] yhb:f64[]
                  yhc:i32[] yhd:f32[] yhe:f32[] yhf:f32[] yhg:f64[180] yhh:f64[180]
                  yhi:f64[] yhj:f64[180] yhk:u32[2] yhl:f64[60] yhm:f32[60] yhn:f64[60]
                  yho:i32[] yhp:f64[60] yhq:u32[2] = pjit[
                  name=policy_update
                  jaxpr={ lambda ; yhr:f64[4000,372] yhs:i32[] yht:i32[] yhu:u32[2]
                      yhv:i32[] yhw:f32[512] yhx:f32[180,512] yhy:f32[512] yhz:f32[512,512]
                      yia:f32[18] yib:f32[512,18] yic:f32[512] yid:f32[180,512] yie:f32[512]
                      yif:f32[512,512] yig:f32[18] yih:f32[512,18] yii:f32[512] yij:f32[180,512]
                      yik:f32[512] yil:f32[512,512] yim:f32[18] yin:f32[512,18] yio:i32[]
                      yip:f32[512] yiq:f32[189,512] yir:f32[512] yis:f32[512,512]
                      yit:f32[1] yiu:f32[512,1] yiv:f32[512] yiw:f32[189,512] yix:f32[512]
                      yiy:f32[512,512] yiz:f32[1] yja:f32[512,1] yjb:f32[512] yjc:f32[189,512]
                      yjd:f32[512] yje:f32[512,512] yjf:f32[1] yjg:f32[512,1] yjh:f32[512]
                      yji:f32[189,512] yjj:f32[512] yjk:f32[512,512] yjl:f32[1] yjm:f32[512,1]
                      yjn:f32[512] yjo:f32[189,512] yjp:f32[512] yjq:f32[512,512]
                      yjr:f32[1] yjs:f32[512,1] yjt:f32[512] yju:f32[189,512] yjv:f32[512]
                      yjw:f32[512,512] yjx:f32[1] yjy:f32[512,1] yjz:f32[512] yka:f32[189,512]
                      ykb:f32[512] ykc:f32[512,512] ykd:f32[1] yke:f32[512,1] ykf:f32[512]
                      ykg:f32[189,512] ykh:f32[512] yki:f32[512,512] ykj:f32[1] ykk:f32[512,1]
                      ykl:f64[] ykm:f64[] ykn:i32[] yko:f32[] ykp:f32[] ykq:f32[]
                      ykr:f64[180] yks:f64[180] ykt:f64[] yku:f64[180] ykv:u32[2]
                      ykw:f64[15000,372] ykx:i32[] yky:i32[] ykz:u32[2]. let
                      yla:key<fry>[] = random_wrap[impl=fry] yhu
                      ylb:key<fry>[2] = random_split[shape=(2,)] yla
                      ylc:u32[2,2] = random_unwrap ylb
                      yld:u32[1,2] = slice[
                        limit_indices=(1, 2)
                        start_indices=(0, 0)
                        strides=(1, 1)
                      ] ylc
                      yle:u32[2] = squeeze[dimensions=(0,)] yld
                      ylf:u32[1,2] = slice[
                        limit_indices=(2, 2)
                        start_indices=(1, 0)
                        strides=(1, 1)
                      ] ylc
                      ylg:u32[2] = squeeze[dimensions=(0,)] ylf
                      ylh:key<fry>[] = random_wrap[impl=fry] ylg
                      yli:i64[15360] = pjit[
                        name=_randint
                        jaxpr={ lambda ; ylj:key<fry>[] ylk:i32[] yll:i32[]. let
                            ylm:i64[] = pjit[name=clip jaxpr=clip3] 9223372036854775807
                              -2147483648 2147483647
                            yln:i32[] = convert_element_type[
                              new_dtype=int32
                              weak_type=False
                            ] ylm
                            ylo:bool[] = gt yll yln
                            ylp:i32[] = pjit[name=clip jaxpr=clip4] ylk -2147483648
                              2147483647
                            ylq:i64[] = convert_element_type[
                              new_dtype=int64
                              weak_type=False
                            ] ylp
                            ylr:i32[] = pjit[name=clip jaxpr=clip4] yll -2147483648
                              2147483647
                            yls:i64[] = convert_element_type[
                              new_dtype=int64
                              weak_type=False
                            ] ylr
                            ylt:i64[1] = broadcast_in_dim[
                              broadcast_dimensions=()
                              shape=(1,)
                            ] ylq
                            ylu:i64[1] = broadcast_in_dim[
                              broadcast_dimensions=()
                              shape=(1,)
                            ] yls
                            ylv:key<fry>[2] = random_split[shape=(2,)] ylj
                            ylw:key<fry>[1] = slice[
                              limit_indices=(1,)
                              start_indices=(0,)
                              strides=(1,)
                            ] ylv
                            ylx:key<fry>[] = squeeze[dimensions=(0,)] ylw
                            yly:key<fry>[1] = slice[
                              limit_indices=(2,)
                              start_indices=(1,)
                              strides=(1,)
                            ] ylv
                            ylz:key<fry>[] = squeeze[dimensions=(0,)] yly
                            yma:u64[15360] = random_bits[
                              bit_width=64
                              shape=(15360,)
                            ] ylx
                            ymb:u64[15360] = random_bits[
                              bit_width=64
                              shape=(15360,)
                            ] ylz
                            ymc:i64[1] = sub ylu ylt
                            ymd:u64[1] = convert_element_type[
                              new_dtype=uint64
                              weak_type=False
                            ] ymc
                            yme:bool[1] = le ylu ylt
                            ymf:u64[1] = broadcast_in_dim[
                              broadcast_dimensions=()
                              shape=(1,)
                            ] 1
                            ymg:u64[1] = select_n yme ymd ymf
                            ymh:bool[1] = gt ylu ylt
                            ymi:bool[1] = and ylo ymh
                            ymj:u64[1] = add ymg 1
                            ymk:u64[1] = select_n ymi ymg ymj
                            yml:u64[1] = rem 4294967296 ymk
                            ymm:u64[1] = mul yml yml
                            ymn:u64[1] = rem ymm ymk
                            ymo:u64[15360] = rem yma ymk
                            ymp:u64[15360] = mul ymo ymn
                            ymq:u64[15360] = rem ymb ymk
                            ymr:u64[15360] = add ymp ymq
                            yms:u64[15360] = rem ymr ymk
                            ymt:i64[15360] = convert_element_type[
                              new_dtype=int64
                              weak_type=False
                            ] yms
                            ymu:i64[15360] = add ylt ymt
                          in (ymu,) }
                      ] ylh yht yhs
                      ymv:f64[15360,372] = pjit[
                        name=_take
                        jaxpr={ lambda ; ymw:f64[4000,372] ymx:i64[15360]. let
                            ymy:i64[15360] = pjit[
                              name=remainder
                              jaxpr={ lambda ; ymz:i64[15360] yna:i64[]. let
                                  ynb:bool[] = eq yna 0
                                  ync:i64[] = pjit[name=_where jaxpr=_where12] ynb
                                    1 yna
                                  ynd:i64[15360] = rem ymz ync
                                  yne:bool[15360] = ne ynd 0
                                  ynf:bool[15360] = lt ynd 0
                                  yng:bool[] = lt ync 0
                                  ynh:bool[15360] = ne ynf yng
                                  yni:bool[15360] = and ynh yne
                                  ynj:i64[15360] = add ynd ync
                                  ynk:i64[15360] = select_n yni ynd ynj
                                in (ynk,) }
                            ] ymx 4000
                            ynl:i64[15360,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(15360, 1)
                            ] ymy
                            ynm:f64[15360,372] = gather[
                              dimension_numbers=GatherDimensionNumbers(offset_dims=(1,), collapsed_slice_dims=(0,), start_index_map=(0,))
                              fill_value=None
                              indices_are_sorted=False
                              mode=GatherScatterMode.PROMISE_IN_BOUNDS
                              slice_sizes=(1, 372)
                              unique_indices=False
                            ] ymw ynl
                          in (ynm,) }
                      ] yhr yli
                      ynn:f64[15360,180] = slice[
                        limit_indices=(15360, 180)
                        start_indices=(0, 0)
                        strides=None
                      ] ymv
                      yno:f64[15360,9] = slice[
                        limit_indices=(15360, 189)
                        start_indices=(0, 180)
                        strides=None
                      ] ymv
                      ynp:f64[15360,1] = slice[
                        limit_indices=(15360, 190)
                        start_indices=(0, 189)
                        strides=None
                      ] ymv
                      ynq:f64[15360,1] = slice[
                        limit_indices=(15360, 191)
                        start_indices=(0, 190)
                        strides=None
                      ] ymv
                      ynr:f64[15360,180] = slice[
                        limit_indices=(15360, 371)
                        start_indices=(0, 191)
                        strides=None
                      ] ymv
                      yns:f64[15360,1] = slice[
                        limit_indices=(15360, 372)
                        start_indices=(0, 371)
                        strides=None
                      ] ymv
                      ynt:f64[15360] = reshape[
                        dimensions=None
                        new_sizes=(15360,)
                      ] ynp
                      ynu:f64[15360] = reshape[
                        dimensions=None
                        new_sizes=(15360,)
                      ] ynq
                      ynv:f64[15360] = reshape[
                        dimensions=None
                        new_sizes=(15360,)
                      ] yns
                      ynw:key<fry>[] = random_wrap[impl=fry] ykz
                      ynx:key<fry>[2] = random_split[shape=(2,)] ynw
                      yny:u32[2,2] = random_unwrap ynx
                      ynz:u32[1,2] = slice[
                        limit_indices=(1, 2)
                        start_indices=(0, 0)
                        strides=(1, 1)
                      ] yny
                      yoa:u32[2] = squeeze[dimensions=(0,)] ynz
                      yob:u32[1,2] = slice[
                        limit_indices=(2, 2)
                        start_indices=(1, 0)
                        strides=(1, 1)
                      ] yny
                      yoc:u32[2] = squeeze[dimensions=(0,)] yob
                      yod:key<fry>[] = random_wrap[impl=fry] yoc
                      yoe:i64[400] = pjit[name=_randint jaxpr=_randint] yod yky ykx
                      yof:f64[400,372] = pjit[name=_take jaxpr=_take] ykw yoe
                      yog:f64[400,180] = slice[
                        limit_indices=(400, 180)
                        start_indices=(0, 0)
                        strides=None
                      ] yof
                      yoh:f64[400,9] = slice[
                        limit_indices=(400, 189)
                        start_indices=(0, 180)
                        strides=None
                      ] yof
                      yoi:f64[400,1] = slice[
                        limit_indices=(400, 190)
                        start_indices=(0, 189)
                        strides=None
                      ] yof
                      yoj:f64[400,1] = slice[
                        limit_indices=(400, 191)
                        start_indices=(0, 190)
                        strides=None
                      ] yof
                      yok:f64[400,180] = slice[
                        limit_indices=(400, 371)
                        start_indices=(0, 191)
                        strides=None
                      ] yof
                      yol:f64[400,1] = slice[
                        limit_indices=(400, 372)
                        start_indices=(0, 371)
                        strides=None
                      ] yof
                      yom:f64[400] = reshape[dimensions=None new_sizes=(400,)] yoi
                      yon:f64[400] = reshape[dimensions=None new_sizes=(400,)] yoj
                      yoo:f64[400] = reshape[dimensions=None new_sizes=(400,)] yol
                      yop:f64[15760,180] = concatenate[dimension=0] ynn yog
                      yoq:f64[15760,9] = concatenate[dimension=0] yno yoh
                      yor:f64[15760] = concatenate[dimension=0] ynt yom
                      yos:f64[15760] = concatenate[dimension=0] ynu yon
                      yot:f64[15760,180] = concatenate[dimension=0] ynr yok
                      you:f64[15760] = concatenate[dimension=0] ynv yoo
                      yov:key<fry>[] = random_wrap[impl=fry] ykv
                      yow:key<fry>[2] = random_split[shape=(2,)] yov
                      yox:u32[2,2] = random_unwrap yow
                      yoy:u32[1,2] = slice[
                        limit_indices=(1, 2)
                        start_indices=(0, 0)
                        strides=(1, 1)
                      ] yox
                      yoz:u32[2] = squeeze[dimensions=(0,)] yoy
                      ypa:u32[1,2] = slice[
                        limit_indices=(2, 2)
                        start_indices=(1, 0)
                        strides=(1, 1)
                      ] yox
                      ypb:u32[2] = squeeze[dimensions=(0,)] ypa
                      ypc:key<fry>[] = random_wrap[impl=fry] ypb
                      ypd:i64[16260] = iota[
                        dimension=0
                        dtype=int64
                        shape=(16260,)
                      ] 
                      ype:i64[16260] = pjit[
                        name=_shuffle
                        jaxpr={ lambda ; ypf:key<fry>[] ypg:i64[16260]. let
                            yph:key<fry>[2] = random_split[shape=(2,)] ypf
                            ypi:key<fry>[1] = slice[
                              limit_indices=(1,)
                              start_indices=(0,)
                              strides=(1,)
                            ] yph
                            ypj:key<fry>[] = squeeze[dimensions=(0,)] ypi
                            ypk:key<fry>[1] = slice[
                              limit_indices=(2,)
                              start_indices=(1,)
                              strides=(1,)
                            ] yph
                            ypl:key<fry>[] = squeeze[dimensions=(0,)] ypk
                            ypm:u32[16260] = random_bits[
                              bit_width=32
                              shape=(16260,)
                            ] ypl
                            _:u32[16260] ypn:i64[16260] = sort[
                              dimension=0
                              is_stable=True
                              num_keys=1
                            ] ypm ypg
                            ypo:key<fry>[2] = random_split[shape=(2,)] ypj
                            ypp:key<fry>[1] = slice[
                              limit_indices=(2,)
                              start_indices=(1,)
                              strides=(1,)
                            ] ypo
                            ypq:key<fry>[] = squeeze[dimensions=(0,)] ypp
                            ypr:u32[16260] = random_bits[
                              bit_width=32
                              shape=(16260,)
                            ] ypq
                            _:u32[16260] yps:i64[16260] = sort[
                              dimension=0
                              is_stable=True
                              num_keys=1
                            ] ypr ypn
                          in (yps,) }
                      ] ypc ypd
                      ypt:bool[16260] = lt ype 0
                      ypu:i64[16260] = add ype 15760
                      ypv:i64[16260] = select_n ypt ype ypu
                      ypw:i32[16260] = convert_element_type[
                        new_dtype=int32
                        weak_type=False
                      ] ypv
                      ypx:i32[16260,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(16260, 1)
                      ] ypw
                      ypy:f64[16260,180] = gather[
                        dimension_numbers=GatherDimensionNumbers(offset_dims=(1,), collapsed_slice_dims=(0,), start_index_map=(0,))
                        fill_value=None
                        indices_are_sorted=False
                        mode=GatherScatterMode.PROMISE_IN_BOUNDS
                        slice_sizes=(1, 180)
                        unique_indices=False
                      ] yop ypx
                      ypz:bool[16260] = lt ype 0
                      yqa:i64[16260] = add ype 15760
                      yqb:i64[16260] = select_n ypz ype yqa
                      yqc:i32[16260] = convert_element_type[
                        new_dtype=int32
                        weak_type=False
                      ] yqb
                      yqd:i32[16260,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(16260, 1)
                      ] yqc
                      yqe:f64[16260,9] = gather[
                        dimension_numbers=GatherDimensionNumbers(offset_dims=(1,), collapsed_slice_dims=(0,), start_index_map=(0,))
                        fill_value=None
                        indices_are_sorted=False
                        mode=GatherScatterMode.PROMISE_IN_BOUNDS
                        slice_sizes=(1, 9)
                        unique_indices=False
                      ] yoq yqd
                      yqf:bool[16260] = lt ype 0
                      yqg:i64[16260] = add ype 15760
                      yqh:i64[16260] = select_n yqf ype yqg
                      yqi:i32[16260] = convert_element_type[
                        new_dtype=int32
                        weak_type=False
                      ] yqh
                      yqj:i32[16260,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(16260, 1)
                      ] yqi
                      yqk:f64[16260] = gather[
                        dimension_numbers=GatherDimensionNumbers(offset_dims=(), collapsed_slice_dims=(0,), start_index_map=(0,))
                        fill_value=None
                        indices_are_sorted=False
                        mode=GatherScatterMode.PROMISE_IN_BOUNDS
                        slice_sizes=(1,)
                        unique_indices=False
                      ] yor yqj
                      yql:bool[16260] = lt ype 0
                      yqm:i64[16260] = add ype 15760
                      yqn:i64[16260] = select_n yql ype yqm
                      yqo:i32[16260] = convert_element_type[
                        new_dtype=int32
                        weak_type=False
                      ] yqn
                      yqp:i32[16260,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(16260, 1)
                      ] yqo
                      yqq:f64[16260] = gather[
                        dimension_numbers=GatherDimensionNumbers(offset_dims=(), collapsed_slice_dims=(0,), start_index_map=(0,))
                        fill_value=None
                        indices_are_sorted=False
                        mode=GatherScatterMode.PROMISE_IN_BOUNDS
                        slice_sizes=(1,)
                        unique_indices=False
                      ] yos yqp
                      yqr:bool[16260] = lt ype 0
                      yqs:i64[16260] = add ype 15760
                      yqt:i64[16260] = select_n yqr ype yqs
                      yqu:i32[16260] = convert_element_type[
                        new_dtype=int32
                        weak_type=False
                      ] yqt
                      yqv:i32[16260,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(16260, 1)
                      ] yqu
                      yqw:f64[16260,180] = gather[
                        dimension_numbers=GatherDimensionNumbers(offset_dims=(1,), collapsed_slice_dims=(0,), start_index_map=(0,))
                        fill_value=None
                        indices_are_sorted=False
                        mode=GatherScatterMode.PROMISE_IN_BOUNDS
                        slice_sizes=(1, 180)
                        unique_indices=False
                      ] yot yqv
                      yqx:bool[16260] = lt ype 0
                      yqy:i64[16260] = add ype 15760
                      yqz:i64[16260] = select_n yqx ype yqy
                      yra:i32[16260] = convert_element_type[
                        new_dtype=int32
                        weak_type=False
                      ] yqz
                      yrb:i32[16260,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(16260, 1)
                      ] yra
                      yrc:f64[16260] = gather[
                        dimension_numbers=GatherDimensionNumbers(offset_dims=(), collapsed_slice_dims=(0,), start_index_map=(0,))
                        fill_value=None
                        indices_are_sorted=False
                        mode=GatherScatterMode.PROMISE_IN_BOUNDS
                        slice_sizes=(1,)
                        unique_indices=False
                      ] you yrb
                      yrd:f64[60,271,180] = reshape[
                        dimensions=None
                        new_sizes=(60, 271, 180)
                      ] ypy
                      yre:f64[60,271,9] = reshape[
                        dimensions=None
                        new_sizes=(60, 271, 9)
                      ] yqe
                      yrf:f64[60,271] = reshape[
                        dimensions=None
                        new_sizes=(60, 271)
                      ] yqk
                      yrg:f64[60,271] = reshape[
                        dimensions=None
                        new_sizes=(60, 271)
                      ] yqq
                      yrh:f64[60,271,180] = reshape[
                        dimensions=None
                        new_sizes=(60, 271, 180)
                      ] yqw
                      yri:f64[60,271] = reshape[
                        dimensions=None
                        new_sizes=(60, 271)
                      ] yrc
                      yrj:i32[] yrk:f32[512] yrl:f32[180,512] yrm:f32[512] yrn:f32[512,512]
                        yro:f32[18] yrp:f32[512,18] yrq:f32[512] yrr:f32[180,512]
                        yrs:f32[512] yrt:f32[512,512] yru:f32[18] yrv:f32[512,18]
                        yrw:f32[512] yrx:f32[180,512] yry:f32[512] yrz:f32[512,512]
                        ysa:f32[18] ysb:f32[512,18] ysc:i32[] ysd:f32[512] yse:f32[189,512]
                        ysf:f32[512] ysg:f32[512,512] ysh:f32[1] ysi:f32[512,1] ysj:f32[512]
                        ysk:f32[189,512] ysl:f32[512] ysm:f32[512,512] ysn:f32[1]
                        yso:f32[512,1] ysp:f32[512] ysq:f32[189,512] ysr:f32[512]
                        yss:f32[512,512] yst:f32[1] ysu:f32[512,1] ysv:f32[512] ysw:f32[189,512]
                        ysx:f32[512] ysy:f32[512,512] ysz:f32[1] yta:f32[512,1] ytb:f32[512]
                        ytc:f32[189,512] ytd:f32[512] yte:f32[512,512] ytf:f32[1]
                        ytg:f32[512,1] yth:f32[512] yti:f32[189,512] ytj:f32[512]
                        ytk:f32[512,512] ytl:f32[1] ytm:f32[512,1] ytn:f32[512] yto:f32[189,512]
                        ytp:f32[512] ytq:f32[512,512] ytr:f32[1] yts:f32[512,1] ytt:f32[512]
                        ytu:f32[189,512] ytv:f32[512] ytw:f32[512,512] ytx:f32[1]
                        yty:f32[512,1] ytz:f64[] yua:f64[] yub:i32[] yuc:f32[] yud:f32[]
                        yue:f32[] yuf:f64[180] yug:f64[180] yuh:f64[] yui:f64[180]
                        _:u32[2] yuj:f64[60] yuk:f32[60] yul:f64[60] yum:f64[60] = scan[
                        _split_transpose=False
                        jaxpr={ lambda ; yun:i32[] yuo:f32[512] yup:f32[180,512]
                            yuq:f32[512] yur:f32[512,512] yus:f32[18] yut:f32[512,18]
                            yuu:f32[512] yuv:f32[180,512] yuw:f32[512] yux:f32[512,512]
                            yuy:f32[18] yuz:f32[512,18] yva:f32[512] yvb:f32[180,512]
                            yvc:f32[512] yvd:f32[512,512] yve:f32[18] yvf:f32[512,18]
                            yvg:i32[] yvh:f32[512] yvi:f32[189,512] yvj:f32[512]
                            yvk:f32[512,512] yvl:f32[1] yvm:f32[512,1] yvn:f32[512]
                            yvo:f32[189,512] yvp:f32[512] yvq:f32[512,512] yvr:f32[1]
                            yvs:f32[512,1] yvt:f32[512] yvu:f32[189,512] yvv:f32[512]
                            yvw:f32[512,512] yvx:f32[1] yvy:f32[512,1] yvz:f32[512]
                            ywa:f32[189,512] ywb:f32[512] ywc:f32[512,512] ywd:f32[1]
                            ywe:f32[512,1] ywf:f32[512] ywg:f32[189,512] ywh:f32[512]
                            ywi:f32[512,512] ywj:f32[1] ywk:f32[512,1] ywl:f32[512]
                            ywm:f32[189,512] ywn:f32[512] ywo:f32[512,512] ywp:f32[1]
                            ywq:f32[512,1] ywr:f32[512] yws:f32[189,512] ywt:f32[512]
                            ywu:f32[512,512] ywv:f32[1] yww:f32[512,1] ywx:f32[512]
                            ywy:f32[189,512] ywz:f32[512] yxa:f32[512,512] yxb:f32[1]
                            yxc:f32[512,1] yxd:f64[] yxe:f64[] yxf:i32[] yxg:f32[]
                            yxh:f32[] yxi:f32[] yxj:f64[180] yxk:f64[180] yxl:f64[]
                            yxm:f64[180] yxn:u32[2] yxo:f64[271,180] yxp:f64[271,9]
                            yxq:f64[271] yxr:f64[271] yxs:f64[271,180] yxt:f64[271]. let
                            yxu:key<fry>[] = random_wrap[impl=fry] yxn
                            yxv:key<fry>[4] = random_split[shape=(4,)] yxu
                            yxw:u32[4,2] = random_unwrap yxv
                            yxx:u32[1,2] = slice[
                              limit_indices=(1, 2)
                              start_indices=(0, 0)
                              strides=(1, 1)
                            ] yxw
                            yxy:u32[2] = squeeze[dimensions=(0,)] yxx
                            yxz:u32[1,2] = slice[
                              limit_indices=(2, 2)
                              start_indices=(1, 0)
                              strides=(1, 1)
                            ] yxw
                            yya:u32[2] = squeeze[dimensions=(0,)] yxz
                            yyb:u32[1,2] = slice[
                              limit_indices=(3, 2)
                              start_indices=(2, 0)
                              strides=(1, 1)
                            ] yxw
                            yyc:u32[2] = squeeze[dimensions=(0,)] yyb
                            yyd:u32[1,2] = slice[
                              limit_indices=(4, 2)
                              start_indices=(3, 0)
                              strides=(1, 1)
                            ] yxw
                            yye:u32[2] = squeeze[dimensions=(0,)] yyd
                            yyf:f64[180,512] = convert_element_type[
                              new_dtype=float64
                              weak_type=False
                            ] yvb
                            yyg:f64[512] = convert_element_type[
                              new_dtype=float64
                              weak_type=False
                            ] yva
                            yyh:f64[271,512] = dot_general[
                              dimension_numbers=(([1], [0]), ([], []))
                            ] yxo yyf
                            yyi:f64[1,512] = reshape[
                              dimensions=None
                              new_sizes=(1, 512)
                            ] yyg
                            yyj:f64[271,512] = add yyh yyi
                            yyk:f64[271,512] = pjit[name=silu jaxpr=silu3] yyj
                            yyl:f64[512,512] = convert_element_type[
                              new_dtype=float64
                              weak_type=False
                            ] yvd
                            yym:f64[512] = convert_element_type[
                              new_dtype=float64
                              weak_type=False
                            ] yvc
                            yyn:f64[271,512] = dot_general[
                              dimension_numbers=(([1], [0]), ([], []))
                            ] yyk yyl
                            yyo:f64[1,512] = reshape[
                              dimensions=None
                              new_sizes=(1, 512)
                            ] yym
                            yyp:f64[271,512] = add yyn yyo
                            yyq:f64[271,512] = pjit[name=silu jaxpr=silu3] yyp
                            yyr:f64[512,18] = convert_element_type[
                              new_dtype=float64
                              weak_type=False
                            ] yvf
                            yys:f64[18] = convert_element_type[
                              new_dtype=float64
                              weak_type=False
                            ] yve
                            yyt:f64[271,18] = dot_general[
                              dimension_numbers=(([1], [0]), ([], []))
                            ] yyq yyr
                            yyu:f64[1,18] = reshape[
                              dimensions=None
                              new_sizes=(1, 18)
                            ] yys
                            yyv:f64[271,18] = add yyt yyu
                            yyw:f64[271,9] = slice[
                              limit_indices=(271, 9)
                              start_indices=(0, 0)
                              strides=None
                            ] yyv
                            yyx:f64[271,9] = slice[
                              limit_indices=(271, 18)
                              start_indices=(0, 9)
                              strides=None
                            ] yyv
                            yyy:f64[271,9] = pjit[name=softplus jaxpr=softplus1] yyx
                            yyz:f64[271,9] = add yyy 0.001
                            yza:key<fry>[] = random_wrap[impl=fry] yya
                            yzb:f64[271,9] = pjit[name=_normal jaxpr=_normal] yza
                            yzc:f64[271,9] = mul yzb yyz
                            yzd:f64[271,9] = add yzc yyw
                            yze:f64[271,9] = slice[
                              limit_indices=(271, 9)
                              start_indices=(0, 0)
                              strides=None
                            ] yyv
                            yzf:f64[271,9] = slice[
                              limit_indices=(271, 18)
                              start_indices=(0, 9)
                              strides=None
                            ] yyv
                            yzg:f64[271,9] = pjit[name=softplus jaxpr=softplus1] yzf
                            yzh:f64[271,9] = add yzg 0.001
                            yzi:f64[271,9] = div yzd yzh
                            yzj:f64[271,9] = div yze yzh
                            yzk:f64[271,9] = sub yzi yzj
                            yzl:f64[271,9] = integer_pow[y=2] yzk
                            yzm:f64[271,9] = mul -0.5 yzl
                            yzn:f64[] = log 6.283185307179586
                            yzo:f64[] = mul 0.5 yzn
                            yzp:f64[271,9] = log yzh
                            yzq:f64[] = convert_element_type[
                              new_dtype=float64
                              weak_type=False
                            ] yzo
                            yzr:f64[271,9] = add yzq yzp
                            yzs:f64[271,9] = sub yzm yzr
                            yzt:f64[] = log 2.0
                            yzu:f64[] = convert_element_type[
                              new_dtype=float64
                              weak_type=False
                            ] yzt
                            yzv:f64[271,9] = sub yzu yzd
                            yzw:f64[271,9] = mul -2.0 yzd
                            yzx:f64[271,9] = pjit[name=softplus jaxpr=softplus1] yzw
                            yzy:f64[271,9] = sub yzv yzx
                            yzz:f64[271,9] = mul 2.0 yzy
                            zaa:f64[271,9] = sub yzs yzz
                            zab:f64[271] = reduce_sum[axes=(1,)] zaa
                            zac:f32[] = exp yxi
                            zad:f64[271] = neg zab
                            zae:f64[271] = sub zad -4.5
                            zaf:f64[271] = stop_gradient zae
                            zag:f64[] = convert_element_type[
                              new_dtype=float64
                              weak_type=False
                            ] zac
                            zah:f64[271] = mul zag zaf
                            zai:f64[] = reduce_sum[axes=(0,)] zah
                            zaj:f64[] = div zai 271.0
                            zak:f64[] = div 1.0 271.0
                            zal:f64[271] = broadcast_in_dim[
                              broadcast_dimensions=()
                              shape=(271,)
                            ] zak
                            zam:f64[271] = mul zal zaf
                            zan:f64[] = reduce_sum[axes=(0,)] zam
                            zao:f32[] = convert_element_type[
                              new_dtype=float32
                              weak_type=False
                            ] zan
                            zap:f32[] = mul zao zac
                            zaq:f32[] = integer_pow[y=1] zap
                            zar:f32[] = mul 0.10000000149011612 zaq
                            zas:f32[] = mul 0.8999999761581421 yxg
                            zat:f32[] = add zar zas
                            zau:f32[] = integer_pow[y=2] zap
                            zav:f32[] = mul 0.0010000000474974513 zau
                            zaw:f32[] = mul 0.9990000128746033 yxh
                            zax:f32[] = add zav zaw
                            zay:bool[] = lt yxf 2147483647
                            zaz:i32[] = add yxf 1
                            zba:i32[] = pjit[name=_where jaxpr=_where16] zay zaz
                              2147483647
                            zbb:f64[] = pow 0.9 zba
                            zbc:f64[] = sub 1.0 zbb
                            zbd:f32[] = convert_element_type[
                              new_dtype=float32
                              weak_type=False
                            ] zbc
                            zbe:f32[] = div zat zbd
                            zbf:f64[] = pow 0.999 zba
                            zbg:f64[] = sub 1.0 zbf
                            zbh:f32[] = convert_element_type[
                              new_dtype=float32
                              weak_type=False
                            ] zbg
                            zbi:f32[] = div zax zbh
                            zbj:f32[] = add zbi 0.0
                            zbk:f32[] = sqrt zbj
                            zbl:f32[] = add zbk 9.99999993922529e-09
                            zbm:f32[] = div zbe zbl
                            zbn:f32[] = mul -0.0003000000142492354 zbm
                            zbo:f32[] = add yxi zbn
                            zbp:f32[] = exp yxi
                            zbq:f64[271,189] = concatenate[dimension=1] yxo yxp
                            zbr:f64[189,512] = convert_element_type[
                              new_dtype=float64
                              weak_type=False
                            ] ywg
                            zbs:f64[512] = convert_element_type[
                              new_dtype=float64
                              weak_type=False
                            ] ywf
                            zbt:f64[271,512] = dot_general[
                              dimension_numbers=(([1], [0]), ([], []))
                            ] zbq zbr
                            zbu:f64[1,512] = reshape[
                              dimensions=None
                              new_sizes=(1, 512)
                            ] zbs
                            zbv:f64[271,512] = add zbt zbu
                            zbw:f64[271,512] zbx:f64[271,512] zby:f64[271,512] = pjit[
                              name=silu
                              jaxpr=silu4
                            ] zbv
                            zbz:f64[512,512] = convert_element_type[
                              new_dtype=float64
                              weak_type=False
                            ] ywi
                            zca:f64[512] = convert_element_type[
                              new_dtype=float64
                              weak_type=False
                            ] ywh
                            zcb:f64[271,512] = dot_general[
                              dimension_numbers=(([1], [0]), ([], []))
                            ] zbw zbz
                            zcc:f64[1,512] = reshape[
                              dimensions=None
                              new_sizes=(1, 512)
                            ] zca
                            zcd:f64[271,512] = add zcb zcc
                            zce:f64[271,512] zcf:f64[271,512] zcg:f64[271,512] = pjit[
                              name=silu
                              jaxpr=silu4
                            ] zcd
                            zch:f64[512,1] = convert_element_type[
                              new_dtype=float64
                              weak_type=False
                            ] ywk
                            zci:f64[1] = convert_element_type[
                              new_dtype=float64
                              weak_type=False
                            ] ywj
                            zcj:f64[271,1] = dot_general[
                              dimension_numbers=(([1], [0]), ([], []))
                            ] zce zch
                            zck:f64[1,1] = reshape[
                              dimensions=None
                              new_sizes=(1, 1)
                            ] zci
                            zcl:f64[271,1] = add zcj zck
                            zcm:f64[189,512] = convert_element_type[
                              new_dtype=float64
                              weak_type=False
                            ] ywm
                            zcn:f64[512] = convert_element_type[
                              new_dtype=float64
                              weak_type=False
                            ] ywl
                            zco:f64[271,512] = dot_general[
                              dimension_numbers=(([1], [0]), ([], []))
                            ] zbq zcm
                            zcp:f64[1,512] = reshape[
                              dimensions=None
                              new_sizes=(1, 512)
                            ] zcn
                            zcq:f64[271,512] = add zco zcp
                            zcr:f64[271,512] zcs:f64[271,512] zct:f64[271,512] = pjit[
                              name=silu
                              jaxpr=silu4
                            ] zcq
                            zcu:f64[512,512] = convert_element_type[
                              new_dtype=float64
                              weak_type=False
                            ] ywo
                            zcv:f64[512] = convert_element_type[
                              new_dtype=float64
                              weak_type=False
                            ] ywn
                            zcw:f64[271,512] = dot_general[
                              dimension_numbers=(([1], [0]), ([], []))
                            ] zcr zcu
                            zcx:f64[1,512] = reshape[
                              dimensions=None
                              new_sizes=(1, 512)
                            ] zcv
                            zcy:f64[271,512] = add zcw zcx
                            zcz:f64[271,512] zda:f64[271,512] zdb:f64[271,512] = pjit[
                              name=silu
                              jaxpr=silu4
                            ] zcy
                            zdc:f64[512,1] = convert_element_type[
                              new_dtype=float64
                              weak_type=False
                            ] ywq
                            zdd:f64[1] = convert_element_type[
                              new_dtype=float64
                              weak_type=False
                            ] ywp
                            zde:f64[271,1] = dot_general[
                              dimension_numbers=(([1], [0]), ([], []))
                            ] zcz zdc
                            zdf:f64[1,1] = reshape[
                              dimensions=None
                              new_sizes=(1, 1)
                            ] zdd
                            zdg:f64[271,1] = add zde zdf
                            zdh:f64[271,2] = concatenate[dimension=1] zcl zdg
                            zdi:f64[180,512] = convert_element_type[
                              new_dtype=float64
                              weak_type=False
                            ] yvb
                            zdj:f64[512] = convert_element_type[
                              new_dtype=float64
                              weak_type=False
                            ] yva
                            zdk:f64[271,512] = dot_general[
                              dimension_numbers=(([1], [0]), ([], []))
                            ] yxs zdi
                            zdl:f64[1,512] = reshape[
                              dimensions=None
                              new_sizes=(1, 512)
                            ] zdj
                            zdm:f64[271,512] = add zdk zdl
                            zdn:f64[271,512] = pjit[name=silu jaxpr=silu3] zdm
                            zdo:f64[512,512] = convert_element_type[
                              new_dtype=float64
                              weak_type=False
                            ] yvd
                            zdp:f64[512] = convert_element_type[
                              new_dtype=float64
                              weak_type=False
                            ] yvc
                            zdq:f64[271,512] = dot_general[
                              dimension_numbers=(([1], [0]), ([], []))
                            ] zdn zdo
                            zdr:f64[1,512] = reshape[
                              dimensions=None
                              new_sizes=(1, 512)
                            ] zdp
                            zds:f64[271,512] = add zdq zdr
                            zdt:f64[271,512] = pjit[name=silu jaxpr=silu3] zds
                            zdu:f64[512,18] = convert_element_type[
                              new_dtype=float64
                              weak_type=False
                            ] yvf
                            zdv:f64[18] = convert_element_type[
                              new_dtype=float64
                              weak_type=False
                            ] yve
                            zdw:f64[271,18] = dot_general[
                              dimension_numbers=(([1], [0]), ([], []))
                            ] zdt zdu
                            zdx:f64[1,18] = reshape[
                              dimensions=None
                              new_sizes=(1, 18)
                            ] zdv
                            zdy:f64[271,18] = add zdw zdx
                            zdz:f64[271,9] = slice[
                              limit_indices=(271, 9)
                              start_indices=(0, 0)
                              strides=None
                            ] zdy
                            zea:f64[271,9] = slice[
                              limit_indices=(271, 18)
                              start_indices=(0, 9)
                              strides=None
                            ] zdy
                            zeb:f64[271,9] = pjit[name=softplus jaxpr=softplus1] zea
                            zec:f64[271,9] = add zeb 0.001
                            zed:key<fry>[] = random_wrap[impl=fry] yyc
                            zee:f64[271,9] = pjit[name=_normal jaxpr=_normal] zed
                            zef:f64[271,9] = mul zee zec
                            zeg:f64[271,9] = add zef zdz
                            zeh:f64[271,9] = slice[
                              limit_indices=(271, 9)
                              start_indices=(0, 0)
                              strides=None
                            ] zdy
                            zei:f64[271,9] = slice[
                              limit_indices=(271, 18)
                              start_indices=(0, 9)
                              strides=None
                            ] zdy
                            zej:f64[271,9] = pjit[name=softplus jaxpr=softplus1] zei
                            zek:f64[271,9] = add zej 0.001
                            zel:f64[271,9] = div zeg zek
                            zem:f64[271,9] = div zeh zek
                            zen:f64[271,9] = sub zel zem
                            zeo:f64[271,9] = integer_pow[y=2] zen
                            zep:f64[271,9] = mul -0.5 zeo
                            zeq:f64[] = log 6.283185307179586
                            zer:f64[] = mul 0.5 zeq
                            zes:f64[271,9] = log zek
                            zet:f64[] = convert_element_type[
                              new_dtype=float64
                              weak_type=False
                            ] zer
                            zeu:f64[271,9] = add zet zes
                            zev:f64[271,9] = sub zep zeu
                            zew:f64[] = log 2.0
                            zex:f64[] = convert_element_type[
                              new_dtype=float64
                              weak_type=False
                            ] zew
                            zey:f64[271,9] = sub zex zeg
                            zez:f64[271,9] = mul -2.0 zeg
                            zfa:f64[271,9] = pjit[name=softplus jaxpr=softplus1] zez
                            zfb:f64[271,9] = sub zey zfa
                            zfc:f64[271,9] = mul 2.0 zfb
                            zfd:f64[271,9] = sub zev zfc
                            zfe:f64[271] = reduce_sum[axes=(1,)] zfd
                            zff:f64[271,9] = tanh zeg
                            zfg:f64[271,189] = concatenate[dimension=1] yxs zff
                            zfh:f64[189,512] = convert_element_type[
                              new_dtype=float64
                              weak_type=False
                            ] yws
                            zfi:f64[512] = convert_element_type[
                              new_dtype=float64
                              weak_type=False
                            ] ywr
                            zfj:f64[271,512] = dot_general[
                              dimension_numbers=(([1], [0]), ([], []))
                            ] zfg zfh
                            zfk:f64[1,512] = reshape[
                              dimensions=None
                              new_sizes=(1, 512)
                            ] zfi
                            zfl:f64[271,512] = add zfj zfk
                            zfm:f64[271,512] = pjit[name=silu jaxpr=silu3] zfl
                            zfn:f64[512,512] = convert_element_type[
                              new_dtype=float64
                              weak_type=False
                            ] ywu
                            zfo:f64[512] = convert_element_type[
                              new_dtype=float64
                              weak_type=False
                            ] ywt
                            zfp:f64[271,512] = dot_general[
                              dimension_numbers=(([1], [0]), ([], []))
                            ] zfm zfn
                            zfq:f64[1,512] = reshape[
                              dimensions=None
                              new_sizes=(1, 512)
                            ] zfo
                            zfr:f64[271,512] = add zfp zfq
                            zfs:f64[271,512] = pjit[name=silu jaxpr=silu3] zfr
                            zft:f64[512,1] = convert_element_type[
                              new_dtype=float64
                              weak_type=False
                            ] yww
                            zfu:f64[1] = convert_element_type[
                              new_dtype=float64
                              weak_type=False
                            ] ywv
                            zfv:f64[271,1] = dot_general[
                              dimension_numbers=(([1], [0]), ([], []))
                            ] zfs zft
                            zfw:f64[1,1] = reshape[
                              dimensions=None
                              new_sizes=(1, 1)
                            ] zfu
                            zfx:f64[271,1] = add zfv zfw
                            zfy:f64[189,512] = convert_element_type[
                              new_dtype=float64
                              weak_type=False
                            ] ywy
                            zfz:f64[512] = convert_element_type[
                              new_dtype=float64
                              weak_type=False
                            ] ywx
                            zga:f64[271,512] = dot_general[
                              dimension_numbers=(([1], [0]), ([], []))
                            ] zfg zfy
                            zgb:f64[1,512] = reshape[
                              dimensions=None
                              new_sizes=(1, 512)
                            ] zfz
                            zgc:f64[271,512] = add zga zgb
                            zgd:f64[271,512] = pjit[name=silu jaxpr=silu3] zgc
                            zge:f64[512,512] = convert_element_type[
                              new_dtype=float64
                              weak_type=False
                            ] yxa
                            zgf:f64[512] = convert_element_type[
                              new_dtype=float64
                              weak_type=False
                            ] ywz
                            zgg:f64[271,512] = dot_general[
                              dimension_numbers=(([1], [0]), ([], []))
                            ] zgd zge
                            zgh:f64[1,512] = reshape[
                              dimensions=None
                              new_sizes=(1, 512)
                            ] zgf
                            zgi:f64[271,512] = add zgg zgh
                            zgj:f64[271,512] = pjit[name=silu jaxpr=silu3] zgi
                            zgk:f64[512,1] = convert_element_type[
                              new_dtype=float64
                              weak_type=False
                            ] yxc
                            zgl:f64[1] = convert_element_type[
                              new_dtype=float64
                              weak_type=False
                            ] yxb
                            zgm:f64[271,1] = dot_general[
                              dimension_numbers=(([1], [0]), ([], []))
                            ] zgj zgk
                            zgn:f64[1,1] = reshape[
                              dimensions=None
                              new_sizes=(1, 1)
                            ] zgl
                            zgo:f64[271,1] = add zgm zgn
                            zgp:f64[271,2] = concatenate[dimension=1] zfx zgo
                            zgq:f64[271] = reduce_min[axes=(1,)] zgp
                            zgr:f64[] = convert_element_type[
                              new_dtype=float64
                              weak_type=False
                            ] zbp
                            zgs:f64[271] = mul zgr zfe
                            zgt:f64[271] = sub zgq zgs
                            zgu:f64[271] = mul yxq 1.0
                            zgv:f64[271] = mul yxr 0.99
                            zgw:f64[271] = mul zgv zgt
                            zgx:f64[271] = add zgu zgw
                            zgy:f64[271] = stop_gradient zgx
                            zgz:f64[271,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(271, 1)
                            ] zgy
                            zha:f64[271,2] = sub zdh zgz
                            zhb:f64[271] = sub 1.0 yxt
                            zhc:f64[271,1] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(271, 1)
                            ] zhb
                            zhd:f64[271,2] = mul zha zhc
                            zhe:f64[271,2] = integer_pow[y=2] zhd
                            zhf:f64[271,2] = integer_pow[y=1] zhd
                            zhg:f64[271,2] = mul 2.0 zhf
                            zhh:f64[] = reduce_sum[axes=(0, 1)] zhe
                            zhi:f64[] = div zhh 542.0
                            zhj:f64[] = mul 0.5 zhi
                            zhk:f64[] = mul 0.5 1.0
                            zhl:f64[] = div zhk 542.0
                            zhm:f64[271,2] = broadcast_in_dim[
                              broadcast_dimensions=()
                              shape=(271, 2)
                            ] zhl
                            zhn:f64[271,2] = mul zhm zhg
                            zho:f64[271,2] = mul zhn zhc
                            zhp:f64[271,1] = slice[
                              limit_indices=(271, 1)
                              start_indices=(0, 0)
                              strides=None
                            ] zho
                            zhq:f64[271,1] = slice[
                              limit_indices=(271, 2)
                              start_indices=(0, 1)
                              strides=None
                            ] zho
                            zhr:f64[1] = reduce_sum[axes=(0,)] zhq
                            zhs:f64[1,1] = reshape[
                              dimensions=None
                              new_sizes=(1, 1)
                            ] zhr
                            zht:f64[1] = reshape[dimensions=None new_sizes=(1,)] zhs
                            zhu:f32[1] = convert_element_type[
                              new_dtype=float32
                              weak_type=False
                            ] zht
                            zhv:f64[1,512] = dot_general[
                              dimension_numbers=(([0], [0]), ([], []))
                            ] zhq zcz
                            zhw:f64[512,1] = transpose[permutation=(1, 0)] zhv
                            zhx:f32[512,1] = convert_element_type[
                              new_dtype=float32
                              weak_type=False
                            ] zhw
                            zhy:f64[271,512] = dot_general[
                              dimension_numbers=(([1], [1]), ([], []))
                            ] zhq zdc
                            zhz:f64[271,512] = pjit[name=silu jaxpr=silu5] zda zcy
                              zdb zhy
                            zia:f64[512] = reduce_sum[axes=(0,)] zhz
                            zib:f64[1,512] = reshape[
                              dimensions=None
                              new_sizes=(1, 512)
                            ] zia
                            zic:f64[512] = reshape[
                              dimensions=None
                              new_sizes=(512,)
                            ] zib
                            zid:f32[512] = convert_element_type[
                              new_dtype=float32
                              weak_type=False
                            ] zic
                            zie:f64[512,512] = dot_general[
                              dimension_numbers=(([0], [0]), ([], []))
                            ] zhz zcr
                            zif:f64[512,512] = transpose[permutation=(1, 0)] zie
                            zig:f32[512,512] = convert_element_type[
                              new_dtype=float32
                              weak_type=False
                            ] zif
                            zih:f64[271,512] = dot_general[
                              dimension_numbers=(([1], [1]), ([], []))
                            ] zhz zcu
                            zii:f64[271,512] = pjit[name=silu jaxpr=silu5] zcs zcq
                              zct zih
                            zij:f64[512] = reduce_sum[axes=(0,)] zii
                            zik:f64[1,512] = reshape[
                              dimensions=None
                              new_sizes=(1, 512)
                            ] zij
                            zil:f64[512] = reshape[
                              dimensions=None
                              new_sizes=(512,)
                            ] zik
                            zim:f32[512] = convert_element_type[
                              new_dtype=float32
                              weak_type=False
                            ] zil
                            zin:f64[512,189] = dot_general[
                              dimension_numbers=(([0], [0]), ([], []))
                            ] zii zbq
                            zio:f64[189,512] = transpose[permutation=(1, 0)] zin
                            zip:f32[189,512] = convert_element_type[
                              new_dtype=float32
                              weak_type=False
                            ] zio
                            ziq:f64[1] = reduce_sum[axes=(0,)] zhp
                            zir:f64[1,1] = reshape[
                              dimensions=None
                              new_sizes=(1, 1)
                            ] ziq
                            zis:f64[1] = reshape[dimensions=None new_sizes=(1,)] zir
                            zit:f32[1] = convert_element_type[
                              new_dtype=float32
                              weak_type=False
                            ] zis
                            ziu:f64[1,512] = dot_general[
                              dimension_numbers=(([0], [0]), ([], []))
                            ] zhp zce
                            ziv:f64[512,1] = transpose[permutation=(1, 0)] ziu
                            ziw:f32[512,1] = convert_element_type[
                              new_dtype=float32
                              weak_type=False
                            ] ziv
                            zix:f64[271,512] = dot_general[
                              dimension_numbers=(([1], [1]), ([], []))
                            ] zhp zch
                            ziy:f64[271,512] = pjit[name=silu jaxpr=silu5] zcf zcd
                              zcg zix
                            ziz:f64[512] = reduce_sum[axes=(0,)] ziy
                            zja:f64[1,512] = reshape[
                              dimensions=None
                              new_sizes=(1, 512)
                            ] ziz
                            zjb:f64[512] = reshape[
                              dimensions=None
                              new_sizes=(512,)
                            ] zja
                            zjc:f32[512] = convert_element_type[
                              new_dtype=float32
                              weak_type=False
                            ] zjb
                            zjd:f64[512,512] = dot_general[
                              dimension_numbers=(([0], [0]), ([], []))
                            ] ziy zbw
                            zje:f64[512,512] = transpose[permutation=(1, 0)] zjd
                            zjf:f32[512,512] = convert_element_type[
                              new_dtype=float32
                              weak_type=False
                            ] zje
                            zjg:f64[271,512] = dot_general[
                              dimension_numbers=(([1], [1]), ([], []))
                            ] ziy zbz
                            zjh:f64[271,512] = pjit[name=silu jaxpr=silu5] zbx zbv
                              zby zjg
                            zji:f64[512] = reduce_sum[axes=(0,)] zjh
                            zjj:f64[1,512] = reshape[
                              dimensions=None
                              new_sizes=(1, 512)
                            ] zji
                            zjk:f64[512] = reshape[
                              dimensions=None
                              new_sizes=(512,)
                            ] zjj
                            zjl:f32[512] = convert_element_type[
                              new_dtype=float32
                              weak_type=False
                            ] zjk
                            zjm:f64[512,189] = dot_general[
                              dimension_numbers=(([0], [0]), ([], []))
                            ] zjh zbq
                            zjn:f64[189,512] = transpose[permutation=(1, 0)] zjm
                            zjo:f32[189,512] = convert_element_type[
                              new_dtype=float32
                              weak_type=False
                            ] zjn
                            zjp:f32[512] = integer_pow[y=1] zjl
                            zjq:f32[512] = mul 0.10000000149011612 zjp
                            zjr:f32[512] = mul 0.8999999761581421 yvh
                            zjs:f32[512] = add zjq zjr
                            zjt:f32[189,512] = integer_pow[y=1] zjo
                            zju:f32[189,512] = mul 0.10000000149011612 zjt
                            zjv:f32[189,512] = mul 0.8999999761581421 yvi
                            zjw:f32[189,512] = add zju zjv
                            zjx:f32[512] = integer_pow[y=1] zjc
                            zjy:f32[512] = mul 0.10000000149011612 zjx
                            zjz:f32[512] = mul 0.8999999761581421 yvj
                            zka:f32[512] = add zjy zjz
                            zkb:f32[512,512] = integer_pow[y=1] zjf
                            zkc:f32[512,512] = mul 0.10000000149011612 zkb
                            zkd:f32[512,512] = mul 0.8999999761581421 yvk
                            zke:f32[512,512] = add zkc zkd
                            zkf:f32[1] = integer_pow[y=1] zit
                            zkg:f32[1] = mul 0.10000000149011612 zkf
                            zkh:f32[1] = mul 0.8999999761581421 yvl
                            zki:f32[1] = add zkg zkh
                            zkj:f32[512,1] = integer_pow[y=1] ziw
                            zkk:f32[512,1] = mul 0.10000000149011612 zkj
                            zkl:f32[512,1] = mul 0.8999999761581421 yvm
                            zkm:f32[512,1] = add zkk zkl
                            zkn:f32[512] = integer_pow[y=1] zim
                            zko:f32[512] = mul 0.10000000149011612 zkn
                            zkp:f32[512] = mul 0.8999999761581421 yvn
                            zkq:f32[512] = add zko zkp
                            zkr:f32[189,512] = integer_pow[y=1] zip
                            zks:f32[189,512] = mul 0.10000000149011612 zkr
                            zkt:f32[189,512] = mul 0.8999999761581421 yvo
                            zku:f32[189,512] = add zks zkt
                            zkv:f32[512] = integer_pow[y=1] zid
                            zkw:f32[512] = mul 0.10000000149011612 zkv
                            zkx:f32[512] = mul 0.8999999761581421 yvp
                            zky:f32[512] = add zkw zkx
                            zkz:f32[512,512] = integer_pow[y=1] zig
                            zla:f32[512,512] = mul 0.10000000149011612 zkz
                            zlb:f32[512,512] = mul 0.8999999761581421 yvq
                            zlc:f32[512,512] = add zla zlb
                            zld:f32[1] = integer_pow[y=1] zhu
                            zle:f32[1] = mul 0.10000000149011612 zld
                            zlf:f32[1] = mul 0.8999999761581421 yvr
                            zlg:f32[1] = add zle zlf
                            zlh:f32[512,1] = integer_pow[y=1] zhx
                            zli:f32[512,1] = mul 0.10000000149011612 zlh
                            zlj:f32[512,1] = mul 0.8999999761581421 yvs
                            zlk:f32[512,1] = add zli zlj
                            zll:f32[512] = integer_pow[y=2] zjl
                            zlm:f32[512] = mul 0.0010000000474974513 zll
                            zln:f32[512] = mul 0.9990000128746033 yvt
                            zlo:f32[512] = add zlm zln
                            zlp:f32[189,512] = integer_pow[y=2] zjo
                            zlq:f32[189,512] = mul 0.0010000000474974513 zlp
                            zlr:f32[189,512] = mul 0.9990000128746033 yvu
                            zls:f32[189,512] = add zlq zlr
                            zlt:f32[512] = integer_pow[y=2] zjc
                            zlu:f32[512] = mul 0.0010000000474974513 zlt
                            zlv:f32[512] = mul 0.9990000128746033 yvv
                            zlw:f32[512] = add zlu zlv
                            zlx:f32[512,512] = integer_pow[y=2] zjf
                            zly:f32[512,512] = mul 0.0010000000474974513 zlx
                            zlz:f32[512,512] = mul 0.9990000128746033 yvw
                            zma:f32[512,512] = add zly zlz
                            zmb:f32[1] = integer_pow[y=2] zit
                            zmc:f32[1] = mul 0.0010000000474974513 zmb
                            zmd:f32[1] = mul 0.9990000128746033 yvx
                            zme:f32[1] = add zmc zmd
                            zmf:f32[512,1] = integer_pow[y=2] ziw
                            zmg:f32[512,1] = mul 0.0010000000474974513 zmf
                            zmh:f32[512,1] = mul 0.9990000128746033 yvy
                            zmi:f32[512,1] = add zmg zmh
                            zmj:f32[512] = integer_pow[y=2] zim
                            zmk:f32[512] = mul 0.0010000000474974513 zmj
                            zml:f32[512] = mul 0.9990000128746033 yvz
                            zmm:f32[512] = add zmk zml
                            zmn:f32[189,512] = integer_pow[y=2] zip
                            zmo:f32[189,512] = mul 0.0010000000474974513 zmn
                            zmp:f32[189,512] = mul 0.9990000128746033 ywa
                            zmq:f32[189,512] = add zmo zmp
                            zmr:f32[512] = integer_pow[y=2] zid
                            zms:f32[512] = mul 0.0010000000474974513 zmr
                            zmt:f32[512] = mul 0.9990000128746033 ywb
                            zmu:f32[512] = add zms zmt
                            zmv:f32[512,512] = integer_pow[y=2] zig
                            zmw:f32[512,512] = mul 0.0010000000474974513 zmv
                            zmx:f32[512,512] = mul 0.9990000128746033 ywc
                            zmy:f32[512,512] = add zmw zmx
                            zmz:f32[1] = integer_pow[y=2] zhu
                            zna:f32[1] = mul 0.0010000000474974513 zmz
                            znb:f32[1] = mul 0.9990000128746033 ywd
                            znc:f32[1] = add zna znb
                            znd:f32[512,1] = integer_pow[y=2] zhx
                            zne:f32[512,1] = mul 0.0010000000474974513 znd
                            znf:f32[512,1] = mul 0.9990000128746033 ywe
                            zng:f32[512,1] = add zne znf
                            znh:bool[] = lt yvg 2147483647
                            zni:i32[] = add yvg 1
                            znj:i32[] = pjit[name=_where jaxpr=_where16] znh zni
                              2147483647
                            znk:f64[] = pow 0.9 znj
                            znl:f64[] = sub 1.0 znk
                            znm:f32[] = convert_element_type[
                              new_dtype=float32
                              weak_type=False
                            ] znl
                            znn:f32[512] = div zjs znm
                            zno:f32[] = convert_element_type[
                              new_dtype=float32
                              weak_type=False
                            ] znl
                            znp:f32[189,512] = div zjw zno
                            znq:f32[] = convert_element_type[
                              new_dtype=float32
                              weak_type=False
                            ] znl
                            znr:f32[512] = div zka znq
                            zns:f32[] = convert_element_type[
                              new_dtype=float32
                              weak_type=False
                            ] znl
                            znt:f32[512,512] = div zke zns
                            znu:f32[] = convert_element_type[
                              new_dtype=float32
                              weak_type=False
                            ] znl
                            znv:f32[1] = div zki znu
                            znw:f32[] = convert_element_type[
                              new_dtype=float32
                              weak_type=False
                            ] znl
                            znx:f32[512,1] = div zkm znw
                            zny:f32[] = convert_element_type[
                              new_dtype=float32
                              weak_type=False
                            ] znl
                            znz:f32[512] = div zkq zny
                            zoa:f32[] = convert_element_type[
                              new_dtype=float32
                              weak_type=False
                            ] znl
                            zob:f32[189,512] = div zku zoa
                            zoc:f32[] = convert_element_type[
                              new_dtype=float32
                              weak_type=False
                            ] znl
                            zod:f32[512] = div zky zoc
                            zoe:f32[] = convert_element_type[
                              new_dtype=float32
                              weak_type=False
                            ] znl
                            zof:f32[512,512] = div zlc zoe
                            zog:f32[] = convert_element_type[
                              new_dtype=float32
                              weak_type=False
                            ] znl
                            zoh:f32[1] = div zlg zog
                            zoi:f32[] = convert_element_type[
                              new_dtype=float32
                              weak_type=False
                            ] znl
                            zoj:f32[512,1] = div zlk zoi
                            zok:f64[] = pow 0.999 znj
                            zol:f64[] = sub 1.0 zok
                            zom:f32[] = convert_element_type[
                              new_dtype=float32
                              weak_type=False
                            ] zol
                            zon:f32[512] = div zlo zom
                            zoo:f32[] = convert_element_type[
                              new_dtype=float32
                              weak_type=False
                            ] zol
                            zop:f32[189,512] = div zls zoo
                            zoq:f32[] = convert_element_type[
                              new_dtype=float32
                              weak_type=False
                            ] zol
                            zor:f32[512] = div zlw zoq
                            zos:f32[] = convert_element_type[
                              new_dtype=float32
                              weak_type=False
                            ] zol
                            zot:f32[512,512] = div zma zos
                            zou:f32[] = convert_element_type[
                              new_dtype=float32
                              weak_type=False
                            ] zol
                            zov:f32[1] = div zme zou
                            zow:f32[] = convert_element_type[
                              new_dtype=float32
                              weak_type=False
                            ] zol
                            zox:f32[512,1] = div zmi zow
                            zoy:f32[] = convert_element_type[
                              new_dtype=float32
                              weak_type=False
                            ] zol
                            zoz:f32[512] = div zmm zoy
                            zpa:f32[] = convert_element_type[
                              new_dtype=float32
                              weak_type=False
                            ] zol
                            zpb:f32[189,512] = div zmq zpa
                            zpc:f32[] = convert_element_type[
                              new_dtype=float32
                              weak_type=False
                            ] zol
                            zpd:f32[512] = div zmu zpc
                            zpe:f32[] = convert_element_type[
                              new_dtype=float32
                              weak_type=False
                            ] zol
                            zpf:f32[512,512] = div zmy zpe
                            zpg:f32[] = convert_element_type[
                              new_dtype=float32
                              weak_type=False
                            ] zol
                            zph:f32[1] = div znc zpg
                            zpi:f32[] = convert_element_type[
                              new_dtype=float32
                              weak_type=False
                            ] zol
                            zpj:f32[512,1] = div zng zpi
                            zpk:f32[512] = add zon 0.0
                            zpl:f32[512] = sqrt zpk
                            zpm:f32[512] = add zpl 9.99999993922529e-09
                            zpn:f32[512] = div znn zpm
                            zpo:f32[189,512] = add zop 0.0
                            zpp:f32[189,512] = sqrt zpo
                            zpq:f32[189,512] = add zpp 9.99999993922529e-09
                            zpr:f32[189,512] = div znp zpq
                            zps:f32[512] = add zor 0.0
                            zpt:f32[512] = sqrt zps
                            zpu:f32[512] = add zpt 9.99999993922529e-09
                            zpv:f32[512] = div znr zpu
                            zpw:f32[512,512] = add zot 0.0
                            zpx:f32[512,512] = sqrt zpw
                            zpy:f32[512,512] = add zpx 9.99999993922529e-09
                            zpz:f32[512,512] = div znt zpy
                            zqa:f32[1] = add zov 0.0
                            zqb:f32[1] = sqrt zqa
                            zqc:f32[1] = add zqb 9.99999993922529e-09
                            zqd:f32[1] = div znv zqc
                            zqe:f32[512,1] = add zox 0.0
                            zqf:f32[512,1] = sqrt zqe
                            zqg:f32[512,1] = add zqf 9.99999993922529e-09
                            zqh:f32[512,1] = div znx zqg
                            zqi:f32[512] = add zoz 0.0
                            zqj:f32[512] = sqrt zqi
                            zqk:f32[512] = add zqj 9.99999993922529e-09
                            zql:f32[512] = div znz zqk
                            zqm:f32[189,512] = add zpb 0.0
                            zqn:f32[189,512] = sqrt zqm
                            zqo:f32[189,512] = add zqn 9.99999993922529e-09
                            zqp:f32[189,512] = div zob zqo
                            zqq:f32[512] = add zpd 0.0
                            zqr:f32[512] = sqrt zqq
                            zqs:f32[512] = add zqr 9.99999993922529e-09
                            zqt:f32[512] = div zod zqs
                            zqu:f32[512,512] = add zpf 0.0
                            zqv:f32[512,512] = sqrt zqu
                            zqw:f32[512,512] = add zqv 9.99999993922529e-09
                            zqx:f32[512,512] = div zof zqw
                            zqy:f32[1] = add zph 0.0
                            zqz:f32[1] = sqrt zqy
                            zra:f32[1] = add zqz 9.99999993922529e-09
                            zrb:f32[1] = div zoh zra
                            zrc:f32[512,1] = add zpj 0.0
                            zrd:f32[512,1] = sqrt zrc
                            zre:f32[512,1] = add zrd 9.99999993922529e-09
                            zrf:f32[512,1] = div zoj zre
                            zrg:f32[512] = mul -0.00019999999494757503 zpn
                            zrh:f32[189,512] = mul -0.00019999999494757503 zpr
                            zri:f32[512] = mul -0.00019999999494757503 zpv
                            zrj:f32[512,512] = mul -0.00019999999494757503 zpz
                            zrk:f32[1] = mul -0.00019999999494757503 zqd
                            zrl:f32[512,1] = mul -0.00019999999494757503 zqh
                            zrm:f32[512] = mul -0.00019999999494757503 zql
                            zrn:f32[189,512] = mul -0.00019999999494757503 zqp
                            zro:f32[512] = mul -0.00019999999494757503 zqt
                            zrp:f32[512,512] = mul -0.00019999999494757503 zqx
                            zrq:f32[1] = mul -0.00019999999494757503 zrb
                            zrr:f32[512,1] = mul -0.00019999999494757503 zrf
                            zrs:f32[512] = add ywf zrg
                            zrt:f32[189,512] = add ywg zrh
                            zru:f32[512] = add ywh zri
                            zrv:f32[512,512] = add ywi zrj
                            zrw:f32[1] = add ywj zrk
                            zrx:f32[512,1] = add ywk zrl
                            zry:f32[512] = add ywl zrm
                            zrz:f32[189,512] = add ywm zrn
                            zsa:f32[512] = add ywn zro
                            zsb:f32[512,512] = add ywo zrp
                            zsc:f32[1] = add ywp zrq
                            zsd:f32[512,1] = add ywq zrr
                            zse:f64[180,512] = convert_element_type[
                              new_dtype=float64
                              weak_type=False
                            ] yvb
                            zsf:f64[512] = convert_element_type[
                              new_dtype=float64
                              weak_type=False
                            ] yva
                            zsg:f64[271,512] = dot_general[
                              dimension_numbers=(([1], [0]), ([], []))
                            ] yxo zse
                            zsh:f64[1,512] = reshape[
                              dimensions=None
                              new_sizes=(1, 512)
                            ] zsf
                            zsi:f64[271,512] = add zsg zsh
                            zsj:f64[271,512] zsk:f64[271,512] zsl:f64[271,512] = pjit[
                              name=silu
                              jaxpr=silu4
                            ] zsi
                            zsm:f64[512,512] = convert_element_type[
                              new_dtype=float64
                              weak_type=False
                            ] yvd
                            zsn:f64[512] = convert_element_type[
                              new_dtype=float64
                              weak_type=False
                            ] yvc
                            zso:f64[271,512] = dot_general[
                              dimension_numbers=(([1], [0]), ([], []))
                            ] zsj zsm
                            zsp:f64[1,512] = reshape[
                              dimensions=None
                              new_sizes=(1, 512)
                            ] zsn
                            zsq:f64[271,512] = add zso zsp
                            zsr:f64[271,512] zss:f64[271,512] zst:f64[271,512] = pjit[
                              name=silu
                              jaxpr=silu4
                            ] zsq
                            zsu:f64[512,18] = convert_element_type[
                              new_dtype=float64
                              weak_type=False
                            ] yvf
                            zsv:f64[18] = convert_element_type[
                              new_dtype=float64
                              weak_type=False
                            ] yve
                            zsw:f64[271,18] = dot_general[
                              dimension_numbers=(([1], [0]), ([], []))
                            ] zsr zsu
                            zsx:f64[1,18] = reshape[
                              dimensions=None
                              new_sizes=(1, 18)
                            ] zsv
                            zsy:f64[271,18] = add zsw zsx
                            zsz:f64[271,9] = slice[
                              limit_indices=(271, 9)
                              start_indices=(0, 0)
                              strides=None
                            ] zsy
                            zta:f64[271,9] = slice[
                              limit_indices=(271, 18)
                              start_indices=(0, 9)
                              strides=None
                            ] zsy
                            ztb:f64[271,9] ztc:f64[271,9] = pjit[
                              name=softplus
                              jaxpr=softplus2
                            ] zta
                            ztd:f64[271,9] = add ztb 0.001
                            zte:key<fry>[] = random_wrap[impl=fry] yye
                            ztf:f64[271,9] = pjit[name=_normal jaxpr=_normal] zte
                            ztg:f64[271,9] = mul ztf ztd
                            zth:f64[271,9] = add ztg zsz
                            zti:f64[271,9] = slice[
                              limit_indices=(271, 9)
                              start_indices=(0, 0)
                              strides=None
                            ] zsy
                            ztj:f64[271,9] = slice[
                              limit_indices=(271, 18)
                              start_indices=(0, 9)
                              strides=None
                            ] zsy
                            ztk:f64[271,9] ztl:f64[271,9] = pjit[
                              name=softplus
                              jaxpr=softplus2
                            ] ztj
                            ztm:f64[271,9] = add ztk 0.001
                            ztn:f64[271,9] = div zth ztm
                            zto:f64[271,9] = integer_pow[y=-2] ztm
                            ztp:f64[271,9] = div zti ztm
                            ztq:f64[271,9] = integer_pow[y=-2] ztm
                            ztr:f64[271,9] = sub ztn ztp
                            zts:f64[271,9] = integer_pow[y=2] ztr
                            ztt:f64[271,9] = integer_pow[y=1] ztr
                            ztu:f64[271,9] = mul 2.0 ztt
                            ztv:f64[271,9] = mul -0.5 zts
                            ztw:f64[] = log 6.283185307179586
                            ztx:f64[] = mul 0.5 ztw
                            zty:f64[271,9] = log ztm
                            ztz:f64[] = convert_element_type[
                              new_dtype=float64
                              weak_type=False
                            ] ztx
                            zua:f64[271,9] = add ztz zty
                            zub:f64[271,9] = sub ztv zua
                            zuc:f64[] = log 2.0
                            zud:f64[] = convert_element_type[
                              new_dtype=float64
                              weak_type=False
                            ] zuc
                            zue:f64[271,9] = sub zud zth
                            zuf:f64[271,9] = mul -2.0 zth
                            zug:f64[271,9] zuh:f64[271,9] = pjit[
                              name=softplus
                              jaxpr=softplus2
                            ] zuf
                            zui:f64[271,9] = sub zue zug
                            zuj:f64[271,9] = mul 2.0 zui
                            zuk:f64[271,9] = sub zub zuj
                            zul:f64[271] = reduce_sum[axes=(1,)] zuk
                            zum:f64[271,9] = tanh zth
                            zun:f64[271,9] = sub 1.0 zum
                            zuo:f64[271,189] = concatenate[dimension=1] yxo zum
                            zup:f64[189,512] = convert_element_type[
                              new_dtype=float64
                              weak_type=False
                            ] ywg
                            zuq:f64[512] = convert_element_type[
                              new_dtype=float64
                              weak_type=False
                            ] ywf
                            zur:f64[271,512] = dot_general[
                              dimension_numbers=(([1], [0]), ([], []))
                            ] zuo zup
                            zus:f64[1,512] = reshape[
                              dimensions=None
                              new_sizes=(1, 512)
                            ] zuq
                            zut:f64[271,512] = add zur zus
                            zuu:f64[271,512] zuv:f64[271,512] zuw:f64[271,512] = pjit[
                              name=silu
                              jaxpr=silu4
                            ] zut
                            zux:f64[512,512] = convert_element_type[
                              new_dtype=float64
                              weak_type=False
                            ] ywi
                            zuy:f64[512] = convert_element_type[
                              new_dtype=float64
                              weak_type=False
                            ] ywh
                            zuz:f64[271,512] = dot_general[
                              dimension_numbers=(([1], [0]), ([], []))
                            ] zuu zux
                            zva:f64[1,512] = reshape[
                              dimensions=None
                              new_sizes=(1, 512)
                            ] zuy
                            zvb:f64[271,512] = add zuz zva
                            zvc:f64[271,512] zvd:f64[271,512] zve:f64[271,512] = pjit[
                              name=silu
                              jaxpr=silu4
                            ] zvb
                            zvf:f64[512,1] = convert_element_type[
                              new_dtype=float64
                              weak_type=False
                            ] ywk
                            zvg:f64[1] = convert_element_type[
                              new_dtype=float64
                              weak_type=False
                            ] ywj
                            zvh:f64[271,1] = dot_general[
                              dimension_numbers=(([1], [0]), ([], []))
                            ] zvc zvf
                            zvi:f64[1,1] = reshape[
                              dimensions=None
                              new_sizes=(1, 1)
                            ] zvg
                            zvj:f64[271,1] = add zvh zvi
                            zvk:f64[189,512] = convert_element_type[
                              new_dtype=float64
                              weak_type=False
                            ] ywm
                            zvl:f64[512] = convert_element_type[
                              new_dtype=float64
                              weak_type=False
                            ] ywl
                            zvm:f64[271,512] = dot_general[
                              dimension_numbers=(([1], [0]), ([], []))
                            ] zuo zvk
                            zvn:f64[1,512] = reshape[
                              dimensions=None
                              new_sizes=(1, 512)
                            ] zvl
                            zvo:f64[271,512] = add zvm zvn
                            zvp:f64[271,512] zvq:f64[271,512] zvr:f64[271,512] = pjit[
                              name=silu
                              jaxpr=silu4
                            ] zvo
                            zvs:f64[512,512] = convert_element_type[
                              new_dtype=float64
                              weak_type=False
                            ] ywo
                            zvt:f64[512] = convert_element_type[
                              new_dtype=float64
                              weak_type=False
                            ] ywn
                            zvu:f64[271,512] = dot_general[
                              dimension_numbers=(([1], [0]), ([], []))
                            ] zvp zvs
                            zvv:f64[1,512] = reshape[
                              dimensions=None
                              new_sizes=(1, 512)
                            ] zvt
                            zvw:f64[271,512] = add zvu zvv
                            zvx:f64[271,512] zvy:f64[271,512] zvz:f64[271,512] = pjit[
                              name=silu
                              jaxpr=silu4
                            ] zvw
                            zwa:f64[512,1] = convert_element_type[
                              new_dtype=float64
                              weak_type=False
                            ] ywq
                            zwb:f64[1] = convert_element_type[
                              new_dtype=float64
                              weak_type=False
                            ] ywp
                            zwc:f64[271,1] = dot_general[
                              dimension_numbers=(([1], [0]), ([], []))
                            ] zvx zwa
                            zwd:f64[1,1] = reshape[
                              dimensions=None
                              new_sizes=(1, 1)
                            ] zwb
                            zwe:f64[271,1] = add zwc zwd
                            zwf:f64[271,2] = concatenate[dimension=1] zvj zwe
                            zwg:f64[271] = reduce_min[axes=(1,)] zwf
                            zwh:f64[271,1] = reshape[
                              dimensions=None
                              new_sizes=(271, 1)
                            ] zwg
                            zwi:bool[271,2] = eq zwf zwh
                            zwj:f64[271,2] = convert_element_type[
                              new_dtype=float64
                              weak_type=False
                            ] zwi
                            zwk:f64[271] = reduce_sum[axes=(1,)] zwj
                            zwl:f64[] = convert_element_type[
                              new_dtype=float64
                              weak_type=False
                            ] zbp
                            zwm:f64[271] = mul zwl zul
                            zwn:f64[271] = sub zwm zwg
                            zwo:f64[] = reduce_sum[axes=(0,)] zwn
                            zwp:f64[] = div zwo 271.0
                            zwq:f64[] = div 1.0 271.0
                            zwr:f64[271] = broadcast_in_dim[
                              broadcast_dimensions=()
                              shape=(271,)
                            ] zwq
                            zws:f64[271] = neg zwr
                            zwt:f64[271] = div zws zwk
                            zwu:f64[271,2] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(271, 2)
                            ] zwt
                            zwv:f64[271,2] = mul zwu zwj
                            zww:f64[271,1] = slice[
                              limit_indices=(271, 1)
                              start_indices=(0, 0)
                              strides=None
                            ] zwv
                            zwx:f64[271,1] = slice[
                              limit_indices=(271, 2)
                              start_indices=(0, 1)
                              strides=None
                            ] zwv
                            zwy:f64[271,512] = dot_general[
                              dimension_numbers=(([1], [1]), ([], []))
                            ] zwx zwa
                            zwz:f64[271,512] = pjit[name=silu jaxpr=silu5] zvy zvw
                              zvz zwy
                            zxa:f64[271,512] = dot_general[
                              dimension_numbers=(([1], [1]), ([], []))
                            ] zwz zvs
                            zxb:f64[271,512] = pjit[name=silu jaxpr=silu5] zvq zvo
                              zvr zxa
                            zxc:f64[271,189] = dot_general[
                              dimension_numbers=(([1], [1]), ([], []))
                            ] zxb zvk
                            zxd:f64[271,512] = dot_general[
                              dimension_numbers=(([1], [1]), ([], []))
                            ] zww zvf
                            zxe:f64[271,512] = pjit[name=silu jaxpr=silu5] zvd zvb
                              zve zxd
                            zxf:f64[271,512] = dot_general[
                              dimension_numbers=(([1], [1]), ([], []))
                            ] zxe zux
                            zxg:f64[271,512] = pjit[name=silu jaxpr=silu5] zuv zut
                              zuw zxf
                            zxh:f64[271,189] = dot_general[
                              dimension_numbers=(([1], [1]), ([], []))
                            ] zxg zup
                            zxi:f64[271,189] = add_any zxc zxh
                            zxj:f64[271,9] = slice[
                              limit_indices=(271, 189)
                              start_indices=(0, 180)
                              strides=None
                            ] zxi
                            zxk:f64[271,9] = mul zxj zun
                            zxl:f64[271,9] = mul zxk zum
                            zxm:f64[271,9] = add_any zxk zxl
                            zxn:f64[271] = mul zwl zwr
                            zxo:f64[271,9] = broadcast_in_dim[
                              broadcast_dimensions=(0,)
                              shape=(271, 9)
                            ] zxn
                            zxp:f64[271,9] = neg zxo
                            zxq:f64[271,9] = mul 2.0 zxp
                            zxr:f64[271,9] = neg zxq
                            zxs:f64[271,9] = pjit[name=softplus jaxpr=softplus3] zuh
                              zxr
                            zxt:f64[271,9] = mul -2.0 zxs
                            zxu:f64[271,9] = add_any zxm zxt
                            zxv:f64[271,9] = neg zxq
                            zxw:f64[271,9] = add_any zxu zxv
                            zxx:f64[271,9] = neg zxo
                            zxy:f64[271,9] = div zxx ztm
                            zxz:f64[271,9] = mul -0.5 zxo
                            zya:f64[271,9] = mul zxz ztu
                            zyb:f64[271,9] = neg zya
                            zyc:f64[271,9] = mul zyb ztq
                            zyd:f64[271,9] = mul zyc zti
                            zye:f64[271,9] = neg zyd
                            zyf:f64[271,9] = div zyb ztm
                            zyg:f64[271,9] = add_any zxy zye
                            zyh:f64[271,18] = pad[
                              padding_config=((0, 0, 0), (0, 9, 0))
                            ] zyf 0.0
                            zyi:f64[271,9] = mul zya zto
                            zyj:f64[271,9] = mul zyi zth
                            zyk:f64[271,9] = neg zyj
                            zyl:f64[271,9] = div zya ztm
                            zym:f64[271,9] = add_any zxw zyl
                            zyn:f64[271,9] = add_any zyg zyk
                            zyo:f64[271,9] = pjit[name=softplus jaxpr=softplus3] ztl
                              zyn
                            zyp:f64[271,18] = pad[
                              padding_config=((0, 0, 0), (9, 0, 0))
                            ] zyo 0.0
                            zyq:f64[271,18] = add_any zyh zyp
                            zyr:f64[271,18] = pad[
                              padding_config=((0, 0, 0), (0, 9, 0))
                            ] zym 0.0
                            zys:f64[271,18] = add_any zyq zyr
                            zyt:f64[271,9] = mul ztf zym
                            zyu:f64[271,9] = pjit[name=softplus jaxpr=softplus3] ztc
                              zyt
                            zyv:f64[271,18] = pad[
                              padding_config=((0, 0, 0), (9, 0, 0))
                            ] zyu 0.0
                            zyw:f64[271,18] = add_any zys zyv
                            zyx:f64[18] = reduce_sum[axes=(0,)] zyw
                            zyy:f64[1,18] = reshape[
                              dimensions=None
                              new_sizes=(1, 18)
                            ] zyx
                            zyz:f64[18] = reshape[
                              dimensions=None
                              new_sizes=(18,)
                            ] zyy
                            zza:f32[18] = convert_element_type[
                              new_dtype=float32
                              weak_type=False
                            ] zyz
                            zzb:f64[18,512] = dot_general[
                              dimension_numbers=(([0], [0]), ([], []))
                            ] zyw zsr
                            zzc:f64[512,18] = transpose[permutation=(1, 0)] zzb
                            zzd:f32[512,18] = convert_element_type[
                              new_dtype=float32
                              weak_type=False
                            ] zzc
                            zze:f64[271,512] = dot_general[
                              dimension_numbers=(([1], [1]), ([], []))
                            ] zyw zsu
                            zzf:f64[271,512] = pjit[name=silu jaxpr=silu5] zss zsq
                              zst zze
                            zzg:f64[512] = reduce_sum[axes=(0,)] zzf
                            zzh:f64[1,512] = reshape[
                              dimensions=None
                              new_sizes=(1, 512)
                            ] zzg
                            zzi:f64[512] = reshape[
                              dimensions=None
                              new_sizes=(512,)
                            ] zzh
                            zzj:f32[512] = convert_element_type[
                              new_dtype=float32
                              weak_type=False
                            ] zzi
                            zzk:f64[512,512] = dot_general[
                              dimension_numbers=(([0], [0]), ([], []))
                            ] zzf zsj
                            zzl:f64[512,512] = transpose[permutation=(1, 0)] zzk
                            zzm:f32[512,512] = convert_element_type[
                              new_dtype=float32
                              weak_type=False
                            ] zzl
                            zzn:f64[271,512] = dot_general[
                              dimension_numbers=(([1], [1]), ([], []))
                            ] zzf zsm
                            zzo:f64[271,512] = pjit[name=silu jaxpr=silu5] zsk zsi
                              zsl zzn
                            zzp:f64[512] = reduce_sum[axes=(0,)] zzo
                            zzq:f64[1,512] = reshape[
                              dimensions=None
                              new_sizes=(1, 512)
                            ] zzp
                            zzr:f64[512] = reshape[
                              dimensions=None
                              new_sizes=(512,)
                            ] zzq
                            zzs:f32[512] = convert_element_type[
                              new_dtype=float32
                              weak_type=False
                            ] zzr
                            zzt:f64[512,180] = dot_general[
                              dimension_numbers=(([0], [0]), ([], []))
                            ] zzo yxo
                            zzu:f64[180,512] = transpose[permutation=(1, 0)] zzt
                            zzv:f32[180,512] = convert_element_type[
                              new_dtype=float32
                              weak_type=False
                            ] zzu
                            zzw:f32[512] = integer_pow[y=1] zzs
                            zzx:f32[512] = mul 0.10000000149011612 zzw
                            zzy:f32[512] = mul 0.8999999761581421 yuo
                            zzz:f32[512] = add zzx zzy
                            baaa:f32[180,512] = integer_pow[y=1] zzv
                            baab:f32[180,512] = mul 0.10000000149011612 baaa
                            baac:f32[180,512] = mul 0.8999999761581421 yup
                            baad:f32[180,512] = add baab baac
                            baae:f32[512] = integer_pow[y=1] zzj
                            baaf:f32[512] = mul 0.10000000149011612 baae
                            baag:f32[512] = mul 0.8999999761581421 yuq
                            baah:f32[512] = add baaf baag
                            baai:f32[512,512] = integer_pow[y=1] zzm
                            baaj:f32[512,512] = mul 0.10000000149011612 baai
                            baak:f32[512,512] = mul 0.8999999761581421 yur
                            baal:f32[512,512] = add baaj baak
                            baam:f32[18] = integer_pow[y=1] zza
                            baan:f32[18] = mul 0.10000000149011612 baam
                            baao:f32[18] = mul 0.8999999761581421 yus
                            baap:f32[18] = add baan baao
                            baaq:f32[512,18] = integer_pow[y=1] zzd
                            baar:f32[512,18] = mul 0.10000000149011612 baaq
                            baas:f32[512,18] = mul 0.8999999761581421 yut
                            baat:f32[512,18] = add baar baas
                            baau:f32[512] = integer_pow[y=2] zzs
                            baav:f32[512] = mul 0.0010000000474974513 baau
                            baaw:f32[512] = mul 0.9990000128746033 yuu
                            baax:f32[512] = add baav baaw
                            baay:f32[180,512] = integer_pow[y=2] zzv
                            baaz:f32[180,512] = mul 0.0010000000474974513 baay
                            baba:f32[180,512] = mul 0.9990000128746033 yuv
                            babb:f32[180,512] = add baaz baba
                            babc:f32[512] = integer_pow[y=2] zzj
                            babd:f32[512] = mul 0.0010000000474974513 babc
                            babe:f32[512] = mul 0.9990000128746033 yuw
                            babf:f32[512] = add babd babe
                            babg:f32[512,512] = integer_pow[y=2] zzm
                            babh:f32[512,512] = mul 0.0010000000474974513 babg
                            babi:f32[512,512] = mul 0.9990000128746033 yux
                            babj:f32[512,512] = add babh babi
                            babk:f32[18] = integer_pow[y=2] zza
                            babl:f32[18] = mul 0.0010000000474974513 babk
                            babm:f32[18] = mul 0.9990000128746033 yuy
                            babn:f32[18] = add babl babm
                            babo:f32[512,18] = integer_pow[y=2] zzd
                            babp:f32[512,18] = mul 0.0010000000474974513 babo
                            babq:f32[512,18] = mul 0.9990000128746033 yuz
                            babr:f32[512,18] = add babp babq
                            babs:bool[] = lt yun 2147483647
                            babt:i32[] = add yun 1
                            babu:i32[] = pjit[name=_where jaxpr=_where16] babs babt
                              2147483647
                            babv:f64[] = pow 0.9 babu
                            babw:f64[] = sub 1.0 babv
                            babx:f32[] = convert_element_type[
                              new_dtype=float32
                              weak_type=False
                            ] babw
                            baby:f32[512] = div zzz babx
                            babz:f32[] = convert_element_type[
                              new_dtype=float32
                              weak_type=False
                            ] babw
                            baca:f32[180,512] = div baad babz
                            bacb:f32[] = convert_element_type[
                              new_dtype=float32
                              weak_type=False
                            ] babw
                            bacc:f32[512] = div baah bacb
                            bacd:f32[] = convert_element_type[
                              new_dtype=float32
                              weak_type=False
                            ] babw
                            bace:f32[512,512] = div baal bacd
                            bacf:f32[] = convert_element_type[
                              new_dtype=float32
                              weak_type=False
                            ] babw
                            bacg:f32[18] = div baap bacf
                            bach:f32[] = convert_element_type[
                              new_dtype=float32
                              weak_type=False
                            ] babw
                            baci:f32[512,18] = div baat bach
                            bacj:f64[] = pow 0.999 babu
                            back:f64[] = sub 1.0 bacj
                            bacl:f32[] = convert_element_type[
                              new_dtype=float32
                              weak_type=False
                            ] back
                            bacm:f32[512] = div baax bacl
                            bacn:f32[] = convert_element_type[
                              new_dtype=float32
                              weak_type=False
                            ] back
                            baco:f32[180,512] = div babb bacn
                            bacp:f32[] = convert_element_type[
                              new_dtype=float32
                              weak_type=False
                            ] back
                            bacq:f32[512] = div babf bacp
                            bacr:f32[] = convert_element_type[
                              new_dtype=float32
                              weak_type=False
                            ] back
                            bacs:f32[512,512] = div babj bacr
                            bact:f32[] = convert_element_type[
                              new_dtype=float32
                              weak_type=False
                            ] back
                            bacu:f32[18] = div babn bact
                            bacv:f32[] = convert_element_type[
                              new_dtype=float32
                              weak_type=False
                            ] back
                            bacw:f32[512,18] = div babr bacv
                            bacx:f32[512] = add bacm 0.0
                            bacy:f32[512] = sqrt bacx
                            bacz:f32[512] = add bacy 9.99999993922529e-09
                            bada:f32[512] = div baby bacz
                            badb:f32[180,512] = add baco 0.0
                            badc:f32[180,512] = sqrt badb
                            badd:f32[180,512] = add badc 9.99999993922529e-09
                            bade:f32[180,512] = div baca badd
                            badf:f32[512] = add bacq 0.0
                            badg:f32[512] = sqrt badf
                            badh:f32[512] = add badg 9.99999993922529e-09
                            badi:f32[512] = div bacc badh
                            badj:f32[512,512] = add bacs 0.0
                            badk:f32[512,512] = sqrt badj
                            badl:f32[512,512] = add badk 9.99999993922529e-09
                            badm:f32[512,512] = div bace badl
                            badn:f32[18] = add bacu 0.0
                            bado:f32[18] = sqrt badn
                            badp:f32[18] = add bado 9.99999993922529e-09
                            badq:f32[18] = div bacg badp
                            badr:f32[512,18] = add bacw 0.0
                            bads:f32[512,18] = sqrt badr
                            badt:f32[512,18] = add bads 9.99999993922529e-09
                            badu:f32[512,18] = div baci badt
                            badv:f32[512] = mul -0.00019999999494757503 bada
                            badw:f32[180,512] = mul -0.00019999999494757503 bade
                            badx:f32[512] = mul -0.00019999999494757503 badi
                            bady:f32[512,512] = mul -0.00019999999494757503 badm
                            badz:f32[18] = mul -0.00019999999494757503 badq
                            baea:f32[512,18] = mul -0.00019999999494757503 badu
                            baeb:f32[512] = add yva badv
                            baec:f32[180,512] = add yvb badw
                            baed:f32[512] = add yvc badx
                            baee:f32[512,512] = add yvd bady
                            baef:f32[18] = add yve badz
                            baeg:f32[512,18] = add yvf baea
                            baeh:f32[512] = mul ywr 0.9990000128746033
                            baei:f32[512] = mul zrs 0.0010000000474974513
                            baej:f32[512] = add baeh baei
                            baek:f32[189,512] = mul yws 0.9990000128746033
                            bael:f32[189,512] = mul zrt 0.0010000000474974513
                            baem:f32[189,512] = add baek bael
                            baen:f32[512] = mul ywt 0.9990000128746033
                            baeo:f32[512] = mul zru 0.0010000000474974513
                            baep:f32[512] = add baen baeo
                            baeq:f32[512,512] = mul ywu 0.9990000128746033
                            baer:f32[512,512] = mul zrv 0.0010000000474974513
                            baes:f32[512,512] = add baeq baer
                            baet:f32[1] = mul ywv 0.9990000128746033
                            baeu:f32[1] = mul zrw 0.0010000000474974513
                            baev:f32[1] = add baet baeu
                            baew:f32[512,1] = mul yww 0.9990000128746033
                            baex:f32[512,1] = mul zrx 0.0010000000474974513
                            baey:f32[512,1] = add baew baex
                            baez:f32[512] = mul ywx 0.9990000128746033
                            bafa:f32[512] = mul zry 0.0010000000474974513
                            bafb:f32[512] = add baez bafa
                            bafc:f32[189,512] = mul ywy 0.9990000128746033
                            bafd:f32[189,512] = mul zrz 0.0010000000474974513
                            bafe:f32[189,512] = add bafc bafd
                            baff:f32[512] = mul ywz 0.9990000128746033
                            bafg:f32[512] = mul zsa 0.0010000000474974513
                            bafh:f32[512] = add baff bafg
                            bafi:f32[512,512] = mul yxa 0.9990000128746033
                            bafj:f32[512,512] = mul zsb 0.0010000000474974513
                            bafk:f32[512,512] = add bafi bafj
                            bafl:f32[1] = mul yxb 0.9990000128746033
                            bafm:f32[1] = mul zsc 0.0010000000474974513
                            bafn:f32[1] = add bafl bafm
                            bafo:f32[512,1] = mul yxc 0.9990000128746033
                            bafp:f32[512,1] = mul zsd 0.0010000000474974513
                            bafq:f32[512,1] = add bafo bafp
                            bafr:f32[] = exp zbo
                            bafs:f64[] = add yxd 1.0
                          in (babu, zzz, baad, baah, baal, baap, baat, baax, babb,
                            babf, babj, babn, babr, baeb, baec, baed, baee, baef,
                            baeg, znj, zjs, zjw, zka, zke, zki, zkm, zkq, zku, zky,
                            zlc, zlg, zlk, zlo, zls, zlw, zma, zme, zmi, zmm, zmq,
                            zmu, zmy, znc, zng, zrs, zrt, zru, zrv, zrw, zrx, zry,
                            zrz, zsa, zsb, zsc, zsd, baej, baem, baep, baes, baev,
                            baey, bafb, bafe, bafh, bafk, bafn, bafq, bafs, yxe,
                            zba, zat, zax, zbo, yxj, yxk, yxl, yxm, yxy, zwp, bafr,
                            zaj, zhj) }
                        length=60
                        linear=(False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False)
                        num_carry=79
                        num_consts=0
                        reverse=False
                        unroll=1
                      ] yhv yhw yhx yhy yhz yia yib yic yid yie yif yig yih yii yij
                        yik yil yim yin yio yip yiq yir yis yit yiu yiv yiw yix yiy
                        yiz yja yjb yjc yjd yje yjf yjg yjh yji yjj yjk yjl yjm yjn
                        yjo yjp yjq yjr yjs yjt yju yjv yjw yjx yjy yjz yka ykb ykc
                        ykd yke ykf ykg ykh yki ykj ykk ykl ykm ykn yko ykp ykq ykr
                        yks ykt yku yoz yrd yre yrf yrg yrh yri
                      baft:i32[] = sub yhs yht
                    in (yrj, yrk, yrl, yrm, yrn, yro, yrp, yrq, yrr, yrs, yrt, yru,
                      yrv, yrw, yrx, yry, yrz, ysa, ysb, ysc, ysd, yse, ysf, ysg,
                      ysh, ysi, ysj, ysk, ysl, ysm, ysn, yso, ysp, ysq, ysr, yss,
                      yst, ysu, ysv, ysw, ysx, ysy, ysz, yta, ytb, ytc, ytd, yte,
                      ytf, ytg, yth, yti, ytj, ytk, ytl, ytm, ytn, yto, ytp, ytq,
                      ytr, yts, ytt, ytu, ytv, ytw, ytx, yty, ytz, yua, yub, yuc,
                      yud, yue, yuf, yug, yuh, yui, yle, yuj, yuk, yul, baft, yum,
                      yoa) }
                ] pct pcu pcv pcw oyx oyy oyz oza ozb ozc ozd oze ozf ozg ozh ozi
                  ozj ozk ozl ozm ozn ozo ozp ozq ozr ozs ozt ozu ozv ozw ozx ozy
                  ozz paa pab pac pad pae paf pag pah pai paj pak pal pam pan pao
                  pap paq par pas pat pau pav paw pax pay paz pba pbb pbc pbd pbe
                  pbf pbg pbh pbi pbj pbk pbl pbm pbn pbo pbp pbq pbr pbs pbt pbu
                  pbv pbw pcx pcb pcc pcd pck
              in (yek, yel, yem, yen, yeo, yep, yeq, yer, yes, yet, yeu, yev, yew,
                yex, yey, yez, yfa, yfb, yfc, yfd, yfe, yff, yfg, yfh, yfi, yfj,
                yfk, yfl, yfm, yfn, yfo, yfp, yfq, yfr, yfs, yft, yfu, yfv, yfw,
                yfx, yfy, yfz, yga, ygb, ygc, ygd, yge, ygf, ygg, ygh, ygi, ygj,
                ygk, ygl, ygm, ygn, ygo, ygp, ygq, ygr, ygs, ygt, ygu, ygv, ygw,
                ygx, ygy, ygz, yha, yhb, yhc, yhd, yhe, yhf, yhg, yhh, yhi, yhj,
                pct, pcu, pcv, yhk, pcb, pcc, pcd, yhq, pcx, yhl, yhm, yhn, yho,
                yhp) }
            length=10
            linear=(False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False)
            num_carry=87
            num_consts=141
            reverse=False
            unroll=1
          ] omm omn omo omp omd omc omf ome omh omg omj omi oml omk omb ogj ogk ogl
            ogm ogn ogo ogp ogq ogr ogs ogt ogu ogx ogy ohb ohc ohf ohg ohj ohk oho
            ohp ohq ohr ohs oht ohu ohv ohw ohx ohy ohz oia oib oic oid oie oif oig
            oih oii oij oik oil oim oin oio oiq oir ois oiu oiv oiw oix oiz oja ojb
            ojc ojd ojf ojg ojh oji ojj ojk ojl ojm ojp ojq ojr ojs ojt oju ojv ojw
            ojx ojy ojz oka okb okc okd oke okf okg okh oki okj okk okl okm okn oko
            okp okq okr oks okt oku okv okw okx oky okz ola olb olc old ole olf olg
            olh oli olj olk oll olm oln olo olu olv olw olx oly olz oma omq omr oms
            omt omu omv omw omx omy omz ona onb onc ond one onf ong onh oni onj onk
            onl onm onn ono onp onq onr ons ont onu onv onw onx ony onz ooa oob ooc
            ood ooe oof oog ooh ooi ooj ook ool oom oon ooo oop ooq oor oos oot oou
            oov oow oox ooy ooz opa opb opc opd ope opf opg oph opi opj opk opl opm
            opn opo opp opu opv opw opx opq opr ops opt opy
          bafu:f64[] = reduce_sum[axes=(0, 1)] oth
          bafv:f64[] = div bafu 600.0
          bafw:f32[] = reduce_sum[axes=(0, 1)] oti
          bafx:f32[] = div bafw 600.0
          bafy:f64[] = reduce_sum[axes=(0, 1)] otj
          bafz:f64[] = div bafy 600.0
          baga:f32[10] = convert_element_type[new_dtype=float32 weak_type=False] otk
          bagb:f32[] = reduce_sum[axes=(0,)] baga
          bagc:f32[] = div bagb 10.0
          bagd:f64[] = reduce_sum[axes=(0, 1)] otl
          bage:f64[] = div bagd 600.0
        in (opz, oqa, oqb, oqc, oqd, oqe, oqf, oqg, oqh, oqi, oqj, oqk, oql, oqm,
          oqn, oqo, oqp, oqq, oqr, oqs, oqt, oqu, oqv, oqw, oqx, oqy, oqz, ora, orb,
          orc, ord, ore, orf, org, orh, ori, orj, ork, orl, orm, orn, oro, orp, orq,
          orr, ors, ort, oru, orv, orw, orx, ory, orz, osa, osb, osc, osd, ose, osf,
          osg, osh, osi, osj, osk, osl, osm, osn, oso, osp, osq, osr, oss, ost, osu,
          osv, osw, osx, osy, otd, ote, otf, otg, osz, ota, otb, otc, bafv, bafx,
          bafz, bagc, bage) }
    ] cja cjb cjc cjd cje cjf cjg cjh cji cjj cjk cjl cjm cjn cjo cag cah cai caj
      cak cal cam can cao cap caq car cas cat cau cav caw cax cay caz cba cbb cbc
      cbd cbe cbf cbg cbh cbi cbj cbk cbl cbm cbn cbo cbp cbq cbr cbs cbt cbu cbv
      cbw cbx cby cbz cca ccb ccc ccd cce ccf ccg cch cci ccj cck ccl ccm ccn cco
      ccp ccq ccr ccs cct ccu ccv ccw ccx ccy ccz cda cdb cjq cjr cjs cjt ocq ocs
      ocu chs cod coe cof cog coh
  in (cif, cig, cih, cii, cij, cik, cil, cim, cin, cio, cip, ciq, cir, cis, cit,
    ciu, civ, ciw, cix, ciy, ciz, cja, cjb, cjc, cjd, cje, cjf, cjg, cjh, cji, cjj,
    cjk, cjl, cjm, cjn, cjo, cjp, ocv, ocw, ocx, ocy, ocz, oda, odb, odc, odd, ode,
    odf, odg, odh, odi, odj, odk, odl, odm, odn, odo, odp, odq, odr, ods, odt, odu,
    odv, odw, odx, ody, odz, oea, oeb, oec, oed, oee, oef, oeg, oeh, oei, oej, oek,
    oel, oem, oen, oeo, oep, oeq, oer, oes, oet, oeu, oev, oew, oex, oey, oez, ofa,
    ofb, ofc, ofd, ofe, off, ofg, ofh, ofi, ofj, ofk, ofl, ofm, ofn, ofo, ofp, ofq,
    ofr, ofs, oft, ofu, cju, cjv, cjw, cjx, cjy, cjz, cka, ckb, ckc, ckd, cke, ckf,
    ckg, ckh, cki, ckj, ckk, ckl, ckm, ckn, cko, ckp, ckq, ckr, cks, ckt, cku, ckv,
    ckw, ckx, cky, ckz, cla, clb, clc, cld, cle, clf, clg, clh, cli, clj, clk, cll,
    clm, cln, clo, clp, clq, clr, cls, clt, clu, clv, clw, clx, cly, clz, cma, cmb,
    cmc, cmd, cme, cmf, cmg, cmh, cmi, cmj, cmk, cml, cmm, cmn, cmo, cmp, cmq, cmr,
    cms, cmt, cmu, cmv, cmw, cmx, cmy, cmz, cna, cnb, cnc, cnd, cne, cnf, cng, cnh,
    cni, cnj, cnk, cnl, cnm, cnn, cno, cnp, cnq, cnr, cns, cnt, cnu, cnv, cnw, cnx,
    cny, cnz, coa, cob, coc, ofv, ofw, ofx, ofy, ofz, oga, ogb, ogc, cie, ogd, oge,
    ogf, ogg, ogh) }, ())
During handling of the above exception, another exception occurred:
Traceback (most recent call last):
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/mlir.py", line 1810, in _lower_jaxpr_to_fun_cached
    func_op = ctx.cached_primitive_lowerings[key]
KeyError: (None, let _randint = { lambda ; a:key<fry>[] b:i32[] c:i32[]. let
    d:i64[] = pjit[
      name=clip
      jaxpr={ lambda ; e:i64[] f:i64[] g:i64[]. let
          h:i64[] = max f e
          i:i64[] = min g h
        in (i,) }
    ] 9223372036854775807 -2147483648 2147483647
    j:i32[] = convert_element_type[new_dtype=int32 weak_type=False] d
    k:bool[] = gt c j
    l:i32[] = pjit[
      name=clip
      jaxpr={ lambda ; m:i32[] n:i32[] o:i32[]. let
          p:i32[] = max n m
          q:i32[] = min o p
        in (q,) }
    ] b -2147483648 2147483647
    r:i64[] = convert_element_type[new_dtype=int64 weak_type=False] l
    s:i32[] = pjit[
      name=clip
      jaxpr={ lambda ; m:i32[] n:i32[] o:i32[]. let
          p:i32[] = max n m
          q:i32[] = min o p
        in (q,) }
    ] c -2147483648 2147483647
    t:i64[] = convert_element_type[new_dtype=int64 weak_type=False] s
    u:i64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] r
    v:i64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] t
    w:key<fry>[2] = random_split[shape=(2,)] a
    x:key<fry>[1] = slice[limit_indices=(1,) start_indices=(0,) strides=(1,)] w
    y:key<fry>[] = squeeze[dimensions=(0,)] x
    z:key<fry>[1] = slice[limit_indices=(2,) start_indices=(1,) strides=(1,)] w
    ba:key<fry>[] = squeeze[dimensions=(0,)] z
    bb:u64[400] = random_bits[bit_width=64 shape=(400,)] y
    bc:u64[400] = random_bits[bit_width=64 shape=(400,)] ba
    bd:i64[1] = sub v u
    be:u64[1] = convert_element_type[new_dtype=uint64 weak_type=False] bd
    bf:bool[1] = le v u
    bg:u64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    bh:u64[1] = select_n bf be bg
    bi:bool[1] = gt v u
    bj:bool[1] = and k bi
    bk:u64[1] = add bh 1
    bl:u64[1] = select_n bj bh bk
    bm:u64[1] = rem 4294967296 bl
    bn:u64[1] = mul bm bm
    bo:u64[1] = rem bn bl
    bp:u64[400] = rem bb bl
    bq:u64[400] = mul bp bo
    br:u64[400] = rem bc bl
    bs:u64[400] = add bq br
    bt:u64[400] = rem bs bl
    bu:i64[400] = convert_element_type[new_dtype=int64 weak_type=False] bt
    bv:i64[400] = add u bu
  in (bv,) } in
let _take = { lambda ; bw:f64[15000,372] bx:i64[400]. let
    by:i64[400] = pjit[
      name=remainder
      jaxpr={ lambda ; bz:i64[400] ca:i64[]. let
          cb:bool[] = eq ca 0
          cc:i64[] = pjit[
            name=_where
            jaxpr={ lambda ; cd:bool[] ce:i64[] cf:i64[]. let
                cg:i64[] = select_n cd cf ce
              in (cg,) }
          ] cb 1 ca
          ch:i64[400] = rem bz cc
          ci:bool[400] = ne ch 0
          cj:bool[400] = lt ch 0
          ck:bool[] = lt cc 0
          cl:bool[400] = ne cj ck
          cm:bool[400] = and cl ci
          cn:i64[400] = add ch cc
          co:i64[400] = select_n cm ch cn
        in (co,) }
    ] bx 15000
    cp:i64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] by
    cq:f64[400,372] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(1,), collapsed_slice_dims=(0,), start_index_map=(0,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(1, 372)
      unique_indices=False
    ] bw cp
  in (cq,) } in
let clip = { lambda ; e:i64[] f:i64[] g:i64[]. let
    h:i64[] = max f e
    i:i64[] = min g h
  in (i,) } in
let clip1 = { lambda ; m:i32[] n:i32[] o:i32[]. let
    p:i32[] = max n m
    q:i32[] = min o p
  in (q,) } in
let remainder = { lambda ; bz:i64[400] ca:i64[]. let
    cb:bool[] = eq ca 0
    cc:i64[] = pjit[
      name=_where
      jaxpr={ lambda ; cd:bool[] ce:i64[] cf:i64[]. let
          cg:i64[] = select_n cd cf ce
        in (cg,) }
    ] cb 1 ca
    ch:i64[400] = rem bz cc
    ci:bool[400] = ne ch 0
    cj:bool[400] = lt ch 0
    ck:bool[] = lt cc 0
    cl:bool[400] = ne cj ck
    cm:bool[400] = and cl ci
    cn:i64[400] = add ch cc
    co:i64[400] = select_n cm ch cn
  in (co,) } in
let silu = { lambda ; cr:f64[400,512]. let
    cs:f64[400,512] = logistic cr
    ct:f64[400,512] = mul cr cs
  in (ct,) } in
let silu1 = { lambda ; cu:f64[400,7,400]. let
    cv:f64[400,7,400] = logistic cu
    cw:f64[400,7,400] = mul cu cv
  in (cw,) } in
let softplus = { lambda ; cx:f64[400,7,36]. let
    cy:f64[400,7,36] = custom_jvp_call[
      call_jaxpr={ lambda ; cz:f64[400,7,36] da:i64[]. let
          db:f64[400,7,36] = pjit[
            name=logaddexp
            jaxpr={ lambda ; dc:f64[400,7,36] dd:i64[]. let
                de:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] dd
                df:f64[400,7,36] = max dc de
                dg:f64[400,7,36] = sub dc de
                dh:bool[400,7,36] = ne dg dg
                di:f64[400,7,36] = add dc de
                dj:f64[400,7,36] = abs dg
                dk:f64[400,7,36] = neg dj
                dl:f64[400,7,36] = exp dk
                dm:f64[400,7,36] = log1p dl
                dn:f64[400,7,36] = add df dm
                do:f64[400,7,36] = select_n dh dn di
              in (do,) }
          ] cz da
        in (db,) }
      jvp_jaxpr_thunk=<function _memoize.<locals>.memoized at 0x7d832d5444c0>
      num_consts=0
      symbolic_zeros=False
    ] cx 0
  in (cy,) } in
let remainder1 = { lambda ; dp:f64[400] dq:i64[]. let
    dr:f64[] = convert_element_type[new_dtype=float64 weak_type=False] dq
    ds:f64[400] = rem dp dr
    dt:bool[400] = ne ds 0.0
    du:bool[400] = lt ds 0.0
    dv:bool[] = lt dr 0.0
    dw:bool[400] = ne du dv
    dx:bool[400] = and dw dt
    dy:f64[400] = add ds dr
    dz:f64[400] = select_n dx ds dy
  in (dz,) } in
let clip2 = { lambda ; ea:f64[400] eb:f64[] ec:f64[]. let
    ed:f64[400] = max eb ea
    ee:f64[400] = min ec ed
  in (ee,) } in
let clip3 = { lambda ; ef:f64[400] eg:f64[] eh:f64[]. let
    ei:f64[] = convert_element_type[new_dtype=float64 weak_type=False] eg
    ej:f64[400] = max ei ef
    ek:f64[] = convert_element_type[new_dtype=float64 weak_type=False] eh
    el:f64[400] = min ek ej
  in (el,) } in
let _where = { lambda ; cd:bool[] ce:i64[] cf:i64[]. let
    cg:i64[] = select_n cd cf ce
  in (cg,) } in
let jaxpr = { lambda ; cz:f64[400,7,36] da:i64[]. let
    db:f64[400,7,36] = pjit[
      name=logaddexp
      jaxpr={ lambda ; dc:f64[400,7,36] dd:i64[]. let
          de:f64[] = convert_element_type[new_dtype=float64 weak_type=False] dd
          df:f64[400,7,36] = max dc de
          dg:f64[400,7,36] = sub dc de
          dh:bool[400,7,36] = ne dg dg
          di:f64[400,7,36] = add dc de
          dj:f64[400,7,36] = abs dg
          dk:f64[400,7,36] = neg dj
          dl:f64[400,7,36] = exp dk
          dm:f64[400,7,36] = log1p dl
          dn:f64[400,7,36] = add df dm
          do:f64[400,7,36] = select_n dh dn di
        in (do,) }
    ] cz da
  in (db,) } in
let clip4 = { lambda ; em:i64[] en:i64[] eo:i64[]. let
    ep:i64[] = max en em
    eq:i64[] = min eo ep
  in (eq,) } in
let cross = { lambda ; er:f64[400,3] es:f64[400,3]. let
    et:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    eu:f64[400] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 1)
      unique_indices=True
    ] er et
    ev:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    ew:f64[400] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 1)
      unique_indices=True
    ] er ev
    ex:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    ey:f64[400] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 1)
      unique_indices=True
    ] er ex
    ez:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    fa:f64[400] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 1)
      unique_indices=True
    ] es ez
    fb:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    fc:f64[400] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 1)
      unique_indices=True
    ] es fb
    fd:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    fe:f64[400] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 1)
      unique_indices=True
    ] es fd
    ff:f64[400] = mul ew fe
    fg:f64[400] = mul ey fc
    fh:f64[400] = sub ff fg
    fi:f64[400] = mul ey fa
    fj:f64[400] = mul eu fe
    fk:f64[400] = sub fi fj
    fl:f64[400] = mul eu fc
    fm:f64[400] = mul ew fa
    fn:f64[400] = sub fl fm
    fo:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] fh
    fp:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] fk
    fq:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] fn
    fr:f64[400,3] = concatenate[dimension=1] fo fp fq
  in (fr,) } in
let cross1 = { lambda ; fs:f64[400,13,3] ft:f64[13,3]. let
    fu:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    fv:f64[400,13] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 13, 1)
      unique_indices=True
    ] fs fu
    fw:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    fx:f64[400,13] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 13, 1)
      unique_indices=True
    ] fs fw
    fy:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    fz:f64[400,13] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 13, 1)
      unique_indices=True
    ] fs fy
    ga:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    gb:f64[13] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(13, 1)
      unique_indices=True
    ] ft ga
    gc:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    gd:f64[13] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(13, 1)
      unique_indices=True
    ] ft gc
    ge:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    gf:f64[13] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(13, 1)
      unique_indices=True
    ] ft ge
    gg:f64[1,13] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 13)] gf
    gh:f64[400,13] = mul fx gg
    gi:f64[1,13] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 13)] gd
    gj:f64[400,13] = mul fz gi
    gk:f64[400,13] = sub gh gj
    gl:f64[1,13] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 13)] gb
    gm:f64[400,13] = mul fz gl
    gn:f64[1,13] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 13)] gf
    go:f64[400,13] = mul fv gn
    gp:f64[400,13] = sub gm go
    gq:f64[1,13] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 13)] gd
    gr:f64[400,13] = mul fv gq
    gs:f64[1,13] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 13)] gb
    gt:f64[400,13] = mul fx gs
    gu:f64[400,13] = sub gr gt
    gv:f64[400,13,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(400, 13, 1)
    ] gk
    gw:f64[400,13,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(400, 13, 1)
    ] gp
    gx:f64[400,13,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(400, 13, 1)
    ] gu
    gy:f64[400,13,3] = concatenate[dimension=2] gv gw gx
  in (gy,) } in
let _take1 = { lambda ; gz:f64[400,13,3] ha:i64[4]. let
    hb:i64[4] = pjit[
      name=remainder
      jaxpr={ lambda ; hc:i64[4] hd:i64[]. let
          he:bool[] = eq hd 0
          hf:i64[] = pjit[
            name=_where
            jaxpr={ lambda ; cd:bool[] ce:i64[] cf:i64[]. let
                cg:i64[] = select_n cd cf ce
              in (cg,) }
          ] he 1 hd
          hg:i64[4] = rem hc hf
          hh:bool[4] = ne hg 0
          hi:bool[4] = lt hg 0
          hj:bool[] = lt hf 0
          hk:bool[4] = ne hi hj
          hl:bool[4] = and hk hh
          hm:i64[4] = add hg hf
          hn:i64[4] = select_n hl hg hm
        in (hn,) }
    ] ha 13
    ho:i64[4,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(4, 1)] hb
    hp:f64[400,4,3] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 2), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 1, 3)
      unique_indices=False
    ] gz ho
  in (hp,) } in
let _take2 = { lambda ; hq:f64[400,13,4] hr:i64[4]. let
    hs:i64[4] = pjit[
      name=remainder
      jaxpr={ lambda ; hc:i64[4] hd:i64[]. let
          he:bool[] = eq hd 0
          hf:i64[] = pjit[
            name=_where
            jaxpr={ lambda ; cd:bool[] ce:i64[] cf:i64[]. let
                cg:i64[] = select_n cd cf ce
              in (cg,) }
          ] he 1 hd
          hg:i64[4] = rem hc hf
          hh:bool[4] = ne hg 0
          hi:bool[4] = lt hg 0
          hj:bool[] = lt hf 0
          hk:bool[4] = ne hi hj
          hl:bool[4] = and hk hh
          hm:i64[4] = add hg hf
          hn:i64[4] = select_n hl hg hm
        in (hn,) }
    ] hr 13
    ht:i64[4,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(4, 1)] hs
    hu:f64[400,4,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 2), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 1, 4)
      unique_indices=False
    ] hq ht
  in (hu,) } in
let _take3 = { lambda ; hv:f64[400,1,3] hw:i64[4]. let
    hx:i64[4] = pjit[
      name=remainder
      jaxpr={ lambda ; hc:i64[4] hd:i64[]. let
          he:bool[] = eq hd 0
          hf:i64[] = pjit[
            name=_where
            jaxpr={ lambda ; cd:bool[] ce:i64[] cf:i64[]. let
                cg:i64[] = select_n cd cf ce
              in (cg,) }
          ] he 1 hd
          hg:i64[4] = rem hc hf
          hh:bool[4] = ne hg 0
          hi:bool[4] = lt hg 0
          hj:bool[] = lt hf 0
          hk:bool[4] = ne hi hj
          hl:bool[4] = and hk hh
          hm:i64[4] = add hg hf
          hn:i64[4] = select_n hl hg hm
        in (hn,) }
    ] hw 1
    hy:i64[4,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(4, 1)] hx
    hz:f64[400,4,3] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 2), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 1, 3)
      unique_indices=False
    ] hv hy
  in (hz,) } in
let cross2 = { lambda ; ia:f64[400,4,3] ib:f64[400,4,3]. let
    ic:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    id:f64[400,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 4, 1)
      unique_indices=True
    ] ia ic
    ie:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    if:f64[400,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 4, 1)
      unique_indices=True
    ] ia ie
    ig:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    ih:f64[400,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 4, 1)
      unique_indices=True
    ] ia ig
    ii:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    ij:f64[400,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 4, 1)
      unique_indices=True
    ] ib ii
    ik:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    il:f64[400,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 4, 1)
      unique_indices=True
    ] ib ik
    im:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    in:f64[400,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 4, 1)
      unique_indices=True
    ] ib im
    io:f64[400,4] = mul if in
    ip:f64[400,4] = mul ih il
    iq:f64[400,4] = sub io ip
    ir:f64[400,4] = mul ih ij
    is:f64[400,4] = mul id in
    it:f64[400,4] = sub ir is
    iu:f64[400,4] = mul id il
    iv:f64[400,4] = mul if ij
    iw:f64[400,4] = sub iu iv
    ix:f64[400,4,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(400, 4, 1)
    ] iq
    iy:f64[400,4,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(400, 4, 1)
    ] it
    iz:f64[400,4,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(400, 4, 1)
    ] iw
    ja:f64[400,4,3] = concatenate[dimension=2] ix iy iz
  in (ja,) } in
let _take4 = { lambda ; jb:f64[400,13,3] jc:i64[13]. let
    jd:i64[13] = pjit[
      name=remainder
      jaxpr={ lambda ; je:i64[13] jf:i64[]. let
          jg:bool[] = eq jf 0
          jh:i64[] = pjit[
            name=_where
            jaxpr={ lambda ; cd:bool[] ce:i64[] cf:i64[]. let
                cg:i64[] = select_n cd cf ce
              in (cg,) }
          ] jg 1 jf
          ji:i64[13] = rem je jh
          jj:bool[13] = ne ji 0
          jk:bool[13] = lt ji 0
          jl:bool[] = lt jh 0
          jm:bool[13] = ne jk jl
          jn:bool[13] = and jm jj
          jo:i64[13] = add ji jh
          jp:i64[13] = select_n jn ji jo
        in (jp,) }
    ] jc 13
    jq:i64[13,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(13, 1)] jd
    jr:f64[400,13,3] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 2), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 1, 3)
      unique_indices=False
    ] jb jq
  in (jr,) } in
let jaxpr1 = { lambda ; js:f64[] jt:f64[]. let ju:f64[] = add js jt in (ju,) } in
let _take5 = { lambda ; jv:f64[400,14,3] jw:i32[13]. let
    jx:i32[13] = pjit[
      name=remainder
      jaxpr={ lambda ; jy:i32[13] jz:i32[]. let
          ka:bool[] = eq jz 0
          kb:i32[] = pjit[
            name=_where
            jaxpr={ lambda ; kc:bool[] kd:i32[] ke:i32[]. let
                kf:i32[] = select_n kc ke kd
              in (kf,) }
          ] ka 1 jz
          kg:i32[13] = rem jy kb
          kh:bool[13] = ne kg 0
          ki:bool[13] = lt kg 0
          kj:bool[] = lt kb 0
          kk:bool[13] = ne ki kj
          kl:bool[13] = and kk kh
          km:i32[13] = add kg kb
          kn:i32[13] = select_n kl kg km
        in (kn,) }
    ] jw 14
    ko:i32[13,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(13, 1)] jx
    kp:f64[400,13,3] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 2), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 1, 3)
      unique_indices=False
    ] jv ko
  in (kp,) } in
let _take6 = { lambda ; kq:f64[12,1,3] kr:i64[]. let
    ks:i64[] = pjit[
      name=remainder
      jaxpr={ lambda ; kt:i64[] ku:i64[]. let
          kv:bool[] = eq ku 0
          kw:i64[] = pjit[
            name=_where
            jaxpr={ lambda ; kx:bool[] ky:i64[] kz:i64[]. let
                la:i64[] = select_n kx kz ky
              in (la,) }
          ] kv 1 ku
          lb:i64[] = rem kt kw
          lc:bool[] = ne lb 0
          ld:bool[] = lt lb 0
          le:bool[] = lt kw 0
          lf:bool[] = ne ld le
          lg:bool[] = and lf lc
          lh:i64[] = add lb kw
          li:i64[] = select_n lg lb lh
        in (li,) }
    ] kr 1
    lj:i64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] ks
    lk:f64[12,3] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(12, 1, 3)
      unique_indices=False
    ] kq lj
  in (lk,) } in
let cross3 = { lambda ; ll:f64[12,3] lm:f64[12,3]. let
    ln:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    lo:f64[12] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(12, 1)
      unique_indices=True
    ] ll ln
    lp:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    lq:f64[12] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(12, 1)
      unique_indices=True
    ] ll lp
    lr:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    ls:f64[12] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(12, 1)
      unique_indices=True
    ] ll lr
    lt:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    lu:f64[12] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(12, 1)
      unique_indices=True
    ] lm lt
    lv:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    lw:f64[12] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(12, 1)
      unique_indices=True
    ] lm lv
    lx:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    ly:f64[12] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(12, 1)
      unique_indices=True
    ] lm lx
    lz:f64[12] = mul lq ly
    ma:f64[12] = mul ls lw
    mb:f64[12] = sub lz ma
    mc:f64[12] = mul ls lu
    md:f64[12] = mul lo ly
    me:f64[12] = sub mc md
    mf:f64[12] = mul lo lw
    mg:f64[12] = mul lq lu
    mh:f64[12] = sub mf mg
    mi:f64[12,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(12, 1)] mb
    mj:f64[12,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(12, 1)] me
    mk:f64[12,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(12, 1)] mh
    ml:f64[12,3] = concatenate[dimension=1] mi mj mk
  in (ml,) } in
let _take7 = { lambda ; mm:f64[400,13,3] mn:i64[18]. let
    mo:i64[18] = pjit[
      name=remainder
      jaxpr={ lambda ; mp:i64[18] mq:i64[]. let
          mr:bool[] = eq mq 0
          ms:i64[] = pjit[
            name=_where
            jaxpr={ lambda ; cd:bool[] ce:i64[] cf:i64[]. let
                cg:i64[] = select_n cd cf ce
              in (cg,) }
          ] mr 1 mq
          mt:i64[18] = rem mp ms
          mu:bool[18] = ne mt 0
          mv:bool[18] = lt mt 0
          mw:bool[] = lt ms 0
          mx:bool[18] = ne mv mw
          my:bool[18] = and mx mu
          mz:i64[18] = add mt ms
          na:i64[18] = select_n my mt mz
        in (na,) }
    ] mn 13
    nb:i64[18,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(18, 1)] mo
    nc:f64[400,18,3] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 2), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 1, 3)
      unique_indices=False
    ] mm nb
  in (nc,) } in
let cross4 = { lambda ; nd:f64[18,3] ne:f64[400,18,3]. let
    nf:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    ng:f64[18] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(18, 1)
      unique_indices=True
    ] nd nf
    nh:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    ni:f64[18] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(18, 1)
      unique_indices=True
    ] nd nh
    nj:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    nk:f64[18] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(18, 1)
      unique_indices=True
    ] nd nj
    nl:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    nm:f64[400,18] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 18, 1)
      unique_indices=True
    ] ne nl
    nn:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    no:f64[400,18] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 18, 1)
      unique_indices=True
    ] ne nn
    np:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    nq:f64[400,18] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 18, 1)
      unique_indices=True
    ] ne np
    nr:f64[1,18] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 18)] ni
    ns:f64[400,18] = mul nr nq
    nt:f64[1,18] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 18)] nk
    nu:f64[400,18] = mul nt no
    nv:f64[400,18] = sub ns nu
    nw:f64[1,18] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 18)] nk
    nx:f64[400,18] = mul nw nm
    ny:f64[1,18] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 18)] ng
    nz:f64[400,18] = mul ny nq
    oa:f64[400,18] = sub nx nz
    ob:f64[1,18] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 18)] ng
    oc:f64[400,18] = mul ob no
    od:f64[1,18] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 18)] ni
    oe:f64[400,18] = mul od nm
    of:f64[400,18] = sub oc oe
    og:f64[400,18,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(400, 18, 1)
    ] nv
    oh:f64[400,18,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(400, 18, 1)
    ] oa
    oi:f64[400,18,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(400, 18, 1)
    ] of
    oj:f64[400,18,3] = concatenate[dimension=2] og oh oi
  in (oj,) } in
let cross5 = { lambda ; ok:f64[400,18,3] ol:f64[400,18,3]. let
    om:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    on:f64[400,18] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 18, 1)
      unique_indices=True
    ] ok om
    oo:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    op:f64[400,18] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 18, 1)
      unique_indices=True
    ] ok oo
    oq:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    or:f64[400,18] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 18, 1)
      unique_indices=True
    ] ok oq
    os:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    ot:f64[400,18] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 18, 1)
      unique_indices=True
    ] ol os
    ou:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    ov:f64[400,18] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 18, 1)
      unique_indices=True
    ] ol ou
    ow:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    ox:f64[400,18] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 18, 1)
      unique_indices=True
    ] ol ow
    oy:f64[400,18] = mul op ox
    oz:f64[400,18] = mul or ov
    pa:f64[400,18] = sub oy oz
    pb:f64[400,18] = mul or ot
    pc:f64[400,18] = mul on ox
    pd:f64[400,18] = sub pb pc
    pe:f64[400,18] = mul on ov
    pf:f64[400,18] = mul op ot
    pg:f64[400,18] = sub pe pf
    ph:f64[400,18,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(400, 18, 1)
    ] pa
    pi:f64[400,18,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(400, 18, 1)
    ] pd
    pj:f64[400,18,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(400, 18, 1)
    ] pg
    pk:f64[400,18,3] = concatenate[dimension=2] ph pi pj
  in (pk,) } in
let _take8 = { lambda ; pl:f64[400,18,3] pm:i64[4]. let
    pn:i64[4] = pjit[
      name=remainder
      jaxpr={ lambda ; hc:i64[4] hd:i64[]. let
          he:bool[] = eq hd 0
          hf:i64[] = pjit[
            name=_where
            jaxpr={ lambda ; cd:bool[] ce:i64[] cf:i64[]. let
                cg:i64[] = select_n cd cf ce
              in (cg,) }
          ] he 1 hd
          hg:i64[4] = rem hc hf
          hh:bool[4] = ne hg 0
          hi:bool[4] = lt hg 0
          hj:bool[] = lt hf 0
          hk:bool[4] = ne hi hj
          hl:bool[4] = and hk hh
          hm:i64[4] = add hg hf
          hn:i64[4] = select_n hl hg hm
        in (hn,) }
    ] pm 18
    po:i64[4,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(4, 1)] pn
    pp:f64[400,4,3] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 2), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 1, 3)
      unique_indices=False
    ] pl po
  in (pp,) } in
let _take9 = { lambda ; pq:i64[18] pr:i64[4]. let
    ps:i64[4] = pjit[
      name=remainder
      jaxpr={ lambda ; hc:i64[4] hd:i64[]. let
          he:bool[] = eq hd 0
          hf:i64[] = pjit[
            name=_where
            jaxpr={ lambda ; cd:bool[] ce:i64[] cf:i64[]. let
                cg:i64[] = select_n cd cf ce
              in (cg,) }
          ] he 1 hd
          hg:i64[4] = rem hc hf
          hh:bool[4] = ne hg 0
          hi:bool[4] = lt hg 0
          hj:bool[] = lt hf 0
          hk:bool[4] = ne hi hj
          hl:bool[4] = and hk hh
          hm:i64[4] = add hg hf
          hn:i64[4] = select_n hl hg hm
        in (hn,) }
    ] pr 18
    pt:i64[4,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(4, 1)] ps
    pu:i64[4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(), collapsed_slice_dims=(0,), start_index_map=(0,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(1,)
      unique_indices=False
    ] pq pt
  in (pu,) } in
let cross6 = { lambda ; pv:f64[400,1,3] pw:f64[400,1,6,3]. let
    px:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    py:f64[400,1] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 1, 1)
      unique_indices=True
    ] pv px
    pz:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    qa:f64[400,1] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 1, 1)
      unique_indices=True
    ] pv pz
    qb:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    qc:f64[400,1] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 1, 1)
      unique_indices=True
    ] pv qb
    qd:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    qe:f64[400,1,6] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 1, 6, 1)
      unique_indices=True
    ] pw qd
    qf:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    qg:f64[400,1,6] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 1, 6, 1)
      unique_indices=True
    ] pw qf
    qh:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    qi:f64[400,1,6] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 1, 6, 1)
      unique_indices=True
    ] pw qh
    qj:f64[400,1,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(400, 1, 1)
    ] qa
    qk:f64[400,1,6] = mul qj qi
    ql:f64[400,1,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(400, 1, 1)
    ] qc
    qm:f64[400,1,6] = mul ql qg
    qn:f64[400,1,6] = sub qk qm
    qo:f64[400,1,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(400, 1, 1)
    ] qc
    qp:f64[400,1,6] = mul qo qe
    qq:f64[400,1,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(400, 1, 1)
    ] py
    qr:f64[400,1,6] = mul qq qi
    qs:f64[400,1,6] = sub qp qr
    qt:f64[400,1,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(400, 1, 1)
    ] py
    qu:f64[400,1,6] = mul qt qg
    qv:f64[400,1,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(400, 1, 1)
    ] qa
    qw:f64[400,1,6] = mul qv qe
    qx:f64[400,1,6] = sub qu qw
    qy:f64[400,1,6,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(400, 1, 6, 1)
    ] qn
    qz:f64[400,1,6,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(400, 1, 6, 1)
    ] qs
    ra:f64[400,1,6,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(400, 1, 6, 1)
    ] qx
    rb:f64[400,1,6,3] = concatenate[dimension=3] qy qz ra
  in (rb,) } in
let cross7 = { lambda ; rc:f64[400,12,3] rd:f64[400,12,3]. let
    re:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    rf:f64[400,12] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 12, 1)
      unique_indices=True
    ] rc re
    rg:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    rh:f64[400,12] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 12, 1)
      unique_indices=True
    ] rc rg
    ri:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    rj:f64[400,12] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 12, 1)
      unique_indices=True
    ] rc ri
    rk:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    rl:f64[400,12] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 12, 1)
      unique_indices=True
    ] rd rk
    rm:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    rn:f64[400,12] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 12, 1)
      unique_indices=True
    ] rd rm
    ro:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    rp:f64[400,12] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 12, 1)
      unique_indices=True
    ] rd ro
    rq:f64[400,12] = mul rh rp
    rr:f64[400,12] = mul rj rn
    rs:f64[400,12] = sub rq rr
    rt:f64[400,12] = mul rj rl
    ru:f64[400,12] = mul rf rp
    rv:f64[400,12] = sub rt ru
    rw:f64[400,12] = mul rf rn
    rx:f64[400,12] = mul rh rl
    ry:f64[400,12] = sub rw rx
    rz:f64[400,12,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(400, 12, 1)
    ] rs
    sa:f64[400,12,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(400, 12, 1)
    ] rv
    sb:f64[400,12,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(400, 12, 1)
    ] ry
    sc:f64[400,12,3] = concatenate[dimension=2] rz sa sb
  in (sc,) } in
let _take10 = { lambda ; sd:f64[400,13,3,3] se:i64[4]. let
    sf:i64[4] = pjit[
      name=remainder
      jaxpr={ lambda ; hc:i64[4] hd:i64[]. let
          he:bool[] = eq hd 0
          hf:i64[] = pjit[
            name=_where
            jaxpr={ lambda ; cd:bool[] ce:i64[] cf:i64[]. let
                cg:i64[] = select_n cd cf ce
              in (cg,) }
          ] he 1 hd
          hg:i64[4] = rem hc hf
          hh:bool[4] = ne hg 0
          hi:bool[4] = lt hg 0
          hj:bool[] = lt hf 0
          hk:bool[4] = ne hi hj
          hl:bool[4] = and hk hh
          hm:i64[4] = add hg hf
          hn:i64[4] = select_n hl hg hm
        in (hn,) }
    ] se 13
    sg:i64[4,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(4, 1)] sf
    sh:f64[400,4,3,3] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 2, 3), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 1, 3, 3)
      unique_indices=False
    ] sd sg
  in (sh,) } in
let _take11 = { lambda ; si:f64[13] sj:i64[4]. let
    sk:i64[4] = pjit[
      name=remainder
      jaxpr={ lambda ; hc:i64[4] hd:i64[]. let
          he:bool[] = eq hd 0
          hf:i64[] = pjit[
            name=_where
            jaxpr={ lambda ; cd:bool[] ce:i64[] cf:i64[]. let
                cg:i64[] = select_n cd cf ce
              in (cg,) }
          ] he 1 hd
          hg:i64[4] = rem hc hf
          hh:bool[4] = ne hg 0
          hi:bool[4] = lt hg 0
          hj:bool[] = lt hf 0
          hk:bool[4] = ne hi hj
          hl:bool[4] = and hk hh
          hm:i64[4] = add hg hf
          hn:i64[4] = select_n hl hg hm
        in (hn,) }
    ] sj 13
    sl:i64[4,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(4, 1)] sk
    sm:f64[4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(), collapsed_slice_dims=(0,), start_index_map=(0,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(1,)
      unique_indices=False
    ] si sl
  in (sm,) } in
let _diag = { lambda ; sn:f64[18]. let
    so:f64[18] = pad[padding_config=((0, 0, 0),)] sn 0.0
    sp:i64[18,18] = iota[dimension=0 dtype=int64 shape=(18, 18)] 
    sq:i64[18,18] = iota[dimension=1 dtype=int64 shape=(18, 18)] 
    sr:i64[18,18] = add sp 0
    ss:bool[18,18] = eq sr sq
    st:f64[18] = broadcast_in_dim[broadcast_dimensions=() shape=(18,)] 0.0
    su:f64[18,18] = pjit[
      name=_where
      jaxpr={ lambda ; sv:bool[18,18] sw:f64[18] sx:f64[18]. let
          sy:f64[18,18] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(18, 18)
          ] sw
          sz:f64[18,18] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(18, 18)
          ] sx
          ta:f64[18,18] = select_n sv sz sy
        in (ta,) }
    ] ss so st
  in (su,) } in
let _take12 = { lambda ; tb:f64[400,18] tc:i64[4]. let
    td:i64[4] = pjit[
      name=remainder
      jaxpr={ lambda ; hc:i64[4] hd:i64[]. let
          he:bool[] = eq hd 0
          hf:i64[] = pjit[
            name=_where
            jaxpr={ lambda ; cd:bool[] ce:i64[] cf:i64[]. let
                cg:i64[] = select_n cd cf ce
              in (cg,) }
          ] he 1 hd
          hg:i64[4] = rem hc hf
          hh:bool[4] = ne hg 0
          hi:bool[4] = lt hg 0
          hj:bool[] = lt hf 0
          hk:bool[4] = ne hi hj
          hl:bool[4] = and hk hh
          hm:i64[4] = add hg hf
          hn:i64[4] = select_n hl hg hm
        in (hn,) }
    ] tc 18
    te:i64[4,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(4, 1)] td
    tf:f64[400,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 1)
      unique_indices=False
    ] tb te
  in (tf,) } in
let cross8 = { lambda ; tg:f64[400,13,3] th:f64[400,13,3]. let
    ti:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    tj:f64[400,13] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 13, 1)
      unique_indices=True
    ] tg ti
    tk:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    tl:f64[400,13] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 13, 1)
      unique_indices=True
    ] tg tk
    tm:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    tn:f64[400,13] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 13, 1)
      unique_indices=True
    ] tg tm
    to:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    tp:f64[400,13] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 13, 1)
      unique_indices=True
    ] th to
    tq:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    tr:f64[400,13] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 13, 1)
      unique_indices=True
    ] th tq
    ts:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    tt:f64[400,13] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 13, 1)
      unique_indices=True
    ] th ts
    tu:f64[400,13] = mul tl tt
    tv:f64[400,13] = mul tn tr
    tw:f64[400,13] = sub tu tv
    tx:f64[400,13] = mul tn tp
    ty:f64[400,13] = mul tj tt
    tz:f64[400,13] = sub tx ty
    ua:f64[400,13] = mul tj tr
    ub:f64[400,13] = mul tl tp
    uc:f64[400,13] = sub ua ub
    ud:f64[400,13,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(400, 13, 1)
    ] tw
    ue:f64[400,13,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(400, 13, 1)
    ] tz
    uf:f64[400,13,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(400, 13, 1)
    ] uc
    ug:f64[400,13,3] = concatenate[dimension=2] ud ue uf
  in (ug,) } in
let _where1 = { lambda ; uh:bool[400,12] ui:f64[400,12] uj:i64[]. let
    uk:f64[] = convert_element_type[new_dtype=float64 weak_type=False] uj
    ul:f64[12] = broadcast_in_dim[broadcast_dimensions=() shape=(12,)] uk
    um:f64[400,12] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(400, 12)] ul
    un:f64[400,12] = select_n uh um ui
  in (un,) } in
let _where2 = { lambda ; uo:bool[400,12] up:f64[400,12] uq:f64[12]. let
    ur:f64[12] = convert_element_type[new_dtype=float64 weak_type=False] uq
    us:f64[400,12] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(400, 12)] ur
    ut:f64[400,12] = select_n uo us up
  in (ut,) } in
let _where3 = { lambda ; uu:bool[400,12] uv:f64[400,12] uw:f64[400,12]. let
    ux:f64[400,12] = select_n uu uw uv
  in (ux,) } in
let _where4 = { lambda ; kc:bool[] kd:i32[] ke:i32[]. let
    kf:i32[] = select_n kc ke kd
  in (kf,) } in
let silu2 = { lambda ; uy:f64[271,512]. let
    uz:f64[271,512] = logistic uy
    va:f64[271,512] = mul uy uz
  in (va,) } in
let softplus1 = { lambda ; vb:f64[271,9]. let
    vc:f64[271,9] = custom_jvp_call[
      call_jaxpr={ lambda ; vd:f64[271,9] ve:i64[]. let
          vf:f64[271,9] = pjit[
            name=logaddexp
            jaxpr={ lambda ; vg:f64[271,9] vh:i64[]. let
                vi:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] vh
                vj:f64[271,9] = max vg vi
                vk:f64[271,9] = sub vg vi
                vl:bool[271,9] = ne vk vk
                vm:f64[271,9] = add vg vi
                vn:f64[271,9] = abs vk
                vo:f64[271,9] = neg vn
                vp:f64[271,9] = exp vo
                vq:f64[271,9] = log1p vp
                vr:f64[271,9] = add vj vq
                vs:f64[271,9] = select_n vl vr vm
              in (vs,) }
          ] vd ve
        in (vf,) }
      jvp_jaxpr_thunk=<function _memoize.<locals>.memoized at 0x7d833d486820>
      num_consts=0
      symbolic_zeros=False
    ] vb 0
  in (vc,) } in
let _normal = { lambda ; vt:key<fry>[]. let
    vu:f64[271,9] = pjit[
      name=_normal_real
      jaxpr={ lambda ; vv:key<fry>[]. let
          vw:f64[271,9] = pjit[
            name=_uniform
            jaxpr={ lambda ; vx:key<fry>[] vy:f64[] vz:f64[]. let
                wa:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1, 1)
                ] vy
                wb:f64[1,1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1, 1)
                ] vz
                wc:u64[271,9] = random_bits[bit_width=64 shape=(271, 9)] vx
                wd:u64[271,9] = shift_right_logical wc 12
                we:u64[271,9] = or wd 4607182418800017408
                wf:f64[271,9] = bitcast_convert_type[new_dtype=float64] we
                wg:f64[271,9] = sub wf 1.0
                wh:f64[1,1] = sub wb wa
                wi:f64[271,9] = mul wg wh
                wj:f64[271,9] = add wi wa
                wk:f64[271,9] = max wa wj
              in (wk,) }
          ] vv -0.9999999999999999 1.0
          wl:f64[271,9] = erf_inv vw
          wm:f64[271,9] = mul 1.4142135623730951 wl
        in (wm,) }
    ] vt
  in (vu,) } in
let _where5 = { lambda ; kc:bool[] kd:i32[] ke:i32[]. let
    kf:i32[] = select_n kc ke kd
  in (kf,) } in
let silu3 = { lambda ; wn:f64[271,512]. let
    wo:f64[271,512] = logistic wn
    wp:f64[271,512] = sub 1.0 wo
    wq:f64[271,512] = mul wo wp
    wr:f64[271,512] = mul wn wo
  in (wr, wo, wq) } in
let silu4 = { lambda ; ws:f64[271,512] wt:f64[271,512] wu:f64[271,512] wv:f64[271,512]. let
    ww:f64[271,512] = mul wt wv
    wx:f64[271,512] = mul ww wu
    wy:f64[271,512] = mul wv ws
    wz:f64[271,512] = add_any wx wy
  in (wz,) } in
let softplus2 = { lambda ; xa:f64[271,9]. let
    xb:f64[271,9] = custom_jvp_call[
      call_jaxpr={ lambda ; xc:f64[271,9] xd:f64[]. let
          xe:f64[271,9] = pjit[
            name=logaddexp
            jaxpr={ lambda ; xf:f64[271,9] xg:f64[]. let
                xh:f64[271,9] = max xf xg
                xi:f64[271,9] = sub xf xg
                xj:bool[271,9] = ne xi xi
                xk:f64[271,9] = add xf xg
                xl:f64[271,9] = abs xi
                xm:f64[271,9] = neg xl
                xn:f64[271,9] = exp xm
                xo:f64[271,9] = log1p xn
                xp:f64[271,9] = add xh xo
                xq:f64[271,9] = select_n xj xp xk
              in (xq,) }
          ] xc xd
        in (xe,) }
      jvp_jaxpr_thunk=<function _memoize.<locals>.memoized at 0x7d832c133820>
      num_consts=0
      symbolic_zeros=False
    ] xa 0.0
    xr:bool[271,9] = eq xa inf
    xs:f64[271,9] = broadcast_in_dim[broadcast_dimensions=() shape=(271, 9)] 0.0
    xt:f64[271,9] = select_n xr xa xs
    xu:bool[271,9] = eq xb inf
    xv:f64[271,9] = broadcast_in_dim[broadcast_dimensions=() shape=(271, 9)] 0.0
    xw:f64[271,9] = select_n xu xb xv
    xx:f64[271,9] = sub xt xw
    xy:f64[271,9] = exp xx
  in (xb, xy) } in
let softplus3 = { lambda ; xz:f64[271,9] ya:f64[271,9]. let
    yb:f64[271,9] = mul ya xz
  in (yb,) } in
let logaddexp = { lambda ; dc:f64[400,7,36] dd:i64[]. let
    de:f64[] = convert_element_type[new_dtype=float64 weak_type=False] dd
    df:f64[400,7,36] = max dc de
    dg:f64[400,7,36] = sub dc de
    dh:bool[400,7,36] = ne dg dg
    di:f64[400,7,36] = add dc de
    dj:f64[400,7,36] = abs dg
    dk:f64[400,7,36] = neg dj
    dl:f64[400,7,36] = exp dk
    dm:f64[400,7,36] = log1p dl
    dn:f64[400,7,36] = add df dm
    do:f64[400,7,36] = select_n dh dn di
  in (do,) } in
let remainder2 = { lambda ; kt:i64[] ku:i64[]. let
    kv:bool[] = eq ku 0
    kw:i64[] = pjit[
      name=_where
      jaxpr={ lambda ; kx:bool[] ky:i64[] kz:i64[]. let
          la:i64[] = select_n kx kz ky
        in (la,) }
    ] kv 1 ku
    lb:i64[] = rem kt kw
    lc:bool[] = ne lb 0
    ld:bool[] = lt lb 0
    le:bool[] = lt kw 0
    lf:bool[] = ne ld le
    lg:bool[] = and lf lc
    lh:i64[] = add lb kw
    li:i64[] = select_n lg lb lh
  in (li,) } in
let remainder3 = { lambda ; hc:i64[4] hd:i64[]. let
    he:bool[] = eq hd 0
    hf:i64[] = pjit[
      name=_where
      jaxpr={ lambda ; cd:bool[] ce:i64[] cf:i64[]. let
          cg:i64[] = select_n cd cf ce
        in (cg,) }
    ] he 1 hd
    hg:i64[4] = rem hc hf
    hh:bool[4] = ne hg 0
    hi:bool[4] = lt hg 0
    hj:bool[] = lt hf 0
    hk:bool[4] = ne hi hj
    hl:bool[4] = and hk hh
    hm:i64[4] = add hg hf
    hn:i64[4] = select_n hl hg hm
  in (hn,) } in
let remainder4 = { lambda ; je:i64[13] jf:i64[]. let
    jg:bool[] = eq jf 0
    jh:i64[] = pjit[
      name=_where
      jaxpr={ lambda ; cd:bool[] ce:i64[] cf:i64[]. let
          cg:i64[] = select_n cd cf ce
        in (cg,) }
    ] jg 1 jf
    ji:i64[13] = rem je jh
    jj:bool[13] = ne ji 0
    jk:bool[13] = lt ji 0
    jl:bool[] = lt jh 0
    jm:bool[13] = ne jk jl
    jn:bool[13] = and jm jj
    jo:i64[13] = add ji jh
    jp:i64[13] = select_n jn ji jo
  in (jp,) } in
let remainder5 = { lambda ; jy:i32[13] jz:i32[]. let
    ka:bool[] = eq jz 0
    kb:i32[] = pjit[name=_where jaxpr=_where4] ka 1 jz
    kg:i32[13] = rem jy kb
    kh:bool[13] = ne kg 0
    ki:bool[13] = lt kg 0
    kj:bool[] = lt kb 0
    kk:bool[13] = ne ki kj
    kl:bool[13] = and kk kh
    km:i32[13] = add kg kb
    kn:i32[13] = select_n kl kg km
  in (kn,) } in
let remainder6 = { lambda ; kt:i64[] ku:i64[]. let
    kv:bool[] = eq ku 0
    kw:i64[] = pjit[
      name=_where
      jaxpr={ lambda ; kx:bool[] ky:i64[] kz:i64[]. let
          la:i64[] = select_n kx kz ky
        in (la,) }
    ] kv 1 ku
    lb:i64[] = rem kt kw
    lc:bool[] = ne lb 0
    ld:bool[] = lt lb 0
    le:bool[] = lt kw 0
    lf:bool[] = ne ld le
    lg:bool[] = and lf lc
    lh:i64[] = add lb kw
    li:i64[] = select_n lg lb lh
  in (li,) } in
let remainder7 = { lambda ; mp:i64[18] mq:i64[]. let
    mr:bool[] = eq mq 0
    ms:i64[] = pjit[
      name=_where
      jaxpr={ lambda ; cd:bool[] ce:i64[] cf:i64[]. let
          cg:i64[] = select_n cd cf ce
        in (cg,) }
    ] mr 1 mq
    mt:i64[18] = rem mp ms
    mu:bool[18] = ne mt 0
    mv:bool[18] = lt mt 0
    mw:bool[] = lt ms 0
    mx:bool[18] = ne mv mw
    my:bool[18] = and mx mu
    mz:i64[18] = add mt ms
    na:i64[18] = select_n my mt mz
  in (na,) } in
let remainder8 = { lambda ; hc:i64[4] hd:i64[]. let
    he:bool[] = eq hd 0
    hf:i64[] = pjit[
      name=_where
      jaxpr={ lambda ; cd:bool[] ce:i64[] cf:i64[]. let
          cg:i64[] = select_n cd cf ce
        in (cg,) }
    ] he 1 hd
    hg:i64[4] = rem hc hf
    hh:bool[4] = ne hg 0
    hi:bool[4] = lt hg 0
    hj:bool[] = lt hf 0
    hk:bool[4] = ne hi hj
    hl:bool[4] = and hk hh
    hm:i64[4] = add hg hf
    hn:i64[4] = select_n hl hg hm
  in (hn,) } in
let remainder9 = { lambda ; yc:i64[18] yd:i64[]. let
    ye:bool[] = eq yd 0
    yf:i64[] = pjit[
      name=_where
      jaxpr={ lambda ; cd:bool[] ce:i64[] cf:i64[]. let
          cg:i64[] = select_n cd cf ce
        in (cg,) }
    ] ye 1 yd
    yg:i64[18] = rem yc yf
    yh:bool[18] = ne yg 0
    yi:bool[18] = lt yg 0
    yj:bool[] = lt yf 0
    yk:bool[18] = ne yi yj
    yl:bool[18] = and yk yh
    ym:i64[18] = add yg yf
    yn:i64[18] = select_n yl yg ym
  in (yn,) } in
let _where6 = { lambda ; sv:bool[18,18] sw:f64[18] sx:f64[18]. let
    sy:f64[18,18] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(18, 18)] sw
    sz:f64[18,18] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(18, 18)] sx
    ta:f64[18,18] = select_n sv sz sy
  in (ta,) } in
let remainder10 = { lambda ; yo:f64[400] yp:i64[]. let
    yq:f64[] = convert_element_type[new_dtype=float64 weak_type=False] yp
    yr:f64[400] = rem yo yq
    ys:bool[400] = ne yr 0.0
    yt:bool[400] = lt yr 0.0
    yu:bool[] = lt yq 0.0
    yv:bool[400] = ne yt yu
    yw:bool[400] = and yv ys
    yx:f64[400] = add yr yq
    yy:f64[400] = select_n yw yr yx
  in (yy,) } in
let clip5 = { lambda ; yz:f64[400] za:f64[] zb:f64[]. let
    zc:f64[400] = max za yz
    zd:f64[400] = min zb zc
  in (zd,) } in
let clip6 = { lambda ; ze:f64[400,12] zf:f64[12] zg:f64[12]. let
    zh:f64[1,12] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 12)] zf
    zi:f64[400,12] = max zh ze
    zj:f64[1,12] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 12)] zg
    zk:f64[400,12] = min zj zi
  in (zk,) } in
let jaxpr2 = { lambda ; vd:f64[271,9] ve:i64[]. let
    vf:f64[271,9] = pjit[
      name=logaddexp
      jaxpr={ lambda ; vg:f64[271,9] vh:i64[]. let
          vi:f64[] = convert_element_type[new_dtype=float64 weak_type=False] vh
          vj:f64[271,9] = max vg vi
          vk:f64[271,9] = sub vg vi
          vl:bool[271,9] = ne vk vk
          vm:f64[271,9] = add vg vi
          vn:f64[271,9] = abs vk
          vo:f64[271,9] = neg vn
          vp:f64[271,9] = exp vo
          vq:f64[271,9] = log1p vp
          vr:f64[271,9] = add vj vq
          vs:f64[271,9] = select_n vl vr vm
        in (vs,) }
    ] vd ve
  in (vf,) } in
let _normal_real = { lambda ; vv:key<fry>[]. let
    vw:f64[271,9] = pjit[
      name=_uniform
      jaxpr={ lambda ; vx:key<fry>[] vy:f64[] vz:f64[]. let
          wa:f64[1,1] = broadcast_in_dim[broadcast_dimensions=() shape=(1, 1)] vy
          wb:f64[1,1] = broadcast_in_dim[broadcast_dimensions=() shape=(1, 1)] vz
          wc:u64[271,9] = random_bits[bit_width=64 shape=(271, 9)] vx
          wd:u64[271,9] = shift_right_logical wc 12
          we:u64[271,9] = or wd 4607182418800017408
          wf:f64[271,9] = bitcast_convert_type[new_dtype=float64] we
          wg:f64[271,9] = sub wf 1.0
          wh:f64[1,1] = sub wb wa
          wi:f64[271,9] = mul wg wh
          wj:f64[271,9] = add wi wa
          wk:f64[271,9] = max wa wj
        in (wk,) }
    ] vv -0.9999999999999999 1.0
    wl:f64[271,9] = erf_inv vw
    wm:f64[271,9] = mul 1.4142135623730951 wl
  in (wm,) } in
let jaxpr3 = { lambda ; xc:f64[271,9] xd:f64[]. let
    xe:f64[271,9] = pjit[
      name=logaddexp
      jaxpr={ lambda ; xf:f64[271,9] xg:f64[]. let
          xh:f64[271,9] = max xf xg
          xi:f64[271,9] = sub xf xg
          xj:bool[271,9] = ne xi xi
          xk:f64[271,9] = add xf xg
          xl:f64[271,9] = abs xi
          xm:f64[271,9] = neg xl
          xn:f64[271,9] = exp xm
          xo:f64[271,9] = log1p xn
          xp:f64[271,9] = add xh xo
          xq:f64[271,9] = select_n xj xp xk
        in (xq,) }
    ] xc xd
  in (xe,) } in
let isinf = { lambda ; zl:f64[]. let
    zm:f64[] = abs zl
    zn:bool[] = eq zm inf
  in (zn,) } in
let _where7 = { lambda ; kx:bool[] ky:i64[] kz:i64[]. let
    la:i64[] = select_n kx kz ky
  in (la,) } in
let _where8 = { lambda ; cd:bool[] ce:i64[] cf:i64[]. let
    cg:i64[] = select_n cd cf ce
  in (cg,) } in
let _where9 = { lambda ; cd:bool[] ce:i64[] cf:i64[]. let
    cg:i64[] = select_n cd cf ce
  in (cg,) } in
let jaxpr4 = { lambda ; zo:f64[400,18,18] zp:f64[400,18,18]. let
    zq:f64[400,18,18] = dot_general[
      dimension_numbers=(([2], [2]), ([0], [0]))
      precision=(Precision.HIGHEST, Precision.HIGHEST)
    ] zo zp
    zr:f64[400,18,18] = transpose[permutation=(0, 2, 1)] zq
  in (zr,) } in
let logaddexp1 = { lambda ; vg:f64[271,9] vh:i64[]. let
    vi:f64[] = convert_element_type[new_dtype=float64 weak_type=False] vh
    vj:f64[271,9] = max vg vi
    vk:f64[271,9] = sub vg vi
    vl:bool[271,9] = ne vk vk
    vm:f64[271,9] = add vg vi
    vn:f64[271,9] = abs vk
    vo:f64[271,9] = neg vn
    vp:f64[271,9] = exp vo
    vq:f64[271,9] = log1p vp
    vr:f64[271,9] = add vj vq
    vs:f64[271,9] = select_n vl vr vm
  in (vs,) } in
let _uniform = { lambda ; vx:key<fry>[] vy:f64[] vz:f64[]. let
    wa:f64[1,1] = broadcast_in_dim[broadcast_dimensions=() shape=(1, 1)] vy
    wb:f64[1,1] = broadcast_in_dim[broadcast_dimensions=() shape=(1, 1)] vz
    wc:u64[271,9] = random_bits[bit_width=64 shape=(271, 9)] vx
    wd:u64[271,9] = shift_right_logical wc 12
    we:u64[271,9] = or wd 4607182418800017408
    wf:f64[271,9] = bitcast_convert_type[new_dtype=float64] we
    wg:f64[271,9] = sub wf 1.0
    wh:f64[1,1] = sub wb wa
    wi:f64[271,9] = mul wg wh
    wj:f64[271,9] = add wi wa
    wk:f64[271,9] = max wa wj
  in (wk,) } in
let logaddexp2 = { lambda ; xf:f64[271,9] xg:f64[]. let
    xh:f64[271,9] = max xf xg
    xi:f64[271,9] = sub xf xg
    xj:bool[271,9] = ne xi xi
    xk:f64[271,9] = add xf xg
    xl:f64[271,9] = abs xi
    xm:f64[271,9] = neg xl
    xn:f64[271,9] = exp xm
    xo:f64[271,9] = log1p xn
    xp:f64[271,9] = add xh xo
    xq:f64[271,9] = select_n xj xp xk
  in (xq,) } in
let _cho_solve = { lambda ; zs:f64[400,18,18] zt:f64[400,18,18]. let
    zu:f64[400,18,18,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(400, 18, 18, 1)
    ] zt
    zv:f64[400,18,1,18] = transpose[permutation=(0, 2, 3, 1)] zu
    zw:f64[400,18,18] = reshape[dimensions=None new_sizes=(400, 18, 18)] zv
    zx:f64[400,18,18] = triangular_solve[
      conjugate_a=False
      left_side=True
      lower=False
      transpose_a=True
      unit_diagonal=False
    ] zs zw
    zy:f64[400,18,1,18] = reshape[dimensions=None new_sizes=(400, 18, 1, 18)] zx
    zz:f64[400,18,1,18] = slice[
      limit_indices=(400, 18, 1, 18)
      start_indices=(0, 0, 0, 0)
      strides=None
    ] zy
    baa:f64[400,18,18,1] = transpose[permutation=(0, 3, 1, 2)] zz
    bab:f64[400,18,18] = squeeze[dimensions=(3,)] baa
    bac:f64[400,18,18,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(400, 18, 18, 1)
    ] bab
    bad:f64[400,18,1,18] = transpose[permutation=(0, 2, 3, 1)] bac
    bae:f64[400,18,18] = reshape[dimensions=None new_sizes=(400, 18, 18)] bad
    baf:f64[400,18,18] = triangular_solve[
      conjugate_a=False
      left_side=True
      lower=False
      transpose_a=False
      unit_diagonal=False
    ] zs bae
    bag:f64[400,18,1,18] = reshape[dimensions=None new_sizes=(400, 18, 1, 18)] baf
    bah:f64[400,18,1,18] = slice[
      limit_indices=(400, 18, 1, 18)
      start_indices=(0, 0, 0, 0)
      strides=None
    ] bag
    bai:f64[400,18,18,1] = transpose[permutation=(0, 3, 1, 2)] bah
    baj:f64[400,18,18] = squeeze[dimensions=(3,)] bai
  in (baj,) } in
{ lambda ; bak:f64[180] bal:f64[180] bam:f64[9] ban:f64[9] bao:f64[7,189,400] bap:f64[7,400]
    baq:f64[7,400,400] bar:f64[7,400] bas:f64[7,400,400] bat:f64[7,400] bau:f64[7,400,400]
    bav:f64[7,400] baw:f64[7,400,54] bax:f64[7,54] bay:i64[5] baz:f64[36,2] bba:f64[9,2]
    bbb:f64[19] bbc:i64[4] bbd:f64[18,3] bbe:f64[18,3] bbf:f64[13,3] bbg:f64[13,4]
    bbh:f64[13,4] bbi:f64[13,3] bbj:i64[4] bbk:i64[4] bbl:i64[4] bbm:i64[4] bbn:i64[4]
    bbo:i64[4] bbp:i64[4] bbq:i64[4] bbr:i64[13] bbs:i64[13] bbt:f64[13,3] bbu:f64[13,4]
    bbv:i32[13] bbw:f64[13] bbx:f64[13,3,3] bby:i32[13] bbz:f64[4] bca:f64[4] bcb:i64[18]
    bcc:f64[4] bcd:i64[18] bce:i64[4] bcf:i64[18] bcg:i64[4] bch:i64[4] bci:i64[4]
    bcj:i64[4] bck:i64[4] bcl:i64[4] bcm:i64[4] bcn:i64[4] bco:i64[4] bcp:i64[4]
    bcq:i64[4] bcr:i64[13] bcs:i64[13] bct:i64[4] bcu:i64[4] bcv:i64[4] bcw:i64[4]
    bcx:i64[4] bcy:i64[4] bcz:i64[4] bda:i64[4] bdb:i64[4] bdc:i64[4] bdd:i64[4]
    bde:i64[4] bdf:i64[13] bdg:i64[13] bdh:i64[13] bdi:i64[18] bdj:i64[132] bdk:i64[132]
    bdl:f64[18] bdm:f64[18] bdn:f64[18] bdo:i64[18] bdp:f64[3] bdq:i64[4] bdr:i64[4]
    bds:i64[4] bdt:i64[4] bdu:i64[4] bdv:i64[4] bdw:i64[4] bdx:i64[4] bdy:i64[4]
    bdz:i64[4] bea:i64[4] beb:i64[4] bec:i64[4] bed:i64[4] bee:i64[13] bef:i64[13]
    beg:i64[4] beh:i64[4] bei:i64[4] bej:i64[4] bek:i64[4] bel:i64[4] bem:i64[4]
    ben:i64[4] beo:i64[4] bep:i64[13] beq:i64[13] ber:i64[18] bes:i64[4] bet:f64[4]
    beu:f64[] bev:f64[3] bew:f64[3] bex:f64[3] bey:f64[] bez:f64[8] bfa:f64[3] bfb:f64[3]
    bfc:f64[3] bfd:i64[3] bfe:f64[3] bff:f64[12] bfg:i32[12] bfh:i32[12] bfi:f64[12,2]
    bfj:f64[12] bfk:f64[12] bfl:f64[12] bfm:f64[12] bfn:f64[12,2] bfo:i64[4] bfp:f64[4]
    bfq:i64[3] bfr:f64[3] bfs:f64[12] bft:i64[4] bfu:f64[17] bfv:i32[] bfw:f32[512]
    bfx:f32[180,512] bfy:f32[512] bfz:f32[512,512] bga:f32[18] bgb:f32[512,18] bgc:f32[512]
    bgd:f32[180,512] bge:f32[512] bgf:f32[512,512] bgg:f32[18] bgh:f32[512,18] bgi:f32[512]
    bgj:f32[180,512] bgk:f32[512] bgl:f32[512,512] bgm:f32[18] bgn:f32[512,18] bgo:i32[]
    bgp:f32[512] bgq:f32[189,512] bgr:f32[512] bgs:f32[512,512] bgt:f32[1] bgu:f32[512,1]
    bgv:f32[512] bgw:f32[189,512] bgx:f32[512] bgy:f32[512,512] bgz:f32[1] bha:f32[512,1]
    bhb:f32[512] bhc:f32[189,512] bhd:f32[512] bhe:f32[512,512] bhf:f32[1] bhg:f32[512,1]
    bhh:f32[512] bhi:f32[189,512] bhj:f32[512] bhk:f32[512,512] bhl:f32[1] bhm:f32[512,1]
    bhn:f32[512] bho:f32[189,512] bhp:f32[512] bhq:f32[512,512] bhr:f32[1] bhs:f32[512,1]
    bht:f32[512] bhu:f32[189,512] bhv:f32[512] bhw:f32[512,512] bhx:f32[1] bhy:f32[512,1]
    bhz:f32[512] bia:f32[189,512] bib:f32[512] bic:f32[512,512] bid:f32[1] bie:f32[512,1]
    bif:f32[512] big:f32[189,512] bih:f32[512] bii:f32[512,512] bij:f32[1] bik:f32[512,1]
    bil:f64[] bim:f64[] bin:i32[] bio:f32[] bip:f32[] biq:f32[] bir:f64[180] bis:f64[180]
    bit:f64[] biu:f64[180] biv:f64[4000,372] biw:i32[] bix:i32[] biy:u32[2] biz:f64[15000,372]
    bja:i32[] bjb:i32[] bjc:u32[2] bjd:u32[2]. let
    bje:key<fry>[] = random_wrap[impl=fry] bjc
    bjf:key<fry>[2] = random_split[shape=(2,)] bje
    bjg:u32[2,2] = random_unwrap bjf
    bjh:u32[1,2] = slice[
      limit_indices=(1, 2)
      start_indices=(0, 0)
      strides=(1, 1)
    ] bjg
    bji:u32[2] = squeeze[dimensions=(0,)] bjh
    bjj:u32[1,2] = slice[
      limit_indices=(2, 2)
      start_indices=(1, 0)
      strides=(1, 1)
    ] bjg
    bjk:u32[2] = squeeze[dimensions=(0,)] bjj
    bjl:key<fry>[] = random_wrap[impl=fry] bjk
    bjm:i64[400] = pjit[name=_randint jaxpr=_randint] bjl bjb bja
    bjn:f64[400,372] = pjit[name=_take jaxpr=_take] biz bjm
    bjo:f64[400,180] = slice[
      limit_indices=(400, 180)
      start_indices=(0, 0)
      strides=None
    ] bjn
    bjp:f64[400] = broadcast_in_dim[broadcast_dimensions=() shape=(400,)] 0.0
    bjq:f64[400] = broadcast_in_dim[broadcast_dimensions=() shape=(400,)] 0.0
    _:f64[400,180] _:f64[400] _:f64[400,180] _:f64[400] bjr:f64[4000,372] bjs:i32[]
      bjt:i32[] bju:u32[2] bjv:u32[2] = scan[
      _split_transpose=False
      jaxpr={ lambda ; bjw:f32[180,512] bjx:f32[512] bjy:f32[512,512] bjz:f32[512]
          bka:f32[512,18] bkb:f32[18] bkc:f64[180] bkd:f64[180] bke:f64[9] bkf:f64[9]
          bkg:f64[7,189,400] bkh:f64[7,400] bki:f64[7,400,400] bkj:f64[7,400] bkk:f64[7,400,400]
          bkl:f64[7,400] bkm:f64[7,400,400] bkn:f64[7,400] bko:f64[7,400,54] bkp:f64[7,54]
          bkq:i64[5] bkr:f64[36,2] bks:f64[9,2] bkt:f64[19] bku:i64[4] bkv:f64[18,3]
          bkw:f64[18,3] bkx:f64[13,3] bky:f64[13,4] bkz:f64[13,4] bla:f64[13,3] blb:i64[4]
          blc:i64[4] bld:i64[4] ble:i64[4] blf:i64[4] blg:i64[4] blh:i64[4] bli:i64[4]
          blj:i64[13] blk:i64[13] bll:f64[13,3] blm:f64[13,4] bln:i32[13] blo:f64[13]
          blp:f64[13,3,3] blq:i32[13] blr:f64[4] bls:f64[4] blt:i64[18] blu:f64[4]
          blv:i64[18] blw:i64[4] blx:i64[18] bly:i64[4] blz:i64[4] bma:i64[4] bmb:i64[4]
          bmc:i64[4] bmd:i64[4] bme:i64[4] bmf:i64[4] bmg:i64[4] bmh:i64[4] bmi:i64[4]
          bmj:i64[13] bmk:i64[13] bml:i64[4] bmm:i64[4] bmn:i64[4] bmo:i64[4] bmp:i64[4]
          bmq:i64[4] bmr:i64[4] bms:i64[4] bmt:i64[4] bmu:i64[4] bmv:i64[4] bmw:i64[4]
          bmx:i64[13] bmy:i64[13] bmz:i64[13] bna:i64[18] bnb:i64[132] bnc:i64[132]
          bnd:f64[18] bne:f64[18] bnf:f64[18] bng:i64[18] bnh:f64[3] bni:i64[4] bnj:i64[4]
          bnk:i64[4] bnl:i64[4] bnm:i64[4] bnn:i64[4] bno:i64[4] bnp:i64[4] bnq:i64[4]
          bnr:i64[4] bns:i64[4] bnt:i64[4] bnu:i64[4] bnv:i64[4] bnw:i64[13] bnx:i64[13]
          bny:i64[4] bnz:i64[4] boa:i64[4] bob:i64[4] boc:i64[4] bod:i64[4] boe:i64[4]
          bof:i64[4] bog:i64[4] boh:i64[13] boi:i64[13] boj:i64[18] bok:i64[4] bol:f64[4]
          bom:f64[] bon:f64[3] boo:f64[3] bop:f64[3] boq:f64[] bor:f64[8] bos:f64[3]
          bot:f64[3] bou:f64[3] bov:i64[3] bow:f64[3] box:f64[12] boy:i32[12] boz:i32[12]
          bpa:f64[12,2] bpb:f64[12] bpc:f64[12] bpd:f64[12] bpe:f64[12] bpf:f64[12,2]
          bpg:i64[4] bph:f64[4] bpi:i64[3] bpj:f64[3] bpk:f64[12] bpl:i64[4] bpm:f64[17]
          bpn:f64[400,180] bpo:f64[400] bpp:f64[400,180] bpq:f64[400] bpr:f64[4000,372]
          bps:i32[] bpt:i32[] bpu:u32[2] bpv:u32[2]. let
          bpw:key<fry>[] = random_wrap[impl=fry] bpv
          bpx:key<fry>[2] = random_split[shape=(2,)] bpw
          bpy:u32[2,2] = random_unwrap bpx
          bpz:u32[1,2] = slice[
            limit_indices=(1, 2)
            start_indices=(0, 0)
            strides=(1, 1)
          ] bpy
          bqa:u32[2] = squeeze[dimensions=(0,)] bpz
          bqb:u32[1,2] = slice[
            limit_indices=(2, 2)
            start_indices=(1, 0)
            strides=(1, 1)
          ] bpy
          bqc:u32[2] = squeeze[dimensions=(0,)] bqb
          bqd:key<fry>[] = random_wrap[impl=fry] bqa
          bqe:key<fry>[2] = random_split[shape=(2,)] bqd
          bqf:u32[2,2] = random_unwrap bqe
          bqg:u32[1,2] = slice[
            limit_indices=(1, 2)
            start_indices=(0, 0)
            strides=(1, 1)
          ] bqf
          bqh:u32[2] = squeeze[dimensions=(0,)] bqg
          bqi:u32[1,2] = slice[
            limit_indices=(2, 2)
            start_indices=(1, 0)
            strides=(1, 1)
          ] bqf
          bqj:u32[2] = squeeze[dimensions=(0,)] bqi
          bqk:f64[180,512] = convert_element_type[
            new_dtype=float64
            weak_type=False
          ] bjw
          bql:f64[512] = convert_element_type[new_dtype=float64 weak_type=False] bjx
          bqm:f64[400,512] = dot_general[
            dimension_numbers=(([1], [0]), ([], []))
          ] bpn bqk
          bqn:f64[1,512] = reshape[dimensions=None new_sizes=(1, 512)] bql
          bqo:f64[400,512] = add bqm bqn
          bqp:f64[400,512] = pjit[name=silu jaxpr=silu] bqo
          bqq:f64[512,512] = convert_element_type[
            new_dtype=float64
            weak_type=False
          ] bjy
          bqr:f64[512] = convert_element_type[new_dtype=float64 weak_type=False] bjz
          bqs:f64[400,512] = dot_general[
            dimension_numbers=(([1], [0]), ([], []))
          ] bqp bqq
          bqt:f64[1,512] = reshape[dimensions=None new_sizes=(1, 512)] bqr
          bqu:f64[400,512] = add bqs bqt
          bqv:f64[400,512] = pjit[name=silu jaxpr=silu] bqu
          bqw:f64[512,18] = convert_element_type[
            new_dtype=float64
            weak_type=False
          ] bka
          bqx:f64[18] = convert_element_type[new_dtype=float64 weak_type=False] bkb
          bqy:f64[400,18] = dot_general[
            dimension_numbers=(([1], [0]), ([], []))
          ] bqv bqw
          bqz:f64[1,18] = reshape[dimensions=None new_sizes=(1, 18)] bqx
          bra:f64[400,18] = add bqy bqz
          brb:f64[400,9] = slice[
            limit_indices=(400, 9)
            start_indices=(0, 0)
            strides=None
          ] bra
          brc:f64[400,9] = slice[
            limit_indices=(400, 18)
            start_indices=(0, 9)
            strides=None
          ] bra
          brd:f64[400,9] = pjit[
            name=softplus
            jaxpr={ lambda ; bre:f64[400,9]. let
                brf:f64[400,9] = custom_jvp_call[
                  call_jaxpr={ lambda ; brg:f64[400,9] brh:i64[]. let
                      bri:f64[400,9] = pjit[
                        name=logaddexp
                        jaxpr={ lambda ; brj:f64[400,9] brk:i64[]. let
                            brl:f64[] = convert_element_type[
                              new_dtype=float64
                              weak_type=False
                            ] brk
                            brm:f64[400,9] = max brj brl
                            brn:f64[400,9] = sub brj brl
                            bro:bool[400,9] = ne brn brn
                            brp:f64[400,9] = add brj brl
                            brq:f64[400,9] = abs brn
                            brr:f64[400,9] = neg brq
                            brs:f64[400,9] = exp brr
                            brt:f64[400,9] = log1p brs
                            bru:f64[400,9] = add brm brt
                            brv:f64[400,9] = select_n bro bru brp
                          in (brv,) }
                      ] brg brh
                    in (bri,) }
                  jvp_jaxpr_thunk=<function _memoize.<locals>.memoized at 0x7d832d5a2940>
                  num_consts=0
                  symbolic_zeros=False
                ] bre 0
              in (brf,) }
          ] brc
          brw:f64[400,9] = add brd 0.001
          brx:key<fry>[] = random_wrap[impl=fry] bqh
          bry:f64[400,9] = pjit[
            name=_normal
            jaxpr={ lambda ; brz:key<fry>[]. let
                bsa:f64[400,9] = pjit[
                  name=_normal_real
                  jaxpr={ lambda ; bsb:key<fry>[]. let
                      bsc:f64[400,9] = pjit[
                        name=_uniform
                        jaxpr={ lambda ; bsd:key<fry>[] bse:f64[] bsf:f64[]. let
                            bsg:f64[1,1] = broadcast_in_dim[
                              broadcast_dimensions=()
                              shape=(1, 1)
                            ] bse
                            bsh:f64[1,1] = broadcast_in_dim[
                              broadcast_dimensions=()
                              shape=(1, 1)
                            ] bsf
                            bsi:u64[400,9] = random_bits[
                              bit_width=64
                              shape=(400, 9)
                            ] bsd
                            bsj:u64[400,9] = shift_right_logical bsi 12
                            bsk:u64[400,9] = or bsj 4607182418800017408
                            bsl:f64[400,9] = bitcast_convert_type[
                              new_dtype=float64
                            ] bsk
                            bsm:f64[400,9] = sub bsl 1.0
                            bsn:f64[1,1] = sub bsh bsg
                            bso:f64[400,9] = mul bsm bsn
                            bsp:f64[400,9] = add bso bsg
                            bsq:f64[400,9] = max bsg bsp
                          in (bsq,) }
                      ] bsb -0.9999999999999999 1.0
                      bsr:f64[400,9] = erf_inv bsc
                      bss:f64[400,9] = mul 1.4142135623730951 bsr
                    in (bss,) }
                ] brz
              in (bsa,) }
          ] brx
          bst:f64[400,9] = mul bry brw
          bsu:f64[400,9] = add bst brb
          bsv:f64[400,9] = tanh bsu
          bsw:key<fry>[] = random_wrap[impl=fry] bqj
          bsx:key<fry>[400] = random_split[shape=(400,)] bsw
          bsy:u32[400,2] = random_unwrap bsx
          bsz:f64[400,36] = slice[
            limit_indices=(400, 36)
            start_indices=(0, 0)
            strides=None
          ] bpn
          bta:f64[1,180] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 180)
          ] bkc
          btb:f64[400,180] = sub bpn bta
          btc:f64[1,180] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 180)
          ] bkd
          btd:f64[400,180] = div btb btc
          bte:f64[1,9] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 9)
          ] bke
          btf:f64[400,9] = sub bsv bte
          btg:f64[1,9] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 9)
          ] bkf
          bth:f64[400,9] = div btf btg
          bti:f64[400,189] = concatenate[dimension=1] btd bth
          btj:f64[400,1,1,1,189] = reshape[
            dimensions=None
            new_sizes=(400, 1, 1, 1, 189)
          ] bti
          btk:f64[400,1,1,189] = squeeze[dimensions=(1,)] btj
          btl:f64[400,7,1,1,189] = broadcast_in_dim[
            broadcast_dimensions=(0, 2, 3, 4)
            shape=(400, 7, 1, 1, 189)
          ] btk
          btm:f64[400,7,189] = reshape[dimensions=None new_sizes=(400, 7, 189)] btl
          btn:f64[1,36] = broadcast_in_dim[
            broadcast_dimensions=()
            shape=(1, 36)
          ] 1.0
          bto:f64[1,36] = mul 0.5 btn
          btp:f64[1,36] = broadcast_in_dim[
            broadcast_dimensions=()
            shape=(1, 36)
          ] 1.0
          btq:f64[1,36] = mul -10.0 btp
          btr:f64[7,400,400] = dot_general[
            dimension_numbers=(([2], [1]), ([1], [0]))
            preferred_element_type=float64
          ] btm bkg
          bts:f64[400,7,400] = transpose[permutation=(1, 0, 2)] btr
          btt:f64[1,7,400] = broadcast_in_dim[
            broadcast_dimensions=(1, 2)
            shape=(1, 7, 400)
          ] bkh
          btu:f64[400,7,400] = add bts btt
          btv:f64[400,7,400] = pjit[name=silu jaxpr=silu1] btu
          btw:f64[7,400,400] = dot_general[
            dimension_numbers=(([2], [1]), ([1], [0]))
            preferred_element_type=float64
          ] btv bki
          btx:f64[400,7,400] = transpose[permutation=(1, 0, 2)] btw
          bty:f64[1,7,400] = broadcast_in_dim[
            broadcast_dimensions=(1, 2)
            shape=(1, 7, 400)
          ] bkj
          btz:f64[400,7,400] = add btx bty
          bua:f64[400,7,400] = pjit[name=silu jaxpr=silu1] btz
          bub:f64[7,400,400] = dot_general[
            dimension_numbers=(([2], [1]), ([1], [0]))
            preferred_element_type=float64
          ] bua bkk
          buc:f64[400,7,400] = transpose[permutation=(1, 0, 2)] bub
          bud:f64[1,7,400] = broadcast_in_dim[
            broadcast_dimensions=(1, 2)
            shape=(1, 7, 400)
          ] bkl
          bue:f64[400,7,400] = add buc bud
          buf:f64[400,7,400] = pjit[name=silu jaxpr=silu1] bue
          bug:f64[7,400,400] = dot_general[
            dimension_numbers=(([2], [1]), ([1], [0]))
            preferred_element_type=float64
          ] buf bkm
          buh:f64[400,7,400] = transpose[permutation=(1, 0, 2)] bug
          bui:f64[1,7,400] = broadcast_in_dim[
            broadcast_dimensions=(1, 2)
            shape=(1, 7, 400)
          ] bkn
          buj:f64[400,7,400] = add buh bui
          buk:f64[400,7,400] = pjit[name=silu jaxpr=silu1] buj
          bul:f64[7,400,54] = dot_general[
            dimension_numbers=(([2], [1]), ([1], [0]))
            preferred_element_type=float64
          ] buk bko
          bum:f64[400,7,54] = transpose[permutation=(1, 0, 2)] bul
          bun:f64[1,7,54] = broadcast_in_dim[
            broadcast_dimensions=(1, 2)
            shape=(1, 7, 54)
          ] bkp
          buo:f64[400,7,54] = add bum bun
          bup:f64[400,7,18] = slice[
            limit_indices=(400, 7, 18)
            start_indices=(0, 0, 0)
            strides=None
          ] buo
          buq:f64[400,7,36] = slice[
            limit_indices=(400, 7, 54)
            start_indices=(0, 0, 18)
            strides=None
          ] buo
          bur:f64[1,1,36] = broadcast_in_dim[
            broadcast_dimensions=(1, 2)
            shape=(1, 1, 36)
          ] bto
          bus:f64[400,7,36] = sub bur buq
          but:f64[400,7,36] = pjit[name=softplus jaxpr=softplus] bus
          buu:f64[1,1,36] = broadcast_in_dim[
            broadcast_dimensions=(1, 2)
            shape=(1, 1, 36)
          ] bto
          buv:f64[400,7,36] = sub buu but
          buw:f64[1,1,36] = broadcast_in_dim[
            broadcast_dimensions=(1, 2)
            shape=(1, 1, 36)
          ] btq
          bux:f64[400,7,36] = sub buv buw
          buy:f64[400,7,36] = pjit[name=softplus jaxpr=softplus] bux
          buz:f64[1,1,36] = broadcast_in_dim[
            broadcast_dimensions=(1, 2)
            shape=(1, 1, 36)
          ] btq
          bva:f64[400,7,36] = add buz buy
          bvb:key<fry>[400] = random_wrap[impl=fry] bsy
          bvc:key<fry>[400,2] = random_split[shape=(2,)] bvb
          bvd:u32[400,2,2] = random_unwrap bvc
          bve:u32[400,1,2] = slice[
            limit_indices=(400, 1, 2)
            start_indices=(0, 0, 0)
            strides=(1, 1, 1)
          ] bvd
          bvf:u32[400,2] = squeeze[dimensions=(1,)] bve
          bvg:u32[400,1,2] = slice[
            limit_indices=(400, 2, 2)
            start_indices=(0, 1, 0)
            strides=(1, 1, 1)
          ] bvd
          bvh:u32[400,2] = squeeze[dimensions=(1,)] bvg
          bvi:key<fry>[400] = random_wrap[impl=fry] bvh
          bvj:i64[400] = pjit[
            name=_randint
            jaxpr={ lambda ; bvk:key<fry>[400] bvl:i64[] bvm:i64[]. let
                bvn:i64[] = pjit[
                  name=clip
                  jaxpr={ lambda ; e:i64[] f:i64[] g:i64[]. let
                      h:i64[] = max f e
                      i:i64[] = min g h
                    in (i,) }
                ] 9223372036854775807 -9223372036854775808 9223372036854775807
                bvo:bool[] = gt bvm bvn
                bvp:i64[] = pjit[name=clip jaxpr=clip4] bvl -9223372036854775808
                  9223372036854775807
                bvq:i64[] = convert_element_type[
                  new_dtype=int64
                  weak_type=False
                ] bvp
                bvr:i64[] = pjit[name=clip jaxpr=clip4] bvm -9223372036854775808
                  9223372036854775807
                bvs:i64[] = convert_element_type[
                  new_dtype=int64
                  weak_type=False
                ] bvr
                bvt:key<fry>[400,2] = random_split[shape=(2,)] bvk
                bvu:key<fry>[400,1] = slice[
                  limit_indices=(400, 1)
                  start_indices=(0, 0)
                  strides=(1, 1)
                ] bvt
                bvv:key<fry>[400] = squeeze[dimensions=(1,)] bvu
                bvw:key<fry>[400,1] = slice[
                  limit_indices=(400, 2)
                  start_indices=(0, 1)
                  strides=(1, 1)
                ] bvt
                bvx:key<fry>[400] = squeeze[dimensions=(1,)] bvw
                bvy:u64[400] = random_bits[bit_width=64 shape=()] bvv
                bvz:u64[400] = random_bits[bit_width=64 shape=()] bvx
                bwa:i64[] = sub bvs bvq
                bwb:u64[] = convert_element_type[
                  new_dtype=uint64
                  weak_type=False
                ] bwa
                bwc:bool[] = le bvs bvq
                bwd:u64[] = select_n bwc bwb 1
                bwe:bool[] = gt bvs bvq
                bwf:bool[] = and bvo bwe
                bwg:u64[] = add bwd 1
                bwh:u64[] = select_n bwf bwd bwg
                bwi:u64[] = rem 4294967296 bwh
                bwj:u64[] = mul bwi bwi
                bwk:u64[] = rem bwj bwh
                bwl:u64[400] = rem bvy bwh
                bwm:u64[400] = mul bwl bwk
                bwn:u64[400] = rem bvz bwh
                bwo:u64[400] = add bwm bwn
                bwp:u64[400] = rem bwo bwh
                bwq:i64[400] = convert_element_type[
                  new_dtype=int64
                  weak_type=False
                ] bwp
                bwr:i64[400] = add bvq bwq
              in (bwr,) }
          ] bvi 0 5
          bws:i64[400] = pjit[
            name=_take
            jaxpr={ lambda ; bwt:i64[5] bwu:i64[400]. let
                bwv:bool[400] = lt bwu 0
                bww:i64[400] = add bwu 5
                bwx:i64[400] = pjit[
                  name=_where
                  jaxpr={ lambda ; bwy:bool[400] bwz:i64[400] bxa:i64[400]. let
                      bxb:i64[400] = select_n bwy bxa bwz
                    in (bxb,) }
                ] bwv bww bwu
                bxc:i64[400,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(400, 1)
                ] bwx
                bxd:i64[400] = gather[
                  dimension_numbers=GatherDimensionNumbers(offset_dims=(), collapsed_slice_dims=(0,), start_index_map=(0,))
                  fill_value=-9223372036854775808
                  indices_are_sorted=False
                  mode=GatherScatterMode.FILL_OR_DROP
                  slice_sizes=(1,)
                  unique_indices=False
                ] bwt bxc
              in (bxd,) }
          ] bkq bvj
          bxe:bool[400] = lt bws 0
          bxf:i64[400] = add bws 7
          bxg:i64[400] = select_n bxe bws bxf
          bxh:bool[] = lt 0 0
          bxi:i64[] = add 0 18
          bxj:i64[] = select_n bxh 0 bxi
          bxk:i64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] bxg
          bxl:i64[400,1] = broadcast_in_dim[
            broadcast_dimensions=()
            shape=(400, 1)
          ] bxj
          bxm:i64[400,2] = concatenate[dimension=1] bxk bxl
          bxn:i64[400,1] = iota[dimension=0 dtype=int64 shape=(400, 1)] 
          bxo:i64[400,3] = concatenate[dimension=1] bxn bxm
          bxp:f64[400,1,18] = gather[
            dimension_numbers=GatherDimensionNumbers(offset_dims=(1, 2), collapsed_slice_dims=(0,), start_index_map=(0, 1, 2))
            fill_value=None
            indices_are_sorted=True
            mode=GatherScatterMode.PROMISE_IN_BOUNDS
            slice_sizes=(1, 1, 18)
            unique_indices=True
          ] bup bxo
          bxq:f64[400,18] = squeeze[dimensions=(1,)] bxp
          bxr:bool[400] = lt bws 0
          bxs:i64[400] = add bws 7
          bxt:i64[400] = select_n bxr bws bxs
          bxu:bool[] = lt 0 0
          bxv:i64[] = add 0 36
          bxw:i64[] = select_n bxu 0 bxv
          bxx:i64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] bxt
          bxy:i64[400,1] = broadcast_in_dim[
            broadcast_dimensions=()
            shape=(400, 1)
          ] bxw
          bxz:i64[400,2] = concatenate[dimension=1] bxx bxy
          bya:i64[400,1] = iota[dimension=0 dtype=int64 shape=(400, 1)] 
          byb:i64[400,3] = concatenate[dimension=1] bya bxz
          byc:f64[400,1,36] = gather[
            dimension_numbers=GatherDimensionNumbers(offset_dims=(1, 2), collapsed_slice_dims=(0,), start_index_map=(0, 1, 2))
            fill_value=None
            indices_are_sorted=True
            mode=GatherScatterMode.PROMISE_IN_BOUNDS
            slice_sizes=(1, 1, 36)
            unique_indices=True
          ] bva byb
          byd:f64[400,36] = squeeze[dimensions=(1,)] byc
          bye:f64[400,36] = exp byd
          byf:f64[400,36] = sqrt bye
          byg:f64[400,36] = scan[
            _split_transpose=False
            jaxpr={ lambda ; byh:f64[36,2] byi:f64[9,2] byj:f64[400,9] byk:f64[19]
                byl:i64[4] bym:f64[18,3] byn:f64[18,3] byo:f64[13,3] byp:f64[13,4]
                byq:f64[13,4] byr:f64[13,3] bys:i64[4] byt:i64[4] byu:i64[4] byv:i64[4]
                byw:i64[4] byx:i64[4] byy:i64[4] byz:i64[4] bza:i64[13] bzb:i64[13]
                bzc:f64[13,3] bzd:f64[13,4] bze:i32[13] bzf:f64[13] bzg:f64[13,3,3]
                bzh:i32[13] bzi:f64[4] bzj:f64[4] bzk:i64[18] bzl:f64[4] bzm:i64[18]
                bzn:i64[4] bzo:i64[18] bzp:i64[4] bzq:i64[4] bzr:i64[4] bzs:i64[4]
                bzt:i64[4] bzu:i64[4] bzv:i64[4] bzw:i64[4] bzx:i64[4] bzy:i64[4]
                bzz:i64[4] caa:i64[13] cab:i64[13] cac:i64[4] cad:i64[4] cae:i64[4]
                caf:i64[4] cag:i64[4] cah:i64[4] cai:i64[4] caj:i64[4] cak:i64[4]
                cal:i64[4] cam:i64[4] can:i64[4] cao:i64[13] cap:i64[13] caq:i64[13]
                car:i64[18] cas:i64[132] cat:i64[132] cau:f64[18] cav:f64[18] caw:f64[18]
                cax:i64[18] cay:f64[3] caz:i64[4] cba:i64[4] cbb:i64[4] cbc:i64[4]
                cbd:i64[4] cbe:i64[4] cbf:i64[4] cbg:i64[4] cbh:i64[4] cbi:i64[4]
                cbj:i64[4] cbk:i64[4] cbl:i64[4] cbm:i64[4] cbn:i64[13] cbo:i64[13]
                cbp:i64[4] cbq:i64[4] cbr:i64[4] cbs:i64[4] cbt:i64[4] cbu:i64[4]
                cbv:i64[4] cbw:i64[4] cbx:i64[4] cby:i64[13] cbz:i64[13] cca:i64[18]
                ccb:i64[4] ccc:f64[4] ccd:f64[] cce:f64[3] ccf:f64[3] ccg:f64[3]
                cch:f64[] cci:f64[8] ccj:f64[3] cck:f64[3] ccl:f64[3] ccm:i64[3]
                ccn:f64[3] cco:f64[12] ccp:i32[12] ccq:i32[12] ccr:f64[12,2] ccs:f64[12]
                cct:f64[12] ccu:f64[12] ccv:f64[12] ccw:f64[12,2] ccx:f64[400,18]
                ccy:i64[4] ccz:f64[400,36]. let
                cda:f64[400,36] = add ccz 1.0
                cdb:f64[36,1] = slice[
                  limit_indices=(36, 2)
                  start_indices=(0, 1)
                  strides=None
                ] byh
                cdc:f64[36] = squeeze[dimensions=(1,)] cdb
                cdd:f64[36,1] = slice[
                  limit_indices=(36, 1)
                  start_indices=(0, 0)
                  strides=None
                ] byh
                cde:f64[36] = squeeze[dimensions=(1,)] cdd
                cdf:f64[36] = sub cdc cde
                cdg:f64[1,36] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 36)
                ] cdf
                cdh:f64[400,36] = mul cda cdg
                cdi:f64[400,36] = div cdh 2.0
                cdj:f64[36,1] = slice[
                  limit_indices=(36, 1)
                  start_indices=(0, 0)
                  strides=None
                ] byh
                cdk:f64[36] = squeeze[dimensions=(1,)] cdj
                cdl:f64[1,36] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 36)
                ] cdk
                cdm:f64[400,36] = add cdi cdl
                cdn:f64[400,1] = slice[
                  limit_indices=(400, 36)
                  start_indices=(0, 35)
                  strides=None
                ] cdm
                cdo:f64[400] = squeeze[dimensions=(1,)] cdn
                cdp:f64[400,1] = slice[
                  limit_indices=(400, 35)
                  start_indices=(0, 34)
                  strides=None
                ] cdm
                cdq:f64[400] = squeeze[dimensions=(1,)] cdp
                cdr:f64[400] = atan2 cdo cdq
                cds:f64[400] = add cdr 0.12566370614359174
                cdt:f64[400] = cos cds
                cdu:i32[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] 34
                cdv:f64[400,36] = scatter[
                  dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0,), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                  indices_are_sorted=True
                  mode=GatherScatterMode.FILL_OR_DROP
                  unique_indices=True
                  update_consts=()
                  update_jaxpr=None
                ] cdm cdu cdt
                cdw:f64[400] = sin cds
                cdx:i32[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] 35
                cdy:f64[400,36] = scatter[
                  dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0,), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                  indices_are_sorted=True
                  mode=GatherScatterMode.FILL_OR_DROP
                  unique_indices=True
                  update_consts=()
                  update_jaxpr=None
                ] cdv cdx cdw
                cdz:f64[36,1] = slice[
                  limit_indices=(36, 1)
                  start_indices=(0, 0)
                  strides=None
                ] byh
                cea:f64[36] = squeeze[dimensions=(1,)] cdz
                ceb:f64[1,36] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 36)
                ] cea
                cec:f64[400,36] = sub cdy ceb
                ced:f64[400,36] = mul 2.0 cec
                cee:f64[36,1] = slice[
                  limit_indices=(36, 2)
                  start_indices=(0, 1)
                  strides=None
                ] byh
                cef:f64[36] = squeeze[dimensions=(1,)] cee
                ceg:f64[36,1] = slice[
                  limit_indices=(36, 1)
                  start_indices=(0, 0)
                  strides=None
                ] byh
                ceh:f64[36] = squeeze[dimensions=(1,)] ceg
                cei:f64[36] = sub cef ceh
                cej:f64[1,36] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 36)
                ] cei
                cek:f64[400,36] = div ced cej
                cel:f64[400,36] = sub cek 1.0
                cem:f64[9,1] = slice[
                  limit_indices=(9, 2)
                  start_indices=(0, 1)
                  strides=None
                ] byi
                cen:f64[9] = squeeze[dimensions=(1,)] cem
                ceo:f64[9,1] = slice[
                  limit_indices=(9, 1)
                  start_indices=(0, 0)
                  strides=None
                ] byi
                cep:f64[9] = squeeze[dimensions=(1,)] ceo
                ceq:f64[9] = sub cen cep
                cer:f64[1,9] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 9)
                ] ceq
                ces:f64[400,9] = mul cer byj
                cet:f64[400,9] = div ces 2.0
                ceu:f64[9,1] = slice[
                  limit_indices=(9, 2)
                  start_indices=(0, 1)
                  strides=None
                ] byi
                cev:f64[9] = squeeze[dimensions=(1,)] ceu
                cew:f64[9,1] = slice[
                  limit_indices=(9, 1)
                  start_indices=(0, 0)
                  strides=None
                ] byi
                cex:f64[9] = squeeze[dimensions=(1,)] cew
                cey:f64[9] = add cev cex
                cez:f64[9] = div cey 2.0
                cfa:f64[1,9] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 9)
                ] cez
                cfb:f64[400,9] = add cet cfa
                cfc:f64[400,36] = add ccz 1.0
                cfd:f64[36,1] = slice[
                  limit_indices=(36, 2)
                  start_indices=(0, 1)
                  strides=None
                ] byh
                cfe:f64[36] = squeeze[dimensions=(1,)] cfd
                cff:f64[36,1] = slice[
                  limit_indices=(36, 1)
                  start_indices=(0, 0)
                  strides=None
                ] byh
                cfg:f64[36] = squeeze[dimensions=(1,)] cff
                cfh:f64[36] = sub cfe cfg
                cfi:f64[1,36] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 36)
                ] cfh
                cfj:f64[400,36] = mul cfc cfi
                cfk:f64[400,36] = div cfj 2.0
                cfl:f64[36,1] = slice[
                  limit_indices=(36, 1)
                  start_indices=(0, 0)
                  strides=None
                ] byh
                cfm:f64[36] = squeeze[dimensions=(1,)] cfl
                cfn:f64[1,36] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 36)
                ] cfm
                cfo:f64[400,36] = add cfk cfn
                cfp:f64[400,36] = add cel 1.0
                cfq:f64[36,1] = slice[
                  limit_indices=(36, 2)
                  start_indices=(0, 1)
                  strides=None
                ] byh
                cfr:f64[36] = squeeze[dimensions=(1,)] cfq
                cfs:f64[36,1] = slice[
                  limit_indices=(36, 1)
                  start_indices=(0, 0)
                  strides=None
                ] byh
                cft:f64[36] = squeeze[dimensions=(1,)] cfs
                cfu:f64[36] = sub cfr cft
                cfv:f64[1,36] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 36)
                ] cfu
                cfw:f64[400,36] = mul cfp cfv
                cfx:f64[400,36] = div cfw 2.0
                cfy:f64[36,1] = slice[
                  limit_indices=(36, 1)
                  start_indices=(0, 0)
                  strides=None
                ] byh
                cfz:f64[36] = squeeze[dimensions=(1,)] cfy
                cga:f64[1,36] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 36)
                ] cfz
                cgb:f64[400,36] = add cfx cga
                cgc:f64[400,4] = slice[
                  limit_indices=(400, 4)
                  start_indices=(0, 0)
                  strides=None
                ] cfo
                cgd:i32[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] 3
                cge:f64[400,19] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(400, 19)
                ] byk
                cgf:f64[400,19] = scatter[
                  dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1), inserted_window_dims=(), scatter_dims_to_operand_dims=(1,))
                  indices_are_sorted=True
                  mode=GatherScatterMode.FILL_OR_DROP
                  unique_indices=True
                  update_consts=()
                  update_jaxpr=None
                ] cge cgd cgc
                cgg:f64[400,12] = slice[
                  limit_indices=(400, 16)
                  start_indices=(0, 4)
                  strides=None
                ] cfo
                cgh:i32[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] 7
                cgi:f64[400,19] = scatter[
                  dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1), inserted_window_dims=(), scatter_dims_to_operand_dims=(1,))
                  indices_are_sorted=True
                  mode=GatherScatterMode.FILL_OR_DROP
                  unique_indices=True
                  update_consts=()
                  update_jaxpr=None
                ] cgf cgh cgg
                cgj:f64[400,4] = slice[
                  limit_indices=(400, 4)
                  start_indices=(0, 0)
                  strides=None
                ] cfo
                cgk:f64[400,3] = slice[
                  limit_indices=(400, 19)
                  start_indices=(0, 16)
                  strides=None
                ] cfo
                cgl:f64[400,1] = slice[
                  limit_indices=(400, 1)
                  start_indices=(0, 0)
                  strides=None
                ] cgj
                cgm:f64[400] = squeeze[dimensions=(1,)] cgl
                cgn:f64[400,3] = slice[
                  limit_indices=(400, 4)
                  start_indices=(0, 1)
                  strides=None
                ] cgj
                cgo:f64[400] = dot_general[
                  dimension_numbers=(([1], [1]), ([0], [0]))
                  preferred_element_type=float64
                ] cgn cgk
                cgp:f64[400,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(400, 1)
                ] cgo
                cgq:f64[400,3] = mul cgp cgn
                cgr:f64[400,3] = mul 2.0 cgq
                cgs:f64[400] = mul cgm cgm
                cgt:f64[400] = dot_general[
                  dimension_numbers=(([1], [1]), ([0], [0]))
                  preferred_element_type=float64
                ] cgn cgn
                cgu:f64[400] = sub cgs cgt
                cgv:f64[400,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(400, 1)
                ] cgu
                cgw:f64[400,3] = mul cgv cgk
                cgx:f64[400,3] = add cgr cgw
                cgy:f64[400] = mul 2.0 cgm
                cgz:f64[400,3] = pjit[name=cross jaxpr=cross] cgn cgk
                cha:f64[400,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(400, 1)
                ] cgy
                chb:f64[400,3] = mul cha cgz
                chc:f64[400,3] = add cgx chb
                chd:f64[400,3] = slice[
                  limit_indices=(400, 22)
                  start_indices=(0, 19)
                  strides=None
                ] cfo
                che:f64[4] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] byl
                chf:f64[1,4] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 4)
                ] che
                chg:f64[400,4] = mul cgj chf
                chh:f64[400,1] = slice[
                  limit_indices=(400, 1)
                  start_indices=(0, 0)
                  strides=None
                ] chg
                chi:f64[400] = squeeze[dimensions=(1,)] chh
                chj:f64[400,3] = slice[
                  limit_indices=(400, 4)
                  start_indices=(0, 1)
                  strides=None
                ] chg
                chk:f64[400] = dot_general[
                  dimension_numbers=(([1], [1]), ([0], [0]))
                  preferred_element_type=float64
                ] chj chd
                chl:f64[400,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(400, 1)
                ] chk
                chm:f64[400,3] = mul chl chj
                chn:f64[400,3] = mul 2.0 chm
                cho:f64[400] = mul chi chi
                chp:f64[400] = dot_general[
                  dimension_numbers=(([1], [1]), ([0], [0]))
                  preferred_element_type=float64
                ] chj chj
                chq:f64[400] = sub cho chp
                chr:f64[400,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(400, 1)
                ] chq
                chs:f64[400,3] = mul chr chd
                cht:f64[400,3] = add chn chs
                chu:f64[400] = mul 2.0 chi
                chv:f64[400,3] = pjit[name=cross jaxpr=cross] chj chd
                chw:f64[400,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(400, 1)
                ] chu
                chx:f64[400,3] = mul chw chv
                chy:f64[400,3] = add cht chx
                chz:f64[18] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(18,)
                ] 0.0
                cia:i32[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] 0
                cib:f64[400,18] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(400, 18)
                ] chz
                cic:f64[400,18] = scatter[
                  dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1), inserted_window_dims=(), scatter_dims_to_operand_dims=(1,))
                  indices_are_sorted=True
                  mode=GatherScatterMode.FILL_OR_DROP
                  unique_indices=True
                  update_consts=()
                  update_jaxpr=None
                ] cib cia chc
                cid:i32[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] 3
                cie:f64[400,18] = scatter[
                  dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1), inserted_window_dims=(), scatter_dims_to_operand_dims=(1,))
                  indices_are_sorted=True
                  mode=GatherScatterMode.FILL_OR_DROP
                  unique_indices=True
                  update_consts=()
                  update_jaxpr=None
                ] cic cid chy
                cif:f64[400,12] = slice[
                  limit_indices=(400, 34)
                  start_indices=(0, 22)
                  strides=None
                ] cfo
                cig:i32[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] 6
                cih:f64[400,18] = scatter[
                  dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1), inserted_window_dims=(), scatter_dims_to_operand_dims=(1,))
                  indices_are_sorted=True
                  mode=GatherScatterMode.FILL_OR_DROP
                  unique_indices=True
                  update_consts=()
                  update_jaxpr=None
                ] cie cig cif
                cii:f64[400,7] = slice[
                  limit_indices=(400, 7)
                  start_indices=(0, 0)
                  strides=None
                ] cgi
                cij:f64[400,1,7] = reshape[
                  dimensions=None
                  new_sizes=(400, 1, 7)
                ] cii
                cik:f64[400,1,3] = slice[
                  limit_indices=(400, 1, 3)
                  start_indices=(0, 0, 0)
                  strides=None
                ] cij
                cil:f64[400,1,4] = slice[
                  limit_indices=(400, 1, 7)
                  start_indices=(0, 0, 3)
                  strides=None
                ] cij
                cim:f64[400,12] = slice[
                  limit_indices=(400, 19)
                  start_indices=(0, 7)
                  strides=None
                ] cgi
                cin:f64[12,3] = slice[
                  limit_indices=(18, 3)
                  start_indices=(6, 0)
                  strides=None
                ] bym
                cio:f64[12,3] = slice[
                  limit_indices=(18, 3)
                  start_indices=(6, 0)
                  strides=None
                ] byn
                cip:f64[12,1] = slice[
                  limit_indices=(12, 1)
                  start_indices=(0, 0)
                  strides=None
                ] cin
                ciq:f64[12] = squeeze[dimensions=(1,)] cip
                cir:f64[400,12] = div cim 2.0
                cis:f64[400,12] = sin cir
                cit:f64[1,12] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 12)
                ] ciq
                ciu:f64[400,12] = mul cit cis
                civ:f64[12,1] = slice[
                  limit_indices=(12, 2)
                  start_indices=(0, 1)
                  strides=None
                ] cin
                ciw:f64[12] = squeeze[dimensions=(1,)] civ
                cix:f64[400,12] = div cim 2.0
                ciy:f64[400,12] = sin cix
                ciz:f64[1,12] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 12)
                ] ciw
                cja:f64[400,12] = mul ciz ciy
                cjb:f64[12,1] = slice[
                  limit_indices=(12, 3)
                  start_indices=(0, 2)
                  strides=None
                ] cin
                cjc:f64[12] = squeeze[dimensions=(1,)] cjb
                cjd:f64[400,12] = div cim 2.0
                cje:f64[400,12] = sin cjd
                cjf:f64[1,12] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 12)
                ] cjc
                cjg:f64[400,12] = mul cjf cje
                cjh:f64[400,12] = div cim 2.0
                cji:f64[400,12] = cos cjh
                cjj:f64[400,12,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 12, 1)
                ] cji
                cjk:f64[400,12,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 12, 1)
                ] ciu
                cjl:f64[400,12,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 12, 1)
                ] cja
                cjm:f64[400,12,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 12, 1)
                ] cjg
                cjn:f64[400,12,4] = concatenate[dimension=2] cjj cjk cjl cjm
                cjo:bool[400,12] = pjit[
                  name=allclose
                  jaxpr={ lambda ; cjp:f64[400,12,4] cjq:f64[]. let
                      cjr:bool[400,12,4] = pjit[
                        name=isclose
                        jaxpr={ lambda ; cjs:f64[400,12,4] cjt:f64[] cju:f64[] cjv:f64[]. let
                            cjw:f64[] = convert_element_type[
                              new_dtype=float64
                              weak_type=False
                            ] cjt
                            cjx:f64[] = convert_element_type[
                              new_dtype=float64
                              weak_type=False
                            ] cju
                            cjy:f64[] = convert_element_type[
                              new_dtype=float64
                              weak_type=False
                            ] cjv
                            cjz:f64[400,12,4] = sub cjs cjw
                            cka:f64[400,12,4] = abs cjz
                            ckb:f64[] = abs cjw
                            ckc:f64[] = mul cjx ckb
                            ckd:f64[] = add cjy ckc
                            cke:bool[400,12,4] = le cka ckd
                            ckf:bool[400,12,4] = pjit[
                              name=isinf
                              jaxpr={ lambda ; ckg:f64[400,12,4]. let
                                  ckh:f64[400,12,4] = abs ckg
                                  cki:bool[400,12,4] = eq ckh inf
                                in (cki,) }
                            ] cjs
                            ckj:bool[] = pjit[name=isinf jaxpr=isinf] cjw
                            ckk:bool[400,12,4] = or ckf ckj
                            ckl:bool[400,12,4] = and ckf ckj
                            ckm:bool[400,12,4] = not ckk
                            ckn:bool[400,12,4] = and cke ckm
                            cko:bool[400,12,4] = eq cjs cjw
                            ckp:bool[400,12,4] = and ckl cko
                            ckq:bool[400,12,4] = or ckn ckp
                            ckr:bool[400,12,4] = ne cjs cjs
                            cks:bool[] = ne cjw cjw
                            ckt:bool[400,12,4] = or ckr cks
                            cku:bool[400,12,4] = not ckt
                            ckv:bool[400,12,4] = and ckq cku
                          in (ckv,) }
                      ] cjp cjq 1e-05 1e-08
                      ckw:bool[400,12] = reduce_and[axes=(2,)] cjr
                    in (ckw,) }
                ] cjn 0.0
                ckx:f64[4] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(4,)
                ] 1.0
                cky:f64[400,12,4] = pjit[
                  name=_where
                  jaxpr={ lambda ; ckz:bool[400,12] cla:f64[4] clb:f64[400,12,4]. let
                      clc:bool[400,12,4] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(400, 12, 4)
                      ] ckz
                      cld:f64[12,4] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(12, 4)
                      ] cla
                      cle:f64[400,12,4] = broadcast_in_dim[
                        broadcast_dimensions=(1, 2)
                        shape=(400, 12, 4)
                      ] cld
                      clf:f64[400,12,4] = select_n clc clb cle
                    in (clf,) }
                ] cjo ckx cjn
                clg:f64[400,12] = pjit[
                  name=norm
                  jaxpr={ lambda ; clh:f64[400,12,4]. let
                      cli:f64[400,12,4] = mul clh clh
                      clj:f64[400,12] = reduce_sum[axes=(2,)] cli
                      clk:f64[400,12] = sqrt clj
                    in (clk,) }
                ] cky
                cll:f64[400,12] = pjit[
                  name=_where
                  jaxpr={ lambda ; clm:bool[400,12] cln:f64[] clo:f64[400,12]. let
                      clp:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] cln
                      clq:f64[12] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(12,)
                      ] clp
                      clr:f64[400,12] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(400, 12)
                      ] clq
                      cls:f64[400,12] = select_n clm clo clr
                    in (cls,) }
                ] cjo 0.0 clg
                clt:bool[400,12] = eq cll 0.0
                clu:f64[400,12] = convert_element_type[
                  new_dtype=float64
                  weak_type=True
                ] clt
                clv:f64[400,12] = mul 1e-06 clu
                clw:f64[400,12] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] clv
                clx:f64[400,12] = add cll clw
                cly:f64[400,12,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 12, 1)
                ] clx
                clz:f64[400,12,4] = div cjn cly
                cma:f64[400,12,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 12, 1)
                ] cim
                cmb:f64[1,12,3] = broadcast_in_dim[
                  broadcast_dimensions=(1, 2)
                  shape=(1, 12, 3)
                ] cio
                cmc:f64[400,12,3] = mul cmb cma
                cmd:f64[400,12,1,3] = reshape[
                  dimensions=None
                  new_sizes=(400, 12, 1, 3)
                ] cmc
                cme:f64[400,12,1,4] = reshape[
                  dimensions=None
                  new_sizes=(400, 12, 1, 4)
                ] clz
                cmf:f64[400,12,3] = pjit[
                  name=_take
                  jaxpr={ lambda ; cmg:f64[400,12,1,3] cmh:i64[]. let
                      cmi:i64[] = pjit[name=remainder jaxpr=remainder2] cmh 1
                      cmj:i64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] cmi
                      cmk:f64[400,12,3] = gather[
                        dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(2,), start_index_map=(2,))
                        fill_value=None
                        indices_are_sorted=False
                        mode=GatherScatterMode.PROMISE_IN_BOUNDS
                        slice_sizes=(400, 12, 1, 3)
                        unique_indices=False
                      ] cmg cmj
                    in (cmk,) }
                ] cmd 0
                cml:f64[400,12,4] = pjit[
                  name=_take
                  jaxpr={ lambda ; cmm:f64[400,12,1,4] cmn:i64[]. let
                      cmo:i64[] = pjit[name=remainder jaxpr=remainder2] cmn 1
                      cmp:i64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] cmo
                      cmq:f64[400,12,4] = gather[
                        dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(2,), start_index_map=(2,))
                        fill_value=None
                        indices_are_sorted=False
                        mode=GatherScatterMode.PROMISE_IN_BOUNDS
                        slice_sizes=(400, 12, 1, 4)
                        unique_indices=False
                      ] cmm cmp
                    in (cmq,) }
                ] cme 0
                cmr:f64[400,13,3] = concatenate[dimension=1] cik cmf
                cms:f64[400,13,4] = concatenate[dimension=1] cil cml
                cmt:f64[13,3] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(13, 3)
                ] 0.0
                cmu:f64[400,13,1] = slice[
                  limit_indices=(400, 13, 1)
                  start_indices=(0, 0, 0)
                  strides=None
                ] cms
                cmv:f64[400,13] = squeeze[dimensions=(2,)] cmu
                cmw:f64[400,13,3] = slice[
                  limit_indices=(400, 13, 4)
                  start_indices=(0, 0, 1)
                  strides=None
                ] cms
                cmx:f64[13,400] = dot_general[
                  dimension_numbers=(([2], [1]), ([1], [0]))
                  preferred_element_type=float64
                ] cmw byo
                cmy:f64[400,13] = transpose[permutation=(1, 0)] cmx
                cmz:f64[400,13,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 13, 1)
                ] cmy
                cna:f64[400,13,3] = mul cmz cmw
                cnb:f64[400,13,3] = mul 2.0 cna
                cnc:f64[400,13] = mul cmv cmv
                cnd:f64[400,13] = dot_general[
                  dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
                  preferred_element_type=float64
                ] cmw cmw
                cne:f64[400,13] = sub cnc cnd
                cnf:f64[400,13,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 13, 1)
                ] cne
                cng:f64[1,13,3] = broadcast_in_dim[
                  broadcast_dimensions=(1, 2)
                  shape=(1, 13, 3)
                ] byo
                cnh:f64[400,13,3] = mul cnf cng
                cni:f64[400,13,3] = add cnb cnh
                cnj:f64[400,13] = mul 2.0 cmv
                cnk:f64[400,13,3] = pjit[name=cross jaxpr=cross1] cmw byo
                cnl:f64[400,13,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 13, 1)
                ] cnj
                cnm:f64[400,13,3] = mul cnl cnk
                cnn:f64[400,13,3] = add cni cnm
                cno:f64[1,13,3] = broadcast_in_dim[
                  broadcast_dimensions=(1, 2)
                  shape=(1, 13, 3)
                ] cmt
                cnp:f64[400,13,3] = add cno cnn
                cnq:f64[1,13,3] = broadcast_in_dim[
                  broadcast_dimensions=(1, 2)
                  shape=(1, 13, 3)
                ] byo
                cnr:f64[400,13,3] = add cmr cnq
                cns:f64[400,13,3] = sub cnr cnp
                cnt:f64[13,1] = slice[
                  limit_indices=(13, 1)
                  start_indices=(0, 0)
                  strides=None
                ] byq
                cnu:f64[13] = squeeze[dimensions=(1,)] cnt
                cnv:f64[13,3] = slice[
                  limit_indices=(13, 4)
                  start_indices=(0, 1)
                  strides=None
                ] byq
                cnw:f64[13,400] = dot_general[
                  dimension_numbers=(([1], [2]), ([0], [1]))
                  preferred_element_type=float64
                ] cnv cns
                cnx:f64[400,13] = transpose[permutation=(1, 0)] cnw
                cny:f64[400,13,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 13, 1)
                ] cnx
                cnz:f64[1,13,3] = broadcast_in_dim[
                  broadcast_dimensions=(1, 2)
                  shape=(1, 13, 3)
                ] cnv
                coa:f64[400,13,3] = mul cny cnz
                cob:f64[400,13,3] = mul 2.0 coa
                coc:f64[13] = mul cnu cnu
                cod:f64[13] = dot_general[
                  dimension_numbers=(([1], [1]), ([0], [0]))
                  preferred_element_type=float64
                ] cnv cnv
                coe:f64[13] = sub coc cod
                cof:f64[13,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(13, 1)
                ] coe
                cog:f64[1,13,1] = broadcast_in_dim[
                  broadcast_dimensions=(1, 2)
                  shape=(1, 13, 1)
                ] cof
                coh:f64[400,13,3] = mul cog cns
                coi:f64[400,13,3] = add cob coh
                coj:f64[13] = mul 2.0 cnu
                cok:f64[400,13,3] = pjit[
                  name=cross
                  jaxpr={ lambda ; col:f64[13,3] com:f64[400,13,3]. let
                      con:i32[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] 0
                      coo:f64[13] = gather[
                        dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
                        fill_value=None
                        indices_are_sorted=True
                        mode=GatherScatterMode.PROMISE_IN_BOUNDS
                        slice_sizes=(13, 1)
                        unique_indices=True
                      ] col con
                      cop:i32[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] 1
                      coq:f64[13] = gather[
                        dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
                        fill_value=None
                        indices_are_sorted=True
                        mode=GatherScatterMode.PROMISE_IN_BOUNDS
                        slice_sizes=(13, 1)
                        unique_indices=True
                      ] col cop
                      cor:i32[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] 2
                      cos:f64[13] = gather[
                        dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
                        fill_value=None
                        indices_are_sorted=True
                        mode=GatherScatterMode.PROMISE_IN_BOUNDS
                        slice_sizes=(13, 1)
                        unique_indices=True
                      ] col cor
                      cot:i32[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] 0
                      cou:f64[400,13] = gather[
                        dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
                        fill_value=None
                        indices_are_sorted=True
                        mode=GatherScatterMode.PROMISE_IN_BOUNDS
                        slice_sizes=(400, 13, 1)
                        unique_indices=True
                      ] com cot
                      cov:i32[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] 1
                      cow:f64[400,13] = gather[
                        dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
                        fill_value=None
                        indices_are_sorted=True
                        mode=GatherScatterMode.PROMISE_IN_BOUNDS
                        slice_sizes=(400, 13, 1)
                        unique_indices=True
                      ] com cov
                      cox:i32[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] 2
                      coy:f64[400,13] = gather[
                        dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
                        fill_value=None
                        indices_are_sorted=True
                        mode=GatherScatterMode.PROMISE_IN_BOUNDS
                        slice_sizes=(400, 13, 1)
                        unique_indices=True
                      ] com cox
                      coz:f64[1,13] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 13)
                      ] coq
                      cpa:f64[400,13] = mul coz coy
                      cpb:f64[1,13] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 13)
                      ] cos
                      cpc:f64[400,13] = mul cpb cow
                      cpd:f64[400,13] = sub cpa cpc
                      cpe:f64[1,13] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 13)
                      ] cos
                      cpf:f64[400,13] = mul cpe cou
                      cpg:f64[1,13] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 13)
                      ] coo
                      cph:f64[400,13] = mul cpg coy
                      cpi:f64[400,13] = sub cpf cph
                      cpj:f64[1,13] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 13)
                      ] coo
                      cpk:f64[400,13] = mul cpj cow
                      cpl:f64[1,13] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 13)
                      ] coq
                      cpm:f64[400,13] = mul cpl cou
                      cpn:f64[400,13] = sub cpk cpm
                      cpo:f64[400,13,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(400, 13, 1)
                      ] cpd
                      cpp:f64[400,13,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(400, 13, 1)
                      ] cpi
                      cpq:f64[400,13,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(400, 13, 1)
                      ] cpn
                      cpr:f64[400,13,3] = concatenate[dimension=2] cpo cpp cpq
                    in (cpr,) }
                ] cnv cns
                cps:f64[13,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(13, 1)
                ] coj
                cpt:f64[1,13,1] = broadcast_in_dim[
                  broadcast_dimensions=(1, 2)
                  shape=(1, 13, 1)
                ] cps
                cpu:f64[400,13,3] = mul cpt cok
                cpv:f64[400,13,3] = add coi cpu
                cpw:f64[1,13,3] = broadcast_in_dim[
                  broadcast_dimensions=(1, 2)
                  shape=(1, 13, 3)
                ] byr
                cpx:f64[400,13,3] = add cpw cpv
                cpy:f64[13,1] = slice[
                  limit_indices=(13, 1)
                  start_indices=(0, 0)
                  strides=None
                ] byq
                cpz:f64[13] = squeeze[dimensions=(1,)] cpy
                cqa:f64[400,13,1] = slice[
                  limit_indices=(400, 13, 1)
                  start_indices=(0, 0, 0)
                  strides=None
                ] cms
                cqb:f64[400,13] = squeeze[dimensions=(2,)] cqa
                cqc:f64[1,13] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 13)
                ] cpz
                cqd:f64[400,13] = mul cqc cqb
                cqe:f64[13,1] = slice[
                  limit_indices=(13, 2)
                  start_indices=(0, 1)
                  strides=None
                ] byq
                cqf:f64[13] = squeeze[dimensions=(1,)] cqe
                cqg:f64[400,13,1] = slice[
                  limit_indices=(400, 13, 2)
                  start_indices=(0, 0, 1)
                  strides=None
                ] cms
                cqh:f64[400,13] = squeeze[dimensions=(2,)] cqg
                cqi:f64[1,13] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 13)
                ] cqf
                cqj:f64[400,13] = mul cqi cqh
                cqk:f64[400,13] = sub cqd cqj
                cql:f64[13,1] = slice[
                  limit_indices=(13, 3)
                  start_indices=(0, 2)
                  strides=None
                ] byq
                cqm:f64[13] = squeeze[dimensions=(1,)] cql
                cqn:f64[400,13,1] = slice[
                  limit_indices=(400, 13, 3)
                  start_indices=(0, 0, 2)
                  strides=None
                ] cms
                cqo:f64[400,13] = squeeze[dimensions=(2,)] cqn
                cqp:f64[1,13] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 13)
                ] cqm
                cqq:f64[400,13] = mul cqp cqo
                cqr:f64[400,13] = sub cqk cqq
                cqs:f64[13,1] = slice[
                  limit_indices=(13, 4)
                  start_indices=(0, 3)
                  strides=None
                ] byq
                cqt:f64[13] = squeeze[dimensions=(1,)] cqs
                cqu:f64[400,13,1] = slice[
                  limit_indices=(400, 13, 4)
                  start_indices=(0, 0, 3)
                  strides=None
                ] cms
                cqv:f64[400,13] = squeeze[dimensions=(2,)] cqu
                cqw:f64[1,13] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 13)
                ] cqt
                cqx:f64[400,13] = mul cqw cqv
                cqy:f64[400,13] = sub cqr cqx
                cqz:f64[13,1] = slice[
                  limit_indices=(13, 1)
                  start_indices=(0, 0)
                  strides=None
                ] byq
                cra:f64[13] = squeeze[dimensions=(1,)] cqz
                crb:f64[400,13,1] = slice[
                  limit_indices=(400, 13, 2)
                  start_indices=(0, 0, 1)
                  strides=None
                ] cms
                crc:f64[400,13] = squeeze[dimensions=(2,)] crb
                crd:f64[1,13] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 13)
                ] cra
                cre:f64[400,13] = mul crd crc
                crf:f64[13,1] = slice[
                  limit_indices=(13, 2)
                  start_indices=(0, 1)
                  strides=None
                ] byq
                crg:f64[13] = squeeze[dimensions=(1,)] crf
                crh:f64[400,13,1] = slice[
                  limit_indices=(400, 13, 1)
                  start_indices=(0, 0, 0)
                  strides=None
                ] cms
                cri:f64[400,13] = squeeze[dimensions=(2,)] crh
                crj:f64[1,13] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 13)
                ] crg
                crk:f64[400,13] = mul crj cri
                crl:f64[400,13] = add cre crk
                crm:f64[13,1] = slice[
                  limit_indices=(13, 3)
                  start_indices=(0, 2)
                  strides=None
                ] byq
                crn:f64[13] = squeeze[dimensions=(1,)] crm
                cro:f64[400,13,1] = slice[
                  limit_indices=(400, 13, 4)
                  start_indices=(0, 0, 3)
                  strides=None
                ] cms
                crp:f64[400,13] = squeeze[dimensions=(2,)] cro
                crq:f64[1,13] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 13)
                ] crn
                crr:f64[400,13] = mul crq crp
                crs:f64[400,13] = add crl crr
                crt:f64[13,1] = slice[
                  limit_indices=(13, 4)
                  start_indices=(0, 3)
                  strides=None
                ] byq
                cru:f64[13] = squeeze[dimensions=(1,)] crt
                crv:f64[400,13,1] = slice[
                  limit_indices=(400, 13, 3)
                  start_indices=(0, 0, 2)
                  strides=None
                ] cms
                crw:f64[400,13] = squeeze[dimensions=(2,)] crv
                crx:f64[1,13] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 13)
                ] cru
                cry:f64[400,13] = mul crx crw
                crz:f64[400,13] = sub crs cry
                csa:f64[13,1] = slice[
                  limit_indices=(13, 1)
                  start_indices=(0, 0)
                  strides=None
                ] byq
                csb:f64[13] = squeeze[dimensions=(1,)] csa
                csc:f64[400,13,1] = slice[
                  limit_indices=(400, 13, 3)
                  start_indices=(0, 0, 2)
                  strides=None
                ] cms
                csd:f64[400,13] = squeeze[dimensions=(2,)] csc
                cse:f64[1,13] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 13)
                ] csb
                csf:f64[400,13] = mul cse csd
                csg:f64[13,1] = slice[
                  limit_indices=(13, 2)
                  start_indices=(0, 1)
                  strides=None
                ] byq
                csh:f64[13] = squeeze[dimensions=(1,)] csg
                csi:f64[400,13,1] = slice[
                  limit_indices=(400, 13, 4)
                  start_indices=(0, 0, 3)
                  strides=None
                ] cms
                csj:f64[400,13] = squeeze[dimensions=(2,)] csi
                csk:f64[1,13] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 13)
                ] csh
                csl:f64[400,13] = mul csk csj
                csm:f64[400,13] = sub csf csl
                csn:f64[13,1] = slice[
                  limit_indices=(13, 3)
                  start_indices=(0, 2)
                  strides=None
                ] byq
                cso:f64[13] = squeeze[dimensions=(1,)] csn
                csp:f64[400,13,1] = slice[
                  limit_indices=(400, 13, 1)
                  start_indices=(0, 0, 0)
                  strides=None
                ] cms
                csq:f64[400,13] = squeeze[dimensions=(2,)] csp
                csr:f64[1,13] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 13)
                ] cso
                css:f64[400,13] = mul csr csq
                cst:f64[400,13] = add csm css
                csu:f64[13,1] = slice[
                  limit_indices=(13, 4)
                  start_indices=(0, 3)
                  strides=None
                ] byq
                csv:f64[13] = squeeze[dimensions=(1,)] csu
                csw:f64[400,13,1] = slice[
                  limit_indices=(400, 13, 2)
                  start_indices=(0, 0, 1)
                  strides=None
                ] cms
                csx:f64[400,13] = squeeze[dimensions=(2,)] csw
                csy:f64[1,13] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 13)
                ] csv
                csz:f64[400,13] = mul csy csx
                cta:f64[400,13] = add cst csz
                ctb:f64[13,1] = slice[
                  limit_indices=(13, 1)
                  start_indices=(0, 0)
                  strides=None
                ] byq
                ctc:f64[13] = squeeze[dimensions=(1,)] ctb
                ctd:f64[400,13,1] = slice[
                  limit_indices=(400, 13, 4)
                  start_indices=(0, 0, 3)
                  strides=None
                ] cms
                cte:f64[400,13] = squeeze[dimensions=(2,)] ctd
                ctf:f64[1,13] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 13)
                ] ctc
                ctg:f64[400,13] = mul ctf cte
                cth:f64[13,1] = slice[
                  limit_indices=(13, 2)
                  start_indices=(0, 1)
                  strides=None
                ] byq
                cti:f64[13] = squeeze[dimensions=(1,)] cth
                ctj:f64[400,13,1] = slice[
                  limit_indices=(400, 13, 3)
                  start_indices=(0, 0, 2)
                  strides=None
                ] cms
                ctk:f64[400,13] = squeeze[dimensions=(2,)] ctj
                ctl:f64[1,13] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 13)
                ] cti
                ctm:f64[400,13] = mul ctl ctk
                ctn:f64[400,13] = add ctg ctm
                cto:f64[13,1] = slice[
                  limit_indices=(13, 3)
                  start_indices=(0, 2)
                  strides=None
                ] byq
                ctp:f64[13] = squeeze[dimensions=(1,)] cto
                ctq:f64[400,13,1] = slice[
                  limit_indices=(400, 13, 2)
                  start_indices=(0, 0, 1)
                  strides=None
                ] cms
                ctr:f64[400,13] = squeeze[dimensions=(2,)] ctq
                cts:f64[1,13] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 13)
                ] ctp
                ctt:f64[400,13] = mul cts ctr
                ctu:f64[400,13] = sub ctn ctt
                ctv:f64[13,1] = slice[
                  limit_indices=(13, 4)
                  start_indices=(0, 3)
                  strides=None
                ] byq
                ctw:f64[13] = squeeze[dimensions=(1,)] ctv
                ctx:f64[400,13,1] = slice[
                  limit_indices=(400, 13, 1)
                  start_indices=(0, 0, 0)
                  strides=None
                ] cms
                cty:f64[400,13] = squeeze[dimensions=(2,)] ctx
                ctz:f64[1,13] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 13)
                ] ctw
                cua:f64[400,13] = mul ctz cty
                cub:f64[400,13] = add ctu cua
                cuc:f64[400,13,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 13, 1)
                ] cqy
                cud:f64[400,13,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 13, 1)
                ] crz
                cue:f64[400,13,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 13, 1)
                ] cta
                cuf:f64[400,13,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 13, 1)
                ] cub
                cug:f64[400,13,4] = concatenate[dimension=2] cuc cud cue cuf
                cuh:f64[400,1,3] = slice[
                  limit_indices=(400, 1, 3)
                  start_indices=(0, 0, 0)
                  strides=None
                ] cpx
                cui:f64[400,1,4] = slice[
                  limit_indices=(400, 1, 4)
                  start_indices=(0, 0, 0)
                  strides=None
                ] cug
                cuj:f64[400,4,3] = pjit[name=_take jaxpr=_take1] cpx bys
                cuk:f64[400,4,4] = pjit[name=_take jaxpr=_take2] cug byt
                cul:f64[400,4,3] = pjit[name=_take jaxpr=_take3] cuh byu
                cum:f64[400,4,4] = pjit[
                  name=_take
                  jaxpr={ lambda ; cun:f64[400,1,4] cuo:i64[4]. let
                      cup:i64[4] = pjit[name=remainder jaxpr=remainder3] cuo 1
                      cuq:i64[4,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(4, 1)
                      ] cup
                      cur:f64[400,4,4] = gather[
                        dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 2), collapsed_slice_dims=(1,), start_index_map=(1,))
                        fill_value=None
                        indices_are_sorted=False
                        mode=GatherScatterMode.PROMISE_IN_BOUNDS
                        slice_sizes=(400, 1, 4)
                        unique_indices=False
                      ] cun cuq
                    in (cur,) }
                ] cui byv
                cus:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 1)
                  start_indices=(0, 0, 0)
                  strides=None
                ] cum
                cut:f64[400,4] = squeeze[dimensions=(2,)] cus
                cuu:f64[400,4,3] = slice[
                  limit_indices=(400, 4, 4)
                  start_indices=(0, 0, 1)
                  strides=None
                ] cum
                cuv:f64[400,4] = dot_general[
                  dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
                  preferred_element_type=float64
                ] cuu cuj
                cuw:f64[400,4,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 4, 1)
                ] cuv
                cux:f64[400,4,3] = mul cuw cuu
                cuy:f64[400,4,3] = mul 2.0 cux
                cuz:f64[400,4] = mul cut cut
                cva:f64[400,4] = dot_general[
                  dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
                  preferred_element_type=float64
                ] cuu cuu
                cvb:f64[400,4] = sub cuz cva
                cvc:f64[400,4,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 4, 1)
                ] cvb
                cvd:f64[400,4,3] = mul cvc cuj
                cve:f64[400,4,3] = add cuy cvd
                cvf:f64[400,4] = mul 2.0 cut
                cvg:f64[400,4,3] = pjit[name=cross jaxpr=cross2] cuu cuj
                cvh:f64[400,4,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 4, 1)
                ] cvf
                cvi:f64[400,4,3] = mul cvh cvg
                cvj:f64[400,4,3] = add cve cvi
                cvk:f64[400,4,3] = add cul cvj
                cvl:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 1)
                  start_indices=(0, 0, 0)
                  strides=None
                ] cum
                cvm:f64[400,4] = squeeze[dimensions=(2,)] cvl
                cvn:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 1)
                  start_indices=(0, 0, 0)
                  strides=None
                ] cuk
                cvo:f64[400,4] = squeeze[dimensions=(2,)] cvn
                cvp:f64[400,4] = mul cvm cvo
                cvq:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 2)
                  start_indices=(0, 0, 1)
                  strides=None
                ] cum
                cvr:f64[400,4] = squeeze[dimensions=(2,)] cvq
                cvs:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 2)
                  start_indices=(0, 0, 1)
                  strides=None
                ] cuk
                cvt:f64[400,4] = squeeze[dimensions=(2,)] cvs
                cvu:f64[400,4] = mul cvr cvt
                cvv:f64[400,4] = sub cvp cvu
                cvw:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 3)
                  start_indices=(0, 0, 2)
                  strides=None
                ] cum
                cvx:f64[400,4] = squeeze[dimensions=(2,)] cvw
                cvy:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 3)
                  start_indices=(0, 0, 2)
                  strides=None
                ] cuk
                cvz:f64[400,4] = squeeze[dimensions=(2,)] cvy
                cwa:f64[400,4] = mul cvx cvz
                cwb:f64[400,4] = sub cvv cwa
                cwc:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 4)
                  start_indices=(0, 0, 3)
                  strides=None
                ] cum
                cwd:f64[400,4] = squeeze[dimensions=(2,)] cwc
                cwe:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 4)
                  start_indices=(0, 0, 3)
                  strides=None
                ] cuk
                cwf:f64[400,4] = squeeze[dimensions=(2,)] cwe
                cwg:f64[400,4] = mul cwd cwf
                cwh:f64[400,4] = sub cwb cwg
                cwi:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 1)
                  start_indices=(0, 0, 0)
                  strides=None
                ] cum
                cwj:f64[400,4] = squeeze[dimensions=(2,)] cwi
                cwk:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 2)
                  start_indices=(0, 0, 1)
                  strides=None
                ] cuk
                cwl:f64[400,4] = squeeze[dimensions=(2,)] cwk
                cwm:f64[400,4] = mul cwj cwl
                cwn:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 2)
                  start_indices=(0, 0, 1)
                  strides=None
                ] cum
                cwo:f64[400,4] = squeeze[dimensions=(2,)] cwn
                cwp:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 1)
                  start_indices=(0, 0, 0)
                  strides=None
                ] cuk
                cwq:f64[400,4] = squeeze[dimensions=(2,)] cwp
                cwr:f64[400,4] = mul cwo cwq
                cws:f64[400,4] = add cwm cwr
                cwt:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 3)
                  start_indices=(0, 0, 2)
                  strides=None
                ] cum
                cwu:f64[400,4] = squeeze[dimensions=(2,)] cwt
                cwv:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 4)
                  start_indices=(0, 0, 3)
                  strides=None
                ] cuk
                cww:f64[400,4] = squeeze[dimensions=(2,)] cwv
                cwx:f64[400,4] = mul cwu cww
                cwy:f64[400,4] = add cws cwx
                cwz:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 4)
                  start_indices=(0, 0, 3)
                  strides=None
                ] cum
                cxa:f64[400,4] = squeeze[dimensions=(2,)] cwz
                cxb:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 3)
                  start_indices=(0, 0, 2)
                  strides=None
                ] cuk
                cxc:f64[400,4] = squeeze[dimensions=(2,)] cxb
                cxd:f64[400,4] = mul cxa cxc
                cxe:f64[400,4] = sub cwy cxd
                cxf:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 1)
                  start_indices=(0, 0, 0)
                  strides=None
                ] cum
                cxg:f64[400,4] = squeeze[dimensions=(2,)] cxf
                cxh:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 3)
                  start_indices=(0, 0, 2)
                  strides=None
                ] cuk
                cxi:f64[400,4] = squeeze[dimensions=(2,)] cxh
                cxj:f64[400,4] = mul cxg cxi
                cxk:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 2)
                  start_indices=(0, 0, 1)
                  strides=None
                ] cum
                cxl:f64[400,4] = squeeze[dimensions=(2,)] cxk
                cxm:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 4)
                  start_indices=(0, 0, 3)
                  strides=None
                ] cuk
                cxn:f64[400,4] = squeeze[dimensions=(2,)] cxm
                cxo:f64[400,4] = mul cxl cxn
                cxp:f64[400,4] = sub cxj cxo
                cxq:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 3)
                  start_indices=(0, 0, 2)
                  strides=None
                ] cum
                cxr:f64[400,4] = squeeze[dimensions=(2,)] cxq
                cxs:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 1)
                  start_indices=(0, 0, 0)
                  strides=None
                ] cuk
                cxt:f64[400,4] = squeeze[dimensions=(2,)] cxs
                cxu:f64[400,4] = mul cxr cxt
                cxv:f64[400,4] = add cxp cxu
                cxw:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 4)
                  start_indices=(0, 0, 3)
                  strides=None
                ] cum
                cxx:f64[400,4] = squeeze[dimensions=(2,)] cxw
                cxy:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 2)
                  start_indices=(0, 0, 1)
                  strides=None
                ] cuk
                cxz:f64[400,4] = squeeze[dimensions=(2,)] cxy
                cya:f64[400,4] = mul cxx cxz
                cyb:f64[400,4] = add cxv cya
                cyc:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 1)
                  start_indices=(0, 0, 0)
                  strides=None
                ] cum
                cyd:f64[400,4] = squeeze[dimensions=(2,)] cyc
                cye:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 4)
                  start_indices=(0, 0, 3)
                  strides=None
                ] cuk
                cyf:f64[400,4] = squeeze[dimensions=(2,)] cye
                cyg:f64[400,4] = mul cyd cyf
                cyh:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 2)
                  start_indices=(0, 0, 1)
                  strides=None
                ] cum
                cyi:f64[400,4] = squeeze[dimensions=(2,)] cyh
                cyj:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 3)
                  start_indices=(0, 0, 2)
                  strides=None
                ] cuk
                cyk:f64[400,4] = squeeze[dimensions=(2,)] cyj
                cyl:f64[400,4] = mul cyi cyk
                cym:f64[400,4] = add cyg cyl
                cyn:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 3)
                  start_indices=(0, 0, 2)
                  strides=None
                ] cum
                cyo:f64[400,4] = squeeze[dimensions=(2,)] cyn
                cyp:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 2)
                  start_indices=(0, 0, 1)
                  strides=None
                ] cuk
                cyq:f64[400,4] = squeeze[dimensions=(2,)] cyp
                cyr:f64[400,4] = mul cyo cyq
                cys:f64[400,4] = sub cym cyr
                cyt:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 4)
                  start_indices=(0, 0, 3)
                  strides=None
                ] cum
                cyu:f64[400,4] = squeeze[dimensions=(2,)] cyt
                cyv:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 1)
                  start_indices=(0, 0, 0)
                  strides=None
                ] cuk
                cyw:f64[400,4] = squeeze[dimensions=(2,)] cyv
                cyx:f64[400,4] = mul cyu cyw
                cyy:f64[400,4] = add cys cyx
                cyz:f64[400,4,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 4, 1)
                ] cwh
                cza:f64[400,4,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 4, 1)
                ] cxe
                czb:f64[400,4,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 4, 1)
                ] cyb
                czc:f64[400,4,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 4, 1)
                ] cyy
                czd:f64[400,4,4] = concatenate[dimension=2] cyz cza czb czc
                cze:f64[400,4,3] = pjit[name=_take jaxpr=_take1] cpx byw
                czf:f64[400,4,4] = pjit[name=_take jaxpr=_take2] cug byx
                czg:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 1)
                  start_indices=(0, 0, 0)
                  strides=None
                ] czd
                czh:f64[400,4] = squeeze[dimensions=(2,)] czg
                czi:f64[400,4,3] = slice[
                  limit_indices=(400, 4, 4)
                  start_indices=(0, 0, 1)
                  strides=None
                ] czd
                czj:f64[400,4] = dot_general[
                  dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
                  preferred_element_type=float64
                ] czi cze
                czk:f64[400,4,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 4, 1)
                ] czj
                czl:f64[400,4,3] = mul czk czi
                czm:f64[400,4,3] = mul 2.0 czl
                czn:f64[400,4] = mul czh czh
                czo:f64[400,4] = dot_general[
                  dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
                  preferred_element_type=float64
                ] czi czi
                czp:f64[400,4] = sub czn czo
                czq:f64[400,4,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 4, 1)
                ] czp
                czr:f64[400,4,3] = mul czq cze
                czs:f64[400,4,3] = add czm czr
                czt:f64[400,4] = mul 2.0 czh
                czu:f64[400,4,3] = pjit[name=cross jaxpr=cross2] czi cze
                czv:f64[400,4,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 4, 1)
                ] czt
                czw:f64[400,4,3] = mul czv czu
                czx:f64[400,4,3] = add czs czw
                czy:f64[400,4,3] = add cvk czx
                czz:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 1)
                  start_indices=(0, 0, 0)
                  strides=None
                ] czd
                daa:f64[400,4] = squeeze[dimensions=(2,)] czz
                dab:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 1)
                  start_indices=(0, 0, 0)
                  strides=None
                ] czf
                dac:f64[400,4] = squeeze[dimensions=(2,)] dab
                dad:f64[400,4] = mul daa dac
                dae:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 2)
                  start_indices=(0, 0, 1)
                  strides=None
                ] czd
                daf:f64[400,4] = squeeze[dimensions=(2,)] dae
                dag:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 2)
                  start_indices=(0, 0, 1)
                  strides=None
                ] czf
                dah:f64[400,4] = squeeze[dimensions=(2,)] dag
                dai:f64[400,4] = mul daf dah
                daj:f64[400,4] = sub dad dai
                dak:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 3)
                  start_indices=(0, 0, 2)
                  strides=None
                ] czd
                dal:f64[400,4] = squeeze[dimensions=(2,)] dak
                dam:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 3)
                  start_indices=(0, 0, 2)
                  strides=None
                ] czf
                dan:f64[400,4] = squeeze[dimensions=(2,)] dam
                dao:f64[400,4] = mul dal dan
                dap:f64[400,4] = sub daj dao
                daq:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 4)
                  start_indices=(0, 0, 3)
                  strides=None
                ] czd
                dar:f64[400,4] = squeeze[dimensions=(2,)] daq
                das:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 4)
                  start_indices=(0, 0, 3)
                  strides=None
                ] czf
                dat:f64[400,4] = squeeze[dimensions=(2,)] das
                dau:f64[400,4] = mul dar dat
                dav:f64[400,4] = sub dap dau
                daw:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 1)
                  start_indices=(0, 0, 0)
                  strides=None
                ] czd
                dax:f64[400,4] = squeeze[dimensions=(2,)] daw
                day:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 2)
                  start_indices=(0, 0, 1)
                  strides=None
                ] czf
                daz:f64[400,4] = squeeze[dimensions=(2,)] day
                dba:f64[400,4] = mul dax daz
                dbb:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 2)
                  start_indices=(0, 0, 1)
                  strides=None
                ] czd
                dbc:f64[400,4] = squeeze[dimensions=(2,)] dbb
                dbd:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 1)
                  start_indices=(0, 0, 0)
                  strides=None
                ] czf
                dbe:f64[400,4] = squeeze[dimensions=(2,)] dbd
                dbf:f64[400,4] = mul dbc dbe
                dbg:f64[400,4] = add dba dbf
                dbh:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 3)
                  start_indices=(0, 0, 2)
                  strides=None
                ] czd
                dbi:f64[400,4] = squeeze[dimensions=(2,)] dbh
                dbj:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 4)
                  start_indices=(0, 0, 3)
                  strides=None
                ] czf
                dbk:f64[400,4] = squeeze[dimensions=(2,)] dbj
                dbl:f64[400,4] = mul dbi dbk
                dbm:f64[400,4] = add dbg dbl
                dbn:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 4)
                  start_indices=(0, 0, 3)
                  strides=None
                ] czd
                dbo:f64[400,4] = squeeze[dimensions=(2,)] dbn
                dbp:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 3)
                  start_indices=(0, 0, 2)
                  strides=None
                ] czf
                dbq:f64[400,4] = squeeze[dimensions=(2,)] dbp
                dbr:f64[400,4] = mul dbo dbq
                dbs:f64[400,4] = sub dbm dbr
                dbt:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 1)
                  start_indices=(0, 0, 0)
                  strides=None
                ] czd
                dbu:f64[400,4] = squeeze[dimensions=(2,)] dbt
                dbv:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 3)
                  start_indices=(0, 0, 2)
                  strides=None
                ] czf
                dbw:f64[400,4] = squeeze[dimensions=(2,)] dbv
                dbx:f64[400,4] = mul dbu dbw
                dby:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 2)
                  start_indices=(0, 0, 1)
                  strides=None
                ] czd
                dbz:f64[400,4] = squeeze[dimensions=(2,)] dby
                dca:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 4)
                  start_indices=(0, 0, 3)
                  strides=None
                ] czf
                dcb:f64[400,4] = squeeze[dimensions=(2,)] dca
                dcc:f64[400,4] = mul dbz dcb
                dcd:f64[400,4] = sub dbx dcc
                dce:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 3)
                  start_indices=(0, 0, 2)
                  strides=None
                ] czd
                dcf:f64[400,4] = squeeze[dimensions=(2,)] dce
                dcg:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 1)
                  start_indices=(0, 0, 0)
                  strides=None
                ] czf
                dch:f64[400,4] = squeeze[dimensions=(2,)] dcg
                dci:f64[400,4] = mul dcf dch
                dcj:f64[400,4] = add dcd dci
                dck:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 4)
                  start_indices=(0, 0, 3)
                  strides=None
                ] czd
                dcl:f64[400,4] = squeeze[dimensions=(2,)] dck
                dcm:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 2)
                  start_indices=(0, 0, 1)
                  strides=None
                ] czf
                dcn:f64[400,4] = squeeze[dimensions=(2,)] dcm
                dco:f64[400,4] = mul dcl dcn
                dcp:f64[400,4] = add dcj dco
                dcq:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 1)
                  start_indices=(0, 0, 0)
                  strides=None
                ] czd
                dcr:f64[400,4] = squeeze[dimensions=(2,)] dcq
                dcs:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 4)
                  start_indices=(0, 0, 3)
                  strides=None
                ] czf
                dct:f64[400,4] = squeeze[dimensions=(2,)] dcs
                dcu:f64[400,4] = mul dcr dct
                dcv:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 2)
                  start_indices=(0, 0, 1)
                  strides=None
                ] czd
                dcw:f64[400,4] = squeeze[dimensions=(2,)] dcv
                dcx:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 3)
                  start_indices=(0, 0, 2)
                  strides=None
                ] czf
                dcy:f64[400,4] = squeeze[dimensions=(2,)] dcx
                dcz:f64[400,4] = mul dcw dcy
                dda:f64[400,4] = add dcu dcz
                ddb:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 3)
                  start_indices=(0, 0, 2)
                  strides=None
                ] czd
                ddc:f64[400,4] = squeeze[dimensions=(2,)] ddb
                ddd:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 2)
                  start_indices=(0, 0, 1)
                  strides=None
                ] czf
                dde:f64[400,4] = squeeze[dimensions=(2,)] ddd
                ddf:f64[400,4] = mul ddc dde
                ddg:f64[400,4] = sub dda ddf
                ddh:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 4)
                  start_indices=(0, 0, 3)
                  strides=None
                ] czd
                ddi:f64[400,4] = squeeze[dimensions=(2,)] ddh
                ddj:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 1)
                  start_indices=(0, 0, 0)
                  strides=None
                ] czf
                ddk:f64[400,4] = squeeze[dimensions=(2,)] ddj
                ddl:f64[400,4] = mul ddi ddk
                ddm:f64[400,4] = add ddg ddl
                ddn:f64[400,4,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 4, 1)
                ] dav
                ddo:f64[400,4,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 4, 1)
                ] dbs
                ddp:f64[400,4,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 4, 1)
                ] dcp
                ddq:f64[400,4,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 4, 1)
                ] ddm
                ddr:f64[400,4,4] = concatenate[dimension=2] ddn ddo ddp ddq
                dds:f64[400,4,3] = pjit[name=_take jaxpr=_take1] cpx byy
                ddt:f64[400,4,4] = pjit[name=_take jaxpr=_take2] cug byz
                ddu:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 1)
                  start_indices=(0, 0, 0)
                  strides=None
                ] ddr
                ddv:f64[400,4] = squeeze[dimensions=(2,)] ddu
                ddw:f64[400,4,3] = slice[
                  limit_indices=(400, 4, 4)
                  start_indices=(0, 0, 1)
                  strides=None
                ] ddr
                ddx:f64[400,4] = dot_general[
                  dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
                  preferred_element_type=float64
                ] ddw dds
                ddy:f64[400,4,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 4, 1)
                ] ddx
                ddz:f64[400,4,3] = mul ddy ddw
                dea:f64[400,4,3] = mul 2.0 ddz
                deb:f64[400,4] = mul ddv ddv
                dec:f64[400,4] = dot_general[
                  dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
                  preferred_element_type=float64
                ] ddw ddw
                ded:f64[400,4] = sub deb dec
                dee:f64[400,4,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 4, 1)
                ] ded
                def:f64[400,4,3] = mul dee dds
                deg:f64[400,4,3] = add dea def
                deh:f64[400,4] = mul 2.0 ddv
                dei:f64[400,4,3] = pjit[name=cross jaxpr=cross2] ddw dds
                dej:f64[400,4,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 4, 1)
                ] deh
                dek:f64[400,4,3] = mul dej dei
                del:f64[400,4,3] = add deg dek
                dem:f64[400,4,3] = add czy del
                den:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 1)
                  start_indices=(0, 0, 0)
                  strides=None
                ] ddr
                deo:f64[400,4] = squeeze[dimensions=(2,)] den
                dep:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 1)
                  start_indices=(0, 0, 0)
                  strides=None
                ] ddt
                deq:f64[400,4] = squeeze[dimensions=(2,)] dep
                der:f64[400,4] = mul deo deq
                des:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 2)
                  start_indices=(0, 0, 1)
                  strides=None
                ] ddr
                det:f64[400,4] = squeeze[dimensions=(2,)] des
                deu:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 2)
                  start_indices=(0, 0, 1)
                  strides=None
                ] ddt
                dev:f64[400,4] = squeeze[dimensions=(2,)] deu
                dew:f64[400,4] = mul det dev
                dex:f64[400,4] = sub der dew
                dey:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 3)
                  start_indices=(0, 0, 2)
                  strides=None
                ] ddr
                dez:f64[400,4] = squeeze[dimensions=(2,)] dey
                dfa:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 3)
                  start_indices=(0, 0, 2)
                  strides=None
                ] ddt
                dfb:f64[400,4] = squeeze[dimensions=(2,)] dfa
                dfc:f64[400,4] = mul dez dfb
                dfd:f64[400,4] = sub dex dfc
                dfe:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 4)
                  start_indices=(0, 0, 3)
                  strides=None
                ] ddr
                dff:f64[400,4] = squeeze[dimensions=(2,)] dfe
                dfg:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 4)
                  start_indices=(0, 0, 3)
                  strides=None
                ] ddt
                dfh:f64[400,4] = squeeze[dimensions=(2,)] dfg
                dfi:f64[400,4] = mul dff dfh
                dfj:f64[400,4] = sub dfd dfi
                dfk:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 1)
                  start_indices=(0, 0, 0)
                  strides=None
                ] ddr
                dfl:f64[400,4] = squeeze[dimensions=(2,)] dfk
                dfm:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 2)
                  start_indices=(0, 0, 1)
                  strides=None
                ] ddt
                dfn:f64[400,4] = squeeze[dimensions=(2,)] dfm
                dfo:f64[400,4] = mul dfl dfn
                dfp:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 2)
                  start_indices=(0, 0, 1)
                  strides=None
                ] ddr
                dfq:f64[400,4] = squeeze[dimensions=(2,)] dfp
                dfr:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 1)
                  start_indices=(0, 0, 0)
                  strides=None
                ] ddt
                dfs:f64[400,4] = squeeze[dimensions=(2,)] dfr
                dft:f64[400,4] = mul dfq dfs
                dfu:f64[400,4] = add dfo dft
                dfv:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 3)
                  start_indices=(0, 0, 2)
                  strides=None
                ] ddr
                dfw:f64[400,4] = squeeze[dimensions=(2,)] dfv
                dfx:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 4)
                  start_indices=(0, 0, 3)
                  strides=None
                ] ddt
                dfy:f64[400,4] = squeeze[dimensions=(2,)] dfx
                dfz:f64[400,4] = mul dfw dfy
                dga:f64[400,4] = add dfu dfz
                dgb:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 4)
                  start_indices=(0, 0, 3)
                  strides=None
                ] ddr
                dgc:f64[400,4] = squeeze[dimensions=(2,)] dgb
                dgd:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 3)
                  start_indices=(0, 0, 2)
                  strides=None
                ] ddt
                dge:f64[400,4] = squeeze[dimensions=(2,)] dgd
                dgf:f64[400,4] = mul dgc dge
                dgg:f64[400,4] = sub dga dgf
                dgh:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 1)
                  start_indices=(0, 0, 0)
                  strides=None
                ] ddr
                dgi:f64[400,4] = squeeze[dimensions=(2,)] dgh
                dgj:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 3)
                  start_indices=(0, 0, 2)
                  strides=None
                ] ddt
                dgk:f64[400,4] = squeeze[dimensions=(2,)] dgj
                dgl:f64[400,4] = mul dgi dgk
                dgm:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 2)
                  start_indices=(0, 0, 1)
                  strides=None
                ] ddr
                dgn:f64[400,4] = squeeze[dimensions=(2,)] dgm
                dgo:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 4)
                  start_indices=(0, 0, 3)
                  strides=None
                ] ddt
                dgp:f64[400,4] = squeeze[dimensions=(2,)] dgo
                dgq:f64[400,4] = mul dgn dgp
                dgr:f64[400,4] = sub dgl dgq
                dgs:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 3)
                  start_indices=(0, 0, 2)
                  strides=None
                ] ddr
                dgt:f64[400,4] = squeeze[dimensions=(2,)] dgs
                dgu:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 1)
                  start_indices=(0, 0, 0)
                  strides=None
                ] ddt
                dgv:f64[400,4] = squeeze[dimensions=(2,)] dgu
                dgw:f64[400,4] = mul dgt dgv
                dgx:f64[400,4] = add dgr dgw
                dgy:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 4)
                  start_indices=(0, 0, 3)
                  strides=None
                ] ddr
                dgz:f64[400,4] = squeeze[dimensions=(2,)] dgy
                dha:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 2)
                  start_indices=(0, 0, 1)
                  strides=None
                ] ddt
                dhb:f64[400,4] = squeeze[dimensions=(2,)] dha
                dhc:f64[400,4] = mul dgz dhb
                dhd:f64[400,4] = add dgx dhc
                dhe:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 1)
                  start_indices=(0, 0, 0)
                  strides=None
                ] ddr
                dhf:f64[400,4] = squeeze[dimensions=(2,)] dhe
                dhg:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 4)
                  start_indices=(0, 0, 3)
                  strides=None
                ] ddt
                dhh:f64[400,4] = squeeze[dimensions=(2,)] dhg
                dhi:f64[400,4] = mul dhf dhh
                dhj:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 2)
                  start_indices=(0, 0, 1)
                  strides=None
                ] ddr
                dhk:f64[400,4] = squeeze[dimensions=(2,)] dhj
                dhl:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 3)
                  start_indices=(0, 0, 2)
                  strides=None
                ] ddt
                dhm:f64[400,4] = squeeze[dimensions=(2,)] dhl
                dhn:f64[400,4] = mul dhk dhm
                dho:f64[400,4] = add dhi dhn
                dhp:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 3)
                  start_indices=(0, 0, 2)
                  strides=None
                ] ddr
                dhq:f64[400,4] = squeeze[dimensions=(2,)] dhp
                dhr:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 2)
                  start_indices=(0, 0, 1)
                  strides=None
                ] ddt
                dhs:f64[400,4] = squeeze[dimensions=(2,)] dhr
                dht:f64[400,4] = mul dhq dhs
                dhu:f64[400,4] = sub dho dht
                dhv:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 4)
                  start_indices=(0, 0, 3)
                  strides=None
                ] ddr
                dhw:f64[400,4] = squeeze[dimensions=(2,)] dhv
                dhx:f64[400,4,1] = slice[
                  limit_indices=(400, 4, 1)
                  start_indices=(0, 0, 0)
                  strides=None
                ] ddt
                dhy:f64[400,4] = squeeze[dimensions=(2,)] dhx
                dhz:f64[400,4] = mul dhw dhy
                dia:f64[400,4] = add dhu dhz
                dib:f64[400,4,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 4, 1)
                ] dfj
                dic:f64[400,4,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 4, 1)
                ] dgg
                did:f64[400,4,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 4, 1)
                ] dhd
                die:f64[400,4,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 4, 1)
                ] dia
                dif:f64[400,4,4] = concatenate[dimension=2] dib dic did die
                dig:f64[400,13,3] = concatenate[dimension=1] cuh cvk czy dem
                dih:f64[400,13,4] = concatenate[dimension=1] cui czd ddr dif
                dii:f64[400,13,3] = pjit[name=_take jaxpr=_take4] dig bza
                dij:f64[400,13,4] = pjit[
                  name=_take
                  jaxpr={ lambda ; dik:f64[400,13,4] dil:i64[13]. let
                      dim:i64[13] = pjit[name=remainder jaxpr=remainder4] dil 13
                      din:i64[13,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(13, 1)
                      ] dim
                      dio:f64[400,13,4] = gather[
                        dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 2), collapsed_slice_dims=(1,), start_index_map=(1,))
                        fill_value=None
                        indices_are_sorted=False
                        mode=GatherScatterMode.PROMISE_IN_BOUNDS
                        slice_sizes=(400, 1, 4)
                        unique_indices=False
                      ] dik din
                    in (dio,) }
                ] dih bzb
                dip:bool[400,13] = pjit[
                  name=allclose
                  jaxpr={ lambda ; diq:f64[400,13,4] dir:f64[]. let
                      dis:bool[400,13,4] = pjit[
                        name=isclose
                        jaxpr={ lambda ; dit:f64[400,13,4] diu:f64[] div:f64[] diw:f64[]. let
                            dix:f64[] = convert_element_type[
                              new_dtype=float64
                              weak_type=False
                            ] diu
                            diy:f64[] = convert_element_type[
                              new_dtype=float64
                              weak_type=False
                            ] div
                            diz:f64[] = convert_element_type[
                              new_dtype=float64
                              weak_type=False
                            ] diw
                            dja:f64[400,13,4] = sub dit dix
                            djb:f64[400,13,4] = abs dja
                            djc:f64[] = abs dix
                            djd:f64[] = mul diy djc
                            dje:f64[] = add diz djd
                            djf:bool[400,13,4] = le djb dje
                            djg:bool[400,13,4] = pjit[
                              name=isinf
                              jaxpr={ lambda ; djh:f64[400,13,4]. let
                                  dji:f64[400,13,4] = abs djh
                                  djj:bool[400,13,4] = eq dji inf
                                in (djj,) }
                            ] dit
                            djk:bool[] = pjit[name=isinf jaxpr=isinf] dix
                            djl:bool[400,13,4] = or djg djk
                            djm:bool[400,13,4] = and djg djk
                            djn:bool[400,13,4] = not djl
                            djo:bool[400,13,4] = and djf djn
                            djp:bool[400,13,4] = eq dit dix
                            djq:bool[400,13,4] = and djm djp
                            djr:bool[400,13,4] = or djo djq
                            djs:bool[400,13,4] = ne dit dit
                            djt:bool[] = ne dix dix
                            dju:bool[400,13,4] = or djs djt
                            djv:bool[400,13,4] = not dju
                            djw:bool[400,13,4] = and djr djv
                          in (djw,) }
                      ] diq dir 1e-05 1e-08
                      djx:bool[400,13] = reduce_and[axes=(2,)] dis
                    in (djx,) }
                ] dij 0.0
                djy:f64[4] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(4,)
                ] 1.0
                djz:f64[400,13,4] = pjit[
                  name=_where
                  jaxpr={ lambda ; dka:bool[400,13] dkb:f64[4] dkc:f64[400,13,4]. let
                      dkd:bool[400,13,4] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(400, 13, 4)
                      ] dka
                      dke:f64[13,4] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(13, 4)
                      ] dkb
                      dkf:f64[400,13,4] = broadcast_in_dim[
                        broadcast_dimensions=(1, 2)
                        shape=(400, 13, 4)
                      ] dke
                      dkg:f64[400,13,4] = select_n dkd dkc dkf
                    in (dkg,) }
                ] dip djy dij
                dkh:f64[400,13] = pjit[
                  name=norm
                  jaxpr={ lambda ; dki:f64[400,13,4]. let
                      dkj:f64[400,13,4] = mul dki dki
                      dkk:f64[400,13] = reduce_sum[axes=(2,)] dkj
                      dkl:f64[400,13] = sqrt dkk
                    in (dkl,) }
                ] djz
                dkm:f64[400,13] = pjit[
                  name=_where
                  jaxpr={ lambda ; dkn:bool[400,13] dko:f64[] dkp:f64[400,13]. let
                      dkq:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] dko
                      dkr:f64[13] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(13,)
                      ] dkq
                      dks:f64[400,13] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(400, 13)
                      ] dkr
                      dkt:f64[400,13] = select_n dkn dkp dks
                    in (dkt,) }
                ] dip 0.0 dkh
                dku:bool[400,13] = eq dkm 0.0
                dkv:f64[400,13] = convert_element_type[
                  new_dtype=float64
                  weak_type=True
                ] dku
                dkw:f64[400,13] = mul 1e-06 dkv
                dkx:f64[400,13] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] dkw
                dky:f64[400,13] = add dkm dkx
                dkz:f64[400,13,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 13, 1)
                ] dky
                dla:f64[400,13,4] = div dij dkz
                dlb:f64[400,13,1] = slice[
                  limit_indices=(400, 13, 1)
                  start_indices=(0, 0, 0)
                  strides=None
                ] dla
                dlc:f64[400,13] = squeeze[dimensions=(2,)] dlb
                dld:f64[400,13,3] = slice[
                  limit_indices=(400, 13, 4)
                  start_indices=(0, 0, 1)
                  strides=None
                ] dla
                dle:f64[13,400] = dot_general[
                  dimension_numbers=(([2], [1]), ([1], [0]))
                  preferred_element_type=float64
                ] dld bzc
                dlf:f64[400,13] = transpose[permutation=(1, 0)] dle
                dlg:f64[400,13,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 13, 1)
                ] dlf
                dlh:f64[400,13,3] = mul dlg dld
                dli:f64[400,13,3] = mul 2.0 dlh
                dlj:f64[400,13] = mul dlc dlc
                dlk:f64[400,13] = dot_general[
                  dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
                  preferred_element_type=float64
                ] dld dld
                dll:f64[400,13] = sub dlj dlk
                dlm:f64[400,13,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 13, 1)
                ] dll
                dln:f64[1,13,3] = broadcast_in_dim[
                  broadcast_dimensions=(1, 2)
                  shape=(1, 13, 3)
                ] bzc
                dlo:f64[400,13,3] = mul dlm dln
                dlp:f64[400,13,3] = add dli dlo
                dlq:f64[400,13] = mul 2.0 dlc
                dlr:f64[400,13,3] = pjit[name=cross jaxpr=cross1] dld bzc
                dls:f64[400,13,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 13, 1)
                ] dlq
                dlt:f64[400,13,3] = mul dls dlr
                dlu:f64[400,13,3] = add dlp dlt
                dlv:f64[400,13,3] = add dii dlu
                dlw:f64[400,13,1] = slice[
                  limit_indices=(400, 13, 1)
                  start_indices=(0, 0, 0)
                  strides=None
                ] dla
                dlx:f64[400,13] = squeeze[dimensions=(2,)] dlw
                dly:f64[13,1] = slice[
                  limit_indices=(13, 1)
                  start_indices=(0, 0)
                  strides=None
                ] bzd
                dlz:f64[13] = squeeze[dimensions=(1,)] dly
                dma:f64[1,13] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 13)
                ] dlz
                dmb:f64[400,13] = mul dlx dma
                dmc:f64[400,13,1] = slice[
                  limit_indices=(400, 13, 2)
                  start_indices=(0, 0, 1)
                  strides=None
                ] dla
                dmd:f64[400,13] = squeeze[dimensions=(2,)] dmc
                dme:f64[13,1] = slice[
                  limit_indices=(13, 2)
                  start_indices=(0, 1)
                  strides=None
                ] bzd
                dmf:f64[13] = squeeze[dimensions=(1,)] dme
                dmg:f64[1,13] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 13)
                ] dmf
                dmh:f64[400,13] = mul dmd dmg
                dmi:f64[400,13] = sub dmb dmh
                dmj:f64[400,13,1] = slice[
                  limit_indices=(400, 13, 3)
                  start_indices=(0, 0, 2)
                  strides=None
                ] dla
                dmk:f64[400,13] = squeeze[dimensions=(2,)] dmj
                dml:f64[13,1] = slice[
                  limit_indices=(13, 3)
                  start_indices=(0, 2)
                  strides=None
                ] bzd
                dmm:f64[13] = squeeze[dimensions=(1,)] dml
                dmn:f64[1,13] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 13)
                ] dmm
                dmo:f64[400,13] = mul dmk dmn
                dmp:f64[400,13] = sub dmi dmo
                dmq:f64[400,13,1] = slice[
                  limit_indices=(400, 13, 4)
                  start_indices=(0, 0, 3)
                  strides=None
                ] dla
                dmr:f64[400,13] = squeeze[dimensions=(2,)] dmq
                dms:f64[13,1] = slice[
                  limit_indices=(13, 4)
                  start_indices=(0, 3)
                  strides=None
                ] bzd
                dmt:f64[13] = squeeze[dimensions=(1,)] dms
                dmu:f64[1,13] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 13)
                ] dmt
                dmv:f64[400,13] = mul dmr dmu
                dmw:f64[400,13] = sub dmp dmv
                dmx:f64[400,13,1] = slice[
                  limit_indices=(400, 13, 1)
                  start_indices=(0, 0, 0)
                  strides=None
                ] dla
                dmy:f64[400,13] = squeeze[dimensions=(2,)] dmx
                dmz:f64[13,1] = slice[
                  limit_indices=(13, 2)
                  start_indices=(0, 1)
                  strides=None
                ] bzd
                dna:f64[13] = squeeze[dimensions=(1,)] dmz
                dnb:f64[1,13] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 13)
                ] dna
                dnc:f64[400,13] = mul dmy dnb
                dnd:f64[400,13,1] = slice[
                  limit_indices=(400, 13, 2)
                  start_indices=(0, 0, 1)
                  strides=None
                ] dla
                dne:f64[400,13] = squeeze[dimensions=(2,)] dnd
                dnf:f64[13,1] = slice[
                  limit_indices=(13, 1)
                  start_indices=(0, 0)
                  strides=None
                ] bzd
                dng:f64[13] = squeeze[dimensions=(1,)] dnf
                dnh:f64[1,13] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 13)
                ] dng
                dni:f64[400,13] = mul dne dnh
                dnj:f64[400,13] = add dnc dni
                dnk:f64[400,13,1] = slice[
                  limit_indices=(400, 13, 3)
                  start_indices=(0, 0, 2)
                  strides=None
                ] dla
                dnl:f64[400,13] = squeeze[dimensions=(2,)] dnk
                dnm:f64[13,1] = slice[
                  limit_indices=(13, 4)
                  start_indices=(0, 3)
                  strides=None
                ] bzd
                dnn:f64[13] = squeeze[dimensions=(1,)] dnm
                dno:f64[1,13] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 13)
                ] dnn
                dnp:f64[400,13] = mul dnl dno
                dnq:f64[400,13] = add dnj dnp
                dnr:f64[400,13,1] = slice[
                  limit_indices=(400, 13, 4)
                  start_indices=(0, 0, 3)
                  strides=None
                ] dla
                dns:f64[400,13] = squeeze[dimensions=(2,)] dnr
                dnt:f64[13,1] = slice[
                  limit_indices=(13, 3)
                  start_indices=(0, 2)
                  strides=None
                ] bzd
                dnu:f64[13] = squeeze[dimensions=(1,)] dnt
                dnv:f64[1,13] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 13)
                ] dnu
                dnw:f64[400,13] = mul dns dnv
                dnx:f64[400,13] = sub dnq dnw
                dny:f64[400,13,1] = slice[
                  limit_indices=(400, 13, 1)
                  start_indices=(0, 0, 0)
                  strides=None
                ] dla
                dnz:f64[400,13] = squeeze[dimensions=(2,)] dny
                doa:f64[13,1] = slice[
                  limit_indices=(13, 3)
                  start_indices=(0, 2)
                  strides=None
                ] bzd
                dob:f64[13] = squeeze[dimensions=(1,)] doa
                doc:f64[1,13] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 13)
                ] dob
                dod:f64[400,13] = mul dnz doc
                doe:f64[400,13,1] = slice[
                  limit_indices=(400, 13, 2)
                  start_indices=(0, 0, 1)
                  strides=None
                ] dla
                dof:f64[400,13] = squeeze[dimensions=(2,)] doe
                dog:f64[13,1] = slice[
                  limit_indices=(13, 4)
                  start_indices=(0, 3)
                  strides=None
                ] bzd
                doh:f64[13] = squeeze[dimensions=(1,)] dog
                doi:f64[1,13] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 13)
                ] doh
                doj:f64[400,13] = mul dof doi
                dok:f64[400,13] = sub dod doj
                dol:f64[400,13,1] = slice[
                  limit_indices=(400, 13, 3)
                  start_indices=(0, 0, 2)
                  strides=None
                ] dla
                dom:f64[400,13] = squeeze[dimensions=(2,)] dol
                don:f64[13,1] = slice[
                  limit_indices=(13, 1)
                  start_indices=(0, 0)
                  strides=None
                ] bzd
                doo:f64[13] = squeeze[dimensions=(1,)] don
                dop:f64[1,13] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 13)
                ] doo
                doq:f64[400,13] = mul dom dop
                dor:f64[400,13] = add dok doq
                dos:f64[400,13,1] = slice[
                  limit_indices=(400, 13, 4)
                  start_indices=(0, 0, 3)
                  strides=None
                ] dla
                dot:f64[400,13] = squeeze[dimensions=(2,)] dos
                dou:f64[13,1] = slice[
                  limit_indices=(13, 2)
                  start_indices=(0, 1)
                  strides=None
                ] bzd
                dov:f64[13] = squeeze[dimensions=(1,)] dou
                dow:f64[1,13] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 13)
                ] dov
                dox:f64[400,13] = mul dot dow
                doy:f64[400,13] = add dor dox
                doz:f64[400,13,1] = slice[
                  limit_indices=(400, 13, 1)
                  start_indices=(0, 0, 0)
                  strides=None
                ] dla
                dpa:f64[400,13] = squeeze[dimensions=(2,)] doz
                dpb:f64[13,1] = slice[
                  limit_indices=(13, 4)
                  start_indices=(0, 3)
                  strides=None
                ] bzd
                dpc:f64[13] = squeeze[dimensions=(1,)] dpb
                dpd:f64[1,13] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 13)
                ] dpc
                dpe:f64[400,13] = mul dpa dpd
                dpf:f64[400,13,1] = slice[
                  limit_indices=(400, 13, 2)
                  start_indices=(0, 0, 1)
                  strides=None
                ] dla
                dpg:f64[400,13] = squeeze[dimensions=(2,)] dpf
                dph:f64[13,1] = slice[
                  limit_indices=(13, 3)
                  start_indices=(0, 2)
                  strides=None
                ] bzd
                dpi:f64[13] = squeeze[dimensions=(1,)] dph
                dpj:f64[1,13] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 13)
                ] dpi
                dpk:f64[400,13] = mul dpg dpj
                dpl:f64[400,13] = add dpe dpk
                dpm:f64[400,13,1] = slice[
                  limit_indices=(400, 13, 3)
                  start_indices=(0, 0, 2)
                  strides=None
                ] dla
                dpn:f64[400,13] = squeeze[dimensions=(2,)] dpm
                dpo:f64[13,1] = slice[
                  limit_indices=(13, 2)
                  start_indices=(0, 1)
                  strides=None
                ] bzd
                dpp:f64[13] = squeeze[dimensions=(1,)] dpo
                dpq:f64[1,13] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 13)
                ] dpp
                dpr:f64[400,13] = mul dpn dpq
                dps:f64[400,13] = sub dpl dpr
                dpt:f64[400,13,1] = slice[
                  limit_indices=(400, 13, 4)
                  start_indices=(0, 0, 3)
                  strides=None
                ] dla
                dpu:f64[400,13] = squeeze[dimensions=(2,)] dpt
                dpv:f64[13,1] = slice[
                  limit_indices=(13, 1)
                  start_indices=(0, 0)
                  strides=None
                ] bzd
                dpw:f64[13] = squeeze[dimensions=(1,)] dpv
                dpx:f64[1,13] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 13)
                ] dpw
                dpy:f64[400,13] = mul dpu dpx
                dpz:f64[400,13] = add dps dpy
                dqa:f64[400,13,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 13, 1)
                ] dmw
                dqb:f64[400,13,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 13, 1)
                ] dnx
                dqc:f64[400,13,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 13, 1)
                ] doy
                dqd:f64[400,13,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 13, 1)
                ] dpz
                dqe:f64[400,13,4] = concatenate[dimension=2] dqa dqb dqc dqd
                dqf:f64[13,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(13, 1)
                ] bzf
                dqg:f64[1,13,1] = broadcast_in_dim[
                  broadcast_dimensions=(1, 2)
                  shape=(1, 13, 1)
                ] dqf
                dqh:f64[400,13,3] = mul dqg dlv
                dqi:f64[13,3] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(13, 3)
                ] 0.0
                dqj:i32[13,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(13, 1)
                ] bze
                dqk:f64[400,13,3] = broadcast_in_dim[
                  broadcast_dimensions=(1, 2)
                  shape=(400, 13, 3)
                ] dqi
                dql:f64[400,13,3] = scatter-add[
                  dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                  indices_are_sorted=False
                  mode=GatherScatterMode.FILL_OR_DROP
                  unique_indices=False
                  update_consts=()
                  update_jaxpr=jaxpr1
                ] dqk dqj dqh
                dqm:f64[13] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(13,)
                ] 0.0
                dqn:i32[13,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(13, 1)
                ] bze
                dqo:f64[13] = scatter-add[
                  dimension_numbers=ScatterDimensionNumbers(update_window_dims=(), inserted_window_dims=(0,), scatter_dims_to_operand_dims=(0,))
                  indices_are_sorted=False
                  mode=GatherScatterMode.FILL_OR_DROP
                  unique_indices=False
                  update_consts=()
                  update_jaxpr=jaxpr1
                ] dqm dqn bzf
                dqp:bool[13] = lt bze 0
                dqq:i32[13] = add bze 13
                dqr:i32[13] = select_n dqp bze dqq
                dqs:i32[13,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(13, 1)
                ] dqr
                dqt:f64[400,13,3] = gather[
                  dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 2), collapsed_slice_dims=(1,), start_index_map=(1,))
                  fill_value=None
                  indices_are_sorted=False
                  mode=GatherScatterMode.PROMISE_IN_BOUNDS
                  slice_sizes=(400, 1, 3)
                  unique_indices=False
                ] dql dqs
                dqu:bool[13] = lt bze 0
                dqv:i32[13] = add bze 13
                dqw:i32[13] = select_n dqu bze dqv
                dqx:i32[13,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(13, 1)
                ] dqw
                dqy:f64[13] = gather[
                  dimension_numbers=GatherDimensionNumbers(offset_dims=(), collapsed_slice_dims=(0,), start_index_map=(0,))
                  fill_value=None
                  indices_are_sorted=False
                  mode=GatherScatterMode.PROMISE_IN_BOUNDS
                  slice_sizes=(1,)
                  unique_indices=False
                ] dqo dqx
                dqz:f64[13,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(13, 1)
                ] dqy
                dra:f64[1,13,1] = broadcast_in_dim[
                  broadcast_dimensions=(1, 2)
                  shape=(1, 13, 1)
                ] dqz
                drb:f64[400,13,3] = div dqt dra
                drc:f64[400,13,3] = sub dlv drb
                drd:i64[3,3] = iota[dimension=0 dtype=int64 shape=(3, 3)] 
                dre:i64[3,3] = iota[dimension=1 dtype=int64 shape=(3, 3)] 
                drf:i64[3,3] = add drd 0
                drg:bool[3,3] = eq drf dre
                drh:f64[3,3] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] drg
                dri:f64[3,3] = neg drh
                drj:f64[400,13,3,3] = pjit[
                  name=cross
                  jaxpr={ lambda ; drk:f64[400,13,3] drl:f64[3,3]. let
                      drm:i32[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] 0
                      drn:f64[400,13] = gather[
                        dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
                        fill_value=None
                        indices_are_sorted=True
                        mode=GatherScatterMode.PROMISE_IN_BOUNDS
                        slice_sizes=(400, 13, 1)
                        unique_indices=True
                      ] drk drm
                      dro:i32[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] 1
                      drp:f64[400,13] = gather[
                        dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
                        fill_value=None
                        indices_are_sorted=True
                        mode=GatherScatterMode.PROMISE_IN_BOUNDS
                        slice_sizes=(400, 13, 1)
                        unique_indices=True
                      ] drk dro
                      drq:i32[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] 2
                      drr:f64[400,13] = gather[
                        dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
                        fill_value=None
                        indices_are_sorted=True
                        mode=GatherScatterMode.PROMISE_IN_BOUNDS
                        slice_sizes=(400, 13, 1)
                        unique_indices=True
                      ] drk drq
                      drs:f64[3,1] = slice[
                        limit_indices=(3, 1)
                        start_indices=(0, 0)
                        strides=None
                      ] drl
                      drt:f64[3] = squeeze[dimensions=(1,)] drs
                      dru:f64[3,1] = slice[
                        limit_indices=(3, 2)
                        start_indices=(0, 1)
                        strides=None
                      ] drl
                      drv:f64[3] = squeeze[dimensions=(1,)] dru
                      drw:f64[3,1] = slice[
                        limit_indices=(3, 3)
                        start_indices=(0, 2)
                        strides=None
                      ] drl
                      drx:f64[3] = squeeze[dimensions=(1,)] drw
                      dry:f64[1,3] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 3)
                      ] drx
                      drz:f64[400,13,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(400, 13, 1)
                      ] drp
                      dsa:f64[1,1,3] = broadcast_in_dim[
                        broadcast_dimensions=(1, 2)
                        shape=(1, 1, 3)
                      ] dry
                      dsb:f64[400,13,3] = mul drz dsa
                      dsc:f64[1,3] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 3)
                      ] drv
                      dsd:f64[400,13,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(400, 13, 1)
                      ] drr
                      dse:f64[1,1,3] = broadcast_in_dim[
                        broadcast_dimensions=(1, 2)
                        shape=(1, 1, 3)
                      ] dsc
                      dsf:f64[400,13,3] = mul dsd dse
                      dsg:f64[400,13,3] = sub dsb dsf
                      dsh:f64[1,3] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 3)
                      ] drt
                      dsi:f64[400,13,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(400, 13, 1)
                      ] drr
                      dsj:f64[1,1,3] = broadcast_in_dim[
                        broadcast_dimensions=(1, 2)
                        shape=(1, 1, 3)
                      ] dsh
                      dsk:f64[400,13,3] = mul dsi dsj
                      dsl:f64[1,3] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 3)
                      ] drx
                      dsm:f64[400,13,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(400, 13, 1)
                      ] drn
                      dsn:f64[1,1,3] = broadcast_in_dim[
                        broadcast_dimensions=(1, 2)
                        shape=(1, 1, 3)
                      ] dsl
                      dso:f64[400,13,3] = mul dsm dsn
                      dsp:f64[400,13,3] = sub dsk dso
                      dsq:f64[1,3] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 3)
                      ] drv
                      dsr:f64[400,13,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(400, 13, 1)
                      ] drn
                      dss:f64[1,1,3] = broadcast_in_dim[
                        broadcast_dimensions=(1, 2)
                        shape=(1, 1, 3)
                      ] dsq
                      dst:f64[400,13,3] = mul dsr dss
                      dsu:f64[1,3] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 3)
                      ] drt
                      dsv:f64[400,13,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(400, 13, 1)
                      ] drp
                      dsw:f64[1,1,3] = broadcast_in_dim[
                        broadcast_dimensions=(1, 2)
                        shape=(1, 1, 3)
                      ] dsu
                      dsx:f64[400,13,3] = mul dsv dsw
                      dsy:f64[400,13,3] = sub dst dsx
                      dsz:f64[400,13,1,3] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1, 3)
                        shape=(400, 13, 1, 3)
                      ] dsg
                      dta:f64[400,13,1,3] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1, 3)
                        shape=(400, 13, 1, 3)
                      ] dsp
                      dtb:f64[400,13,1,3] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1, 3)
                        shape=(400, 13, 1, 3)
                      ] dsy
                      dtc:f64[400,13,3,3] = concatenate[dimension=2] dsz dta dtb
                      dtd:f64[400,13,3,3] = transpose[permutation=(0, 1, 3, 2)] dtc
                    in (dtd,) }
                ] drc dri
                dte:f64[400,13] = dot_general[
                  dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
                  preferred_element_type=float64
                ] dqe dqe
                dtf:f64[400,13,1] = slice[
                  limit_indices=(400, 13, 1)
                  start_indices=(0, 0, 0)
                  strides=(1, 1, 1)
                ] dqe
                dtg:f64[400,13] = squeeze[dimensions=(2,)] dtf
                dth:f64[400,13,1] = slice[
                  limit_indices=(400, 13, 2)
                  start_indices=(0, 0, 1)
                  strides=(1, 1, 1)
                ] dqe
                dti:f64[400,13] = squeeze[dimensions=(2,)] dth
                dtj:f64[400,13,1] = slice[
                  limit_indices=(400, 13, 3)
                  start_indices=(0, 0, 2)
                  strides=(1, 1, 1)
                ] dqe
                dtk:f64[400,13] = squeeze[dimensions=(2,)] dtj
                dtl:f64[400,13,1] = slice[
                  limit_indices=(400, 13, 4)
                  start_indices=(0, 0, 3)
                  strides=(1, 1, 1)
                ] dqe
                dtm:f64[400,13] = squeeze[dimensions=(2,)] dtl
                dtn:f64[400,13] = div 2.0 dte
                dto:f64[400,13] = mul dti dtn
                dtp:f64[400,13] = mul dtk dtn
                dtq:f64[400,13] = mul dtm dtn
                dtr:f64[400,13] = mul dtg dto
                dts:f64[400,13] = mul dtg dtp
                dtt:f64[400,13] = mul dtg dtq
                dtu:f64[400,13] = mul dti dto
                dtv:f64[400,13] = mul dti dtp
                dtw:f64[400,13] = mul dti dtq
                dtx:f64[400,13] = mul dtk dtp
                dty:f64[400,13] = mul dtk dtq
                dtz:f64[400,13] = mul dtm dtq
                dua:f64[400,13] = add dtx dtz
                dub:f64[400,13] = sub 1.0 dua
                duc:f64[400,13] = sub dtv dtt
                dud:f64[400,13] = add dtw dts
                due:f64[400,13,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 13, 1)
                ] dub
                duf:f64[400,13,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 13, 1)
                ] duc
                dug:f64[400,13,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 13, 1)
                ] dud
                duh:f64[400,13,3] = concatenate[dimension=2] due duf dug
                dui:f64[400,13] = add dtv dtt
                duj:f64[400,13] = add dtu dtz
                duk:f64[400,13] = sub 1.0 duj
                dul:f64[400,13] = sub dty dtr
                dum:f64[400,13,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 13, 1)
                ] dui
                dun:f64[400,13,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 13, 1)
                ] duk
                duo:f64[400,13,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 13, 1)
                ] dul
                dup:f64[400,13,3] = concatenate[dimension=2] dum dun duo
                duq:f64[400,13] = sub dtw dts
                dur:f64[400,13] = add dty dtr
                dus:f64[400,13] = add dtu dtx
                dut:f64[400,13] = sub 1.0 dus
                duu:f64[400,13,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 13, 1)
                ] duq
                duv:f64[400,13,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 13, 1)
                ] dur
                duw:f64[400,13,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 13, 1)
                ] dut
                dux:f64[400,13,3] = concatenate[dimension=2] duu duv duw
                duy:f64[400,13,1,3] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1, 3)
                  shape=(400, 13, 1, 3)
                ] duh
                duz:f64[400,13,1,3] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1, 3)
                  shape=(400, 13, 1, 3)
                ] dup
                dva:f64[400,13,1,3] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1, 3)
                  shape=(400, 13, 1, 3)
                ] dux
                dvb:f64[400,13,3,3] = concatenate[dimension=2] duy duz dva
                dvc:f64[13,400,3,3] = dot_general[
                  dimension_numbers=(([3], [1]), ([1], [0]))
                  preferred_element_type=float64
                ] dvb bzg
                dvd:f64[400,13,3,3] = transpose[permutation=(0, 1, 3, 2)] dvb
                dve:f64[400,13,3,3] = dot_general[
                  dimension_numbers=(([3], [2]), ([1, 0], [0, 1]))
                  preferred_element_type=float64
                ] dvc dvd
                dvf:f64[400,13,3,3] = transpose[permutation=(0, 1, 3, 2)] drj
                dvg:f64[400,13,3,3] = dot_general[
                  dimension_numbers=(([3], [2]), ([0, 1], [0, 1]))
                  preferred_element_type=float64
                ] drj dvf
                dvh:f64[13,1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(13, 1, 1)
                ] bzf
                dvi:f64[1,13,1,1] = broadcast_in_dim[
                  broadcast_dimensions=(1, 2, 3)
                  shape=(1, 13, 1, 1)
                ] dvh
                dvj:f64[400,13,3,3] = mul dvg dvi
                dvk:f64[400,13,3,3] = add dve dvj
                dvl:f64[13,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(13, 1)
                ] bzf
                dvm:f64[1,13,1] = broadcast_in_dim[
                  broadcast_dimensions=(1, 2)
                  shape=(1, 13, 1)
                ] dvl
                dvn:f64[400,13,3] = mul drc dvm
                dvo:f64[1,3] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1, 3)
                ] 0.0
                dvp:f64[1,1,1,4] = reshape[
                  dimensions=None
                  new_sizes=(1, 1, 1, 4)
                ] bzi
                dvq:f64[1,4] = reshape[dimensions=None new_sizes=(1, 4)] dvp
                dvr:f64[400,1,3] = broadcast_in_dim[
                  broadcast_dimensions=(1, 2)
                  shape=(400, 1, 3)
                ] dvo
                dvs:f64[400,14,3] = concatenate[dimension=1] dii dvr
                dvt:f64[400,1,4] = broadcast_in_dim[
                  broadcast_dimensions=(1, 2)
                  shape=(400, 1, 4)
                ] dvq
                dvu:f64[400,14,4] = concatenate[dimension=1] dla dvt
                dvv:f64[400,13,3] = pjit[name=_take jaxpr=_take5] dvs bzh
                dvw:f64[400,13,4] = pjit[
                  name=_take
                  jaxpr={ lambda ; dvx:f64[400,14,4] dvy:i32[13]. let
                      dvz:i32[13] = pjit[name=remainder jaxpr=remainder5] dvy 14
                      dwa:i32[13,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(13, 1)
                      ] dvz
                      dwb:f64[400,13,4] = gather[
                        dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 2), collapsed_slice_dims=(1,), start_index_map=(1,))
                        fill_value=None
                        indices_are_sorted=False
                        mode=GatherScatterMode.PROMISE_IN_BOUNDS
                        slice_sizes=(400, 1, 4)
                        unique_indices=False
                      ] dvx dwa
                    in (dwb,) }
                ] dvu bzh
                dwc:f64[400,13,1] = slice[
                  limit_indices=(400, 13, 1)
                  start_indices=(0, 0, 0)
                  strides=None
                ] dvw
                dwd:f64[400,13] = squeeze[dimensions=(2,)] dwc
                dwe:f64[400,13,3] = slice[
                  limit_indices=(400, 13, 4)
                  start_indices=(0, 0, 1)
                  strides=None
                ] dvw
                dwf:f64[13,400] = dot_general[
                  dimension_numbers=(([2], [1]), ([1], [0]))
                  preferred_element_type=float64
                ] dwe byr
                dwg:f64[400,13] = transpose[permutation=(1, 0)] dwf
                dwh:f64[400,13,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 13, 1)
                ] dwg
                dwi:f64[400,13,3] = mul dwh dwe
                dwj:f64[400,13,3] = mul 2.0 dwi
                dwk:f64[400,13] = mul dwd dwd
                dwl:f64[400,13] = dot_general[
                  dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
                  preferred_element_type=float64
                ] dwe dwe
                dwm:f64[400,13] = sub dwk dwl
                dwn:f64[400,13,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 13, 1)
                ] dwm
                dwo:f64[1,13,3] = broadcast_in_dim[
                  broadcast_dimensions=(1, 2)
                  shape=(1, 13, 3)
                ] byr
                dwp:f64[400,13,3] = mul dwn dwo
                dwq:f64[400,13,3] = add dwj dwp
                dwr:f64[400,13] = mul 2.0 dwd
                dws:f64[400,13,3] = pjit[name=cross jaxpr=cross1] dwe byr
                dwt:f64[400,13,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 13, 1)
                ] dwr
                dwu:f64[400,13,3] = mul dwt dws
                dwv:f64[400,13,3] = add dwq dwu
                dww:f64[400,13,3] = add dvv dwv
                dwx:f64[400,13,1] = slice[
                  limit_indices=(400, 13, 1)
                  start_indices=(0, 0, 0)
                  strides=None
                ] dvw
                dwy:f64[400,13] = squeeze[dimensions=(2,)] dwx
                dwz:f64[13,1] = slice[
                  limit_indices=(13, 1)
                  start_indices=(0, 0)
                  strides=None
                ] byq
                dxa:f64[13] = squeeze[dimensions=(1,)] dwz
                dxb:f64[1,13] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 13)
                ] dxa
                dxc:f64[400,13] = mul dwy dxb
                dxd:f64[400,13,1] = slice[
                  limit_indices=(400, 13, 2)
                  start_indices=(0, 0, 1)
                  strides=None
                ] dvw
                dxe:f64[400,13] = squeeze[dimensions=(2,)] dxd
                dxf:f64[13,1] = slice[
                  limit_indices=(13, 2)
                  start_indices=(0, 1)
                  strides=None
                ] byq
                dxg:f64[13] = squeeze[dimensions=(1,)] dxf
                dxh:f64[1,13] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 13)
                ] dxg
                dxi:f64[400,13] = mul dxe dxh
                dxj:f64[400,13] = sub dxc dxi
                dxk:f64[400,13,1] = slice[
                  limit_indices=(400, 13, 3)
                  start_indices=(0, 0, 2)
                  strides=None
                ] dvw
                dxl:f64[400,13] = squeeze[dimensions=(2,)] dxk
                dxm:f64[13,1] = slice[
                  limit_indices=(13, 3)
                  start_indices=(0, 2)
                  strides=None
                ] byq
                dxn:f64[13] = squeeze[dimensions=(1,)] dxm
                dxo:f64[1,13] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 13)
                ] dxn
                dxp:f64[400,13] = mul dxl dxo
                dxq:f64[400,13] = sub dxj dxp
                dxr:f64[400,13,1] = slice[
                  limit_indices=(400, 13, 4)
                  start_indices=(0, 0, 3)
                  strides=None
                ] dvw
                dxs:f64[400,13] = squeeze[dimensions=(2,)] dxr
                dxt:f64[13,1] = slice[
                  limit_indices=(13, 4)
                  start_indices=(0, 3)
                  strides=None
                ] byq
                dxu:f64[13] = squeeze[dimensions=(1,)] dxt
                dxv:f64[1,13] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 13)
                ] dxu
                dxw:f64[400,13] = mul dxs dxv
                dxx:f64[400,13] = sub dxq dxw
                dxy:f64[400,13,1] = slice[
                  limit_indices=(400, 13, 1)
                  start_indices=(0, 0, 0)
                  strides=None
                ] dvw
                dxz:f64[400,13] = squeeze[dimensions=(2,)] dxy
                dya:f64[13,1] = slice[
                  limit_indices=(13, 2)
                  start_indices=(0, 1)
                  strides=None
                ] byq
                dyb:f64[13] = squeeze[dimensions=(1,)] dya
                dyc:f64[1,13] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 13)
                ] dyb
                dyd:f64[400,13] = mul dxz dyc
                dye:f64[400,13,1] = slice[
                  limit_indices=(400, 13, 2)
                  start_indices=(0, 0, 1)
                  strides=None
                ] dvw
                dyf:f64[400,13] = squeeze[dimensions=(2,)] dye
                dyg:f64[13,1] = slice[
                  limit_indices=(13, 1)
                  start_indices=(0, 0)
                  strides=None
                ] byq
                dyh:f64[13] = squeeze[dimensions=(1,)] dyg
                dyi:f64[1,13] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 13)
                ] dyh
                dyj:f64[400,13] = mul dyf dyi
                dyk:f64[400,13] = add dyd dyj
                dyl:f64[400,13,1] = slice[
                  limit_indices=(400, 13, 3)
                  start_indices=(0, 0, 2)
                  strides=None
                ] dvw
                dym:f64[400,13] = squeeze[dimensions=(2,)] dyl
                dyn:f64[13,1] = slice[
                  limit_indices=(13, 4)
                  start_indices=(0, 3)
                  strides=None
                ] byq
                dyo:f64[13] = squeeze[dimensions=(1,)] dyn
                dyp:f64[1,13] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 13)
                ] dyo
                dyq:f64[400,13] = mul dym dyp
                dyr:f64[400,13] = add dyk dyq
                dys:f64[400,13,1] = slice[
                  limit_indices=(400, 13, 4)
                  start_indices=(0, 0, 3)
                  strides=None
                ] dvw
                dyt:f64[400,13] = squeeze[dimensions=(2,)] dys
                dyu:f64[13,1] = slice[
                  limit_indices=(13, 3)
                  start_indices=(0, 2)
                  strides=None
                ] byq
                dyv:f64[13] = squeeze[dimensions=(1,)] dyu
                dyw:f64[1,13] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 13)
                ] dyv
                dyx:f64[400,13] = mul dyt dyw
                dyy:f64[400,13] = sub dyr dyx
                dyz:f64[400,13,1] = slice[
                  limit_indices=(400, 13, 1)
                  start_indices=(0, 0, 0)
                  strides=None
                ] dvw
                dza:f64[400,13] = squeeze[dimensions=(2,)] dyz
                dzb:f64[13,1] = slice[
                  limit_indices=(13, 3)
                  start_indices=(0, 2)
                  strides=None
                ] byq
                dzc:f64[13] = squeeze[dimensions=(1,)] dzb
                dzd:f64[1,13] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 13)
                ] dzc
                dze:f64[400,13] = mul dza dzd
                dzf:f64[400,13,1] = slice[
                  limit_indices=(400, 13, 2)
                  start_indices=(0, 0, 1)
                  strides=None
                ] dvw
                dzg:f64[400,13] = squeeze[dimensions=(2,)] dzf
                dzh:f64[13,1] = slice[
                  limit_indices=(13, 4)
                  start_indices=(0, 3)
                  strides=None
                ] byq
                dzi:f64[13] = squeeze[dimensions=(1,)] dzh
                dzj:f64[1,13] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 13)
                ] dzi
                dzk:f64[400,13] = mul dzg dzj
                dzl:f64[400,13] = sub dze dzk
                dzm:f64[400,13,1] = slice[
                  limit_indices=(400, 13, 3)
                  start_indices=(0, 0, 2)
                  strides=None
                ] dvw
                dzn:f64[400,13] = squeeze[dimensions=(2,)] dzm
                dzo:f64[13,1] = slice[
                  limit_indices=(13, 1)
                  start_indices=(0, 0)
                  strides=None
                ] byq
                dzp:f64[13] = squeeze[dimensions=(1,)] dzo
                dzq:f64[1,13] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 13)
                ] dzp
                dzr:f64[400,13] = mul dzn dzq
                dzs:f64[400,13] = add dzl dzr
                dzt:f64[400,13,1] = slice[
                  limit_indices=(400, 13, 4)
                  start_indices=(0, 0, 3)
                  strides=None
                ] dvw
                dzu:f64[400,13] = squeeze[dimensions=(2,)] dzt
                dzv:f64[13,1] = slice[
                  limit_indices=(13, 2)
                  start_indices=(0, 1)
                  strides=None
                ] byq
                dzw:f64[13] = squeeze[dimensions=(1,)] dzv
                dzx:f64[1,13] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 13)
                ] dzw
                dzy:f64[400,13] = mul dzu dzx
                dzz:f64[400,13] = add dzs dzy
                eaa:f64[400,13,1] = slice[
                  limit_indices=(400, 13, 1)
                  start_indices=(0, 0, 0)
                  strides=None
                ] dvw
                eab:f64[400,13] = squeeze[dimensions=(2,)] eaa
                eac:f64[13,1] = slice[
                  limit_indices=(13, 4)
                  start_indices=(0, 3)
                  strides=None
                ] byq
                ead:f64[13] = squeeze[dimensions=(1,)] eac
                eae:f64[1,13] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 13)
                ] ead
                eaf:f64[400,13] = mul eab eae
                eag:f64[400,13,1] = slice[
                  limit_indices=(400, 13, 2)
                  start_indices=(0, 0, 1)
                  strides=None
                ] dvw
                eah:f64[400,13] = squeeze[dimensions=(2,)] eag
                eai:f64[13,1] = slice[
                  limit_indices=(13, 3)
                  start_indices=(0, 2)
                  strides=None
                ] byq
                eaj:f64[13] = squeeze[dimensions=(1,)] eai
                eak:f64[1,13] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 13)
                ] eaj
                eal:f64[400,13] = mul eah eak
                eam:f64[400,13] = add eaf eal
                ean:f64[400,13,1] = slice[
                  limit_indices=(400, 13, 3)
                  start_indices=(0, 0, 2)
                  strides=None
                ] dvw
                eao:f64[400,13] = squeeze[dimensions=(2,)] ean
                eap:f64[13,1] = slice[
                  limit_indices=(13, 2)
                  start_indices=(0, 1)
                  strides=None
                ] byq
                eaq:f64[13] = squeeze[dimensions=(1,)] eap
                ear:f64[1,13] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 13)
                ] eaq
                eas:f64[400,13] = mul eao ear
                eat:f64[400,13] = sub eam eas
                eau:f64[400,13,1] = slice[
                  limit_indices=(400, 13, 4)
                  start_indices=(0, 0, 3)
                  strides=None
                ] dvw
                eav:f64[400,13] = squeeze[dimensions=(2,)] eau
                eaw:f64[13,1] = slice[
                  limit_indices=(13, 1)
                  start_indices=(0, 0)
                  strides=None
                ] byq
                eax:f64[13] = squeeze[dimensions=(1,)] eaw
                eay:f64[1,13] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 13)
                ] eax
                eaz:f64[400,13] = mul eav eay
                eba:f64[400,13] = add eat eaz
                ebb:f64[400,13,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 13, 1)
                ] dxx
                ebc:f64[400,13,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 13, 1)
                ] dyy
                ebd:f64[400,13,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 13, 1)
                ] dzz
                ebe:f64[400,13,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 13, 1)
                ] eba
                ebf:f64[400,13,4] = concatenate[dimension=2] ebb ebc ebd ebe
                ebg:f64[400,13,1] = slice[
                  limit_indices=(400, 13, 1)
                  start_indices=(0, 0, 0)
                  strides=None
                ] ebf
                ebh:f64[400,13] = squeeze[dimensions=(2,)] ebg
                ebi:f64[400,13,3] = slice[
                  limit_indices=(400, 13, 4)
                  start_indices=(0, 0, 1)
                  strides=None
                ] ebf
                ebj:f64[13,400] = dot_general[
                  dimension_numbers=(([2], [1]), ([1], [0]))
                  preferred_element_type=float64
                ] ebi byo
                ebk:f64[400,13] = transpose[permutation=(1, 0)] ebj
                ebl:f64[400,13,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 13, 1)
                ] ebk
                ebm:f64[400,13,3] = mul ebl ebi
                ebn:f64[400,13,3] = mul 2.0 ebm
                ebo:f64[400,13] = mul ebh ebh
                ebp:f64[400,13] = dot_general[
                  dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
                  preferred_element_type=float64
                ] ebi ebi
                ebq:f64[400,13] = sub ebo ebp
                ebr:f64[400,13,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 13, 1)
                ] ebq
                ebs:f64[1,13,3] = broadcast_in_dim[
                  broadcast_dimensions=(1, 2)
                  shape=(1, 13, 3)
                ] byo
                ebt:f64[400,13,3] = mul ebr ebs
                ebu:f64[400,13,3] = add ebn ebt
                ebv:f64[400,13] = mul 2.0 ebh
                ebw:f64[400,13,3] = pjit[name=cross jaxpr=cross1] ebi byo
                ebx:f64[400,13,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 13, 1)
                ] ebv
                eby:f64[400,13,3] = mul ebx ebw
                ebz:f64[400,13,3] = add ebu eby
                eca:f64[400,13,3] = add dww ebz
                ecb:f64[400,13,1] = slice[
                  limit_indices=(400, 13, 1)
                  start_indices=(0, 0, 0)
                  strides=None
                ] ebf
                ecc:f64[400,13] = squeeze[dimensions=(2,)] ecb
                ecd:f64[13,1] = slice[
                  limit_indices=(13, 1)
                  start_indices=(0, 0)
                  strides=None
                ] byp
                ece:f64[13] = squeeze[dimensions=(1,)] ecd
                ecf:f64[1,13] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 13)
                ] ece
                ecg:f64[400,13] = mul ecc ecf
                ech:f64[400,13,1] = slice[
                  limit_indices=(400, 13, 2)
                  start_indices=(0, 0, 1)
                  strides=None
                ] ebf
                eci:f64[400,13] = squeeze[dimensions=(2,)] ech
                ecj:f64[13,1] = slice[
                  limit_indices=(13, 2)
                  start_indices=(0, 1)
                  strides=None
                ] byp
                eck:f64[13] = squeeze[dimensions=(1,)] ecj
                ecl:f64[1,13] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 13)
                ] eck
                ecm:f64[400,13] = mul eci ecl
                ecn:f64[400,13] = sub ecg ecm
                eco:f64[400,13,1] = slice[
                  limit_indices=(400, 13, 3)
                  start_indices=(0, 0, 2)
                  strides=None
                ] ebf
                ecp:f64[400,13] = squeeze[dimensions=(2,)] eco
                ecq:f64[13,1] = slice[
                  limit_indices=(13, 3)
                  start_indices=(0, 2)
                  strides=None
                ] byp
                ecr:f64[13] = squeeze[dimensions=(1,)] ecq
                ecs:f64[1,13] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 13)
                ] ecr
                ect:f64[400,13] = mul ecp ecs
                ecu:f64[400,13] = sub ecn ect
                ecv:f64[400,13,1] = slice[
                  limit_indices=(400, 13, 4)
                  start_indices=(0, 0, 3)
                  strides=None
                ] ebf
                ecw:f64[400,13] = squeeze[dimensions=(2,)] ecv
                ecx:f64[13,1] = slice[
                  limit_indices=(13, 4)
                  start_indices=(0, 3)
                  strides=None
                ] byp
                ecy:f64[13] = squeeze[dimensions=(1,)] ecx
                ecz:f64[1,13] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 13)
                ] ecy
                eda:f64[400,13] = mul ecw ecz
                edb:f64[400,13] = sub ecu eda
                edc:f64[400,13,1] = slice[
                  limit_indices=(400, 13, 1)
                  start_indices=(0, 0, 0)
                  strides=None
                ] ebf
                edd:f64[400,13] = squeeze[dimensions=(2,)] edc
                ede:f64[13,1] = slice[
                  limit_indices=(13, 2)
                  start_indices=(0, 1)
                  strides=None
                ] byp
                edf:f64[13] = squeeze[dimensions=(1,)] ede
                edg:f64[1,13] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 13)
                ] edf
                edh:f64[400,13] = mul edd edg
                edi:f64[400,13,1] = slice[
                  limit_indices=(400, 13, 2)
                  start_indices=(0, 0, 1)
                  strides=None
                ] ebf
                edj:f64[400,13] = squeeze[dimensions=(2,)] edi
                edk:f64[13,1] = slice[
                  limit_indices=(13, 1)
                  start_indices=(0, 0)
                  strides=None
                ] byp
                edl:f64[13] = squeeze[dimensions=(1,)] edk
                edm:f64[1,13] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 13)
                ] edl
                edn:f64[400,13] = mul edj edm
                edo:f64[400,13] = add edh edn
                edp:f64[400,13,1] = slice[
                  limit_indices=(400, 13, 3)
                  start_indices=(0, 0, 2)
                  strides=None
                ] ebf
                edq:f64[400,13] = squeeze[dimensions=(2,)] edp
                edr:f64[13,1] = slice[
                  limit_indices=(13, 4)
                  start_indices=(0, 3)
                  strides=None
                ] byp
                eds:f64[13] = squeeze[dimensions=(1,)] edr
                edt:f64[1,13] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 13)
                ] eds
                edu:f64[400,13] = mul edq edt
                edv:f64[400,13] = add edo edu
                edw:f64[400,13,1] = slice[
                  limit_indices=(400, 13, 4)
                  start_indices=(0, 0, 3)
                  strides=None
                ] ebf
                edx:f64[400,13] = squeeze[dimensions=(2,)] edw
                edy:f64[13,1] = slice[
                  limit_indices=(13, 3)
                  start_indices=(0, 2)
                  strides=None
                ] byp
                edz:f64[13] = squeeze[dimensions=(1,)] edy
                eea:f64[1,13] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 13)
                ] edz
                eeb:f64[400,13] = mul edx eea
                eec:f64[400,13] = sub edv eeb
                eed:f64[400,13,1] = slice[
                  limit_indices=(400, 13, 1)
                  start_indices=(0, 0, 0)
                  strides=None
                ] ebf
                eee:f64[400,13] = squeeze[dimensions=(2,)] eed
                eef:f64[13,1] = slice[
                  limit_indices=(13, 3)
                  start_indices=(0, 2)
                  strides=None
                ] byp
                eeg:f64[13] = squeeze[dimensions=(1,)] eef
                eeh:f64[1,13] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 13)
                ] eeg
                eei:f64[400,13] = mul eee eeh
                eej:f64[400,13,1] = slice[
                  limit_indices=(400, 13, 2)
                  start_indices=(0, 0, 1)
                  strides=None
                ] ebf
                eek:f64[400,13] = squeeze[dimensions=(2,)] eej
                eel:f64[13,1] = slice[
                  limit_indices=(13, 4)
                  start_indices=(0, 3)
                  strides=None
                ] byp
                eem:f64[13] = squeeze[dimensions=(1,)] eel
                een:f64[1,13] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 13)
                ] eem
                eeo:f64[400,13] = mul eek een
                eep:f64[400,13] = sub eei eeo
                eeq:f64[400,13,1] = slice[
                  limit_indices=(400, 13, 3)
                  start_indices=(0, 0, 2)
                  strides=None
                ] ebf
                eer:f64[400,13] = squeeze[dimensions=(2,)] eeq
                ees:f64[13,1] = slice[
                  limit_indices=(13, 1)
                  start_indices=(0, 0)
                  strides=None
                ] byp
                eet:f64[13] = squeeze[dimensions=(1,)] ees
                eeu:f64[1,13] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 13)
                ] eet
                eev:f64[400,13] = mul eer eeu
                eew:f64[400,13] = add eep eev
                eex:f64[400,13,1] = slice[
                  limit_indices=(400, 13, 4)
                  start_indices=(0, 0, 3)
                  strides=None
                ] ebf
                eey:f64[400,13] = squeeze[dimensions=(2,)] eex
                eez:f64[13,1] = slice[
                  limit_indices=(13, 2)
                  start_indices=(0, 1)
                  strides=None
                ] byp
                efa:f64[13] = squeeze[dimensions=(1,)] eez
                efb:f64[1,13] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 13)
                ] efa
                efc:f64[400,13] = mul eey efb
                efd:f64[400,13] = add eew efc
                efe:f64[400,13,1] = slice[
                  limit_indices=(400, 13, 1)
                  start_indices=(0, 0, 0)
                  strides=None
                ] ebf
                eff:f64[400,13] = squeeze[dimensions=(2,)] efe
                efg:f64[13,1] = slice[
                  limit_indices=(13, 4)
                  start_indices=(0, 3)
                  strides=None
                ] byp
                efh:f64[13] = squeeze[dimensions=(1,)] efg
                efi:f64[1,13] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 13)
                ] efh
                efj:f64[400,13] = mul eff efi
                efk:f64[400,13,1] = slice[
                  limit_indices=(400, 13, 2)
                  start_indices=(0, 0, 1)
                  strides=None
                ] ebf
                efl:f64[400,13] = squeeze[dimensions=(2,)] efk
                efm:f64[13,1] = slice[
                  limit_indices=(13, 3)
                  start_indices=(0, 2)
                  strides=None
                ] byp
                efn:f64[13] = squeeze[dimensions=(1,)] efm
                efo:f64[1,13] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 13)
                ] efn
                efp:f64[400,13] = mul efl efo
                efq:f64[400,13] = add efj efp
                efr:f64[400,13,1] = slice[
                  limit_indices=(400, 13, 3)
                  start_indices=(0, 0, 2)
                  strides=None
                ] ebf
                efs:f64[400,13] = squeeze[dimensions=(2,)] efr
                eft:f64[13,1] = slice[
                  limit_indices=(13, 2)
                  start_indices=(0, 1)
                  strides=None
                ] byp
                efu:f64[13] = squeeze[dimensions=(1,)] eft
                efv:f64[1,13] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 13)
                ] efu
                efw:f64[400,13] = mul efs efv
                efx:f64[400,13] = sub efq efw
                efy:f64[400,13,1] = slice[
                  limit_indices=(400, 13, 4)
                  start_indices=(0, 0, 3)
                  strides=None
                ] ebf
                efz:f64[400,13] = squeeze[dimensions=(2,)] efy
                ega:f64[13,1] = slice[
                  limit_indices=(13, 1)
                  start_indices=(0, 0)
                  strides=None
                ] byp
                egb:f64[13] = squeeze[dimensions=(1,)] ega
                egc:f64[1,13] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 13)
                ] egb
                egd:f64[400,13] = mul efz egc
                ege:f64[400,13] = add efx egd
                egf:f64[400,13,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 13, 1)
                ] edb
                egg:f64[400,13,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 13, 1)
                ] eec
                egh:f64[400,13,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 13, 1)
                ] efd
                egi:f64[400,13,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 13, 1)
                ] ege
                egj:f64[400,13,4] = concatenate[dimension=2] egf egg egh egi
                egk:f64[6,3] = slice[
                  limit_indices=(6, 3)
                  start_indices=(0, 0)
                  strides=None
                ] bym
                egl:f64[6,3] = slice[
                  limit_indices=(6, 3)
                  start_indices=(0, 0)
                  strides=None
                ] byn
                egm:f64[12,3] = slice[
                  limit_indices=(18, 3)
                  start_indices=(6, 0)
                  strides=None
                ] bym
                egn:f64[12,3] = slice[
                  limit_indices=(18, 3)
                  start_indices=(6, 0)
                  strides=None
                ] byn
                ego:f64[12,1,3] = reshape[dimensions=None new_sizes=(12, 1, 3)] egm
                egp:f64[12,1,3] = reshape[dimensions=None new_sizes=(12, 1, 3)] egn
                egq:f64[12,3] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(12, 3)
                ] 0.0
                egr:f64[1,1,1,4] = reshape[
                  dimensions=None
                  new_sizes=(1, 1, 1, 4)
                ] bzj
                egs:f64[1,1,4] = squeeze[dimensions=(0,)] egr
                egt:f64[12,1,1,4] = broadcast_in_dim[
                  broadcast_dimensions=(1, 2, 3)
                  shape=(12, 1, 1, 4)
                ] egs
                egu:f64[12,4] = reshape[dimensions=None new_sizes=(12, 4)] egt
                egv:f64[12,3] = pjit[name=_take jaxpr=_take6] ego 0
                egw:f64[12,3] = pjit[name=_take jaxpr=_take6] egp 0
                egx:f64[12,1] = slice[
                  limit_indices=(12, 1)
                  start_indices=(0, 0)
                  strides=None
                ] egu
                egy:f64[12] = squeeze[dimensions=(1,)] egx
                egz:f64[12,3] = slice[
                  limit_indices=(12, 4)
                  start_indices=(0, 1)
                  strides=None
                ] egu
                eha:f64[12] = dot_general[
                  dimension_numbers=(([1], [1]), ([0], [0]))
                  preferred_element_type=float64
                ] egz egv
                ehb:f64[12,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(12, 1)
                ] eha
                ehc:f64[12,3] = mul ehb egz
                ehd:f64[12,3] = mul 2.0 ehc
                ehe:f64[12] = mul egy egy
                ehf:f64[12] = dot_general[
                  dimension_numbers=(([1], [1]), ([0], [0]))
                  preferred_element_type=float64
                ] egz egz
                ehg:f64[12] = sub ehe ehf
                ehh:f64[12,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(12, 1)
                ] ehg
                ehi:f64[12,3] = mul ehh egv
                ehj:f64[12,3] = add ehd ehi
                ehk:f64[12] = mul 2.0 egy
                ehl:f64[12,3] = pjit[name=cross jaxpr=cross3] egz egv
                ehm:f64[12,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(12, 1)
                ] ehk
                ehn:f64[12,3] = mul ehm ehl
                eho:f64[12,3] = add ehj ehn
                ehp:f64[12,1] = slice[
                  limit_indices=(12, 1)
                  start_indices=(0, 0)
                  strides=None
                ] egu
                ehq:f64[12] = squeeze[dimensions=(1,)] ehp
                ehr:f64[12,3] = slice[
                  limit_indices=(12, 4)
                  start_indices=(0, 1)
                  strides=None
                ] egu
                ehs:f64[12] = dot_general[
                  dimension_numbers=(([1], [1]), ([0], [0]))
                  preferred_element_type=float64
                ] ehr egw
                eht:f64[12,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(12, 1)
                ] ehs
                ehu:f64[12,3] = mul eht ehr
                ehv:f64[12,3] = mul 2.0 ehu
                ehw:f64[12] = mul ehq ehq
                ehx:f64[12] = dot_general[
                  dimension_numbers=(([1], [1]), ([0], [0]))
                  preferred_element_type=float64
                ] ehr ehr
                ehy:f64[12] = sub ehw ehx
                ehz:f64[12,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(12, 1)
                ] ehy
                eia:f64[12,3] = mul ehz egw
                eib:f64[12,3] = add ehv eia
                eic:f64[12] = mul 2.0 ehq
                eid:f64[12,3] = pjit[name=cross jaxpr=cross3] ehr egw
                eie:f64[12,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(12, 1)
                ] eic
                eif:f64[12,3] = mul eie eid
                eig:f64[12,3] = add eib eif
                eih:f64[12,3] = pjit[name=cross jaxpr=cross3] egq eho
                eii:f64[12,3] = add eig eih
                eij:f64[18,3] = concatenate[dimension=0] egk eho
                eik:f64[18,3] = concatenate[dimension=0] egl eii
                eil:f64[400,18,4] = pjit[
                  name=_take
                  jaxpr={ lambda ; eim:f64[400,13,4] ein:i64[18]. let
                      eio:i64[18] = pjit[name=remainder jaxpr=remainder7] ein 13
                      eip:i64[18,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(18, 1)
                      ] eio
                      eiq:f64[400,18,4] = gather[
                        dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 2), collapsed_slice_dims=(1,), start_index_map=(1,))
                        fill_value=None
                        indices_are_sorted=False
                        mode=GatherScatterMode.PROMISE_IN_BOUNDS
                        slice_sizes=(400, 1, 4)
                        unique_indices=False
                      ] eim eip
                    in (eiq,) }
                ] egj bzk
                eir:f64[400,18,1] = slice[
                  limit_indices=(400, 18, 1)
                  start_indices=(0, 0, 0)
                  strides=None
                ] eil
                eis:f64[400,18] = squeeze[dimensions=(2,)] eir
                eit:f64[400,18,3] = slice[
                  limit_indices=(400, 18, 4)
                  start_indices=(0, 0, 1)
                  strides=None
                ] eil
                eiu:f64[18,400] = dot_general[
                  dimension_numbers=(([2], [1]), ([1], [0]))
                  preferred_element_type=float64
                ] eit eij
                eiv:f64[400,18] = transpose[permutation=(1, 0)] eiu
                eiw:f64[400,18,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 18, 1)
                ] eiv
                eix:f64[400,18,3] = mul eiw eit
                eiy:f64[400,18,3] = mul 2.0 eix
                eiz:f64[400,18] = mul eis eis
                eja:f64[400,18] = dot_general[
                  dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
                  preferred_element_type=float64
                ] eit eit
                ejb:f64[400,18] = sub eiz eja
                ejc:f64[400,18,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 18, 1)
                ] ejb
                ejd:f64[1,18,3] = broadcast_in_dim[
                  broadcast_dimensions=(1, 2)
                  shape=(1, 18, 3)
                ] eij
                eje:f64[400,18,3] = mul ejc ejd
                ejf:f64[400,18,3] = add eiy eje
                ejg:f64[400,18] = mul 2.0 eis
                ejh:f64[400,18,3] = pjit[
                  name=cross
                  jaxpr={ lambda ; eji:f64[400,18,3] ejj:f64[18,3]. let
                      ejk:i32[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] 0
                      ejl:f64[400,18] = gather[
                        dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
                        fill_value=None
                        indices_are_sorted=True
                        mode=GatherScatterMode.PROMISE_IN_BOUNDS
                        slice_sizes=(400, 18, 1)
                        unique_indices=True
                      ] eji ejk
                      ejm:i32[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] 1
                      ejn:f64[400,18] = gather[
                        dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
                        fill_value=None
                        indices_are_sorted=True
                        mode=GatherScatterMode.PROMISE_IN_BOUNDS
                        slice_sizes=(400, 18, 1)
                        unique_indices=True
                      ] eji ejm
                      ejo:i32[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] 2
                      ejp:f64[400,18] = gather[
                        dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
                        fill_value=None
                        indices_are_sorted=True
                        mode=GatherScatterMode.PROMISE_IN_BOUNDS
                        slice_sizes=(400, 18, 1)
                        unique_indices=True
                      ] eji ejo
                      ejq:i32[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] 0
                      ejr:f64[18] = gather[
                        dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
                        fill_value=None
                        indices_are_sorted=True
                        mode=GatherScatterMode.PROMISE_IN_BOUNDS
                        slice_sizes=(18, 1)
                        unique_indices=True
                      ] ejj ejq
                      ejs:i32[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] 1
                      ejt:f64[18] = gather[
                        dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
                        fill_value=None
                        indices_are_sorted=True
                        mode=GatherScatterMode.PROMISE_IN_BOUNDS
                        slice_sizes=(18, 1)
                        unique_indices=True
                      ] ejj ejs
                      eju:i32[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] 2
                      ejv:f64[18] = gather[
                        dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
                        fill_value=None
                        indices_are_sorted=True
                        mode=GatherScatterMode.PROMISE_IN_BOUNDS
                        slice_sizes=(18, 1)
                        unique_indices=True
                      ] ejj eju
                      ejw:f64[1,18] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 18)
                      ] ejv
                      ejx:f64[400,18] = mul ejn ejw
                      ejy:f64[1,18] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 18)
                      ] ejt
                      ejz:f64[400,18] = mul ejp ejy
                      eka:f64[400,18] = sub ejx ejz
                      ekb:f64[1,18] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 18)
                      ] ejr
                      ekc:f64[400,18] = mul ejp ekb
                      ekd:f64[1,18] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 18)
                      ] ejv
                      eke:f64[400,18] = mul ejl ekd
                      ekf:f64[400,18] = sub ekc eke
                      ekg:f64[1,18] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 18)
                      ] ejt
                      ekh:f64[400,18] = mul ejl ekg
                      eki:f64[1,18] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 18)
                      ] ejr
                      ekj:f64[400,18] = mul ejn eki
                      ekk:f64[400,18] = sub ekh ekj
                      ekl:f64[400,18,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(400, 18, 1)
                      ] eka
                      ekm:f64[400,18,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(400, 18, 1)
                      ] ekf
                      ekn:f64[400,18,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(400, 18, 1)
                      ] ekk
                      eko:f64[400,18,3] = concatenate[dimension=2] ekl ekm ekn
                    in (eko,) }
                ] eit eij
                ekp:f64[400,18,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 18, 1)
                ] ejg
                ekq:f64[400,18,3] = mul ekp ejh
                ekr:f64[400,18,3] = add ejf ekq
                eks:f64[400,13,3] = sub drb eca
                ekt:f64[1,1,1,4] = reshape[
                  dimensions=None
                  new_sizes=(1, 1, 1, 4)
                ] bzl
                eku:f64[1,1,4] = squeeze[dimensions=(0,)] ekt
                ekv:f64[13,1,1,4] = broadcast_in_dim[
                  broadcast_dimensions=(1, 2, 3)
                  shape=(13, 1, 1, 4)
                ] eku
                ekw:f64[13,4] = reshape[dimensions=None new_sizes=(13, 4)] ekv
                ekx:f64[400,18,3] = pjit[name=_take jaxpr=_take7] eks bzm
                eky:f64[18,4] = pjit[
                  name=_take
                  jaxpr={ lambda ; ekz:f64[13,4] ela:i64[18]. let
                      elb:i64[18] = pjit[
                        name=remainder
                        jaxpr={ lambda ; mp:i64[18] mq:i64[]. let
                            mr:bool[] = eq mq 0
                            ms:i64[] = pjit[name=_where jaxpr=_where8] mr 1 mq
                            mt:i64[18] = rem mp ms
                            mu:bool[18] = ne mt 0
                            mv:bool[18] = lt mt 0
                            mw:bool[] = lt ms 0
                            mx:bool[18] = ne mv mw
                            my:bool[18] = and mx mu
                            mz:i64[18] = add mt ms
                            na:i64[18] = select_n my mt mz
                          in (na,) }
                      ] ela 13
                      elc:i64[18,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(18, 1)
                      ] elb
                      eld:f64[18,4] = gather[
                        dimension_numbers=GatherDimensionNumbers(offset_dims=(1,), collapsed_slice_dims=(0,), start_index_map=(0,))
                        fill_value=None
                        indices_are_sorted=False
                        mode=GatherScatterMode.PROMISE_IN_BOUNDS
                        slice_sizes=(1, 4)
                        unique_indices=False
                      ] ekz elc
                    in (eld,) }
                ] ekw bzm
                ele:f64[4] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] bzn
                elf:f64[1,4] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 4)
                ] ele
                elg:f64[18,4] = mul eky elf
                elh:f64[18,1] = slice[
                  limit_indices=(18, 1)
                  start_indices=(0, 0)
                  strides=None
                ] elg
                eli:f64[18] = squeeze[dimensions=(1,)] elh
                elj:f64[18,3] = slice[
                  limit_indices=(18, 4)
                  start_indices=(0, 1)
                  strides=None
                ] elg
                elk:f64[18,400] = dot_general[
                  dimension_numbers=(([1], [2]), ([0], [1]))
                  preferred_element_type=float64
                ] elj ekr
                ell:f64[400,18] = transpose[permutation=(1, 0)] elk
                elm:f64[400,18,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 18, 1)
                ] ell
                eln:f64[1,18,3] = broadcast_in_dim[
                  broadcast_dimensions=(1, 2)
                  shape=(1, 18, 3)
                ] elj
                elo:f64[400,18,3] = mul elm eln
                elp:f64[400,18,3] = mul 2.0 elo
                elq:f64[18] = mul eli eli
                elr:f64[18] = dot_general[
                  dimension_numbers=(([1], [1]), ([0], [0]))
                  preferred_element_type=float64
                ] elj elj
                els:f64[18] = sub elq elr
                elt:f64[18,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(18, 1)
                ] els
                elu:f64[1,18,1] = broadcast_in_dim[
                  broadcast_dimensions=(1, 2)
                  shape=(1, 18, 1)
                ] elt
                elv:f64[400,18,3] = mul elu ekr
                elw:f64[400,18,3] = add elp elv
                elx:f64[18] = mul 2.0 eli
                ely:f64[400,18,3] = pjit[name=cross jaxpr=cross4] elj ekr
                elz:f64[18,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(18, 1)
                ] elx
                ema:f64[1,18,1] = broadcast_in_dim[
                  broadcast_dimensions=(1, 2)
                  shape=(1, 18, 1)
                ] elz
                emb:f64[400,18,3] = mul ema ely
                emc:f64[400,18,3] = add elw emb
                emd:f64[400,18,3] = pjit[name=cross jaxpr=cross5] ekx ekr
                eme:f64[1,18,3] = broadcast_in_dim[
                  broadcast_dimensions=(1, 2)
                  shape=(1, 18, 3)
                ] eik
                emf:f64[400,18,3] = sub eme emd
                emg:f64[18,1] = slice[
                  limit_indices=(18, 1)
                  start_indices=(0, 0)
                  strides=None
                ] elg
                emh:f64[18] = squeeze[dimensions=(1,)] emg
                emi:f64[18,3] = slice[
                  limit_indices=(18, 4)
                  start_indices=(0, 1)
                  strides=None
                ] elg
                emj:f64[18,400] = dot_general[
                  dimension_numbers=(([1], [2]), ([0], [1]))
                  preferred_element_type=float64
                ] emi emf
                emk:f64[400,18] = transpose[permutation=(1, 0)] emj
                eml:f64[400,18,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 18, 1)
                ] emk
                emm:f64[1,18,3] = broadcast_in_dim[
                  broadcast_dimensions=(1, 2)
                  shape=(1, 18, 3)
                ] emi
                emn:f64[400,18,3] = mul eml emm
                emo:f64[400,18,3] = mul 2.0 emn
                emp:f64[18] = mul emh emh
                emq:f64[18] = dot_general[
                  dimension_numbers=(([1], [1]), ([0], [0]))
                  preferred_element_type=float64
                ] emi emi
                emr:f64[18] = sub emp emq
                ems:f64[18,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(18, 1)
                ] emr
                emt:f64[1,18,1] = broadcast_in_dim[
                  broadcast_dimensions=(1, 2)
                  shape=(1, 18, 1)
                ] ems
                emu:f64[400,18,3] = mul emt emf
                emv:f64[400,18,3] = add emo emu
                emw:f64[18] = mul 2.0 emh
                emx:f64[400,18,3] = pjit[name=cross jaxpr=cross4] emi emf
                emy:f64[18,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(18, 1)
                ] emw
                emz:f64[1,18,1] = broadcast_in_dim[
                  broadcast_dimensions=(1, 2)
                  shape=(1, 18, 1)
                ] emy
                ena:f64[400,18,3] = mul emz emx
                enb:f64[400,18,3] = add emv ena
                enc:f64[400,18,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 18, 1)
                ] cih
                end:f64[400,18,3] = mul emc enc
                ene:f64[400,18,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 18, 1)
                ] cih
                enf:f64[400,18,3] = mul enb ene
                eng:f64[400,6,3] = slice[
                  limit_indices=(400, 6, 3)
                  start_indices=(0, 0, 0)
                  strides=None
                ] end
                enh:f64[400,6,3] = slice[
                  limit_indices=(400, 6, 3)
                  start_indices=(0, 0, 0)
                  strides=None
                ] enf
                eni:i64[6] = slice[
                  limit_indices=(6,)
                  start_indices=(0,)
                  strides=None
                ] bzo
                enj:f64[1,3] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1, 3)
                ] 0.0
                enk:f64[1,3] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1, 3)
                ] 0.0
                enl:bool[6] = lt eni 0
                enm:i64[6] = add eni 1
                enn:i64[6] = select_n enl eni enm
                eno:i32[6] = convert_element_type[
                  new_dtype=int32
                  weak_type=False
                ] enn
                enp:i32[6,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(6, 1)
                ] eno
                enq:f64[400,1,3] = broadcast_in_dim[
                  broadcast_dimensions=(1, 2)
                  shape=(400, 1, 3)
                ] enj
                enr:f64[400,1,3] = scatter-add[
                  dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                  indices_are_sorted=False
                  mode=GatherScatterMode.FILL_OR_DROP
                  unique_indices=False
                  update_consts=()
                  update_jaxpr=jaxpr1
                ] enq enp eng
                ens:bool[6] = lt eni 0
                ent:i64[6] = add eni 1
                enu:i64[6] = select_n ens eni ent
                env:i32[6] = convert_element_type[
                  new_dtype=int32
                  weak_type=False
                ] enu
                enw:i32[6,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(6, 1)
                ] env
                enx:f64[400,1,3] = broadcast_in_dim[
                  broadcast_dimensions=(1, 2)
                  shape=(400, 1, 3)
                ] enk
                eny:f64[400,1,3] = scatter-add[
                  dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                  indices_are_sorted=False
                  mode=GatherScatterMode.FILL_OR_DROP
                  unique_indices=False
                  update_consts=()
                  update_jaxpr=jaxpr1
                ] enx enw enh
                enz:f64[400,4,3] = pjit[name=_take jaxpr=_take8] end bzp
                eoa:f64[400,4,3] = pjit[name=_take jaxpr=_take8] enf bzq
                eob:i64[4] = pjit[name=_take jaxpr=_take9] bzo bzr
                eoc:f64[400,4,3] = pjit[name=_take jaxpr=_take3] enr bzs
                eod:f64[400,4,3] = pjit[name=_take jaxpr=_take3] eny bzt
                eoe:bool[4] = lt eob 0
                eof:i64[4] = add eob 4
                eog:i64[4] = select_n eoe eob eof
                eoh:i32[4] = convert_element_type[
                  new_dtype=int32
                  weak_type=False
                ] eog
                eoi:i32[4,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(4, 1)
                ] eoh
                eoj:f64[400,4,3] = scatter-add[
                  dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                  indices_are_sorted=False
                  mode=GatherScatterMode.FILL_OR_DROP
                  unique_indices=False
                  update_consts=()
                  update_jaxpr=jaxpr1
                ] eoc eoi enz
                eok:bool[4] = lt eob 0
                eol:i64[4] = add eob 4
                eom:i64[4] = select_n eok eob eol
                eon:i32[4] = convert_element_type[
                  new_dtype=int32
                  weak_type=False
                ] eom
                eoo:i32[4,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(4, 1)
                ] eon
                eop:f64[400,4,3] = scatter-add[
                  dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                  indices_are_sorted=False
                  mode=GatherScatterMode.FILL_OR_DROP
                  unique_indices=False
                  update_consts=()
                  update_jaxpr=jaxpr1
                ] eod eoo eoa
                eoq:f64[400,4,3] = pjit[name=_take jaxpr=_take8] end bzu
                eor:f64[400,4,3] = pjit[name=_take jaxpr=_take8] enf bzv
                eos:i64[4] = pjit[name=_take jaxpr=_take9] bzo bzw
                eot:bool[4] = lt eos 0
                eou:i64[4] = add eos 4
                eov:i64[4] = select_n eot eos eou
                eow:i32[4] = convert_element_type[
                  new_dtype=int32
                  weak_type=False
                ] eov
                eox:i32[4,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(4, 1)
                ] eow
                eoy:f64[400,4,3] = scatter-add[
                  dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                  indices_are_sorted=False
                  mode=GatherScatterMode.FILL_OR_DROP
                  unique_indices=False
                  update_consts=()
                  update_jaxpr=jaxpr1
                ] eoj eox eoq
                eoz:bool[4] = lt eos 0
                epa:i64[4] = add eos 4
                epb:i64[4] = select_n eoz eos epa
                epc:i32[4] = convert_element_type[
                  new_dtype=int32
                  weak_type=False
                ] epb
                epd:i32[4,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(4, 1)
                ] epc
                epe:f64[400,4,3] = scatter-add[
                  dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                  indices_are_sorted=False
                  mode=GatherScatterMode.FILL_OR_DROP
                  unique_indices=False
                  update_consts=()
                  update_jaxpr=jaxpr1
                ] eop epd eor
                epf:f64[400,4,3] = pjit[name=_take jaxpr=_take8] end bzx
                epg:f64[400,4,3] = pjit[name=_take jaxpr=_take8] enf bzy
                eph:i64[4] = pjit[name=_take jaxpr=_take9] bzo bzz
                epi:bool[4] = lt eph 0
                epj:i64[4] = add eph 4
                epk:i64[4] = select_n epi eph epj
                epl:i32[4] = convert_element_type[
                  new_dtype=int32
                  weak_type=False
                ] epk
                epm:i32[4,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(4, 1)
                ] epl
                epn:f64[400,4,3] = scatter-add[
                  dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                  indices_are_sorted=False
                  mode=GatherScatterMode.FILL_OR_DROP
                  unique_indices=False
                  update_consts=()
                  update_jaxpr=jaxpr1
                ] eoy epm epf
                epo:bool[4] = lt eph 0
                epp:i64[4] = add eph 4
                epq:i64[4] = select_n epo eph epp
                epr:i32[4] = convert_element_type[
                  new_dtype=int32
                  weak_type=False
                ] epq
                eps:i32[4,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(4, 1)
                ] epr
                ept:f64[400,4,3] = scatter-add[
                  dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                  indices_are_sorted=False
                  mode=GatherScatterMode.FILL_OR_DROP
                  unique_indices=False
                  update_consts=()
                  update_jaxpr=jaxpr1
                ] epe eps epg
                epu:f64[400,13,3] = concatenate[dimension=1] enr eoj eoy epn
                epv:f64[400,13,3] = concatenate[dimension=1] eny eop epe ept
                epw:f64[400,13,3] = pjit[name=_take jaxpr=_take4] epu caa
                epx:f64[400,13,3] = pjit[name=_take jaxpr=_take4] epv cab
                epy:f64[1,3] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1, 3)
                ] 0.0
                epz:f64[1,3] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1, 3)
                ] 0.0
                eqa:f64[400,1,3] = broadcast_in_dim[
                  broadcast_dimensions=(1, 2)
                  shape=(400, 1, 3)
                ] epy
                eqb:f64[400,14,3] = concatenate[dimension=1] epw eqa
                eqc:f64[400,1,3] = broadcast_in_dim[
                  broadcast_dimensions=(1, 2)
                  shape=(400, 1, 3)
                ] epz
                eqd:f64[400,14,3] = concatenate[dimension=1] epx eqc
                eqe:f64[400,13,3] = pjit[name=_take jaxpr=_take5] eqb bzh
                eqf:f64[400,13,3] = pjit[name=_take jaxpr=_take5] eqd bzh
                eqg:f64[400,6,3] = slice[
                  limit_indices=(400, 6, 3)
                  start_indices=(0, 0, 0)
                  strides=None
                ] emc
                eqh:f64[400,6,3] = slice[
                  limit_indices=(400, 6, 3)
                  start_indices=(0, 0, 0)
                  strides=None
                ] enb
                eqi:f64[400,6,3] = slice[
                  limit_indices=(400, 6, 3)
                  start_indices=(0, 0, 0)
                  strides=None
                ] end
                eqj:f64[400,6,3] = slice[
                  limit_indices=(400, 6, 3)
                  start_indices=(0, 0, 0)
                  strides=None
                ] enf
                eqk:f64[400,1,6,3] = reshape[
                  dimensions=None
                  new_sizes=(400, 1, 6, 3)
                ] eqi
                eql:f64[400,1,6,3] = reshape[
                  dimensions=None
                  new_sizes=(400, 1, 6, 3)
                ] eqj
                eqm:f64[400,1,3,3] = slice[
                  limit_indices=(400, 1, 3, 3)
                  start_indices=(0, 0, 0, 0)
                  strides=None
                ] eqk
                eqn:f64[400,1,3] = reduce_sum[axes=(2,)] eqm
                eqo:f64[400,1,3,3] = slice[
                  limit_indices=(400, 1, 3, 3)
                  start_indices=(0, 0, 0, 0)
                  strides=None
                ] eql
                eqp:f64[400,1,3] = reduce_sum[axes=(2,)] eqo
                eqq:f64[400,1,6,3] = reshape[
                  dimensions=None
                  new_sizes=(400, 1, 6, 3)
                ] eqg
                eqr:f64[400,1,6,3] = reshape[
                  dimensions=None
                  new_sizes=(400, 1, 6, 3)
                ] eqh
                eqs:f64[400,1,6,3] = pjit[name=cross jaxpr=cross6] eqn eqr
                eqt:f64[400,1,6,3] = pjit[name=cross jaxpr=cross6] eqp eqq
                equ:f64[400,1,6,3] = add eqs eqt
                eqv:f64[400,1,6,3] = pjit[name=cross jaxpr=cross6] eqn eqq
                eqw:f64[3] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(3,)
                ] 0.0
                eqx:i32[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] 0
                eqy:f64[1,3,3] = broadcast_in_dim[
                  broadcast_dimensions=(2,)
                  shape=(1, 3, 3)
                ] eqw
                eqz:f64[400,1,3,3] = broadcast_in_dim[
                  broadcast_dimensions=(1, 2, 3)
                  shape=(400, 1, 3, 3)
                ] eqy
                era:f64[400,1,6,3] = scatter[
                  dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2, 3), inserted_window_dims=(), scatter_dims_to_operand_dims=(2,))
                  indices_are_sorted=True
                  mode=GatherScatterMode.FILL_OR_DROP
                  unique_indices=True
                  update_consts=()
                  update_jaxpr=None
                ] eqv eqx eqz
                erb:f64[3] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(3,)
                ] 0.0
                erc:i32[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] 0
                erd:f64[1,3,3] = broadcast_in_dim[
                  broadcast_dimensions=(2,)
                  shape=(1, 3, 3)
                ] erb
                ere:f64[400,1,3,3] = broadcast_in_dim[
                  broadcast_dimensions=(1, 2, 3)
                  shape=(400, 1, 3, 3)
                ] erd
                erf:f64[400,1,6,3] = scatter[
                  dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2, 3), inserted_window_dims=(), scatter_dims_to_operand_dims=(2,))
                  indices_are_sorted=True
                  mode=GatherScatterMode.FILL_OR_DROP
                  unique_indices=True
                  update_consts=()
                  update_jaxpr=None
                ] equ erc ere
                erg:f64[400,6,3] = reshape[
                  dimensions=None
                  new_sizes=(400, 6, 3)
                ] era
                erh:f64[400,6,3] = reshape[
                  dimensions=None
                  new_sizes=(400, 6, 3)
                ] erf
                eri:f64[400,12,3] = slice[
                  limit_indices=(400, 13, 3)
                  start_indices=(0, 1, 0)
                  strides=None
                ] eqe
                erj:f64[400,12,3] = slice[
                  limit_indices=(400, 13, 3)
                  start_indices=(0, 1, 0)
                  strides=None
                ] eqf
                erk:f64[400,12,3] = slice[
                  limit_indices=(400, 18, 3)
                  start_indices=(0, 6, 0)
                  strides=None
                ] emc
                erl:f64[400,12,3] = slice[
                  limit_indices=(400, 18, 3)
                  start_indices=(0, 6, 0)
                  strides=None
                ] enb
                erm:f64[400,12,3] = pjit[name=cross jaxpr=cross7] eri erl
                ern:f64[400,12,3] = pjit[name=cross jaxpr=cross7] erj erk
                ero:f64[400,12,3] = add erm ern
                erp:f64[400,12,3] = pjit[name=cross jaxpr=cross7] eri erk
                erq:f64[400,18,3] = concatenate[dimension=1] erg erp
                err:f64[400,18,3] = concatenate[dimension=1] erh ero
                ers:f64[400,4,3] = pjit[name=_take jaxpr=_take1] dvn cac
                ert:f64[400,4,3,3] = pjit[name=_take jaxpr=_take10] dvk cad
                eru:f64[4] = pjit[name=_take jaxpr=_take11] bzf cae
                erv:f64[400,4,3] = pjit[name=_take jaxpr=_take1] dvn caf
                erw:f64[400,4,3,3] = pjit[name=_take jaxpr=_take10] dvk cag
                erx:f64[4] = pjit[name=_take jaxpr=_take11] bzf cah
                ery:f64[4,3] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(4, 3)
                ] 0.0
                erz:bool[4] = lt cai 0
                esa:i64[4] = add cai 4
                esb:i64[4] = select_n erz cai esa
                esc:i32[4] = convert_element_type[
                  new_dtype=int32
                  weak_type=False
                ] esb
                esd:i32[4,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(4, 1)
                ] esc
                ese:f64[400,4,3] = broadcast_in_dim[
                  broadcast_dimensions=(1, 2)
                  shape=(400, 4, 3)
                ] ery
                esf:f64[400,4,3] = scatter-add[
                  dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                  indices_are_sorted=False
                  mode=GatherScatterMode.FILL_OR_DROP
                  unique_indices=False
                  update_consts=()
                  update_jaxpr=jaxpr1
                ] ese esd ers
                esg:f64[4,3,3] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(4, 3, 3)
                ] 0.0
                esh:bool[4] = lt cai 0
                esi:i64[4] = add cai 4
                esj:i64[4] = select_n esh cai esi
                esk:i32[4] = convert_element_type[
                  new_dtype=int32
                  weak_type=False
                ] esj
                esl:i32[4,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(4, 1)
                ] esk
                esm:f64[400,4,3,3] = broadcast_in_dim[
                  broadcast_dimensions=(1, 2, 3)
                  shape=(400, 4, 3, 3)
                ] esg
                esn:f64[400,4,3,3] = scatter-add[
                  dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2, 3), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                  indices_are_sorted=False
                  mode=GatherScatterMode.FILL_OR_DROP
                  unique_indices=False
                  update_consts=()
                  update_jaxpr=jaxpr1
                ] esm esl ert
                eso:f64[4] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(4,)
                ] 0.0
                esp:bool[4] = lt cai 0
                esq:i64[4] = add cai 4
                esr:i64[4] = select_n esp cai esq
                ess:i32[4] = convert_element_type[
                  new_dtype=int32
                  weak_type=False
                ] esr
                est:i32[4,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(4, 1)
                ] ess
                esu:f64[4] = scatter-add[
                  dimension_numbers=ScatterDimensionNumbers(update_window_dims=(), inserted_window_dims=(0,), scatter_dims_to_operand_dims=(0,))
                  indices_are_sorted=False
                  mode=GatherScatterMode.FILL_OR_DROP
                  unique_indices=False
                  update_consts=()
                  update_jaxpr=jaxpr1
                ] eso est eru
                esv:f64[400,4,3] = add erv esf
                esw:f64[400,4,3,3] = add erw esn
                esx:f64[4] = add erx esu
                esy:f64[400,4,3] = pjit[name=_take jaxpr=_take1] dvn caj
                esz:f64[400,4,3,3] = pjit[name=_take jaxpr=_take10] dvk cak
                eta:f64[4] = pjit[name=_take jaxpr=_take11] bzf cal
                etb:f64[4,3] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(4, 3)
                ] 0.0
                etc:bool[4] = lt cam 0
                etd:i64[4] = add cam 4
                ete:i64[4] = select_n etc cam etd
                etf:i32[4] = convert_element_type[
                  new_dtype=int32
                  weak_type=False
                ] ete
                etg:i32[4,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(4, 1)
                ] etf
                eth:f64[400,4,3] = broadcast_in_dim[
                  broadcast_dimensions=(1, 2)
                  shape=(400, 4, 3)
                ] etb
                eti:f64[400,4,3] = scatter-add[
                  dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                  indices_are_sorted=False
                  mode=GatherScatterMode.FILL_OR_DROP
                  unique_indices=False
                  update_consts=()
                  update_jaxpr=jaxpr1
                ] eth etg esv
                etj:f64[4,3,3] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(4, 3, 3)
                ] 0.0
                etk:bool[4] = lt cam 0
                etl:i64[4] = add cam 4
                etm:i64[4] = select_n etk cam etl
                etn:i32[4] = convert_element_type[
                  new_dtype=int32
                  weak_type=False
                ] etm
                eto:i32[4,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(4, 1)
                ] etn
                etp:f64[400,4,3,3] = broadcast_in_dim[
                  broadcast_dimensions=(1, 2, 3)
                  shape=(400, 4, 3, 3)
                ] etj
                etq:f64[400,4,3,3] = scatter-add[
                  dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2, 3), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                  indices_are_sorted=False
                  mode=GatherScatterMode.FILL_OR_DROP
                  unique_indices=False
                  update_consts=()
                  update_jaxpr=jaxpr1
                ] etp eto esw
                etr:f64[4] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(4,)
                ] 0.0
                ets:bool[4] = lt cam 0
                ett:i64[4] = add cam 4
                etu:i64[4] = select_n ets cam ett
                etv:i32[4] = convert_element_type[
                  new_dtype=int32
                  weak_type=False
                ] etu
                etw:i32[4,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(4, 1)
                ] etv
                etx:f64[4] = scatter-add[
                  dimension_numbers=ScatterDimensionNumbers(update_window_dims=(), inserted_window_dims=(0,), scatter_dims_to_operand_dims=(0,))
                  indices_are_sorted=False
                  mode=GatherScatterMode.FILL_OR_DROP
                  unique_indices=False
                  update_consts=()
                  update_jaxpr=jaxpr1
                ] etr etw esx
                ety:f64[400,4,3] = add esy eti
                etz:f64[400,4,3,3] = add esz etq
                eua:f64[4] = add eta etx
                eub:f64[400,1,3] = slice[
                  limit_indices=(400, 1, 3)
                  start_indices=(0, 0, 0)
                  strides=None
                ] dvn
                euc:f64[400,1,3,3] = slice[
                  limit_indices=(400, 1, 3, 3)
                  start_indices=(0, 0, 0, 0)
                  strides=None
                ] dvk
                eud:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] bzf
                eue:f64[1,3] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1, 3)
                ] 0.0
                euf:bool[4] = lt can 0
                eug:i64[4] = add can 1
                euh:i64[4] = select_n euf can eug
                eui:i32[4] = convert_element_type[
                  new_dtype=int32
                  weak_type=False
                ] euh
                euj:i32[4,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(4, 1)
                ] eui
                euk:f64[400,1,3] = broadcast_in_dim[
                  broadcast_dimensions=(1, 2)
                  shape=(400, 1, 3)
                ] eue
                eul:f64[400,1,3] = scatter-add[
                  dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                  indices_are_sorted=False
                  mode=GatherScatterMode.FILL_OR_DROP
                  unique_indices=False
                  update_consts=()
                  update_jaxpr=jaxpr1
                ] euk euj ety
                eum:f64[1,3,3] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1, 3, 3)
                ] 0.0
                eun:bool[4] = lt can 0
                euo:i64[4] = add can 1
                eup:i64[4] = select_n eun can euo
                euq:i32[4] = convert_element_type[
                  new_dtype=int32
                  weak_type=False
                ] eup
                eur:i32[4,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(4, 1)
                ] euq
                eus:f64[400,1,3,3] = broadcast_in_dim[
                  broadcast_dimensions=(1, 2, 3)
                  shape=(400, 1, 3, 3)
                ] eum
                eut:f64[400,1,3,3] = scatter-add[
                  dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2, 3), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                  indices_are_sorted=False
                  mode=GatherScatterMode.FILL_OR_DROP
                  unique_indices=False
                  update_consts=()
                  update_jaxpr=jaxpr1
                ] eus eur etz
                euu:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] 0.0
                euv:bool[4] = lt can 0
                euw:i64[4] = add can 1
                eux:i64[4] = select_n euv can euw
                euy:i32[4] = convert_element_type[
                  new_dtype=int32
                  weak_type=False
                ] eux
                euz:i32[4,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(4, 1)
                ] euy
                eva:f64[1] = scatter-add[
                  dimension_numbers=ScatterDimensionNumbers(update_window_dims=(), inserted_window_dims=(0,), scatter_dims_to_operand_dims=(0,))
                  indices_are_sorted=False
                  mode=GatherScatterMode.FILL_OR_DROP
                  unique_indices=False
                  update_consts=()
                  update_jaxpr=jaxpr1
                ] euu euz eua
                evb:f64[400,1,3] = add eub eul
                evc:f64[400,1,3,3] = add euc eut
                evd:f64[1] = add eud eva
                eve:f64[400,13,3] = concatenate[dimension=1] evb ety esv ers
                evf:f64[400,13,3,3] = concatenate[dimension=1] evc etz esw ert
                evg:f64[13] = concatenate[dimension=0] evd eua esx eru
                evh:f64[400,13,3] = pjit[name=_take jaxpr=_take4] eve cao
                evi:f64[400,13,3,3] = pjit[
                  name=_take
                  jaxpr={ lambda ; evj:f64[400,13,3,3] evk:i64[13]. let
                      evl:i64[13] = pjit[name=remainder jaxpr=remainder4] evk 13
                      evm:i64[13,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(13, 1)
                      ] evl
                      evn:f64[400,13,3,3] = gather[
                        dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 2, 3), collapsed_slice_dims=(1,), start_index_map=(1,))
                        fill_value=None
                        indices_are_sorted=False
                        mode=GatherScatterMode.PROMISE_IN_BOUNDS
                        slice_sizes=(400, 1, 3, 3)
                        unique_indices=False
                      ] evj evm
                    in (evn,) }
                ] evf cap
                evo:f64[13] = pjit[
                  name=_take
                  jaxpr={ lambda ; evp:f64[13] evq:i64[13]. let
                      evr:i64[13] = pjit[
                        name=remainder
                        jaxpr={ lambda ; je:i64[13] jf:i64[]. let
                            jg:bool[] = eq jf 0
                            jh:i64[] = pjit[name=_where jaxpr=_where8] jg 1 jf
                            ji:i64[13] = rem je jh
                            jj:bool[13] = ne ji 0
                            jk:bool[13] = lt ji 0
                            jl:bool[] = lt jh 0
                            jm:bool[13] = ne jk jl
                            jn:bool[13] = and jm jj
                            jo:i64[13] = add ji jh
                            jp:i64[13] = select_n jn ji jo
                          in (jp,) }
                      ] evq 13
                      evs:i64[13,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(13, 1)
                      ] evr
                      evt:f64[13] = gather[
                        dimension_numbers=GatherDimensionNumbers(offset_dims=(), collapsed_slice_dims=(0,), start_index_map=(0,))
                        fill_value=None
                        indices_are_sorted=False
                        mode=GatherScatterMode.PROMISE_IN_BOUNDS
                        slice_sizes=(1,)
                        unique_indices=False
                      ] evp evs
                    in (evt,) }
                ] evg caq
                evu:f64[400,18,3] = pjit[
                  name=_take
                  jaxpr={ lambda ; evv:f64[400,13,3] evw:i64[18]. let
                      evx:i64[18] = pjit[name=remainder jaxpr=remainder9] evw 13
                      evy:i64[18,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(18, 1)
                      ] evx
                      evz:f64[400,18,3] = gather[
                        dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 2), collapsed_slice_dims=(1,), start_index_map=(1,))
                        fill_value=None
                        indices_are_sorted=False
                        mode=GatherScatterMode.PROMISE_IN_BOUNDS
                        slice_sizes=(400, 1, 3)
                        unique_indices=False
                      ] evv evy
                    in (evz,) }
                ] evh car
                ewa:f64[400,18,3,3] = pjit[
                  name=_take
                  jaxpr={ lambda ; ewb:f64[400,13,3,3] ewc:i64[18]. let
                      ewd:i64[18] = pjit[name=remainder jaxpr=remainder9] ewc 13
                      ewe:i64[18,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(18, 1)
                      ] ewd
                      ewf:f64[400,18,3,3] = gather[
                        dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 2, 3), collapsed_slice_dims=(1,), start_index_map=(1,))
                        fill_value=None
                        indices_are_sorted=False
                        mode=GatherScatterMode.PROMISE_IN_BOUNDS
                        slice_sizes=(400, 1, 3, 3)
                        unique_indices=False
                      ] ewb ewe
                    in (ewf,) }
                ] evi car
                ewg:f64[18] = pjit[
                  name=_take
                  jaxpr={ lambda ; ewh:f64[13] ewi:i64[18]. let
                      ewj:i64[18] = pjit[
                        name=remainder
                        jaxpr={ lambda ; yc:i64[18] yd:i64[]. let
                            ye:bool[] = eq yd 0
                            yf:i64[] = pjit[name=_where jaxpr=_where9] ye 1 yd
                            yg:i64[18] = rem yc yf
                            yh:bool[18] = ne yg 0
                            yi:bool[18] = lt yg 0
                            yj:bool[] = lt yf 0
                            yk:bool[18] = ne yi yj
                            yl:bool[18] = and yk yh
                            ym:i64[18] = add yg yf
                            yn:i64[18] = select_n yl yg ym
                          in (yn,) }
                      ] ewi 13
                      ewk:i64[18,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(18, 1)
                      ] ewj
                      ewl:f64[18] = gather[
                        dimension_numbers=GatherDimensionNumbers(offset_dims=(), collapsed_slice_dims=(0,), start_index_map=(0,))
                        fill_value=None
                        indices_are_sorted=False
                        mode=GatherScatterMode.PROMISE_IN_BOUNDS
                        slice_sizes=(1,)
                        unique_indices=False
                      ] ewh ewk
                    in (ewl,) }
                ] evo car
                ewm:f64[400,18,3] = dot_general[
                  dimension_numbers=(([3], [2]), ([0, 1], [0, 1]))
                  preferred_element_type=float64
                ] ewa emc
                ewn:f64[400,18,3] = pjit[name=cross jaxpr=cross5] evu enb
                ewo:f64[400,18,3] = add ewm ewn
                ewp:f64[18,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(18, 1)
                ] ewg
                ewq:f64[1,18,1] = broadcast_in_dim[
                  broadcast_dimensions=(1, 2)
                  shape=(1, 18, 1)
                ] ewp
                ewr:f64[400,18,3] = mul ewq enb
                ews:f64[400,18,3] = pjit[name=cross jaxpr=cross5] evu emc
                ewt:f64[400,18,3] = sub ewr ews
                ewu:f64[400,18,18] = dot_general[
                  dimension_numbers=(([2], [2]), ([0], [0]))
                  preferred_element_type=float64
                ] enb ewt
                ewv:f64[400,18,18] = dot_general[
                  dimension_numbers=(([2], [2]), ([0], [0]))
                  preferred_element_type=float64
                ] emc ewo
                eww:f64[400,18,18] = add ewu ewv
                ewx:f64[400,18,18] = transpose[permutation=(0, 2, 1)] eww
                ewy:f64[18,18] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(18, 18)
                ] 0.0
                ewz:bool[132] = lt cas 0
                exa:i64[132] = add cas 18
                exb:i64[132] = select_n ewz cas exa
                exc:bool[132] = lt cat 0
                exd:i64[132] = add cat 18
                exe:i64[132] = select_n exc cat exd
                exf:i32[132] = convert_element_type[
                  new_dtype=int32
                  weak_type=False
                ] exb
                exg:i32[132] = convert_element_type[
                  new_dtype=int32
                  weak_type=False
                ] exe
                exh:i32[132,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(132, 1)
                ] exf
                exi:i32[132,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(132, 1)
                ] exg
                exj:i32[132,2] = concatenate[dimension=1] exh exi
                exk:f64[132] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(132,)
                ] 1.0
                exl:f64[18,18] = scatter[
                  dimension_numbers=ScatterDimensionNumbers(update_window_dims=(), inserted_window_dims=(0, 1), scatter_dims_to_operand_dims=(0, 1))
                  indices_are_sorted=False
                  mode=GatherScatterMode.FILL_OR_DROP
                  unique_indices=False
                  update_consts=()
                  update_jaxpr=None
                ] ewy exj exk
                exm:f64[1,18,18] = broadcast_in_dim[
                  broadcast_dimensions=(1, 2)
                  shape=(1, 18, 18)
                ] exl
                exn:f64[400,18,18] = mul ewx exm
                exo:f64[400,18,18] = pjit[
                  name=tril
                  jaxpr={ lambda ; exp:f64[400,18,18]. let
                      exq:i32[18,18] = iota[
                        dimension=0
                        dtype=int32
                        shape=(18, 18)
                      ] 
                      exr:i32[18,18] = add exq 0
                      exs:i32[18,18] = iota[
                        dimension=1
                        dtype=int32
                        shape=(18, 18)
                      ] 
                      ext:bool[18,18] = ge exr exs
                      exu:f64[18,18] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(18, 18)
                      ] 0.0
                      exv:bool[400,18,18] = broadcast_in_dim[
                        broadcast_dimensions=(1, 2)
                        shape=(400, 18, 18)
                      ] ext
                      exw:f64[400,18,18] = broadcast_in_dim[
                        broadcast_dimensions=(1, 2)
                        shape=(400, 18, 18)
                      ] exu
                      exx:f64[400,18,18] = select_n exv exw exp
                    in (exx,) }
                ] exn
                exy:f64[400,18,18] = pjit[
                  name=tril
                  jaxpr={ lambda ; exz:f64[400,18,18]. let
                      eya:i32[18,18] = iota[
                        dimension=0
                        dtype=int32
                        shape=(18, 18)
                      ] 
                      eyb:i32[18,18] = add eya -1
                      eyc:i32[18,18] = iota[
                        dimension=1
                        dtype=int32
                        shape=(18, 18)
                      ] 
                      eyd:bool[18,18] = ge eyb eyc
                      eye:f64[18,18] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(18, 18)
                      ] 0.0
                      eyf:bool[400,18,18] = broadcast_in_dim[
                        broadcast_dimensions=(1, 2)
                        shape=(400, 18, 18)
                      ] eyd
                      eyg:f64[400,18,18] = broadcast_in_dim[
                        broadcast_dimensions=(1, 2)
                        shape=(400, 18, 18)
                      ] eye
                      eyh:f64[400,18,18] = select_n eyf eyg exz
                    in (eyh,) }
                ] exn
                eyi:f64[400,18,18] = transpose[permutation=(0, 2, 1)] exy
                eyj:f64[400,18,18] = add exo eyi
                eyk:f64[18,18] = pjit[name=_diag jaxpr=_diag] cau
                eyl:f64[1,18,18] = broadcast_in_dim[
                  broadcast_dimensions=(1, 2)
                  shape=(1, 18, 18)
                ] eyk
                eym:f64[400,18,18] = add eyj eyl
                eyn:f64[18] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(18,)
                ] 0.0
                eyo:f64[6] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(6,)
                ] 0.0
                eyp:f64[400,12] = slice[
                  limit_indices=(400, 19)
                  start_indices=(0, 7)
                  strides=None
                ] cgi
                eyq:f64[12] = slice[
                  limit_indices=(18,)
                  start_indices=(6,)
                  strides=None
                ] cav
                eyr:f64[400,12] = neg eyp
                eys:f64[1,12] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 12)
                ] eyq
                eyt:f64[400,12] = mul eyr eys
                eyu:f64[400,6] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(400, 6)
                ] eyo
                eyv:f64[400,18] = concatenate[dimension=1] eyu eyt
                eyw:f64[1,18] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 18)
                ] caw
                eyx:f64[400,18] = mul eyw cih
                eyy:f64[400,18] = sub eyv eyx
                eyz:f64[400,6,3] = slice[
                  limit_indices=(400, 6, 3)
                  start_indices=(0, 0, 0)
                  strides=None
                ] erq
                eza:f64[400,6,3] = slice[
                  limit_indices=(400, 6, 3)
                  start_indices=(0, 0, 0)
                  strides=None
                ] err
                ezb:f64[400,6] = slice[
                  limit_indices=(400, 6)
                  start_indices=(0, 0)
                  strides=None
                ] cih
                ezc:i64[6] = slice[
                  limit_indices=(6,)
                  start_indices=(0,)
                  strides=None
                ] cax
                ezd:f64[1,1,1,3] = reshape[
                  dimensions=None
                  new_sizes=(1, 1, 1, 3)
                ] cay
                eze:f64[1,3] = reshape[dimensions=None new_sizes=(1, 3)] ezd
                ezf:f64[1,3] = neg eze
                ezg:f64[1,3] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1, 3)
                ] 0.0
                ezh:f64[400,6,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 6, 1)
                ] ezb
                ezi:f64[400,6,3] = mul eyz ezh
                ezj:f64[400,6,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 6, 1)
                ] ezb
                ezk:f64[400,6,3] = mul eza ezj
                ezl:bool[6] = lt ezc 0
                ezm:i64[6] = add ezc 1
                ezn:i64[6] = select_n ezl ezc ezm
                ezo:i32[6] = convert_element_type[
                  new_dtype=int32
                  weak_type=False
                ] ezn
                ezp:i32[6,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(6, 1)
                ] ezo
                ezq:f64[400,1,3] = broadcast_in_dim[
                  broadcast_dimensions=(1, 2)
                  shape=(400, 1, 3)
                ] ezg
                ezr:f64[400,1,3] = scatter-add[
                  dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                  indices_are_sorted=False
                  mode=GatherScatterMode.FILL_OR_DROP
                  unique_indices=False
                  update_consts=()
                  update_jaxpr=jaxpr1
                ] ezq ezp ezi
                ezs:bool[6] = lt ezc 0
                ezt:i64[6] = add ezc 1
                ezu:i64[6] = select_n ezs ezc ezt
                ezv:i32[6] = convert_element_type[
                  new_dtype=int32
                  weak_type=False
                ] ezu
                ezw:i32[6,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(6, 1)
                ] ezv
                ezx:f64[400,1,3] = broadcast_in_dim[
                  broadcast_dimensions=(1, 2)
                  shape=(400, 1, 3)
                ] ezf
                ezy:f64[400,1,3] = scatter-add[
                  dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                  indices_are_sorted=False
                  mode=GatherScatterMode.FILL_OR_DROP
                  unique_indices=False
                  update_consts=()
                  update_jaxpr=jaxpr1
                ] ezx ezw ezk
                ezz:f64[400,4,3] = pjit[name=_take jaxpr=_take8] erq caz
                faa:f64[400,4,3] = pjit[name=_take jaxpr=_take8] err cba
                fab:f64[400,4] = pjit[name=_take jaxpr=_take12] cih cbb
                fac:i64[4] = pjit[name=_take jaxpr=_take9] cax cbc
                fad:f64[400,4,3] = pjit[name=_take jaxpr=_take3] ezr cbd
                fae:f64[400,4,3] = pjit[name=_take jaxpr=_take3] ezy cbe
                faf:f64[400,4,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 4, 1)
                ] fab
                fag:f64[400,4,3] = mul ezz faf
                fah:f64[400,4,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 4, 1)
                ] fab
                fai:f64[400,4,3] = mul faa fah
                faj:bool[4] = lt fac 0
                fak:i64[4] = add fac 4
                fal:i64[4] = select_n faj fac fak
                fam:i32[4] = convert_element_type[
                  new_dtype=int32
                  weak_type=False
                ] fal
                fan:i32[4,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(4, 1)
                ] fam
                fao:f64[400,4,3] = scatter-add[
                  dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                  indices_are_sorted=False
                  mode=GatherScatterMode.FILL_OR_DROP
                  unique_indices=False
                  update_consts=()
                  update_jaxpr=jaxpr1
                ] fad fan fag
                fap:bool[4] = lt fac 0
                faq:i64[4] = add fac 4
                far:i64[4] = select_n fap fac faq
                fas:i32[4] = convert_element_type[
                  new_dtype=int32
                  weak_type=False
                ] far
                fat:i32[4,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(4, 1)
                ] fas
                fau:f64[400,4,3] = scatter-add[
                  dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                  indices_are_sorted=False
                  mode=GatherScatterMode.FILL_OR_DROP
                  unique_indices=False
                  update_consts=()
                  update_jaxpr=jaxpr1
                ] fae fat fai
                fav:f64[400,4,3] = pjit[name=_take jaxpr=_take8] erq cbf
                faw:f64[400,4,3] = pjit[name=_take jaxpr=_take8] err cbg
                fax:f64[400,4] = pjit[name=_take jaxpr=_take12] cih cbh
                fay:i64[4] = pjit[name=_take jaxpr=_take9] cax cbi
                faz:f64[400,4,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 4, 1)
                ] fax
                fba:f64[400,4,3] = mul fav faz
                fbb:f64[400,4,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 4, 1)
                ] fax
                fbc:f64[400,4,3] = mul faw fbb
                fbd:bool[4] = lt fay 0
                fbe:i64[4] = add fay 4
                fbf:i64[4] = select_n fbd fay fbe
                fbg:i32[4] = convert_element_type[
                  new_dtype=int32
                  weak_type=False
                ] fbf
                fbh:i32[4,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(4, 1)
                ] fbg
                fbi:f64[400,4,3] = scatter-add[
                  dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                  indices_are_sorted=False
                  mode=GatherScatterMode.FILL_OR_DROP
                  unique_indices=False
                  update_consts=()
                  update_jaxpr=jaxpr1
                ] fao fbh fba
                fbj:bool[4] = lt fay 0
                fbk:i64[4] = add fay 4
                fbl:i64[4] = select_n fbj fay fbk
                fbm:i32[4] = convert_element_type[
                  new_dtype=int32
                  weak_type=False
                ] fbl
                fbn:i32[4,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(4, 1)
                ] fbm
                fbo:f64[400,4,3] = scatter-add[
                  dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                  indices_are_sorted=False
                  mode=GatherScatterMode.FILL_OR_DROP
                  unique_indices=False
                  update_consts=()
                  update_jaxpr=jaxpr1
                ] fau fbn fbc
                fbp:f64[400,4,3] = pjit[name=_take jaxpr=_take8] erq cbj
                fbq:f64[400,4,3] = pjit[name=_take jaxpr=_take8] err cbk
                fbr:f64[400,4] = pjit[name=_take jaxpr=_take12] cih cbl
                fbs:i64[4] = pjit[name=_take jaxpr=_take9] cax cbm
                fbt:f64[400,4,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 4, 1)
                ] fbr
                fbu:f64[400,4,3] = mul fbp fbt
                fbv:f64[400,4,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 4, 1)
                ] fbr
                fbw:f64[400,4,3] = mul fbq fbv
                fbx:bool[4] = lt fbs 0
                fby:i64[4] = add fbs 4
                fbz:i64[4] = select_n fbx fbs fby
                fca:i32[4] = convert_element_type[
                  new_dtype=int32
                  weak_type=False
                ] fbz
                fcb:i32[4,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(4, 1)
                ] fca
                fcc:f64[400,4,3] = scatter-add[
                  dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                  indices_are_sorted=False
                  mode=GatherScatterMode.FILL_OR_DROP
                  unique_indices=False
                  update_consts=()
                  update_jaxpr=jaxpr1
                ] fbi fcb fbu
                fcd:bool[4] = lt fbs 0
                fce:i64[4] = add fbs 4
                fcf:i64[4] = select_n fcd fbs fce
                fcg:i32[4] = convert_element_type[
                  new_dtype=int32
                  weak_type=False
                ] fcf
                fch:i32[4,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(4, 1)
                ] fcg
                fci:f64[400,4,3] = scatter-add[
                  dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                  indices_are_sorted=False
                  mode=GatherScatterMode.FILL_OR_DROP
                  unique_indices=False
                  update_consts=()
                  update_jaxpr=jaxpr1
                ] fbo fch fbw
                fcj:f64[400,13,3] = concatenate[dimension=1] ezr fao fbi fcc
                fck:f64[400,13,3] = concatenate[dimension=1] ezy fau fbo fci
                fcl:f64[400,13,3] = pjit[name=_take jaxpr=_take4] fcj cbn
                fcm:f64[400,13,3] = pjit[name=_take jaxpr=_take4] fck cbo
                fcn:f64[400,13,3] = dot_general[
                  dimension_numbers=(([3], [2]), ([0, 1], [0, 1]))
                  preferred_element_type=float64
                ] dvk fcl
                fco:f64[400,13,3] = pjit[name=cross jaxpr=cross8] dvn fcm
                fcp:f64[400,13,3] = add fcn fco
                fcq:f64[13,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(13, 1)
                ] bzf
                fcr:f64[1,13,1] = broadcast_in_dim[
                  broadcast_dimensions=(1, 2)
                  shape=(1, 13, 1)
                ] fcq
                fcs:f64[400,13,3] = mul fcr fcm
                fct:f64[400,13,3] = pjit[name=cross jaxpr=cross8] dvn fcl
                fcu:f64[400,13,3] = sub fcs fct
                fcv:f64[400,13,3] = dot_general[
                  dimension_numbers=(([3], [2]), ([0, 1], [0, 1]))
                  preferred_element_type=float64
                ] dvk epw
                fcw:f64[400,13,3] = pjit[name=cross jaxpr=cross8] dvn epx
                fcx:f64[400,13,3] = add fcv fcw
                fcy:f64[13,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(13, 1)
                ] bzf
                fcz:f64[1,13,1] = broadcast_in_dim[
                  broadcast_dimensions=(1, 2)
                  shape=(1, 13, 1)
                ] fcy
                fda:f64[400,13,3] = mul fcz epx
                fdb:f64[400,13,3] = pjit[name=cross jaxpr=cross8] dvn epw
                fdc:f64[400,13,3] = sub fda fdb
                fdd:f64[400,13,3] = pjit[name=cross jaxpr=cross8] epw fdc
                fde:f64[400,13,3] = pjit[name=cross jaxpr=cross8] epw fcx
                fdf:f64[400,13,3] = pjit[name=cross jaxpr=cross8] epx fdc
                fdg:f64[400,13,3] = add fde fdf
                fdh:f64[400,13,3] = add fcp fdg
                fdi:f64[400,13,3] = add fcu fdd
                fdj:f64[400,4,3] = pjit[name=_take jaxpr=_take1] fdh cbp
                fdk:f64[400,4,3] = pjit[name=_take jaxpr=_take1] fdi cbq
                fdl:f64[400,4,3] = pjit[name=_take jaxpr=_take1] fdh cbr
                fdm:f64[400,4,3] = pjit[name=_take jaxpr=_take1] fdi cbs
                fdn:f64[4,3] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(4, 3)
                ] 0.0
                fdo:bool[4] = lt cbt 0
                fdp:i64[4] = add cbt 4
                fdq:i64[4] = select_n fdo cbt fdp
                fdr:i32[4] = convert_element_type[
                  new_dtype=int32
                  weak_type=False
                ] fdq
                fds:i32[4,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(4, 1)
                ] fdr
                fdt:f64[400,4,3] = broadcast_in_dim[
                  broadcast_dimensions=(1, 2)
                  shape=(400, 4, 3)
                ] fdn
                fdu:f64[400,4,3] = scatter-add[
                  dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                  indices_are_sorted=False
                  mode=GatherScatterMode.FILL_OR_DROP
                  unique_indices=False
                  update_consts=()
                  update_jaxpr=jaxpr1
                ] fdt fds fdj
                fdv:f64[4,3] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(4, 3)
                ] 0.0
                fdw:bool[4] = lt cbt 0
                fdx:i64[4] = add cbt 4
                fdy:i64[4] = select_n fdw cbt fdx
                fdz:i32[4] = convert_element_type[
                  new_dtype=int32
                  weak_type=False
                ] fdy
                fea:i32[4,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(4, 1)
                ] fdz
                feb:f64[400,4,3] = broadcast_in_dim[
                  broadcast_dimensions=(1, 2)
                  shape=(400, 4, 3)
                ] fdv
                fec:f64[400,4,3] = scatter-add[
                  dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                  indices_are_sorted=False
                  mode=GatherScatterMode.FILL_OR_DROP
                  unique_indices=False
                  update_consts=()
                  update_jaxpr=jaxpr1
                ] feb fea fdk
                fed:f64[400,4,3] = add fdl fdu
                fee:f64[400,4,3] = add fdm fec
                fef:f64[400,4,3] = pjit[name=_take jaxpr=_take1] fdh cbu
                feg:f64[400,4,3] = pjit[name=_take jaxpr=_take1] fdi cbv
                feh:f64[4,3] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(4, 3)
                ] 0.0
                fei:bool[4] = lt cbw 0
                fej:i64[4] = add cbw 4
                fek:i64[4] = select_n fei cbw fej
                fel:i32[4] = convert_element_type[
                  new_dtype=int32
                  weak_type=False
                ] fek
                fem:i32[4,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(4, 1)
                ] fel
                fen:f64[400,4,3] = broadcast_in_dim[
                  broadcast_dimensions=(1, 2)
                  shape=(400, 4, 3)
                ] feh
                feo:f64[400,4,3] = scatter-add[
                  dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                  indices_are_sorted=False
                  mode=GatherScatterMode.FILL_OR_DROP
                  unique_indices=False
                  update_consts=()
                  update_jaxpr=jaxpr1
                ] fen fem fed
                fep:f64[4,3] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(4, 3)
                ] 0.0
                feq:bool[4] = lt cbw 0
                fer:i64[4] = add cbw 4
                fes:i64[4] = select_n feq cbw fer
                fet:i32[4] = convert_element_type[
                  new_dtype=int32
                  weak_type=False
                ] fes
                feu:i32[4,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(4, 1)
                ] fet
                fev:f64[400,4,3] = broadcast_in_dim[
                  broadcast_dimensions=(1, 2)
                  shape=(400, 4, 3)
                ] fep
                few:f64[400,4,3] = scatter-add[
                  dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                  indices_are_sorted=False
                  mode=GatherScatterMode.FILL_OR_DROP
                  unique_indices=False
                  update_consts=()
                  update_jaxpr=jaxpr1
                ] fev feu fee
                fex:f64[400,4,3] = add fef feo
                fey:f64[400,4,3] = add feg few
                fez:f64[400,1,3] = slice[
                  limit_indices=(400, 1, 3)
                  start_indices=(0, 0, 0)
                  strides=None
                ] fdh
                ffa:f64[400,1,3] = slice[
                  limit_indices=(400, 1, 3)
                  start_indices=(0, 0, 0)
                  strides=None
                ] fdi
                ffb:f64[1,3] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1, 3)
                ] 0.0
                ffc:bool[4] = lt cbx 0
                ffd:i64[4] = add cbx 1
                ffe:i64[4] = select_n ffc cbx ffd
                fff:i32[4] = convert_element_type[
                  new_dtype=int32
                  weak_type=False
                ] ffe
                ffg:i32[4,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(4, 1)
                ] fff
                ffh:f64[400,1,3] = broadcast_in_dim[
                  broadcast_dimensions=(1, 2)
                  shape=(400, 1, 3)
                ] ffb
                ffi:f64[400,1,3] = scatter-add[
                  dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                  indices_are_sorted=False
                  mode=GatherScatterMode.FILL_OR_DROP
                  unique_indices=False
                  update_consts=()
                  update_jaxpr=jaxpr1
                ] ffh ffg fex
                ffj:f64[1,3] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1, 3)
                ] 0.0
                ffk:bool[4] = lt cbx 0
                ffl:i64[4] = add cbx 1
                ffm:i64[4] = select_n ffk cbx ffl
                ffn:i32[4] = convert_element_type[
                  new_dtype=int32
                  weak_type=False
                ] ffm
                ffo:i32[4,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(4, 1)
                ] ffn
                ffp:f64[400,1,3] = broadcast_in_dim[
                  broadcast_dimensions=(1, 2)
                  shape=(400, 1, 3)
                ] ffj
                ffq:f64[400,1,3] = scatter-add[
                  dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                  indices_are_sorted=False
                  mode=GatherScatterMode.FILL_OR_DROP
                  unique_indices=False
                  update_consts=()
                  update_jaxpr=jaxpr1
                ] ffp ffo fey
                ffr:f64[400,1,3] = add fez ffi
                ffs:f64[400,1,3] = add ffa ffq
                fft:f64[400,13,3] = concatenate[dimension=1] ffr fex fed fdj
                ffu:f64[400,13,3] = concatenate[dimension=1] ffs fey fee fdk
                ffv:f64[400,13,3] = pjit[name=_take jaxpr=_take4] fft cby
                ffw:f64[400,13,3] = pjit[name=_take jaxpr=_take4] ffu cbz
                ffx:f64[400,18,3] = pjit[name=_take jaxpr=_take7] ffv cca
                ffy:f64[400,18,3] = pjit[name=_take jaxpr=_take7] ffw cca
                ffz:f64[400,18] = dot_general[
                  dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
                  preferred_element_type=float64
                ] enb ffy
                fga:f64[400,18] = dot_general[
                  dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
                  preferred_element_type=float64
                ] emc ffx
                fgb:f64[400,18] = add ffz fga
                fgc:f64[400,18] = sub eyy fgb
                fgd:f64[1,18] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 18)
                ] eyn
                fge:f64[400,18] = add fgc fgd
                fgf:f64[400,19] fgg:f64[400,18] _:f64[400,18,18] _:f64[400,18] = scan[
                  _split_transpose=False
                  jaxpr={ lambda ; fgh:i64[4] fgi:f64[400,36] fgj:f64[36,2] fgk:f64[400,9]
                      fgl:f64[4] fgm:f64[] fgn:f64[3] fgo:f64[3] fgp:f64[3] fgq:f64[]
                      fgr:f64[8] fgs:f64[3] fgt:f64[3] fgu:f64[3] fgv:i64[3] fgw:f64[3]
                      fgx:f64[12] fgy:i32[12] fgz:i32[12] fha:f64[12,2] fhb:f64[12]
                      fhc:f64[12] fhd:f64[12] fhe:f64[12] fhf:f64[12,2] fhg:f64[400,18]
                      fhh:f64[18] fhi:f64[400,19] fhj:f64[400,18] fhk:f64[400,18,18]
                      fhl:f64[400,18]. let
                      fhm:f64[400,4] = slice[
                        limit_indices=(400, 7)
                        start_indices=(0, 3)
                        strides=None
                      ] fhi
                      fhn:f64[400,12] = slice[
                        limit_indices=(400, 19)
                        start_indices=(0, 7)
                        strides=None
                      ] fhi
                      fho:f64[400,3] = slice[
                        limit_indices=(400, 3)
                        start_indices=(0, 0)
                        strides=None
                      ] fhj
                      fhp:f64[4] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] fgh
                      fhq:f64[1,4] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 4)
                      ] fhp
                      fhr:f64[400,4] = mul fhm fhq
                      fhs:f64[400,1] = slice[
                        limit_indices=(400, 1)
                        start_indices=(0, 0)
                        strides=None
                      ] fhr
                      fht:f64[400] = squeeze[dimensions=(1,)] fhs
                      fhu:f64[400,3] = slice[
                        limit_indices=(400, 4)
                        start_indices=(0, 1)
                        strides=None
                      ] fhr
                      fhv:f64[400] = dot_general[
                        dimension_numbers=(([1], [1]), ([0], [0]))
                        preferred_element_type=float64
                      ] fhu fho
                      fhw:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] fhv
                      fhx:f64[400,3] = mul fhw fhu
                      fhy:f64[400,3] = mul 2.0 fhx
                      fhz:f64[400] = mul fht fht
                      fia:f64[400] = dot_general[
                        dimension_numbers=(([1], [1]), ([0], [0]))
                        preferred_element_type=float64
                      ] fhu fhu
                      fib:f64[400] = sub fhz fia
                      fic:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] fib
                      fid:f64[400,3] = mul fic fho
                      fie:f64[400,3] = add fhy fid
                      fif:f64[400] = mul 2.0 fht
                      fig:f64[400,3] = pjit[name=cross jaxpr=cross] fhu fho
                      fih:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] fif
                      fii:f64[400,3] = mul fih fig
                      fij:f64[400,3] = add fie fii
                      fik:f64[400,3] = slice[
                        limit_indices=(400, 6)
                        start_indices=(0, 3)
                        strides=None
                      ] fhj
                      fil:f64[400,1] = slice[
                        limit_indices=(400, 1)
                        start_indices=(0, 0)
                        strides=None
                      ] fhm
                      fim:f64[400] = squeeze[dimensions=(1,)] fil
                      fin:f64[400,3] = slice[
                        limit_indices=(400, 4)
                        start_indices=(0, 1)
                        strides=None
                      ] fhm
                      fio:f64[400] = dot_general[
                        dimension_numbers=(([1], [1]), ([0], [0]))
                        preferred_element_type=float64
                      ] fin fik
                      fip:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] fio
                      fiq:f64[400,3] = mul fip fin
                      fir:f64[400,3] = mul 2.0 fiq
                      fis:f64[400] = mul fim fim
                      fit:f64[400] = dot_general[
                        dimension_numbers=(([1], [1]), ([0], [0]))
                        preferred_element_type=float64
                      ] fin fin
                      fiu:f64[400] = sub fis fit
                      fiv:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] fiu
                      fiw:f64[400,3] = mul fiv fik
                      fix:f64[400,3] = add fir fiw
                      fiy:f64[400] = mul 2.0 fim
                      fiz:f64[400,3] = pjit[name=cross jaxpr=cross] fin fik
                      fja:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] fiy
                      fjb:f64[400,3] = mul fja fiz
                      fjc:f64[400,3] = add fix fjb
                      fjd:f64[400,12] = slice[
                        limit_indices=(400, 18)
                        start_indices=(0, 6)
                        strides=None
                      ] fhj
                      fje:f64[400,34] = concatenate[dimension=1] fhm fhn fij fjc
                        fjd
                      fjf:f64[400,1] = slice[
                        limit_indices=(400, 35)
                        start_indices=(0, 34)
                        strides=None
                      ] fgi
                      fjg:f64[400] = squeeze[dimensions=(1,)] fjf
                      fjh:f64[400,1] = slice[
                        limit_indices=(400, 36)
                        start_indices=(0, 35)
                        strides=None
                      ] fgi
                      fji:f64[400] = squeeze[dimensions=(1,)] fjh
                      fjj:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] fjg
                      fjk:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] fji
                      fjl:f64[400,2] = concatenate[dimension=1] fjj fjk
                      fjm:f64[400,36] = concatenate[dimension=1] fje fjl
                      fjn:f64[36,1] = slice[
                        limit_indices=(36, 1)
                        start_indices=(0, 0)
                        strides=None
                      ] fgj
                      fjo:f64[36] = squeeze[dimensions=(1,)] fjn
                      fjp:f64[1,36] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 36)
                      ] fjo
                      fjq:f64[400,36] = sub fjm fjp
                      fjr:f64[400,36] = mul 2.0 fjq
                      fjs:f64[36,1] = slice[
                        limit_indices=(36, 2)
                        start_indices=(0, 1)
                        strides=None
                      ] fgj
                      fjt:f64[36] = squeeze[dimensions=(1,)] fjs
                      fju:f64[36,1] = slice[
                        limit_indices=(36, 1)
                        start_indices=(0, 0)
                        strides=None
                      ] fgj
                      fjv:f64[36] = squeeze[dimensions=(1,)] fju
                      fjw:f64[36] = sub fjt fjv
                      fjx:f64[1,36] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 36)
                      ] fjw
                      fjy:f64[400,36] = div fjr fjx
                      fjz:f64[400,36] = sub fjy 1.0
                      fka:f64[400,36] = add fjz 1.0
                      fkb:f64[36,1] = slice[
                        limit_indices=(36, 2)
                        start_indices=(0, 1)
                        strides=None
                      ] fgj
                      fkc:f64[36] = squeeze[dimensions=(1,)] fkb
                      fkd:f64[36,1] = slice[
                        limit_indices=(36, 1)
                        start_indices=(0, 0)
                        strides=None
                      ] fgj
                      fke:f64[36] = squeeze[dimensions=(1,)] fkd
                      fkf:f64[36] = sub fkc fke
                      fkg:f64[1,36] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 36)
                      ] fkf
                      fkh:f64[400,36] = mul fka fkg
                      fki:f64[400,36] = div fkh 2.0
                      fkj:f64[36,1] = slice[
                        limit_indices=(36, 1)
                        start_indices=(0, 0)
                        strides=None
                      ] fgj
                      fkk:f64[36] = squeeze[dimensions=(1,)] fkj
                      fkl:f64[1,36] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 36)
                      ] fkk
                      fkm:f64[400,36] = add fki fkl
                      fkn:f64[400,1] = slice[
                        limit_indices=(400, 9)
                        start_indices=(0, 8)
                        strides=None
                      ] fgk
                      fko:f64[400] = squeeze[dimensions=(1,)] fkn
                      fkp:f64[] = mul fgm 1.0
                      fkq:f64[400,1] = slice[
                        limit_indices=(400, 35)
                        start_indices=(0, 34)
                        strides=None
                      ] fkm
                      fkr:f64[400] = squeeze[dimensions=(1,)] fkq
                      fks:f64[400,1] = slice[
                        limit_indices=(400, 36)
                        start_indices=(0, 35)
                        strides=None
                      ] fkm
                      fkt:f64[400] = squeeze[dimensions=(1,)] fks
                      fku:f64[400] = atan2 fkt fkr
                      fkv:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] fgl
                      fkw:f64[] = squeeze[dimensions=(0,)] fkv
                      fkx:f64[400] = div fku 6.283185307179586
                      fky:f64[400] = add fkx 0.5
                      fkz:f64[400] = add fky fkw
                      fla:f64[400] = pjit[name=remainder jaxpr=remainder10] fkz 1
                      flb:bool[400] = lt fla 0.5
                      flc:bool[400] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(400,)
                      ] False
                      fld:bool[400] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(400,)
                      ] True
                      fle:bool[400] = select_n flb flc fld
                      flf:f64[400] = div fla 0.5
                      flg:f64[400] = sub fla 0.5
                      flh:f64[400] = div flg 0.5
                      fli:f64[400] = select_n fle flh flf
                      flj:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] fgl
                      flk:f64[] = squeeze[dimensions=(0,)] flj
                      fll:f64[400] = div fku 6.283185307179586
                      flm:f64[400] = add fll 0.5
                      fln:f64[400] = add flm flk
                      flo:f64[400] = pjit[name=remainder jaxpr=remainder10] fln 1
                      flp:bool[400] = lt flo 0.5
                      flq:bool[400] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(400,)
                      ] False
                      flr:bool[400] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(400,)
                      ] True
                      fls:bool[400] = select_n flp flq flr
                      flt:f64[400] = div flo 0.5
                      flu:f64[400] = sub flo 0.5
                      flv:f64[400] = div flu 0.5
                      flw:f64[400] = select_n fls flv flt
                      flx:f64[1] = slice[
                        limit_indices=(3,)
                        start_indices=(2,)
                        strides=None
                      ] fgl
                      fly:f64[] = squeeze[dimensions=(0,)] flx
                      flz:f64[400] = div fku 6.283185307179586
                      fma:f64[400] = add flz 0.5
                      fmb:f64[400] = add fma fly
                      fmc:f64[400] = pjit[name=remainder jaxpr=remainder10] fmb 1
                      fmd:bool[400] = lt fmc 0.5
                      fme:bool[400] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(400,)
                      ] False
                      fmf:bool[400] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(400,)
                      ] True
                      fmg:bool[400] = select_n fmd fme fmf
                      fmh:f64[400] = div fmc 0.5
                      fmi:f64[400] = sub fmc 0.5
                      fmj:f64[400] = div fmi 0.5
                      fmk:f64[400] = select_n fmg fmj fmh
                      fml:f64[1] = slice[
                        limit_indices=(4,)
                        start_indices=(3,)
                        strides=None
                      ] fgl
                      fmm:f64[] = squeeze[dimensions=(0,)] fml
                      fmn:f64[400] = div fku 6.283185307179586
                      fmo:f64[400] = add fmn 0.5
                      fmp:f64[400] = add fmo fmm
                      fmq:f64[400] = pjit[name=remainder jaxpr=remainder10] fmp 1
                      fmr:bool[400] = lt fmq 0.5
                      fms:bool[400] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(400,)
                      ] False
                      fmt:bool[400] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(400,)
                      ] True
                      fmu:bool[400] = select_n fmr fms fmt
                      fmv:f64[400] = div fmq 0.5
                      fmw:f64[400] = sub fmq 0.5
                      fmx:f64[400] = div fmw 0.5
                      fmy:f64[400] = select_n fmu fmx fmv
                      fmz:f64[8] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(8,)
                      ] 0.0
                      fna:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] fgn
                      fnb:f64[] = squeeze[dimensions=(0,)] fna
                      fnc:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] fgo
                      fnd:f64[] = squeeze[dimensions=(0,)] fnc
                      fne:f64[] = select_n True fnd fnb
                      fnf:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] fgn
                      fng:f64[] = squeeze[dimensions=(0,)] fnf
                      fnh:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] fgp
                      fni:f64[] = squeeze[dimensions=(0,)] fnh
                      fnj:f64[] = select_n True fni fng
                      fnk:f64[] = mul 0.0 0.25
                      fnl:f64[] = atan2 fnj fne
                      fnm:f64[] = add fnl fnk
                      fnn:f64[] = cos fnm
                      fno:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] fgq
                      fnp:f64[] = mul fno fnn
                      fnq:f64[] = sub fnp fne
                      fnr:f64[] = atan2 fnj fne
                      fns:f64[] = add fnr fnk
                      fnt:f64[] = sin fns
                      fnu:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] fgq
                      fnv:f64[] = mul fnu fnt
                      fnw:f64[] = sub fnv fnj
                      fnx:f64[2] = slice[
                        limit_indices=(2,)
                        start_indices=(0,)
                        strides=None
                      ] fmz
                      fny:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] fnx
                      fnz:f64[] = squeeze[dimensions=(0,)] fny
                      foa:f64[2] = slice[
                        limit_indices=(2,)
                        start_indices=(0,)
                        strides=None
                      ] fmz
                      fob:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] foa
                      foc:f64[] = squeeze[dimensions=(0,)] fob
                      fod:f64[] = mul fkp 0.25
                      foe:f64[] = add fod fnq
                      fof:f64[] = add foe fnz
                      fog:f64[] = add fnw foc
                      foh:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] fof
                      foi:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] fog
                      foj:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] 0.0
                      fok:f64[3] = concatenate[dimension=0] foh foi foj
                      fol:f64[3] = neg fok
                      fom:f64[8] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(8,)
                      ] 0.0
                      fon:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] fgn
                      foo:f64[] = squeeze[dimensions=(0,)] fon
                      fop:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] fgo
                      foq:f64[] = squeeze[dimensions=(0,)] fop
                      for:f64[] = select_n True foq foo
                      fos:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] fgn
                      fot:f64[] = squeeze[dimensions=(0,)] fos
                      fou:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] fgp
                      fov:f64[] = squeeze[dimensions=(0,)] fou
                      fow:f64[] = select_n False fov fot
                      fox:f64[] = mul 0.0 0.25
                      foy:f64[] = atan2 fow for
                      foz:f64[] = add foy fox
                      fpa:f64[] = cos foz
                      fpb:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] fgq
                      fpc:f64[] = mul fpb fpa
                      fpd:f64[] = sub fpc for
                      fpe:f64[] = atan2 fow for
                      fpf:f64[] = add fpe fox
                      fpg:f64[] = sin fpf
                      fph:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] fgq
                      fpi:f64[] = mul fph fpg
                      fpj:f64[] = sub fpi fow
                      fpk:f64[2] = slice[
                        limit_indices=(4,)
                        start_indices=(2,)
                        strides=None
                      ] fom
                      fpl:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] fpk
                      fpm:f64[] = squeeze[dimensions=(0,)] fpl
                      fpn:f64[2] = slice[
                        limit_indices=(4,)
                        start_indices=(2,)
                        strides=None
                      ] fom
                      fpo:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] fpn
                      fpp:f64[] = squeeze[dimensions=(0,)] fpo
                      fpq:f64[] = mul fkp 0.25
                      fpr:f64[] = add fpq fpd
                      fps:f64[] = add fpr fpm
                      fpt:f64[] = add fpj fpp
                      fpu:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] fps
                      fpv:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] fpt
                      fpw:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] 0.0
                      fpx:f64[3] = concatenate[dimension=0] fpu fpv fpw
                      fpy:f64[3] = neg fpx
                      fpz:f64[8] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(8,)
                      ] 0.0
                      fqa:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] fgn
                      fqb:f64[] = squeeze[dimensions=(0,)] fqa
                      fqc:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] fgo
                      fqd:f64[] = squeeze[dimensions=(0,)] fqc
                      fqe:f64[] = select_n False fqd fqb
                      fqf:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] fgn
                      fqg:f64[] = squeeze[dimensions=(0,)] fqf
                      fqh:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] fgp
                      fqi:f64[] = squeeze[dimensions=(0,)] fqh
                      fqj:f64[] = select_n True fqi fqg
                      fqk:f64[] = mul 0.0 0.25
                      fql:f64[] = atan2 fqj fqe
                      fqm:f64[] = add fql fqk
                      fqn:f64[] = cos fqm
                      fqo:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] fgq
                      fqp:f64[] = mul fqo fqn
                      fqq:f64[] = sub fqp fqe
                      fqr:f64[] = atan2 fqj fqe
                      fqs:f64[] = add fqr fqk
                      fqt:f64[] = sin fqs
                      fqu:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] fgq
                      fqv:f64[] = mul fqu fqt
                      fqw:f64[] = sub fqv fqj
                      fqx:f64[2] = slice[
                        limit_indices=(6,)
                        start_indices=(4,)
                        strides=None
                      ] fpz
                      fqy:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] fqx
                      fqz:f64[] = squeeze[dimensions=(0,)] fqy
                      fra:f64[2] = slice[
                        limit_indices=(6,)
                        start_indices=(4,)
                        strides=None
                      ] fpz
                      frb:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] fra
                      frc:f64[] = squeeze[dimensions=(0,)] frb
                      frd:f64[] = mul fkp 0.25
                      fre:f64[] = add frd fqq
                      frf:f64[] = add fre fqz
                      frg:f64[] = add fqw frc
                      frh:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] frf
                      fri:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] frg
                      frj:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] 0.0
                      frk:f64[3] = concatenate[dimension=0] frh fri frj
                      frl:f64[3] = neg frk
                      frm:f64[8] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(8,)
                      ] 0.0
                      frn:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] fgn
                      fro:f64[] = squeeze[dimensions=(0,)] frn
                      frp:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] fgo
                      frq:f64[] = squeeze[dimensions=(0,)] frp
                      frr:f64[] = select_n False frq fro
                      frs:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] fgn
                      frt:f64[] = squeeze[dimensions=(0,)] frs
                      fru:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] fgp
                      frv:f64[] = squeeze[dimensions=(0,)] fru
                      frw:f64[] = select_n False frv frt
                      frx:f64[] = mul 0.0 0.25
                      fry:f64[] = atan2 frw frr
                      frz:f64[] = add fry frx
                      fsa:f64[] = cos frz
                      fsb:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] fgq
                      fsc:f64[] = mul fsb fsa
                      fsd:f64[] = sub fsc frr
                      fse:f64[] = atan2 frw frr
                      fsf:f64[] = add fse frx
                      fsg:f64[] = sin fsf
                      fsh:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] fgq
                      fsi:f64[] = mul fsh fsg
                      fsj:f64[] = sub fsi frw
                      fsk:f64[2] = slice[
                        limit_indices=(8,)
                        start_indices=(6,)
                        strides=None
                      ] frm
                      fsl:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] fsk
                      fsm:f64[] = squeeze[dimensions=(0,)] fsl
                      fsn:f64[2] = slice[
                        limit_indices=(8,)
                        start_indices=(6,)
                        strides=None
                      ] frm
                      fso:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] fsn
                      fsp:f64[] = squeeze[dimensions=(0,)] fso
                      fsq:f64[] = mul fkp 0.25
                      fsr:f64[] = add fsq fsd
                      fss:f64[] = add fsr fsm
                      fst:f64[] = add fsj fsp
                      fsu:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] fss
                      fsv:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] fst
                      fsw:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] 0.0
                      fsx:f64[3] = concatenate[dimension=0] fsu fsv fsw
                      fsy:f64[3] = neg fsx
                      fsz:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] fgn
                      fta:f64[] = squeeze[dimensions=(0,)] fsz
                      ftb:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] fgo
                      ftc:f64[] = squeeze[dimensions=(0,)] ftb
                      ftd:f64[] = select_n True ftc fta
                      fte:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] fgn
                      ftf:f64[] = squeeze[dimensions=(0,)] fte
                      ftg:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] fgp
                      fth:f64[] = squeeze[dimensions=(0,)] ftg
                      fti:f64[] = select_n True fth ftf
                      ftj:f64[] = mul 0.0 0.25
                      ftk:f64[] = atan2 fti ftd
                      ftl:f64[] = add ftk ftj
                      ftm:f64[] = cos ftl
                      ftn:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] fgq
                      fto:f64[] = mul ftn ftm
                      ftp:f64[] = sub fto ftd
                      ftq:f64[] = atan2 fti ftd
                      ftr:f64[] = add ftq ftj
                      fts:f64[] = sin ftr
                      ftt:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] fgq
                      ftu:f64[] = mul ftt fts
                      ftv:f64[] = sub ftu fti
                      ftw:f64[2] = slice[
                        limit_indices=(2,)
                        start_indices=(0,)
                        strides=None
                      ] fgr
                      ftx:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] ftw
                      fty:f64[] = squeeze[dimensions=(0,)] ftx
                      ftz:f64[2] = slice[
                        limit_indices=(2,)
                        start_indices=(0,)
                        strides=None
                      ] fgr
                      fua:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] ftz
                      fub:f64[] = squeeze[dimensions=(0,)] fua
                      fuc:f64[] = mul fkp 0.25
                      fud:f64[] = add fuc ftp
                      fue:f64[] = add fud fty
                      fuf:f64[] = add ftv fub
                      fug:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] fue
                      fuh:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] fuf
                      fui:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] 0.0
                      fuj:f64[3] = concatenate[dimension=0] fug fuh fui
                      fuk:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] fgn
                      ful:f64[] = squeeze[dimensions=(0,)] fuk
                      fum:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] fgo
                      fun:f64[] = squeeze[dimensions=(0,)] fum
                      fuo:f64[] = select_n True fun ful
                      fup:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] fgn
                      fuq:f64[] = squeeze[dimensions=(0,)] fup
                      fur:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] fgp
                      fus:f64[] = squeeze[dimensions=(0,)] fur
                      fut:f64[] = select_n False fus fuq
                      fuu:f64[] = mul 0.0 0.25
                      fuv:f64[] = atan2 fut fuo
                      fuw:f64[] = add fuv fuu
                      fux:f64[] = cos fuw
                      fuy:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] fgq
                      fuz:f64[] = mul fuy fux
                      fva:f64[] = sub fuz fuo
                      fvb:f64[] = atan2 fut fuo
                      fvc:f64[] = add fvb fuu
                      fvd:f64[] = sin fvc
                      fve:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] fgq
                      fvf:f64[] = mul fve fvd
                      fvg:f64[] = sub fvf fut
                      fvh:f64[2] = slice[
                        limit_indices=(4,)
                        start_indices=(2,)
                        strides=None
                      ] fgr
                      fvi:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] fvh
                      fvj:f64[] = squeeze[dimensions=(0,)] fvi
                      fvk:f64[2] = slice[
                        limit_indices=(4,)
                        start_indices=(2,)
                        strides=None
                      ] fgr
                      fvl:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] fvk
                      fvm:f64[] = squeeze[dimensions=(0,)] fvl
                      fvn:f64[] = mul fkp 0.25
                      fvo:f64[] = add fvn fva
                      fvp:f64[] = add fvo fvj
                      fvq:f64[] = add fvg fvm
                      fvr:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] fvp
                      fvs:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] fvq
                      fvt:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] 0.0
                      fvu:f64[3] = concatenate[dimension=0] fvr fvs fvt
                      fvv:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] fgn
                      fvw:f64[] = squeeze[dimensions=(0,)] fvv
                      fvx:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] fgo
                      fvy:f64[] = squeeze[dimensions=(0,)] fvx
                      fvz:f64[] = select_n False fvy fvw
                      fwa:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] fgn
                      fwb:f64[] = squeeze[dimensions=(0,)] fwa
                      fwc:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] fgp
                      fwd:f64[] = squeeze[dimensions=(0,)] fwc
                      fwe:f64[] = select_n True fwd fwb
                      fwf:f64[] = mul 0.0 0.25
                      fwg:f64[] = atan2 fwe fvz
                      fwh:f64[] = add fwg fwf
                      fwi:f64[] = cos fwh
                      fwj:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] fgq
                      fwk:f64[] = mul fwj fwi
                      fwl:f64[] = sub fwk fvz
                      fwm:f64[] = atan2 fwe fvz
                      fwn:f64[] = add fwm fwf
                      fwo:f64[] = sin fwn
                      fwp:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] fgq
                      fwq:f64[] = mul fwp fwo
                      fwr:f64[] = sub fwq fwe
                      fws:f64[2] = slice[
                        limit_indices=(6,)
                        start_indices=(4,)
                        strides=None
                      ] fgr
                      fwt:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] fws
                      fwu:f64[] = squeeze[dimensions=(0,)] fwt
                      fwv:f64[2] = slice[
                        limit_indices=(6,)
                        start_indices=(4,)
                        strides=None
                      ] fgr
                      fww:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] fwv
                      fwx:f64[] = squeeze[dimensions=(0,)] fww
                      fwy:f64[] = mul fkp 0.25
                      fwz:f64[] = add fwy fwl
                      fxa:f64[] = add fwz fwu
                      fxb:f64[] = add fwr fwx
                      fxc:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] fxa
                      fxd:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] fxb
                      fxe:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] 0.0
                      fxf:f64[3] = concatenate[dimension=0] fxc fxd fxe
                      fxg:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] fgn
                      fxh:f64[] = squeeze[dimensions=(0,)] fxg
                      fxi:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] fgo
                      fxj:f64[] = squeeze[dimensions=(0,)] fxi
                      fxk:f64[] = select_n False fxj fxh
                      fxl:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] fgn
                      fxm:f64[] = squeeze[dimensions=(0,)] fxl
                      fxn:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] fgp
                      fxo:f64[] = squeeze[dimensions=(0,)] fxn
                      fxp:f64[] = select_n False fxo fxm
                      fxq:f64[] = mul 0.0 0.25
                      fxr:f64[] = atan2 fxp fxk
                      fxs:f64[] = add fxr fxq
                      fxt:f64[] = cos fxs
                      fxu:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] fgq
                      fxv:f64[] = mul fxu fxt
                      fxw:f64[] = sub fxv fxk
                      fxx:f64[] = atan2 fxp fxk
                      fxy:f64[] = add fxx fxq
                      fxz:f64[] = sin fxy
                      fya:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] fgq
                      fyb:f64[] = mul fya fxz
                      fyc:f64[] = sub fyb fxp
                      fyd:f64[2] = slice[
                        limit_indices=(8,)
                        start_indices=(6,)
                        strides=None
                      ] fgr
                      fye:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] fyd
                      fyf:f64[] = squeeze[dimensions=(0,)] fye
                      fyg:f64[2] = slice[
                        limit_indices=(8,)
                        start_indices=(6,)
                        strides=None
                      ] fgr
                      fyh:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] fyg
                      fyi:f64[] = squeeze[dimensions=(0,)] fyh
                      fyj:f64[] = mul fkp 0.25
                      fyk:f64[] = add fyj fxw
                      fyl:f64[] = add fyk fyf
                      fym:f64[] = add fyc fyi
                      fyn:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] fyl
                      fyo:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] fym
                      fyp:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] 0.0
                      fyq:f64[3] = concatenate[dimension=0] fyn fyo fyp
                      fyr:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] fol
                      fys:f64[] = squeeze[dimensions=(0,)] fyr
                      fyt:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] fuj
                      fyu:f64[] = squeeze[dimensions=(0,)] fyt
                      fyv:f64[] = sub fyu fys
                      fyw:f64[] = div fyv 6.283185307179586
                      fyx:f64[400] = mul 6.283185307179586 fli
                      fyy:f64[400] = mul 6.283185307179586 fli
                      fyz:f64[400] = sin fyy
                      fza:f64[400] = sub fyx fyz
                      fzb:f64[400] = mul fyw fza
                      fzc:f64[400] = add fzb fys
                      fzd:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] fol
                      fze:f64[] = squeeze[dimensions=(0,)] fzd
                      fzf:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] fuj
                      fzg:f64[] = squeeze[dimensions=(0,)] fzf
                      fzh:f64[] = sub fzg fze
                      fzi:f64[] = div fzh 6.283185307179586
                      fzj:f64[400] = mul 6.283185307179586 fli
                      fzk:f64[400] = mul 6.283185307179586 fli
                      fzl:f64[400] = sin fzk
                      fzm:f64[400] = sub fzj fzl
                      fzn:f64[400] = mul fzi fzm
                      fzo:f64[400] = add fzn fze
                      fzp:f64[400] = mul 6.283185307179586 fli
                      fzq:f64[400] = cos fzp
                      fzr:f64[400] = sub 1.0 fzq
                      fzs:f64[400] = mul 0.045 fzr
                      fzt:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] fzc
                      fzu:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] fzo
                      fzv:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] fzs
                      fzw:f64[400,3] = concatenate[dimension=1] fzt fzu fzv
                      fzx:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] fpy
                      fzy:f64[] = squeeze[dimensions=(0,)] fzx
                      fzz:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] fvu
                      gaa:f64[] = squeeze[dimensions=(0,)] fzz
                      gab:f64[] = sub gaa fzy
                      gac:f64[] = div gab 6.283185307179586
                      gad:f64[400] = mul 6.283185307179586 flw
                      gae:f64[400] = mul 6.283185307179586 flw
                      gaf:f64[400] = sin gae
                      gag:f64[400] = sub gad gaf
                      gah:f64[400] = mul gac gag
                      gai:f64[400] = add gah fzy
                      gaj:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] fpy
                      gak:f64[] = squeeze[dimensions=(0,)] gaj
                      gal:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] fvu
                      gam:f64[] = squeeze[dimensions=(0,)] gal
                      gan:f64[] = sub gam gak
                      gao:f64[] = div gan 6.283185307179586
                      gap:f64[400] = mul 6.283185307179586 flw
                      gaq:f64[400] = mul 6.283185307179586 flw
                      gar:f64[400] = sin gaq
                      gas:f64[400] = sub gap gar
                      gat:f64[400] = mul gao gas
                      gau:f64[400] = add gat gak
                      gav:f64[400] = mul 6.283185307179586 flw
                      gaw:f64[400] = cos gav
                      gax:f64[400] = sub 1.0 gaw
                      gay:f64[400] = mul 0.045 gax
                      gaz:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] gai
                      gba:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] gau
                      gbb:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] gay
                      gbc:f64[400,3] = concatenate[dimension=1] gaz gba gbb
                      gbd:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] frl
                      gbe:f64[] = squeeze[dimensions=(0,)] gbd
                      gbf:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] fxf
                      gbg:f64[] = squeeze[dimensions=(0,)] gbf
                      gbh:f64[] = sub gbg gbe
                      gbi:f64[] = div gbh 6.283185307179586
                      gbj:f64[400] = mul 6.283185307179586 fmk
                      gbk:f64[400] = mul 6.283185307179586 fmk
                      gbl:f64[400] = sin gbk
                      gbm:f64[400] = sub gbj gbl
                      gbn:f64[400] = mul gbi gbm
                      gbo:f64[400] = add gbn gbe
                      gbp:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] frl
                      gbq:f64[] = squeeze[dimensions=(0,)] gbp
                      gbr:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] fxf
                      gbs:f64[] = squeeze[dimensions=(0,)] gbr
                      gbt:f64[] = sub gbs gbq
                      gbu:f64[] = div gbt 6.283185307179586
                      gbv:f64[400] = mul 6.283185307179586 fmk
                      gbw:f64[400] = mul 6.283185307179586 fmk
                      gbx:f64[400] = sin gbw
                      gby:f64[400] = sub gbv gbx
                      gbz:f64[400] = mul gbu gby
                      gca:f64[400] = add gbz gbq
                      gcb:f64[400] = mul 6.283185307179586 fmk
                      gcc:f64[400] = cos gcb
                      gcd:f64[400] = sub 1.0 gcc
                      gce:f64[400] = mul 0.045 gcd
                      gcf:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] gbo
                      gcg:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] gca
                      gch:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] gce
                      gci:f64[400,3] = concatenate[dimension=1] gcf gcg gch
                      gcj:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] fsy
                      gck:f64[] = squeeze[dimensions=(0,)] gcj
                      gcl:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] fyq
                      gcm:f64[] = squeeze[dimensions=(0,)] gcl
                      gcn:f64[] = sub gcm gck
                      gco:f64[] = div gcn 6.283185307179586
                      gcp:f64[400] = mul 6.283185307179586 fmy
                      gcq:f64[400] = mul 6.283185307179586 fmy
                      gcr:f64[400] = sin gcq
                      gcs:f64[400] = sub gcp gcr
                      gct:f64[400] = mul gco gcs
                      gcu:f64[400] = add gct gck
                      gcv:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] fsy
                      gcw:f64[] = squeeze[dimensions=(0,)] gcv
                      gcx:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] fyq
                      gcy:f64[] = squeeze[dimensions=(0,)] gcx
                      gcz:f64[] = sub gcy gcw
                      gda:f64[] = div gcz 6.283185307179586
                      gdb:f64[400] = mul 6.283185307179586 fmy
                      gdc:f64[400] = mul 6.283185307179586 fmy
                      gdd:f64[400] = sin gdc
                      gde:f64[400] = sub gdb gdd
                      gdf:f64[400] = mul gda gde
                      gdg:f64[400] = add gdf gcw
                      gdh:f64[400] = mul 6.283185307179586 fmy
                      gdi:f64[400] = cos gdh
                      gdj:f64[400] = sub 1.0 gdi
                      gdk:f64[400] = mul 0.045 gdj
                      gdl:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] gcu
                      gdm:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] gdg
                      gdn:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] gdk
                      gdo:f64[400,3] = concatenate[dimension=1] gdl gdm gdn
                      gdp:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] fuj
                      gdq:f64[] = squeeze[dimensions=(0,)] gdp
                      gdr:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] fol
                      gds:f64[] = squeeze[dimensions=(0,)] gdr
                      gdt:f64[] = sub gds gdq
                      gdu:f64[] = div gdt 6.283185307179586
                      gdv:f64[400] = mul 6.283185307179586 fli
                      gdw:f64[400] = mul 6.283185307179586 fli
                      gdx:f64[400] = sin gdw
                      gdy:f64[400] = sub gdv gdx
                      gdz:f64[400] = mul gdu gdy
                      gea:f64[400] = add gdz gdq
                      geb:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] fuj
                      gec:f64[] = squeeze[dimensions=(0,)] geb
                      ged:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] fol
                      gee:f64[] = squeeze[dimensions=(0,)] ged
                      gef:f64[] = sub gee gec
                      geg:f64[] = div gef 6.283185307179586
                      geh:f64[400] = mul 6.283185307179586 fli
                      gei:f64[400] = mul 6.283185307179586 fli
                      gej:f64[400] = sin gei
                      gek:f64[400] = sub geh gej
                      gel:f64[400] = mul geg gek
                      gem:f64[400] = add gel gec
                      gen:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] gea
                      geo:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] gem
                      gep:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] 0.0
                      geq:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(400, 1)
                      ] gep
                      ger:f64[400,3] = concatenate[dimension=1] gen geo geq
                      ges:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] fvu
                      get:f64[] = squeeze[dimensions=(0,)] ges
                      geu:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] fpy
                      gev:f64[] = squeeze[dimensions=(0,)] geu
                      gew:f64[] = sub gev get
                      gex:f64[] = div gew 6.283185307179586
                      gey:f64[400] = mul 6.283185307179586 flw
                      gez:f64[400] = mul 6.283185307179586 flw
                      gfa:f64[400] = sin gez
                      gfb:f64[400] = sub gey gfa
                      gfc:f64[400] = mul gex gfb
                      gfd:f64[400] = add gfc get
                      gfe:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] fvu
                      gff:f64[] = squeeze[dimensions=(0,)] gfe
                      gfg:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] fpy
                      gfh:f64[] = squeeze[dimensions=(0,)] gfg
                      gfi:f64[] = sub gfh gff
                      gfj:f64[] = div gfi 6.283185307179586
                      gfk:f64[400] = mul 6.283185307179586 flw
                      gfl:f64[400] = mul 6.283185307179586 flw
                      gfm:f64[400] = sin gfl
                      gfn:f64[400] = sub gfk gfm
                      gfo:f64[400] = mul gfj gfn
                      gfp:f64[400] = add gfo gff
                      gfq:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] gfd
                      gfr:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] gfp
                      gfs:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] 0.0
                      gft:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(400, 1)
                      ] gfs
                      gfu:f64[400,3] = concatenate[dimension=1] gfq gfr gft
                      gfv:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] fxf
                      gfw:f64[] = squeeze[dimensions=(0,)] gfv
                      gfx:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] frl
                      gfy:f64[] = squeeze[dimensions=(0,)] gfx
                      gfz:f64[] = sub gfy gfw
                      gga:f64[] = div gfz 6.283185307179586
                      ggb:f64[400] = mul 6.283185307179586 fmk
                      ggc:f64[400] = mul 6.283185307179586 fmk
                      ggd:f64[400] = sin ggc
                      gge:f64[400] = sub ggb ggd
                      ggf:f64[400] = mul gga gge
                      ggg:f64[400] = add ggf gfw
                      ggh:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] fxf
                      ggi:f64[] = squeeze[dimensions=(0,)] ggh
                      ggj:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] frl
                      ggk:f64[] = squeeze[dimensions=(0,)] ggj
                      ggl:f64[] = sub ggk ggi
                      ggm:f64[] = div ggl 6.283185307179586
                      ggn:f64[400] = mul 6.283185307179586 fmk
                      ggo:f64[400] = mul 6.283185307179586 fmk
                      ggp:f64[400] = sin ggo
                      ggq:f64[400] = sub ggn ggp
                      ggr:f64[400] = mul ggm ggq
                      ggs:f64[400] = add ggr ggi
                      ggt:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] ggg
                      ggu:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] ggs
                      ggv:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] 0.0
                      ggw:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(400, 1)
                      ] ggv
                      ggx:f64[400,3] = concatenate[dimension=1] ggt ggu ggw
                      ggy:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] fyq
                      ggz:f64[] = squeeze[dimensions=(0,)] ggy
                      gha:f64[1] = slice[
                        limit_indices=(1,)
                        start_indices=(0,)
                        strides=None
                      ] fsy
                      ghb:f64[] = squeeze[dimensions=(0,)] gha
                      ghc:f64[] = sub ghb ggz
                      ghd:f64[] = div ghc 6.283185307179586
                      ghe:f64[400] = mul 6.283185307179586 fmy
                      ghf:f64[400] = mul 6.283185307179586 fmy
                      ghg:f64[400] = sin ghf
                      ghh:f64[400] = sub ghe ghg
                      ghi:f64[400] = mul ghd ghh
                      ghj:f64[400] = add ghi ggz
                      ghk:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] fyq
                      ghl:f64[] = squeeze[dimensions=(0,)] ghk
                      ghm:f64[1] = slice[
                        limit_indices=(2,)
                        start_indices=(1,)
                        strides=None
                      ] fsy
                      ghn:f64[] = squeeze[dimensions=(0,)] ghm
                      gho:f64[] = sub ghn ghl
                      ghp:f64[] = div gho 6.283185307179586
                      ghq:f64[400] = mul 6.283185307179586 fmy
                      ghr:f64[400] = mul 6.283185307179586 fmy
                      ghs:f64[400] = sin ghr
                      ght:f64[400] = sub ghq ghs
                      ghu:f64[400] = mul ghp ght
                      ghv:f64[400] = add ghu ghl
                      ghw:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] ghj
                      ghx:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] ghv
                      ghy:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] 0.0
                      ghz:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(400, 1)
                      ] ghy
                      gia:f64[400,3] = concatenate[dimension=1] ghw ghx ghz
                      gib:bool[400,3] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 3)
                      ] fle
                      gic:f64[400,3] = select_n gib fzw ger
                      gid:f64[1,3] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 3)
                      ] fgn
                      gie:f64[400,3] = add gid gic
                      gif:bool[400,3] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 3)
                      ] fls
                      gig:f64[400,3] = select_n gif gbc gfu
                      gih:f64[1,3] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 3)
                      ] fgp
                      gii:f64[400,3] = add gih gig
                      gij:bool[400,3] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 3)
                      ] fmg
                      gik:f64[400,3] = select_n gij gci ggx
                      gil:f64[1,3] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 3)
                      ] fgo
                      gim:f64[400,3] = add gil gik
                      gin:bool[400,3] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 3)
                      ] fmu
                      gio:f64[400,3] = select_n gin gdo gia
                      gip:f64[1,3] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 3)
                      ] fgs
                      giq:f64[400,3] = add gip gio
                      gir:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] 0.0
                      gis:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] 0.0
                      git:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] fko
                      giu:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(400, 1)
                      ] gir
                      giv:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(400, 1)
                      ] gis
                      giw:f64[400,3] = concatenate[dimension=1] giu giv git
                      gix:f64[400,1,3] = reshape[
                        dimensions=None
                        new_sizes=(400, 1, 3)
                      ] giw
                      giy:f64[400,3] = squeeze[dimensions=(1,)] gix
                      giz:f64[400,4,3] = broadcast_in_dim[
                        broadcast_dimensions=(0, 2)
                        shape=(400, 4, 3)
                      ] giy
                      gja:f64[400,12] = reshape[
                        dimensions=None
                        new_sizes=(400, 12)
                      ] giz
                      gjb:f64[400,12] = concatenate[dimension=1] gie gii gim giq
                      gjc:f64[400,12] = sub gjb gja
                      gjd:f64[400,8] = slice[
                        limit_indices=(400, 8)
                        start_indices=(0, 0)
                        strides=None
                      ] fgk
                      gje:f64[400,1] = slice[
                        limit_indices=(400, 1)
                        start_indices=(0, 0)
                        strides=None
                      ] gjd
                      gjf:f64[400] = squeeze[dimensions=(1,)] gje
                      gjg:f64[400,1] = slice[
                        limit_indices=(400, 5)
                        start_indices=(0, 4)
                        strides=None
                      ] gjd
                      gjh:f64[400] = squeeze[dimensions=(1,)] gjg
                      gji:f64[400,1] = slice[
                        limit_indices=(400, 2)
                        start_indices=(0, 1)
                        strides=None
                      ] gjd
                      gjj:f64[400] = squeeze[dimensions=(1,)] gji
                      gjk:f64[400,1] = slice[
                        limit_indices=(400, 6)
                        start_indices=(0, 5)
                        strides=None
                      ] gjd
                      gjl:f64[400] = squeeze[dimensions=(1,)] gjk
                      gjm:f64[400,1] = slice[
                        limit_indices=(400, 3)
                        start_indices=(0, 2)
                        strides=None
                      ] gjd
                      gjn:f64[400] = squeeze[dimensions=(1,)] gjm
                      gjo:f64[400,1] = slice[
                        limit_indices=(400, 7)
                        start_indices=(0, 6)
                        strides=None
                      ] gjd
                      gjp:f64[400] = squeeze[dimensions=(1,)] gjo
                      gjq:f64[400,1] = slice[
                        limit_indices=(400, 4)
                        start_indices=(0, 3)
                        strides=None
                      ] gjd
                      gjr:f64[400] = squeeze[dimensions=(1,)] gjq
                      gjs:f64[400,1] = slice[
                        limit_indices=(400, 8)
                        start_indices=(0, 7)
                        strides=None
                      ] gjd
                      gjt:f64[400] = squeeze[dimensions=(1,)] gjs
                      gju:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] gjf
                      gjv:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] gjh
                      gjw:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] 0.0
                      gjx:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] gjj
                      gjy:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] gjl
                      gjz:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] 0.0
                      gka:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] gjn
                      gkb:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] gjp
                      gkc:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] 0.0
                      gkd:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] gjr
                      gke:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] gjt
                      gkf:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] 0.0
                      gkg:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(400, 1)
                      ] gjw
                      gkh:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(400, 1)
                      ] gjz
                      gki:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(400, 1)
                      ] gkc
                      gkj:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(400, 1)
                      ] gkf
                      gkk:f64[400,12] = concatenate[dimension=1] gju gjv gkg gjx
                        gjy gkh gka gkb gki gkd gke gkj
                      gkl:f64[400,12] = add gjc gkk
                      gkm:f64[400,3] = slice[
                        limit_indices=(400, 3)
                        start_indices=(0, 0)
                        strides=None
                      ] gkl
                      gkn:f64[] = select_n False 0.1881 -0.1881
                      gko:f64[] = select_n True 0.04675 -0.04675
                      gkp:f64[400,1] = slice[
                        limit_indices=(400, 1)
                        start_indices=(0, 0)
                        strides=None
                      ] gkm
                      gkq:f64[400] = squeeze[dimensions=(1,)] gkp
                      gkr:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] gkn
                      gks:f64[400] = sub gkq gkr
                      gkt:f64[400,1] = slice[
                        limit_indices=(400, 2)
                        start_indices=(0, 1)
                        strides=None
                      ] gkm
                      gku:f64[400] = squeeze[dimensions=(1,)] gkt
                      gkv:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] gko
                      gkw:f64[400] = sub gku gkv
                      gkx:f64[400,1] = slice[
                        limit_indices=(400, 3)
                        start_indices=(0, 2)
                        strides=None
                      ] gkm
                      gky:f64[400] = squeeze[dimensions=(1,)] gkx
                      gkz:f64[] = select_n True 0.08 -0.08
                      gla:f64[400] = integer_pow[y=2] gks
                      glb:f64[400] = integer_pow[y=2] gkw
                      glc:f64[400] = add gla glb
                      gld:f64[400] = integer_pow[y=2] gky
                      gle:f64[400] = add glc gld
                      glf:f64[400] = sqrt gle
                      glg:f64[400] = integer_pow[y=2] glf
                      glh:f64[400] = sub glg 0.0064
                      gli:f64[400] = sqrt glh
                      glj:f64[400] = integer_pow[y=2] gkw
                      glk:f64[400] = integer_pow[y=2] gky
                      gll:f64[400] = add glj glk
                      glm:f64[] = integer_pow[y=2] gkz
                      gln:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] glm
                      glo:f64[400] = sub gll gln
                      glp:f64[400] = sqrt glo
                      glq:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] gkz
                      glr:f64[400] = mul gky glq
                      gls:f64[400] = mul gkw glp
                      glt:f64[400] = add glr gls
                      glu:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] gkz
                      glv:f64[400] = mul gkw glu
                      glw:f64[400] = mul gky glp
                      glx:f64[400] = sub glv glw
                      gly:f64[400] = atan2 glt glx
                      glz:f64[400] = integer_pow[y=2] gli
                      gma:f64[400] = sub 0.090738 glz
                      gmb:f64[] = abs 0.045369
                      gmc:f64[] = mul 2.0 gmb
                      gmd:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] gmc
                      gme:f64[400] = div gma gmd
                      gmf:f64[1] = slice[
                        limit_indices=(3,)
                        start_indices=(2,)
                        strides=None
                      ] fgt
                      gmg:f64[] = squeeze[dimensions=(0,)] gmf
                      gmh:f64[1] = slice[
                        limit_indices=(3,)
                        start_indices=(2,)
                        strides=None
                      ] fgu
                      gmi:f64[] = squeeze[dimensions=(0,)] gmh
                      gmj:f64[] = add 3.141592653589793 gmg
                      gmk:f64[] = cos gmj
                      gml:f64[] = add 3.141592653589793 gmi
                      gmm:f64[] = cos gml
                      gmn:f64[400] = pjit[name=clip jaxpr=clip5] gme gmk gmm
                      gmo:f64[400] = acos gmn
                      gmp:f64[400] = sub 3.141592653589793 gmo
                      gmq:f64[400] = neg gmp
                      gmr:f64[400] = sin gly
                      gms:f64[400] = mul gkw gmr
                      gmt:f64[400] = cos gly
                      gmu:f64[400] = mul gky gmt
                      gmv:f64[400] = sub gms gmu
                      gmw:f64[400] = sin gmq
                      gmx:f64[400] = mul -0.213 gmw
                      gmy:f64[400] = cos gmq
                      gmz:f64[400] = mul -0.213 gmy
                      gna:f64[400] = add -0.213 gmz
                      gnb:f64[400] = mul gmx gmv
                      gnc:f64[400] = mul gna gks
                      gnd:f64[400] = add gnb gnc
                      gne:f64[400] = mul gmx gks
                      gnf:f64[400] = mul gna gmv
                      gng:f64[400] = sub gne gnf
                      gnh:f64[400] = atan2 gnd gng
                      gni:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] gly
                      gnj:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] gnh
                      gnk:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] gmq
                      gnl:f64[400,3] = concatenate[dimension=1] gni gnj gnk
                      gnm:f64[400,3] = slice[
                        limit_indices=(400, 6)
                        start_indices=(0, 3)
                        strides=None
                      ] gkl
                      gnn:f64[] = select_n False 0.1881 -0.1881
                      gno:f64[] = select_n False 0.04675 -0.04675
                      gnp:f64[400,1] = slice[
                        limit_indices=(400, 1)
                        start_indices=(0, 0)
                        strides=None
                      ] gnm
                      gnq:f64[400] = squeeze[dimensions=(1,)] gnp
                      gnr:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] gnn
                      gns:f64[400] = sub gnq gnr
                      gnt:f64[400,1] = slice[
                        limit_indices=(400, 2)
                        start_indices=(0, 1)
                        strides=None
                      ] gnm
                      gnu:f64[400] = squeeze[dimensions=(1,)] gnt
                      gnv:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] gno
                      gnw:f64[400] = sub gnu gnv
                      gnx:f64[400,1] = slice[
                        limit_indices=(400, 3)
                        start_indices=(0, 2)
                        strides=None
                      ] gnm
                      gny:f64[400] = squeeze[dimensions=(1,)] gnx
                      gnz:f64[] = select_n False 0.08 -0.08
                      goa:f64[400] = integer_pow[y=2] gns
                      gob:f64[400] = integer_pow[y=2] gnw
                      goc:f64[400] = add goa gob
                      god:f64[400] = integer_pow[y=2] gny
                      goe:f64[400] = add goc god
                      gof:f64[400] = sqrt goe
                      gog:f64[400] = integer_pow[y=2] gof
                      goh:f64[400] = sub gog 0.0064
                      goi:f64[400] = sqrt goh
                      goj:f64[400] = integer_pow[y=2] gnw
                      gok:f64[400] = integer_pow[y=2] gny
                      gol:f64[400] = add goj gok
                      gom:f64[] = integer_pow[y=2] gnz
                      gon:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] gom
                      goo:f64[400] = sub gol gon
                      gop:f64[400] = sqrt goo
                      goq:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] gnz
                      gor:f64[400] = mul gny goq
                      gos:f64[400] = mul gnw gop
                      got:f64[400] = add gor gos
                      gou:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] gnz
                      gov:f64[400] = mul gnw gou
                      gow:f64[400] = mul gny gop
                      gox:f64[400] = sub gov gow
                      goy:f64[400] = atan2 got gox
                      goz:f64[400] = integer_pow[y=2] goi
                      gpa:f64[400] = sub 0.090738 goz
                      gpb:f64[] = abs 0.045369
                      gpc:f64[] = mul 2.0 gpb
                      gpd:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] gpc
                      gpe:f64[400] = div gpa gpd
                      gpf:f64[1] = slice[
                        limit_indices=(3,)
                        start_indices=(2,)
                        strides=None
                      ] fgt
                      gpg:f64[] = squeeze[dimensions=(0,)] gpf
                      gph:f64[1] = slice[
                        limit_indices=(3,)
                        start_indices=(2,)
                        strides=None
                      ] fgu
                      gpi:f64[] = squeeze[dimensions=(0,)] gph
                      gpj:f64[] = add 3.141592653589793 gpg
                      gpk:f64[] = cos gpj
                      gpl:f64[] = add 3.141592653589793 gpi
                      gpm:f64[] = cos gpl
                      gpn:f64[400] = pjit[name=clip jaxpr=clip5] gpe gpk gpm
                      gpo:f64[400] = acos gpn
                      gpp:f64[400] = sub 3.141592653589793 gpo
                      gpq:f64[400] = neg gpp
                      gpr:f64[400] = sin goy
                      gps:f64[400] = mul gnw gpr
                      gpt:f64[400] = cos goy
                      gpu:f64[400] = mul gny gpt
                      gpv:f64[400] = sub gps gpu
                      gpw:f64[400] = sin gpq
                      gpx:f64[400] = mul -0.213 gpw
                      gpy:f64[400] = cos gpq
                      gpz:f64[400] = mul -0.213 gpy
                      gqa:f64[400] = add -0.213 gpz
                      gqb:f64[400] = mul gpx gpv
                      gqc:f64[400] = mul gqa gns
                      gqd:f64[400] = add gqb gqc
                      gqe:f64[400] = mul gpx gns
                      gqf:f64[400] = mul gqa gpv
                      gqg:f64[400] = sub gqe gqf
                      gqh:f64[400] = atan2 gqd gqg
                      gqi:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] goy
                      gqj:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] gqh
                      gqk:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] gpq
                      gql:f64[400,3] = concatenate[dimension=1] gqi gqj gqk
                      gqm:f64[400,3] = slice[
                        limit_indices=(400, 9)
                        start_indices=(0, 6)
                        strides=None
                      ] gkl
                      gqn:f64[] = select_n True 0.1881 -0.1881
                      gqo:f64[] = select_n True 0.04675 -0.04675
                      gqp:f64[400,1] = slice[
                        limit_indices=(400, 1)
                        start_indices=(0, 0)
                        strides=None
                      ] gqm
                      gqq:f64[400] = squeeze[dimensions=(1,)] gqp
                      gqr:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] gqn
                      gqs:f64[400] = sub gqq gqr
                      gqt:f64[400,1] = slice[
                        limit_indices=(400, 2)
                        start_indices=(0, 1)
                        strides=None
                      ] gqm
                      gqu:f64[400] = squeeze[dimensions=(1,)] gqt
                      gqv:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] gqo
                      gqw:f64[400] = sub gqu gqv
                      gqx:f64[400,1] = slice[
                        limit_indices=(400, 3)
                        start_indices=(0, 2)
                        strides=None
                      ] gqm
                      gqy:f64[400] = squeeze[dimensions=(1,)] gqx
                      gqz:f64[] = select_n True 0.08 -0.08
                      gra:f64[400] = integer_pow[y=2] gqs
                      grb:f64[400] = integer_pow[y=2] gqw
                      grc:f64[400] = add gra grb
                      grd:f64[400] = integer_pow[y=2] gqy
                      gre:f64[400] = add grc grd
                      grf:f64[400] = sqrt gre
                      grg:f64[400] = integer_pow[y=2] grf
                      grh:f64[400] = sub grg 0.0064
                      gri:f64[400] = sqrt grh
                      grj:f64[400] = integer_pow[y=2] gqw
                      grk:f64[400] = integer_pow[y=2] gqy
                      grl:f64[400] = add grj grk
                      grm:f64[] = integer_pow[y=2] gqz
                      grn:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] grm
                      gro:f64[400] = sub grl grn
                      grp:f64[400] = sqrt gro
                      grq:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] gqz
                      grr:f64[400] = mul gqy grq
                      grs:f64[400] = mul gqw grp
                      grt:f64[400] = add grr grs
                      gru:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] gqz
                      grv:f64[400] = mul gqw gru
                      grw:f64[400] = mul gqy grp
                      grx:f64[400] = sub grv grw
                      gry:f64[400] = atan2 grt grx
                      grz:f64[400] = integer_pow[y=2] gri
                      gsa:f64[400] = sub 0.090738 grz
                      gsb:f64[] = abs 0.045369
                      gsc:f64[] = mul 2.0 gsb
                      gsd:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] gsc
                      gse:f64[400] = div gsa gsd
                      gsf:f64[1] = slice[
                        limit_indices=(3,)
                        start_indices=(2,)
                        strides=None
                      ] fgt
                      gsg:f64[] = squeeze[dimensions=(0,)] gsf
                      gsh:f64[1] = slice[
                        limit_indices=(3,)
                        start_indices=(2,)
                        strides=None
                      ] fgu
                      gsi:f64[] = squeeze[dimensions=(0,)] gsh
                      gsj:f64[] = add 3.141592653589793 gsg
                      gsk:f64[] = cos gsj
                      gsl:f64[] = add 3.141592653589793 gsi
                      gsm:f64[] = cos gsl
                      gsn:f64[400] = pjit[name=clip jaxpr=clip5] gse gsk gsm
                      gso:f64[400] = acos gsn
                      gsp:f64[400] = sub 3.141592653589793 gso
                      gsq:f64[400] = neg gsp
                      gsr:f64[400] = sin gry
                      gss:f64[400] = mul gqw gsr
                      gst:f64[400] = cos gry
                      gsu:f64[400] = mul gqy gst
                      gsv:f64[400] = sub gss gsu
                      gsw:f64[400] = sin gsq
                      gsx:f64[400] = mul -0.213 gsw
                      gsy:f64[400] = cos gsq
                      gsz:f64[400] = mul -0.213 gsy
                      gta:f64[400] = add -0.213 gsz
                      gtb:f64[400] = mul gsx gsv
                      gtc:f64[400] = mul gta gqs
                      gtd:f64[400] = add gtb gtc
                      gte:f64[400] = mul gsx gqs
                      gtf:f64[400] = mul gta gsv
                      gtg:f64[400] = sub gte gtf
                      gth:f64[400] = atan2 gtd gtg
                      gti:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] gry
                      gtj:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] gth
                      gtk:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] gsq
                      gtl:f64[400,3] = concatenate[dimension=1] gti gtj gtk
                      gtm:f64[400,3] = slice[
                        limit_indices=(400, 12)
                        start_indices=(0, 9)
                        strides=None
                      ] gkl
                      gtn:f64[] = select_n True 0.1881 -0.1881
                      gto:f64[] = select_n False 0.04675 -0.04675
                      gtp:f64[400,1] = slice[
                        limit_indices=(400, 1)
                        start_indices=(0, 0)
                        strides=None
                      ] gtm
                      gtq:f64[400] = squeeze[dimensions=(1,)] gtp
                      gtr:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] gtn
                      gts:f64[400] = sub gtq gtr
                      gtt:f64[400,1] = slice[
                        limit_indices=(400, 2)
                        start_indices=(0, 1)
                        strides=None
                      ] gtm
                      gtu:f64[400] = squeeze[dimensions=(1,)] gtt
                      gtv:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] gto
                      gtw:f64[400] = sub gtu gtv
                      gtx:f64[400,1] = slice[
                        limit_indices=(400, 3)
                        start_indices=(0, 2)
                        strides=None
                      ] gtm
                      gty:f64[400] = squeeze[dimensions=(1,)] gtx
                      gtz:f64[] = select_n False 0.08 -0.08
                      gua:f64[400] = integer_pow[y=2] gts
                      gub:f64[400] = integer_pow[y=2] gtw
                      guc:f64[400] = add gua gub
                      gud:f64[400] = integer_pow[y=2] gty
                      gue:f64[400] = add guc gud
                      guf:f64[400] = sqrt gue
                      gug:f64[400] = integer_pow[y=2] guf
                      guh:f64[400] = sub gug 0.0064
                      gui:f64[400] = sqrt guh
                      guj:f64[400] = integer_pow[y=2] gtw
                      guk:f64[400] = integer_pow[y=2] gty
                      gul:f64[400] = add guj guk
                      gum:f64[] = integer_pow[y=2] gtz
                      gun:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] gum
                      guo:f64[400] = sub gul gun
                      gup:f64[400] = sqrt guo
                      guq:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] gtz
                      gur:f64[400] = mul gty guq
                      gus:f64[400] = mul gtw gup
                      gut:f64[400] = add gur gus
                      guu:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] gtz
                      guv:f64[400] = mul gtw guu
                      guw:f64[400] = mul gty gup
                      gux:f64[400] = sub guv guw
                      guy:f64[400] = atan2 gut gux
                      guz:f64[400] = integer_pow[y=2] gui
                      gva:f64[400] = sub 0.090738 guz
                      gvb:f64[] = abs 0.045369
                      gvc:f64[] = mul 2.0 gvb
                      gvd:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] gvc
                      gve:f64[400] = div gva gvd
                      gvf:f64[1] = slice[
                        limit_indices=(3,)
                        start_indices=(2,)
                        strides=None
                      ] fgt
                      gvg:f64[] = squeeze[dimensions=(0,)] gvf
                      gvh:f64[1] = slice[
                        limit_indices=(3,)
                        start_indices=(2,)
                        strides=None
                      ] fgu
                      gvi:f64[] = squeeze[dimensions=(0,)] gvh
                      gvj:f64[] = add 3.141592653589793 gvg
                      gvk:f64[] = cos gvj
                      gvl:f64[] = add 3.141592653589793 gvi
                      gvm:f64[] = cos gvl
                      gvn:f64[400] = pjit[name=clip jaxpr=clip5] gve gvk gvm
                      gvo:f64[400] = acos gvn
                      gvp:f64[400] = sub 3.141592653589793 gvo
                      gvq:f64[400] = neg gvp
                      gvr:f64[400] = sin guy
                      gvs:f64[400] = mul gtw gvr
                      gvt:f64[400] = cos guy
                      gvu:f64[400] = mul gty gvt
                      gvv:f64[400] = sub gvs gvu
                      gvw:f64[400] = sin gvq
                      gvx:f64[400] = mul -0.213 gvw
                      gvy:f64[400] = cos gvq
                      gvz:f64[400] = mul -0.213 gvy
                      gwa:f64[400] = add -0.213 gvz
                      gwb:f64[400] = mul gvx gvv
                      gwc:f64[400] = mul gwa gts
                      gwd:f64[400] = add gwb gwc
                      gwe:f64[400] = mul gvx gts
                      gwf:f64[400] = mul gwa gvv
                      gwg:f64[400] = sub gwe gwf
                      gwh:f64[400] = atan2 gwd gwg
                      gwi:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] guy
                      gwj:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] gwh
                      gwk:f64[400,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(400, 1)
                      ] gvq
                      gwl:f64[400,3] = concatenate[dimension=1] gwi gwj gwk
                      gwm:f64[400,12] = concatenate[dimension=1] gnl gql gtl gwl
                      gwn:f64[1,3] = reshape[dimensions=None new_sizes=(1, 3)] fgu
                      gwo:f64[3] = squeeze[dimensions=(0,)] gwn
                      gwp:f64[4,3] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(4, 3)
                      ] gwo
                      gwq:f64[12] = reshape[dimensions=None new_sizes=(12,)] gwp
                      gwr:f64[1,3] = reshape[dimensions=None new_sizes=(1, 3)] fgt
                      gws:f64[3] = squeeze[dimensions=(0,)] gwr
                      gwt:f64[4,3] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(4, 3)
                      ] gws
                      gwu:f64[12] = reshape[dimensions=None new_sizes=(12,)] gwt
                      gwv:f64[400,12] = pjit[name=clip jaxpr=clip6] gwm gwq gwu
                      gww:f64[12] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(12,)
                      ] 0.0
                      gwx:i64[1,3] = reshape[dimensions=None new_sizes=(1, 3)] fgv
                      gwy:i64[3] = squeeze[dimensions=(0,)] gwx
                      gwz:i64[4,3] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(4, 3)
                      ] gwy
                      gxa:i64[12] = reshape[dimensions=None new_sizes=(12,)] gwz
                      gxb:f64[12] = convert_element_type[
                        new_dtype=float64
                        weak_type=True
                      ] gxa
                      gxc:f64[12] = mul gxb 1.4
                      gxd:f64[1,3] = reshape[dimensions=None new_sizes=(1, 3)] fgw
                      gxe:f64[3] = squeeze[dimensions=(0,)] gxd
                      gxf:f64[4,3] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(4, 3)
                      ] gxe
                      gxg:f64[12] = reshape[dimensions=None new_sizes=(12,)] gxf
                      gxh:f64[400,12] = cond[
                        branches=(
                          { lambda ; gxi:f64[12] gxj:f64[12] gxk:f64[400,36] gxl:f64[400,12]
                              gxm:f64[12] gxn:f64[12] gxo:f64[12]. let
                              gxp:f64[400,12] = broadcast_in_dim[
                                broadcast_dimensions=(1,)
                                shape=(400, 12)
                              ] gxj
                            in (gxp,) }
                          { lambda ; gxq:f64[12] gxr:f64[12] gxs:f64[400,36] gxt:f64[400,12]
                              gxu:f64[12] gxv:f64[12] gxw:f64[12]. let
                              gxx:f64[400,12] = slice[
                                limit_indices=(400, 16)
                                start_indices=(0, 4)
                                strides=None
                              ] gxs
                              gxy:f64[400,12] = slice[
                                limit_indices=(400, 34)
                                start_indices=(0, 22)
                                strides=None
                              ] gxs
                              gxz:f64[400,12] = sub gxt gxx
                              gya:f64[12] = convert_element_type[
                                new_dtype=float64
                                weak_type=False
                              ] gxv
                              gyb:f64[1,12] = broadcast_in_dim[
                                broadcast_dimensions=(1,)
                                shape=(1, 12)
                              ] gya
                              gyc:f64[400,12] = mul gyb gxz
                              gyd:f64[1,12] = broadcast_in_dim[
                                broadcast_dimensions=(1,)
                                shape=(1, 12)
                              ] gxu
                              gye:f64[400,12] = sub gyd gxy
                              gyf:f64[1,12] = broadcast_in_dim[
                                broadcast_dimensions=(1,)
                                shape=(1, 12)
                              ] gxw
                              gyg:f64[400,12] = mul gyf gye
                              gyh:f64[400,12] = add gyc gyg
                              gyi:f64[400,12] = sub gxt gxx
                              gyj:bool[400,12] = ne gyi 0.0
                              gyk:f64[400,12] = sub gxt gxx
                              gyl:f64[400,12] = pjit[name=_where jaxpr=_where1] gyj
                                gyk 1
                              gym:f64[1,12] = broadcast_in_dim[
                                broadcast_dimensions=(1,)
                                shape=(1, 12)
                              ] gxq
                              gyn:bool[400,12] = gt gyh gym
                              gyo:f64[1,12] = broadcast_in_dim[
                                broadcast_dimensions=(1,)
                                shape=(1, 12)
                              ] gxu
                              gyp:f64[400,12] = sub gyo gxy
                              gyq:f64[1,12] = broadcast_in_dim[
                                broadcast_dimensions=(1,)
                                shape=(1, 12)
                              ] gxw
                              gyr:f64[400,12] = mul gyq gyp
                              gys:f64[1,12] = broadcast_in_dim[
                                broadcast_dimensions=(1,)
                                shape=(1, 12)
                              ] gxq
                              gyt:f64[400,12] = sub gys gyr
                              gyu:f64[400,12] = div gyt gyl
                              gyv:f64[400,12] = pjit[name=_where jaxpr=_where2] gyn
                                gyu gxv
                              gyw:f64[12] = neg gxq
                              gyx:f64[1,12] = broadcast_in_dim[
                                broadcast_dimensions=(1,)
                                shape=(1, 12)
                              ] gyw
                              gyy:bool[400,12] = lt gyh gyx
                              gyz:f64[12] = neg gxq
                              gza:f64[1,12] = broadcast_in_dim[
                                broadcast_dimensions=(1,)
                                shape=(1, 12)
                              ] gxu
                              gzb:f64[400,12] = sub gza gxy
                              gzc:f64[1,12] = broadcast_in_dim[
                                broadcast_dimensions=(1,)
                                shape=(1, 12)
                              ] gxw
                              gzd:f64[400,12] = mul gzc gzb
                              gze:f64[1,12] = broadcast_in_dim[
                                broadcast_dimensions=(1,)
                                shape=(1, 12)
                              ] gyz
                              gzf:f64[400,12] = sub gze gzd
                              gzg:f64[400,12] = div gzf gyl
                              gzh:f64[400,12] = pjit[name=_where jaxpr=_where3] gyy
                                gzg gyv
                            in (gzh,) }
                        )
                        linear=(False, False, False, False, False, False, False)
                      ] 1 fgx gxc fkm gwv gww gxc gxg
                      gzi:f64[400,12] = slice[
                        limit_indices=(400, 16)
                        start_indices=(0, 4)
                        strides=None
                      ] fkm
                      gzj:f64[400,12] = slice[
                        limit_indices=(400, 34)
                        start_indices=(0, 22)
                        strides=None
                      ] fkm
                      gzk:f64[400,12] = sub gwv gzi
                      gzl:f64[400,12] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] gxh
                      gzm:f64[400,12] = mul gzl gzk
                      gzn:f64[1,12] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 12)
                      ] gww
                      gzo:f64[400,12] = sub gzn gzj
                      gzp:f64[1,12] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 12)
                      ] gxg
                      gzq:f64[400,12] = mul gzp gzo
                      gzr:f64[400,12] = add gzm gzq
                      gzs:bool[12] = lt fgy 0
                      gzt:i32[12] = add fgy 19
                      gzu:i32[12] = select_n gzs fgy gzt
                      gzv:i32[12,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(12, 1)
                      ] gzu
                      gzw:f64[400,12] = gather[
                        dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
                        fill_value=None
                        indices_are_sorted=False
                        mode=GatherScatterMode.PROMISE_IN_BOUNDS
                        slice_sizes=(400, 1)
                        unique_indices=False
                      ] fhi gzv
                      gzx:bool[12] = lt fgz 0
                      gzy:i32[12] = add fgz 18
                      gzz:i32[12] = select_n gzx fgz gzy
                      haa:i32[12,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(12, 1)
                      ] gzz
                      hab:f64[400,12] = gather[
                        dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
                        fill_value=None
                        indices_are_sorted=False
                        mode=GatherScatterMode.PROMISE_IN_BOUNDS
                        slice_sizes=(400, 1)
                        unique_indices=False
                      ] fhj haa
                      hac:f64[12,1] = slice[
                        limit_indices=(12, 1)
                        start_indices=(0, 0)
                        strides=None
                      ] fha
                      had:f64[12] = squeeze[dimensions=(1,)] hac
                      hae:f64[12,1] = slice[
                        limit_indices=(12, 2)
                        start_indices=(0, 1)
                        strides=None
                      ] fha
                      haf:f64[12] = squeeze[dimensions=(1,)] hae
                      hag:f64[400,12] = pjit[name=clip jaxpr=clip6] gzr had haf
                      hah:f64[1,12] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 12)
                      ] fhb
                      hai:f64[400,12] = mul gzw hah
                      haj:f64[1,12] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 12)
                      ] fhc
                      hak:f64[400,12] = mul hab haj
                      hal:f64[400,12] = add hai hak
                      ham:f64[1,12] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 12)
                      ] fhd
                      han:f64[400,12] = mul ham hal
                      hao:f64[1,12] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 12)
                      ] fhe
                      hap:f64[400,12] = mul hao hag
                      haq:f64[400,12] = add hap han
                      har:f64[12,1] = slice[
                        limit_indices=(12, 1)
                        start_indices=(0, 0)
                        strides=None
                      ] fhf
                      has:f64[12] = squeeze[dimensions=(1,)] har
                      hat:f64[12,1] = slice[
                        limit_indices=(12, 2)
                        start_indices=(0, 1)
                        strides=None
                      ] fhf
                      hau:f64[12] = squeeze[dimensions=(1,)] hat
                      hav:f64[400,12] = pjit[name=clip jaxpr=clip6] haq has hau
                      haw:f64[1,12] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 12)
                      ] fhd
                      hax:f64[400,12] = mul hav haw
                      hay:f64[18] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(18,)
                      ] 0.0
                      haz:bool[12] = lt fgz 0
                      hba:i32[12] = add fgz 18
                      hbb:i32[12] = select_n haz fgz hba
                      hbc:i32[12,1] = broadcast_in_dim[
                        broadcast_dimensions=(0,)
                        shape=(12, 1)
                      ] hbb
                      hbd:f64[400,18] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(400, 18)
                      ] hay
                      hbe:f64[400,18] = scatter-add[
                        dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0,), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                        indices_are_sorted=False
                        mode=GatherScatterMode.FILL_OR_DROP
                        unique_indices=False
                        update_consts=()
                        update_jaxpr=jaxpr1
                      ] hbd hbc hax
                      hbf:f64[400,18] = add fhg hbe
                      hbg:f64[18,18] = pjit[name=_diag jaxpr=_diag] fhh
                      hbh:f64[18,18] = mul hbg 0.0025
                      hbi:f64[1,18,18] = broadcast_in_dim[
                        broadcast_dimensions=(1, 2)
                        shape=(1, 18, 18)
                      ] hbh
                      hbj:f64[400,18,18] = add fhk hbi
                      hbk:i64[18,18] = iota[
                        dimension=0
                        dtype=int64
                        shape=(18, 18)
                      ] 
                      hbl:i64[18,18] = iota[
                        dimension=1
                        dtype=int64
                        shape=(18, 18)
                      ] 
                      hbm:i64[18,18] = add hbk 0
                      hbn:bool[18,18] = eq hbm hbl
                      hbo:f64[18,18] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] hbn
                      hbp:f64[400,18,18] = pjit[
                        name=_solve
                        jaxpr={ lambda ; hbq:f64[400,18,18] hbr:f64[18,18]. let
                            hbs:f64[400,18,18] = stop_gradient hbq
                            hbt:f64[400,18,18] = pjit[
                              name=_cholesky
                              jaxpr={ lambda ; hbu:f64[400,18,18]. let
                                  hbv:f64[400,18,18] = transpose[
                                    permutation=(0, 2, 1)
                                  ] hbu
                                  hbw:f64[400,18,18] = transpose[
                                    permutation=(0, 2, 1)
                                  ] hbv
                                  hbx:f64[400,18,18] = add hbv hbw
                                  hby:f64[400,18,18] = div hbx 2.0
                                  hbz:f64[400,18,18] = cholesky hby
                                  hca:f64[400,18,18] = pjit[
                                    name=tril
                                    jaxpr={ lambda ; hcb:f64[400,18,18]. let
                                        hcc:i32[18,18] = iota[
                                          dimension=0
                                          dtype=int32
                                          shape=(18, 18)
                                        ] 
                                        hcd:i32[18,18] = add hcc 0
                                        hce:i32[18,18] = iota[
                                          dimension=1
                                          dtype=int32
                                          shape=(18, 18)
                                        ] 
                                        hcf:bool[18,18] = ge hcd hce
                                        hcg:bool[400,18,18] = broadcast_in_dim[
                                          broadcast_dimensions=(1, 2)
                                          shape=(400, 18, 18)
                                        ] hcf
                                        hch:f64[400,18,18] = broadcast_in_dim[
                                          broadcast_dimensions=()
                                          shape=(400, 18, 18)
                                        ] 0.0
                                        hci:f64[400,18,18] = select_n hcg hch hcb
                                      in (hci,) }
                                  ] hbz
                                  hcj:f64[400,18,18] = pjit[
                                    name=tril
                                    jaxpr={ lambda ; hck:f64[400,18,18]. let
                                        hcl:i32[18,18] = iota[
                                          dimension=0
                                          dtype=int32
                                          shape=(18, 18)
                                        ] 
                                        hcm:i32[18,18] = add hcl 0
                                        hcn:i32[18,18] = iota[
                                          dimension=1
                                          dtype=int32
                                          shape=(18, 18)
                                        ] 
                                        hco:bool[18,18] = ge hcm hcn
                                        hcp:f64[18,18] = broadcast_in_dim[
                                          broadcast_dimensions=()
                                          shape=(18, 18)
                                        ] 0.0
                                        hcq:bool[400,18,18] = broadcast_in_dim[
                                          broadcast_dimensions=(1, 2)
                                          shape=(400, 18, 18)
                                        ] hco
                                        hcr:f64[400,18,18] = broadcast_in_dim[
                                          broadcast_dimensions=(1, 2)
                                          shape=(400, 18, 18)
                                        ] hcp
                                        hcs:f64[400,18,18] = select_n hcq hcr hck
                                      in (hcs,) }
                                  ] hca
                                  hct:f64[400,18,18] = transpose[
                                    permutation=(0, 2, 1)
                                  ] hcj
                                in (hct,) }
                            ] hbs
                            hcu:f64[18,18] = transpose[permutation=(1, 0)] hbr
                            hcv:f64[400,18,18] = broadcast_in_dim[
                              broadcast_dimensions=(1, 2)
                              shape=(400, 18, 18)
                            ] hcu
                            hcw:f64[400,18,18] = custom_linear_solve[
                              const_lengths=_LinearSolveTuple(matvec=1, vecmat=1, solve=1, transpose_solve=1)
                              jaxprs=_LinearSolveTuple(matvec={ lambda ; a:f64[400,18,18] b:f64[400,18,18]. let
    c:f64[400,18,18] = dot_general[
      dimension_numbers=(([2], [2]), ([0], [0]))
      precision=(Precision.HIGHEST, Precision.HIGHEST)
    ] a b
    d:f64[400,18,18] = transpose[permutation=(0, 2, 1)] c
  in (d,) }, vecmat={ lambda ; a:f64[400,18,18] b:f64[400,18,18]. let
    c:f64[400,18,18] = dot_general[
      dimension_numbers=(([2], [2]), ([0], [0]))
      precision=(Precision.HIGHEST, Precision.HIGHEST)
    ] a b
    d:f64[400,18,18] = transpose[permutation=(0, 2, 1)] c
  in (d,) }, solve={ lambda ; a:f64[400,18,18] b:f64[400,18,18]. let
    c:f64[400,18,18] = pjit[
      name=_cho_solve
      jaxpr={ lambda ; d:f64[400,18,18] e:f64[400,18,18]. let
          f:f64[400,18,18,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(400, 18, 18, 1)
          ] e
          g:f64[400,18,1,18] = transpose[permutation=(0, 2, 3, 1)] f
          h:f64[400,18,18] = reshape[dimensions=None new_sizes=(400, 18, 18)] g
          i:f64[400,18,18] = triangular_solve[
            conjugate_a=False
            left_side=True
            lower=False
            transpose_a=True
            unit_diagonal=False
          ] d h
          j:f64[400,18,1,18] = reshape[
            dimensions=None
            new_sizes=(400, 18, 1, 18)
          ] i
          k:f64[400,18,1,18] = slice[
            limit_indices=(400, 18, 1, 18)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] j
          l:f64[400,18,18,1] = transpose[permutation=(0, 3, 1, 2)] k
          m:f64[400,18,18] = squeeze[dimensions=(3,)] l
          n:f64[400,18,18,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(400, 18, 18, 1)
          ] m
          o:f64[400,18,1,18] = transpose[permutation=(0, 2, 3, 1)] n
          p:f64[400,18,18] = reshape[dimensions=None new_sizes=(400, 18, 18)] o
          q:f64[400,18,18] = triangular_solve[
            conjugate_a=False
            left_side=True
            lower=False
            transpose_a=False
            unit_diagonal=False
          ] d p
          r:f64[400,18,1,18] = reshape[
            dimensions=None
            new_sizes=(400, 18, 1, 18)
          ] q
          s:f64[400,18,1,18] = slice[
            limit_indices=(400, 18, 1, 18)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] r
          t:f64[400,18,18,1] = transpose[permutation=(0, 3, 1, 2)] s
          u:f64[400,18,18] = squeeze[dimensions=(3,)] t
        in (u,) }
    ] a b
  in (c,) }, transpose_solve={ lambda ; a:f64[400,18,18] b:f64[400,18,18]. let
    c:f64[400,18,18] = pjit[
      name=_cho_solve
      jaxpr={ lambda ; d:f64[400,18,18] e:f64[400,18,18]. let
          f:f64[400,18,18,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(400, 18, 18, 1)
          ] e
          g:f64[400,18,1,18] = transpose[permutation=(0, 2, 3, 1)] f
          h:f64[400,18,18] = reshape[dimensions=None new_sizes=(400, 18, 18)] g
          i:f64[400,18,18] = triangular_solve[
            conjugate_a=False
            left_side=True
            lower=False
            transpose_a=True
            unit_diagonal=False
          ] d h
          j:f64[400,18,1,18] = reshape[
            dimensions=None
            new_sizes=(400, 18, 1, 18)
          ] i
          k:f64[400,18,1,18] = slice[
            limit_indices=(400, 18, 1, 18)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] j
          l:f64[400,18,18,1] = transpose[permutation=(0, 3, 1, 2)] k
          m:f64[400,18,18] = squeeze[dimensions=(3,)] l
          n:f64[400,18,18,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(400, 18, 18, 1)
          ] m
          o:f64[400,18,1,18] = transpose[permutation=(0, 2, 3, 1)] n
          p:f64[400,18,18] = reshape[dimensions=None new_sizes=(400, 18, 18)] o
          q:f64[400,18,18] = triangular_solve[
            conjugate_a=False
            left_side=True
            lower=False
            transpose_a=False
            unit_diagonal=False
          ] d p
          r:f64[400,18,1,18] = reshape[
            dimensions=None
            new_sizes=(400, 18, 1, 18)
          ] q
          s:f64[400,18,1,18] = slice[
            limit_indices=(400, 18, 1, 18)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] r
          t:f64[400,18,18,1] = transpose[permutation=(0, 3, 1, 2)] s
          u:f64[400,18,18] = squeeze[dimensions=(3,)] t
        in (u,) }
    ] a b
  in (c,) })
                            ] hbq hbq hbt hbt hcv
                            hcx:f64[400,18,18] = transpose[
                              permutation=(0, 2, 1)
                            ] hcw
                          in (hcx,) }
                      ] hbj hbo
                      hcy:f64[400,18] = add hbf fhl
                      hcz:f64[400,18] = dot_general[
                        dimension_numbers=(([2], [1]), ([0], [0]))
                        preferred_element_type=float64
                      ] hbp hcy
                      hda:f64[400,18] = mul hcz 0.0025
                      hdb:f64[400,18] = add fhj hda
                      hdc:f64[400,7] = slice[
                        limit_indices=(400, 7)
                        start_indices=(0, 0)
                        strides=None
                      ] fhi
                      hdd:f64[400,6] = slice[
                        limit_indices=(400, 6)
                        start_indices=(0, 0)
                        strides=None
                      ] hdb
                      hde:f64[400,1,7] = reshape[
                        dimensions=None
                        new_sizes=(400, 1, 7)
                      ] hdc
                      hdf:f64[400,1,6] = reshape[
                        dimensions=None
                        new_sizes=(400, 1, 6)
                      ] hdd
                      hdg:f64[400,1,4] = slice[
                        limit_indices=(400, 1, 7)
                        start_indices=(0, 0, 3)
                        strides=None
                      ] hde
                      hdh:f64[400,1,3] = slice[
                        limit_indices=(400, 1, 6)
                        start_indices=(0, 0, 3)
                        strides=None
                      ] hdf
                      hdi:f64[400,1] = pjit[
                        name=norm
                        jaxpr={ lambda ; hdj:f64[400,1,3]. let
                            hdk:f64[400,1,3] = mul hdj hdj
                            hdl:f64[400,1] = reduce_sum[axes=(2,)] hdk
                            hdm:f64[400,1] = sqrt hdl
                          in (hdm,) }
                      ] hdh
                      hdn:f64[400,1] = add hdi 1e-08
                      hdo:f64[400,1,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(400, 1, 1)
                      ] hdn
                      hdp:f64[400,1,3] = div hdh hdo
                      hdq:f64[400,1] = mul 0.0025 hdn
                      hdr:f64[400,1,1] = slice[
                        limit_indices=(400, 1, 1)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] hdp
                      hds:f64[400,1] = squeeze[dimensions=(2,)] hdr
                      hdt:f64[400,1] = div hdq 2.0
                      hdu:f64[400,1] = sin hdt
                      hdv:f64[400,1] = mul hds hdu
                      hdw:f64[400,1,1] = slice[
                        limit_indices=(400, 1, 2)
                        start_indices=(0, 0, 1)
                        strides=None
                      ] hdp
                      hdx:f64[400,1] = squeeze[dimensions=(2,)] hdw
                      hdy:f64[400,1] = div hdq 2.0
                      hdz:f64[400,1] = sin hdy
                      hea:f64[400,1] = mul hdx hdz
                      heb:f64[400,1,1] = slice[
                        limit_indices=(400, 1, 3)
                        start_indices=(0, 0, 2)
                        strides=None
                      ] hdp
                      hec:f64[400,1] = squeeze[dimensions=(2,)] heb
                      hed:f64[400,1] = div hdq 2.0
                      hee:f64[400,1] = sin hed
                      hef:f64[400,1] = mul hec hee
                      heg:f64[400,1] = div hdq 2.0
                      heh:f64[400,1] = cos heg
                      hei:f64[400,1,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(400, 1, 1)
                      ] heh
                      hej:f64[400,1,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(400, 1, 1)
                      ] hdv
                      hek:f64[400,1,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(400, 1, 1)
                      ] hea
                      hel:f64[400,1,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(400, 1, 1)
                      ] hef
                      hem:f64[400,1,4] = concatenate[dimension=2] hei hej hek hel
                      hen:f64[400,1,1] = slice[
                        limit_indices=(400, 1, 1)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] hdg
                      heo:f64[400,1] = squeeze[dimensions=(2,)] hen
                      hep:f64[400,1,1] = slice[
                        limit_indices=(400, 1, 1)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] hem
                      heq:f64[400,1] = squeeze[dimensions=(2,)] hep
                      her:f64[400,1] = mul heo heq
                      hes:f64[400,1,1] = slice[
                        limit_indices=(400, 1, 2)
                        start_indices=(0, 0, 1)
                        strides=None
                      ] hdg
                      het:f64[400,1] = squeeze[dimensions=(2,)] hes
                      heu:f64[400,1,1] = slice[
                        limit_indices=(400, 1, 2)
                        start_indices=(0, 0, 1)
                        strides=None
                      ] hem
                      hev:f64[400,1] = squeeze[dimensions=(2,)] heu
                      hew:f64[400,1] = mul het hev
                      hex:f64[400,1] = sub her hew
                      hey:f64[400,1,1] = slice[
                        limit_indices=(400, 1, 3)
                        start_indices=(0, 0, 2)
                        strides=None
                      ] hdg
                      hez:f64[400,1] = squeeze[dimensions=(2,)] hey
                      hfa:f64[400,1,1] = slice[
                        limit_indices=(400, 1, 3)
                        start_indices=(0, 0, 2)
                        strides=None
                      ] hem
                      hfb:f64[400,1] = squeeze[dimensions=(2,)] hfa
                      hfc:f64[400,1] = mul hez hfb
                      hfd:f64[400,1] = sub hex hfc
                      hfe:f64[400,1,1] = slice[
                        limit_indices=(400, 1, 4)
                        start_indices=(0, 0, 3)
                        strides=None
                      ] hdg
                      hff:f64[400,1] = squeeze[dimensions=(2,)] hfe
                      hfg:f64[400,1,1] = slice[
                        limit_indices=(400, 1, 4)
                        start_indices=(0, 0, 3)
                        strides=None
                      ] hem
                      hfh:f64[400,1] = squeeze[dimensions=(2,)] hfg
                      hfi:f64[400,1] = mul hff hfh
                      hfj:f64[400,1] = sub hfd hfi
                      hfk:f64[400,1,1] = slice[
                        limit_indices=(400, 1, 1)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] hdg
                      hfl:f64[400,1] = squeeze[dimensions=(2,)] hfk
                      hfm:f64[400,1,1] = slice[
                        limit_indices=(400, 1, 2)
                        start_indices=(0, 0, 1)
                        strides=None
                      ] hem
                      hfn:f64[400,1] = squeeze[dimensions=(2,)] hfm
                      hfo:f64[400,1] = mul hfl hfn
                      hfp:f64[400,1,1] = slice[
                        limit_indices=(400, 1, 2)
                        start_indices=(0, 0, 1)
                        strides=None
                      ] hdg
                      hfq:f64[400,1] = squeeze[dimensions=(2,)] hfp
                      hfr:f64[400,1,1] = slice[
                        limit_indices=(400, 1, 1)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] hem
                      hfs:f64[400,1] = squeeze[dimensions=(2,)] hfr
                      hft:f64[400,1] = mul hfq hfs
                      hfu:f64[400,1] = add hfo hft
                      hfv:f64[400,1,1] = slice[
                        limit_indices=(400, 1, 3)
                        start_indices=(0, 0, 2)
                        strides=None
                      ] hdg
                      hfw:f64[400,1] = squeeze[dimensions=(2,)] hfv
                      hfx:f64[400,1,1] = slice[
                        limit_indices=(400, 1, 4)
                        start_indices=(0, 0, 3)
                        strides=None
                      ] hem
                      hfy:f64[400,1] = squeeze[dimensions=(2,)] hfx
                      hfz:f64[400,1] = mul hfw hfy
                      hga:f64[400,1] = add hfu hfz
                      hgb:f64[400,1,1] = slice[
                        limit_indices=(400, 1, 4)
                        start_indices=(0, 0, 3)
                        strides=None
                      ] hdg
                      hgc:f64[400,1] = squeeze[dimensions=(2,)] hgb
                      hgd:f64[400,1,1] = slice[
                        limit_indices=(400, 1, 3)
                        start_indices=(0, 0, 2)
                        strides=None
                      ] hem
                      hge:f64[400,1] = squeeze[dimensions=(2,)] hgd
                      hgf:f64[400,1] = mul hgc hge
                      hgg:f64[400,1] = sub hga hgf
                      hgh:f64[400,1,1] = slice[
                        limit_indices=(400, 1, 1)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] hdg
                      hgi:f64[400,1] = squeeze[dimensions=(2,)] hgh
                      hgj:f64[400,1,1] = slice[
                        limit_indices=(400, 1, 3)
                        start_indices=(0, 0, 2)
                        strides=None
                      ] hem
                      hgk:f64[400,1] = squeeze[dimensions=(2,)] hgj
                      hgl:f64[400,1] = mul hgi hgk
                      hgm:f64[400,1,1] = slice[
                        limit_indices=(400, 1, 2)
                        start_indices=(0, 0, 1)
                        strides=None
                      ] hdg
                      hgn:f64[400,1] = squeeze[dimensions=(2,)] hgm
                      hgo:f64[400,1,1] = slice[
                        limit_indices=(400, 1, 4)
                        start_indices=(0, 0, 3)
                        strides=None
                      ] hem
                      hgp:f64[400,1] = squeeze[dimensions=(2,)] hgo
                      hgq:f64[400,1] = mul hgn hgp
                      hgr:f64[400,1] = sub hgl hgq
                      hgs:f64[400,1,1] = slice[
                        limit_indices=(400, 1, 3)
                        start_indices=(0, 0, 2)
                        strides=None
                      ] hdg
                      hgt:f64[400,1] = squeeze[dimensions=(2,)] hgs
                      hgu:f64[400,1,1] = slice[
                        limit_indices=(400, 1, 1)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] hem
                      hgv:f64[400,1] = squeeze[dimensions=(2,)] hgu
                      hgw:f64[400,1] = mul hgt hgv
                      hgx:f64[400,1] = add hgr hgw
                      hgy:f64[400,1,1] = slice[
                        limit_indices=(400, 1, 4)
                        start_indices=(0, 0, 3)
                        strides=None
                      ] hdg
                      hgz:f64[400,1] = squeeze[dimensions=(2,)] hgy
                      hha:f64[400,1,1] = slice[
                        limit_indices=(400, 1, 2)
                        start_indices=(0, 0, 1)
                        strides=None
                      ] hem
                      hhb:f64[400,1] = squeeze[dimensions=(2,)] hha
                      hhc:f64[400,1] = mul hgz hhb
                      hhd:f64[400,1] = add hgx hhc
                      hhe:f64[400,1,1] = slice[
                        limit_indices=(400, 1, 1)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] hdg
                      hhf:f64[400,1] = squeeze[dimensions=(2,)] hhe
                      hhg:f64[400,1,1] = slice[
                        limit_indices=(400, 1, 4)
                        start_indices=(0, 0, 3)
                        strides=None
                      ] hem
                      hhh:f64[400,1] = squeeze[dimensions=(2,)] hhg
                      hhi:f64[400,1] = mul hhf hhh
                      hhj:f64[400,1,1] = slice[
                        limit_indices=(400, 1, 2)
                        start_indices=(0, 0, 1)
                        strides=None
                      ] hdg
                      hhk:f64[400,1] = squeeze[dimensions=(2,)] hhj
                      hhl:f64[400,1,1] = slice[
                        limit_indices=(400, 1, 3)
                        start_indices=(0, 0, 2)
                        strides=None
                      ] hem
                      hhm:f64[400,1] = squeeze[dimensions=(2,)] hhl
                      hhn:f64[400,1] = mul hhk hhm
                      hho:f64[400,1] = add hhi hhn
                      hhp:f64[400,1,1] = slice[
                        limit_indices=(400, 1, 3)
                        start_indices=(0, 0, 2)
                        strides=None
                      ] hdg
                      hhq:f64[400,1] = squeeze[dimensions=(2,)] hhp
                      hhr:f64[400,1,1] = slice[
                        limit_indices=(400, 1, 2)
                        start_indices=(0, 0, 1)
                        strides=None
                      ] hem
                      hhs:f64[400,1] = squeeze[dimensions=(2,)] hhr
                      hht:f64[400,1] = mul hhq hhs
                      hhu:f64[400,1] = sub hho hht
                      hhv:f64[400,1,1] = slice[
                        limit_indices=(400, 1, 4)
                        start_indices=(0, 0, 3)
                        strides=None
                      ] hdg
                      hhw:f64[400,1] = squeeze[dimensions=(2,)] hhv
                      hhx:f64[400,1,1] = slice[
                        limit_indices=(400, 1, 1)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] hem
                      hhy:f64[400,1] = squeeze[dimensions=(2,)] hhx
                      hhz:f64[400,1] = mul hhw hhy
                      hia:f64[400,1] = add hhu hhz
                      hib:f64[400,1,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(400, 1, 1)
                      ] hfj
                      hic:f64[400,1,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(400, 1, 1)
                      ] hgg
                      hid:f64[400,1,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(400, 1, 1)
                      ] hhd
                      hie:f64[400,1,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(400, 1, 1)
                      ] hia
                      hif:f64[400,1,4] = concatenate[dimension=2] hib hic hid hie
                      hig:f64[400,1] = pjit[
                        name=norm
                        jaxpr={ lambda ; hih:f64[400,1,4]. let
                            hii:f64[400,1,4] = mul hih hih
                            hij:f64[400,1] = reduce_sum[axes=(2,)] hii
                            hik:f64[400,1] = sqrt hij
                          in (hik,) }
                      ] hif
                      hil:f64[400,1,1] = broadcast_in_dim[
                        broadcast_dimensions=(0, 1)
                        shape=(400, 1, 1)
                      ] hig
                      him:f64[400,1,4] = div hif hil
                      hin:f64[400,1,3] = slice[
                        limit_indices=(400, 1, 3)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] hde
                      hio:f64[400,1,3] = slice[
                        limit_indices=(400, 1, 3)
                        start_indices=(0, 0, 0)
                        strides=None
                      ] hdf
                      hip:f64[400,1,3] = mul hio 0.0025
                      hiq:f64[400,1,3] = add hin hip
                      hir:f64[400,1,7] = concatenate[dimension=2] hiq him
                      his:f64[400,7] = reshape[
                        dimensions=None
                        new_sizes=(400, 7)
                      ] hir
                      hit:f64[400,12] = slice[
                        limit_indices=(400, 19)
                        start_indices=(0, 7)
                        strides=None
                      ] fhi
                      hiu:f64[400,12] = slice[
                        limit_indices=(400, 18)
                        start_indices=(0, 6)
                        strides=None
                      ] hdb
                      hiv:f64[400,12,1] = reshape[
                        dimensions=None
                        new_sizes=(400, 12, 1)
                      ] hit
                      hiw:f64[400,12,1] = reshape[
                        dimensions=None
                        new_sizes=(400, 12, 1)
                      ] hiu
                      hix:f64[400,12,1] = mul hiw 0.0025
                      hiy:f64[400,12,1] = add hiv hix
                      hiz:f64[400,12] = reshape[
                        dimensions=None
                        new_sizes=(400, 12)
                      ] hiy
                      hja:f64[400,19] = concatenate[dimension=1] his hiz
                    in (hja, hdb, fhk, fhl) }
                  length=4
                  linear=(False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False)
                  num_carry=4
                  num_consts=27
                  reverse=False
                  unroll=1
                ] ccb cfo byh cfb ccc ccd cce ccf ccg cch cci ccj cck ccl ccm ccn
                  cco ccp ccq ccr ccs cct ccu ccv ccw fge caw cgi cih eym ccx
                hjb:f64[400,4] = slice[
                  limit_indices=(400, 7)
                  start_indices=(0, 3)
                  strides=None
                ] fgf
                hjc:f64[400,12] = slice[
                  limit_indices=(400, 19)
                  start_indices=(0, 7)
                  strides=None
                ] fgf
                hjd:f64[400,3] = slice[
                  limit_indices=(400, 3)
                  start_indices=(0, 0)
                  strides=None
                ] fgg
                hje:f64[4] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] ccy
                hjf:f64[1,4] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 4)
                ] hje
                hjg:f64[400,4] = mul hjb hjf
                hjh:f64[400,1] = slice[
                  limit_indices=(400, 1)
                  start_indices=(0, 0)
                  strides=None
                ] hjg
                hji:f64[400] = squeeze[dimensions=(1,)] hjh
                hjj:f64[400,3] = slice[
                  limit_indices=(400, 4)
                  start_indices=(0, 1)
                  strides=None
                ] hjg
                hjk:f64[400] = dot_general[
                  dimension_numbers=(([1], [1]), ([0], [0]))
                  preferred_element_type=float64
                ] hjj hjd
                hjl:f64[400,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(400, 1)
                ] hjk
                hjm:f64[400,3] = mul hjl hjj
                hjn:f64[400,3] = mul 2.0 hjm
                hjo:f64[400] = mul hji hji
                hjp:f64[400] = dot_general[
                  dimension_numbers=(([1], [1]), ([0], [0]))
                  preferred_element_type=float64
                ] hjj hjj
                hjq:f64[400] = sub hjo hjp
                hjr:f64[400,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(400, 1)
                ] hjq
                hjs:f64[400,3] = mul hjr hjd
                hjt:f64[400,3] = add hjn hjs
                hju:f64[400] = mul 2.0 hji
                hjv:f64[400,3] = pjit[name=cross jaxpr=cross] hjj hjd
                hjw:f64[400,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(400, 1)
                ] hju
                hjx:f64[400,3] = mul hjw hjv
                hjy:f64[400,3] = add hjt hjx
                hjz:f64[400,3] = slice[
                  limit_indices=(400, 6)
                  start_indices=(0, 3)
                  strides=None
                ] fgg
                hka:f64[400,1] = slice[
                  limit_indices=(400, 1)
                  start_indices=(0, 0)
                  strides=None
                ] hjb
                hkb:f64[400] = squeeze[dimensions=(1,)] hka
                hkc:f64[400,3] = slice[
                  limit_indices=(400, 4)
                  start_indices=(0, 1)
                  strides=None
                ] hjb
                hkd:f64[400] = dot_general[
                  dimension_numbers=(([1], [1]), ([0], [0]))
                  preferred_element_type=float64
                ] hkc hjz
                hke:f64[400,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(400, 1)
                ] hkd
                hkf:f64[400,3] = mul hke hkc
                hkg:f64[400,3] = mul 2.0 hkf
                hkh:f64[400] = mul hkb hkb
                hki:f64[400] = dot_general[
                  dimension_numbers=(([1], [1]), ([0], [0]))
                  preferred_element_type=float64
                ] hkc hkc
                hkj:f64[400] = sub hkh hki
                hkk:f64[400,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(400, 1)
                ] hkj
                hkl:f64[400,3] = mul hkk hjz
                hkm:f64[400,3] = add hkg hkl
                hkn:f64[400] = mul 2.0 hkb
                hko:f64[400,3] = pjit[name=cross jaxpr=cross] hkc hjz
                hkp:f64[400,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(400, 1)
                ] hkn
                hkq:f64[400,3] = mul hkp hko
                hkr:f64[400,3] = add hkm hkq
                hks:f64[400,12] = slice[
                  limit_indices=(400, 18)
                  start_indices=(0, 6)
                  strides=None
                ] fgg
                hkt:f64[400,34] = concatenate[dimension=1] hjb hjc hjy hkr hks
                hku:f64[400,1] = slice[
                  limit_indices=(400, 35)
                  start_indices=(0, 34)
                  strides=None
                ] cgb
                hkv:f64[400] = squeeze[dimensions=(1,)] hku
                hkw:f64[400,1] = slice[
                  limit_indices=(400, 36)
                  start_indices=(0, 35)
                  strides=None
                ] cgb
                hkx:f64[400] = squeeze[dimensions=(1,)] hkw
                hky:f64[400,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(400, 1)
                ] hkv
                hkz:f64[400,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(400, 1)
                ] hkx
                hla:f64[400,2] = concatenate[dimension=1] hky hkz
                hlb:f64[400,36] = concatenate[dimension=1] hkt hla
                hlc:f64[36,1] = slice[
                  limit_indices=(36, 1)
                  start_indices=(0, 0)
                  strides=None
                ] byh
                hld:f64[36] = squeeze[dimensions=(1,)] hlc
                hle:f64[1,36] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 36)
                ] hld
                hlf:f64[400,36] = sub hlb hle
                hlg:f64[400,36] = mul 2.0 hlf
                hlh:f64[36,1] = slice[
                  limit_indices=(36, 2)
                  start_indices=(0, 1)
                  strides=None
                ] byh
                hli:f64[36] = squeeze[dimensions=(1,)] hlh
                hlj:f64[36,1] = slice[
                  limit_indices=(36, 1)
                  start_indices=(0, 0)
                  strides=None
                ] byh
                hlk:f64[36] = squeeze[dimensions=(1,)] hlj
                hll:f64[36] = sub hli hlk
                hlm:f64[1,36] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 36)
                ] hll
                hln:f64[400,36] = div hlg hlm
                hlo:f64[400,36] = sub hln 1.0
              in (hlo,) }
            length=1
            linear=(False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False)
            num_carry=1
            num_consts=122
            reverse=False
            unroll=1
          ] bkr bks bsv bkt bku bkv bkw bkx bky bkz bla blb blc bld ble blf blg blh
            bli blj blk bll blm bln blo blp blq blr bls blt blu blv blw blx bly blz
            bma bmb bmc bmd bme bmf bmg bmh bmi bmj bmk bml bmm bmn bmo bmp bmq bmr
            bms bmt bmu bmv bmw bmx bmy bmz bna bnb bnc bnd bne bnf bng bnh bni bnj
            bnk bnl bnm bnn bno bnp bnq bnr bns bnt bnu bnv bnw bnx bny bnz boa bob
            boc bod boe bof bog boh boi boj bok bol bom bon boo bop boq bor bos bot
            bou bov bow box boy boz bpa bpb bpc bpd bpe bpf bxq bpg bsz
          hlp:key<fry>[400] = random_wrap[impl=fry] bvf
          hlq:f64[400,36] = pjit[
            name=_normal
            jaxpr={ lambda ; hlr:key<fry>[400]. let
                hls:f64[400,36] = pjit[
                  name=_normal_real
                  jaxpr={ lambda ; hlt:key<fry>[400]. let
                      hlu:f64[400,36] = pjit[
                        name=_uniform
                        jaxpr={ lambda ; hlv:key<fry>[400] hlw:f64[] hlx:f64[]. let
                            hly:f64[1] = broadcast_in_dim[
                              broadcast_dimensions=()
                              shape=(1,)
                            ] hlw
                            hlz:f64[1] = broadcast_in_dim[
                              broadcast_dimensions=()
                              shape=(1,)
                            ] hlx
                            hma:u64[400,36] = random_bits[
                              bit_width=64
                              shape=(36,)
                            ] hlv
                            hmb:u64[400,36] = shift_right_logical hma 12
                            hmc:u64[400,36] = or hmb 4607182418800017408
                            hmd:f64[400,36] = bitcast_convert_type[
                              new_dtype=float64
                            ] hmc
                            hme:f64[400,36] = sub hmd 1.0
                            hmf:f64[1] = sub hlz hly
                            hmg:f64[1,1] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 1)
                            ] hmf
                            hmh:f64[400,36] = mul hme hmg
                            hmi:f64[1,1] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 1)
                            ] hly
                            hmj:f64[400,36] = add hmh hmi
                            hmk:f64[1,1] = broadcast_in_dim[
                              broadcast_dimensions=(1,)
                              shape=(1, 1)
                            ] hly
                            hml:f64[400,36] = max hmk hmj
                          in (hml,) }
                      ] hlt -0.9999999999999999 1.0
                      hmm:f64[400,36] = erf_inv hlu
                      hmn:f64[400,36] = mul 1.4142135623730951 hmm
                    in (hmn,) }
                ] hlr
              in (hls,) }
          ] hlp
          hmo:f64[400,36] = mul byf hlq
          hmp:f64[400,36] = add byg hmo
          hmq:f64[400,36] = add hmp 1.0
          hmr:f64[36,1] = slice[
            limit_indices=(36, 2)
            start_indices=(0, 1)
            strides=None
          ] bkr
          hms:f64[36] = squeeze[dimensions=(1,)] hmr
          hmt:f64[36,1] = slice[
            limit_indices=(36, 1)
            start_indices=(0, 0)
            strides=None
          ] bkr
          hmu:f64[36] = squeeze[dimensions=(1,)] hmt
          hmv:f64[36] = sub hms hmu
          hmw:f64[1,36] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 36)
          ] hmv
          hmx:f64[400,36] = mul hmq hmw
          hmy:f64[400,36] = div hmx 2.0
          hmz:f64[36,1] = slice[
            limit_indices=(36, 1)
            start_indices=(0, 0)
            strides=None
          ] bkr
          hna:f64[36] = squeeze[dimensions=(1,)] hmz
          hnb:f64[1,36] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 36)
          ] hna
          hnc:f64[400,36] = add hmy hnb
          hnd:f64[400,36] = add bsz 1.0
          hne:f64[36,1] = slice[
            limit_indices=(36, 2)
            start_indices=(0, 1)
            strides=None
          ] bkr
          hnf:f64[36] = squeeze[dimensions=(1,)] hne
          hng:f64[36,1] = slice[
            limit_indices=(36, 1)
            start_indices=(0, 0)
            strides=None
          ] bkr
          hnh:f64[36] = squeeze[dimensions=(1,)] hng
          hni:f64[36] = sub hnf hnh
          hnj:f64[1,36] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 36)
          ] hni
          hnk:f64[400,36] = mul hnd hnj
          hnl:f64[400,36] = div hnk 2.0
          hnm:f64[36,1] = slice[
            limit_indices=(36, 1)
            start_indices=(0, 0)
            strides=None
          ] bkr
          hnn:f64[36] = squeeze[dimensions=(1,)] hnm
          hno:f64[1,36] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 36)
          ] hnn
          hnp:f64[400,36] = add hnl hno
          hnq:f64[9,1] = slice[
            limit_indices=(9, 2)
            start_indices=(0, 1)
            strides=None
          ] bks
          hnr:f64[9] = squeeze[dimensions=(1,)] hnq
          hns:f64[9,1] = slice[
            limit_indices=(9, 1)
            start_indices=(0, 0)
            strides=None
          ] bks
          hnt:f64[9] = squeeze[dimensions=(1,)] hns
          hnu:f64[9] = sub hnr hnt
          hnv:f64[1,9] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 9)
          ] hnu
          hnw:f64[400,9] = mul hnv bsv
          hnx:f64[400,9] = div hnw 2.0
          hny:f64[9,1] = slice[
            limit_indices=(9, 2)
            start_indices=(0, 1)
            strides=None
          ] bks
          hnz:f64[9] = squeeze[dimensions=(1,)] hny
          hoa:f64[9,1] = slice[
            limit_indices=(9, 1)
            start_indices=(0, 0)
            strides=None
          ] bks
          hob:f64[9] = squeeze[dimensions=(1,)] hoa
          hoc:f64[9] = add hnz hob
          hod:f64[9] = div hoc 2.0
          hoe:f64[1,9] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 9)
          ] hod
          hof:f64[400,9] = add hnx hoe
          hog:f64[400,36] = add bsz 1.0
          hoh:f64[36,1] = slice[
            limit_indices=(36, 2)
            start_indices=(0, 1)
            strides=None
          ] bkr
          hoi:f64[36] = squeeze[dimensions=(1,)] hoh
          hoj:f64[36,1] = slice[
            limit_indices=(36, 1)
            start_indices=(0, 0)
            strides=None
          ] bkr
          hok:f64[36] = squeeze[dimensions=(1,)] hoj
          hol:f64[36] = sub hoi hok
          hom:f64[1,36] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 36)
          ] hol
          hon:f64[400,36] = mul hog hom
          hoo:f64[400,36] = div hon 2.0
          hop:f64[36,1] = slice[
            limit_indices=(36, 1)
            start_indices=(0, 0)
            strides=None
          ] bkr
          hoq:f64[36] = squeeze[dimensions=(1,)] hop
          hor:f64[1,36] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 36)
          ] hoq
          hos:f64[400,36] = add hoo hor
          hot:f64[400,1] = slice[
            limit_indices=(400, 9)
            start_indices=(0, 8)
            strides=None
          ] hof
          hou:f64[400] = squeeze[dimensions=(1,)] hot
          hov:f64[] = mul bom 1.0
          how:f64[400,1] = slice[
            limit_indices=(400, 35)
            start_indices=(0, 34)
            strides=None
          ] hos
          hox:f64[400] = squeeze[dimensions=(1,)] how
          hoy:f64[400,1] = slice[
            limit_indices=(400, 36)
            start_indices=(0, 35)
            strides=None
          ] hos
          hoz:f64[400] = squeeze[dimensions=(1,)] hoy
          hpa:f64[400] = atan2 hoz hox
          hpb:f64[1] = slice[limit_indices=(1,) start_indices=(0,) strides=None] bph
          hpc:f64[] = squeeze[dimensions=(0,)] hpb
          hpd:f64[400] = div hpa 6.283185307179586
          hpe:f64[400] = add hpd 0.5
          hpf:f64[400] = add hpe hpc
          hpg:f64[400] = pjit[name=remainder jaxpr=remainder1] hpf 1
          hph:bool[400] = lt hpg 0.5
          hpi:bool[400] = broadcast_in_dim[broadcast_dimensions=() shape=(400,)] False
          hpj:bool[400] = broadcast_in_dim[broadcast_dimensions=() shape=(400,)] True
          hpk:bool[400] = select_n hph hpi hpj
          hpl:f64[400] = div hpg 0.5
          hpm:f64[400] = sub hpg 0.5
          hpn:f64[400] = div hpm 0.5
          hpo:f64[400] = select_n hpk hpn hpl
          hpp:f64[1] = slice[limit_indices=(2,) start_indices=(1,) strides=None] bph
          hpq:f64[] = squeeze[dimensions=(0,)] hpp
          hpr:f64[400] = div hpa 6.283185307179586
          hps:f64[400] = add hpr 0.5
          hpt:f64[400] = add hps hpq
          hpu:f64[400] = pjit[name=remainder jaxpr=remainder1] hpt 1
          hpv:bool[400] = lt hpu 0.5
          hpw:bool[400] = broadcast_in_dim[broadcast_dimensions=() shape=(400,)] False
          hpx:bool[400] = broadcast_in_dim[broadcast_dimensions=() shape=(400,)] True
          hpy:bool[400] = select_n hpv hpw hpx
          hpz:f64[400] = div hpu 0.5
          hqa:f64[400] = sub hpu 0.5
          hqb:f64[400] = div hqa 0.5
          hqc:f64[400] = select_n hpy hqb hpz
          hqd:f64[1] = slice[limit_indices=(3,) start_indices=(2,) strides=None] bph
          hqe:f64[] = squeeze[dimensions=(0,)] hqd
          hqf:f64[400] = div hpa 6.283185307179586
          hqg:f64[400] = add hqf 0.5
          hqh:f64[400] = add hqg hqe
          hqi:f64[400] = pjit[name=remainder jaxpr=remainder1] hqh 1
          hqj:bool[400] = lt hqi 0.5
          hqk:bool[400] = broadcast_in_dim[broadcast_dimensions=() shape=(400,)] False
          hql:bool[400] = broadcast_in_dim[broadcast_dimensions=() shape=(400,)] True
          hqm:bool[400] = select_n hqj hqk hql
          hqn:f64[400] = div hqi 0.5
          hqo:f64[400] = sub hqi 0.5
          hqp:f64[400] = div hqo 0.5
          hqq:f64[400] = select_n hqm hqp hqn
          hqr:f64[1] = slice[limit_indices=(4,) start_indices=(3,) strides=None] bph
          hqs:f64[] = squeeze[dimensions=(0,)] hqr
          hqt:f64[400] = div hpa 6.283185307179586
          hqu:f64[400] = add hqt 0.5
          hqv:f64[400] = add hqu hqs
          hqw:f64[400] = pjit[name=remainder jaxpr=remainder1] hqv 1
          hqx:bool[400] = lt hqw 0.5
          hqy:bool[400] = broadcast_in_dim[broadcast_dimensions=() shape=(400,)] False
          hqz:bool[400] = broadcast_in_dim[broadcast_dimensions=() shape=(400,)] True
          hra:bool[400] = select_n hqx hqy hqz
          hrb:f64[400] = div hqw 0.5
          hrc:f64[400] = sub hqw 0.5
          hrd:f64[400] = div hrc 0.5
          hre:f64[400] = select_n hra hrd hrb
          hrf:f64[8] = broadcast_in_dim[broadcast_dimensions=() shape=(8,)] 0.0
          hrg:f64[1] = slice[limit_indices=(1,) start_indices=(0,) strides=None] bon
          hrh:f64[] = squeeze[dimensions=(0,)] hrg
          hri:f64[1] = slice[limit_indices=(1,) start_indices=(0,) strides=None] boo
          hrj:f64[] = squeeze[dimensions=(0,)] hri
          hrk:f64[] = select_n True hrj hrh
          hrl:f64[1] = slice[limit_indices=(2,) start_indices=(1,) strides=None] bon
          hrm:f64[] = squeeze[dimensions=(0,)] hrl
          hrn:f64[1] = slice[limit_indices=(2,) start_indices=(1,) strides=None] bop
          hro:f64[] = squeeze[dimensions=(0,)] hrn
          hrp:f64[] = select_n True hro hrm
          hrq:f64[] = mul 0.0 0.25
          hrr:f64[] = atan2 hrp hrk
          hrs:f64[] = add hrr hrq
          hrt:f64[] = cos hrs
          hru:f64[] = convert_element_type[new_dtype=float64 weak_type=False] boq
          hrv:f64[] = mul hru hrt
          hrw:f64[] = sub hrv hrk
          hrx:f64[] = atan2 hrp hrk
          hry:f64[] = add hrx hrq
          hrz:f64[] = sin hry
          hsa:f64[] = convert_element_type[new_dtype=float64 weak_type=False] boq
          hsb:f64[] = mul hsa hrz
          hsc:f64[] = sub hsb hrp
          hsd:f64[2] = slice[limit_indices=(2,) start_indices=(0,) strides=None] hrf
          hse:f64[1] = slice[limit_indices=(1,) start_indices=(0,) strides=None] hsd
          hsf:f64[] = squeeze[dimensions=(0,)] hse
          hsg:f64[2] = slice[limit_indices=(2,) start_indices=(0,) strides=None] hrf
          hsh:f64[1] = slice[limit_indices=(2,) start_indices=(1,) strides=None] hsg
          hsi:f64[] = squeeze[dimensions=(0,)] hsh
          hsj:f64[] = mul hov 0.25
          hsk:f64[] = add hsj hrw
          hsl:f64[] = add hsk hsf
          hsm:f64[] = add hsc hsi
          hsn:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] hsl
          hso:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] hsm
          hsp:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0.0
          hsq:f64[3] = concatenate[dimension=0] hsn hso hsp
          hsr:f64[3] = neg hsq
          hss:f64[8] = broadcast_in_dim[broadcast_dimensions=() shape=(8,)] 0.0
          hst:f64[1] = slice[limit_indices=(1,) start_indices=(0,) strides=None] bon
          hsu:f64[] = squeeze[dimensions=(0,)] hst
          hsv:f64[1] = slice[limit_indices=(1,) start_indices=(0,) strides=None] boo
          hsw:f64[] = squeeze[dimensions=(0,)] hsv
          hsx:f64[] = select_n True hsw hsu
          hsy:f64[1] = slice[limit_indices=(2,) start_indices=(1,) strides=None] bon
          hsz:f64[] = squeeze[dimensions=(0,)] hsy
          hta:f64[1] = slice[limit_indices=(2,) start_indices=(1,) strides=None] bop
          htb:f64[] = squeeze[dimensions=(0,)] hta
          htc:f64[] = select_n False htb hsz
          htd:f64[] = mul 0.0 0.25
          hte:f64[] = atan2 htc hsx
          htf:f64[] = add hte htd
          htg:f64[] = cos htf
          hth:f64[] = convert_element_type[new_dtype=float64 weak_type=False] boq
          hti:f64[] = mul hth htg
          htj:f64[] = sub hti hsx
          htk:f64[] = atan2 htc hsx
          htl:f64[] = add htk htd
          htm:f64[] = sin htl
          htn:f64[] = convert_element_type[new_dtype=float64 weak_type=False] boq
          hto:f64[] = mul htn htm
          htp:f64[] = sub hto htc
          htq:f64[2] = slice[limit_indices=(4,) start_indices=(2,) strides=None] hss
          htr:f64[1] = slice[limit_indices=(1,) start_indices=(0,) strides=None] htq
          hts:f64[] = squeeze[dimensions=(0,)] htr
          htt:f64[2] = slice[limit_indices=(4,) start_indices=(2,) strides=None] hss
          htu:f64[1] = slice[limit_indices=(2,) start_indices=(1,) strides=None] htt
          htv:f64[] = squeeze[dimensions=(0,)] htu
          htw:f64[] = mul hov 0.25
          htx:f64[] = add htw htj
          hty:f64[] = add htx hts
          htz:f64[] = add htp htv
          hua:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] hty
          hub:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] htz
          huc:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0.0
          hud:f64[3] = concatenate[dimension=0] hua hub huc
          hue:f64[3] = neg hud
          huf:f64[8] = broadcast_in_dim[broadcast_dimensions=() shape=(8,)] 0.0
          hug:f64[1] = slice[limit_indices=(1,) start_indices=(0,) strides=None] bon
          huh:f64[] = squeeze[dimensions=(0,)] hug
          hui:f64[1] = slice[limit_indices=(1,) start_indices=(0,) strides=None] boo
          huj:f64[] = squeeze[dimensions=(0,)] hui
          huk:f64[] = select_n False huj huh
          hul:f64[1] = slice[limit_indices=(2,) start_indices=(1,) strides=None] bon
          hum:f64[] = squeeze[dimensions=(0,)] hul
          hun:f64[1] = slice[limit_indices=(2,) start_indices=(1,) strides=None] bop
          huo:f64[] = squeeze[dimensions=(0,)] hun
          hup:f64[] = select_n True huo hum
          huq:f64[] = mul 0.0 0.25
          hur:f64[] = atan2 hup huk
          hus:f64[] = add hur huq
          hut:f64[] = cos hus
          huu:f64[] = convert_element_type[new_dtype=float64 weak_type=False] boq
          huv:f64[] = mul huu hut
          huw:f64[] = sub huv huk
          hux:f64[] = atan2 hup huk
          huy:f64[] = add hux huq
          huz:f64[] = sin huy
          hva:f64[] = convert_element_type[new_dtype=float64 weak_type=False] boq
          hvb:f64[] = mul hva huz
          hvc:f64[] = sub hvb hup
          hvd:f64[2] = slice[limit_indices=(6,) start_indices=(4,) strides=None] huf
          hve:f64[1] = slice[limit_indices=(1,) start_indices=(0,) strides=None] hvd
          hvf:f64[] = squeeze[dimensions=(0,)] hve
          hvg:f64[2] = slice[limit_indices=(6,) start_indices=(4,) strides=None] huf
          hvh:f64[1] = slice[limit_indices=(2,) start_indices=(1,) strides=None] hvg
          hvi:f64[] = squeeze[dimensions=(0,)] hvh
          hvj:f64[] = mul hov 0.25
          hvk:f64[] = add hvj huw
          hvl:f64[] = add hvk hvf
          hvm:f64[] = add hvc hvi
          hvn:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] hvl
          hvo:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] hvm
          hvp:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0.0
          hvq:f64[3] = concatenate[dimension=0] hvn hvo hvp
          hvr:f64[3] = neg hvq
          hvs:f64[8] = broadcast_in_dim[broadcast_dimensions=() shape=(8,)] 0.0
          hvt:f64[1] = slice[limit_indices=(1,) start_indices=(0,) strides=None] bon
          hvu:f64[] = squeeze[dimensions=(0,)] hvt
          hvv:f64[1] = slice[limit_indices=(1,) start_indices=(0,) strides=None] boo
          hvw:f64[] = squeeze[dimensions=(0,)] hvv
          hvx:f64[] = select_n False hvw hvu
          hvy:f64[1] = slice[limit_indices=(2,) start_indices=(1,) strides=None] bon
          hvz:f64[] = squeeze[dimensions=(0,)] hvy
          hwa:f64[1] = slice[limit_indices=(2,) start_indices=(1,) strides=None] bop
          hwb:f64[] = squeeze[dimensions=(0,)] hwa
          hwc:f64[] = select_n False hwb hvz
          hwd:f64[] = mul 0.0 0.25
          hwe:f64[] = atan2 hwc hvx
          hwf:f64[] = add hwe hwd
          hwg:f64[] = cos hwf
          hwh:f64[] = convert_element_type[new_dtype=float64 weak_type=False] boq
          hwi:f64[] = mul hwh hwg
          hwj:f64[] = sub hwi hvx
          hwk:f64[] = atan2 hwc hvx
          hwl:f64[] = add hwk hwd
          hwm:f64[] = sin hwl
          hwn:f64[] = convert_element_type[new_dtype=float64 weak_type=False] boq
          hwo:f64[] = mul hwn hwm
          hwp:f64[] = sub hwo hwc
          hwq:f64[2] = slice[limit_indices=(8,) start_indices=(6,) strides=None] hvs
          hwr:f64[1] = slice[limit_indices=(1,) start_indices=(0,) strides=None] hwq
          hws:f64[] = squeeze[dimensions=(0,)] hwr
          hwt:f64[2] = slice[limit_indices=(8,) start_indices=(6,) strides=None] hvs
          hwu:f64[1] = slice[limit_indices=(2,) start_indices=(1,) strides=None] hwt
          hwv:f64[] = squeeze[dimensions=(0,)] hwu
          hww:f64[] = mul hov 0.25
          hwx:f64[] = add hww hwj
          hwy:f64[] = add hwx hws
          hwz:f64[] = add hwp hwv
          hxa:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] hwy
          hxb:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] hwz
          hxc:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0.0
          hxd:f64[3] = concatenate[dimension=0] hxa hxb hxc
          hxe:f64[3] = neg hxd
          hxf:f64[1] = slice[limit_indices=(1,) start_indices=(0,) strides=None] bon
          hxg:f64[] = squeeze[dimensions=(0,)] hxf
          hxh:f64[1] = slice[limit_indices=(1,) start_indices=(0,) strides=None] boo
          hxi:f64[] = squeeze[dimensions=(0,)] hxh
          hxj:f64[] = select_n True hxi hxg
          hxk:f64[1] = slice[limit_indices=(2,) start_indices=(1,) strides=None] bon
          hxl:f64[] = squeeze[dimensions=(0,)] hxk
          hxm:f64[1] = slice[limit_indices=(2,) start_indices=(1,) strides=None] bop
          hxn:f64[] = squeeze[dimensions=(0,)] hxm
          hxo:f64[] = select_n True hxn hxl
          hxp:f64[] = mul 0.0 0.25
          hxq:f64[] = atan2 hxo hxj
          hxr:f64[] = add hxq hxp
          hxs:f64[] = cos hxr
          hxt:f64[] = convert_element_type[new_dtype=float64 weak_type=False] boq
          hxu:f64[] = mul hxt hxs
          hxv:f64[] = sub hxu hxj
          hxw:f64[] = atan2 hxo hxj
          hxx:f64[] = add hxw hxp
          hxy:f64[] = sin hxx
          hxz:f64[] = convert_element_type[new_dtype=float64 weak_type=False] boq
          hya:f64[] = mul hxz hxy
          hyb:f64[] = sub hya hxo
          hyc:f64[2] = slice[limit_indices=(2,) start_indices=(0,) strides=None] bor
          hyd:f64[1] = slice[limit_indices=(1,) start_indices=(0,) strides=None] hyc
          hye:f64[] = squeeze[dimensions=(0,)] hyd
          hyf:f64[2] = slice[limit_indices=(2,) start_indices=(0,) strides=None] bor
          hyg:f64[1] = slice[limit_indices=(2,) start_indices=(1,) strides=None] hyf
          hyh:f64[] = squeeze[dimensions=(0,)] hyg
          hyi:f64[] = mul hov 0.25
          hyj:f64[] = add hyi hxv
          hyk:f64[] = add hyj hye
          hyl:f64[] = add hyb hyh
          hym:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] hyk
          hyn:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] hyl
          hyo:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0.0
          hyp:f64[3] = concatenate[dimension=0] hym hyn hyo
          hyq:f64[1] = slice[limit_indices=(1,) start_indices=(0,) strides=None] bon
          hyr:f64[] = squeeze[dimensions=(0,)] hyq
          hys:f64[1] = slice[limit_indices=(1,) start_indices=(0,) strides=None] boo
          hyt:f64[] = squeeze[dimensions=(0,)] hys
          hyu:f64[] = select_n True hyt hyr
          hyv:f64[1] = slice[limit_indices=(2,) start_indices=(1,) strides=None] bon
          hyw:f64[] = squeeze[dimensions=(0,)] hyv
          hyx:f64[1] = slice[limit_indices=(2,) start_indices=(1,) strides=None] bop
          hyy:f64[] = squeeze[dimensions=(0,)] hyx
          hyz:f64[] = select_n False hyy hyw
          hza:f64[] = mul 0.0 0.25
          hzb:f64[] = atan2 hyz hyu
          hzc:f64[] = add hzb hza
          hzd:f64[] = cos hzc
          hze:f64[] = convert_element_type[new_dtype=float64 weak_type=False] boq
          hzf:f64[] = mul hze hzd
          hzg:f64[] = sub hzf hyu
          hzh:f64[] = atan2 hyz hyu
          hzi:f64[] = add hzh hza
          hzj:f64[] = sin hzi
          hzk:f64[] = convert_element_type[new_dtype=float64 weak_type=False] boq
          hzl:f64[] = mul hzk hzj
          hzm:f64[] = sub hzl hyz
          hzn:f64[2] = slice[limit_indices=(4,) start_indices=(2,) strides=None] bor
          hzo:f64[1] = slice[limit_indices=(1,) start_indices=(0,) strides=None] hzn
          hzp:f64[] = squeeze[dimensions=(0,)] hzo
          hzq:f64[2] = slice[limit_indices=(4,) start_indices=(2,) strides=None] bor
          hzr:f64[1] = slice[limit_indices=(2,) start_indices=(1,) strides=None] hzq
          hzs:f64[] = squeeze[dimensions=(0,)] hzr
          hzt:f64[] = mul hov 0.25
          hzu:f64[] = add hzt hzg
          hzv:f64[] = add hzu hzp
          hzw:f64[] = add hzm hzs
          hzx:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] hzv
          hzy:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] hzw
          hzz:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0.0
          iaa:f64[3] = concatenate[dimension=0] hzx hzy hzz
          iab:f64[1] = slice[limit_indices=(1,) start_indices=(0,) strides=None] bon
          iac:f64[] = squeeze[dimensions=(0,)] iab
          iad:f64[1] = slice[limit_indices=(1,) start_indices=(0,) strides=None] boo
          iae:f64[] = squeeze[dimensions=(0,)] iad
          iaf:f64[] = select_n False iae iac
          iag:f64[1] = slice[limit_indices=(2,) start_indices=(1,) strides=None] bon
          iah:f64[] = squeeze[dimensions=(0,)] iag
          iai:f64[1] = slice[limit_indices=(2,) start_indices=(1,) strides=None] bop
          iaj:f64[] = squeeze[dimensions=(0,)] iai
          iak:f64[] = select_n True iaj iah
          ial:f64[] = mul 0.0 0.25
          iam:f64[] = atan2 iak iaf
          ian:f64[] = add iam ial
          iao:f64[] = cos ian
          iap:f64[] = convert_element_type[new_dtype=float64 weak_type=False] boq
          iaq:f64[] = mul iap iao
          iar:f64[] = sub iaq iaf
          ias:f64[] = atan2 iak iaf
          iat:f64[] = add ias ial
          iau:f64[] = sin iat
          iav:f64[] = convert_element_type[new_dtype=float64 weak_type=False] boq
          iaw:f64[] = mul iav iau
          iax:f64[] = sub iaw iak
          iay:f64[2] = slice[limit_indices=(6,) start_indices=(4,) strides=None] bor
          iaz:f64[1] = slice[limit_indices=(1,) start_indices=(0,) strides=None] iay
          iba:f64[] = squeeze[dimensions=(0,)] iaz
          ibb:f64[2] = slice[limit_indices=(6,) start_indices=(4,) strides=None] bor
          ibc:f64[1] = slice[limit_indices=(2,) start_indices=(1,) strides=None] ibb
          ibd:f64[] = squeeze[dimensions=(0,)] ibc
          ibe:f64[] = mul hov 0.25
          ibf:f64[] = add ibe iar
          ibg:f64[] = add ibf iba
          ibh:f64[] = add iax ibd
          ibi:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] ibg
          ibj:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] ibh
          ibk:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0.0
          ibl:f64[3] = concatenate[dimension=0] ibi ibj ibk
          ibm:f64[1] = slice[limit_indices=(1,) start_indices=(0,) strides=None] bon
          ibn:f64[] = squeeze[dimensions=(0,)] ibm
          ibo:f64[1] = slice[limit_indices=(1,) start_indices=(0,) strides=None] boo
          ibp:f64[] = squeeze[dimensions=(0,)] ibo
          ibq:f64[] = select_n False ibp ibn
          ibr:f64[1] = slice[limit_indices=(2,) start_indices=(1,) strides=None] bon
          ibs:f64[] = squeeze[dimensions=(0,)] ibr
          ibt:f64[1] = slice[limit_indices=(2,) start_indices=(1,) strides=None] bop
          ibu:f64[] = squeeze[dimensions=(0,)] ibt
          ibv:f64[] = select_n False ibu ibs
          ibw:f64[] = mul 0.0 0.25
          ibx:f64[] = atan2 ibv ibq
          iby:f64[] = add ibx ibw
          ibz:f64[] = cos iby
          ica:f64[] = convert_element_type[new_dtype=float64 weak_type=False] boq
          icb:f64[] = mul ica ibz
          icc:f64[] = sub icb ibq
          icd:f64[] = atan2 ibv ibq
          ice:f64[] = add icd ibw
          icf:f64[] = sin ice
          icg:f64[] = convert_element_type[new_dtype=float64 weak_type=False] boq
          ich:f64[] = mul icg icf
          ici:f64[] = sub ich ibv
          icj:f64[2] = slice[limit_indices=(8,) start_indices=(6,) strides=None] bor
          ick:f64[1] = slice[limit_indices=(1,) start_indices=(0,) strides=None] icj
          icl:f64[] = squeeze[dimensions=(0,)] ick
          icm:f64[2] = slice[limit_indices=(8,) start_indices=(6,) strides=None] bor
          icn:f64[1] = slice[limit_indices=(2,) start_indices=(1,) strides=None] icm
          ico:f64[] = squeeze[dimensions=(0,)] icn
          icp:f64[] = mul hov 0.25
          icq:f64[] = add icp icc
          icr:f64[] = add icq icl
          ics:f64[] = add ici ico
          ict:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] icr
          icu:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] ics
          icv:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0.0
          icw:f64[3] = concatenate[dimension=0] ict icu icv
          icx:f64[1] = slice[limit_indices=(1,) start_indices=(0,) strides=None] hsr
          icy:f64[] = squeeze[dimensions=(0,)] icx
          icz:f64[1] = slice[limit_indices=(1,) start_indices=(0,) strides=None] hyp
          ida:f64[] = squeeze[dimensions=(0,)] icz
          idb:f64[] = sub ida icy
          idc:f64[] = div idb 6.283185307179586
          idd:f64[400] = mul 6.283185307179586 hpo
          ide:f64[400] = mul 6.283185307179586 hpo
          idf:f64[400] = sin ide
          idg:f64[400] = sub idd idf
          idh:f64[400] = mul idc idg
          idi:f64[400] = add idh icy
          idj:f64[1] = slice[limit_indices=(2,) start_indices=(1,) strides=None] hsr
          idk:f64[] = squeeze[dimensions=(0,)] idj
          idl:f64[1] = slice[limit_indices=(2,) start_indices=(1,) strides=None] hyp
          idm:f64[] = squeeze[dimensions=(0,)] idl
          idn:f64[] = sub idm idk
          ido:f64[] = div idn 6.283185307179586
          idp:f64[400] = mul 6.283185307179586 hpo
          idq:f64[400] = mul 6.283185307179586 hpo
          idr:f64[400] = sin idq
          ids:f64[400] = sub idp idr
          idt:f64[400] = mul ido ids
          idu:f64[400] = add idt idk
          idv:f64[400] = mul 6.283185307179586 hpo
          idw:f64[400] = cos idv
          idx:f64[400] = sub 1.0 idw
          idy:f64[400] = mul 0.045 idx
          idz:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] idi
          iea:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] idu
          ieb:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] idy
          iec:f64[400,3] = concatenate[dimension=1] idz iea ieb
          ied:f64[1] = slice[limit_indices=(1,) start_indices=(0,) strides=None] hue
          iee:f64[] = squeeze[dimensions=(0,)] ied
          ief:f64[1] = slice[limit_indices=(1,) start_indices=(0,) strides=None] iaa
          ieg:f64[] = squeeze[dimensions=(0,)] ief
          ieh:f64[] = sub ieg iee
          iei:f64[] = div ieh 6.283185307179586
          iej:f64[400] = mul 6.283185307179586 hqc
          iek:f64[400] = mul 6.283185307179586 hqc
          iel:f64[400] = sin iek
          iem:f64[400] = sub iej iel
          ien:f64[400] = mul iei iem
          ieo:f64[400] = add ien iee
          iep:f64[1] = slice[limit_indices=(2,) start_indices=(1,) strides=None] hue
          ieq:f64[] = squeeze[dimensions=(0,)] iep
          ier:f64[1] = slice[limit_indices=(2,) start_indices=(1,) strides=None] iaa
          ies:f64[] = squeeze[dimensions=(0,)] ier
          iet:f64[] = sub ies ieq
          ieu:f64[] = div iet 6.283185307179586
          iev:f64[400] = mul 6.283185307179586 hqc
          iew:f64[400] = mul 6.283185307179586 hqc
          iex:f64[400] = sin iew
          iey:f64[400] = sub iev iex
          iez:f64[400] = mul ieu iey
          ifa:f64[400] = add iez ieq
          ifb:f64[400] = mul 6.283185307179586 hqc
          ifc:f64[400] = cos ifb
          ifd:f64[400] = sub 1.0 ifc
          ife:f64[400] = mul 0.045 ifd
          iff:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] ieo
          ifg:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] ifa
          ifh:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] ife
          ifi:f64[400,3] = concatenate[dimension=1] iff ifg ifh
          ifj:f64[1] = slice[limit_indices=(1,) start_indices=(0,) strides=None] hvr
          ifk:f64[] = squeeze[dimensions=(0,)] ifj
          ifl:f64[1] = slice[limit_indices=(1,) start_indices=(0,) strides=None] ibl
          ifm:f64[] = squeeze[dimensions=(0,)] ifl
          ifn:f64[] = sub ifm ifk
          ifo:f64[] = div ifn 6.283185307179586
          ifp:f64[400] = mul 6.283185307179586 hqq
          ifq:f64[400] = mul 6.283185307179586 hqq
          ifr:f64[400] = sin ifq
          ifs:f64[400] = sub ifp ifr
          ift:f64[400] = mul ifo ifs
          ifu:f64[400] = add ift ifk
          ifv:f64[1] = slice[limit_indices=(2,) start_indices=(1,) strides=None] hvr
          ifw:f64[] = squeeze[dimensions=(0,)] ifv
          ifx:f64[1] = slice[limit_indices=(2,) start_indices=(1,) strides=None] ibl
          ify:f64[] = squeeze[dimensions=(0,)] ifx
          ifz:f64[] = sub ify ifw
          iga:f64[] = div ifz 6.283185307179586
          igb:f64[400] = mul 6.283185307179586 hqq
          igc:f64[400] = mul 6.283185307179586 hqq
          igd:f64[400] = sin igc
          ige:f64[400] = sub igb igd
          igf:f64[400] = mul iga ige
          igg:f64[400] = add igf ifw
          igh:f64[400] = mul 6.283185307179586 hqq
          igi:f64[400] = cos igh
          igj:f64[400] = sub 1.0 igi
          igk:f64[400] = mul 0.045 igj
          igl:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] ifu
          igm:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] igg
          ign:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] igk
          igo:f64[400,3] = concatenate[dimension=1] igl igm ign
          igp:f64[1] = slice[limit_indices=(1,) start_indices=(0,) strides=None] hxe
          igq:f64[] = squeeze[dimensions=(0,)] igp
          igr:f64[1] = slice[limit_indices=(1,) start_indices=(0,) strides=None] icw
          igs:f64[] = squeeze[dimensions=(0,)] igr
          igt:f64[] = sub igs igq
          igu:f64[] = div igt 6.283185307179586
          igv:f64[400] = mul 6.283185307179586 hre
          igw:f64[400] = mul 6.283185307179586 hre
          igx:f64[400] = sin igw
          igy:f64[400] = sub igv igx
          igz:f64[400] = mul igu igy
          iha:f64[400] = add igz igq
          ihb:f64[1] = slice[limit_indices=(2,) start_indices=(1,) strides=None] hxe
          ihc:f64[] = squeeze[dimensions=(0,)] ihb
          ihd:f64[1] = slice[limit_indices=(2,) start_indices=(1,) strides=None] icw
          ihe:f64[] = squeeze[dimensions=(0,)] ihd
          ihf:f64[] = sub ihe ihc
          ihg:f64[] = div ihf 6.283185307179586
          ihh:f64[400] = mul 6.283185307179586 hre
          ihi:f64[400] = mul 6.283185307179586 hre
          ihj:f64[400] = sin ihi
          ihk:f64[400] = sub ihh ihj
          ihl:f64[400] = mul ihg ihk
          ihm:f64[400] = add ihl ihc
          ihn:f64[400] = mul 6.283185307179586 hre
          iho:f64[400] = cos ihn
          ihp:f64[400] = sub 1.0 iho
          ihq:f64[400] = mul 0.045 ihp
          ihr:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] iha
          ihs:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] ihm
          iht:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] ihq
          ihu:f64[400,3] = concatenate[dimension=1] ihr ihs iht
          ihv:f64[1] = slice[limit_indices=(1,) start_indices=(0,) strides=None] hyp
          ihw:f64[] = squeeze[dimensions=(0,)] ihv
          ihx:f64[1] = slice[limit_indices=(1,) start_indices=(0,) strides=None] hsr
          ihy:f64[] = squeeze[dimensions=(0,)] ihx
          ihz:f64[] = sub ihy ihw
          iia:f64[] = div ihz 6.283185307179586
          iib:f64[400] = mul 6.283185307179586 hpo
          iic:f64[400] = mul 6.283185307179586 hpo
          iid:f64[400] = sin iic
          iie:f64[400] = sub iib iid
          iif:f64[400] = mul iia iie
          iig:f64[400] = add iif ihw
          iih:f64[1] = slice[limit_indices=(2,) start_indices=(1,) strides=None] hyp
          iii:f64[] = squeeze[dimensions=(0,)] iih
          iij:f64[1] = slice[limit_indices=(2,) start_indices=(1,) strides=None] hsr
          iik:f64[] = squeeze[dimensions=(0,)] iij
          iil:f64[] = sub iik iii
          iim:f64[] = div iil 6.283185307179586
          iin:f64[400] = mul 6.283185307179586 hpo
          iio:f64[400] = mul 6.283185307179586 hpo
          iip:f64[400] = sin iio
          iiq:f64[400] = sub iin iip
          iir:f64[400] = mul iim iiq
          iis:f64[400] = add iir iii
          iit:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] iig
          iiu:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] iis
          iiv:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0.0
          iiw:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(400, 1)
          ] iiv
          iix:f64[400,3] = concatenate[dimension=1] iit iiu iiw
          iiy:f64[1] = slice[limit_indices=(1,) start_indices=(0,) strides=None] iaa
          iiz:f64[] = squeeze[dimensions=(0,)] iiy
          ija:f64[1] = slice[limit_indices=(1,) start_indices=(0,) strides=None] hue
          ijb:f64[] = squeeze[dimensions=(0,)] ija
          ijc:f64[] = sub ijb iiz
          ijd:f64[] = div ijc 6.283185307179586
          ije:f64[400] = mul 6.283185307179586 hqc
          ijf:f64[400] = mul 6.283185307179586 hqc
          ijg:f64[400] = sin ijf
          ijh:f64[400] = sub ije ijg
          iji:f64[400] = mul ijd ijh
          ijj:f64[400] = add iji iiz
          ijk:f64[1] = slice[limit_indices=(2,) start_indices=(1,) strides=None] iaa
          ijl:f64[] = squeeze[dimensions=(0,)] ijk
          ijm:f64[1] = slice[limit_indices=(2,) start_indices=(1,) strides=None] hue
          ijn:f64[] = squeeze[dimensions=(0,)] ijm
          ijo:f64[] = sub ijn ijl
          ijp:f64[] = div ijo 6.283185307179586
          ijq:f64[400] = mul 6.283185307179586 hqc
          ijr:f64[400] = mul 6.283185307179586 hqc
          ijs:f64[400] = sin ijr
          ijt:f64[400] = sub ijq ijs
          iju:f64[400] = mul ijp ijt
          ijv:f64[400] = add iju ijl
          ijw:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] ijj
          ijx:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] ijv
          ijy:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0.0
          ijz:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(400, 1)
          ] ijy
          ika:f64[400,3] = concatenate[dimension=1] ijw ijx ijz
          ikb:f64[1] = slice[limit_indices=(1,) start_indices=(0,) strides=None] ibl
          ikc:f64[] = squeeze[dimensions=(0,)] ikb
          ikd:f64[1] = slice[limit_indices=(1,) start_indices=(0,) strides=None] hvr
          ike:f64[] = squeeze[dimensions=(0,)] ikd
          ikf:f64[] = sub ike ikc
          ikg:f64[] = div ikf 6.283185307179586
          ikh:f64[400] = mul 6.283185307179586 hqq
          iki:f64[400] = mul 6.283185307179586 hqq
          ikj:f64[400] = sin iki
          ikk:f64[400] = sub ikh ikj
          ikl:f64[400] = mul ikg ikk
          ikm:f64[400] = add ikl ikc
          ikn:f64[1] = slice[limit_indices=(2,) start_indices=(1,) strides=None] ibl
          iko:f64[] = squeeze[dimensions=(0,)] ikn
          ikp:f64[1] = slice[limit_indices=(2,) start_indices=(1,) strides=None] hvr
          ikq:f64[] = squeeze[dimensions=(0,)] ikp
          ikr:f64[] = sub ikq iko
          iks:f64[] = div ikr 6.283185307179586
          ikt:f64[400] = mul 6.283185307179586 hqq
          iku:f64[400] = mul 6.283185307179586 hqq
          ikv:f64[400] = sin iku
          ikw:f64[400] = sub ikt ikv
          ikx:f64[400] = mul iks ikw
          iky:f64[400] = add ikx iko
          ikz:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] ikm
          ila:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] iky
          ilb:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0.0
          ilc:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(400, 1)
          ] ilb
          ild:f64[400,3] = concatenate[dimension=1] ikz ila ilc
          ile:f64[1] = slice[limit_indices=(1,) start_indices=(0,) strides=None] icw
          ilf:f64[] = squeeze[dimensions=(0,)] ile
          ilg:f64[1] = slice[limit_indices=(1,) start_indices=(0,) strides=None] hxe
          ilh:f64[] = squeeze[dimensions=(0,)] ilg
          ili:f64[] = sub ilh ilf
          ilj:f64[] = div ili 6.283185307179586
          ilk:f64[400] = mul 6.283185307179586 hre
          ill:f64[400] = mul 6.283185307179586 hre
          ilm:f64[400] = sin ill
          iln:f64[400] = sub ilk ilm
          ilo:f64[400] = mul ilj iln
          ilp:f64[400] = add ilo ilf
          ilq:f64[1] = slice[limit_indices=(2,) start_indices=(1,) strides=None] icw
          ilr:f64[] = squeeze[dimensions=(0,)] ilq
          ils:f64[1] = slice[limit_indices=(2,) start_indices=(1,) strides=None] hxe
          ilt:f64[] = squeeze[dimensions=(0,)] ils
          ilu:f64[] = sub ilt ilr
          ilv:f64[] = div ilu 6.283185307179586
          ilw:f64[400] = mul 6.283185307179586 hre
          ilx:f64[400] = mul 6.283185307179586 hre
          ily:f64[400] = sin ilx
          ilz:f64[400] = sub ilw ily
          ima:f64[400] = mul ilv ilz
          imb:f64[400] = add ima ilr
          imc:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] ilp
          imd:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] imb
          ime:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0.0
          imf:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(400, 1)
          ] ime
          img:f64[400,3] = concatenate[dimension=1] imc imd imf
          imh:bool[400,3] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 3)
          ] hpk
          imi:f64[400,3] = select_n imh iec iix
          imj:f64[1,3] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 3)
          ] bon
          imk:f64[400,3] = add imj imi
          iml:bool[400,3] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 3)
          ] hpy
          imm:f64[400,3] = select_n iml ifi ika
          imn:f64[1,3] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 3)
          ] bop
          imo:f64[400,3] = add imn imm
          imp:bool[400,3] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 3)
          ] hqm
          imq:f64[400,3] = select_n imp igo ild
          imr:f64[1,3] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 3)
          ] boo
          ims:f64[400,3] = add imr imq
          imt:bool[400,3] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 3)
          ] hra
          imu:f64[400,3] = select_n imt ihu img
          imv:f64[1,3] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 3)
          ] bos
          imw:f64[400,3] = add imv imu
          imx:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0.0
          imy:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0.0
          imz:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] hou
          ina:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(400, 1)
          ] imx
          inb:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(400, 1)
          ] imy
          inc:f64[400,3] = concatenate[dimension=1] ina inb imz
          ind:f64[400,1,3] = reshape[dimensions=None new_sizes=(400, 1, 3)] inc
          ine:f64[400,3] = squeeze[dimensions=(1,)] ind
          inf:f64[400,4,3] = broadcast_in_dim[
            broadcast_dimensions=(0, 2)
            shape=(400, 4, 3)
          ] ine
          ing:f64[400,12] = reshape[dimensions=None new_sizes=(400, 12)] inf
          inh:f64[400,12] = concatenate[dimension=1] imk imo ims imw
          ini:f64[400,12] = sub inh ing
          inj:f64[400,8] = slice[
            limit_indices=(400, 8)
            start_indices=(0, 0)
            strides=None
          ] hof
          ink:f64[400,1] = slice[
            limit_indices=(400, 1)
            start_indices=(0, 0)
            strides=None
          ] inj
          inl:f64[400] = squeeze[dimensions=(1,)] ink
          inm:f64[400,1] = slice[
            limit_indices=(400, 5)
            start_indices=(0, 4)
            strides=None
          ] inj
          inn:f64[400] = squeeze[dimensions=(1,)] inm
          ino:f64[400,1] = slice[
            limit_indices=(400, 2)
            start_indices=(0, 1)
            strides=None
          ] inj
          inp:f64[400] = squeeze[dimensions=(1,)] ino
          inq:f64[400,1] = slice[
            limit_indices=(400, 6)
            start_indices=(0, 5)
            strides=None
          ] inj
          inr:f64[400] = squeeze[dimensions=(1,)] inq
          ins:f64[400,1] = slice[
            limit_indices=(400, 3)
            start_indices=(0, 2)
            strides=None
          ] inj
          int:f64[400] = squeeze[dimensions=(1,)] ins
          inu:f64[400,1] = slice[
            limit_indices=(400, 7)
            start_indices=(0, 6)
            strides=None
          ] inj
          inv:f64[400] = squeeze[dimensions=(1,)] inu
          inw:f64[400,1] = slice[
            limit_indices=(400, 4)
            start_indices=(0, 3)
            strides=None
          ] inj
          inx:f64[400] = squeeze[dimensions=(1,)] inw
          iny:f64[400,1] = slice[
            limit_indices=(400, 8)
            start_indices=(0, 7)
            strides=None
          ] inj
          inz:f64[400] = squeeze[dimensions=(1,)] iny
          ioa:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] inl
          iob:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] inn
          ioc:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0.0
          iod:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] inp
          ioe:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] inr
          iof:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0.0
          iog:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] int
          ioh:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] inv
          ioi:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0.0
          ioj:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] inx
          iok:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] inz
          iol:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0.0
          iom:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(400, 1)
          ] ioc
          ion:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(400, 1)
          ] iof
          ioo:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(400, 1)
          ] ioi
          iop:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(400, 1)
          ] iol
          ioq:f64[400,12] = concatenate[dimension=1] ioa iob iom iod ioe ion iog
            ioh ioo ioj iok iop
          ior:f64[400,12] = add ini ioq
          ios:f64[400,3] = slice[
            limit_indices=(400, 3)
            start_indices=(0, 0)
            strides=None
          ] ior
          iot:f64[] = select_n False 0.1881 -0.1881
          iou:f64[] = select_n True 0.04675 -0.04675
          iov:f64[400,1] = slice[
            limit_indices=(400, 1)
            start_indices=(0, 0)
            strides=None
          ] ios
          iow:f64[400] = squeeze[dimensions=(1,)] iov
          iox:f64[] = convert_element_type[new_dtype=float64 weak_type=False] iot
          ioy:f64[400] = sub iow iox
          ioz:f64[400,1] = slice[
            limit_indices=(400, 2)
            start_indices=(0, 1)
            strides=None
          ] ios
          ipa:f64[400] = squeeze[dimensions=(1,)] ioz
          ipb:f64[] = convert_element_type[new_dtype=float64 weak_type=False] iou
          ipc:f64[400] = sub ipa ipb
          ipd:f64[400,1] = slice[
            limit_indices=(400, 3)
            start_indices=(0, 2)
            strides=None
          ] ios
          ipe:f64[400] = squeeze[dimensions=(1,)] ipd
          ipf:f64[] = select_n True 0.08 -0.08
          ipg:f64[400] = integer_pow[y=2] ioy
          iph:f64[400] = integer_pow[y=2] ipc
          ipi:f64[400] = add ipg iph
          ipj:f64[400] = integer_pow[y=2] ipe
          ipk:f64[400] = add ipi ipj
          ipl:f64[400] = sqrt ipk
          ipm:f64[400] = integer_pow[y=2] ipl
          ipn:f64[400] = sub ipm 0.0064
          ipo:f64[400] = sqrt ipn
          ipp:f64[400] = integer_pow[y=2] ipc
          ipq:f64[400] = integer_pow[y=2] ipe
          ipr:f64[400] = add ipp ipq
          ips:f64[] = integer_pow[y=2] ipf
          ipt:f64[] = convert_element_type[new_dtype=float64 weak_type=False] ips
          ipu:f64[400] = sub ipr ipt
          ipv:f64[400] = sqrt ipu
          ipw:f64[] = convert_element_type[new_dtype=float64 weak_type=False] ipf
          ipx:f64[400] = mul ipe ipw
          ipy:f64[400] = mul ipc ipv
          ipz:f64[400] = add ipx ipy
          iqa:f64[] = convert_element_type[new_dtype=float64 weak_type=False] ipf
          iqb:f64[400] = mul ipc iqa
          iqc:f64[400] = mul ipe ipv
          iqd:f64[400] = sub iqb iqc
          iqe:f64[400] = atan2 ipz iqd
          iqf:f64[400] = integer_pow[y=2] ipo
          iqg:f64[400] = sub 0.090738 iqf
          iqh:f64[] = abs 0.045369
          iqi:f64[] = mul 2.0 iqh
          iqj:f64[] = convert_element_type[new_dtype=float64 weak_type=False] iqi
          iqk:f64[400] = div iqg iqj
          iql:f64[1] = slice[limit_indices=(3,) start_indices=(2,) strides=None] bot
          iqm:f64[] = squeeze[dimensions=(0,)] iql
          iqn:f64[1] = slice[limit_indices=(3,) start_indices=(2,) strides=None] bou
          iqo:f64[] = squeeze[dimensions=(0,)] iqn
          iqp:f64[] = add 3.141592653589793 iqm
          iqq:f64[] = cos iqp
          iqr:f64[] = add 3.141592653589793 iqo
          iqs:f64[] = cos iqr
          iqt:f64[400] = pjit[name=clip jaxpr=clip2] iqk iqq iqs
          iqu:f64[400] = acos iqt
          iqv:f64[400] = sub 3.141592653589793 iqu
          iqw:f64[400] = neg iqv
          iqx:f64[400] = sin iqe
          iqy:f64[400] = mul ipc iqx
          iqz:f64[400] = cos iqe
          ira:f64[400] = mul ipe iqz
          irb:f64[400] = sub iqy ira
          irc:f64[400] = sin iqw
          ird:f64[400] = mul -0.213 irc
          ire:f64[400] = cos iqw
          irf:f64[400] = mul -0.213 ire
          irg:f64[400] = add -0.213 irf
          irh:f64[400] = mul ird irb
          iri:f64[400] = mul irg ioy
          irj:f64[400] = add irh iri
          irk:f64[400] = mul ird ioy
          irl:f64[400] = mul irg irb
          irm:f64[400] = sub irk irl
          irn:f64[400] = atan2 irj irm
          iro:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] iqe
          irp:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] irn
          irq:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] iqw
          irr:f64[400,3] = concatenate[dimension=1] iro irp irq
          irs:f64[400,3] = slice[
            limit_indices=(400, 6)
            start_indices=(0, 3)
            strides=None
          ] ior
          irt:f64[] = select_n False 0.1881 -0.1881
          iru:f64[] = select_n False 0.04675 -0.04675
          irv:f64[400,1] = slice[
            limit_indices=(400, 1)
            start_indices=(0, 0)
            strides=None
          ] irs
          irw:f64[400] = squeeze[dimensions=(1,)] irv
          irx:f64[] = convert_element_type[new_dtype=float64 weak_type=False] irt
          iry:f64[400] = sub irw irx
          irz:f64[400,1] = slice[
            limit_indices=(400, 2)
            start_indices=(0, 1)
            strides=None
          ] irs
          isa:f64[400] = squeeze[dimensions=(1,)] irz
          isb:f64[] = convert_element_type[new_dtype=float64 weak_type=False] iru
          isc:f64[400] = sub isa isb
          isd:f64[400,1] = slice[
            limit_indices=(400, 3)
            start_indices=(0, 2)
            strides=None
          ] irs
          ise:f64[400] = squeeze[dimensions=(1,)] isd
          isf:f64[] = select_n False 0.08 -0.08
          isg:f64[400] = integer_pow[y=2] iry
          ish:f64[400] = integer_pow[y=2] isc
          isi:f64[400] = add isg ish
          isj:f64[400] = integer_pow[y=2] ise
          isk:f64[400] = add isi isj
          isl:f64[400] = sqrt isk
          ism:f64[400] = integer_pow[y=2] isl
          isn:f64[400] = sub ism 0.0064
          iso:f64[400] = sqrt isn
          isp:f64[400] = integer_pow[y=2] isc
          isq:f64[400] = integer_pow[y=2] ise
          isr:f64[400] = add isp isq
          iss:f64[] = integer_pow[y=2] isf
          ist:f64[] = convert_element_type[new_dtype=float64 weak_type=False] iss
          isu:f64[400] = sub isr ist
          isv:f64[400] = sqrt isu
          isw:f64[] = convert_element_type[new_dtype=float64 weak_type=False] isf
          isx:f64[400] = mul ise isw
          isy:f64[400] = mul isc isv
          isz:f64[400] = add isx isy
          ita:f64[] = convert_element_type[new_dtype=float64 weak_type=False] isf
          itb:f64[400] = mul isc ita
          itc:f64[400] = mul ise isv
          itd:f64[400] = sub itb itc
          ite:f64[400] = atan2 isz itd
          itf:f64[400] = integer_pow[y=2] iso
          itg:f64[400] = sub 0.090738 itf
          ith:f64[] = abs 0.045369
          iti:f64[] = mul 2.0 ith
          itj:f64[] = convert_element_type[new_dtype=float64 weak_type=False] iti
          itk:f64[400] = div itg itj
          itl:f64[1] = slice[limit_indices=(3,) start_indices=(2,) strides=None] bot
          itm:f64[] = squeeze[dimensions=(0,)] itl
          itn:f64[1] = slice[limit_indices=(3,) start_indices=(2,) strides=None] bou
          ito:f64[] = squeeze[dimensions=(0,)] itn
          itp:f64[] = add 3.141592653589793 itm
          itq:f64[] = cos itp
          itr:f64[] = add 3.141592653589793 ito
          its:f64[] = cos itr
          itt:f64[400] = pjit[name=clip jaxpr=clip2] itk itq its
          itu:f64[400] = acos itt
          itv:f64[400] = sub 3.141592653589793 itu
          itw:f64[400] = neg itv
          itx:f64[400] = sin ite
          ity:f64[400] = mul isc itx
          itz:f64[400] = cos ite
          iua:f64[400] = mul ise itz
          iub:f64[400] = sub ity iua
          iuc:f64[400] = sin itw
          iud:f64[400] = mul -0.213 iuc
          iue:f64[400] = cos itw
          iuf:f64[400] = mul -0.213 iue
          iug:f64[400] = add -0.213 iuf
          iuh:f64[400] = mul iud iub
          iui:f64[400] = mul iug iry
          iuj:f64[400] = add iuh iui
          iuk:f64[400] = mul iud iry
          iul:f64[400] = mul iug iub
          ium:f64[400] = sub iuk iul
          iun:f64[400] = atan2 iuj ium
          iuo:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] ite
          iup:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] iun
          iuq:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] itw
          iur:f64[400,3] = concatenate[dimension=1] iuo iup iuq
          ius:f64[400,3] = slice[
            limit_indices=(400, 9)
            start_indices=(0, 6)
            strides=None
          ] ior
          iut:f64[] = select_n True 0.1881 -0.1881
          iuu:f64[] = select_n True 0.04675 -0.04675
          iuv:f64[400,1] = slice[
            limit_indices=(400, 1)
            start_indices=(0, 0)
            strides=None
          ] ius
          iuw:f64[400] = squeeze[dimensions=(1,)] iuv
          iux:f64[] = convert_element_type[new_dtype=float64 weak_type=False] iut
          iuy:f64[400] = sub iuw iux
          iuz:f64[400,1] = slice[
            limit_indices=(400, 2)
            start_indices=(0, 1)
            strides=None
          ] ius
          iva:f64[400] = squeeze[dimensions=(1,)] iuz
          ivb:f64[] = convert_element_type[new_dtype=float64 weak_type=False] iuu
          ivc:f64[400] = sub iva ivb
          ivd:f64[400,1] = slice[
            limit_indices=(400, 3)
            start_indices=(0, 2)
            strides=None
          ] ius
          ive:f64[400] = squeeze[dimensions=(1,)] ivd
          ivf:f64[] = select_n True 0.08 -0.08
          ivg:f64[400] = integer_pow[y=2] iuy
          ivh:f64[400] = integer_pow[y=2] ivc
          ivi:f64[400] = add ivg ivh
          ivj:f64[400] = integer_pow[y=2] ive
          ivk:f64[400] = add ivi ivj
          ivl:f64[400] = sqrt ivk
          ivm:f64[400] = integer_pow[y=2] ivl
          ivn:f64[400] = sub ivm 0.0064
          ivo:f64[400] = sqrt ivn
          ivp:f64[400] = integer_pow[y=2] ivc
          ivq:f64[400] = integer_pow[y=2] ive
          ivr:f64[400] = add ivp ivq
          ivs:f64[] = integer_pow[y=2] ivf
          ivt:f64[] = convert_element_type[new_dtype=float64 weak_type=False] ivs
          ivu:f64[400] = sub ivr ivt
          ivv:f64[400] = sqrt ivu
          ivw:f64[] = convert_element_type[new_dtype=float64 weak_type=False] ivf
          ivx:f64[400] = mul ive ivw
          ivy:f64[400] = mul ivc ivv
          ivz:f64[400] = add ivx ivy
          iwa:f64[] = convert_element_type[new_dtype=float64 weak_type=False] ivf
          iwb:f64[400] = mul ivc iwa
          iwc:f64[400] = mul ive ivv
          iwd:f64[400] = sub iwb iwc
          iwe:f64[400] = atan2 ivz iwd
          iwf:f64[400] = integer_pow[y=2] ivo
          iwg:f64[400] = sub 0.090738 iwf
          iwh:f64[] = abs 0.045369
          iwi:f64[] = mul 2.0 iwh
          iwj:f64[] = convert_element_type[new_dtype=float64 weak_type=False] iwi
          iwk:f64[400] = div iwg iwj
          iwl:f64[1] = slice[limit_indices=(3,) start_indices=(2,) strides=None] bot
          iwm:f64[] = squeeze[dimensions=(0,)] iwl
          iwn:f64[1] = slice[limit_indices=(3,) start_indices=(2,) strides=None] bou
          iwo:f64[] = squeeze[dimensions=(0,)] iwn
          iwp:f64[] = add 3.141592653589793 iwm
          iwq:f64[] = cos iwp
          iwr:f64[] = add 3.141592653589793 iwo
          iws:f64[] = cos iwr
          iwt:f64[400] = pjit[name=clip jaxpr=clip2] iwk iwq iws
          iwu:f64[400] = acos iwt
          iwv:f64[400] = sub 3.141592653589793 iwu
          iww:f64[400] = neg iwv
          iwx:f64[400] = sin iwe
          iwy:f64[400] = mul ivc iwx
          iwz:f64[400] = cos iwe
          ixa:f64[400] = mul ive iwz
          ixb:f64[400] = sub iwy ixa
          ixc:f64[400] = sin iww
          ixd:f64[400] = mul -0.213 ixc
          ixe:f64[400] = cos iww
          ixf:f64[400] = mul -0.213 ixe
          ixg:f64[400] = add -0.213 ixf
          ixh:f64[400] = mul ixd ixb
          ixi:f64[400] = mul ixg iuy
          ixj:f64[400] = add ixh ixi
          ixk:f64[400] = mul ixd iuy
          ixl:f64[400] = mul ixg ixb
          ixm:f64[400] = sub ixk ixl
          ixn:f64[400] = atan2 ixj ixm
          ixo:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] iwe
          ixp:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] ixn
          ixq:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] iww
          ixr:f64[400,3] = concatenate[dimension=1] ixo ixp ixq
          ixs:f64[400,3] = slice[
            limit_indices=(400, 12)
            start_indices=(0, 9)
            strides=None
          ] ior
          ixt:f64[] = select_n True 0.1881 -0.1881
          ixu:f64[] = select_n False 0.04675 -0.04675
          ixv:f64[400,1] = slice[
            limit_indices=(400, 1)
            start_indices=(0, 0)
            strides=None
          ] ixs
          ixw:f64[400] = squeeze[dimensions=(1,)] ixv
          ixx:f64[] = convert_element_type[new_dtype=float64 weak_type=False] ixt
          ixy:f64[400] = sub ixw ixx
          ixz:f64[400,1] = slice[
            limit_indices=(400, 2)
            start_indices=(0, 1)
            strides=None
          ] ixs
          iya:f64[400] = squeeze[dimensions=(1,)] ixz
          iyb:f64[] = convert_element_type[new_dtype=float64 weak_type=False] ixu
          iyc:f64[400] = sub iya iyb
          iyd:f64[400,1] = slice[
            limit_indices=(400, 3)
            start_indices=(0, 2)
            strides=None
          ] ixs
          iye:f64[400] = squeeze[dimensions=(1,)] iyd
          iyf:f64[] = select_n False 0.08 -0.08
          iyg:f64[400] = integer_pow[y=2] ixy
          iyh:f64[400] = integer_pow[y=2] iyc
          iyi:f64[400] = add iyg iyh
          iyj:f64[400] = integer_pow[y=2] iye
          iyk:f64[400] = add iyi iyj
          iyl:f64[400] = sqrt iyk
          iym:f64[400] = integer_pow[y=2] iyl
          iyn:f64[400] = sub iym 0.0064
          iyo:f64[400] = sqrt iyn
          iyp:f64[400] = integer_pow[y=2] iyc
          iyq:f64[400] = integer_pow[y=2] iye
          iyr:f64[400] = add iyp iyq
          iys:f64[] = integer_pow[y=2] iyf
          iyt:f64[] = convert_element_type[new_dtype=float64 weak_type=False] iys
          iyu:f64[400] = sub iyr iyt
          iyv:f64[400] = sqrt iyu
          iyw:f64[] = convert_element_type[new_dtype=float64 weak_type=False] iyf
          iyx:f64[400] = mul iye iyw
          iyy:f64[400] = mul iyc iyv
          iyz:f64[400] = add iyx iyy
          iza:f64[] = convert_element_type[new_dtype=float64 weak_type=False] iyf
          izb:f64[400] = mul iyc iza
          izc:f64[400] = mul iye iyv
          izd:f64[400] = sub izb izc
          ize:f64[400] = atan2 iyz izd
          izf:f64[400] = integer_pow[y=2] iyo
          izg:f64[400] = sub 0.090738 izf
          izh:f64[] = abs 0.045369
          izi:f64[] = mul 2.0 izh
          izj:f64[] = convert_element_type[new_dtype=float64 weak_type=False] izi
          izk:f64[400] = div izg izj
          izl:f64[1] = slice[limit_indices=(3,) start_indices=(2,) strides=None] bot
          izm:f64[] = squeeze[dimensions=(0,)] izl
          izn:f64[1] = slice[limit_indices=(3,) start_indices=(2,) strides=None] bou
          izo:f64[] = squeeze[dimensions=(0,)] izn
          izp:f64[] = add 3.141592653589793 izm
          izq:f64[] = cos izp
          izr:f64[] = add 3.141592653589793 izo
          izs:f64[] = cos izr
          izt:f64[400] = pjit[name=clip jaxpr=clip2] izk izq izs
          izu:f64[400] = acos izt
          izv:f64[400] = sub 3.141592653589793 izu
          izw:f64[400] = neg izv
          izx:f64[400] = sin ize
          izy:f64[400] = mul iyc izx
          izz:f64[400] = cos ize
          jaa:f64[400] = mul iye izz
          jab:f64[400] = sub izy jaa
          jac:f64[400] = sin izw
          jad:f64[400] = mul -0.213 jac
          jae:f64[400] = cos izw
          jaf:f64[400] = mul -0.213 jae
          jag:f64[400] = add -0.213 jaf
          jah:f64[400] = mul jad jab
          jai:f64[400] = mul jag ixy
          jaj:f64[400] = add jah jai
          jak:f64[400] = mul jad ixy
          jal:f64[400] = mul jag jab
          jam:f64[400] = sub jak jal
          jan:f64[400] = atan2 jaj jam
          jao:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] ize
          jap:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] jan
          jaq:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] izw
          jar:f64[400,3] = concatenate[dimension=1] jao jap jaq
          jas:f64[400,12] = concatenate[dimension=1] irr iur ixr jar
          jat:f64[1,3] = reshape[dimensions=None new_sizes=(1, 3)] bou
          jau:f64[3] = squeeze[dimensions=(0,)] jat
          jav:f64[4,3] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(4, 3)
          ] jau
          jaw:f64[12] = reshape[dimensions=None new_sizes=(12,)] jav
          jax:f64[1,3] = reshape[dimensions=None new_sizes=(1, 3)] bot
          jay:f64[3] = squeeze[dimensions=(0,)] jax
          jaz:f64[4,3] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(4, 3)
          ] jay
          jba:f64[12] = reshape[dimensions=None new_sizes=(12,)] jaz
          jbb:f64[400,12] = pjit[
            name=clip
            jaxpr={ lambda ; jbc:f64[400,12] jbd:f64[12] jbe:f64[12]. let
                jbf:f64[1,12] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 12)
                ] jbd
                jbg:f64[400,12] = max jbf jbc
                jbh:f64[1,12] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 12)
                ] jbe
                jbi:f64[400,12] = min jbh jbg
              in (jbi,) }
          ] jas jaw jba
          jbj:f64[12] = broadcast_in_dim[broadcast_dimensions=() shape=(12,)] 0.0
          jbk:i64[1,3] = reshape[dimensions=None new_sizes=(1, 3)] bpi
          jbl:i64[3] = squeeze[dimensions=(0,)] jbk
          jbm:i64[4,3] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(4, 3)
          ] jbl
          jbn:i64[12] = reshape[dimensions=None new_sizes=(12,)] jbm
          jbo:f64[12] = convert_element_type[new_dtype=float64 weak_type=True] jbn
          jbp:f64[12] = mul jbo 1.4
          jbq:f64[1,3] = reshape[dimensions=None new_sizes=(1, 3)] bpj
          jbr:f64[3] = squeeze[dimensions=(0,)] jbq
          jbs:f64[4,3] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(4, 3)
          ] jbr
          jbt:f64[12] = reshape[dimensions=None new_sizes=(12,)] jbs
          jbu:f64[400,12] = cond[
            branches=(
              { lambda ; jbv:f64[12] jbw:f64[12] jbx:f64[400,36] jby:f64[400,12]
                  jbz:f64[12] jca:f64[12] jcb:f64[12]. let
                  jcc:f64[400,12] = broadcast_in_dim[
                    broadcast_dimensions=(1,)
                    shape=(400, 12)
                  ] jbw
                in (jcc,) }
              { lambda ; jcd:f64[12] jce:f64[12] jcf:f64[400,36] jcg:f64[400,12]
                  jch:f64[12] jci:f64[12] jcj:f64[12]. let
                  jck:f64[400,12] = slice[
                    limit_indices=(400, 16)
                    start_indices=(0, 4)
                    strides=None
                  ] jcf
                  jcl:f64[400,12] = slice[
                    limit_indices=(400, 34)
                    start_indices=(0, 22)
                    strides=None
                  ] jcf
                  jcm:f64[400,12] = sub jcg jck
                  jcn:f64[12] = convert_element_type[
                    new_dtype=float64
                    weak_type=False
                  ] jci
                  jco:f64[1,12] = broadcast_in_dim[
                    broadcast_dimensions=(1,)
                    shape=(1, 12)
                  ] jcn
                  jcp:f64[400,12] = mul jco jcm
                  jcq:f64[1,12] = broadcast_in_dim[
                    broadcast_dimensions=(1,)
                    shape=(1, 12)
                  ] jch
                  jcr:f64[400,12] = sub jcq jcl
                  jcs:f64[1,12] = broadcast_in_dim[
                    broadcast_dimensions=(1,)
                    shape=(1, 12)
                  ] jcj
                  jct:f64[400,12] = mul jcs jcr
                  jcu:f64[400,12] = add jcp jct
                  jcv:f64[400,12] = sub jcg jck
                  jcw:bool[400,12] = ne jcv 0.0
                  jcx:f64[400,12] = sub jcg jck
                  jcy:f64[400,12] = pjit[name=_where jaxpr=_where1] jcw jcx 1
                  jcz:f64[1,12] = broadcast_in_dim[
                    broadcast_dimensions=(1,)
                    shape=(1, 12)
                  ] jcd
                  jda:bool[400,12] = gt jcu jcz
                  jdb:f64[1,12] = broadcast_in_dim[
                    broadcast_dimensions=(1,)
                    shape=(1, 12)
                  ] jch
                  jdc:f64[400,12] = sub jdb jcl
                  jdd:f64[1,12] = broadcast_in_dim[
                    broadcast_dimensions=(1,)
                    shape=(1, 12)
                  ] jcj
                  jde:f64[400,12] = mul jdd jdc
                  jdf:f64[1,12] = broadcast_in_dim[
                    broadcast_dimensions=(1,)
                    shape=(1, 12)
                  ] jcd
                  jdg:f64[400,12] = sub jdf jde
                  jdh:f64[400,12] = div jdg jcy
                  jdi:f64[400,12] = pjit[name=_where jaxpr=_where2] jda jdh jci
                  jdj:f64[12] = neg jcd
                  jdk:f64[1,12] = broadcast_in_dim[
                    broadcast_dimensions=(1,)
                    shape=(1, 12)
                  ] jdj
                  jdl:bool[400,12] = lt jcu jdk
                  jdm:f64[12] = neg jcd
                  jdn:f64[1,12] = broadcast_in_dim[
                    broadcast_dimensions=(1,)
                    shape=(1, 12)
                  ] jch
                  jdo:f64[400,12] = sub jdn jcl
                  jdp:f64[1,12] = broadcast_in_dim[
                    broadcast_dimensions=(1,)
                    shape=(1, 12)
                  ] jcj
                  jdq:f64[400,12] = mul jdp jdo
                  jdr:f64[1,12] = broadcast_in_dim[
                    broadcast_dimensions=(1,)
                    shape=(1, 12)
                  ] jdm
                  jds:f64[400,12] = sub jdr jdq
                  jdt:f64[400,12] = div jds jcy
                  jdu:f64[400,12] = pjit[name=_where jaxpr=_where3] jdl jdt jdi
                in (jdu,) }
            )
            linear=(False, False, False, False, False, False, False)
          ] 0 box jbp hos jbb jbj jbp jbt
          jdv:f64[400,12] = slice[
            limit_indices=(400, 16)
            start_indices=(0, 4)
            strides=None
          ] hos
          jdw:f64[400,12] = slice[
            limit_indices=(400, 34)
            start_indices=(0, 22)
            strides=None
          ] hos
          jdx:f64[400,12] = sub jbb jdv
          jdy:f64[400,12] = convert_element_type[
            new_dtype=float64
            weak_type=False
          ] jbu
          jdz:f64[400,12] = mul jdy jdx
          jea:f64[1,12] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 12)
          ] jbj
          jeb:f64[400,12] = sub jea jdw
          jec:f64[1,12] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 12)
          ] jbt
          jed:f64[400,12] = mul jec jeb
          jee:f64[400,12] = add jdz jed
          jef:f64[400,1] = slice[
            limit_indices=(400, 17)
            start_indices=(0, 16)
            strides=None
          ] hnc
          jeg:f64[400] = squeeze[dimensions=(1,)] jef
          jeh:f64[400,1] = slice[
            limit_indices=(400, 22)
            start_indices=(0, 21)
            strides=None
          ] hnc
          jei:f64[400] = squeeze[dimensions=(1,)] jeh
          jej:f64[400] = integer_pow[y=2] jei
          jek:f64[400] = neg jej
          jel:f64[400] = div jek 0.2
          jem:f64[400] = exp jel
          jen:f64[400,4] = slice[
            limit_indices=(400, 4)
            start_indices=(0, 0)
            strides=None
          ] hnc
          jeo:f64[400,1] = slice[
            limit_indices=(400, 3)
            start_indices=(0, 2)
            strides=None
          ] jen
          jep:f64[400] = squeeze[dimensions=(1,)] jeo
          jeq:f64[400,1] = slice[
            limit_indices=(400, 4)
            start_indices=(0, 3)
            strides=None
          ] jen
          jer:f64[400] = squeeze[dimensions=(1,)] jeq
          jes:f64[400] = mul jep jer
          jet:f64[400,1] = slice[
            limit_indices=(400, 1)
            start_indices=(0, 0)
            strides=None
          ] jen
          jeu:f64[400] = squeeze[dimensions=(1,)] jet
          jev:f64[400,1] = slice[
            limit_indices=(400, 2)
            start_indices=(0, 1)
            strides=None
          ] jen
          jew:f64[400] = squeeze[dimensions=(1,)] jev
          jex:f64[400] = mul jeu jew
          jey:f64[400] = add jes jex
          jez:f64[400,1] = slice[
            limit_indices=(400, 2)
            start_indices=(0, 1)
            strides=None
          ] jen
          jfa:f64[400] = squeeze[dimensions=(1,)] jez
          jfb:f64[400,1] = slice[
            limit_indices=(400, 2)
            start_indices=(0, 1)
            strides=None
          ] jen
          jfc:f64[400] = squeeze[dimensions=(1,)] jfb
          jfd:f64[400] = mul jfa jfc
          jfe:f64[400,1] = slice[
            limit_indices=(400, 3)
            start_indices=(0, 2)
            strides=None
          ] jen
          jff:f64[400] = squeeze[dimensions=(1,)] jfe
          jfg:f64[400,1] = slice[
            limit_indices=(400, 3)
            start_indices=(0, 2)
            strides=None
          ] jen
          jfh:f64[400] = squeeze[dimensions=(1,)] jfg
          jfi:f64[400] = mul jff jfh
          jfj:f64[400] = add jfd jfi
          jfk:f64[400] = sub 0.5 jfj
          jfl:f64[400] = atan2 jey jfk
          jfm:f64[400,1] = slice[
            limit_indices=(400, 2)
            start_indices=(0, 1)
            strides=None
          ] jen
          jfn:f64[400] = squeeze[dimensions=(1,)] jfm
          jfo:f64[400,1] = slice[
            limit_indices=(400, 4)
            start_indices=(0, 3)
            strides=None
          ] jen
          jfp:f64[400] = squeeze[dimensions=(1,)] jfo
          jfq:f64[400] = mul jfn jfp
          jfr:f64[400,1] = slice[
            limit_indices=(400, 1)
            start_indices=(0, 0)
            strides=None
          ] jen
          jfs:f64[400] = squeeze[dimensions=(1,)] jfr
          jft:f64[400,1] = slice[
            limit_indices=(400, 3)
            start_indices=(0, 2)
            strides=None
          ] jen
          jfu:f64[400] = squeeze[dimensions=(1,)] jft
          jfv:f64[400] = mul jfs jfu
          jfw:f64[400] = sub jfq jfv
          jfx:f64[400] = mul -2.0 jfw
          jfy:f64[400] = pjit[name=clip jaxpr=clip3] jfx -1.0 1.0
          jfz:f64[400] = custom_jvp_call[
            call_jaxpr={ lambda ; jga:f64[400]. let
                jgb:f64[400] = asin jga
              in (jgb,) }
            jvp_jaxpr_thunk=<function _memoize.<locals>.memoized at 0x7d83782973a0>
            num_consts=0
            symbolic_zeros=False
          ] jfy
          jgc:f64[400,1] = slice[
            limit_indices=(400, 2)
            start_indices=(0, 1)
            strides=None
          ] jen
          jgd:f64[400] = squeeze[dimensions=(1,)] jgc
          jge:f64[400,1] = slice[
            limit_indices=(400, 3)
            start_indices=(0, 2)
            strides=None
          ] jen
          jgf:f64[400] = squeeze[dimensions=(1,)] jge
          jgg:f64[400] = mul jgd jgf
          jgh:f64[400,1] = slice[
            limit_indices=(400, 1)
            start_indices=(0, 0)
            strides=None
          ] jen
          jgi:f64[400] = squeeze[dimensions=(1,)] jgh
          jgj:f64[400,1] = slice[
            limit_indices=(400, 4)
            start_indices=(0, 3)
            strides=None
          ] jen
          jgk:f64[400] = squeeze[dimensions=(1,)] jgj
          jgl:f64[400] = mul jgi jgk
          jgm:f64[400] = add jgg jgl
          jgn:f64[400,1] = slice[
            limit_indices=(400, 3)
            start_indices=(0, 2)
            strides=None
          ] jen
          jgo:f64[400] = squeeze[dimensions=(1,)] jgn
          jgp:f64[400,1] = slice[
            limit_indices=(400, 3)
            start_indices=(0, 2)
            strides=None
          ] jen
          jgq:f64[400] = squeeze[dimensions=(1,)] jgp
          jgr:f64[400] = mul jgo jgq
          jgs:f64[400,1] = slice[
            limit_indices=(400, 4)
            start_indices=(0, 3)
            strides=None
          ] jen
          jgt:f64[400] = squeeze[dimensions=(1,)] jgs
          jgu:f64[400,1] = slice[
            limit_indices=(400, 4)
            start_indices=(0, 3)
            strides=None
          ] jen
          jgv:f64[400] = squeeze[dimensions=(1,)] jgu
          jgw:f64[400] = mul jgt jgv
          jgx:f64[400] = add jgr jgw
          jgy:f64[400] = sub 0.5 jgx
          jgz:f64[400] = atan2 jgm jgy
          jha:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] jfl
          jhb:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] jfz
          jhc:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] jgz
          jhd:f64[400,3] = concatenate[dimension=1] jha jhb jhc
          jhe:f64[400,1] = slice[
            limit_indices=(400, 1)
            start_indices=(0, 0)
            strides=(1, 1)
          ] jhd
          jhf:f64[400] = squeeze[dimensions=(1,)] jhe
          jhg:f64[400,1] = slice[
            limit_indices=(400, 2)
            start_indices=(0, 1)
            strides=(1, 1)
          ] jhd
          jhh:f64[400] = squeeze[dimensions=(1,)] jhg
          jhi:f64[400,1] = slice[
            limit_indices=(400, 3)
            start_indices=(0, 2)
            strides=(1, 1)
          ] jhd
          jhj:f64[400] = squeeze[dimensions=(1,)] jhi
          jhk:f64[400,4] = slice[
            limit_indices=(400, 4)
            start_indices=(0, 0)
            strides=None
          ] hnp
          jhl:f64[400,1] = slice[
            limit_indices=(400, 3)
            start_indices=(0, 2)
            strides=None
          ] jhk
          jhm:f64[400] = squeeze[dimensions=(1,)] jhl
          jhn:f64[400,1] = slice[
            limit_indices=(400, 4)
            start_indices=(0, 3)
            strides=None
          ] jhk
          jho:f64[400] = squeeze[dimensions=(1,)] jhn
          jhp:f64[400] = mul jhm jho
          jhq:f64[400,1] = slice[
            limit_indices=(400, 1)
            start_indices=(0, 0)
            strides=None
          ] jhk
          jhr:f64[400] = squeeze[dimensions=(1,)] jhq
          jhs:f64[400,1] = slice[
            limit_indices=(400, 2)
            start_indices=(0, 1)
            strides=None
          ] jhk
          jht:f64[400] = squeeze[dimensions=(1,)] jhs
          jhu:f64[400] = mul jhr jht
          jhv:f64[400] = add jhp jhu
          jhw:f64[400,1] = slice[
            limit_indices=(400, 2)
            start_indices=(0, 1)
            strides=None
          ] jhk
          jhx:f64[400] = squeeze[dimensions=(1,)] jhw
          jhy:f64[400,1] = slice[
            limit_indices=(400, 2)
            start_indices=(0, 1)
            strides=None
          ] jhk
          jhz:f64[400] = squeeze[dimensions=(1,)] jhy
          jia:f64[400] = mul jhx jhz
          jib:f64[400,1] = slice[
            limit_indices=(400, 3)
            start_indices=(0, 2)
            strides=None
          ] jhk
          jic:f64[400] = squeeze[dimensions=(1,)] jib
          jid:f64[400,1] = slice[
            limit_indices=(400, 3)
            start_indices=(0, 2)
            strides=None
          ] jhk
          jie:f64[400] = squeeze[dimensions=(1,)] jid
          jif:f64[400] = mul jic jie
          jig:f64[400] = add jia jif
          jih:f64[400] = sub 0.5 jig
          jii:f64[400] = atan2 jhv jih
          jij:f64[400,1] = slice[
            limit_indices=(400, 2)
            start_indices=(0, 1)
            strides=None
          ] jhk
          jik:f64[400] = squeeze[dimensions=(1,)] jij
          jil:f64[400,1] = slice[
            limit_indices=(400, 4)
            start_indices=(0, 3)
            strides=None
          ] jhk
          jim:f64[400] = squeeze[dimensions=(1,)] jil
          jin:f64[400] = mul jik jim
          jio:f64[400,1] = slice[
            limit_indices=(400, 1)
            start_indices=(0, 0)
            strides=None
          ] jhk
          jip:f64[400] = squeeze[dimensions=(1,)] jio
          jiq:f64[400,1] = slice[
            limit_indices=(400, 3)
            start_indices=(0, 2)
            strides=None
          ] jhk
          jir:f64[400] = squeeze[dimensions=(1,)] jiq
          jis:f64[400] = mul jip jir
          jit:f64[400] = sub jin jis
          jiu:f64[400] = mul -2.0 jit
          jiv:f64[400] = pjit[name=clip jaxpr=clip3] jiu -1.0 1.0
          jiw:f64[400] = custom_jvp_call[
            call_jaxpr={ lambda ; jix:f64[400]. let
                jiy:f64[400] = asin jix
              in (jiy,) }
            jvp_jaxpr_thunk=<function _memoize.<locals>.memoized at 0x7d839a29c9d0>
            num_consts=0
            symbolic_zeros=False
          ] jiv
          jiz:f64[400,1] = slice[
            limit_indices=(400, 2)
            start_indices=(0, 1)
            strides=None
          ] jhk
          jja:f64[400] = squeeze[dimensions=(1,)] jiz
          jjb:f64[400,1] = slice[
            limit_indices=(400, 3)
            start_indices=(0, 2)
            strides=None
          ] jhk
          jjc:f64[400] = squeeze[dimensions=(1,)] jjb
          jjd:f64[400] = mul jja jjc
          jje:f64[400,1] = slice[
            limit_indices=(400, 1)
            start_indices=(0, 0)
            strides=None
          ] jhk
          jjf:f64[400] = squeeze[dimensions=(1,)] jje
          jjg:f64[400,1] = slice[
            limit_indices=(400, 4)
            start_indices=(0, 3)
            strides=None
          ] jhk
          jjh:f64[400] = squeeze[dimensions=(1,)] jjg
          jji:f64[400] = mul jjf jjh
          jjj:f64[400] = add jjd jji
          jjk:f64[400,1] = slice[
            limit_indices=(400, 3)
            start_indices=(0, 2)
            strides=None
          ] jhk
          jjl:f64[400] = squeeze[dimensions=(1,)] jjk
          jjm:f64[400,1] = slice[
            limit_indices=(400, 3)
            start_indices=(0, 2)
            strides=None
          ] jhk
          jjn:f64[400] = squeeze[dimensions=(1,)] jjm
          jjo:f64[400] = mul jjl jjn
          jjp:f64[400,1] = slice[
            limit_indices=(400, 4)
            start_indices=(0, 3)
            strides=None
          ] jhk
          jjq:f64[400] = squeeze[dimensions=(1,)] jjp
          jjr:f64[400,1] = slice[
            limit_indices=(400, 4)
            start_indices=(0, 3)
            strides=None
          ] jhk
          jjs:f64[400] = squeeze[dimensions=(1,)] jjr
          jjt:f64[400] = mul jjq jjs
          jju:f64[400] = add jjo jjt
          jjv:f64[400] = sub 0.5 jju
          jjw:f64[400] = atan2 jjj jjv
          jjx:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] jii
          jjy:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] jiw
          jjz:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] jjw
          jka:f64[400,3] = concatenate[dimension=1] jjx jjy jjz
          jkb:f64[400,1] = slice[
            limit_indices=(400, 1)
            start_indices=(0, 0)
            strides=(1, 1)
          ] jka
          jkc:f64[400] = squeeze[dimensions=(1,)] jkb
          jkd:f64[400,1] = slice[
            limit_indices=(400, 2)
            start_indices=(0, 1)
            strides=(1, 1)
          ] jka
          jke:f64[400] = squeeze[dimensions=(1,)] jkd
          jkf:f64[400] = integer_pow[y=2] jhh
          jkg:f64[400] = neg jkf
          jkh:f64[400] = div jkg 0.25
          jki:f64[400] = exp jkh
          jkj:f64[400] = integer_pow[y=2] jhf
          jkk:f64[400] = neg jkj
          jkl:f64[400] = div jkk 0.25
          jkm:f64[400] = exp jkl
          jkn:f64[400] = integer_pow[y=2] jhj
          jko:f64[400] = neg jkn
          jkp:f64[400] = div jko 0.07
          jkq:f64[400] = exp jkp
          jkr:f64[400,1] = slice[
            limit_indices=(400, 18)
            start_indices=(0, 17)
            strides=None
          ] hnc
          jks:f64[400] = squeeze[dimensions=(1,)] jkr
          jkt:f64[400] = integer_pow[y=2] jks
          jku:f64[400] = neg jkt
          jkv:f64[400] = div jku 0.01
          jkw:f64[400] = exp jkv
          jkx:f64[400,1] = slice[
            limit_indices=(400, 19)
            start_indices=(0, 18)
            strides=None
          ] hnc
          jky:f64[400] = squeeze[dimensions=(1,)] jkx
          jkz:f64[400,1] = slice[
            limit_indices=(400, 19)
            start_indices=(0, 18)
            strides=None
          ] hnp
          jla:f64[400] = squeeze[dimensions=(1,)] jkz
          jlb:f64[400] = sub jky jla
          jlc:f64[400] = integer_pow[y=2] jlb
          jld:f64[400] = neg jlc
          jle:f64[400] = div jld 0.02
          jlf:f64[400] = exp jle
          jlg:f64[400,1] = slice[
            limit_indices=(400, 20)
            start_indices=(0, 19)
            strides=None
          ] hnc
          jlh:f64[400] = squeeze[dimensions=(1,)] jlg
          jli:f64[400] = integer_pow[y=2] jlh
          jlj:f64[400] = neg jli
          jlk:f64[400] = div jlj 0.2
          jll:f64[400,1] = slice[
            limit_indices=(400, 21)
            start_indices=(0, 20)
            strides=None
          ] hnc
          jlm:f64[400] = squeeze[dimensions=(1,)] jll
          jln:f64[400] = integer_pow[y=2] jlm
          jlo:f64[400] = div jln 0.2
          jlp:f64[400] = sub jlk jlo
          jlq:f64[400] = exp jlp
          jlr:f64[400] = sub jhf jkc
          jls:f64[400] = integer_pow[y=2] jlr
          jlt:f64[400] = neg jls
          jlu:f64[400] = div jlt 0.001
          jlv:f64[400] = exp jlu
          jlw:f64[400] = sub jhh jke
          jlx:f64[400] = integer_pow[y=2] jlw
          jly:f64[400] = neg jlx
          jlz:f64[400] = div jly 0.005
          jma:f64[400] = exp jlz
          jmb:f64[400] = add jlv jma
          jmc:f64[400] = div jmb 2.0
          jmd:f64[400,12] = slice[
            limit_indices=(400, 16)
            start_indices=(0, 4)
            strides=None
          ] hnc
          jme:f64[1,3] = reshape[dimensions=None new_sizes=(1, 3)] bou
          jmf:f64[3] = squeeze[dimensions=(0,)] jme
          jmg:f64[4,3] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(4, 3)
          ] jmf
          jmh:f64[12] = reshape[dimensions=None new_sizes=(12,)] jmg
          jmi:f64[1,3] = reshape[dimensions=None new_sizes=(1, 3)] bot
          jmj:f64[3] = squeeze[dimensions=(0,)] jmi
          jmk:f64[4,3] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(4, 3)
          ] jmj
          jml:f64[12] = reshape[dimensions=None new_sizes=(12,)] jmk
          jmm:f64[1,12] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 12)
          ] jmh
          jmn:f64[400,12] = sub jmd jmm
          jmo:f64[400,12] = mul -10.0 jmn
          jmp:f64[400,12] = exp jmo
          jmq:f64[400,12] = add 1.0 jmp
          jmr:f64[400,12] = div 1.0 jmq
          jms:f64[1,12] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 12)
          ] jml
          jmt:f64[400,12] = sub jmd jms
          jmu:f64[400,12] = mul 10.0 jmt
          jmv:f64[400,12] = exp jmu
          jmw:f64[400,12] = add 1.0 jmv
          jmx:f64[400,12] = div 1.0 jmw
          jmy:f64[400,12] = add jmr jmx
          jmz:f64[400,12] = sub jmy 1.0
          jna:f64[400] = reduce_sum[axes=(1,)] jmz
          jnb:f64[400] = div jna 12.0
          jnc:f64[12] = mul -0.9 box
          jnd:f64[12] = mul 0.9 box
          jne:f64[1,12] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 12)
          ] jnc
          jnf:f64[400,12] = sub jee jne
          jng:f64[400,12] = mul -0.2 jnf
          jnh:f64[400,12] = exp jng
          jni:f64[400,12] = add 1.0 jnh
          jnj:f64[400,12] = div 1.0 jni
          jnk:f64[1,12] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 12)
          ] jnd
          jnl:f64[400,12] = sub jee jnk
          jnm:f64[400,12] = mul 0.2 jnl
          jnn:f64[400,12] = exp jnm
          jno:f64[400,12] = add 1.0 jnn
          jnp:f64[400,12] = div 1.0 jno
          jnq:f64[400,12] = add jnj jnp
          jnr:f64[400,12] = sub jnq 1.0
          jns:f64[400] = reduce_sum[axes=(1,)] jnr
          jnt:f64[400] = div jns 12.0
          jnu:f64[400,12] = slice[
            limit_indices=(400, 34)
            start_indices=(0, 22)
            strides=None
          ] hnc
          jnv:f64[400,12] = slice[
            limit_indices=(400, 34)
            start_indices=(0, 22)
            strides=None
          ] hnp
          jnw:f64[400,12] = sub jnu jnv
          jnx:f64[400,12] = integer_pow[y=2] jnw
          jny:f64[400] = reduce_sum[axes=(1,)] jnx
          jnz:f64[400] = neg jny
          joa:f64[400] = div jnz 4.0
          job:f64[400] = exp joa
          joc:f64[400,9] = integer_pow[y=2] bsv
          jod:f64[400,9] = neg joc
          joe:f64[400,9] = div jod 0.25
          jof:f64[400,9] = exp joe
          jog:f64[400] = reduce_sum[axes=(1,)] jof
          joh:f64[400] = div jog 9.0
          joi:f64[400,12] = slice[
            limit_indices=(400, 16)
            start_indices=(0, 4)
            strides=None
          ] hnc
          joj:f64[1,12] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 12)
          ] bpk
          jok:f64[400,12] = sub joi joj
          jol:f64[400,12] = integer_pow[y=2] jok
          jom:f64[400,12] = neg jol
          jon:f64[400,12] = div jom 0.05
          joo:f64[400,12] = exp jon
          jop:f64[400] = reduce_sum[axes=(1,)] joo
          joq:f64[400] = div jop 12.0
          jor:f64[400,12] = slice[
            limit_indices=(400, 34)
            start_indices=(0, 22)
            strides=None
          ] hnc
          jos:f64[400,12] = mul jee jor
          jot:f64[400,12] = abs jos
          jou:f64[400] = reduce_sum[axes=(1,)] jot
          jov:f64[400] = integer_pow[y=2] jou
          jow:f64[400] = neg jov
          jox:f64[400] = div jow 450.0
          joy:f64[400] = exp jox
          joz:f64[400,12] = slice[
            limit_indices=(400, 16)
            start_indices=(0, 4)
            strides=None
          ] hnc
          jpa:f64[400,3] = slice[
            limit_indices=(400, 3)
            start_indices=(0, 0)
            strides=None
          ] joz
          jpb:i64[] = select_n True 1 -1
          jpc:f64[] = convert_element_type[new_dtype=float64 weak_type=True] jpb
          jpd:f64[] = mul jpc 0.08
          jpe:f64[400,1] = slice[
            limit_indices=(400, 1)
            start_indices=(0, 0)
            strides=None
          ] jpa
          jpf:f64[400] = squeeze[dimensions=(1,)] jpe
          jpg:f64[400] = sin jpf
          jph:f64[400,1] = slice[
            limit_indices=(400, 2)
            start_indices=(0, 1)
            strides=None
          ] jpa
          jpi:f64[400] = squeeze[dimensions=(1,)] jph
          jpj:f64[400] = sin jpi
          jpk:f64[400,1] = slice[
            limit_indices=(400, 3)
            start_indices=(0, 2)
            strides=None
          ] jpa
          jpl:f64[400] = squeeze[dimensions=(1,)] jpk
          jpm:f64[400] = sin jpl
          jpn:f64[400,1] = slice[
            limit_indices=(400, 1)
            start_indices=(0, 0)
            strides=None
          ] jpa
          jpo:f64[400] = squeeze[dimensions=(1,)] jpn
          jpp:f64[400] = cos jpo
          jpq:f64[400,1] = slice[
            limit_indices=(400, 2)
            start_indices=(0, 1)
            strides=None
          ] jpa
          jpr:f64[400] = squeeze[dimensions=(1,)] jpq
          jps:f64[400] = cos jpr
          jpt:f64[400,1] = slice[
            limit_indices=(400, 3)
            start_indices=(0, 2)
            strides=None
          ] jpa
          jpu:f64[400] = squeeze[dimensions=(1,)] jpt
          jpv:f64[400] = cos jpu
          jpw:f64[400] = mul jps jpv
          jpx:f64[400] = mul jpj jpm
          jpy:f64[400] = sub jpw jpx
          jpz:f64[400] = mul jpj jpv
          jqa:f64[400] = mul jps jpm
          jqb:f64[400] = add jpz jqa
          jqc:f64[400] = mul -0.213 jqb
          jqd:f64[400] = mul -0.213 jpj
          jqe:f64[400] = add jqc jqd
          jqf:f64[400] = mul 0.213 jpg
          jqg:f64[400] = mul jqf jpy
          jqh:f64[] = convert_element_type[new_dtype=float64 weak_type=False] jpd
          jqi:f64[400] = mul jqh jpp
          jqj:f64[400] = add jqg jqi
          jqk:f64[400] = mul -0.213 jps
          jql:f64[400] = mul jqk jpg
          jqm:f64[400] = sub jqj jql
          jqn:f64[400] = mul -0.213 jpp
          jqo:f64[400] = mul jqn jpy
          jqp:f64[] = convert_element_type[new_dtype=float64 weak_type=False] jpd
          jqq:f64[400] = mul jqp jpg
          jqr:f64[400] = add jqo jqq
          jqs:f64[400] = mul -0.213 jpp
          jqt:f64[400] = mul jqs jps
          jqu:f64[400] = add jqr jqt
          jqv:f64[] = select_n True -0.1881 0.1881
          jqw:f64[] = convert_element_type[new_dtype=float64 weak_type=False] jqv
          jqx:f64[400] = add jqe jqw
          jqy:f64[] = select_n True 0.04675 -0.04675
          jqz:f64[] = convert_element_type[new_dtype=float64 weak_type=False] jqy
          jra:f64[400] = add jqm jqz
          jrb:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] jqx
          jrc:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] jra
          jrd:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] jqu
          jre:f64[400,3] = concatenate[dimension=1] jrb jrc jrd
          jrf:f64[400,3] = slice[
            limit_indices=(400, 6)
            start_indices=(0, 3)
            strides=None
          ] joz
          jrg:i64[] = select_n False 1 -1
          jrh:f64[] = convert_element_type[new_dtype=float64 weak_type=True] jrg
          jri:f64[] = mul jrh 0.08
          jrj:f64[400,1] = slice[
            limit_indices=(400, 1)
            start_indices=(0, 0)
            strides=None
          ] jrf
          jrk:f64[400] = squeeze[dimensions=(1,)] jrj
          jrl:f64[400] = sin jrk
          jrm:f64[400,1] = slice[
            limit_indices=(400, 2)
            start_indices=(0, 1)
            strides=None
          ] jrf
          jrn:f64[400] = squeeze[dimensions=(1,)] jrm
          jro:f64[400] = sin jrn
          jrp:f64[400,1] = slice[
            limit_indices=(400, 3)
            start_indices=(0, 2)
            strides=None
          ] jrf
          jrq:f64[400] = squeeze[dimensions=(1,)] jrp
          jrr:f64[400] = sin jrq
          jrs:f64[400,1] = slice[
            limit_indices=(400, 1)
            start_indices=(0, 0)
            strides=None
          ] jrf
          jrt:f64[400] = squeeze[dimensions=(1,)] jrs
          jru:f64[400] = cos jrt
          jrv:f64[400,1] = slice[
            limit_indices=(400, 2)
            start_indices=(0, 1)
            strides=None
          ] jrf
          jrw:f64[400] = squeeze[dimensions=(1,)] jrv
          jrx:f64[400] = cos jrw
          jry:f64[400,1] = slice[
            limit_indices=(400, 3)
            start_indices=(0, 2)
            strides=None
          ] jrf
          jrz:f64[400] = squeeze[dimensions=(1,)] jry
          jsa:f64[400] = cos jrz
          jsb:f64[400] = mul jrx jsa
          jsc:f64[400] = mul jro jrr
          jsd:f64[400] = sub jsb jsc
          jse:f64[400] = mul jro jsa
          jsf:f64[400] = mul jrx jrr
          jsg:f64[400] = add jse jsf
          jsh:f64[400] = mul -0.213 jsg
          jsi:f64[400] = mul -0.213 jro
          jsj:f64[400] = add jsh jsi
          jsk:f64[400] = mul 0.213 jrl
          jsl:f64[400] = mul jsk jsd
          jsm:f64[] = convert_element_type[new_dtype=float64 weak_type=False] jri
          jsn:f64[400] = mul jsm jru
          jso:f64[400] = add jsl jsn
          jsp:f64[400] = mul -0.213 jrx
          jsq:f64[400] = mul jsp jrl
          jsr:f64[400] = sub jso jsq
          jss:f64[400] = mul -0.213 jru
          jst:f64[400] = mul jss jsd
          jsu:f64[] = convert_element_type[new_dtype=float64 weak_type=False] jri
          jsv:f64[400] = mul jsu jrl
          jsw:f64[400] = add jst jsv
          jsx:f64[400] = mul -0.213 jru
          jsy:f64[400] = mul jsx jrx
          jsz:f64[400] = add jsw jsy
          jta:f64[] = select_n True -0.1881 0.1881
          jtb:f64[] = convert_element_type[new_dtype=float64 weak_type=False] jta
          jtc:f64[400] = add jsj jtb
          jtd:f64[] = select_n False 0.04675 -0.04675
          jte:f64[] = convert_element_type[new_dtype=float64 weak_type=False] jtd
          jtf:f64[400] = add jsr jte
          jtg:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] jtc
          jth:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] jtf
          jti:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] jsz
          jtj:f64[400,3] = concatenate[dimension=1] jtg jth jti
          jtk:f64[400,3] = slice[
            limit_indices=(400, 9)
            start_indices=(0, 6)
            strides=None
          ] joz
          jtl:i64[] = select_n True 1 -1
          jtm:f64[] = convert_element_type[new_dtype=float64 weak_type=True] jtl
          jtn:f64[] = mul jtm 0.08
          jto:f64[400,1] = slice[
            limit_indices=(400, 1)
            start_indices=(0, 0)
            strides=None
          ] jtk
          jtp:f64[400] = squeeze[dimensions=(1,)] jto
          jtq:f64[400] = sin jtp
          jtr:f64[400,1] = slice[
            limit_indices=(400, 2)
            start_indices=(0, 1)
            strides=None
          ] jtk
          jts:f64[400] = squeeze[dimensions=(1,)] jtr
          jtt:f64[400] = sin jts
          jtu:f64[400,1] = slice[
            limit_indices=(400, 3)
            start_indices=(0, 2)
            strides=None
          ] jtk
          jtv:f64[400] = squeeze[dimensions=(1,)] jtu
          jtw:f64[400] = sin jtv
          jtx:f64[400,1] = slice[
            limit_indices=(400, 1)
            start_indices=(0, 0)
            strides=None
          ] jtk
          jty:f64[400] = squeeze[dimensions=(1,)] jtx
          jtz:f64[400] = cos jty
          jua:f64[400,1] = slice[
            limit_indices=(400, 2)
            start_indices=(0, 1)
            strides=None
          ] jtk
          jub:f64[400] = squeeze[dimensions=(1,)] jua
          juc:f64[400] = cos jub
          jud:f64[400,1] = slice[
            limit_indices=(400, 3)
            start_indices=(0, 2)
            strides=None
          ] jtk
          jue:f64[400] = squeeze[dimensions=(1,)] jud
          juf:f64[400] = cos jue
          jug:f64[400] = mul juc juf
          juh:f64[400] = mul jtt jtw
          jui:f64[400] = sub jug juh
          juj:f64[400] = mul jtt juf
          juk:f64[400] = mul juc jtw
          jul:f64[400] = add juj juk
          jum:f64[400] = mul -0.213 jul
          jun:f64[400] = mul -0.213 jtt
          juo:f64[400] = add jum jun
          jup:f64[400] = mul 0.213 jtq
          juq:f64[400] = mul jup jui
          jur:f64[] = convert_element_type[new_dtype=float64 weak_type=False] jtn
          jus:f64[400] = mul jur jtz
          jut:f64[400] = add juq jus
          juu:f64[400] = mul -0.213 juc
          juv:f64[400] = mul juu jtq
          juw:f64[400] = sub jut juv
          jux:f64[400] = mul -0.213 jtz
          juy:f64[400] = mul jux jui
          juz:f64[] = convert_element_type[new_dtype=float64 weak_type=False] jtn
          jva:f64[400] = mul juz jtq
          jvb:f64[400] = add juy jva
          jvc:f64[400] = mul -0.213 jtz
          jvd:f64[400] = mul jvc juc
          jve:f64[400] = add jvb jvd
          jvf:f64[] = select_n False -0.1881 0.1881
          jvg:f64[] = convert_element_type[new_dtype=float64 weak_type=False] jvf
          jvh:f64[400] = add juo jvg
          jvi:f64[] = select_n True 0.04675 -0.04675
          jvj:f64[] = convert_element_type[new_dtype=float64 weak_type=False] jvi
          jvk:f64[400] = add juw jvj
          jvl:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] jvh
          jvm:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] jvk
          jvn:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] jve
          jvo:f64[400,3] = concatenate[dimension=1] jvl jvm jvn
          jvp:f64[400,3] = slice[
            limit_indices=(400, 12)
            start_indices=(0, 9)
            strides=None
          ] joz
          jvq:i64[] = select_n False 1 -1
          jvr:f64[] = convert_element_type[new_dtype=float64 weak_type=True] jvq
          jvs:f64[] = mul jvr 0.08
          jvt:f64[400,1] = slice[
            limit_indices=(400, 1)
            start_indices=(0, 0)
            strides=None
          ] jvp
          jvu:f64[400] = squeeze[dimensions=(1,)] jvt
          jvv:f64[400] = sin jvu
          jvw:f64[400,1] = slice[
            limit_indices=(400, 2)
            start_indices=(0, 1)
            strides=None
          ] jvp
          jvx:f64[400] = squeeze[dimensions=(1,)] jvw
          jvy:f64[400] = sin jvx
          jvz:f64[400,1] = slice[
            limit_indices=(400, 3)
            start_indices=(0, 2)
            strides=None
          ] jvp
          jwa:f64[400] = squeeze[dimensions=(1,)] jvz
          jwb:f64[400] = sin jwa
          jwc:f64[400,1] = slice[
            limit_indices=(400, 1)
            start_indices=(0, 0)
            strides=None
          ] jvp
          jwd:f64[400] = squeeze[dimensions=(1,)] jwc
          jwe:f64[400] = cos jwd
          jwf:f64[400,1] = slice[
            limit_indices=(400, 2)
            start_indices=(0, 1)
            strides=None
          ] jvp
          jwg:f64[400] = squeeze[dimensions=(1,)] jwf
          jwh:f64[400] = cos jwg
          jwi:f64[400,1] = slice[
            limit_indices=(400, 3)
            start_indices=(0, 2)
            strides=None
          ] jvp
          jwj:f64[400] = squeeze[dimensions=(1,)] jwi
          jwk:f64[400] = cos jwj
          jwl:f64[400] = mul jwh jwk
          jwm:f64[400] = mul jvy jwb
          jwn:f64[400] = sub jwl jwm
          jwo:f64[400] = mul jvy jwk
          jwp:f64[400] = mul jwh jwb
          jwq:f64[400] = add jwo jwp
          jwr:f64[400] = mul -0.213 jwq
          jws:f64[400] = mul -0.213 jvy
          jwt:f64[400] = add jwr jws
          jwu:f64[400] = mul 0.213 jvv
          jwv:f64[400] = mul jwu jwn
          jww:f64[] = convert_element_type[new_dtype=float64 weak_type=False] jvs
          jwx:f64[400] = mul jww jwe
          jwy:f64[400] = add jwv jwx
          jwz:f64[400] = mul -0.213 jwh
          jxa:f64[400] = mul jwz jvv
          jxb:f64[400] = sub jwy jxa
          jxc:f64[400] = mul -0.213 jwe
          jxd:f64[400] = mul jxc jwn
          jxe:f64[] = convert_element_type[new_dtype=float64 weak_type=False] jvs
          jxf:f64[400] = mul jxe jvv
          jxg:f64[400] = add jxd jxf
          jxh:f64[400] = mul -0.213 jwe
          jxi:f64[400] = mul jxh jwh
          jxj:f64[400] = add jxg jxi
          jxk:f64[] = select_n False -0.1881 0.1881
          jxl:f64[] = convert_element_type[new_dtype=float64 weak_type=False] jxk
          jxm:f64[400] = add jwt jxl
          jxn:f64[] = select_n False 0.04675 -0.04675
          jxo:f64[] = convert_element_type[new_dtype=float64 weak_type=False] jxn
          jxp:f64[400] = add jxb jxo
          jxq:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] jxm
          jxr:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] jxp
          jxs:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] jxj
          jxt:f64[400,3] = concatenate[dimension=1] jxq jxr jxs
          jxu:f64[400,12] = concatenate[dimension=1] jre jtj jvo jxt
          jxv:bool[4] = lt bpl 0
          jxw:i64[4] = add bpl 12
          jxx:i64[4] = select_n jxv bpl jxw
          jxy:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] jxx
          jxz:i32[4,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(4, 1)
          ] jxy
          jya:f64[400,4] = gather[
            dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
            fill_value=None
            indices_are_sorted=False
            mode=GatherScatterMode.PROMISE_IN_BOUNDS
            slice_sizes=(400, 1)
            unique_indices=False
          ] jxu jxz
          jyb:bool[4] = lt bpl 0
          jyc:i64[4] = add bpl 12
          jyd:i64[4] = select_n jyb bpl jyc
          jye:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] jyd
          jyf:i32[4,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(4, 1)
          ] jye
          jyg:f64[400,4] = gather[
            dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
            fill_value=None
            indices_are_sorted=False
            mode=GatherScatterMode.PROMISE_IN_BOUNDS
            slice_sizes=(400, 1)
            unique_indices=False
          ] ior jyf
          jyh:f64[400,4] = sub jya jyg
          jyi:f64[400,4] = integer_pow[y=2] jyh
          jyj:f64[400,4] = neg jyi
          jyk:f64[400,4] = div jyj 0.002
          jyl:f64[400,4] = exp jyk
          jym:f64[400] = reduce_sum[axes=(1,)] jyl
          jyn:f64[400] = div jym 4.0
          jyo:f64[1,12] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 12)
          ] box
          jyp:bool[400,12] = gt jee jyo
          jyq:f64[1,12] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 12)
          ] box
          jyr:f64[400,12] = sub jee jyq
          jys:f64[400,12] = add jyr 1.0
          jyt:f64[400,12] = neg jys
          jyu:f64[1,12] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 12)
          ] box
          jyv:f64[400,12] = sub jee jyu
          jyw:f64[400,12] = exp jyv
          jyx:f64[400,12] = neg jyw
          jyy:f64[400,12] = select_n jyp jyx jyt
          jyz:f64[12] = neg box
          jza:f64[1,12] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 12)
          ] jyz
          jzb:bool[400,12] = lt jee jza
          jzc:f64[1,12] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 12)
          ] box
          jzd:f64[400,12] = add jee jzc
          jze:f64[400,12] = sub jzd 1.0
          jzf:f64[400,12] = neg jee
          jzg:f64[1,12] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 12)
          ] box
          jzh:f64[400,12] = sub jzf jzg
          jzi:f64[400,12] = exp jzh
          jzj:f64[400,12] = neg jzi
          jzk:f64[400,12] = select_n jzb jzj jze
          jzl:f64[400,12] = add jyy jzk
          jzm:f64[400] = reduce_sum[axes=(1,)] jzl
          jzn:f64[400] = div jzm 12.0
          jzo:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] jeg
          jzp:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] jem
          jzq:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] jki
          jzr:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] jkm
          jzs:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] jkq
          jzt:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] jkw
          jzu:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] jlf
          jzv:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] jlq
          jzw:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] jmc
          jzx:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] jnb
          jzy:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] jnt
          jzz:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] job
          kaa:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] joh
          kab:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] joq
          kac:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] joy
          kad:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] jyn
          kae:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] jzn
          kaf:f64[400,16] = concatenate[dimension=1] jzo jzp jzq jzr jzs jzt jzu
            jzv jzw jzx jzy jzz kaa kab kac kad
          kag:f64[400,17] = concatenate[dimension=1] kaf kae
          kah:f64[1,17] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 17)
          ] bpm
          kai:f64[400,17] = mul kah kag
          kaj:f64[400] = reduce_sum[axes=(1,)] kai
          kak:f64[400,36] = add hmp 1.0
          kal:f64[36,1] = slice[
            limit_indices=(36, 2)
            start_indices=(0, 1)
            strides=None
          ] bkr
          kam:f64[36] = squeeze[dimensions=(1,)] kal
          kan:f64[36,1] = slice[
            limit_indices=(36, 1)
            start_indices=(0, 0)
            strides=None
          ] bkr
          kao:f64[36] = squeeze[dimensions=(1,)] kan
          kap:f64[36] = sub kam kao
          kaq:f64[1,36] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 36)
          ] kap
          kar:f64[400,36] = mul kak kaq
          kas:f64[400,36] = div kar 2.0
          kat:f64[36,1] = slice[
            limit_indices=(36, 1)
            start_indices=(0, 0)
            strides=None
          ] bkr
          kau:f64[36] = squeeze[dimensions=(1,)] kat
          kav:f64[1,36] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 36)
          ] kau
          kaw:f64[400,36] = add kas kav
          kax:f64[400,4] = slice[
            limit_indices=(400, 4)
            start_indices=(0, 0)
            strides=None
          ] kaw
          kay:f64[400,1] = slice[
            limit_indices=(400, 3)
            start_indices=(0, 2)
            strides=None
          ] kax
          kaz:f64[400] = squeeze[dimensions=(1,)] kay
          kba:f64[400,1] = slice[
            limit_indices=(400, 4)
            start_indices=(0, 3)
            strides=None
          ] kax
          kbb:f64[400] = squeeze[dimensions=(1,)] kba
          kbc:f64[400] = mul kaz kbb
          kbd:f64[400,1] = slice[
            limit_indices=(400, 1)
            start_indices=(0, 0)
            strides=None
          ] kax
          kbe:f64[400] = squeeze[dimensions=(1,)] kbd
          kbf:f64[400,1] = slice[
            limit_indices=(400, 2)
            start_indices=(0, 1)
            strides=None
          ] kax
          kbg:f64[400] = squeeze[dimensions=(1,)] kbf
          kbh:f64[400] = mul kbe kbg
          kbi:f64[400] = add kbc kbh
          kbj:f64[400,1] = slice[
            limit_indices=(400, 2)
            start_indices=(0, 1)
            strides=None
          ] kax
          kbk:f64[400] = squeeze[dimensions=(1,)] kbj
          kbl:f64[400,1] = slice[
            limit_indices=(400, 2)
            start_indices=(0, 1)
            strides=None
          ] kax
          kbm:f64[400] = squeeze[dimensions=(1,)] kbl
          kbn:f64[400] = mul kbk kbm
          kbo:f64[400,1] = slice[
            limit_indices=(400, 3)
            start_indices=(0, 2)
            strides=None
          ] kax
          kbp:f64[400] = squeeze[dimensions=(1,)] kbo
          kbq:f64[400,1] = slice[
            limit_indices=(400, 3)
            start_indices=(0, 2)
            strides=None
          ] kax
          kbr:f64[400] = squeeze[dimensions=(1,)] kbq
          kbs:f64[400] = mul kbp kbr
          kbt:f64[400] = add kbn kbs
          kbu:f64[400] = sub 0.5 kbt
          kbv:f64[400] = atan2 kbi kbu
          kbw:f64[400,1] = slice[
            limit_indices=(400, 2)
            start_indices=(0, 1)
            strides=None
          ] kax
          kbx:f64[400] = squeeze[dimensions=(1,)] kbw
          kby:f64[400,1] = slice[
            limit_indices=(400, 4)
            start_indices=(0, 3)
            strides=None
          ] kax
          kbz:f64[400] = squeeze[dimensions=(1,)] kby
          kca:f64[400] = mul kbx kbz
          kcb:f64[400,1] = slice[
            limit_indices=(400, 1)
            start_indices=(0, 0)
            strides=None
          ] kax
          kcc:f64[400] = squeeze[dimensions=(1,)] kcb
          kcd:f64[400,1] = slice[
            limit_indices=(400, 3)
            start_indices=(0, 2)
            strides=None
          ] kax
          kce:f64[400] = squeeze[dimensions=(1,)] kcd
          kcf:f64[400] = mul kcc kce
          kcg:f64[400] = sub kca kcf
          kch:f64[400] = mul -2.0 kcg
          kci:f64[400] = pjit[name=clip jaxpr=clip3] kch -1.0 1.0
          kcj:f64[400] = custom_jvp_call[
            call_jaxpr={ lambda ; kck:f64[400]. let
                kcl:f64[400] = asin kck
              in (kcl,) }
            jvp_jaxpr_thunk=<function _memoize.<locals>.memoized at 0x7d8349bd3310>
            num_consts=0
            symbolic_zeros=False
          ] kci
          kcm:f64[400,1] = slice[
            limit_indices=(400, 2)
            start_indices=(0, 1)
            strides=None
          ] kax
          kcn:f64[400] = squeeze[dimensions=(1,)] kcm
          kco:f64[400,1] = slice[
            limit_indices=(400, 3)
            start_indices=(0, 2)
            strides=None
          ] kax
          kcp:f64[400] = squeeze[dimensions=(1,)] kco
          kcq:f64[400] = mul kcn kcp
          kcr:f64[400,1] = slice[
            limit_indices=(400, 1)
            start_indices=(0, 0)
            strides=None
          ] kax
          kcs:f64[400] = squeeze[dimensions=(1,)] kcr
          kct:f64[400,1] = slice[
            limit_indices=(400, 4)
            start_indices=(0, 3)
            strides=None
          ] kax
          kcu:f64[400] = squeeze[dimensions=(1,)] kct
          kcv:f64[400] = mul kcs kcu
          kcw:f64[400] = add kcq kcv
          kcx:f64[400,1] = slice[
            limit_indices=(400, 3)
            start_indices=(0, 2)
            strides=None
          ] kax
          kcy:f64[400] = squeeze[dimensions=(1,)] kcx
          kcz:f64[400,1] = slice[
            limit_indices=(400, 3)
            start_indices=(0, 2)
            strides=None
          ] kax
          kda:f64[400] = squeeze[dimensions=(1,)] kcz
          kdb:f64[400] = mul kcy kda
          kdc:f64[400,1] = slice[
            limit_indices=(400, 4)
            start_indices=(0, 3)
            strides=None
          ] kax
          kdd:f64[400] = squeeze[dimensions=(1,)] kdc
          kde:f64[400,1] = slice[
            limit_indices=(400, 4)
            start_indices=(0, 3)
            strides=None
          ] kax
          kdf:f64[400] = squeeze[dimensions=(1,)] kde
          kdg:f64[400] = mul kdd kdf
          kdh:f64[400] = add kdb kdg
          kdi:f64[400] = sub 0.5 kdh
          kdj:f64[400] = atan2 kcw kdi
          kdk:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] kbv
          kdl:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] kcj
          kdm:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] kdj
          kdn:f64[400,3] = concatenate[dimension=1] kdk kdl kdm
          kdo:f64[400,1] = slice[
            limit_indices=(400, 1)
            start_indices=(0, 0)
            strides=(1, 1)
          ] kdn
          kdp:f64[400] = squeeze[dimensions=(1,)] kdo
          kdq:f64[400,1] = slice[
            limit_indices=(400, 2)
            start_indices=(0, 1)
            strides=(1, 1)
          ] kdn
          kdr:f64[400] = squeeze[dimensions=(1,)] kdq
          kds:f64[400] = abs kdp
          kdt:bool[400] = lt kds 0.785
          kdu:f64[400] = abs kdr
          kdv:bool[400] = lt kdu 0.785
          kdw:bool[400] = and kdt kdv
          kdx:f64[400] = pjit[
            name=_where
            jaxpr={ lambda ; kdy:bool[400] kdz:f64[] kea:f64[]. let
                keb:f64[400] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(400,)
                ] kea
                kec:f64[400] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(400,)
                ] kdz
                ked:f64[400] = select_n kdy keb kec
              in (ked,) }
          ] kdw 1.0 0.0
          kee:f64[400] = convert_element_type[new_dtype=float64 weak_type=False] kdx
          kef:f64[400] = add kaj kee
          keg:f64[400] = sub kef 1.0
          keh:f64[400] = broadcast_in_dim[broadcast_dimensions=() shape=(400,)] 0.0
          kei:f64[400] = pjit[
            name=_where
            jaxpr={ lambda ; kej:f64[400] kek:f64[400] kel:f64[400]. let
                kem:bool[400] = ne kej 0.0
                ken:f64[400] = select_n kem kel kek
              in (ken,) }
          ] bpo keh bpq
          keo:f64[400] = broadcast_in_dim[broadcast_dimensions=() shape=(400,)] 0.0
          kep:f64[400,180] keq:f64[400] ker:f64[400,180] kes:f64[400,36] ket:f64[400]
            keu:f64[400] kev:f64[1,400] = scan[
            _split_transpose=False
            jaxpr={ lambda ; kew:f64[36,2] kex:f64[400,180] key:f64[400] kez:f64[400,180]
                kfa:f64[400,36] kfb:f64[400] kfc:f64[400]. let
                kfd:f64[400,36] = add kfa 1.0
                kfe:f64[36,1] = slice[
                  limit_indices=(36, 2)
                  start_indices=(0, 1)
                  strides=None
                ] kew
                kff:f64[36] = squeeze[dimensions=(1,)] kfe
                kfg:f64[36,1] = slice[
                  limit_indices=(36, 1)
                  start_indices=(0, 0)
                  strides=None
                ] kew
                kfh:f64[36] = squeeze[dimensions=(1,)] kfg
                kfi:f64[36] = sub kff kfh
                kfj:f64[1,36] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 36)
                ] kfi
                kfk:f64[400,36] = mul kfd kfj
                kfl:f64[400,36] = div kfk 2.0
                kfm:f64[36,1] = slice[
                  limit_indices=(36, 1)
                  start_indices=(0, 0)
                  strides=None
                ] kew
                kfn:f64[36] = squeeze[dimensions=(1,)] kfm
                kfo:f64[1,36] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 36)
                ] kfn
                kfp:f64[400,36] = add kfl kfo
                kfq:f64[400,4] = slice[
                  limit_indices=(400, 4)
                  start_indices=(0, 0)
                  strides=None
                ] kfp
                kfr:f64[400,1] = slice[
                  limit_indices=(400, 3)
                  start_indices=(0, 2)
                  strides=None
                ] kfq
                kfs:f64[400] = squeeze[dimensions=(1,)] kfr
                kft:f64[400,1] = slice[
                  limit_indices=(400, 4)
                  start_indices=(0, 3)
                  strides=None
                ] kfq
                kfu:f64[400] = squeeze[dimensions=(1,)] kft
                kfv:f64[400] = mul kfs kfu
                kfw:f64[400,1] = slice[
                  limit_indices=(400, 1)
                  start_indices=(0, 0)
                  strides=None
                ] kfq
                kfx:f64[400] = squeeze[dimensions=(1,)] kfw
                kfy:f64[400,1] = slice[
                  limit_indices=(400, 2)
                  start_indices=(0, 1)
                  strides=None
                ] kfq
                kfz:f64[400] = squeeze[dimensions=(1,)] kfy
                kga:f64[400] = mul kfx kfz
                kgb:f64[400] = add kfv kga
                kgc:f64[400,1] = slice[
                  limit_indices=(400, 2)
                  start_indices=(0, 1)
                  strides=None
                ] kfq
                kgd:f64[400] = squeeze[dimensions=(1,)] kgc
                kge:f64[400,1] = slice[
                  limit_indices=(400, 2)
                  start_indices=(0, 1)
                  strides=None
                ] kfq
                kgf:f64[400] = squeeze[dimensions=(1,)] kge
                kgg:f64[400] = mul kgd kgf
                kgh:f64[400,1] = slice[
                  limit_indices=(400, 3)
                  start_indices=(0, 2)
                  strides=None
                ] kfq
                kgi:f64[400] = squeeze[dimensions=(1,)] kgh
                kgj:f64[400,1] = slice[
                  limit_indices=(400, 3)
                  start_indices=(0, 2)
                  strides=None
                ] kfq
                kgk:f64[400] = squeeze[dimensions=(1,)] kgj
                kgl:f64[400] = mul kgi kgk
                kgm:f64[400] = add kgg kgl
                kgn:f64[400] = sub 0.5 kgm
                kgo:f64[400] = atan2 kgb kgn
                kgp:f64[400,1] = slice[
                  limit_indices=(400, 2)
                  start_indices=(0, 1)
                  strides=None
                ] kfq
                kgq:f64[400] = squeeze[dimensions=(1,)] kgp
                kgr:f64[400,1] = slice[
                  limit_indices=(400, 4)
                  start_indices=(0, 3)
                  strides=None
                ] kfq
                kgs:f64[400] = squeeze[dimensions=(1,)] kgr
                kgt:f64[400] = mul kgq kgs
                kgu:f64[400,1] = slice[
                  limit_indices=(400, 1)
                  start_indices=(0, 0)
                  strides=None
                ] kfq
                kgv:f64[400] = squeeze[dimensions=(1,)] kgu
                kgw:f64[400,1] = slice[
                  limit_indices=(400, 3)
                  start_indices=(0, 2)
                  strides=None
                ] kfq
                kgx:f64[400] = squeeze[dimensions=(1,)] kgw
                kgy:f64[400] = mul kgv kgx
                kgz:f64[400] = sub kgt kgy
                kha:f64[400] = mul -2.0 kgz
                khb:f64[400] = pjit[
                  name=clip
                  jaxpr={ lambda ; khc:f64[400] khd:f64[] khe:f64[]. let
                      khf:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] khd
                      khg:f64[400] = max khf khc
                      khh:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] khe
                      khi:f64[400] = min khh khg
                    in (khi,) }
                ] kha -1.0 1.0
                khj:f64[400] = custom_jvp_call[
                  call_jaxpr={ lambda ; khk:f64[400]. let
                      khl:f64[400] = asin khk
                    in (khl,) }
                  jvp_jaxpr_thunk=<function _memoize.<locals>.memoized at 0x7d832d544f70>
                  num_consts=0
                  symbolic_zeros=False
                ] khb
                khm:f64[400,1] = slice[
                  limit_indices=(400, 2)
                  start_indices=(0, 1)
                  strides=None
                ] kfq
                khn:f64[400] = squeeze[dimensions=(1,)] khm
                kho:f64[400,1] = slice[
                  limit_indices=(400, 3)
                  start_indices=(0, 2)
                  strides=None
                ] kfq
                khp:f64[400] = squeeze[dimensions=(1,)] kho
                khq:f64[400] = mul khn khp
                khr:f64[400,1] = slice[
                  limit_indices=(400, 1)
                  start_indices=(0, 0)
                  strides=None
                ] kfq
                khs:f64[400] = squeeze[dimensions=(1,)] khr
                kht:f64[400,1] = slice[
                  limit_indices=(400, 4)
                  start_indices=(0, 3)
                  strides=None
                ] kfq
                khu:f64[400] = squeeze[dimensions=(1,)] kht
                khv:f64[400] = mul khs khu
                khw:f64[400] = add khq khv
                khx:f64[400,1] = slice[
                  limit_indices=(400, 3)
                  start_indices=(0, 2)
                  strides=None
                ] kfq
                khy:f64[400] = squeeze[dimensions=(1,)] khx
                khz:f64[400,1] = slice[
                  limit_indices=(400, 3)
                  start_indices=(0, 2)
                  strides=None
                ] kfq
                kia:f64[400] = squeeze[dimensions=(1,)] khz
                kib:f64[400] = mul khy kia
                kic:f64[400,1] = slice[
                  limit_indices=(400, 4)
                  start_indices=(0, 3)
                  strides=None
                ] kfq
                kid:f64[400] = squeeze[dimensions=(1,)] kic
                kie:f64[400,1] = slice[
                  limit_indices=(400, 4)
                  start_indices=(0, 3)
                  strides=None
                ] kfq
                kif:f64[400] = squeeze[dimensions=(1,)] kie
                kig:f64[400] = mul kid kif
                kih:f64[400] = add kib kig
                kii:f64[400] = sub 0.5 kih
                kij:f64[400] = atan2 khw kii
                kik:f64[400,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(400, 1)
                ] kgo
                kil:f64[400,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(400, 1)
                ] khj
                kim:f64[400,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(400, 1)
                ] kij
                kin:f64[400,3] = concatenate[dimension=1] kik kil kim
                kio:f64[400,1] = slice[
                  limit_indices=(400, 1)
                  start_indices=(0, 0)
                  strides=(1, 1)
                ] kin
                kip:f64[400] = squeeze[dimensions=(1,)] kio
                kiq:f64[400,1] = slice[
                  limit_indices=(400, 2)
                  start_indices=(0, 1)
                  strides=(1, 1)
                ] kin
                kir:f64[400] = squeeze[dimensions=(1,)] kiq
                kis:f64[400] = abs kip
                kit:bool[400] = lt kis 0.785
                kiu:f64[400] = abs kir
                kiv:bool[400] = lt kiu 0.785
                kiw:bool[400] = and kit kiv
                kix:f64[400] = pjit[
                  name=_where
                  jaxpr={ lambda ; kiy:bool[400] kiz:f64[] kja:f64[]. let
                      kjb:f64[400] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(400,)
                      ] kja
                      kjc:f64[400] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(400,)
                      ] kiz
                      kjd:f64[400] = select_n kiy kjb kjc
                    in (kjd,) }
                ] kiw 1.0 0.0
                kje:f64[400] = sub 1.0 kix
                kjf:f64[400,144] = slice[
                  limit_indices=(400, 144)
                  start_indices=(0, 0)
                  strides=None
                ] kex
                kjg:f64[400,180] = concatenate[dimension=1] kfa kjf
              in (kjg, kje, kez, kfa, kfb, kfc, kfb) }
            length=1
            linear=(False, False, False, False, False, False, False)
            num_carry=6
            num_consts=1
            reverse=False
            unroll=1
          ] bkr bpn keo bpp hmp keg kei
          kjh:f64[400] = reduce_sum[axes=(0,)] kev
          kji:f64[400] = add keu 1.0
          kjj:bool[400] = ge kji 1000.0
          kjk:bool[400] = and kjj False
          kjl:f64[400] = pjit[
            name=_where
            jaxpr={ lambda ; kjm:bool[400] kjn:f64[] kjo:f64[400]. let
                kjp:f64[400] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(400,)
                ] kjn
                kjq:f64[400] = select_n kjm kjo kjp
              in (kjq,) }
          ] kjk 1.0 keq
          kjr:bool[400] = ge kji 1000.0
          kjs:f64[400] = sub 1.0 keq
          kjt:f64[400] = pjit[
            name=_where
            jaxpr={ lambda ; kju:bool[400] kjv:f64[400] kjw:f64[]. let
                kjx:f64[400] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(400,)
                ] kjw
                kjy:f64[400] = select_n kju kjx kjv
              in (kjy,) }
          ] kjr kjs 0.0
          kjz:f64[400,1] = reshape[dimensions=None new_sizes=(400, 1)] kjl
          kka:f64[400,180] = pjit[
            name=_where
            jaxpr={ lambda ; kkb:f64[400,1] kkc:f64[400,180] kkd:f64[400,180]. let
                kke:bool[400,1] = ne kkb 0.0
                kkf:bool[400] = squeeze[dimensions=(1,)] kke
                kkg:bool[400,180] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(400, 180)
                ] kkf
                kkh:f64[400,180] = select_n kkg kkd kkc
              in (kkh,) }
          ] kjz ker kep
          kki:f64[400] = sub 1.0 kjl
          kkj:f64[400,1] = reshape[dimensions=None new_sizes=(400, 1)] kjh
          kkk:f64[400,1] = reshape[dimensions=None new_sizes=(400, 1)] kki
          kkl:f64[400,1] = reshape[dimensions=None new_sizes=(400, 1)] kjt
          kkm:f64[400,1] = convert_element_type[
            new_dtype=float64
            weak_type=False
          ] kkk
          kkn:f64[400,1] = convert_element_type[
            new_dtype=float64
            weak_type=False
          ] kkl
          kko:f64[400,372] = concatenate[dimension=1] bpn bsv kkj kkm kka kkn
          kkp:i32[] = sub 4000 bps
          kkq:i32[] = sub kkp 400
          kkr:i32[] = min 0 kkq
          kks:bool[] = ne kkr 0
          kkt:i32[] = convert_element_type[new_dtype=int32 weak_type=False] kks
          kku:f64[4000,372] = cond[
            branches=(
              { lambda ; kkv_:f64[4000,372] kkw_:i32[] kkx:f64[4000,372]. let
                  
                in (kkx,) }
              { lambda ; kky:f64[4000,372] kkz:i32[] kla_:f64[4000,372]. let
                  klb:f64[4000,372] = pjit[
                    name=_roll_dynamic
                    jaxpr={ lambda ; klc:f64[4000,372] kld:i32[]. let
                        kle:i32[1] = broadcast_in_dim[
                          broadcast_dimensions=()
                          shape=(1,)
                        ] kld
                        klf:i32[1] = slice[
                          limit_indices=(1,)
                          start_indices=(0,)
                          strides=(1,)
                        ] kle
                        klg:i32[] = squeeze[dimensions=(0,)] klf
                        klh:i32[] = max 4000 1
                        kli:i32[] = pjit[
                          name=remainder
                          jaxpr={ lambda ; klj:i32[] klk:i32[]. let
                              kll:bool[] = eq klk 0
                              klm:i32[] = pjit[name=_where jaxpr=_where4] kll 1 klk
                              kln:i32[] = rem klj klm
                              klo:bool[] = ne kln 0
                              klp:bool[] = lt kln 0
                              klq:bool[] = lt klm 0
                              klr:bool[] = ne klp klq
                              kls:bool[] = and klr klo
                              klt:i32[] = add kln klm
                              klu:i32[] = select_n kls kln klt
                            in (klu,) }
                        ] klg klh
                        klv:f64[8000,372] = concatenate[dimension=0] klc klc
                        klw:i32[] = sub 4000 kli
                        klx:bool[] = lt klw 0
                        kly:i32[] = add klw 8000
                        klz:i32[] = select_n klx klw kly
                        kma:i32[] = add 0 372
                        kmb:i32[] = select_n False 0 kma
                        kmc:f64[4000,372] = dynamic_slice[
                          slice_sizes=(4000, 372)
                        ] klv klz kmb
                      in (kmc,) }
                  ] kky kkz
                in (klb,) }
            )
            linear=(False, False, False)
          ] kkt bpr kkr bpr
          kmd:i32[] = add bps kkr
          kme:bool[] = lt kmd 0
          kmf:i32[] = add kmd 4000
          kmg:i32[] = select_n kme kmd kmf
          kmh:i32[] = add 0 372
          kmi:i32[] = select_n False 0 kmh
          kmj:f64[4000,372] = dynamic_update_slice kku kko kmg kmi
          kmk:i32[] = add kmd 400
          kml:i32[] = pjit[
            name=remainder
            jaxpr={ lambda ; kmm:i32[] kmn:i64[]. let
                kmo:i32[] = convert_element_type[
                  new_dtype=int32
                  weak_type=False
                ] kmn
                kmp:bool[] = eq kmo 0
                kmq:i32[] = pjit[name=_where jaxpr=_where4] kmp 1 kmo
                kmr:i32[] = rem kmm kmq
                kms:bool[] = ne kmr 0
                kmt:bool[] = lt kmr 0
                kmu:bool[] = lt kmq 0
                kmv:bool[] = ne kmt kmu
                kmw:bool[] = and kmv kms
                kmx:i32[] = add kmr kmq
                kmy:i32[] = select_n kmw kmr kmx
              in (kmy,) }
          ] kmk 4001
          kmz:i32[] = add bpt kkr
          kna:i32[] = max 0 kmz
        in (kka, kjl, ker, kji, kmj, kml, kna, bpu, bqc) }
      length=1
      linear=(False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False)
      num_carry=9
      num_consts=147
      reverse=False
      unroll=1
    ] bgj bgi bgl bgk bgn bgm bak bal bam ban bao bap baq bar bas bat bau bav baw
      bax bay baz bba bbb bbc bbd bbe bbf bbg bbh bbi bbj bbk bbl bbm bbn bbo bbp
      bbq bbr bbs bbt bbu bbv bbw bbx bby bbz bca bcb bcc bcd bce bcf bcg bch bci
      bcj bck bcl bcm bcn bco bcp bcq bcr bcs bct bcu bcv bcw bcx bcy bcz bda bdb
      bdc bdd bde bdf bdg bdh bdi bdj bdk bdl bdm bdn bdo bdp bdq bdr bds bdt bdu
      bdv bdw bdx bdy bdz bea beb bec bed bee bef beg beh bei bej bek bel bem ben
      beo bep beq ber bes bet beu bev bew bex bey bez bfa bfb bfc bfd bfe bff bfg
      bfh bfi bfj bfk bfl bfm bfn bfo bfp bfq bfr bfs bft bfu bjo bjp bjo bjq biv
      biw bix biy bjd
    knb:i32[] knc:f32[512] knd:f32[180,512] kne:f32[512] knf:f32[512,512] kng:f32[18]
      knh:f32[512,18] kni:f32[512] knj:f32[180,512] knk:f32[512] knl:f32[512,512]
      knm:f32[18] knn:f32[512,18] kno:f32[512] knp:f32[180,512] knq:f32[512] knr:f32[512,512]
      kns:f32[18] knt:f32[512,18] knu:i32[] knv:f32[512] knw:f32[189,512] knx:f32[512]
      kny:f32[512,512] knz:f32[1] koa:f32[512,1] kob:f32[512] koc:f32[189,512] kod:f32[512]
      koe:f32[512,512] kof:f32[1] kog:f32[512,1] koh:f32[512] koi:f32[189,512] koj:f32[512]
      kok:f32[512,512] kol:f32[1] kom:f32[512,1] kon:f32[512] koo:f32[189,512] kop:f32[512]
      koq:f32[512,512] kor:f32[1] kos:f32[512,1] kot:f32[512] kou:f32[189,512] kov:f32[512]
      kow:f32[512,512] kox:f32[1] koy:f32[512,1] koz:f32[512] kpa:f32[189,512] kpb:f32[512]
      kpc:f32[512,512] kpd:f32[1] kpe:f32[512,1] kpf:f32[512] kpg:f32[189,512] kph:f32[512]
      kpi:f32[512,512] kpj:f32[1] kpk:f32[512,1] kpl:f32[512] kpm:f32[189,512] kpn:f32[512]
      kpo:f32[512,512] kpp:f32[1] kpq:f32[512,1] kpr:f64[] kps:f64[] kpt:i32[] kpu:f32[]
      kpv:f32[] kpw:f32[] kpx:f64[180] kpy:f64[180] kpz:f64[] kqa:f64[180] kqb:u32[2]
      kqc:f64[60] kqd:f32[60] kqe:f64[60] kqf:i32[] kqg:f64[60] kqh:u32[2] = pjit[
      name=policy_update
      jaxpr={ lambda ; kqi:f64[4000,372] kqj:i32[] kqk:i32[] kql:u32[2] kqm:i32[]
          kqn:f32[512] kqo:f32[180,512] kqp:f32[512] kqq:f32[512,512] kqr:f32[18]
          kqs:f32[512,18] kqt:f32[512] kqu:f32[180,512] kqv:f32[512] kqw:f32[512,512]
          kqx:f32[18] kqy:f32[512,18] kqz:f32[512] kra:f32[180,512] krb:f32[512]
          krc:f32[512,512] krd:f32[18] kre:f32[512,18] krf:i32[] krg:f32[512] krh:f32[189,512]
          kri:f32[512] krj:f32[512,512] krk:f32[1] krl:f32[512,1] krm:f32[512] krn:f32[189,512]
          kro:f32[512] krp:f32[512,512] krq:f32[1] krr:f32[512,1] krs:f32[512] krt:f32[189,512]
          kru:f32[512] krv:f32[512,512] krw:f32[1] krx:f32[512,1] kry:f32[512] krz:f32[189,512]
          ksa:f32[512] ksb:f32[512,512] ksc:f32[1] ksd:f32[512,1] kse:f32[512] ksf:f32[189,512]
          ksg:f32[512] ksh:f32[512,512] ksi:f32[1] ksj:f32[512,1] ksk:f32[512] ksl:f32[189,512]
          ksm:f32[512] ksn:f32[512,512] kso:f32[1] ksp:f32[512,1] ksq:f32[512] ksr:f32[189,512]
          kss:f32[512] kst:f32[512,512] ksu:f32[1] ksv:f32[512,1] ksw:f32[512] ksx:f32[189,512]
          ksy:f32[512] ksz:f32[512,512] kta:f32[1] ktb:f32[512,1] ktc:f64[] ktd:f64[]
          kte:i32[] ktf:f32[] ktg:f32[] kth:f32[] kti:f64[180] ktj:f64[180] ktk:f64[]
          ktl:f64[180] ktm:u32[2] ktn:f64[15000,372] kto:i32[] ktp:i32[] ktq:u32[2]. let
          ktr:key<fry>[] = random_wrap[impl=fry] kql
          kts:key<fry>[2] = random_split[shape=(2,)] ktr
          ktt:u32[2,2] = random_unwrap kts
          ktu:u32[1,2] = slice[
            limit_indices=(1, 2)
            start_indices=(0, 0)
            strides=(1, 1)
          ] ktt
          ktv:u32[2] = squeeze[dimensions=(0,)] ktu
          ktw:u32[1,2] = slice[
            limit_indices=(2, 2)
            start_indices=(1, 0)
            strides=(1, 1)
          ] ktt
          ktx:u32[2] = squeeze[dimensions=(0,)] ktw
          kty:key<fry>[] = random_wrap[impl=fry] ktx
          ktz:i64[15360] = pjit[
            name=_randint
            jaxpr={ lambda ; kua:key<fry>[] kub:i32[] kuc:i32[]. let
                kud:i64[] = pjit[name=clip jaxpr=clip] 9223372036854775807 -2147483648
                  2147483647
                kue:i32[] = convert_element_type[
                  new_dtype=int32
                  weak_type=False
                ] kud
                kuf:bool[] = gt kuc kue
                kug:i32[] = pjit[name=clip jaxpr=clip1] kub -2147483648 2147483647
                kuh:i64[] = convert_element_type[
                  new_dtype=int64
                  weak_type=False
                ] kug
                kui:i32[] = pjit[name=clip jaxpr=clip1] kuc -2147483648 2147483647
                kuj:i64[] = convert_element_type[
                  new_dtype=int64
                  weak_type=False
                ] kui
                kuk:i64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] kuh
                kul:i64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] kuj
                kum:key<fry>[2] = random_split[shape=(2,)] kua
                kun:key<fry>[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=(1,)
                ] kum
                kuo:key<fry>[] = squeeze[dimensions=(0,)] kun
                kup:key<fry>[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=(1,)
                ] kum
                kuq:key<fry>[] = squeeze[dimensions=(0,)] kup
                kur:u64[15360] = random_bits[bit_width=64 shape=(15360,)] kuo
                kus:u64[15360] = random_bits[bit_width=64 shape=(15360,)] kuq
                kut:i64[1] = sub kul kuk
                kuu:u64[1] = convert_element_type[
                  new_dtype=uint64
                  weak_type=False
                ] kut
                kuv:bool[1] = le kul kuk
                kuw:u64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] 1
                kux:u64[1] = select_n kuv kuu kuw
                kuy:bool[1] = gt kul kuk
                kuz:bool[1] = and kuf kuy
                kva:u64[1] = add kux 1
                kvb:u64[1] = select_n kuz kux kva
                kvc:u64[1] = rem 4294967296 kvb
                kvd:u64[1] = mul kvc kvc
                kve:u64[1] = rem kvd kvb
                kvf:u64[15360] = rem kur kvb
                kvg:u64[15360] = mul kvf kve
                kvh:u64[15360] = rem kus kvb
                kvi:u64[15360] = add kvg kvh
                kvj:u64[15360] = rem kvi kvb
                kvk:i64[15360] = convert_element_type[
                  new_dtype=int64
                  weak_type=False
                ] kvj
                kvl:i64[15360] = add kuk kvk
              in (kvl,) }
          ] kty kqk kqj
          kvm:f64[15360,372] = pjit[
            name=_take
            jaxpr={ lambda ; kvn:f64[4000,372] kvo:i64[15360]. let
                kvp:i64[15360] = pjit[
                  name=remainder
                  jaxpr={ lambda ; kvq:i64[15360] kvr:i64[]. let
                      kvs:bool[] = eq kvr 0
                      kvt:i64[] = pjit[name=_where jaxpr=_where] kvs 1 kvr
                      kvu:i64[15360] = rem kvq kvt
                      kvv:bool[15360] = ne kvu 0
                      kvw:bool[15360] = lt kvu 0
                      kvx:bool[] = lt kvt 0
                      kvy:bool[15360] = ne kvw kvx
                      kvz:bool[15360] = and kvy kvv
                      kwa:i64[15360] = add kvu kvt
                      kwb:i64[15360] = select_n kvz kvu kwa
                    in (kwb,) }
                ] kvo 4000
                kwc:i64[15360,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(15360, 1)
                ] kvp
                kwd:f64[15360,372] = gather[
                  dimension_numbers=GatherDimensionNumbers(offset_dims=(1,), collapsed_slice_dims=(0,), start_index_map=(0,))
                  fill_value=None
                  indices_are_sorted=False
                  mode=GatherScatterMode.PROMISE_IN_BOUNDS
                  slice_sizes=(1, 372)
                  unique_indices=False
                ] kvn kwc
              in (kwd,) }
          ] kqi ktz
          kwe:f64[15360,180] = slice[
            limit_indices=(15360, 180)
            start_indices=(0, 0)
            strides=None
          ] kvm
          kwf:f64[15360,9] = slice[
            limit_indices=(15360, 189)
            start_indices=(0, 180)
            strides=None
          ] kvm
          kwg:f64[15360,1] = slice[
            limit_indices=(15360, 190)
            start_indices=(0, 189)
            strides=None
          ] kvm
          kwh:f64[15360,1] = slice[
            limit_indices=(15360, 191)
            start_indices=(0, 190)
            strides=None
          ] kvm
          kwi:f64[15360,180] = slice[
            limit_indices=(15360, 371)
            start_indices=(0, 191)
            strides=None
          ] kvm
          kwj:f64[15360,1] = slice[
            limit_indices=(15360, 372)
            start_indices=(0, 371)
            strides=None
          ] kvm
          kwk:f64[15360] = reshape[dimensions=None new_sizes=(15360,)] kwg
          kwl:f64[15360] = reshape[dimensions=None new_sizes=(15360,)] kwh
          kwm:f64[15360] = reshape[dimensions=None new_sizes=(15360,)] kwj
          kwn:key<fry>[] = random_wrap[impl=fry] ktq
          kwo:key<fry>[2] = random_split[shape=(2,)] kwn
          kwp:u32[2,2] = random_unwrap kwo
          kwq:u32[1,2] = slice[
            limit_indices=(1, 2)
            start_indices=(0, 0)
            strides=(1, 1)
          ] kwp
          kwr:u32[2] = squeeze[dimensions=(0,)] kwq
          kws:u32[1,2] = slice[
            limit_indices=(2, 2)
            start_indices=(1, 0)
            strides=(1, 1)
          ] kwp
          kwt:u32[2] = squeeze[dimensions=(0,)] kws
          kwu:key<fry>[] = random_wrap[impl=fry] kwt
          kwv:i64[400] = pjit[name=_randint jaxpr=_randint] kwu ktp kto
          kww:f64[400,372] = pjit[name=_take jaxpr=_take] ktn kwv
          kwx:f64[400,180] = slice[
            limit_indices=(400, 180)
            start_indices=(0, 0)
            strides=None
          ] kww
          kwy:f64[400,9] = slice[
            limit_indices=(400, 189)
            start_indices=(0, 180)
            strides=None
          ] kww
          kwz:f64[400,1] = slice[
            limit_indices=(400, 190)
            start_indices=(0, 189)
            strides=None
          ] kww
          kxa:f64[400,1] = slice[
            limit_indices=(400, 191)
            start_indices=(0, 190)
            strides=None
          ] kww
          kxb:f64[400,180] = slice[
            limit_indices=(400, 371)
            start_indices=(0, 191)
            strides=None
          ] kww
          kxc:f64[400,1] = slice[
            limit_indices=(400, 372)
            start_indices=(0, 371)
            strides=None
          ] kww
          kxd:f64[400] = reshape[dimensions=None new_sizes=(400,)] kwz
          kxe:f64[400] = reshape[dimensions=None new_sizes=(400,)] kxa
          kxf:f64[400] = reshape[dimensions=None new_sizes=(400,)] kxc
          kxg:f64[15760,180] = concatenate[dimension=0] kwe kwx
          kxh:f64[15760,9] = concatenate[dimension=0] kwf kwy
          kxi:f64[15760] = concatenate[dimension=0] kwk kxd
          kxj:f64[15760] = concatenate[dimension=0] kwl kxe
          kxk:f64[15760,180] = concatenate[dimension=0] kwi kxb
          kxl:f64[15760] = concatenate[dimension=0] kwm kxf
          kxm:key<fry>[] = random_wrap[impl=fry] ktm
          kxn:key<fry>[2] = random_split[shape=(2,)] kxm
          kxo:u32[2,2] = random_unwrap kxn
          kxp:u32[1,2] = slice[
            limit_indices=(1, 2)
            start_indices=(0, 0)
            strides=(1, 1)
          ] kxo
          kxq:u32[2] = squeeze[dimensions=(0,)] kxp
          kxr:u32[1,2] = slice[
            limit_indices=(2, 2)
            start_indices=(1, 0)
            strides=(1, 1)
          ] kxo
          kxs:u32[2] = squeeze[dimensions=(0,)] kxr
          kxt:key<fry>[] = random_wrap[impl=fry] kxs
          kxu:i64[16260] = iota[dimension=0 dtype=int64 shape=(16260,)] 
          kxv:i64[16260] = pjit[
            name=_shuffle
            jaxpr={ lambda ; kxw:key<fry>[] kxx:i64[16260]. let
                kxy:key<fry>[2] = random_split[shape=(2,)] kxw
                kxz:key<fry>[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=(1,)
                ] kxy
                kya:key<fry>[] = squeeze[dimensions=(0,)] kxz
                kyb:key<fry>[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=(1,)
                ] kxy
                kyc:key<fry>[] = squeeze[dimensions=(0,)] kyb
                kyd:u32[16260] = random_bits[bit_width=32 shape=(16260,)] kyc
                _:u32[16260] kye:i64[16260] = sort[
                  dimension=0
                  is_stable=True
                  num_keys=1
                ] kyd kxx
                kyf:key<fry>[2] = random_split[shape=(2,)] kya
                kyg:key<fry>[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=(1,)
                ] kyf
                kyh:key<fry>[] = squeeze[dimensions=(0,)] kyg
                kyi:u32[16260] = random_bits[bit_width=32 shape=(16260,)] kyh
                _:u32[16260] kyj:i64[16260] = sort[
                  dimension=0
                  is_stable=True
                  num_keys=1
                ] kyi kye
              in (kyj,) }
          ] kxt kxu
          kyk:bool[16260] = lt kxv 0
          kyl:i64[16260] = add kxv 15760
          kym:i64[16260] = select_n kyk kxv kyl
          kyn:i32[16260] = convert_element_type[new_dtype=int32 weak_type=False] kym
          kyo:i32[16260,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(16260, 1)
          ] kyn
          kyp:f64[16260,180] = gather[
            dimension_numbers=GatherDimensionNumbers(offset_dims=(1,), collapsed_slice_dims=(0,), start_index_map=(0,))
            fill_value=None
            indices_are_sorted=False
            mode=GatherScatterMode.PROMISE_IN_BOUNDS
            slice_sizes=(1, 180)
            unique_indices=False
          ] kxg kyo
          kyq:bool[16260] = lt kxv 0
          kyr:i64[16260] = add kxv 15760
          kys:i64[16260] = select_n kyq kxv kyr
          kyt:i32[16260] = convert_element_type[new_dtype=int32 weak_type=False] kys
          kyu:i32[16260,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(16260, 1)
          ] kyt
          kyv:f64[16260,9] = gather[
            dimension_numbers=GatherDimensionNumbers(offset_dims=(1,), collapsed_slice_dims=(0,), start_index_map=(0,))
            fill_value=None
            indices_are_sorted=False
            mode=GatherScatterMode.PROMISE_IN_BOUNDS
            slice_sizes=(1, 9)
            unique_indices=False
          ] kxh kyu
          kyw:bool[16260] = lt kxv 0
          kyx:i64[16260] = add kxv 15760
          kyy:i64[16260] = select_n kyw kxv kyx
          kyz:i32[16260] = convert_element_type[new_dtype=int32 weak_type=False] kyy
          kza:i32[16260,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(16260, 1)
          ] kyz
          kzb:f64[16260] = gather[
            dimension_numbers=GatherDimensionNumbers(offset_dims=(), collapsed_slice_dims=(0,), start_index_map=(0,))
            fill_value=None
            indices_are_sorted=False
            mode=GatherScatterMode.PROMISE_IN_BOUNDS
            slice_sizes=(1,)
            unique_indices=False
          ] kxi kza
          kzc:bool[16260] = lt kxv 0
          kzd:i64[16260] = add kxv 15760
          kze:i64[16260] = select_n kzc kxv kzd
          kzf:i32[16260] = convert_element_type[new_dtype=int32 weak_type=False] kze
          kzg:i32[16260,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(16260, 1)
          ] kzf
          kzh:f64[16260] = gather[
            dimension_numbers=GatherDimensionNumbers(offset_dims=(), collapsed_slice_dims=(0,), start_index_map=(0,))
            fill_value=None
            indices_are_sorted=False
            mode=GatherScatterMode.PROMISE_IN_BOUNDS
            slice_sizes=(1,)
            unique_indices=False
          ] kxj kzg
          kzi:bool[16260] = lt kxv 0
          kzj:i64[16260] = add kxv 15760
          kzk:i64[16260] = select_n kzi kxv kzj
          kzl:i32[16260] = convert_element_type[new_dtype=int32 weak_type=False] kzk
          kzm:i32[16260,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(16260, 1)
          ] kzl
          kzn:f64[16260,180] = gather[
            dimension_numbers=GatherDimensionNumbers(offset_dims=(1,), collapsed_slice_dims=(0,), start_index_map=(0,))
            fill_value=None
            indices_are_sorted=False
            mode=GatherScatterMode.PROMISE_IN_BOUNDS
            slice_sizes=(1, 180)
            unique_indices=False
          ] kxk kzm
          kzo:bool[16260] = lt kxv 0
          kzp:i64[16260] = add kxv 15760
          kzq:i64[16260] = select_n kzo kxv kzp
          kzr:i32[16260] = convert_element_type[new_dtype=int32 weak_type=False] kzq
          kzs:i32[16260,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(16260, 1)
          ] kzr
          kzt:f64[16260] = gather[
            dimension_numbers=GatherDimensionNumbers(offset_dims=(), collapsed_slice_dims=(0,), start_index_map=(0,))
            fill_value=None
            indices_are_sorted=False
            mode=GatherScatterMode.PROMISE_IN_BOUNDS
            slice_sizes=(1,)
            unique_indices=False
          ] kxl kzs
          kzu:f64[60,271,180] = reshape[
            dimensions=None
            new_sizes=(60, 271, 180)
          ] kyp
          kzv:f64[60,271,9] = reshape[dimensions=None new_sizes=(60, 271, 9)] kyv
          kzw:f64[60,271] = reshape[dimensions=None new_sizes=(60, 271)] kzb
          kzx:f64[60,271] = reshape[dimensions=None new_sizes=(60, 271)] kzh
          kzy:f64[60,271,180] = reshape[
            dimensions=None
            new_sizes=(60, 271, 180)
          ] kzn
          kzz:f64[60,271] = reshape[dimensions=None new_sizes=(60, 271)] kzt
          laa:i32[] lab:f32[512] lac:f32[180,512] lad:f32[512] lae:f32[512,512] laf:f32[18]
            lag:f32[512,18] lah:f32[512] lai:f32[180,512] laj:f32[512] lak:f32[512,512]
            lal:f32[18] lam:f32[512,18] lan:f32[512] lao:f32[180,512] lap:f32[512]
            laq:f32[512,512] lar:f32[18] las:f32[512,18] lat:i32[] lau:f32[512] lav:f32[189,512]
            law:f32[512] lax:f32[512,512] lay:f32[1] laz:f32[512,1] lba:f32[512]
            lbb:f32[189,512] lbc:f32[512] lbd:f32[512,512] lbe:f32[1] lbf:f32[512,1]
            lbg:f32[512] lbh:f32[189,512] lbi:f32[512] lbj:f32[512,512] lbk:f32[1]
            lbl:f32[512,1] lbm:f32[512] lbn:f32[189,512] lbo:f32[512] lbp:f32[512,512]
            lbq:f32[1] lbr:f32[512,1] lbs:f32[512] lbt:f32[189,512] lbu:f32[512]
            lbv:f32[512,512] lbw:f32[1] lbx:f32[512,1] lby:f32[512] lbz:f32[189,512]
            lca:f32[512] lcb:f32[512,512] lcc:f32[1] lcd:f32[512,1] lce:f32[512]
            lcf:f32[189,512] lcg:f32[512] lch:f32[512,512] lci:f32[1] lcj:f32[512,1]
            lck:f32[512] lcl:f32[189,512] lcm:f32[512] lcn:f32[512,512] lco:f32[1]
            lcp:f32[512,1] lcq:f64[] lcr:f64[] lcs:i32[] lct:f32[] lcu:f32[] lcv:f32[]
            lcw:f64[180] lcx:f64[180] lcy:f64[] lcz:f64[180] _:u32[2] lda:f64[60]
            ldb:f32[60] ldc:f64[60] ldd:f64[60] = scan[
            _split_transpose=False
            jaxpr={ lambda ; lde:i32[] ldf:f32[512] ldg:f32[180,512] ldh:f32[512]
                ldi:f32[512,512] ldj:f32[18] ldk:f32[512,18] ldl:f32[512] ldm:f32[180,512]
                ldn:f32[512] ldo:f32[512,512] ldp:f32[18] ldq:f32[512,18] ldr:f32[512]
                lds:f32[180,512] ldt:f32[512] ldu:f32[512,512] ldv:f32[18] ldw:f32[512,18]
                ldx:i32[] ldy:f32[512] ldz:f32[189,512] lea:f32[512] leb:f32[512,512]
                lec:f32[1] led:f32[512,1] lee:f32[512] lef:f32[189,512] leg:f32[512]
                leh:f32[512,512] lei:f32[1] lej:f32[512,1] lek:f32[512] lel:f32[189,512]
                lem:f32[512] len:f32[512,512] leo:f32[1] lep:f32[512,1] leq:f32[512]
                ler:f32[189,512] les:f32[512] let:f32[512,512] leu:f32[1] lev:f32[512,1]
                lew:f32[512] lex:f32[189,512] ley:f32[512] lez:f32[512,512] lfa:f32[1]
                lfb:f32[512,1] lfc:f32[512] lfd:f32[189,512] lfe:f32[512] lff:f32[512,512]
                lfg:f32[1] lfh:f32[512,1] lfi:f32[512] lfj:f32[189,512] lfk:f32[512]
                lfl:f32[512,512] lfm:f32[1] lfn:f32[512,1] lfo:f32[512] lfp:f32[189,512]
                lfq:f32[512] lfr:f32[512,512] lfs:f32[1] lft:f32[512,1] lfu:f64[]
                lfv:f64[] lfw:i32[] lfx:f32[] lfy:f32[] lfz:f32[] lga:f64[180] lgb:f64[180]
                lgc:f64[] lgd:f64[180] lge:u32[2] lgf:f64[271,180] lgg:f64[271,9]
                lgh:f64[271] lgi:f64[271] lgj:f64[271,180] lgk:f64[271]. let
                lgl:key<fry>[] = random_wrap[impl=fry] lge
                lgm:key<fry>[4] = random_split[shape=(4,)] lgl
                lgn:u32[4,2] = random_unwrap lgm
                lgo:u32[1,2] = slice[
                  limit_indices=(1, 2)
                  start_indices=(0, 0)
                  strides=(1, 1)
                ] lgn
                lgp:u32[2] = squeeze[dimensions=(0,)] lgo
                lgq:u32[1,2] = slice[
                  limit_indices=(2, 2)
                  start_indices=(1, 0)
                  strides=(1, 1)
                ] lgn
                lgr:u32[2] = squeeze[dimensions=(0,)] lgq
                lgs:u32[1,2] = slice[
                  limit_indices=(3, 2)
                  start_indices=(2, 0)
                  strides=(1, 1)
                ] lgn
                lgt:u32[2] = squeeze[dimensions=(0,)] lgs
                lgu:u32[1,2] = slice[
                  limit_indices=(4, 2)
                  start_indices=(3, 0)
                  strides=(1, 1)
                ] lgn
                lgv:u32[2] = squeeze[dimensions=(0,)] lgu
                lgw:f64[180,512] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] lds
                lgx:f64[512] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] ldr
                lgy:f64[271,512] = dot_general[
                  dimension_numbers=(([1], [0]), ([], []))
                ] lgf lgw
                lgz:f64[1,512] = reshape[dimensions=None new_sizes=(1, 512)] lgx
                lha:f64[271,512] = add lgy lgz
                lhb:f64[271,512] = pjit[name=silu jaxpr=silu2] lha
                lhc:f64[512,512] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] ldu
                lhd:f64[512] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] ldt
                lhe:f64[271,512] = dot_general[
                  dimension_numbers=(([1], [0]), ([], []))
                ] lhb lhc
                lhf:f64[1,512] = reshape[dimensions=None new_sizes=(1, 512)] lhd
                lhg:f64[271,512] = add lhe lhf
                lhh:f64[271,512] = pjit[name=silu jaxpr=silu2] lhg
                lhi:f64[512,18] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] ldw
                lhj:f64[18] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] ldv
                lhk:f64[271,18] = dot_general[
                  dimension_numbers=(([1], [0]), ([], []))
                ] lhh lhi
                lhl:f64[1,18] = reshape[dimensions=None new_sizes=(1, 18)] lhj
                lhm:f64[271,18] = add lhk lhl
                lhn:f64[271,9] = slice[
                  limit_indices=(271, 9)
                  start_indices=(0, 0)
                  strides=None
                ] lhm
                lho:f64[271,9] = slice[
                  limit_indices=(271, 18)
                  start_indices=(0, 9)
                  strides=None
                ] lhm
                lhp:f64[271,9] = pjit[name=softplus jaxpr=softplus1] lho
                lhq:f64[271,9] = add lhp 0.001
                lhr:key<fry>[] = random_wrap[impl=fry] lgr
                lhs:f64[271,9] = pjit[name=_normal jaxpr=_normal] lhr
                lht:f64[271,9] = mul lhs lhq
                lhu:f64[271,9] = add lht lhn
                lhv:f64[271,9] = slice[
                  limit_indices=(271, 9)
                  start_indices=(0, 0)
                  strides=None
                ] lhm
                lhw:f64[271,9] = slice[
                  limit_indices=(271, 18)
                  start_indices=(0, 9)
                  strides=None
                ] lhm
                lhx:f64[271,9] = pjit[name=softplus jaxpr=softplus1] lhw
                lhy:f64[271,9] = add lhx 0.001
                lhz:f64[271,9] = div lhu lhy
                lia:f64[271,9] = div lhv lhy
                lib:f64[271,9] = sub lhz lia
                lic:f64[271,9] = integer_pow[y=2] lib
                lid:f64[271,9] = mul -0.5 lic
                lie:f64[] = log 6.283185307179586
                lif:f64[] = mul 0.5 lie
                lig:f64[271,9] = log lhy
                lih:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] lif
                lii:f64[271,9] = add lih lig
                lij:f64[271,9] = sub lid lii
                lik:f64[] = log 2.0
                lil:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] lik
                lim:f64[271,9] = sub lil lhu
                lin:f64[271,9] = mul -2.0 lhu
                lio:f64[271,9] = pjit[name=softplus jaxpr=softplus1] lin
                lip:f64[271,9] = sub lim lio
                liq:f64[271,9] = mul 2.0 lip
                lir:f64[271,9] = sub lij liq
                lis:f64[271] = reduce_sum[axes=(1,)] lir
                lit:f32[] = exp lfz
                liu:f64[271] = neg lis
                liv:f64[271] = sub liu -4.5
                liw:f64[271] = stop_gradient liv
                lix:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] lit
                liy:f64[271] = mul lix liw
                liz:f64[] = reduce_sum[axes=(0,)] liy
                lja:f64[] = div liz 271.0
                ljb:f64[] = div 1.0 271.0
                ljc:f64[271] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(271,)
                ] ljb
                ljd:f64[271] = mul ljc liw
                lje:f64[] = reduce_sum[axes=(0,)] ljd
                ljf:f32[] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] lje
                ljg:f32[] = mul ljf lit
                ljh:f32[] = integer_pow[y=1] ljg
                lji:f32[] = mul 0.10000000149011612 ljh
                ljj:f32[] = mul 0.8999999761581421 lfx
                ljk:f32[] = add lji ljj
                ljl:f32[] = integer_pow[y=2] ljg
                ljm:f32[] = mul 0.0010000000474974513 ljl
                ljn:f32[] = mul 0.9990000128746033 lfy
                ljo:f32[] = add ljm ljn
                ljp:bool[] = lt lfw 2147483647
                ljq:i32[] = add lfw 1
                ljr:i32[] = pjit[name=_where jaxpr=_where5] ljp ljq 2147483647
                ljs:f64[] = pow 0.9 ljr
                ljt:f64[] = sub 1.0 ljs
                lju:f32[] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] ljt
                ljv:f32[] = div ljk lju
                ljw:f64[] = pow 0.999 ljr
                ljx:f64[] = sub 1.0 ljw
                ljy:f32[] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] ljx
                ljz:f32[] = div ljo ljy
                lka:f32[] = add ljz 0.0
                lkb:f32[] = sqrt lka
                lkc:f32[] = add lkb 9.99999993922529e-09
                lkd:f32[] = div ljv lkc
                lke:f32[] = mul -0.0003000000142492354 lkd
                lkf:f32[] = add lfz lke
                lkg:f32[] = exp lfz
                lkh:f64[271,189] = concatenate[dimension=1] lgf lgg
                lki:f64[189,512] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] lex
                lkj:f64[512] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] lew
                lkk:f64[271,512] = dot_general[
                  dimension_numbers=(([1], [0]), ([], []))
                ] lkh lki
                lkl:f64[1,512] = reshape[dimensions=None new_sizes=(1, 512)] lkj
                lkm:f64[271,512] = add lkk lkl
                lkn:f64[271,512] lko:f64[271,512] lkp:f64[271,512] = pjit[
                  name=silu
                  jaxpr=silu3
                ] lkm
                lkq:f64[512,512] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] lez
                lkr:f64[512] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] ley
                lks:f64[271,512] = dot_general[
                  dimension_numbers=(([1], [0]), ([], []))
                ] lkn lkq
                lkt:f64[1,512] = reshape[dimensions=None new_sizes=(1, 512)] lkr
                lku:f64[271,512] = add lks lkt
                lkv:f64[271,512] lkw:f64[271,512] lkx:f64[271,512] = pjit[
                  name=silu
                  jaxpr=silu3
                ] lku
                lky:f64[512,1] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] lfb
                lkz:f64[1] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] lfa
                lla:f64[271,1] = dot_general[
                  dimension_numbers=(([1], [0]), ([], []))
                ] lkv lky
                llb:f64[1,1] = reshape[dimensions=None new_sizes=(1, 1)] lkz
                llc:f64[271,1] = add lla llb
                lld:f64[189,512] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] lfd
                lle:f64[512] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] lfc
                llf:f64[271,512] = dot_general[
                  dimension_numbers=(([1], [0]), ([], []))
                ] lkh lld
                llg:f64[1,512] = reshape[dimensions=None new_sizes=(1, 512)] lle
                llh:f64[271,512] = add llf llg
                lli:f64[271,512] llj:f64[271,512] llk:f64[271,512] = pjit[
                  name=silu
                  jaxpr=silu3
                ] llh
                lll:f64[512,512] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] lff
                llm:f64[512] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] lfe
                lln:f64[271,512] = dot_general[
                  dimension_numbers=(([1], [0]), ([], []))
                ] lli lll
                llo:f64[1,512] = reshape[dimensions=None new_sizes=(1, 512)] llm
                llp:f64[271,512] = add lln llo
                llq:f64[271,512] llr:f64[271,512] lls:f64[271,512] = pjit[
                  name=silu
                  jaxpr=silu3
                ] llp
                llt:f64[512,1] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] lfh
                llu:f64[1] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] lfg
                llv:f64[271,1] = dot_general[
                  dimension_numbers=(([1], [0]), ([], []))
                ] llq llt
                llw:f64[1,1] = reshape[dimensions=None new_sizes=(1, 1)] llu
                llx:f64[271,1] = add llv llw
                lly:f64[271,2] = concatenate[dimension=1] llc llx
                llz:f64[180,512] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] lds
                lma:f64[512] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] ldr
                lmb:f64[271,512] = dot_general[
                  dimension_numbers=(([1], [0]), ([], []))
                ] lgj llz
                lmc:f64[1,512] = reshape[dimensions=None new_sizes=(1, 512)] lma
                lmd:f64[271,512] = add lmb lmc
                lme:f64[271,512] = pjit[name=silu jaxpr=silu2] lmd
                lmf:f64[512,512] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] ldu
                lmg:f64[512] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] ldt
                lmh:f64[271,512] = dot_general[
                  dimension_numbers=(([1], [0]), ([], []))
                ] lme lmf
                lmi:f64[1,512] = reshape[dimensions=None new_sizes=(1, 512)] lmg
                lmj:f64[271,512] = add lmh lmi
                lmk:f64[271,512] = pjit[name=silu jaxpr=silu2] lmj
                lml:f64[512,18] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] ldw
                lmm:f64[18] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] ldv
                lmn:f64[271,18] = dot_general[
                  dimension_numbers=(([1], [0]), ([], []))
                ] lmk lml
                lmo:f64[1,18] = reshape[dimensions=None new_sizes=(1, 18)] lmm
                lmp:f64[271,18] = add lmn lmo
                lmq:f64[271,9] = slice[
                  limit_indices=(271, 9)
                  start_indices=(0, 0)
                  strides=None
                ] lmp
                lmr:f64[271,9] = slice[
                  limit_indices=(271, 18)
                  start_indices=(0, 9)
                  strides=None
                ] lmp
                lms:f64[271,9] = pjit[name=softplus jaxpr=softplus1] lmr
                lmt:f64[271,9] = add lms 0.001
                lmu:key<fry>[] = random_wrap[impl=fry] lgt
                lmv:f64[271,9] = pjit[name=_normal jaxpr=_normal] lmu
                lmw:f64[271,9] = mul lmv lmt
                lmx:f64[271,9] = add lmw lmq
                lmy:f64[271,9] = slice[
                  limit_indices=(271, 9)
                  start_indices=(0, 0)
                  strides=None
                ] lmp
                lmz:f64[271,9] = slice[
                  limit_indices=(271, 18)
                  start_indices=(0, 9)
                  strides=None
                ] lmp
                lna:f64[271,9] = pjit[name=softplus jaxpr=softplus1] lmz
                lnb:f64[271,9] = add lna 0.001
                lnc:f64[271,9] = div lmx lnb
                lnd:f64[271,9] = div lmy lnb
                lne:f64[271,9] = sub lnc lnd
                lnf:f64[271,9] = integer_pow[y=2] lne
                lng:f64[271,9] = mul -0.5 lnf
                lnh:f64[] = log 6.283185307179586
                lni:f64[] = mul 0.5 lnh
                lnj:f64[271,9] = log lnb
                lnk:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] lni
                lnl:f64[271,9] = add lnk lnj
                lnm:f64[271,9] = sub lng lnl
                lnn:f64[] = log 2.0
                lno:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] lnn
                lnp:f64[271,9] = sub lno lmx
                lnq:f64[271,9] = mul -2.0 lmx
                lnr:f64[271,9] = pjit[name=softplus jaxpr=softplus1] lnq
                lns:f64[271,9] = sub lnp lnr
                lnt:f64[271,9] = mul 2.0 lns
                lnu:f64[271,9] = sub lnm lnt
                lnv:f64[271] = reduce_sum[axes=(1,)] lnu
                lnw:f64[271,9] = tanh lmx
                lnx:f64[271,189] = concatenate[dimension=1] lgj lnw
                lny:f64[189,512] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] lfj
                lnz:f64[512] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] lfi
                loa:f64[271,512] = dot_general[
                  dimension_numbers=(([1], [0]), ([], []))
                ] lnx lny
                lob:f64[1,512] = reshape[dimensions=None new_sizes=(1, 512)] lnz
                loc:f64[271,512] = add loa lob
                lod:f64[271,512] = pjit[name=silu jaxpr=silu2] loc
                loe:f64[512,512] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] lfl
                lof:f64[512] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] lfk
                log:f64[271,512] = dot_general[
                  dimension_numbers=(([1], [0]), ([], []))
                ] lod loe
                loh:f64[1,512] = reshape[dimensions=None new_sizes=(1, 512)] lof
                loi:f64[271,512] = add log loh
                loj:f64[271,512] = pjit[name=silu jaxpr=silu2] loi
                lok:f64[512,1] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] lfn
                lol:f64[1] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] lfm
                lom:f64[271,1] = dot_general[
                  dimension_numbers=(([1], [0]), ([], []))
                ] loj lok
                lon:f64[1,1] = reshape[dimensions=None new_sizes=(1, 1)] lol
                loo:f64[271,1] = add lom lon
                lop:f64[189,512] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] lfp
                loq:f64[512] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] lfo
                lor:f64[271,512] = dot_general[
                  dimension_numbers=(([1], [0]), ([], []))
                ] lnx lop
                los:f64[1,512] = reshape[dimensions=None new_sizes=(1, 512)] loq
                lot:f64[271,512] = add lor los
                lou:f64[271,512] = pjit[name=silu jaxpr=silu2] lot
                lov:f64[512,512] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] lfr
                low:f64[512] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] lfq
                lox:f64[271,512] = dot_general[
                  dimension_numbers=(([1], [0]), ([], []))
                ] lou lov
                loy:f64[1,512] = reshape[dimensions=None new_sizes=(1, 512)] low
                loz:f64[271,512] = add lox loy
                lpa:f64[271,512] = pjit[name=silu jaxpr=silu2] loz
                lpb:f64[512,1] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] lft
                lpc:f64[1] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] lfs
                lpd:f64[271,1] = dot_general[
                  dimension_numbers=(([1], [0]), ([], []))
                ] lpa lpb
                lpe:f64[1,1] = reshape[dimensions=None new_sizes=(1, 1)] lpc
                lpf:f64[271,1] = add lpd lpe
                lpg:f64[271,2] = concatenate[dimension=1] loo lpf
                lph:f64[271] = reduce_min[axes=(1,)] lpg
                lpi:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] lkg
                lpj:f64[271] = mul lpi lnv
                lpk:f64[271] = sub lph lpj
                lpl:f64[271] = mul lgh 1.0
                lpm:f64[271] = mul lgi 0.99
                lpn:f64[271] = mul lpm lpk
                lpo:f64[271] = add lpl lpn
                lpp:f64[271] = stop_gradient lpo
                lpq:f64[271,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(271, 1)
                ] lpp
                lpr:f64[271,2] = sub lly lpq
                lps:f64[271] = sub 1.0 lgk
                lpt:f64[271,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(271, 1)
                ] lps
                lpu:f64[271,2] = mul lpr lpt
                lpv:f64[271,2] = integer_pow[y=2] lpu
                lpw:f64[271,2] = integer_pow[y=1] lpu
                lpx:f64[271,2] = mul 2.0 lpw
                lpy:f64[] = reduce_sum[axes=(0, 1)] lpv
                lpz:f64[] = div lpy 542.0
                lqa:f64[] = mul 0.5 lpz
                lqb:f64[] = mul 0.5 1.0
                lqc:f64[] = div lqb 542.0
                lqd:f64[271,2] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(271, 2)
                ] lqc
                lqe:f64[271,2] = mul lqd lpx
                lqf:f64[271,2] = mul lqe lpt
                lqg:f64[271,1] = slice[
                  limit_indices=(271, 1)
                  start_indices=(0, 0)
                  strides=None
                ] lqf
                lqh:f64[271,1] = slice[
                  limit_indices=(271, 2)
                  start_indices=(0, 1)
                  strides=None
                ] lqf
                lqi:f64[1] = reduce_sum[axes=(0,)] lqh
                lqj:f64[1,1] = reshape[dimensions=None new_sizes=(1, 1)] lqi
                lqk:f64[1] = reshape[dimensions=None new_sizes=(1,)] lqj
                lql:f32[1] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] lqk
                lqm:f64[1,512] = dot_general[
                  dimension_numbers=(([0], [0]), ([], []))
                ] lqh llq
                lqn:f64[512,1] = transpose[permutation=(1, 0)] lqm
                lqo:f32[512,1] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] lqn
                lqp:f64[271,512] = dot_general[
                  dimension_numbers=(([1], [1]), ([], []))
                ] lqh llt
                lqq:f64[271,512] = pjit[name=silu jaxpr=silu4] llr llp lls lqp
                lqr:f64[512] = reduce_sum[axes=(0,)] lqq
                lqs:f64[1,512] = reshape[dimensions=None new_sizes=(1, 512)] lqr
                lqt:f64[512] = reshape[dimensions=None new_sizes=(512,)] lqs
                lqu:f32[512] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] lqt
                lqv:f64[512,512] = dot_general[
                  dimension_numbers=(([0], [0]), ([], []))
                ] lqq lli
                lqw:f64[512,512] = transpose[permutation=(1, 0)] lqv
                lqx:f32[512,512] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] lqw
                lqy:f64[271,512] = dot_general[
                  dimension_numbers=(([1], [1]), ([], []))
                ] lqq lll
                lqz:f64[271,512] = pjit[name=silu jaxpr=silu4] llj llh llk lqy
                lra:f64[512] = reduce_sum[axes=(0,)] lqz
                lrb:f64[1,512] = reshape[dimensions=None new_sizes=(1, 512)] lra
                lrc:f64[512] = reshape[dimensions=None new_sizes=(512,)] lrb
                lrd:f32[512] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] lrc
                lre:f64[512,189] = dot_general[
                  dimension_numbers=(([0], [0]), ([], []))
                ] lqz lkh
                lrf:f64[189,512] = transpose[permutation=(1, 0)] lre
                lrg:f32[189,512] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] lrf
                lrh:f64[1] = reduce_sum[axes=(0,)] lqg
                lri:f64[1,1] = reshape[dimensions=None new_sizes=(1, 1)] lrh
                lrj:f64[1] = reshape[dimensions=None new_sizes=(1,)] lri
                lrk:f32[1] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] lrj
                lrl:f64[1,512] = dot_general[
                  dimension_numbers=(([0], [0]), ([], []))
                ] lqg lkv
                lrm:f64[512,1] = transpose[permutation=(1, 0)] lrl
                lrn:f32[512,1] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] lrm
                lro:f64[271,512] = dot_general[
                  dimension_numbers=(([1], [1]), ([], []))
                ] lqg lky
                lrp:f64[271,512] = pjit[name=silu jaxpr=silu4] lkw lku lkx lro
                lrq:f64[512] = reduce_sum[axes=(0,)] lrp
                lrr:f64[1,512] = reshape[dimensions=None new_sizes=(1, 512)] lrq
                lrs:f64[512] = reshape[dimensions=None new_sizes=(512,)] lrr
                lrt:f32[512] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] lrs
                lru:f64[512,512] = dot_general[
                  dimension_numbers=(([0], [0]), ([], []))
                ] lrp lkn
                lrv:f64[512,512] = transpose[permutation=(1, 0)] lru
                lrw:f32[512,512] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] lrv
                lrx:f64[271,512] = dot_general[
                  dimension_numbers=(([1], [1]), ([], []))
                ] lrp lkq
                lry:f64[271,512] = pjit[name=silu jaxpr=silu4] lko lkm lkp lrx
                lrz:f64[512] = reduce_sum[axes=(0,)] lry
                lsa:f64[1,512] = reshape[dimensions=None new_sizes=(1, 512)] lrz
                lsb:f64[512] = reshape[dimensions=None new_sizes=(512,)] lsa
                lsc:f32[512] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] lsb
                lsd:f64[512,189] = dot_general[
                  dimension_numbers=(([0], [0]), ([], []))
                ] lry lkh
                lse:f64[189,512] = transpose[permutation=(1, 0)] lsd
                lsf:f32[189,512] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] lse
                lsg:f32[512] = integer_pow[y=1] lsc
                lsh:f32[512] = mul 0.10000000149011612 lsg
                lsi:f32[512] = mul 0.8999999761581421 ldy
                lsj:f32[512] = add lsh lsi
                lsk:f32[189,512] = integer_pow[y=1] lsf
                lsl:f32[189,512] = mul 0.10000000149011612 lsk
                lsm:f32[189,512] = mul 0.8999999761581421 ldz
                lsn:f32[189,512] = add lsl lsm
                lso:f32[512] = integer_pow[y=1] lrt
                lsp:f32[512] = mul 0.10000000149011612 lso
                lsq:f32[512] = mul 0.8999999761581421 lea
                lsr:f32[512] = add lsp lsq
                lss:f32[512,512] = integer_pow[y=1] lrw
                lst:f32[512,512] = mul 0.10000000149011612 lss
                lsu:f32[512,512] = mul 0.8999999761581421 leb
                lsv:f32[512,512] = add lst lsu
                lsw:f32[1] = integer_pow[y=1] lrk
                lsx:f32[1] = mul 0.10000000149011612 lsw
                lsy:f32[1] = mul 0.8999999761581421 lec
                lsz:f32[1] = add lsx lsy
                lta:f32[512,1] = integer_pow[y=1] lrn
                ltb:f32[512,1] = mul 0.10000000149011612 lta
                ltc:f32[512,1] = mul 0.8999999761581421 led
                ltd:f32[512,1] = add ltb ltc
                lte:f32[512] = integer_pow[y=1] lrd
                ltf:f32[512] = mul 0.10000000149011612 lte
                ltg:f32[512] = mul 0.8999999761581421 lee
                lth:f32[512] = add ltf ltg
                lti:f32[189,512] = integer_pow[y=1] lrg
                ltj:f32[189,512] = mul 0.10000000149011612 lti
                ltk:f32[189,512] = mul 0.8999999761581421 lef
                ltl:f32[189,512] = add ltj ltk
                ltm:f32[512] = integer_pow[y=1] lqu
                ltn:f32[512] = mul 0.10000000149011612 ltm
                lto:f32[512] = mul 0.8999999761581421 leg
                ltp:f32[512] = add ltn lto
                ltq:f32[512,512] = integer_pow[y=1] lqx
                ltr:f32[512,512] = mul 0.10000000149011612 ltq
                lts:f32[512,512] = mul 0.8999999761581421 leh
                ltt:f32[512,512] = add ltr lts
                ltu:f32[1] = integer_pow[y=1] lql
                ltv:f32[1] = mul 0.10000000149011612 ltu
                ltw:f32[1] = mul 0.8999999761581421 lei
                ltx:f32[1] = add ltv ltw
                lty:f32[512,1] = integer_pow[y=1] lqo
                ltz:f32[512,1] = mul 0.10000000149011612 lty
                lua:f32[512,1] = mul 0.8999999761581421 lej
                lub:f32[512,1] = add ltz lua
                luc:f32[512] = integer_pow[y=2] lsc
                lud:f32[512] = mul 0.0010000000474974513 luc
                lue:f32[512] = mul 0.9990000128746033 lek
                luf:f32[512] = add lud lue
                lug:f32[189,512] = integer_pow[y=2] lsf
                luh:f32[189,512] = mul 0.0010000000474974513 lug
                lui:f32[189,512] = mul 0.9990000128746033 lel
                luj:f32[189,512] = add luh lui
                luk:f32[512] = integer_pow[y=2] lrt
                lul:f32[512] = mul 0.0010000000474974513 luk
                lum:f32[512] = mul 0.9990000128746033 lem
                lun:f32[512] = add lul lum
                luo:f32[512,512] = integer_pow[y=2] lrw
                lup:f32[512,512] = mul 0.0010000000474974513 luo
                luq:f32[512,512] = mul 0.9990000128746033 len
                lur:f32[512,512] = add lup luq
                lus:f32[1] = integer_pow[y=2] lrk
                lut:f32[1] = mul 0.0010000000474974513 lus
                luu:f32[1] = mul 0.9990000128746033 leo
                luv:f32[1] = add lut luu
                luw:f32[512,1] = integer_pow[y=2] lrn
                lux:f32[512,1] = mul 0.0010000000474974513 luw
                luy:f32[512,1] = mul 0.9990000128746033 lep
                luz:f32[512,1] = add lux luy
                lva:f32[512] = integer_pow[y=2] lrd
                lvb:f32[512] = mul 0.0010000000474974513 lva
                lvc:f32[512] = mul 0.9990000128746033 leq
                lvd:f32[512] = add lvb lvc
                lve:f32[189,512] = integer_pow[y=2] lrg
                lvf:f32[189,512] = mul 0.0010000000474974513 lve
                lvg:f32[189,512] = mul 0.9990000128746033 ler
                lvh:f32[189,512] = add lvf lvg
                lvi:f32[512] = integer_pow[y=2] lqu
                lvj:f32[512] = mul 0.0010000000474974513 lvi
                lvk:f32[512] = mul 0.9990000128746033 les
                lvl:f32[512] = add lvj lvk
                lvm:f32[512,512] = integer_pow[y=2] lqx
                lvn:f32[512,512] = mul 0.0010000000474974513 lvm
                lvo:f32[512,512] = mul 0.9990000128746033 let
                lvp:f32[512,512] = add lvn lvo
                lvq:f32[1] = integer_pow[y=2] lql
                lvr:f32[1] = mul 0.0010000000474974513 lvq
                lvs:f32[1] = mul 0.9990000128746033 leu
                lvt:f32[1] = add lvr lvs
                lvu:f32[512,1] = integer_pow[y=2] lqo
                lvv:f32[512,1] = mul 0.0010000000474974513 lvu
                lvw:f32[512,1] = mul 0.9990000128746033 lev
                lvx:f32[512,1] = add lvv lvw
                lvy:bool[] = lt ldx 2147483647
                lvz:i32[] = add ldx 1
                lwa:i32[] = pjit[name=_where jaxpr=_where5] lvy lvz 2147483647
                lwb:f64[] = pow 0.9 lwa
                lwc:f64[] = sub 1.0 lwb
                lwd:f32[] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] lwc
                lwe:f32[512] = div lsj lwd
                lwf:f32[] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] lwc
                lwg:f32[189,512] = div lsn lwf
                lwh:f32[] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] lwc
                lwi:f32[512] = div lsr lwh
                lwj:f32[] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] lwc
                lwk:f32[512,512] = div lsv lwj
                lwl:f32[] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] lwc
                lwm:f32[1] = div lsz lwl
                lwn:f32[] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] lwc
                lwo:f32[512,1] = div ltd lwn
                lwp:f32[] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] lwc
                lwq:f32[512] = div lth lwp
                lwr:f32[] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] lwc
                lws:f32[189,512] = div ltl lwr
                lwt:f32[] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] lwc
                lwu:f32[512] = div ltp lwt
                lwv:f32[] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] lwc
                lww:f32[512,512] = div ltt lwv
                lwx:f32[] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] lwc
                lwy:f32[1] = div ltx lwx
                lwz:f32[] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] lwc
                lxa:f32[512,1] = div lub lwz
                lxb:f64[] = pow 0.999 lwa
                lxc:f64[] = sub 1.0 lxb
                lxd:f32[] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] lxc
                lxe:f32[512] = div luf lxd
                lxf:f32[] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] lxc
                lxg:f32[189,512] = div luj lxf
                lxh:f32[] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] lxc
                lxi:f32[512] = div lun lxh
                lxj:f32[] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] lxc
                lxk:f32[512,512] = div lur lxj
                lxl:f32[] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] lxc
                lxm:f32[1] = div luv lxl
                lxn:f32[] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] lxc
                lxo:f32[512,1] = div luz lxn
                lxp:f32[] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] lxc
                lxq:f32[512] = div lvd lxp
                lxr:f32[] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] lxc
                lxs:f32[189,512] = div lvh lxr
                lxt:f32[] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] lxc
                lxu:f32[512] = div lvl lxt
                lxv:f32[] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] lxc
                lxw:f32[512,512] = div lvp lxv
                lxx:f32[] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] lxc
                lxy:f32[1] = div lvt lxx
                lxz:f32[] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] lxc
                lya:f32[512,1] = div lvx lxz
                lyb:f32[512] = add lxe 0.0
                lyc:f32[512] = sqrt lyb
                lyd:f32[512] = add lyc 9.99999993922529e-09
                lye:f32[512] = div lwe lyd
                lyf:f32[189,512] = add lxg 0.0
                lyg:f32[189,512] = sqrt lyf
                lyh:f32[189,512] = add lyg 9.99999993922529e-09
                lyi:f32[189,512] = div lwg lyh
                lyj:f32[512] = add lxi 0.0
                lyk:f32[512] = sqrt lyj
                lyl:f32[512] = add lyk 9.99999993922529e-09
                lym:f32[512] = div lwi lyl
                lyn:f32[512,512] = add lxk 0.0
                lyo:f32[512,512] = sqrt lyn
                lyp:f32[512,512] = add lyo 9.99999993922529e-09
                lyq:f32[512,512] = div lwk lyp
                lyr:f32[1] = add lxm 0.0
                lys:f32[1] = sqrt lyr
                lyt:f32[1] = add lys 9.99999993922529e-09
                lyu:f32[1] = div lwm lyt
                lyv:f32[512,1] = add lxo 0.0
                lyw:f32[512,1] = sqrt lyv
                lyx:f32[512,1] = add lyw 9.99999993922529e-09
                lyy:f32[512,1] = div lwo lyx
                lyz:f32[512] = add lxq 0.0
                lza:f32[512] = sqrt lyz
                lzb:f32[512] = add lza 9.99999993922529e-09
                lzc:f32[512] = div lwq lzb
                lzd:f32[189,512] = add lxs 0.0
                lze:f32[189,512] = sqrt lzd
                lzf:f32[189,512] = add lze 9.99999993922529e-09
                lzg:f32[189,512] = div lws lzf
                lzh:f32[512] = add lxu 0.0
                lzi:f32[512] = sqrt lzh
                lzj:f32[512] = add lzi 9.99999993922529e-09
                lzk:f32[512] = div lwu lzj
                lzl:f32[512,512] = add lxw 0.0
                lzm:f32[512,512] = sqrt lzl
                lzn:f32[512,512] = add lzm 9.99999993922529e-09
                lzo:f32[512,512] = div lww lzn
                lzp:f32[1] = add lxy 0.0
                lzq:f32[1] = sqrt lzp
                lzr:f32[1] = add lzq 9.99999993922529e-09
                lzs:f32[1] = div lwy lzr
                lzt:f32[512,1] = add lya 0.0
                lzu:f32[512,1] = sqrt lzt
                lzv:f32[512,1] = add lzu 9.99999993922529e-09
                lzw:f32[512,1] = div lxa lzv
                lzx:f32[512] = mul -0.00019999999494757503 lye
                lzy:f32[189,512] = mul -0.00019999999494757503 lyi
                lzz:f32[512] = mul -0.00019999999494757503 lym
                maa:f32[512,512] = mul -0.00019999999494757503 lyq
                mab:f32[1] = mul -0.00019999999494757503 lyu
                mac:f32[512,1] = mul -0.00019999999494757503 lyy
                mad:f32[512] = mul -0.00019999999494757503 lzc
                mae:f32[189,512] = mul -0.00019999999494757503 lzg
                maf:f32[512] = mul -0.00019999999494757503 lzk
                mag:f32[512,512] = mul -0.00019999999494757503 lzo
                mah:f32[1] = mul -0.00019999999494757503 lzs
                mai:f32[512,1] = mul -0.00019999999494757503 lzw
                maj:f32[512] = add lew lzx
                mak:f32[189,512] = add lex lzy
                mal:f32[512] = add ley lzz
                mam:f32[512,512] = add lez maa
                man:f32[1] = add lfa mab
                mao:f32[512,1] = add lfb mac
                map:f32[512] = add lfc mad
                maq:f32[189,512] = add lfd mae
                mar:f32[512] = add lfe maf
                mas:f32[512,512] = add lff mag
                mat:f32[1] = add lfg mah
                mau:f32[512,1] = add lfh mai
                mav:f64[180,512] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] lds
                maw:f64[512] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] ldr
                max:f64[271,512] = dot_general[
                  dimension_numbers=(([1], [0]), ([], []))
                ] lgf mav
                may:f64[1,512] = reshape[dimensions=None new_sizes=(1, 512)] maw
                maz:f64[271,512] = add max may
                mba:f64[271,512] mbb:f64[271,512] mbc:f64[271,512] = pjit[
                  name=silu
                  jaxpr=silu3
                ] maz
                mbd:f64[512,512] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] ldu
                mbe:f64[512] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] ldt
                mbf:f64[271,512] = dot_general[
                  dimension_numbers=(([1], [0]), ([], []))
                ] mba mbd
                mbg:f64[1,512] = reshape[dimensions=None new_sizes=(1, 512)] mbe
                mbh:f64[271,512] = add mbf mbg
                mbi:f64[271,512] mbj:f64[271,512] mbk:f64[271,512] = pjit[
                  name=silu
                  jaxpr=silu3
                ] mbh
                mbl:f64[512,18] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] ldw
                mbm:f64[18] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] ldv
                mbn:f64[271,18] = dot_general[
                  dimension_numbers=(([1], [0]), ([], []))
                ] mbi mbl
                mbo:f64[1,18] = reshape[dimensions=None new_sizes=(1, 18)] mbm
                mbp:f64[271,18] = add mbn mbo
                mbq:f64[271,9] = slice[
                  limit_indices=(271, 9)
                  start_indices=(0, 0)
                  strides=None
                ] mbp
                mbr:f64[271,9] = slice[
                  limit_indices=(271, 18)
                  start_indices=(0, 9)
                  strides=None
                ] mbp
                mbs:f64[271,9] mbt:f64[271,9] = pjit[
                  name=softplus
                  jaxpr=softplus2
                ] mbr
                mbu:f64[271,9] = add mbs 0.001
                mbv:key<fry>[] = random_wrap[impl=fry] lgv
                mbw:f64[271,9] = pjit[name=_normal jaxpr=_normal] mbv
                mbx:f64[271,9] = mul mbw mbu
                mby:f64[271,9] = add mbx mbq
                mbz:f64[271,9] = slice[
                  limit_indices=(271, 9)
                  start_indices=(0, 0)
                  strides=None
                ] mbp
                mca:f64[271,9] = slice[
                  limit_indices=(271, 18)
                  start_indices=(0, 9)
                  strides=None
                ] mbp
                mcb:f64[271,9] mcc:f64[271,9] = pjit[
                  name=softplus
                  jaxpr=softplus2
                ] mca
                mcd:f64[271,9] = add mcb 0.001
                mce:f64[271,9] = div mby mcd
                mcf:f64[271,9] = integer_pow[y=-2] mcd
                mcg:f64[271,9] = div mbz mcd
                mch:f64[271,9] = integer_pow[y=-2] mcd
                mci:f64[271,9] = sub mce mcg
                mcj:f64[271,9] = integer_pow[y=2] mci
                mck:f64[271,9] = integer_pow[y=1] mci
                mcl:f64[271,9] = mul 2.0 mck
                mcm:f64[271,9] = mul -0.5 mcj
                mcn:f64[] = log 6.283185307179586
                mco:f64[] = mul 0.5 mcn
                mcp:f64[271,9] = log mcd
                mcq:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] mco
                mcr:f64[271,9] = add mcq mcp
                mcs:f64[271,9] = sub mcm mcr
                mct:f64[] = log 2.0
                mcu:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] mct
                mcv:f64[271,9] = sub mcu mby
                mcw:f64[271,9] = mul -2.0 mby
                mcx:f64[271,9] mcy:f64[271,9] = pjit[
                  name=softplus
                  jaxpr=softplus2
                ] mcw
                mcz:f64[271,9] = sub mcv mcx
                mda:f64[271,9] = mul 2.0 mcz
                mdb:f64[271,9] = sub mcs mda
                mdc:f64[271] = reduce_sum[axes=(1,)] mdb
                mdd:f64[271,9] = tanh mby
                mde:f64[271,9] = sub 1.0 mdd
                mdf:f64[271,189] = concatenate[dimension=1] lgf mdd
                mdg:f64[189,512] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] lex
                mdh:f64[512] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] lew
                mdi:f64[271,512] = dot_general[
                  dimension_numbers=(([1], [0]), ([], []))
                ] mdf mdg
                mdj:f64[1,512] = reshape[dimensions=None new_sizes=(1, 512)] mdh
                mdk:f64[271,512] = add mdi mdj
                mdl:f64[271,512] mdm:f64[271,512] mdn:f64[271,512] = pjit[
                  name=silu
                  jaxpr=silu3
                ] mdk
                mdo:f64[512,512] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] lez
                mdp:f64[512] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] ley
                mdq:f64[271,512] = dot_general[
                  dimension_numbers=(([1], [0]), ([], []))
                ] mdl mdo
                mdr:f64[1,512] = reshape[dimensions=None new_sizes=(1, 512)] mdp
                mds:f64[271,512] = add mdq mdr
                mdt:f64[271,512] mdu:f64[271,512] mdv:f64[271,512] = pjit[
                  name=silu
                  jaxpr=silu3
                ] mds
                mdw:f64[512,1] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] lfb
                mdx:f64[1] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] lfa
                mdy:f64[271,1] = dot_general[
                  dimension_numbers=(([1], [0]), ([], []))
                ] mdt mdw
                mdz:f64[1,1] = reshape[dimensions=None new_sizes=(1, 1)] mdx
                mea:f64[271,1] = add mdy mdz
                meb:f64[189,512] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] lfd
                mec:f64[512] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] lfc
                med:f64[271,512] = dot_general[
                  dimension_numbers=(([1], [0]), ([], []))
                ] mdf meb
                mee:f64[1,512] = reshape[dimensions=None new_sizes=(1, 512)] mec
                mef:f64[271,512] = add med mee
                meg:f64[271,512] meh:f64[271,512] mei:f64[271,512] = pjit[
                  name=silu
                  jaxpr=silu3
                ] mef
                mej:f64[512,512] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] lff
                mek:f64[512] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] lfe
                mel:f64[271,512] = dot_general[
                  dimension_numbers=(([1], [0]), ([], []))
                ] meg mej
                mem:f64[1,512] = reshape[dimensions=None new_sizes=(1, 512)] mek
                men:f64[271,512] = add mel mem
                meo:f64[271,512] mep:f64[271,512] meq:f64[271,512] = pjit[
                  name=silu
                  jaxpr=silu3
                ] men
                mer:f64[512,1] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] lfh
                mes:f64[1] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] lfg
                met:f64[271,1] = dot_general[
                  dimension_numbers=(([1], [0]), ([], []))
                ] meo mer
                meu:f64[1,1] = reshape[dimensions=None new_sizes=(1, 1)] mes
                mev:f64[271,1] = add met meu
                mew:f64[271,2] = concatenate[dimension=1] mea mev
                mex:f64[271] = reduce_min[axes=(1,)] mew
                mey:f64[271,1] = reshape[dimensions=None new_sizes=(271, 1)] mex
                mez:bool[271,2] = eq mew mey
                mfa:f64[271,2] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] mez
                mfb:f64[271] = reduce_sum[axes=(1,)] mfa
                mfc:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] lkg
                mfd:f64[271] = mul mfc mdc
                mfe:f64[271] = sub mfd mex
                mff:f64[] = reduce_sum[axes=(0,)] mfe
                mfg:f64[] = div mff 271.0
                mfh:f64[] = div 1.0 271.0
                mfi:f64[271] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(271,)
                ] mfh
                mfj:f64[271] = neg mfi
                mfk:f64[271] = div mfj mfb
                mfl:f64[271,2] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(271, 2)
                ] mfk
                mfm:f64[271,2] = mul mfl mfa
                mfn:f64[271,1] = slice[
                  limit_indices=(271, 1)
                  start_indices=(0, 0)
                  strides=None
                ] mfm
                mfo:f64[271,1] = slice[
                  limit_indices=(271, 2)
                  start_indices=(0, 1)
                  strides=None
                ] mfm
                mfp:f64[271,512] = dot_general[
                  dimension_numbers=(([1], [1]), ([], []))
                ] mfo mer
                mfq:f64[271,512] = pjit[name=silu jaxpr=silu4] mep men meq mfp
                mfr:f64[271,512] = dot_general[
                  dimension_numbers=(([1], [1]), ([], []))
                ] mfq mej
                mfs:f64[271,512] = pjit[name=silu jaxpr=silu4] meh mef mei mfr
                mft:f64[271,189] = dot_general[
                  dimension_numbers=(([1], [1]), ([], []))
                ] mfs meb
                mfu:f64[271,512] = dot_general[
                  dimension_numbers=(([1], [1]), ([], []))
                ] mfn mdw
                mfv:f64[271,512] = pjit[name=silu jaxpr=silu4] mdu mds mdv mfu
                mfw:f64[271,512] = dot_general[
                  dimension_numbers=(([1], [1]), ([], []))
                ] mfv mdo
                mfx:f64[271,512] = pjit[name=silu jaxpr=silu4] mdm mdk mdn mfw
                mfy:f64[271,189] = dot_general[
                  dimension_numbers=(([1], [1]), ([], []))
                ] mfx mdg
                mfz:f64[271,189] = add_any mft mfy
                mga:f64[271,9] = slice[
                  limit_indices=(271, 189)
                  start_indices=(0, 180)
                  strides=None
                ] mfz
                mgb:f64[271,9] = mul mga mde
                mgc:f64[271,9] = mul mgb mdd
                mgd:f64[271,9] = add_any mgb mgc
                mge:f64[271] = mul mfc mfi
                mgf:f64[271,9] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(271, 9)
                ] mge
                mgg:f64[271,9] = neg mgf
                mgh:f64[271,9] = mul 2.0 mgg
                mgi:f64[271,9] = neg mgh
                mgj:f64[271,9] = pjit[name=softplus jaxpr=softplus3] mcy mgi
                mgk:f64[271,9] = mul -2.0 mgj
                mgl:f64[271,9] = add_any mgd mgk
                mgm:f64[271,9] = neg mgh
                mgn:f64[271,9] = add_any mgl mgm
                mgo:f64[271,9] = neg mgf
                mgp:f64[271,9] = div mgo mcd
                mgq:f64[271,9] = mul -0.5 mgf
                mgr:f64[271,9] = mul mgq mcl
                mgs:f64[271,9] = neg mgr
                mgt:f64[271,9] = mul mgs mch
                mgu:f64[271,9] = mul mgt mbz
                mgv:f64[271,9] = neg mgu
                mgw:f64[271,9] = div mgs mcd
                mgx:f64[271,9] = add_any mgp mgv
                mgy:f64[271,18] = pad[padding_config=((0, 0, 0), (0, 9, 0))] mgw
                  0.0
                mgz:f64[271,9] = mul mgr mcf
                mha:f64[271,9] = mul mgz mby
                mhb:f64[271,9] = neg mha
                mhc:f64[271,9] = div mgr mcd
                mhd:f64[271,9] = add_any mgn mhc
                mhe:f64[271,9] = add_any mgx mhb
                mhf:f64[271,9] = pjit[name=softplus jaxpr=softplus3] mcc mhe
                mhg:f64[271,18] = pad[padding_config=((0, 0, 0), (9, 0, 0))] mhf
                  0.0
                mhh:f64[271,18] = add_any mgy mhg
                mhi:f64[271,18] = pad[padding_config=((0, 0, 0), (0, 9, 0))] mhd
                  0.0
                mhj:f64[271,18] = add_any mhh mhi
                mhk:f64[271,9] = mul mbw mhd
                mhl:f64[271,9] = pjit[name=softplus jaxpr=softplus3] mbt mhk
                mhm:f64[271,18] = pad[padding_config=((0, 0, 0), (9, 0, 0))] mhl
                  0.0
                mhn:f64[271,18] = add_any mhj mhm
                mho:f64[18] = reduce_sum[axes=(0,)] mhn
                mhp:f64[1,18] = reshape[dimensions=None new_sizes=(1, 18)] mho
                mhq:f64[18] = reshape[dimensions=None new_sizes=(18,)] mhp
                mhr:f32[18] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] mhq
                mhs:f64[18,512] = dot_general[
                  dimension_numbers=(([0], [0]), ([], []))
                ] mhn mbi
                mht:f64[512,18] = transpose[permutation=(1, 0)] mhs
                mhu:f32[512,18] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] mht
                mhv:f64[271,512] = dot_general[
                  dimension_numbers=(([1], [1]), ([], []))
                ] mhn mbl
                mhw:f64[271,512] = pjit[name=silu jaxpr=silu4] mbj mbh mbk mhv
                mhx:f64[512] = reduce_sum[axes=(0,)] mhw
                mhy:f64[1,512] = reshape[dimensions=None new_sizes=(1, 512)] mhx
                mhz:f64[512] = reshape[dimensions=None new_sizes=(512,)] mhy
                mia:f32[512] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] mhz
                mib:f64[512,512] = dot_general[
                  dimension_numbers=(([0], [0]), ([], []))
                ] mhw mba
                mic:f64[512,512] = transpose[permutation=(1, 0)] mib
                mid:f32[512,512] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] mic
                mie:f64[271,512] = dot_general[
                  dimension_numbers=(([1], [1]), ([], []))
                ] mhw mbd
                mif:f64[271,512] = pjit[name=silu jaxpr=silu4] mbb maz mbc mie
                mig:f64[512] = reduce_sum[axes=(0,)] mif
                mih:f64[1,512] = reshape[dimensions=None new_sizes=(1, 512)] mig
                mii:f64[512] = reshape[dimensions=None new_sizes=(512,)] mih
                mij:f32[512] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] mii
                mik:f64[512,180] = dot_general[
                  dimension_numbers=(([0], [0]), ([], []))
                ] mif lgf
                mil:f64[180,512] = transpose[permutation=(1, 0)] mik
                mim:f32[180,512] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] mil
                min:f32[512] = integer_pow[y=1] mij
                mio:f32[512] = mul 0.10000000149011612 min
                mip:f32[512] = mul 0.8999999761581421 ldf
                miq:f32[512] = add mio mip
                mir:f32[180,512] = integer_pow[y=1] mim
                mis:f32[180,512] = mul 0.10000000149011612 mir
                mit:f32[180,512] = mul 0.8999999761581421 ldg
                miu:f32[180,512] = add mis mit
                miv:f32[512] = integer_pow[y=1] mia
                miw:f32[512] = mul 0.10000000149011612 miv
                mix:f32[512] = mul 0.8999999761581421 ldh
                miy:f32[512] = add miw mix
                miz:f32[512,512] = integer_pow[y=1] mid
                mja:f32[512,512] = mul 0.10000000149011612 miz
                mjb:f32[512,512] = mul 0.8999999761581421 ldi
                mjc:f32[512,512] = add mja mjb
                mjd:f32[18] = integer_pow[y=1] mhr
                mje:f32[18] = mul 0.10000000149011612 mjd
                mjf:f32[18] = mul 0.8999999761581421 ldj
                mjg:f32[18] = add mje mjf
                mjh:f32[512,18] = integer_pow[y=1] mhu
                mji:f32[512,18] = mul 0.10000000149011612 mjh
                mjj:f32[512,18] = mul 0.8999999761581421 ldk
                mjk:f32[512,18] = add mji mjj
                mjl:f32[512] = integer_pow[y=2] mij
                mjm:f32[512] = mul 0.0010000000474974513 mjl
                mjn:f32[512] = mul 0.9990000128746033 ldl
                mjo:f32[512] = add mjm mjn
                mjp:f32[180,512] = integer_pow[y=2] mim
                mjq:f32[180,512] = mul 0.0010000000474974513 mjp
                mjr:f32[180,512] = mul 0.9990000128746033 ldm
                mjs:f32[180,512] = add mjq mjr
                mjt:f32[512] = integer_pow[y=2] mia
                mju:f32[512] = mul 0.0010000000474974513 mjt
                mjv:f32[512] = mul 0.9990000128746033 ldn
                mjw:f32[512] = add mju mjv
                mjx:f32[512,512] = integer_pow[y=2] mid
                mjy:f32[512,512] = mul 0.0010000000474974513 mjx
                mjz:f32[512,512] = mul 0.9990000128746033 ldo
                mka:f32[512,512] = add mjy mjz
                mkb:f32[18] = integer_pow[y=2] mhr
                mkc:f32[18] = mul 0.0010000000474974513 mkb
                mkd:f32[18] = mul 0.9990000128746033 ldp
                mke:f32[18] = add mkc mkd
                mkf:f32[512,18] = integer_pow[y=2] mhu
                mkg:f32[512,18] = mul 0.0010000000474974513 mkf
                mkh:f32[512,18] = mul 0.9990000128746033 ldq
                mki:f32[512,18] = add mkg mkh
                mkj:bool[] = lt lde 2147483647
                mkk:i32[] = add lde 1
                mkl:i32[] = pjit[name=_where jaxpr=_where5] mkj mkk 2147483647
                mkm:f64[] = pow 0.9 mkl
                mkn:f64[] = sub 1.0 mkm
                mko:f32[] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] mkn
                mkp:f32[512] = div miq mko
                mkq:f32[] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] mkn
                mkr:f32[180,512] = div miu mkq
                mks:f32[] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] mkn
                mkt:f32[512] = div miy mks
                mku:f32[] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] mkn
                mkv:f32[512,512] = div mjc mku
                mkw:f32[] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] mkn
                mkx:f32[18] = div mjg mkw
                mky:f32[] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] mkn
                mkz:f32[512,18] = div mjk mky
                mla:f64[] = pow 0.999 mkl
                mlb:f64[] = sub 1.0 mla
                mlc:f32[] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] mlb
                mld:f32[512] = div mjo mlc
                mle:f32[] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] mlb
                mlf:f32[180,512] = div mjs mle
                mlg:f32[] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] mlb
                mlh:f32[512] = div mjw mlg
                mli:f32[] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] mlb
                mlj:f32[512,512] = div mka mli
                mlk:f32[] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] mlb
                mll:f32[18] = div mke mlk
                mlm:f32[] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] mlb
                mln:f32[512,18] = div mki mlm
                mlo:f32[512] = add mld 0.0
                mlp:f32[512] = sqrt mlo
                mlq:f32[512] = add mlp 9.99999993922529e-09
                mlr:f32[512] = div mkp mlq
                mls:f32[180,512] = add mlf 0.0
                mlt:f32[180,512] = sqrt mls
                mlu:f32[180,512] = add mlt 9.99999993922529e-09
                mlv:f32[180,512] = div mkr mlu
                mlw:f32[512] = add mlh 0.0
                mlx:f32[512] = sqrt mlw
                mly:f32[512] = add mlx 9.99999993922529e-09
                mlz:f32[512] = div mkt mly
                mma:f32[512,512] = add mlj 0.0
                mmb:f32[512,512] = sqrt mma
                mmc:f32[512,512] = add mmb 9.99999993922529e-09
                mmd:f32[512,512] = div mkv mmc
                mme:f32[18] = add mll 0.0
                mmf:f32[18] = sqrt mme
                mmg:f32[18] = add mmf 9.99999993922529e-09
                mmh:f32[18] = div mkx mmg
                mmi:f32[512,18] = add mln 0.0
                mmj:f32[512,18] = sqrt mmi
                mmk:f32[512,18] = add mmj 9.99999993922529e-09
                mml:f32[512,18] = div mkz mmk
                mmm:f32[512] = mul -0.00019999999494757503 mlr
                mmn:f32[180,512] = mul -0.00019999999494757503 mlv
                mmo:f32[512] = mul -0.00019999999494757503 mlz
                mmp:f32[512,512] = mul -0.00019999999494757503 mmd
                mmq:f32[18] = mul -0.00019999999494757503 mmh
                mmr:f32[512,18] = mul -0.00019999999494757503 mml
                mms:f32[512] = add ldr mmm
                mmt:f32[180,512] = add lds mmn
                mmu:f32[512] = add ldt mmo
                mmv:f32[512,512] = add ldu mmp
                mmw:f32[18] = add ldv mmq
                mmx:f32[512,18] = add ldw mmr
                mmy:f32[512] = mul lfi 0.9990000128746033
                mmz:f32[512] = mul maj 0.0010000000474974513
                mna:f32[512] = add mmy mmz
                mnb:f32[189,512] = mul lfj 0.9990000128746033
                mnc:f32[189,512] = mul mak 0.0010000000474974513
                mnd:f32[189,512] = add mnb mnc
                mne:f32[512] = mul lfk 0.9990000128746033
                mnf:f32[512] = mul mal 0.0010000000474974513
                mng:f32[512] = add mne mnf
                mnh:f32[512,512] = mul lfl 0.9990000128746033
                mni:f32[512,512] = mul mam 0.0010000000474974513
                mnj:f32[512,512] = add mnh mni
                mnk:f32[1] = mul lfm 0.9990000128746033
                mnl:f32[1] = mul man 0.0010000000474974513
                mnm:f32[1] = add mnk mnl
                mnn:f32[512,1] = mul lfn 0.9990000128746033
                mno:f32[512,1] = mul mao 0.0010000000474974513
                mnp:f32[512,1] = add mnn mno
                mnq:f32[512] = mul lfo 0.9990000128746033
                mnr:f32[512] = mul map 0.0010000000474974513
                mns:f32[512] = add mnq mnr
                mnt:f32[189,512] = mul lfp 0.9990000128746033
                mnu:f32[189,512] = mul maq 0.0010000000474974513
                mnv:f32[189,512] = add mnt mnu
                mnw:f32[512] = mul lfq 0.9990000128746033
                mnx:f32[512] = mul mar 0.0010000000474974513
                mny:f32[512] = add mnw mnx
                mnz:f32[512,512] = mul lfr 0.9990000128746033
                moa:f32[512,512] = mul mas 0.0010000000474974513
                mob:f32[512,512] = add mnz moa
                moc:f32[1] = mul lfs 0.9990000128746033
                mod:f32[1] = mul mat 0.0010000000474974513
                moe:f32[1] = add moc mod
                mof:f32[512,1] = mul lft 0.9990000128746033
                mog:f32[512,1] = mul mau 0.0010000000474974513
                moh:f32[512,1] = add mof mog
                moi:f32[] = exp lkf
                moj:f64[] = add lfu 1.0
              in (mkl, miq, miu, miy, mjc, mjg, mjk, mjo, mjs, mjw, mka, mke, mki,
                mms, mmt, mmu, mmv, mmw, mmx, lwa, lsj, lsn, lsr, lsv, lsz, ltd,
                lth, ltl, ltp, ltt, ltx, lub, luf, luj, lun, lur, luv, luz, lvd,
                lvh, lvl, lvp, lvt, lvx, maj, mak, mal, mam, man, mao, map, maq,
                mar, mas, mat, mau, mna, mnd, mng, mnj, mnm, mnp, mns, mnv, mny,
                mob, moe, moh, moj, lfv, ljr, ljk, ljo, lkf, lga, lgb, lgc, lgd,
                lgp, mfg, moi, lja, lqa) }
            length=60
            linear=(False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False)
            num_carry=79
            num_consts=0
            reverse=False
            unroll=1
          ] kqm kqn kqo kqp kqq kqr kqs kqt kqu kqv kqw kqx kqy kqz kra krb krc krd
            kre krf krg krh kri krj krk krl krm krn kro krp krq krr krs krt kru krv
            krw krx kry krz ksa ksb ksc ksd kse ksf ksg ksh ksi ksj ksk ksl ksm ksn
            kso ksp ksq ksr kss kst ksu ksv ksw ksx ksy ksz kta ktb ktc ktd kte ktf
            ktg kth kti ktj ktk ktl kxq kzu kzv kzw kzx kzy kzz
          mok:i32[] = sub kqj kqk
        in (laa, lab, lac, lad, lae, laf, lag, lah, lai, laj, lak, lal, lam, lan,
          lao, lap, laq, lar, las, lat, lau, lav, law, lax, lay, laz, lba, lbb, lbc,
          lbd, lbe, lbf, lbg, lbh, lbi, lbj, lbk, lbl, lbm, lbn, lbo, lbp, lbq, lbr,
          lbs, lbt, lbu, lbv, lbw, lbx, lby, lbz, lca, lcb, lcc, lcd, lce, lcf, lcg,
          lch, lci, lcj, lck, lcl, lcm, lcn, lco, lcp, lcq, lcr, lcs, lct, lcu, lcv,
          lcw, lcx, lcy, lcz, ktv, lda, ldb, ldc, mok, ldd, kwr) }
    ] bjr bjs bjt bju bfv bfw bfx bfy bfz bga bgb bgc bgd bge bgf bgg bgh bgi bgj
      bgk bgl bgm bgn bgo bgp bgq bgr bgs bgt bgu bgv bgw bgx bgy bgz bha bhb bhc
      bhd bhe bhf bhg bhh bhi bhj bhk bhl bhm bhn bho bhp bhq bhr bhs bht bhu bhv
      bhw bhx bhy bhz bia bib bic bid bie bif big bih bii bij bik bil bim bin bio
      bip biq bir bis bit biu bjv biz bja bjb bji
  in (knb, knc, knd, kne, knf, kng, knh, kni, knj, knk, knl, knm, knn, kno, knp,
    knq, knr, kns, knt, knu, knv, knw, knx, kny, knz, koa, kob, koc, kod, koe, kof,
    kog, koh, koi, koj, kok, kol, kom, kon, koo, kop, koq, kor, kos, kot, kou, kov,
    kow, kox, koy, koz, kpa, kpb, kpc, kpd, kpe, kpf, kpg, kph, kpi, kpj, kpk, kpl,
    kpm, kpn, kpo, kpp, kpq, kpr, kps, kpt, kpu, kpv, kpw, kpx, kpy, kpz, kqa, bjr,
    bjs, bjt, kqb, biz, bja, bjb, kqh, bjv, kqc, kqd, kqe, kqf, kqg) }, ())
During handling of the above exception, another exception occurred:
Traceback (most recent call last):
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/mlir.py", line 1810, in _lower_jaxpr_to_fun_cached
    func_op = ctx.cached_primitive_lowerings[key]
KeyError: (None, let silu = { lambda ; a:f64[400,512]. let
    b:f64[400,512] = logistic a
    c:f64[400,512] = mul a b
  in (c,) } in
let silu1 = { lambda ; d:f64[400,7,400]. let
    e:f64[400,7,400] = logistic d
    f:f64[400,7,400] = mul d e
  in (f,) } in
let softplus = { lambda ; g:f64[400,7,36]. let
    h:f64[400,7,36] = custom_jvp_call[
      call_jaxpr={ lambda ; i:f64[400,7,36] j:i64[]. let
          k:f64[400,7,36] = pjit[
            name=logaddexp
            jaxpr={ lambda ; l:f64[400,7,36] m:i64[]. let
                n:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] m
                o:f64[400,7,36] = max l n
                p:f64[400,7,36] = sub l n
                q:bool[400,7,36] = ne p p
                r:f64[400,7,36] = add l n
                s:f64[400,7,36] = abs p
                t:f64[400,7,36] = neg s
                u:f64[400,7,36] = exp t
                v:f64[400,7,36] = log1p u
                w:f64[400,7,36] = add o v
                x:f64[400,7,36] = select_n q w r
              in (x,) }
          ] i j
        in (k,) }
      jvp_jaxpr_thunk=<function _memoize.<locals>.memoized at 0x7d832d5444c0>
      num_consts=0
      symbolic_zeros=False
    ] g 0
  in (h,) } in
let remainder = { lambda ; y:f64[400] z:i64[]. let
    ba:f64[] = convert_element_type[new_dtype=float64 weak_type=False] z
    bb:f64[400] = rem y ba
    bc:bool[400] = ne bb 0.0
    bd:bool[400] = lt bb 0.0
    be:bool[] = lt ba 0.0
    bf:bool[400] = ne bd be
    bg:bool[400] = and bf bc
    bh:f64[400] = add bb ba
    bi:f64[400] = select_n bg bb bh
  in (bi,) } in
let clip = { lambda ; bj:f64[400] bk:f64[] bl:f64[]. let
    bm:f64[400] = max bk bj
    bn:f64[400] = min bl bm
  in (bn,) } in
let clip1 = { lambda ; bo:f64[400] bp:f64[] bq:f64[]. let
    br:f64[] = convert_element_type[new_dtype=float64 weak_type=False] bp
    bs:f64[400] = max br bo
    bt:f64[] = convert_element_type[new_dtype=float64 weak_type=False] bq
    bu:f64[400] = min bt bs
  in (bu,) } in
let jaxpr = { lambda ; i:f64[400,7,36] j:i64[]. let
    k:f64[400,7,36] = pjit[
      name=logaddexp
      jaxpr={ lambda ; l:f64[400,7,36] m:i64[]. let
          n:f64[] = convert_element_type[new_dtype=float64 weak_type=False] m
          o:f64[400,7,36] = max l n
          p:f64[400,7,36] = sub l n
          q:bool[400,7,36] = ne p p
          r:f64[400,7,36] = add l n
          s:f64[400,7,36] = abs p
          t:f64[400,7,36] = neg s
          u:f64[400,7,36] = exp t
          v:f64[400,7,36] = log1p u
          w:f64[400,7,36] = add o v
          x:f64[400,7,36] = select_n q w r
        in (x,) }
    ] i j
  in (k,) } in
let clip2 = { lambda ; bv:i64[] bw:i64[] bx:i64[]. let
    by:i64[] = max bw bv
    bz:i64[] = min bx by
  in (bz,) } in
let cross = { lambda ; ca:f64[400,3] cb:f64[400,3]. let
    cc:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    cd:f64[400] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 1)
      unique_indices=True
    ] ca cc
    ce:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    cf:f64[400] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 1)
      unique_indices=True
    ] ca ce
    cg:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    ch:f64[400] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 1)
      unique_indices=True
    ] ca cg
    ci:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    cj:f64[400] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 1)
      unique_indices=True
    ] cb ci
    ck:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    cl:f64[400] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 1)
      unique_indices=True
    ] cb ck
    cm:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    cn:f64[400] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 1)
      unique_indices=True
    ] cb cm
    co:f64[400] = mul cf cn
    cp:f64[400] = mul ch cl
    cq:f64[400] = sub co cp
    cr:f64[400] = mul ch cj
    cs:f64[400] = mul cd cn
    ct:f64[400] = sub cr cs
    cu:f64[400] = mul cd cl
    cv:f64[400] = mul cf cj
    cw:f64[400] = sub cu cv
    cx:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] cq
    cy:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] ct
    cz:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] cw
    da:f64[400,3] = concatenate[dimension=1] cx cy cz
  in (da,) } in
let cross1 = { lambda ; db:f64[400,13,3] dc:f64[13,3]. let
    dd:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    de:f64[400,13] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 13, 1)
      unique_indices=True
    ] db dd
    df:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    dg:f64[400,13] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 13, 1)
      unique_indices=True
    ] db df
    dh:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    di:f64[400,13] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 13, 1)
      unique_indices=True
    ] db dh
    dj:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    dk:f64[13] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(13, 1)
      unique_indices=True
    ] dc dj
    dl:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    dm:f64[13] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(13, 1)
      unique_indices=True
    ] dc dl
    dn:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    do:f64[13] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(13, 1)
      unique_indices=True
    ] dc dn
    dp:f64[1,13] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 13)] do
    dq:f64[400,13] = mul dg dp
    dr:f64[1,13] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 13)] dm
    ds:f64[400,13] = mul di dr
    dt:f64[400,13] = sub dq ds
    du:f64[1,13] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 13)] dk
    dv:f64[400,13] = mul di du
    dw:f64[1,13] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 13)] do
    dx:f64[400,13] = mul de dw
    dy:f64[400,13] = sub dv dx
    dz:f64[1,13] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 13)] dm
    ea:f64[400,13] = mul de dz
    eb:f64[1,13] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 13)] dk
    ec:f64[400,13] = mul dg eb
    ed:f64[400,13] = sub ea ec
    ee:f64[400,13,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(400, 13, 1)
    ] dt
    ef:f64[400,13,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(400, 13, 1)
    ] dy
    eg:f64[400,13,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(400, 13, 1)
    ] ed
    eh:f64[400,13,3] = concatenate[dimension=2] ee ef eg
  in (eh,) } in
let _take = { lambda ; ei:f64[400,13,3] ej:i64[4]. let
    ek:i64[4] = pjit[
      name=remainder
      jaxpr={ lambda ; el:i64[4] em:i64[]. let
          en:bool[] = eq em 0
          eo:i64[] = pjit[
            name=_where
            jaxpr={ lambda ; ep:bool[] eq:i64[] er:i64[]. let
                es:i64[] = select_n ep er eq
              in (es,) }
          ] en 1 em
          et:i64[4] = rem el eo
          eu:bool[4] = ne et 0
          ev:bool[4] = lt et 0
          ew:bool[] = lt eo 0
          ex:bool[4] = ne ev ew
          ey:bool[4] = and ex eu
          ez:i64[4] = add et eo
          fa:i64[4] = select_n ey et ez
        in (fa,) }
    ] ej 13
    fb:i64[4,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(4, 1)] ek
    fc:f64[400,4,3] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 2), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 1, 3)
      unique_indices=False
    ] ei fb
  in (fc,) } in
let _take1 = { lambda ; fd:f64[400,13,4] fe:i64[4]. let
    ff:i64[4] = pjit[
      name=remainder
      jaxpr={ lambda ; el:i64[4] em:i64[]. let
          en:bool[] = eq em 0
          eo:i64[] = pjit[
            name=_where
            jaxpr={ lambda ; ep:bool[] eq:i64[] er:i64[]. let
                es:i64[] = select_n ep er eq
              in (es,) }
          ] en 1 em
          et:i64[4] = rem el eo
          eu:bool[4] = ne et 0
          ev:bool[4] = lt et 0
          ew:bool[] = lt eo 0
          ex:bool[4] = ne ev ew
          ey:bool[4] = and ex eu
          ez:i64[4] = add et eo
          fa:i64[4] = select_n ey et ez
        in (fa,) }
    ] fe 13
    fg:i64[4,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(4, 1)] ff
    fh:f64[400,4,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 2), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 1, 4)
      unique_indices=False
    ] fd fg
  in (fh,) } in
let _take2 = { lambda ; fi:f64[400,1,3] fj:i64[4]. let
    fk:i64[4] = pjit[
      name=remainder
      jaxpr={ lambda ; el:i64[4] em:i64[]. let
          en:bool[] = eq em 0
          eo:i64[] = pjit[
            name=_where
            jaxpr={ lambda ; ep:bool[] eq:i64[] er:i64[]. let
                es:i64[] = select_n ep er eq
              in (es,) }
          ] en 1 em
          et:i64[4] = rem el eo
          eu:bool[4] = ne et 0
          ev:bool[4] = lt et 0
          ew:bool[] = lt eo 0
          ex:bool[4] = ne ev ew
          ey:bool[4] = and ex eu
          ez:i64[4] = add et eo
          fa:i64[4] = select_n ey et ez
        in (fa,) }
    ] fj 1
    fl:i64[4,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(4, 1)] fk
    fm:f64[400,4,3] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 2), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 1, 3)
      unique_indices=False
    ] fi fl
  in (fm,) } in
let cross2 = { lambda ; fn:f64[400,4,3] fo:f64[400,4,3]. let
    fp:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    fq:f64[400,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 4, 1)
      unique_indices=True
    ] fn fp
    fr:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    fs:f64[400,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 4, 1)
      unique_indices=True
    ] fn fr
    ft:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    fu:f64[400,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 4, 1)
      unique_indices=True
    ] fn ft
    fv:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    fw:f64[400,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 4, 1)
      unique_indices=True
    ] fo fv
    fx:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    fy:f64[400,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 4, 1)
      unique_indices=True
    ] fo fx
    fz:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    ga:f64[400,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 4, 1)
      unique_indices=True
    ] fo fz
    gb:f64[400,4] = mul fs ga
    gc:f64[400,4] = mul fu fy
    gd:f64[400,4] = sub gb gc
    ge:f64[400,4] = mul fu fw
    gf:f64[400,4] = mul fq ga
    gg:f64[400,4] = sub ge gf
    gh:f64[400,4] = mul fq fy
    gi:f64[400,4] = mul fs fw
    gj:f64[400,4] = sub gh gi
    gk:f64[400,4,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(400, 4, 1)
    ] gd
    gl:f64[400,4,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(400, 4, 1)
    ] gg
    gm:f64[400,4,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(400, 4, 1)
    ] gj
    gn:f64[400,4,3] = concatenate[dimension=2] gk gl gm
  in (gn,) } in
let _take3 = { lambda ; go:f64[400,13,3] gp:i64[13]. let
    gq:i64[13] = pjit[
      name=remainder
      jaxpr={ lambda ; gr:i64[13] gs:i64[]. let
          gt:bool[] = eq gs 0
          gu:i64[] = pjit[
            name=_where
            jaxpr={ lambda ; ep:bool[] eq:i64[] er:i64[]. let
                es:i64[] = select_n ep er eq
              in (es,) }
          ] gt 1 gs
          gv:i64[13] = rem gr gu
          gw:bool[13] = ne gv 0
          gx:bool[13] = lt gv 0
          gy:bool[] = lt gu 0
          gz:bool[13] = ne gx gy
          ha:bool[13] = and gz gw
          hb:i64[13] = add gv gu
          hc:i64[13] = select_n ha gv hb
        in (hc,) }
    ] gp 13
    hd:i64[13,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(13, 1)] gq
    he:f64[400,13,3] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 2), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 1, 3)
      unique_indices=False
    ] go hd
  in (he,) } in
let jaxpr1 = { lambda ; hf:f64[] hg:f64[]. let hh:f64[] = add hf hg in (hh,) } in
let _take4 = { lambda ; hi:f64[400,14,3] hj:i32[13]. let
    hk:i32[13] = pjit[
      name=remainder
      jaxpr={ lambda ; hl:i32[13] hm:i32[]. let
          hn:bool[] = eq hm 0
          ho:i32[] = pjit[
            name=_where
            jaxpr={ lambda ; hp:bool[] hq:i32[] hr:i32[]. let
                hs:i32[] = select_n hp hr hq
              in (hs,) }
          ] hn 1 hm
          ht:i32[13] = rem hl ho
          hu:bool[13] = ne ht 0
          hv:bool[13] = lt ht 0
          hw:bool[] = lt ho 0
          hx:bool[13] = ne hv hw
          hy:bool[13] = and hx hu
          hz:i32[13] = add ht ho
          ia:i32[13] = select_n hy ht hz
        in (ia,) }
    ] hj 14
    ib:i32[13,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(13, 1)] hk
    ic:f64[400,13,3] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 2), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 1, 3)
      unique_indices=False
    ] hi ib
  in (ic,) } in
let _take5 = { lambda ; id:f64[12,1,3] ie:i64[]. let
    if:i64[] = pjit[
      name=remainder
      jaxpr={ lambda ; ig:i64[] ih:i64[]. let
          ii:bool[] = eq ih 0
          ij:i64[] = pjit[
            name=_where
            jaxpr={ lambda ; ik:bool[] il:i64[] im:i64[]. let
                in:i64[] = select_n ik im il
              in (in,) }
          ] ii 1 ih
          io:i64[] = rem ig ij
          ip:bool[] = ne io 0
          iq:bool[] = lt io 0
          ir:bool[] = lt ij 0
          is:bool[] = ne iq ir
          it:bool[] = and is ip
          iu:i64[] = add io ij
          iv:i64[] = select_n it io iu
        in (iv,) }
    ] ie 1
    iw:i64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] if
    ix:f64[12,3] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(12, 1, 3)
      unique_indices=False
    ] id iw
  in (ix,) } in
let cross3 = { lambda ; iy:f64[12,3] iz:f64[12,3]. let
    ja:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    jb:f64[12] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(12, 1)
      unique_indices=True
    ] iy ja
    jc:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    jd:f64[12] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(12, 1)
      unique_indices=True
    ] iy jc
    je:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    jf:f64[12] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(12, 1)
      unique_indices=True
    ] iy je
    jg:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    jh:f64[12] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(12, 1)
      unique_indices=True
    ] iz jg
    ji:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    jj:f64[12] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(12, 1)
      unique_indices=True
    ] iz ji
    jk:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    jl:f64[12] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(12, 1)
      unique_indices=True
    ] iz jk
    jm:f64[12] = mul jd jl
    jn:f64[12] = mul jf jj
    jo:f64[12] = sub jm jn
    jp:f64[12] = mul jf jh
    jq:f64[12] = mul jb jl
    jr:f64[12] = sub jp jq
    js:f64[12] = mul jb jj
    jt:f64[12] = mul jd jh
    ju:f64[12] = sub js jt
    jv:f64[12,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(12, 1)] jo
    jw:f64[12,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(12, 1)] jr
    jx:f64[12,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(12, 1)] ju
    jy:f64[12,3] = concatenate[dimension=1] jv jw jx
  in (jy,) } in
let _take6 = { lambda ; jz:f64[400,13,3] ka:i64[18]. let
    kb:i64[18] = pjit[
      name=remainder
      jaxpr={ lambda ; kc:i64[18] kd:i64[]. let
          ke:bool[] = eq kd 0
          kf:i64[] = pjit[
            name=_where
            jaxpr={ lambda ; ep:bool[] eq:i64[] er:i64[]. let
                es:i64[] = select_n ep er eq
              in (es,) }
          ] ke 1 kd
          kg:i64[18] = rem kc kf
          kh:bool[18] = ne kg 0
          ki:bool[18] = lt kg 0
          kj:bool[] = lt kf 0
          kk:bool[18] = ne ki kj
          kl:bool[18] = and kk kh
          km:i64[18] = add kg kf
          kn:i64[18] = select_n kl kg km
        in (kn,) }
    ] ka 13
    ko:i64[18,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(18, 1)] kb
    kp:f64[400,18,3] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 2), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 1, 3)
      unique_indices=False
    ] jz ko
  in (kp,) } in
let cross4 = { lambda ; kq:f64[18,3] kr:f64[400,18,3]. let
    ks:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    kt:f64[18] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(18, 1)
      unique_indices=True
    ] kq ks
    ku:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    kv:f64[18] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(18, 1)
      unique_indices=True
    ] kq ku
    kw:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    kx:f64[18] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(18, 1)
      unique_indices=True
    ] kq kw
    ky:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    kz:f64[400,18] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 18, 1)
      unique_indices=True
    ] kr ky
    la:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    lb:f64[400,18] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 18, 1)
      unique_indices=True
    ] kr la
    lc:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    ld:f64[400,18] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 18, 1)
      unique_indices=True
    ] kr lc
    le:f64[1,18] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 18)] kv
    lf:f64[400,18] = mul le ld
    lg:f64[1,18] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 18)] kx
    lh:f64[400,18] = mul lg lb
    li:f64[400,18] = sub lf lh
    lj:f64[1,18] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 18)] kx
    lk:f64[400,18] = mul lj kz
    ll:f64[1,18] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 18)] kt
    lm:f64[400,18] = mul ll ld
    ln:f64[400,18] = sub lk lm
    lo:f64[1,18] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 18)] kt
    lp:f64[400,18] = mul lo lb
    lq:f64[1,18] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 18)] kv
    lr:f64[400,18] = mul lq kz
    ls:f64[400,18] = sub lp lr
    lt:f64[400,18,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(400, 18, 1)
    ] li
    lu:f64[400,18,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(400, 18, 1)
    ] ln
    lv:f64[400,18,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(400, 18, 1)
    ] ls
    lw:f64[400,18,3] = concatenate[dimension=2] lt lu lv
  in (lw,) } in
let cross5 = { lambda ; lx:f64[400,18,3] ly:f64[400,18,3]. let
    lz:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    ma:f64[400,18] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 18, 1)
      unique_indices=True
    ] lx lz
    mb:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    mc:f64[400,18] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 18, 1)
      unique_indices=True
    ] lx mb
    md:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    me:f64[400,18] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 18, 1)
      unique_indices=True
    ] lx md
    mf:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    mg:f64[400,18] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 18, 1)
      unique_indices=True
    ] ly mf
    mh:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    mi:f64[400,18] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 18, 1)
      unique_indices=True
    ] ly mh
    mj:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    mk:f64[400,18] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 18, 1)
      unique_indices=True
    ] ly mj
    ml:f64[400,18] = mul mc mk
    mm:f64[400,18] = mul me mi
    mn:f64[400,18] = sub ml mm
    mo:f64[400,18] = mul me mg
    mp:f64[400,18] = mul ma mk
    mq:f64[400,18] = sub mo mp
    mr:f64[400,18] = mul ma mi
    ms:f64[400,18] = mul mc mg
    mt:f64[400,18] = sub mr ms
    mu:f64[400,18,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(400, 18, 1)
    ] mn
    mv:f64[400,18,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(400, 18, 1)
    ] mq
    mw:f64[400,18,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(400, 18, 1)
    ] mt
    mx:f64[400,18,3] = concatenate[dimension=2] mu mv mw
  in (mx,) } in
let _take7 = { lambda ; my:f64[400,18,3] mz:i64[4]. let
    na:i64[4] = pjit[
      name=remainder
      jaxpr={ lambda ; el:i64[4] em:i64[]. let
          en:bool[] = eq em 0
          eo:i64[] = pjit[
            name=_where
            jaxpr={ lambda ; ep:bool[] eq:i64[] er:i64[]. let
                es:i64[] = select_n ep er eq
              in (es,) }
          ] en 1 em
          et:i64[4] = rem el eo
          eu:bool[4] = ne et 0
          ev:bool[4] = lt et 0
          ew:bool[] = lt eo 0
          ex:bool[4] = ne ev ew
          ey:bool[4] = and ex eu
          ez:i64[4] = add et eo
          fa:i64[4] = select_n ey et ez
        in (fa,) }
    ] mz 18
    nb:i64[4,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(4, 1)] na
    nc:f64[400,4,3] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 2), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 1, 3)
      unique_indices=False
    ] my nb
  in (nc,) } in
let _take8 = { lambda ; nd:i64[18] ne:i64[4]. let
    nf:i64[4] = pjit[
      name=remainder
      jaxpr={ lambda ; el:i64[4] em:i64[]. let
          en:bool[] = eq em 0
          eo:i64[] = pjit[
            name=_where
            jaxpr={ lambda ; ep:bool[] eq:i64[] er:i64[]. let
                es:i64[] = select_n ep er eq
              in (es,) }
          ] en 1 em
          et:i64[4] = rem el eo
          eu:bool[4] = ne et 0
          ev:bool[4] = lt et 0
          ew:bool[] = lt eo 0
          ex:bool[4] = ne ev ew
          ey:bool[4] = and ex eu
          ez:i64[4] = add et eo
          fa:i64[4] = select_n ey et ez
        in (fa,) }
    ] ne 18
    ng:i64[4,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(4, 1)] nf
    nh:i64[4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(), collapsed_slice_dims=(0,), start_index_map=(0,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(1,)
      unique_indices=False
    ] nd ng
  in (nh,) } in
let cross6 = { lambda ; ni:f64[400,1,3] nj:f64[400,1,6,3]. let
    nk:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    nl:f64[400,1] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 1, 1)
      unique_indices=True
    ] ni nk
    nm:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    nn:f64[400,1] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 1, 1)
      unique_indices=True
    ] ni nm
    no:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    np:f64[400,1] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 1, 1)
      unique_indices=True
    ] ni no
    nq:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    nr:f64[400,1,6] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 1, 6, 1)
      unique_indices=True
    ] nj nq
    ns:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    nt:f64[400,1,6] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 1, 6, 1)
      unique_indices=True
    ] nj ns
    nu:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    nv:f64[400,1,6] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(3,), start_index_map=(3,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 1, 6, 1)
      unique_indices=True
    ] nj nu
    nw:f64[400,1,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(400, 1, 1)
    ] nn
    nx:f64[400,1,6] = mul nw nv
    ny:f64[400,1,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(400, 1, 1)
    ] np
    nz:f64[400,1,6] = mul ny nt
    oa:f64[400,1,6] = sub nx nz
    ob:f64[400,1,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(400, 1, 1)
    ] np
    oc:f64[400,1,6] = mul ob nr
    od:f64[400,1,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(400, 1, 1)
    ] nl
    oe:f64[400,1,6] = mul od nv
    of:f64[400,1,6] = sub oc oe
    og:f64[400,1,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(400, 1, 1)
    ] nl
    oh:f64[400,1,6] = mul og nt
    oi:f64[400,1,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(400, 1, 1)
    ] nn
    oj:f64[400,1,6] = mul oi nr
    ok:f64[400,1,6] = sub oh oj
    ol:f64[400,1,6,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(400, 1, 6, 1)
    ] oa
    om:f64[400,1,6,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(400, 1, 6, 1)
    ] of
    on:f64[400,1,6,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(400, 1, 6, 1)
    ] ok
    oo:f64[400,1,6,3] = concatenate[dimension=3] ol om on
  in (oo,) } in
let cross7 = { lambda ; op:f64[400,12,3] oq:f64[400,12,3]. let
    or:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    os:f64[400,12] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 12, 1)
      unique_indices=True
    ] op or
    ot:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    ou:f64[400,12] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 12, 1)
      unique_indices=True
    ] op ot
    ov:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    ow:f64[400,12] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 12, 1)
      unique_indices=True
    ] op ov
    ox:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    oy:f64[400,12] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 12, 1)
      unique_indices=True
    ] oq ox
    oz:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    pa:f64[400,12] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 12, 1)
      unique_indices=True
    ] oq oz
    pb:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    pc:f64[400,12] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 12, 1)
      unique_indices=True
    ] oq pb
    pd:f64[400,12] = mul ou pc
    pe:f64[400,12] = mul ow pa
    pf:f64[400,12] = sub pd pe
    pg:f64[400,12] = mul ow oy
    ph:f64[400,12] = mul os pc
    pi:f64[400,12] = sub pg ph
    pj:f64[400,12] = mul os pa
    pk:f64[400,12] = mul ou oy
    pl:f64[400,12] = sub pj pk
    pm:f64[400,12,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(400, 12, 1)
    ] pf
    pn:f64[400,12,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(400, 12, 1)
    ] pi
    po:f64[400,12,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(400, 12, 1)
    ] pl
    pp:f64[400,12,3] = concatenate[dimension=2] pm pn po
  in (pp,) } in
let _take9 = { lambda ; pq:f64[400,13,3,3] pr:i64[4]. let
    ps:i64[4] = pjit[
      name=remainder
      jaxpr={ lambda ; el:i64[4] em:i64[]. let
          en:bool[] = eq em 0
          eo:i64[] = pjit[
            name=_where
            jaxpr={ lambda ; ep:bool[] eq:i64[] er:i64[]. let
                es:i64[] = select_n ep er eq
              in (es,) }
          ] en 1 em
          et:i64[4] = rem el eo
          eu:bool[4] = ne et 0
          ev:bool[4] = lt et 0
          ew:bool[] = lt eo 0
          ex:bool[4] = ne ev ew
          ey:bool[4] = and ex eu
          ez:i64[4] = add et eo
          fa:i64[4] = select_n ey et ez
        in (fa,) }
    ] pr 13
    pt:i64[4,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(4, 1)] ps
    pu:f64[400,4,3,3] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 2, 3), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 1, 3, 3)
      unique_indices=False
    ] pq pt
  in (pu,) } in
let _take10 = { lambda ; pv:f64[13] pw:i64[4]. let
    px:i64[4] = pjit[
      name=remainder
      jaxpr={ lambda ; el:i64[4] em:i64[]. let
          en:bool[] = eq em 0
          eo:i64[] = pjit[
            name=_where
            jaxpr={ lambda ; ep:bool[] eq:i64[] er:i64[]. let
                es:i64[] = select_n ep er eq
              in (es,) }
          ] en 1 em
          et:i64[4] = rem el eo
          eu:bool[4] = ne et 0
          ev:bool[4] = lt et 0
          ew:bool[] = lt eo 0
          ex:bool[4] = ne ev ew
          ey:bool[4] = and ex eu
          ez:i64[4] = add et eo
          fa:i64[4] = select_n ey et ez
        in (fa,) }
    ] pw 13
    py:i64[4,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(4, 1)] px
    pz:f64[4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(), collapsed_slice_dims=(0,), start_index_map=(0,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(1,)
      unique_indices=False
    ] pv py
  in (pz,) } in
let _diag = { lambda ; qa:f64[18]. let
    qb:f64[18] = pad[padding_config=((0, 0, 0),)] qa 0.0
    qc:i64[18,18] = iota[dimension=0 dtype=int64 shape=(18, 18)] 
    qd:i64[18,18] = iota[dimension=1 dtype=int64 shape=(18, 18)] 
    qe:i64[18,18] = add qc 0
    qf:bool[18,18] = eq qe qd
    qg:f64[18] = broadcast_in_dim[broadcast_dimensions=() shape=(18,)] 0.0
    qh:f64[18,18] = pjit[
      name=_where
      jaxpr={ lambda ; qi:bool[18,18] qj:f64[18] qk:f64[18]. let
          ql:f64[18,18] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(18, 18)
          ] qj
          qm:f64[18,18] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(18, 18)
          ] qk
          qn:f64[18,18] = select_n qi qm ql
        in (qn,) }
    ] qf qb qg
  in (qh,) } in
let _take11 = { lambda ; qo:f64[400,18] qp:i64[4]. let
    qq:i64[4] = pjit[
      name=remainder
      jaxpr={ lambda ; el:i64[4] em:i64[]. let
          en:bool[] = eq em 0
          eo:i64[] = pjit[
            name=_where
            jaxpr={ lambda ; ep:bool[] eq:i64[] er:i64[]. let
                es:i64[] = select_n ep er eq
              in (es,) }
          ] en 1 em
          et:i64[4] = rem el eo
          eu:bool[4] = ne et 0
          ev:bool[4] = lt et 0
          ew:bool[] = lt eo 0
          ex:bool[4] = ne ev ew
          ey:bool[4] = and ex eu
          ez:i64[4] = add et eo
          fa:i64[4] = select_n ey et ez
        in (fa,) }
    ] qp 18
    qr:i64[4,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(4, 1)] qq
    qs:f64[400,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 1)
      unique_indices=False
    ] qo qr
  in (qs,) } in
let cross8 = { lambda ; qt:f64[400,13,3] qu:f64[400,13,3]. let
    qv:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    qw:f64[400,13] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 13, 1)
      unique_indices=True
    ] qt qv
    qx:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    qy:f64[400,13] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 13, 1)
      unique_indices=True
    ] qt qx
    qz:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    ra:f64[400,13] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 13, 1)
      unique_indices=True
    ] qt qz
    rb:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
    rc:f64[400,13] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 13, 1)
      unique_indices=True
    ] qu rb
    rd:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
    re:f64[400,13] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 13, 1)
      unique_indices=True
    ] qu rd
    rf:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 2
    rg:f64[400,13] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 13, 1)
      unique_indices=True
    ] qu rf
    rh:f64[400,13] = mul qy rg
    ri:f64[400,13] = mul ra re
    rj:f64[400,13] = sub rh ri
    rk:f64[400,13] = mul ra rc
    rl:f64[400,13] = mul qw rg
    rm:f64[400,13] = sub rk rl
    rn:f64[400,13] = mul qw re
    ro:f64[400,13] = mul qy rc
    rp:f64[400,13] = sub rn ro
    rq:f64[400,13,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(400, 13, 1)
    ] rj
    rr:f64[400,13,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(400, 13, 1)
    ] rm
    rs:f64[400,13,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(400, 13, 1)
    ] rp
    rt:f64[400,13,3] = concatenate[dimension=2] rq rr rs
  in (rt,) } in
let _where = { lambda ; ru:bool[400,12] rv:f64[400,12] rw:i64[]. let
    rx:f64[] = convert_element_type[new_dtype=float64 weak_type=False] rw
    ry:f64[12] = broadcast_in_dim[broadcast_dimensions=() shape=(12,)] rx
    rz:f64[400,12] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(400, 12)] ry
    sa:f64[400,12] = select_n ru rz rv
  in (sa,) } in
let _where1 = { lambda ; sb:bool[400,12] sc:f64[400,12] sd:f64[12]. let
    se:f64[12] = convert_element_type[new_dtype=float64 weak_type=False] sd
    sf:f64[400,12] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(400, 12)] se
    sg:f64[400,12] = select_n sb sf sc
  in (sg,) } in
let _where2 = { lambda ; sh:bool[400,12] si:f64[400,12] sj:f64[400,12]. let
    sk:f64[400,12] = select_n sh sj si
  in (sk,) } in
let _where3 = { lambda ; hp:bool[] hq:i32[] hr:i32[]. let
    hs:i32[] = select_n hp hr hq
  in (hs,) } in
let logaddexp = { lambda ; l:f64[400,7,36] m:i64[]. let
    n:f64[] = convert_element_type[new_dtype=float64 weak_type=False] m
    o:f64[400,7,36] = max l n
    p:f64[400,7,36] = sub l n
    q:bool[400,7,36] = ne p p
    r:f64[400,7,36] = add l n
    s:f64[400,7,36] = abs p
    t:f64[400,7,36] = neg s
    u:f64[400,7,36] = exp t
    v:f64[400,7,36] = log1p u
    w:f64[400,7,36] = add o v
    x:f64[400,7,36] = select_n q w r
  in (x,) } in
let remainder1 = { lambda ; ig:i64[] ih:i64[]. let
    ii:bool[] = eq ih 0
    ij:i64[] = pjit[
      name=_where
      jaxpr={ lambda ; ik:bool[] il:i64[] im:i64[]. let
          in:i64[] = select_n ik im il
        in (in,) }
    ] ii 1 ih
    io:i64[] = rem ig ij
    ip:bool[] = ne io 0
    iq:bool[] = lt io 0
    ir:bool[] = lt ij 0
    is:bool[] = ne iq ir
    it:bool[] = and is ip
    iu:i64[] = add io ij
    iv:i64[] = select_n it io iu
  in (iv,) } in
let remainder2 = { lambda ; el:i64[4] em:i64[]. let
    en:bool[] = eq em 0
    eo:i64[] = pjit[
      name=_where
      jaxpr={ lambda ; ep:bool[] eq:i64[] er:i64[]. let
          es:i64[] = select_n ep er eq
        in (es,) }
    ] en 1 em
    et:i64[4] = rem el eo
    eu:bool[4] = ne et 0
    ev:bool[4] = lt et 0
    ew:bool[] = lt eo 0
    ex:bool[4] = ne ev ew
    ey:bool[4] = and ex eu
    ez:i64[4] = add et eo
    fa:i64[4] = select_n ey et ez
  in (fa,) } in
let remainder3 = { lambda ; gr:i64[13] gs:i64[]. let
    gt:bool[] = eq gs 0
    gu:i64[] = pjit[
      name=_where
      jaxpr={ lambda ; ep:bool[] eq:i64[] er:i64[]. let
          es:i64[] = select_n ep er eq
        in (es,) }
    ] gt 1 gs
    gv:i64[13] = rem gr gu
    gw:bool[13] = ne gv 0
    gx:bool[13] = lt gv 0
    gy:bool[] = lt gu 0
    gz:bool[13] = ne gx gy
    ha:bool[13] = and gz gw
    hb:i64[13] = add gv gu
    hc:i64[13] = select_n ha gv hb
  in (hc,) } in
let remainder4 = { lambda ; hl:i32[13] hm:i32[]. let
    hn:bool[] = eq hm 0
    ho:i32[] = pjit[name=_where jaxpr=_where3] hn 1 hm
    ht:i32[13] = rem hl ho
    hu:bool[13] = ne ht 0
    hv:bool[13] = lt ht 0
    hw:bool[] = lt ho 0
    hx:bool[13] = ne hv hw
    hy:bool[13] = and hx hu
    hz:i32[13] = add ht ho
    ia:i32[13] = select_n hy ht hz
  in (ia,) } in
let remainder5 = { lambda ; ig:i64[] ih:i64[]. let
    ii:bool[] = eq ih 0
    ij:i64[] = pjit[
      name=_where
      jaxpr={ lambda ; ik:bool[] il:i64[] im:i64[]. let
          in:i64[] = select_n ik im il
        in (in,) }
    ] ii 1 ih
    io:i64[] = rem ig ij
    ip:bool[] = ne io 0
    iq:bool[] = lt io 0
    ir:bool[] = lt ij 0
    is:bool[] = ne iq ir
    it:bool[] = and is ip
    iu:i64[] = add io ij
    iv:i64[] = select_n it io iu
  in (iv,) } in
let remainder6 = { lambda ; kc:i64[18] kd:i64[]. let
    ke:bool[] = eq kd 0
    kf:i64[] = pjit[
      name=_where
      jaxpr={ lambda ; ep:bool[] eq:i64[] er:i64[]. let
          es:i64[] = select_n ep er eq
        in (es,) }
    ] ke 1 kd
    kg:i64[18] = rem kc kf
    kh:bool[18] = ne kg 0
    ki:bool[18] = lt kg 0
    kj:bool[] = lt kf 0
    kk:bool[18] = ne ki kj
    kl:bool[18] = and kk kh
    km:i64[18] = add kg kf
    kn:i64[18] = select_n kl kg km
  in (kn,) } in
let remainder7 = { lambda ; el:i64[4] em:i64[]. let
    en:bool[] = eq em 0
    eo:i64[] = pjit[
      name=_where
      jaxpr={ lambda ; ep:bool[] eq:i64[] er:i64[]. let
          es:i64[] = select_n ep er eq
        in (es,) }
    ] en 1 em
    et:i64[4] = rem el eo
    eu:bool[4] = ne et 0
    ev:bool[4] = lt et 0
    ew:bool[] = lt eo 0
    ex:bool[4] = ne ev ew
    ey:bool[4] = and ex eu
    ez:i64[4] = add et eo
    fa:i64[4] = select_n ey et ez
  in (fa,) } in
let remainder8 = { lambda ; sl:i64[18] sm:i64[]. let
    sn:bool[] = eq sm 0
    so:i64[] = pjit[
      name=_where
      jaxpr={ lambda ; ep:bool[] eq:i64[] er:i64[]. let
          es:i64[] = select_n ep er eq
        in (es,) }
    ] sn 1 sm
    sp:i64[18] = rem sl so
    sq:bool[18] = ne sp 0
    sr:bool[18] = lt sp 0
    ss:bool[] = lt so 0
    st:bool[18] = ne sr ss
    su:bool[18] = and st sq
    sv:i64[18] = add sp so
    sw:i64[18] = select_n su sp sv
  in (sw,) } in
let _where4 = { lambda ; qi:bool[18,18] qj:f64[18] qk:f64[18]. let
    ql:f64[18,18] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(18, 18)] qj
    qm:f64[18,18] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(18, 18)] qk
    qn:f64[18,18] = select_n qi qm ql
  in (qn,) } in
let remainder9 = { lambda ; sx:f64[400] sy:i64[]. let
    sz:f64[] = convert_element_type[new_dtype=float64 weak_type=False] sy
    ta:f64[400] = rem sx sz
    tb:bool[400] = ne ta 0.0
    tc:bool[400] = lt ta 0.0
    td:bool[] = lt sz 0.0
    te:bool[400] = ne tc td
    tf:bool[400] = and te tb
    tg:f64[400] = add ta sz
    th:f64[400] = select_n tf ta tg
  in (th,) } in
let clip3 = { lambda ; ti:f64[400] tj:f64[] tk:f64[]. let
    tl:f64[400] = max tj ti
    tm:f64[400] = min tk tl
  in (tm,) } in
let clip4 = { lambda ; tn:f64[400,12] to:f64[12] tp:f64[12]. let
    tq:f64[1,12] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 12)] to
    tr:f64[400,12] = max tq tn
    ts:f64[1,12] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 12)] tp
    tt:f64[400,12] = min ts tr
  in (tt,) } in
let isinf = { lambda ; tu:f64[]. let
    tv:f64[] = abs tu
    tw:bool[] = eq tv inf
  in (tw,) } in
let _where5 = { lambda ; ik:bool[] il:i64[] im:i64[]. let
    in:i64[] = select_n ik im il
  in (in,) } in
let _where6 = { lambda ; ep:bool[] eq:i64[] er:i64[]. let
    es:i64[] = select_n ep er eq
  in (es,) } in
let _where7 = { lambda ; ep:bool[] eq:i64[] er:i64[]. let
    es:i64[] = select_n ep er eq
  in (es,) } in
let jaxpr2 = { lambda ; tx:f64[400,18,18] ty:f64[400,18,18]. let
    tz:f64[400,18,18] = dot_general[
      dimension_numbers=(([2], [2]), ([0], [0]))
      precision=(Precision.HIGHEST, Precision.HIGHEST)
    ] tx ty
    ua:f64[400,18,18] = transpose[permutation=(0, 2, 1)] tz
  in (ua,) } in
let _cho_solve = { lambda ; ub:f64[400,18,18] uc:f64[400,18,18]. let
    ud:f64[400,18,18,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(400, 18, 18, 1)
    ] uc
    ue:f64[400,18,1,18] = transpose[permutation=(0, 2, 3, 1)] ud
    uf:f64[400,18,18] = reshape[dimensions=None new_sizes=(400, 18, 18)] ue
    ug:f64[400,18,18] = triangular_solve[
      conjugate_a=False
      left_side=True
      lower=False
      transpose_a=True
      unit_diagonal=False
    ] ub uf
    uh:f64[400,18,1,18] = reshape[dimensions=None new_sizes=(400, 18, 1, 18)] ug
    ui:f64[400,18,1,18] = slice[
      limit_indices=(400, 18, 1, 18)
      start_indices=(0, 0, 0, 0)
      strides=None
    ] uh
    uj:f64[400,18,18,1] = transpose[permutation=(0, 3, 1, 2)] ui
    uk:f64[400,18,18] = squeeze[dimensions=(3,)] uj
    ul:f64[400,18,18,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1, 2)
      shape=(400, 18, 18, 1)
    ] uk
    um:f64[400,18,1,18] = transpose[permutation=(0, 2, 3, 1)] ul
    un:f64[400,18,18] = reshape[dimensions=None new_sizes=(400, 18, 18)] um
    uo:f64[400,18,18] = triangular_solve[
      conjugate_a=False
      left_side=True
      lower=False
      transpose_a=False
      unit_diagonal=False
    ] ub un
    up:f64[400,18,1,18] = reshape[dimensions=None new_sizes=(400, 18, 1, 18)] uo
    uq:f64[400,18,1,18] = slice[
      limit_indices=(400, 18, 1, 18)
      start_indices=(0, 0, 0, 0)
      strides=None
    ] up
    ur:f64[400,18,18,1] = transpose[permutation=(0, 3, 1, 2)] uq
    us:f64[400,18,18] = squeeze[dimensions=(3,)] ur
  in (us,) } in
{ lambda ; ut:f32[180,512] uu:f32[512] uv:f32[512,512] uw:f32[512] ux:f32[512,18]
    uy:f32[18] uz:f64[180] va:f64[180] vb:f64[9] vc:f64[9] vd:f64[7,189,400] ve:f64[7,400]
    vf:f64[7,400,400] vg:f64[7,400] vh:f64[7,400,400] vi:f64[7,400] vj:f64[7,400,400]
    vk:f64[7,400] vl:f64[7,400,54] vm:f64[7,54] vn:i64[5] vo:f64[36,2] vp:f64[9,2]
    vq:f64[19] vr:i64[4] vs:f64[18,3] vt:f64[18,3] vu:f64[13,3] vv:f64[13,4] vw:f64[13,4]
    vx:f64[13,3] vy:i64[4] vz:i64[4] wa:i64[4] wb:i64[4] wc:i64[4] wd:i64[4] we:i64[4]
    wf:i64[4] wg:i64[13] wh:i64[13] wi:f64[13,3] wj:f64[13,4] wk:i32[13] wl:f64[13]
    wm:f64[13,3,3] wn:i32[13] wo:f64[4] wp:f64[4] wq:i64[18] wr:f64[4] ws:i64[18]
    wt:i64[4] wu:i64[18] wv:i64[4] ww:i64[4] wx:i64[4] wy:i64[4] wz:i64[4] xa:i64[4]
    xb:i64[4] xc:i64[4] xd:i64[4] xe:i64[4] xf:i64[4] xg:i64[13] xh:i64[13] xi:i64[4]
    xj:i64[4] xk:i64[4] xl:i64[4] xm:i64[4] xn:i64[4] xo:i64[4] xp:i64[4] xq:i64[4]
    xr:i64[4] xs:i64[4] xt:i64[4] xu:i64[13] xv:i64[13] xw:i64[13] xx:i64[18] xy:i64[132]
    xz:i64[132] ya:f64[18] yb:f64[18] yc:f64[18] yd:i64[18] ye:f64[3] yf:i64[4] yg:i64[4]
    yh:i64[4] yi:i64[4] yj:i64[4] yk:i64[4] yl:i64[4] ym:i64[4] yn:i64[4] yo:i64[4]
    yp:i64[4] yq:i64[4] yr:i64[4] ys:i64[4] yt:i64[13] yu:i64[13] yv:i64[4] yw:i64[4]
    yx:i64[4] yy:i64[4] yz:i64[4] za:i64[4] zb:i64[4] zc:i64[4] zd:i64[4] ze:i64[13]
    zf:i64[13] zg:i64[18] zh:i64[4] zi:f64[4] zj:f64[] zk:f64[3] zl:f64[3] zm:f64[3]
    zn:f64[] zo:f64[8] zp:f64[3] zq:f64[3] zr:f64[3] zs:i64[3] zt:f64[3] zu:f64[12]
    zv:i32[12] zw:i32[12] zx:f64[12,2] zy:f64[12] zz:f64[12] baa:f64[12] bab:f64[12]
    bac:f64[12,2] bad:i64[4] bae:f64[4] baf:i64[3] bag:f64[3] bah:f64[12] bai:i64[4]
    baj:f64[17] bak:f64[400,180] bal:f64[400] bam:f64[400,180] ban:f64[400] bao:f64[4000,372]
    bap:i32[] baq:i32[] bar:u32[2] bas:u32[2]. let
    bat:key<fry>[] = random_wrap[impl=fry] bas
    bau:key<fry>[2] = random_split[shape=(2,)] bat
    bav:u32[2,2] = random_unwrap bau
    baw:u32[1,2] = slice[
      limit_indices=(1, 2)
      start_indices=(0, 0)
      strides=(1, 1)
    ] bav
    bax:u32[2] = squeeze[dimensions=(0,)] baw
    bay:u32[1,2] = slice[
      limit_indices=(2, 2)
      start_indices=(1, 0)
      strides=(1, 1)
    ] bav
    baz:u32[2] = squeeze[dimensions=(0,)] bay
    bba:key<fry>[] = random_wrap[impl=fry] bax
    bbb:key<fry>[2] = random_split[shape=(2,)] bba
    bbc:u32[2,2] = random_unwrap bbb
    bbd:u32[1,2] = slice[
      limit_indices=(1, 2)
      start_indices=(0, 0)
      strides=(1, 1)
    ] bbc
    bbe:u32[2] = squeeze[dimensions=(0,)] bbd
    bbf:u32[1,2] = slice[
      limit_indices=(2, 2)
      start_indices=(1, 0)
      strides=(1, 1)
    ] bbc
    bbg:u32[2] = squeeze[dimensions=(0,)] bbf
    bbh:f64[180,512] = convert_element_type[new_dtype=float64 weak_type=False] ut
    bbi:f64[512] = convert_element_type[new_dtype=float64 weak_type=False] uu
    bbj:f64[400,512] = dot_general[dimension_numbers=(([1], [0]), ([], []))] bak
      bbh
    bbk:f64[1,512] = reshape[dimensions=None new_sizes=(1, 512)] bbi
    bbl:f64[400,512] = add bbj bbk
    bbm:f64[400,512] = pjit[name=silu jaxpr=silu] bbl
    bbn:f64[512,512] = convert_element_type[new_dtype=float64 weak_type=False] uv
    bbo:f64[512] = convert_element_type[new_dtype=float64 weak_type=False] uw
    bbp:f64[400,512] = dot_general[dimension_numbers=(([1], [0]), ([], []))] bbm
      bbn
    bbq:f64[1,512] = reshape[dimensions=None new_sizes=(1, 512)] bbo
    bbr:f64[400,512] = add bbp bbq
    bbs:f64[400,512] = pjit[name=silu jaxpr=silu] bbr
    bbt:f64[512,18] = convert_element_type[new_dtype=float64 weak_type=False] ux
    bbu:f64[18] = convert_element_type[new_dtype=float64 weak_type=False] uy
    bbv:f64[400,18] = dot_general[dimension_numbers=(([1], [0]), ([], []))] bbs bbt
    bbw:f64[1,18] = reshape[dimensions=None new_sizes=(1, 18)] bbu
    bbx:f64[400,18] = add bbv bbw
    bby:f64[400,9] = slice[
      limit_indices=(400, 9)
      start_indices=(0, 0)
      strides=None
    ] bbx
    bbz:f64[400,9] = slice[
      limit_indices=(400, 18)
      start_indices=(0, 9)
      strides=None
    ] bbx
    bca:f64[400,9] = pjit[
      name=softplus
      jaxpr={ lambda ; bcb:f64[400,9]. let
          bcc:f64[400,9] = custom_jvp_call[
            call_jaxpr={ lambda ; bcd:f64[400,9] bce:i64[]. let
                bcf:f64[400,9] = pjit[
                  name=logaddexp
                  jaxpr={ lambda ; bcg:f64[400,9] bch:i64[]. let
                      bci:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] bch
                      bcj:f64[400,9] = max bcg bci
                      bck:f64[400,9] = sub bcg bci
                      bcl:bool[400,9] = ne bck bck
                      bcm:f64[400,9] = add bcg bci
                      bcn:f64[400,9] = abs bck
                      bco:f64[400,9] = neg bcn
                      bcp:f64[400,9] = exp bco
                      bcq:f64[400,9] = log1p bcp
                      bcr:f64[400,9] = add bcj bcq
                      bcs:f64[400,9] = select_n bcl bcr bcm
                    in (bcs,) }
                ] bcd bce
              in (bcf,) }
            jvp_jaxpr_thunk=<function _memoize.<locals>.memoized at 0x7d832d5a2940>
            num_consts=0
            symbolic_zeros=False
          ] bcb 0
        in (bcc,) }
    ] bbz
    bct:f64[400,9] = add bca 0.001
    bcu:key<fry>[] = random_wrap[impl=fry] bbe
    bcv:f64[400,9] = pjit[
      name=_normal
      jaxpr={ lambda ; bcw:key<fry>[]. let
          bcx:f64[400,9] = pjit[
            name=_normal_real
            jaxpr={ lambda ; bcy:key<fry>[]. let
                bcz:f64[400,9] = pjit[
                  name=_uniform
                  jaxpr={ lambda ; bda:key<fry>[] bdb:f64[] bdc:f64[]. let
                      bdd:f64[1,1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1, 1)
                      ] bdb
                      bde:f64[1,1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1, 1)
                      ] bdc
                      bdf:u64[400,9] = random_bits[bit_width=64 shape=(400, 9)] bda
                      bdg:u64[400,9] = shift_right_logical bdf 12
                      bdh:u64[400,9] = or bdg 4607182418800017408
                      bdi:f64[400,9] = bitcast_convert_type[new_dtype=float64] bdh
                      bdj:f64[400,9] = sub bdi 1.0
                      bdk:f64[1,1] = sub bde bdd
                      bdl:f64[400,9] = mul bdj bdk
                      bdm:f64[400,9] = add bdl bdd
                      bdn:f64[400,9] = max bdd bdm
                    in (bdn,) }
                ] bcy -0.9999999999999999 1.0
                bdo:f64[400,9] = erf_inv bcz
                bdp:f64[400,9] = mul 1.4142135623730951 bdo
              in (bdp,) }
          ] bcw
        in (bcx,) }
    ] bcu
    bdq:f64[400,9] = mul bcv bct
    bdr:f64[400,9] = add bdq bby
    bds:f64[400,9] = tanh bdr
    bdt:key<fry>[] = random_wrap[impl=fry] bbg
    bdu:key<fry>[400] = random_split[shape=(400,)] bdt
    bdv:u32[400,2] = random_unwrap bdu
    bdw:f64[400,36] = slice[
      limit_indices=(400, 36)
      start_indices=(0, 0)
      strides=None
    ] bak
    bdx:f64[1,180] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 180)] uz
    bdy:f64[400,180] = sub bak bdx
    bdz:f64[1,180] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 180)] va
    bea:f64[400,180] = div bdy bdz
    beb:f64[1,9] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 9)] vb
    bec:f64[400,9] = sub bds beb
    bed:f64[1,9] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 9)] vc
    bee:f64[400,9] = div bec bed
    bef:f64[400,189] = concatenate[dimension=1] bea bee
    beg:f64[400,1,1,1,189] = reshape[
      dimensions=None
      new_sizes=(400, 1, 1, 1, 189)
    ] bef
    beh:f64[400,1,1,189] = squeeze[dimensions=(1,)] beg
    bei:f64[400,7,1,1,189] = broadcast_in_dim[
      broadcast_dimensions=(0, 2, 3, 4)
      shape=(400, 7, 1, 1, 189)
    ] beh
    bej:f64[400,7,189] = reshape[dimensions=None new_sizes=(400, 7, 189)] bei
    bek:f64[1,36] = broadcast_in_dim[broadcast_dimensions=() shape=(1, 36)] 1.0
    bel:f64[1,36] = mul 0.5 bek
    bem:f64[1,36] = broadcast_in_dim[broadcast_dimensions=() shape=(1, 36)] 1.0
    ben:f64[1,36] = mul -10.0 bem
    beo:f64[7,400,400] = dot_general[
      dimension_numbers=(([2], [1]), ([1], [0]))
      preferred_element_type=float64
    ] bej vd
    bep:f64[400,7,400] = transpose[permutation=(1, 0, 2)] beo
    beq:f64[1,7,400] = broadcast_in_dim[
      broadcast_dimensions=(1, 2)
      shape=(1, 7, 400)
    ] ve
    ber:f64[400,7,400] = add bep beq
    bes:f64[400,7,400] = pjit[name=silu jaxpr=silu1] ber
    bet:f64[7,400,400] = dot_general[
      dimension_numbers=(([2], [1]), ([1], [0]))
      preferred_element_type=float64
    ] bes vf
    beu:f64[400,7,400] = transpose[permutation=(1, 0, 2)] bet
    bev:f64[1,7,400] = broadcast_in_dim[
      broadcast_dimensions=(1, 2)
      shape=(1, 7, 400)
    ] vg
    bew:f64[400,7,400] = add beu bev
    bex:f64[400,7,400] = pjit[name=silu jaxpr=silu1] bew
    bey:f64[7,400,400] = dot_general[
      dimension_numbers=(([2], [1]), ([1], [0]))
      preferred_element_type=float64
    ] bex vh
    bez:f64[400,7,400] = transpose[permutation=(1, 0, 2)] bey
    bfa:f64[1,7,400] = broadcast_in_dim[
      broadcast_dimensions=(1, 2)
      shape=(1, 7, 400)
    ] vi
    bfb:f64[400,7,400] = add bez bfa
    bfc:f64[400,7,400] = pjit[name=silu jaxpr=silu1] bfb
    bfd:f64[7,400,400] = dot_general[
      dimension_numbers=(([2], [1]), ([1], [0]))
      preferred_element_type=float64
    ] bfc vj
    bfe:f64[400,7,400] = transpose[permutation=(1, 0, 2)] bfd
    bff:f64[1,7,400] = broadcast_in_dim[
      broadcast_dimensions=(1, 2)
      shape=(1, 7, 400)
    ] vk
    bfg:f64[400,7,400] = add bfe bff
    bfh:f64[400,7,400] = pjit[name=silu jaxpr=silu1] bfg
    bfi:f64[7,400,54] = dot_general[
      dimension_numbers=(([2], [1]), ([1], [0]))
      preferred_element_type=float64
    ] bfh vl
    bfj:f64[400,7,54] = transpose[permutation=(1, 0, 2)] bfi
    bfk:f64[1,7,54] = broadcast_in_dim[
      broadcast_dimensions=(1, 2)
      shape=(1, 7, 54)
    ] vm
    bfl:f64[400,7,54] = add bfj bfk
    bfm:f64[400,7,18] = slice[
      limit_indices=(400, 7, 18)
      start_indices=(0, 0, 0)
      strides=None
    ] bfl
    bfn:f64[400,7,36] = slice[
      limit_indices=(400, 7, 54)
      start_indices=(0, 0, 18)
      strides=None
    ] bfl
    bfo:f64[1,1,36] = broadcast_in_dim[
      broadcast_dimensions=(1, 2)
      shape=(1, 1, 36)
    ] bel
    bfp:f64[400,7,36] = sub bfo bfn
    bfq:f64[400,7,36] = pjit[name=softplus jaxpr=softplus] bfp
    bfr:f64[1,1,36] = broadcast_in_dim[
      broadcast_dimensions=(1, 2)
      shape=(1, 1, 36)
    ] bel
    bfs:f64[400,7,36] = sub bfr bfq
    bft:f64[1,1,36] = broadcast_in_dim[
      broadcast_dimensions=(1, 2)
      shape=(1, 1, 36)
    ] ben
    bfu:f64[400,7,36] = sub bfs bft
    bfv:f64[400,7,36] = pjit[name=softplus jaxpr=softplus] bfu
    bfw:f64[1,1,36] = broadcast_in_dim[
      broadcast_dimensions=(1, 2)
      shape=(1, 1, 36)
    ] ben
    bfx:f64[400,7,36] = add bfw bfv
    bfy:key<fry>[400] = random_wrap[impl=fry] bdv
    bfz:key<fry>[400,2] = random_split[shape=(2,)] bfy
    bga:u32[400,2,2] = random_unwrap bfz
    bgb:u32[400,1,2] = slice[
      limit_indices=(400, 1, 2)
      start_indices=(0, 0, 0)
      strides=(1, 1, 1)
    ] bga
    bgc:u32[400,2] = squeeze[dimensions=(1,)] bgb
    bgd:u32[400,1,2] = slice[
      limit_indices=(400, 2, 2)
      start_indices=(0, 1, 0)
      strides=(1, 1, 1)
    ] bga
    bge:u32[400,2] = squeeze[dimensions=(1,)] bgd
    bgf:key<fry>[400] = random_wrap[impl=fry] bge
    bgg:i64[400] = pjit[
      name=_randint
      jaxpr={ lambda ; bgh:key<fry>[400] bgi:i64[] bgj:i64[]. let
          bgk:i64[] = pjit[
            name=clip
            jaxpr={ lambda ; bgl:i64[] bgm:i64[] bgn:i64[]. let
                bgo:i64[] = max bgm bgl
                bgp:i64[] = min bgn bgo
              in (bgp,) }
          ] 9223372036854775807 -9223372036854775808 9223372036854775807
          bgq:bool[] = gt bgj bgk
          bgr:i64[] = pjit[name=clip jaxpr=clip2] bgi -9223372036854775808 9223372036854775807
          bgs:i64[] = convert_element_type[new_dtype=int64 weak_type=False] bgr
          bgt:i64[] = pjit[name=clip jaxpr=clip2] bgj -9223372036854775808 9223372036854775807
          bgu:i64[] = convert_element_type[new_dtype=int64 weak_type=False] bgt
          bgv:key<fry>[400,2] = random_split[shape=(2,)] bgh
          bgw:key<fry>[400,1] = slice[
            limit_indices=(400, 1)
            start_indices=(0, 0)
            strides=(1, 1)
          ] bgv
          bgx:key<fry>[400] = squeeze[dimensions=(1,)] bgw
          bgy:key<fry>[400,1] = slice[
            limit_indices=(400, 2)
            start_indices=(0, 1)
            strides=(1, 1)
          ] bgv
          bgz:key<fry>[400] = squeeze[dimensions=(1,)] bgy
          bha:u64[400] = random_bits[bit_width=64 shape=()] bgx
          bhb:u64[400] = random_bits[bit_width=64 shape=()] bgz
          bhc:i64[] = sub bgu bgs
          bhd:u64[] = convert_element_type[new_dtype=uint64 weak_type=False] bhc
          bhe:bool[] = le bgu bgs
          bhf:u64[] = select_n bhe bhd 1
          bhg:bool[] = gt bgu bgs
          bhh:bool[] = and bgq bhg
          bhi:u64[] = add bhf 1
          bhj:u64[] = select_n bhh bhf bhi
          bhk:u64[] = rem 4294967296 bhj
          bhl:u64[] = mul bhk bhk
          bhm:u64[] = rem bhl bhj
          bhn:u64[400] = rem bha bhj
          bho:u64[400] = mul bhn bhm
          bhp:u64[400] = rem bhb bhj
          bhq:u64[400] = add bho bhp
          bhr:u64[400] = rem bhq bhj
          bhs:i64[400] = convert_element_type[new_dtype=int64 weak_type=False] bhr
          bht:i64[400] = add bgs bhs
        in (bht,) }
    ] bgf 0 5
    bhu:i64[400] = pjit[
      name=_take
      jaxpr={ lambda ; bhv:i64[5] bhw:i64[400]. let
          bhx:bool[400] = lt bhw 0
          bhy:i64[400] = add bhw 5
          bhz:i64[400] = pjit[
            name=_where
            jaxpr={ lambda ; bia:bool[400] bib:i64[400] bic:i64[400]. let
                bid:i64[400] = select_n bia bic bib
              in (bid,) }
          ] bhx bhy bhw
          bie:i64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] bhz
          bif:i64[400] = gather[
            dimension_numbers=GatherDimensionNumbers(offset_dims=(), collapsed_slice_dims=(0,), start_index_map=(0,))
            fill_value=-9223372036854775808
            indices_are_sorted=False
            mode=GatherScatterMode.FILL_OR_DROP
            slice_sizes=(1,)
            unique_indices=False
          ] bhv bie
        in (bif,) }
    ] vn bgg
    big:bool[400] = lt bhu 0
    bih:i64[400] = add bhu 7
    bii:i64[400] = select_n big bhu bih
    bij:bool[] = lt 0 0
    bik:i64[] = add 0 18
    bil:i64[] = select_n bij 0 bik
    bim:i64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] bii
    bin:i64[400,1] = broadcast_in_dim[broadcast_dimensions=() shape=(400, 1)] bil
    bio:i64[400,2] = concatenate[dimension=1] bim bin
    bip:i64[400,1] = iota[dimension=0 dtype=int64 shape=(400, 1)] 
    biq:i64[400,3] = concatenate[dimension=1] bip bio
    bir:f64[400,1,18] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(1, 2), collapsed_slice_dims=(0,), start_index_map=(0, 1, 2))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(1, 1, 18)
      unique_indices=True
    ] bfm biq
    bis:f64[400,18] = squeeze[dimensions=(1,)] bir
    bit:bool[400] = lt bhu 0
    biu:i64[400] = add bhu 7
    biv:i64[400] = select_n bit bhu biu
    biw:bool[] = lt 0 0
    bix:i64[] = add 0 36
    biy:i64[] = select_n biw 0 bix
    biz:i64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] biv
    bja:i64[400,1] = broadcast_in_dim[broadcast_dimensions=() shape=(400, 1)] biy
    bjb:i64[400,2] = concatenate[dimension=1] biz bja
    bjc:i64[400,1] = iota[dimension=0 dtype=int64 shape=(400, 1)] 
    bjd:i64[400,3] = concatenate[dimension=1] bjc bjb
    bje:f64[400,1,36] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(1, 2), collapsed_slice_dims=(0,), start_index_map=(0, 1, 2))
      fill_value=None
      indices_are_sorted=True
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(1, 1, 36)
      unique_indices=True
    ] bfx bjd
    bjf:f64[400,36] = squeeze[dimensions=(1,)] bje
    bjg:f64[400,36] = exp bjf
    bjh:f64[400,36] = sqrt bjg
    bji:f64[400,36] = scan[
      _split_transpose=False
      jaxpr={ lambda ; bjj:f64[36,2] bjk:f64[9,2] bjl:f64[400,9] bjm:f64[19] bjn:i64[4]
          bjo:f64[18,3] bjp:f64[18,3] bjq:f64[13,3] bjr:f64[13,4] bjs:f64[13,4] bjt:f64[13,3]
          bju:i64[4] bjv:i64[4] bjw:i64[4] bjx:i64[4] bjy:i64[4] bjz:i64[4] bka:i64[4]
          bkb:i64[4] bkc:i64[13] bkd:i64[13] bke:f64[13,3] bkf:f64[13,4] bkg:i32[13]
          bkh:f64[13] bki:f64[13,3,3] bkj:i32[13] bkk:f64[4] bkl:f64[4] bkm:i64[18]
          bkn:f64[4] bko:i64[18] bkp:i64[4] bkq:i64[18] bkr:i64[4] bks:i64[4] bkt:i64[4]
          bku:i64[4] bkv:i64[4] bkw:i64[4] bkx:i64[4] bky:i64[4] bkz:i64[4] bla:i64[4]
          blb:i64[4] blc:i64[13] bld:i64[13] ble:i64[4] blf:i64[4] blg:i64[4] blh:i64[4]
          bli:i64[4] blj:i64[4] blk:i64[4] bll:i64[4] blm:i64[4] bln:i64[4] blo:i64[4]
          blp:i64[4] blq:i64[13] blr:i64[13] bls:i64[13] blt:i64[18] blu:i64[132]
          blv:i64[132] blw:f64[18] blx:f64[18] bly:f64[18] blz:i64[18] bma:f64[3]
          bmb:i64[4] bmc:i64[4] bmd:i64[4] bme:i64[4] bmf:i64[4] bmg:i64[4] bmh:i64[4]
          bmi:i64[4] bmj:i64[4] bmk:i64[4] bml:i64[4] bmm:i64[4] bmn:i64[4] bmo:i64[4]
          bmp:i64[13] bmq:i64[13] bmr:i64[4] bms:i64[4] bmt:i64[4] bmu:i64[4] bmv:i64[4]
          bmw:i64[4] bmx:i64[4] bmy:i64[4] bmz:i64[4] bna:i64[13] bnb:i64[13] bnc:i64[18]
          bnd:i64[4] bne:f64[4] bnf:f64[] bng:f64[3] bnh:f64[3] bni:f64[3] bnj:f64[]
          bnk:f64[8] bnl:f64[3] bnm:f64[3] bnn:f64[3] bno:i64[3] bnp:f64[3] bnq:f64[12]
          bnr:i32[12] bns:i32[12] bnt:f64[12,2] bnu:f64[12] bnv:f64[12] bnw:f64[12]
          bnx:f64[12] bny:f64[12,2] bnz:f64[400,18] boa:i64[4] bob:f64[400,36]. let
          boc:f64[400,36] = add bob 1.0
          bod:f64[36,1] = slice[
            limit_indices=(36, 2)
            start_indices=(0, 1)
            strides=None
          ] bjj
          boe:f64[36] = squeeze[dimensions=(1,)] bod
          bof:f64[36,1] = slice[
            limit_indices=(36, 1)
            start_indices=(0, 0)
            strides=None
          ] bjj
          bog:f64[36] = squeeze[dimensions=(1,)] bof
          boh:f64[36] = sub boe bog
          boi:f64[1,36] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 36)
          ] boh
          boj:f64[400,36] = mul boc boi
          bok:f64[400,36] = div boj 2.0
          bol:f64[36,1] = slice[
            limit_indices=(36, 1)
            start_indices=(0, 0)
            strides=None
          ] bjj
          bom:f64[36] = squeeze[dimensions=(1,)] bol
          bon:f64[1,36] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 36)
          ] bom
          boo:f64[400,36] = add bok bon
          bop:f64[400,1] = slice[
            limit_indices=(400, 36)
            start_indices=(0, 35)
            strides=None
          ] boo
          boq:f64[400] = squeeze[dimensions=(1,)] bop
          bor:f64[400,1] = slice[
            limit_indices=(400, 35)
            start_indices=(0, 34)
            strides=None
          ] boo
          bos:f64[400] = squeeze[dimensions=(1,)] bor
          bot:f64[400] = atan2 boq bos
          bou:f64[400] = add bot 0.12566370614359174
          bov:f64[400] = cos bou
          bow:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 34
          box:f64[400,36] = scatter[
            dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0,), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
            indices_are_sorted=True
            mode=GatherScatterMode.FILL_OR_DROP
            unique_indices=True
            update_consts=()
            update_jaxpr=None
          ] boo bow bov
          boy:f64[400] = sin bou
          boz:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 35
          bpa:f64[400,36] = scatter[
            dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0,), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
            indices_are_sorted=True
            mode=GatherScatterMode.FILL_OR_DROP
            unique_indices=True
            update_consts=()
            update_jaxpr=None
          ] box boz boy
          bpb:f64[36,1] = slice[
            limit_indices=(36, 1)
            start_indices=(0, 0)
            strides=None
          ] bjj
          bpc:f64[36] = squeeze[dimensions=(1,)] bpb
          bpd:f64[1,36] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 36)
          ] bpc
          bpe:f64[400,36] = sub bpa bpd
          bpf:f64[400,36] = mul 2.0 bpe
          bpg:f64[36,1] = slice[
            limit_indices=(36, 2)
            start_indices=(0, 1)
            strides=None
          ] bjj
          bph:f64[36] = squeeze[dimensions=(1,)] bpg
          bpi:f64[36,1] = slice[
            limit_indices=(36, 1)
            start_indices=(0, 0)
            strides=None
          ] bjj
          bpj:f64[36] = squeeze[dimensions=(1,)] bpi
          bpk:f64[36] = sub bph bpj
          bpl:f64[1,36] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 36)
          ] bpk
          bpm:f64[400,36] = div bpf bpl
          bpn:f64[400,36] = sub bpm 1.0
          bpo:f64[9,1] = slice[
            limit_indices=(9, 2)
            start_indices=(0, 1)
            strides=None
          ] bjk
          bpp:f64[9] = squeeze[dimensions=(1,)] bpo
          bpq:f64[9,1] = slice[
            limit_indices=(9, 1)
            start_indices=(0, 0)
            strides=None
          ] bjk
          bpr:f64[9] = squeeze[dimensions=(1,)] bpq
          bps:f64[9] = sub bpp bpr
          bpt:f64[1,9] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 9)
          ] bps
          bpu:f64[400,9] = mul bpt bjl
          bpv:f64[400,9] = div bpu 2.0
          bpw:f64[9,1] = slice[
            limit_indices=(9, 2)
            start_indices=(0, 1)
            strides=None
          ] bjk
          bpx:f64[9] = squeeze[dimensions=(1,)] bpw
          bpy:f64[9,1] = slice[
            limit_indices=(9, 1)
            start_indices=(0, 0)
            strides=None
          ] bjk
          bpz:f64[9] = squeeze[dimensions=(1,)] bpy
          bqa:f64[9] = add bpx bpz
          bqb:f64[9] = div bqa 2.0
          bqc:f64[1,9] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 9)
          ] bqb
          bqd:f64[400,9] = add bpv bqc
          bqe:f64[400,36] = add bob 1.0
          bqf:f64[36,1] = slice[
            limit_indices=(36, 2)
            start_indices=(0, 1)
            strides=None
          ] bjj
          bqg:f64[36] = squeeze[dimensions=(1,)] bqf
          bqh:f64[36,1] = slice[
            limit_indices=(36, 1)
            start_indices=(0, 0)
            strides=None
          ] bjj
          bqi:f64[36] = squeeze[dimensions=(1,)] bqh
          bqj:f64[36] = sub bqg bqi
          bqk:f64[1,36] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 36)
          ] bqj
          bql:f64[400,36] = mul bqe bqk
          bqm:f64[400,36] = div bql 2.0
          bqn:f64[36,1] = slice[
            limit_indices=(36, 1)
            start_indices=(0, 0)
            strides=None
          ] bjj
          bqo:f64[36] = squeeze[dimensions=(1,)] bqn
          bqp:f64[1,36] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 36)
          ] bqo
          bqq:f64[400,36] = add bqm bqp
          bqr:f64[400,36] = add bpn 1.0
          bqs:f64[36,1] = slice[
            limit_indices=(36, 2)
            start_indices=(0, 1)
            strides=None
          ] bjj
          bqt:f64[36] = squeeze[dimensions=(1,)] bqs
          bqu:f64[36,1] = slice[
            limit_indices=(36, 1)
            start_indices=(0, 0)
            strides=None
          ] bjj
          bqv:f64[36] = squeeze[dimensions=(1,)] bqu
          bqw:f64[36] = sub bqt bqv
          bqx:f64[1,36] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 36)
          ] bqw
          bqy:f64[400,36] = mul bqr bqx
          bqz:f64[400,36] = div bqy 2.0
          bra:f64[36,1] = slice[
            limit_indices=(36, 1)
            start_indices=(0, 0)
            strides=None
          ] bjj
          brb:f64[36] = squeeze[dimensions=(1,)] bra
          brc:f64[1,36] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 36)
          ] brb
          brd:f64[400,36] = add bqz brc
          bre:f64[400,4] = slice[
            limit_indices=(400, 4)
            start_indices=(0, 0)
            strides=None
          ] bqq
          brf:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 3
          brg:f64[400,19] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(400, 19)
          ] bjm
          brh:f64[400,19] = scatter[
            dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1), inserted_window_dims=(), scatter_dims_to_operand_dims=(1,))
            indices_are_sorted=True
            mode=GatherScatterMode.FILL_OR_DROP
            unique_indices=True
            update_consts=()
            update_jaxpr=None
          ] brg brf bre
          bri:f64[400,12] = slice[
            limit_indices=(400, 16)
            start_indices=(0, 4)
            strides=None
          ] bqq
          brj:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 7
          brk:f64[400,19] = scatter[
            dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1), inserted_window_dims=(), scatter_dims_to_operand_dims=(1,))
            indices_are_sorted=True
            mode=GatherScatterMode.FILL_OR_DROP
            unique_indices=True
            update_consts=()
            update_jaxpr=None
          ] brh brj bri
          brl:f64[400,4] = slice[
            limit_indices=(400, 4)
            start_indices=(0, 0)
            strides=None
          ] bqq
          brm:f64[400,3] = slice[
            limit_indices=(400, 19)
            start_indices=(0, 16)
            strides=None
          ] bqq
          brn:f64[400,1] = slice[
            limit_indices=(400, 1)
            start_indices=(0, 0)
            strides=None
          ] brl
          bro:f64[400] = squeeze[dimensions=(1,)] brn
          brp:f64[400,3] = slice[
            limit_indices=(400, 4)
            start_indices=(0, 1)
            strides=None
          ] brl
          brq:f64[400] = dot_general[
            dimension_numbers=(([1], [1]), ([0], [0]))
            preferred_element_type=float64
          ] brp brm
          brr:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] brq
          brs:f64[400,3] = mul brr brp
          brt:f64[400,3] = mul 2.0 brs
          bru:f64[400] = mul bro bro
          brv:f64[400] = dot_general[
            dimension_numbers=(([1], [1]), ([0], [0]))
            preferred_element_type=float64
          ] brp brp
          brw:f64[400] = sub bru brv
          brx:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] brw
          bry:f64[400,3] = mul brx brm
          brz:f64[400,3] = add brt bry
          bsa:f64[400] = mul 2.0 bro
          bsb:f64[400,3] = pjit[name=cross jaxpr=cross] brp brm
          bsc:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] bsa
          bsd:f64[400,3] = mul bsc bsb
          bse:f64[400,3] = add brz bsd
          bsf:f64[400,3] = slice[
            limit_indices=(400, 22)
            start_indices=(0, 19)
            strides=None
          ] bqq
          bsg:f64[4] = convert_element_type[new_dtype=float64 weak_type=False] bjn
          bsh:f64[1,4] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 4)
          ] bsg
          bsi:f64[400,4] = mul brl bsh
          bsj:f64[400,1] = slice[
            limit_indices=(400, 1)
            start_indices=(0, 0)
            strides=None
          ] bsi
          bsk:f64[400] = squeeze[dimensions=(1,)] bsj
          bsl:f64[400,3] = slice[
            limit_indices=(400, 4)
            start_indices=(0, 1)
            strides=None
          ] bsi
          bsm:f64[400] = dot_general[
            dimension_numbers=(([1], [1]), ([0], [0]))
            preferred_element_type=float64
          ] bsl bsf
          bsn:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] bsm
          bso:f64[400,3] = mul bsn bsl
          bsp:f64[400,3] = mul 2.0 bso
          bsq:f64[400] = mul bsk bsk
          bsr:f64[400] = dot_general[
            dimension_numbers=(([1], [1]), ([0], [0]))
            preferred_element_type=float64
          ] bsl bsl
          bss:f64[400] = sub bsq bsr
          bst:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] bss
          bsu:f64[400,3] = mul bst bsf
          bsv:f64[400,3] = add bsp bsu
          bsw:f64[400] = mul 2.0 bsk
          bsx:f64[400,3] = pjit[name=cross jaxpr=cross] bsl bsf
          bsy:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] bsw
          bsz:f64[400,3] = mul bsy bsx
          bta:f64[400,3] = add bsv bsz
          btb:f64[18] = broadcast_in_dim[broadcast_dimensions=() shape=(18,)] 0.0
          btc:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
          btd:f64[400,18] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(400, 18)
          ] btb
          bte:f64[400,18] = scatter[
            dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1), inserted_window_dims=(), scatter_dims_to_operand_dims=(1,))
            indices_are_sorted=True
            mode=GatherScatterMode.FILL_OR_DROP
            unique_indices=True
            update_consts=()
            update_jaxpr=None
          ] btd btc bse
          btf:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 3
          btg:f64[400,18] = scatter[
            dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1), inserted_window_dims=(), scatter_dims_to_operand_dims=(1,))
            indices_are_sorted=True
            mode=GatherScatterMode.FILL_OR_DROP
            unique_indices=True
            update_consts=()
            update_jaxpr=None
          ] bte btf bta
          bth:f64[400,12] = slice[
            limit_indices=(400, 34)
            start_indices=(0, 22)
            strides=None
          ] bqq
          bti:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 6
          btj:f64[400,18] = scatter[
            dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1), inserted_window_dims=(), scatter_dims_to_operand_dims=(1,))
            indices_are_sorted=True
            mode=GatherScatterMode.FILL_OR_DROP
            unique_indices=True
            update_consts=()
            update_jaxpr=None
          ] btg bti bth
          btk:f64[400,7] = slice[
            limit_indices=(400, 7)
            start_indices=(0, 0)
            strides=None
          ] brk
          btl:f64[400,1,7] = reshape[dimensions=None new_sizes=(400, 1, 7)] btk
          btm:f64[400,1,3] = slice[
            limit_indices=(400, 1, 3)
            start_indices=(0, 0, 0)
            strides=None
          ] btl
          btn:f64[400,1,4] = slice[
            limit_indices=(400, 1, 7)
            start_indices=(0, 0, 3)
            strides=None
          ] btl
          bto:f64[400,12] = slice[
            limit_indices=(400, 19)
            start_indices=(0, 7)
            strides=None
          ] brk
          btp:f64[12,3] = slice[
            limit_indices=(18, 3)
            start_indices=(6, 0)
            strides=None
          ] bjo
          btq:f64[12,3] = slice[
            limit_indices=(18, 3)
            start_indices=(6, 0)
            strides=None
          ] bjp
          btr:f64[12,1] = slice[
            limit_indices=(12, 1)
            start_indices=(0, 0)
            strides=None
          ] btp
          bts:f64[12] = squeeze[dimensions=(1,)] btr
          btt:f64[400,12] = div bto 2.0
          btu:f64[400,12] = sin btt
          btv:f64[1,12] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 12)
          ] bts
          btw:f64[400,12] = mul btv btu
          btx:f64[12,1] = slice[
            limit_indices=(12, 2)
            start_indices=(0, 1)
            strides=None
          ] btp
          bty:f64[12] = squeeze[dimensions=(1,)] btx
          btz:f64[400,12] = div bto 2.0
          bua:f64[400,12] = sin btz
          bub:f64[1,12] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 12)
          ] bty
          buc:f64[400,12] = mul bub bua
          bud:f64[12,1] = slice[
            limit_indices=(12, 3)
            start_indices=(0, 2)
            strides=None
          ] btp
          bue:f64[12] = squeeze[dimensions=(1,)] bud
          buf:f64[400,12] = div bto 2.0
          bug:f64[400,12] = sin buf
          buh:f64[1,12] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 12)
          ] bue
          bui:f64[400,12] = mul buh bug
          buj:f64[400,12] = div bto 2.0
          buk:f64[400,12] = cos buj
          bul:f64[400,12,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(400, 12, 1)
          ] buk
          bum:f64[400,12,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(400, 12, 1)
          ] btw
          bun:f64[400,12,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(400, 12, 1)
          ] buc
          buo:f64[400,12,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(400, 12, 1)
          ] bui
          bup:f64[400,12,4] = concatenate[dimension=2] bul bum bun buo
          buq:bool[400,12] = pjit[
            name=allclose
            jaxpr={ lambda ; bur:f64[400,12,4] bus:f64[]. let
                but:bool[400,12,4] = pjit[
                  name=isclose
                  jaxpr={ lambda ; buu:f64[400,12,4] buv:f64[] buw:f64[] bux:f64[]. let
                      buy:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] buv
                      buz:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] buw
                      bva:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] bux
                      bvb:f64[400,12,4] = sub buu buy
                      bvc:f64[400,12,4] = abs bvb
                      bvd:f64[] = abs buy
                      bve:f64[] = mul buz bvd
                      bvf:f64[] = add bva bve
                      bvg:bool[400,12,4] = le bvc bvf
                      bvh:bool[400,12,4] = pjit[
                        name=isinf
                        jaxpr={ lambda ; bvi:f64[400,12,4]. let
                            bvj:f64[400,12,4] = abs bvi
                            bvk:bool[400,12,4] = eq bvj inf
                          in (bvk,) }
                      ] buu
                      bvl:bool[] = pjit[name=isinf jaxpr=isinf] buy
                      bvm:bool[400,12,4] = or bvh bvl
                      bvn:bool[400,12,4] = and bvh bvl
                      bvo:bool[400,12,4] = not bvm
                      bvp:bool[400,12,4] = and bvg bvo
                      bvq:bool[400,12,4] = eq buu buy
                      bvr:bool[400,12,4] = and bvn bvq
                      bvs:bool[400,12,4] = or bvp bvr
                      bvt:bool[400,12,4] = ne buu buu
                      bvu:bool[] = ne buy buy
                      bvv:bool[400,12,4] = or bvt bvu
                      bvw:bool[400,12,4] = not bvv
                      bvx:bool[400,12,4] = and bvs bvw
                    in (bvx,) }
                ] bur bus 1e-05 1e-08
                bvy:bool[400,12] = reduce_and[axes=(2,)] but
              in (bvy,) }
          ] bup 0.0
          bvz:f64[4] = broadcast_in_dim[broadcast_dimensions=() shape=(4,)] 1.0
          bwa:f64[400,12,4] = pjit[
            name=_where
            jaxpr={ lambda ; bwb:bool[400,12] bwc:f64[4] bwd:f64[400,12,4]. let
                bwe:bool[400,12,4] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 12, 4)
                ] bwb
                bwf:f64[12,4] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(12, 4)
                ] bwc
                bwg:f64[400,12,4] = broadcast_in_dim[
                  broadcast_dimensions=(1, 2)
                  shape=(400, 12, 4)
                ] bwf
                bwh:f64[400,12,4] = select_n bwe bwd bwg
              in (bwh,) }
          ] buq bvz bup
          bwi:f64[400,12] = pjit[
            name=norm
            jaxpr={ lambda ; bwj:f64[400,12,4]. let
                bwk:f64[400,12,4] = mul bwj bwj
                bwl:f64[400,12] = reduce_sum[axes=(2,)] bwk
                bwm:f64[400,12] = sqrt bwl
              in (bwm,) }
          ] bwa
          bwn:f64[400,12] = pjit[
            name=_where
            jaxpr={ lambda ; bwo:bool[400,12] bwp:f64[] bwq:f64[400,12]. let
                bwr:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] bwp
                bws:f64[12] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(12,)
                ] bwr
                bwt:f64[400,12] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(400, 12)
                ] bws
                bwu:f64[400,12] = select_n bwo bwq bwt
              in (bwu,) }
          ] buq 0.0 bwi
          bwv:bool[400,12] = eq bwn 0.0
          bww:f64[400,12] = convert_element_type[
            new_dtype=float64
            weak_type=True
          ] bwv
          bwx:f64[400,12] = mul 1e-06 bww
          bwy:f64[400,12] = convert_element_type[
            new_dtype=float64
            weak_type=False
          ] bwx
          bwz:f64[400,12] = add bwn bwy
          bxa:f64[400,12,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(400, 12, 1)
          ] bwz
          bxb:f64[400,12,4] = div bup bxa
          bxc:f64[400,12,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(400, 12, 1)
          ] bto
          bxd:f64[1,12,3] = broadcast_in_dim[
            broadcast_dimensions=(1, 2)
            shape=(1, 12, 3)
          ] btq
          bxe:f64[400,12,3] = mul bxd bxc
          bxf:f64[400,12,1,3] = reshape[
            dimensions=None
            new_sizes=(400, 12, 1, 3)
          ] bxe
          bxg:f64[400,12,1,4] = reshape[
            dimensions=None
            new_sizes=(400, 12, 1, 4)
          ] bxb
          bxh:f64[400,12,3] = pjit[
            name=_take
            jaxpr={ lambda ; bxi:f64[400,12,1,3] bxj:i64[]. let
                bxk:i64[] = pjit[name=remainder jaxpr=remainder1] bxj 1
                bxl:i64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] bxk
                bxm:f64[400,12,3] = gather[
                  dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(2,), start_index_map=(2,))
                  fill_value=None
                  indices_are_sorted=False
                  mode=GatherScatterMode.PROMISE_IN_BOUNDS
                  slice_sizes=(400, 12, 1, 3)
                  unique_indices=False
                ] bxi bxl
              in (bxm,) }
          ] bxf 0
          bxn:f64[400,12,4] = pjit[
            name=_take
            jaxpr={ lambda ; bxo:f64[400,12,1,4] bxp:i64[]. let
                bxq:i64[] = pjit[name=remainder jaxpr=remainder1] bxp 1
                bxr:i64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] bxq
                bxs:f64[400,12,4] = gather[
                  dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(2,), start_index_map=(2,))
                  fill_value=None
                  indices_are_sorted=False
                  mode=GatherScatterMode.PROMISE_IN_BOUNDS
                  slice_sizes=(400, 12, 1, 4)
                  unique_indices=False
                ] bxo bxr
              in (bxs,) }
          ] bxg 0
          bxt:f64[400,13,3] = concatenate[dimension=1] btm bxh
          bxu:f64[400,13,4] = concatenate[dimension=1] btn bxn
          bxv:f64[13,3] = broadcast_in_dim[
            broadcast_dimensions=()
            shape=(13, 3)
          ] 0.0
          bxw:f64[400,13,1] = slice[
            limit_indices=(400, 13, 1)
            start_indices=(0, 0, 0)
            strides=None
          ] bxu
          bxx:f64[400,13] = squeeze[dimensions=(2,)] bxw
          bxy:f64[400,13,3] = slice[
            limit_indices=(400, 13, 4)
            start_indices=(0, 0, 1)
            strides=None
          ] bxu
          bxz:f64[13,400] = dot_general[
            dimension_numbers=(([2], [1]), ([1], [0]))
            preferred_element_type=float64
          ] bxy bjq
          bya:f64[400,13] = transpose[permutation=(1, 0)] bxz
          byb:f64[400,13,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(400, 13, 1)
          ] bya
          byc:f64[400,13,3] = mul byb bxy
          byd:f64[400,13,3] = mul 2.0 byc
          bye:f64[400,13] = mul bxx bxx
          byf:f64[400,13] = dot_general[
            dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
            preferred_element_type=float64
          ] bxy bxy
          byg:f64[400,13] = sub bye byf
          byh:f64[400,13,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(400, 13, 1)
          ] byg
          byi:f64[1,13,3] = broadcast_in_dim[
            broadcast_dimensions=(1, 2)
            shape=(1, 13, 3)
          ] bjq
          byj:f64[400,13,3] = mul byh byi
          byk:f64[400,13,3] = add byd byj
          byl:f64[400,13] = mul 2.0 bxx
          bym:f64[400,13,3] = pjit[name=cross jaxpr=cross1] bxy bjq
          byn:f64[400,13,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(400, 13, 1)
          ] byl
          byo:f64[400,13,3] = mul byn bym
          byp:f64[400,13,3] = add byk byo
          byq:f64[1,13,3] = broadcast_in_dim[
            broadcast_dimensions=(1, 2)
            shape=(1, 13, 3)
          ] bxv
          byr:f64[400,13,3] = add byq byp
          bys:f64[1,13,3] = broadcast_in_dim[
            broadcast_dimensions=(1, 2)
            shape=(1, 13, 3)
          ] bjq
          byt:f64[400,13,3] = add bxt bys
          byu:f64[400,13,3] = sub byt byr
          byv:f64[13,1] = slice[
            limit_indices=(13, 1)
            start_indices=(0, 0)
            strides=None
          ] bjs
          byw:f64[13] = squeeze[dimensions=(1,)] byv
          byx:f64[13,3] = slice[
            limit_indices=(13, 4)
            start_indices=(0, 1)
            strides=None
          ] bjs
          byy:f64[13,400] = dot_general[
            dimension_numbers=(([1], [2]), ([0], [1]))
            preferred_element_type=float64
          ] byx byu
          byz:f64[400,13] = transpose[permutation=(1, 0)] byy
          bza:f64[400,13,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(400, 13, 1)
          ] byz
          bzb:f64[1,13,3] = broadcast_in_dim[
            broadcast_dimensions=(1, 2)
            shape=(1, 13, 3)
          ] byx
          bzc:f64[400,13,3] = mul bza bzb
          bzd:f64[400,13,3] = mul 2.0 bzc
          bze:f64[13] = mul byw byw
          bzf:f64[13] = dot_general[
            dimension_numbers=(([1], [1]), ([0], [0]))
            preferred_element_type=float64
          ] byx byx
          bzg:f64[13] = sub bze bzf
          bzh:f64[13,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(13, 1)
          ] bzg
          bzi:f64[1,13,1] = broadcast_in_dim[
            broadcast_dimensions=(1, 2)
            shape=(1, 13, 1)
          ] bzh
          bzj:f64[400,13,3] = mul bzi byu
          bzk:f64[400,13,3] = add bzd bzj
          bzl:f64[13] = mul 2.0 byw
          bzm:f64[400,13,3] = pjit[
            name=cross
            jaxpr={ lambda ; bzn:f64[13,3] bzo:f64[400,13,3]. let
                bzp:i32[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] 0
                bzq:f64[13] = gather[
                  dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
                  fill_value=None
                  indices_are_sorted=True
                  mode=GatherScatterMode.PROMISE_IN_BOUNDS
                  slice_sizes=(13, 1)
                  unique_indices=True
                ] bzn bzp
                bzr:i32[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] 1
                bzs:f64[13] = gather[
                  dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
                  fill_value=None
                  indices_are_sorted=True
                  mode=GatherScatterMode.PROMISE_IN_BOUNDS
                  slice_sizes=(13, 1)
                  unique_indices=True
                ] bzn bzr
                bzt:i32[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] 2
                bzu:f64[13] = gather[
                  dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
                  fill_value=None
                  indices_are_sorted=True
                  mode=GatherScatterMode.PROMISE_IN_BOUNDS
                  slice_sizes=(13, 1)
                  unique_indices=True
                ] bzn bzt
                bzv:i32[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] 0
                bzw:f64[400,13] = gather[
                  dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
                  fill_value=None
                  indices_are_sorted=True
                  mode=GatherScatterMode.PROMISE_IN_BOUNDS
                  slice_sizes=(400, 13, 1)
                  unique_indices=True
                ] bzo bzv
                bzx:i32[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] 1
                bzy:f64[400,13] = gather[
                  dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
                  fill_value=None
                  indices_are_sorted=True
                  mode=GatherScatterMode.PROMISE_IN_BOUNDS
                  slice_sizes=(400, 13, 1)
                  unique_indices=True
                ] bzo bzx
                bzz:i32[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] 2
                caa:f64[400,13] = gather[
                  dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
                  fill_value=None
                  indices_are_sorted=True
                  mode=GatherScatterMode.PROMISE_IN_BOUNDS
                  slice_sizes=(400, 13, 1)
                  unique_indices=True
                ] bzo bzz
                cab:f64[1,13] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 13)
                ] bzs
                cac:f64[400,13] = mul cab caa
                cad:f64[1,13] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 13)
                ] bzu
                cae:f64[400,13] = mul cad bzy
                caf:f64[400,13] = sub cac cae
                cag:f64[1,13] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 13)
                ] bzu
                cah:f64[400,13] = mul cag bzw
                cai:f64[1,13] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 13)
                ] bzq
                caj:f64[400,13] = mul cai caa
                cak:f64[400,13] = sub cah caj
                cal:f64[1,13] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 13)
                ] bzq
                cam:f64[400,13] = mul cal bzy
                can:f64[1,13] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 13)
                ] bzs
                cao:f64[400,13] = mul can bzw
                cap:f64[400,13] = sub cam cao
                caq:f64[400,13,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 13, 1)
                ] caf
                car:f64[400,13,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 13, 1)
                ] cak
                cas:f64[400,13,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 13, 1)
                ] cap
                cat:f64[400,13,3] = concatenate[dimension=2] caq car cas
              in (cat,) }
          ] byx byu
          cau:f64[13,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(13, 1)
          ] bzl
          cav:f64[1,13,1] = broadcast_in_dim[
            broadcast_dimensions=(1, 2)
            shape=(1, 13, 1)
          ] cau
          caw:f64[400,13,3] = mul cav bzm
          cax:f64[400,13,3] = add bzk caw
          cay:f64[1,13,3] = broadcast_in_dim[
            broadcast_dimensions=(1, 2)
            shape=(1, 13, 3)
          ] bjt
          caz:f64[400,13,3] = add cay cax
          cba:f64[13,1] = slice[
            limit_indices=(13, 1)
            start_indices=(0, 0)
            strides=None
          ] bjs
          cbb:f64[13] = squeeze[dimensions=(1,)] cba
          cbc:f64[400,13,1] = slice[
            limit_indices=(400, 13, 1)
            start_indices=(0, 0, 0)
            strides=None
          ] bxu
          cbd:f64[400,13] = squeeze[dimensions=(2,)] cbc
          cbe:f64[1,13] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 13)
          ] cbb
          cbf:f64[400,13] = mul cbe cbd
          cbg:f64[13,1] = slice[
            limit_indices=(13, 2)
            start_indices=(0, 1)
            strides=None
          ] bjs
          cbh:f64[13] = squeeze[dimensions=(1,)] cbg
          cbi:f64[400,13,1] = slice[
            limit_indices=(400, 13, 2)
            start_indices=(0, 0, 1)
            strides=None
          ] bxu
          cbj:f64[400,13] = squeeze[dimensions=(2,)] cbi
          cbk:f64[1,13] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 13)
          ] cbh
          cbl:f64[400,13] = mul cbk cbj
          cbm:f64[400,13] = sub cbf cbl
          cbn:f64[13,1] = slice[
            limit_indices=(13, 3)
            start_indices=(0, 2)
            strides=None
          ] bjs
          cbo:f64[13] = squeeze[dimensions=(1,)] cbn
          cbp:f64[400,13,1] = slice[
            limit_indices=(400, 13, 3)
            start_indices=(0, 0, 2)
            strides=None
          ] bxu
          cbq:f64[400,13] = squeeze[dimensions=(2,)] cbp
          cbr:f64[1,13] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 13)
          ] cbo
          cbs:f64[400,13] = mul cbr cbq
          cbt:f64[400,13] = sub cbm cbs
          cbu:f64[13,1] = slice[
            limit_indices=(13, 4)
            start_indices=(0, 3)
            strides=None
          ] bjs
          cbv:f64[13] = squeeze[dimensions=(1,)] cbu
          cbw:f64[400,13,1] = slice[
            limit_indices=(400, 13, 4)
            start_indices=(0, 0, 3)
            strides=None
          ] bxu
          cbx:f64[400,13] = squeeze[dimensions=(2,)] cbw
          cby:f64[1,13] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 13)
          ] cbv
          cbz:f64[400,13] = mul cby cbx
          cca:f64[400,13] = sub cbt cbz
          ccb:f64[13,1] = slice[
            limit_indices=(13, 1)
            start_indices=(0, 0)
            strides=None
          ] bjs
          ccc:f64[13] = squeeze[dimensions=(1,)] ccb
          ccd:f64[400,13,1] = slice[
            limit_indices=(400, 13, 2)
            start_indices=(0, 0, 1)
            strides=None
          ] bxu
          cce:f64[400,13] = squeeze[dimensions=(2,)] ccd
          ccf:f64[1,13] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 13)
          ] ccc
          ccg:f64[400,13] = mul ccf cce
          cch:f64[13,1] = slice[
            limit_indices=(13, 2)
            start_indices=(0, 1)
            strides=None
          ] bjs
          cci:f64[13] = squeeze[dimensions=(1,)] cch
          ccj:f64[400,13,1] = slice[
            limit_indices=(400, 13, 1)
            start_indices=(0, 0, 0)
            strides=None
          ] bxu
          cck:f64[400,13] = squeeze[dimensions=(2,)] ccj
          ccl:f64[1,13] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 13)
          ] cci
          ccm:f64[400,13] = mul ccl cck
          ccn:f64[400,13] = add ccg ccm
          cco:f64[13,1] = slice[
            limit_indices=(13, 3)
            start_indices=(0, 2)
            strides=None
          ] bjs
          ccp:f64[13] = squeeze[dimensions=(1,)] cco
          ccq:f64[400,13,1] = slice[
            limit_indices=(400, 13, 4)
            start_indices=(0, 0, 3)
            strides=None
          ] bxu
          ccr:f64[400,13] = squeeze[dimensions=(2,)] ccq
          ccs:f64[1,13] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 13)
          ] ccp
          cct:f64[400,13] = mul ccs ccr
          ccu:f64[400,13] = add ccn cct
          ccv:f64[13,1] = slice[
            limit_indices=(13, 4)
            start_indices=(0, 3)
            strides=None
          ] bjs
          ccw:f64[13] = squeeze[dimensions=(1,)] ccv
          ccx:f64[400,13,1] = slice[
            limit_indices=(400, 13, 3)
            start_indices=(0, 0, 2)
            strides=None
          ] bxu
          ccy:f64[400,13] = squeeze[dimensions=(2,)] ccx
          ccz:f64[1,13] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 13)
          ] ccw
          cda:f64[400,13] = mul ccz ccy
          cdb:f64[400,13] = sub ccu cda
          cdc:f64[13,1] = slice[
            limit_indices=(13, 1)
            start_indices=(0, 0)
            strides=None
          ] bjs
          cdd:f64[13] = squeeze[dimensions=(1,)] cdc
          cde:f64[400,13,1] = slice[
            limit_indices=(400, 13, 3)
            start_indices=(0, 0, 2)
            strides=None
          ] bxu
          cdf:f64[400,13] = squeeze[dimensions=(2,)] cde
          cdg:f64[1,13] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 13)
          ] cdd
          cdh:f64[400,13] = mul cdg cdf
          cdi:f64[13,1] = slice[
            limit_indices=(13, 2)
            start_indices=(0, 1)
            strides=None
          ] bjs
          cdj:f64[13] = squeeze[dimensions=(1,)] cdi
          cdk:f64[400,13,1] = slice[
            limit_indices=(400, 13, 4)
            start_indices=(0, 0, 3)
            strides=None
          ] bxu
          cdl:f64[400,13] = squeeze[dimensions=(2,)] cdk
          cdm:f64[1,13] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 13)
          ] cdj
          cdn:f64[400,13] = mul cdm cdl
          cdo:f64[400,13] = sub cdh cdn
          cdp:f64[13,1] = slice[
            limit_indices=(13, 3)
            start_indices=(0, 2)
            strides=None
          ] bjs
          cdq:f64[13] = squeeze[dimensions=(1,)] cdp
          cdr:f64[400,13,1] = slice[
            limit_indices=(400, 13, 1)
            start_indices=(0, 0, 0)
            strides=None
          ] bxu
          cds:f64[400,13] = squeeze[dimensions=(2,)] cdr
          cdt:f64[1,13] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 13)
          ] cdq
          cdu:f64[400,13] = mul cdt cds
          cdv:f64[400,13] = add cdo cdu
          cdw:f64[13,1] = slice[
            limit_indices=(13, 4)
            start_indices=(0, 3)
            strides=None
          ] bjs
          cdx:f64[13] = squeeze[dimensions=(1,)] cdw
          cdy:f64[400,13,1] = slice[
            limit_indices=(400, 13, 2)
            start_indices=(0, 0, 1)
            strides=None
          ] bxu
          cdz:f64[400,13] = squeeze[dimensions=(2,)] cdy
          cea:f64[1,13] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 13)
          ] cdx
          ceb:f64[400,13] = mul cea cdz
          cec:f64[400,13] = add cdv ceb
          ced:f64[13,1] = slice[
            limit_indices=(13, 1)
            start_indices=(0, 0)
            strides=None
          ] bjs
          cee:f64[13] = squeeze[dimensions=(1,)] ced
          cef:f64[400,13,1] = slice[
            limit_indices=(400, 13, 4)
            start_indices=(0, 0, 3)
            strides=None
          ] bxu
          ceg:f64[400,13] = squeeze[dimensions=(2,)] cef
          ceh:f64[1,13] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 13)
          ] cee
          cei:f64[400,13] = mul ceh ceg
          cej:f64[13,1] = slice[
            limit_indices=(13, 2)
            start_indices=(0, 1)
            strides=None
          ] bjs
          cek:f64[13] = squeeze[dimensions=(1,)] cej
          cel:f64[400,13,1] = slice[
            limit_indices=(400, 13, 3)
            start_indices=(0, 0, 2)
            strides=None
          ] bxu
          cem:f64[400,13] = squeeze[dimensions=(2,)] cel
          cen:f64[1,13] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 13)
          ] cek
          ceo:f64[400,13] = mul cen cem
          cep:f64[400,13] = add cei ceo
          ceq:f64[13,1] = slice[
            limit_indices=(13, 3)
            start_indices=(0, 2)
            strides=None
          ] bjs
          cer:f64[13] = squeeze[dimensions=(1,)] ceq
          ces:f64[400,13,1] = slice[
            limit_indices=(400, 13, 2)
            start_indices=(0, 0, 1)
            strides=None
          ] bxu
          cet:f64[400,13] = squeeze[dimensions=(2,)] ces
          ceu:f64[1,13] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 13)
          ] cer
          cev:f64[400,13] = mul ceu cet
          cew:f64[400,13] = sub cep cev
          cex:f64[13,1] = slice[
            limit_indices=(13, 4)
            start_indices=(0, 3)
            strides=None
          ] bjs
          cey:f64[13] = squeeze[dimensions=(1,)] cex
          cez:f64[400,13,1] = slice[
            limit_indices=(400, 13, 1)
            start_indices=(0, 0, 0)
            strides=None
          ] bxu
          cfa:f64[400,13] = squeeze[dimensions=(2,)] cez
          cfb:f64[1,13] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 13)
          ] cey
          cfc:f64[400,13] = mul cfb cfa
          cfd:f64[400,13] = add cew cfc
          cfe:f64[400,13,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(400, 13, 1)
          ] cca
          cff:f64[400,13,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(400, 13, 1)
          ] cdb
          cfg:f64[400,13,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(400, 13, 1)
          ] cec
          cfh:f64[400,13,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(400, 13, 1)
          ] cfd
          cfi:f64[400,13,4] = concatenate[dimension=2] cfe cff cfg cfh
          cfj:f64[400,1,3] = slice[
            limit_indices=(400, 1, 3)
            start_indices=(0, 0, 0)
            strides=None
          ] caz
          cfk:f64[400,1,4] = slice[
            limit_indices=(400, 1, 4)
            start_indices=(0, 0, 0)
            strides=None
          ] cfi
          cfl:f64[400,4,3] = pjit[name=_take jaxpr=_take] caz bju
          cfm:f64[400,4,4] = pjit[name=_take jaxpr=_take1] cfi bjv
          cfn:f64[400,4,3] = pjit[name=_take jaxpr=_take2] cfj bjw
          cfo:f64[400,4,4] = pjit[
            name=_take
            jaxpr={ lambda ; cfp:f64[400,1,4] cfq:i64[4]. let
                cfr:i64[4] = pjit[name=remainder jaxpr=remainder2] cfq 1
                cfs:i64[4,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(4, 1)
                ] cfr
                cft:f64[400,4,4] = gather[
                  dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 2), collapsed_slice_dims=(1,), start_index_map=(1,))
                  fill_value=None
                  indices_are_sorted=False
                  mode=GatherScatterMode.PROMISE_IN_BOUNDS
                  slice_sizes=(400, 1, 4)
                  unique_indices=False
                ] cfp cfs
              in (cft,) }
          ] cfk bjx
          cfu:f64[400,4,1] = slice[
            limit_indices=(400, 4, 1)
            start_indices=(0, 0, 0)
            strides=None
          ] cfo
          cfv:f64[400,4] = squeeze[dimensions=(2,)] cfu
          cfw:f64[400,4,3] = slice[
            limit_indices=(400, 4, 4)
            start_indices=(0, 0, 1)
            strides=None
          ] cfo
          cfx:f64[400,4] = dot_general[
            dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
            preferred_element_type=float64
          ] cfw cfl
          cfy:f64[400,4,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(400, 4, 1)
          ] cfx
          cfz:f64[400,4,3] = mul cfy cfw
          cga:f64[400,4,3] = mul 2.0 cfz
          cgb:f64[400,4] = mul cfv cfv
          cgc:f64[400,4] = dot_general[
            dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
            preferred_element_type=float64
          ] cfw cfw
          cgd:f64[400,4] = sub cgb cgc
          cge:f64[400,4,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(400, 4, 1)
          ] cgd
          cgf:f64[400,4,3] = mul cge cfl
          cgg:f64[400,4,3] = add cga cgf
          cgh:f64[400,4] = mul 2.0 cfv
          cgi:f64[400,4,3] = pjit[name=cross jaxpr=cross2] cfw cfl
          cgj:f64[400,4,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(400, 4, 1)
          ] cgh
          cgk:f64[400,4,3] = mul cgj cgi
          cgl:f64[400,4,3] = add cgg cgk
          cgm:f64[400,4,3] = add cfn cgl
          cgn:f64[400,4,1] = slice[
            limit_indices=(400, 4, 1)
            start_indices=(0, 0, 0)
            strides=None
          ] cfo
          cgo:f64[400,4] = squeeze[dimensions=(2,)] cgn
          cgp:f64[400,4,1] = slice[
            limit_indices=(400, 4, 1)
            start_indices=(0, 0, 0)
            strides=None
          ] cfm
          cgq:f64[400,4] = squeeze[dimensions=(2,)] cgp
          cgr:f64[400,4] = mul cgo cgq
          cgs:f64[400,4,1] = slice[
            limit_indices=(400, 4, 2)
            start_indices=(0, 0, 1)
            strides=None
          ] cfo
          cgt:f64[400,4] = squeeze[dimensions=(2,)] cgs
          cgu:f64[400,4,1] = slice[
            limit_indices=(400, 4, 2)
            start_indices=(0, 0, 1)
            strides=None
          ] cfm
          cgv:f64[400,4] = squeeze[dimensions=(2,)] cgu
          cgw:f64[400,4] = mul cgt cgv
          cgx:f64[400,4] = sub cgr cgw
          cgy:f64[400,4,1] = slice[
            limit_indices=(400, 4, 3)
            start_indices=(0, 0, 2)
            strides=None
          ] cfo
          cgz:f64[400,4] = squeeze[dimensions=(2,)] cgy
          cha:f64[400,4,1] = slice[
            limit_indices=(400, 4, 3)
            start_indices=(0, 0, 2)
            strides=None
          ] cfm
          chb:f64[400,4] = squeeze[dimensions=(2,)] cha
          chc:f64[400,4] = mul cgz chb
          chd:f64[400,4] = sub cgx chc
          che:f64[400,4,1] = slice[
            limit_indices=(400, 4, 4)
            start_indices=(0, 0, 3)
            strides=None
          ] cfo
          chf:f64[400,4] = squeeze[dimensions=(2,)] che
          chg:f64[400,4,1] = slice[
            limit_indices=(400, 4, 4)
            start_indices=(0, 0, 3)
            strides=None
          ] cfm
          chh:f64[400,4] = squeeze[dimensions=(2,)] chg
          chi:f64[400,4] = mul chf chh
          chj:f64[400,4] = sub chd chi
          chk:f64[400,4,1] = slice[
            limit_indices=(400, 4, 1)
            start_indices=(0, 0, 0)
            strides=None
          ] cfo
          chl:f64[400,4] = squeeze[dimensions=(2,)] chk
          chm:f64[400,4,1] = slice[
            limit_indices=(400, 4, 2)
            start_indices=(0, 0, 1)
            strides=None
          ] cfm
          chn:f64[400,4] = squeeze[dimensions=(2,)] chm
          cho:f64[400,4] = mul chl chn
          chp:f64[400,4,1] = slice[
            limit_indices=(400, 4, 2)
            start_indices=(0, 0, 1)
            strides=None
          ] cfo
          chq:f64[400,4] = squeeze[dimensions=(2,)] chp
          chr:f64[400,4,1] = slice[
            limit_indices=(400, 4, 1)
            start_indices=(0, 0, 0)
            strides=None
          ] cfm
          chs:f64[400,4] = squeeze[dimensions=(2,)] chr
          cht:f64[400,4] = mul chq chs
          chu:f64[400,4] = add cho cht
          chv:f64[400,4,1] = slice[
            limit_indices=(400, 4, 3)
            start_indices=(0, 0, 2)
            strides=None
          ] cfo
          chw:f64[400,4] = squeeze[dimensions=(2,)] chv
          chx:f64[400,4,1] = slice[
            limit_indices=(400, 4, 4)
            start_indices=(0, 0, 3)
            strides=None
          ] cfm
          chy:f64[400,4] = squeeze[dimensions=(2,)] chx
          chz:f64[400,4] = mul chw chy
          cia:f64[400,4] = add chu chz
          cib:f64[400,4,1] = slice[
            limit_indices=(400, 4, 4)
            start_indices=(0, 0, 3)
            strides=None
          ] cfo
          cic:f64[400,4] = squeeze[dimensions=(2,)] cib
          cid:f64[400,4,1] = slice[
            limit_indices=(400, 4, 3)
            start_indices=(0, 0, 2)
            strides=None
          ] cfm
          cie:f64[400,4] = squeeze[dimensions=(2,)] cid
          cif:f64[400,4] = mul cic cie
          cig:f64[400,4] = sub cia cif
          cih:f64[400,4,1] = slice[
            limit_indices=(400, 4, 1)
            start_indices=(0, 0, 0)
            strides=None
          ] cfo
          cii:f64[400,4] = squeeze[dimensions=(2,)] cih
          cij:f64[400,4,1] = slice[
            limit_indices=(400, 4, 3)
            start_indices=(0, 0, 2)
            strides=None
          ] cfm
          cik:f64[400,4] = squeeze[dimensions=(2,)] cij
          cil:f64[400,4] = mul cii cik
          cim:f64[400,4,1] = slice[
            limit_indices=(400, 4, 2)
            start_indices=(0, 0, 1)
            strides=None
          ] cfo
          cin:f64[400,4] = squeeze[dimensions=(2,)] cim
          cio:f64[400,4,1] = slice[
            limit_indices=(400, 4, 4)
            start_indices=(0, 0, 3)
            strides=None
          ] cfm
          cip:f64[400,4] = squeeze[dimensions=(2,)] cio
          ciq:f64[400,4] = mul cin cip
          cir:f64[400,4] = sub cil ciq
          cis:f64[400,4,1] = slice[
            limit_indices=(400, 4, 3)
            start_indices=(0, 0, 2)
            strides=None
          ] cfo
          cit:f64[400,4] = squeeze[dimensions=(2,)] cis
          ciu:f64[400,4,1] = slice[
            limit_indices=(400, 4, 1)
            start_indices=(0, 0, 0)
            strides=None
          ] cfm
          civ:f64[400,4] = squeeze[dimensions=(2,)] ciu
          ciw:f64[400,4] = mul cit civ
          cix:f64[400,4] = add cir ciw
          ciy:f64[400,4,1] = slice[
            limit_indices=(400, 4, 4)
            start_indices=(0, 0, 3)
            strides=None
          ] cfo
          ciz:f64[400,4] = squeeze[dimensions=(2,)] ciy
          cja:f64[400,4,1] = slice[
            limit_indices=(400, 4, 2)
            start_indices=(0, 0, 1)
            strides=None
          ] cfm
          cjb:f64[400,4] = squeeze[dimensions=(2,)] cja
          cjc:f64[400,4] = mul ciz cjb
          cjd:f64[400,4] = add cix cjc
          cje:f64[400,4,1] = slice[
            limit_indices=(400, 4, 1)
            start_indices=(0, 0, 0)
            strides=None
          ] cfo
          cjf:f64[400,4] = squeeze[dimensions=(2,)] cje
          cjg:f64[400,4,1] = slice[
            limit_indices=(400, 4, 4)
            start_indices=(0, 0, 3)
            strides=None
          ] cfm
          cjh:f64[400,4] = squeeze[dimensions=(2,)] cjg
          cji:f64[400,4] = mul cjf cjh
          cjj:f64[400,4,1] = slice[
            limit_indices=(400, 4, 2)
            start_indices=(0, 0, 1)
            strides=None
          ] cfo
          cjk:f64[400,4] = squeeze[dimensions=(2,)] cjj
          cjl:f64[400,4,1] = slice[
            limit_indices=(400, 4, 3)
            start_indices=(0, 0, 2)
            strides=None
          ] cfm
          cjm:f64[400,4] = squeeze[dimensions=(2,)] cjl
          cjn:f64[400,4] = mul cjk cjm
          cjo:f64[400,4] = add cji cjn
          cjp:f64[400,4,1] = slice[
            limit_indices=(400, 4, 3)
            start_indices=(0, 0, 2)
            strides=None
          ] cfo
          cjq:f64[400,4] = squeeze[dimensions=(2,)] cjp
          cjr:f64[400,4,1] = slice[
            limit_indices=(400, 4, 2)
            start_indices=(0, 0, 1)
            strides=None
          ] cfm
          cjs:f64[400,4] = squeeze[dimensions=(2,)] cjr
          cjt:f64[400,4] = mul cjq cjs
          cju:f64[400,4] = sub cjo cjt
          cjv:f64[400,4,1] = slice[
            limit_indices=(400, 4, 4)
            start_indices=(0, 0, 3)
            strides=None
          ] cfo
          cjw:f64[400,4] = squeeze[dimensions=(2,)] cjv
          cjx:f64[400,4,1] = slice[
            limit_indices=(400, 4, 1)
            start_indices=(0, 0, 0)
            strides=None
          ] cfm
          cjy:f64[400,4] = squeeze[dimensions=(2,)] cjx
          cjz:f64[400,4] = mul cjw cjy
          cka:f64[400,4] = add cju cjz
          ckb:f64[400,4,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(400, 4, 1)
          ] chj
          ckc:f64[400,4,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(400, 4, 1)
          ] cig
          ckd:f64[400,4,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(400, 4, 1)
          ] cjd
          cke:f64[400,4,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(400, 4, 1)
          ] cka
          ckf:f64[400,4,4] = concatenate[dimension=2] ckb ckc ckd cke
          ckg:f64[400,4,3] = pjit[name=_take jaxpr=_take] caz bjy
          ckh:f64[400,4,4] = pjit[name=_take jaxpr=_take1] cfi bjz
          cki:f64[400,4,1] = slice[
            limit_indices=(400, 4, 1)
            start_indices=(0, 0, 0)
            strides=None
          ] ckf
          ckj:f64[400,4] = squeeze[dimensions=(2,)] cki
          ckk:f64[400,4,3] = slice[
            limit_indices=(400, 4, 4)
            start_indices=(0, 0, 1)
            strides=None
          ] ckf
          ckl:f64[400,4] = dot_general[
            dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
            preferred_element_type=float64
          ] ckk ckg
          ckm:f64[400,4,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(400, 4, 1)
          ] ckl
          ckn:f64[400,4,3] = mul ckm ckk
          cko:f64[400,4,3] = mul 2.0 ckn
          ckp:f64[400,4] = mul ckj ckj
          ckq:f64[400,4] = dot_general[
            dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
            preferred_element_type=float64
          ] ckk ckk
          ckr:f64[400,4] = sub ckp ckq
          cks:f64[400,4,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(400, 4, 1)
          ] ckr
          ckt:f64[400,4,3] = mul cks ckg
          cku:f64[400,4,3] = add cko ckt
          ckv:f64[400,4] = mul 2.0 ckj
          ckw:f64[400,4,3] = pjit[name=cross jaxpr=cross2] ckk ckg
          ckx:f64[400,4,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(400, 4, 1)
          ] ckv
          cky:f64[400,4,3] = mul ckx ckw
          ckz:f64[400,4,3] = add cku cky
          cla:f64[400,4,3] = add cgm ckz
          clb:f64[400,4,1] = slice[
            limit_indices=(400, 4, 1)
            start_indices=(0, 0, 0)
            strides=None
          ] ckf
          clc:f64[400,4] = squeeze[dimensions=(2,)] clb
          cld:f64[400,4,1] = slice[
            limit_indices=(400, 4, 1)
            start_indices=(0, 0, 0)
            strides=None
          ] ckh
          cle:f64[400,4] = squeeze[dimensions=(2,)] cld
          clf:f64[400,4] = mul clc cle
          clg:f64[400,4,1] = slice[
            limit_indices=(400, 4, 2)
            start_indices=(0, 0, 1)
            strides=None
          ] ckf
          clh:f64[400,4] = squeeze[dimensions=(2,)] clg
          cli:f64[400,4,1] = slice[
            limit_indices=(400, 4, 2)
            start_indices=(0, 0, 1)
            strides=None
          ] ckh
          clj:f64[400,4] = squeeze[dimensions=(2,)] cli
          clk:f64[400,4] = mul clh clj
          cll:f64[400,4] = sub clf clk
          clm:f64[400,4,1] = slice[
            limit_indices=(400, 4, 3)
            start_indices=(0, 0, 2)
            strides=None
          ] ckf
          cln:f64[400,4] = squeeze[dimensions=(2,)] clm
          clo:f64[400,4,1] = slice[
            limit_indices=(400, 4, 3)
            start_indices=(0, 0, 2)
            strides=None
          ] ckh
          clp:f64[400,4] = squeeze[dimensions=(2,)] clo
          clq:f64[400,4] = mul cln clp
          clr:f64[400,4] = sub cll clq
          cls:f64[400,4,1] = slice[
            limit_indices=(400, 4, 4)
            start_indices=(0, 0, 3)
            strides=None
          ] ckf
          clt:f64[400,4] = squeeze[dimensions=(2,)] cls
          clu:f64[400,4,1] = slice[
            limit_indices=(400, 4, 4)
            start_indices=(0, 0, 3)
            strides=None
          ] ckh
          clv:f64[400,4] = squeeze[dimensions=(2,)] clu
          clw:f64[400,4] = mul clt clv
          clx:f64[400,4] = sub clr clw
          cly:f64[400,4,1] = slice[
            limit_indices=(400, 4, 1)
            start_indices=(0, 0, 0)
            strides=None
          ] ckf
          clz:f64[400,4] = squeeze[dimensions=(2,)] cly
          cma:f64[400,4,1] = slice[
            limit_indices=(400, 4, 2)
            start_indices=(0, 0, 1)
            strides=None
          ] ckh
          cmb:f64[400,4] = squeeze[dimensions=(2,)] cma
          cmc:f64[400,4] = mul clz cmb
          cmd:f64[400,4,1] = slice[
            limit_indices=(400, 4, 2)
            start_indices=(0, 0, 1)
            strides=None
          ] ckf
          cme:f64[400,4] = squeeze[dimensions=(2,)] cmd
          cmf:f64[400,4,1] = slice[
            limit_indices=(400, 4, 1)
            start_indices=(0, 0, 0)
            strides=None
          ] ckh
          cmg:f64[400,4] = squeeze[dimensions=(2,)] cmf
          cmh:f64[400,4] = mul cme cmg
          cmi:f64[400,4] = add cmc cmh
          cmj:f64[400,4,1] = slice[
            limit_indices=(400, 4, 3)
            start_indices=(0, 0, 2)
            strides=None
          ] ckf
          cmk:f64[400,4] = squeeze[dimensions=(2,)] cmj
          cml:f64[400,4,1] = slice[
            limit_indices=(400, 4, 4)
            start_indices=(0, 0, 3)
            strides=None
          ] ckh
          cmm:f64[400,4] = squeeze[dimensions=(2,)] cml
          cmn:f64[400,4] = mul cmk cmm
          cmo:f64[400,4] = add cmi cmn
          cmp:f64[400,4,1] = slice[
            limit_indices=(400, 4, 4)
            start_indices=(0, 0, 3)
            strides=None
          ] ckf
          cmq:f64[400,4] = squeeze[dimensions=(2,)] cmp
          cmr:f64[400,4,1] = slice[
            limit_indices=(400, 4, 3)
            start_indices=(0, 0, 2)
            strides=None
          ] ckh
          cms:f64[400,4] = squeeze[dimensions=(2,)] cmr
          cmt:f64[400,4] = mul cmq cms
          cmu:f64[400,4] = sub cmo cmt
          cmv:f64[400,4,1] = slice[
            limit_indices=(400, 4, 1)
            start_indices=(0, 0, 0)
            strides=None
          ] ckf
          cmw:f64[400,4] = squeeze[dimensions=(2,)] cmv
          cmx:f64[400,4,1] = slice[
            limit_indices=(400, 4, 3)
            start_indices=(0, 0, 2)
            strides=None
          ] ckh
          cmy:f64[400,4] = squeeze[dimensions=(2,)] cmx
          cmz:f64[400,4] = mul cmw cmy
          cna:f64[400,4,1] = slice[
            limit_indices=(400, 4, 2)
            start_indices=(0, 0, 1)
            strides=None
          ] ckf
          cnb:f64[400,4] = squeeze[dimensions=(2,)] cna
          cnc:f64[400,4,1] = slice[
            limit_indices=(400, 4, 4)
            start_indices=(0, 0, 3)
            strides=None
          ] ckh
          cnd:f64[400,4] = squeeze[dimensions=(2,)] cnc
          cne:f64[400,4] = mul cnb cnd
          cnf:f64[400,4] = sub cmz cne
          cng:f64[400,4,1] = slice[
            limit_indices=(400, 4, 3)
            start_indices=(0, 0, 2)
            strides=None
          ] ckf
          cnh:f64[400,4] = squeeze[dimensions=(2,)] cng
          cni:f64[400,4,1] = slice[
            limit_indices=(400, 4, 1)
            start_indices=(0, 0, 0)
            strides=None
          ] ckh
          cnj:f64[400,4] = squeeze[dimensions=(2,)] cni
          cnk:f64[400,4] = mul cnh cnj
          cnl:f64[400,4] = add cnf cnk
          cnm:f64[400,4,1] = slice[
            limit_indices=(400, 4, 4)
            start_indices=(0, 0, 3)
            strides=None
          ] ckf
          cnn:f64[400,4] = squeeze[dimensions=(2,)] cnm
          cno:f64[400,4,1] = slice[
            limit_indices=(400, 4, 2)
            start_indices=(0, 0, 1)
            strides=None
          ] ckh
          cnp:f64[400,4] = squeeze[dimensions=(2,)] cno
          cnq:f64[400,4] = mul cnn cnp
          cnr:f64[400,4] = add cnl cnq
          cns:f64[400,4,1] = slice[
            limit_indices=(400, 4, 1)
            start_indices=(0, 0, 0)
            strides=None
          ] ckf
          cnt:f64[400,4] = squeeze[dimensions=(2,)] cns
          cnu:f64[400,4,1] = slice[
            limit_indices=(400, 4, 4)
            start_indices=(0, 0, 3)
            strides=None
          ] ckh
          cnv:f64[400,4] = squeeze[dimensions=(2,)] cnu
          cnw:f64[400,4] = mul cnt cnv
          cnx:f64[400,4,1] = slice[
            limit_indices=(400, 4, 2)
            start_indices=(0, 0, 1)
            strides=None
          ] ckf
          cny:f64[400,4] = squeeze[dimensions=(2,)] cnx
          cnz:f64[400,4,1] = slice[
            limit_indices=(400, 4, 3)
            start_indices=(0, 0, 2)
            strides=None
          ] ckh
          coa:f64[400,4] = squeeze[dimensions=(2,)] cnz
          cob:f64[400,4] = mul cny coa
          coc:f64[400,4] = add cnw cob
          cod:f64[400,4,1] = slice[
            limit_indices=(400, 4, 3)
            start_indices=(0, 0, 2)
            strides=None
          ] ckf
          coe:f64[400,4] = squeeze[dimensions=(2,)] cod
          cof:f64[400,4,1] = slice[
            limit_indices=(400, 4, 2)
            start_indices=(0, 0, 1)
            strides=None
          ] ckh
          cog:f64[400,4] = squeeze[dimensions=(2,)] cof
          coh:f64[400,4] = mul coe cog
          coi:f64[400,4] = sub coc coh
          coj:f64[400,4,1] = slice[
            limit_indices=(400, 4, 4)
            start_indices=(0, 0, 3)
            strides=None
          ] ckf
          cok:f64[400,4] = squeeze[dimensions=(2,)] coj
          col:f64[400,4,1] = slice[
            limit_indices=(400, 4, 1)
            start_indices=(0, 0, 0)
            strides=None
          ] ckh
          com:f64[400,4] = squeeze[dimensions=(2,)] col
          con:f64[400,4] = mul cok com
          coo:f64[400,4] = add coi con
          cop:f64[400,4,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(400, 4, 1)
          ] clx
          coq:f64[400,4,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(400, 4, 1)
          ] cmu
          cor:f64[400,4,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(400, 4, 1)
          ] cnr
          cos:f64[400,4,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(400, 4, 1)
          ] coo
          cot:f64[400,4,4] = concatenate[dimension=2] cop coq cor cos
          cou:f64[400,4,3] = pjit[name=_take jaxpr=_take] caz bka
          cov:f64[400,4,4] = pjit[name=_take jaxpr=_take1] cfi bkb
          cow:f64[400,4,1] = slice[
            limit_indices=(400, 4, 1)
            start_indices=(0, 0, 0)
            strides=None
          ] cot
          cox:f64[400,4] = squeeze[dimensions=(2,)] cow
          coy:f64[400,4,3] = slice[
            limit_indices=(400, 4, 4)
            start_indices=(0, 0, 1)
            strides=None
          ] cot
          coz:f64[400,4] = dot_general[
            dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
            preferred_element_type=float64
          ] coy cou
          cpa:f64[400,4,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(400, 4, 1)
          ] coz
          cpb:f64[400,4,3] = mul cpa coy
          cpc:f64[400,4,3] = mul 2.0 cpb
          cpd:f64[400,4] = mul cox cox
          cpe:f64[400,4] = dot_general[
            dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
            preferred_element_type=float64
          ] coy coy
          cpf:f64[400,4] = sub cpd cpe
          cpg:f64[400,4,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(400, 4, 1)
          ] cpf
          cph:f64[400,4,3] = mul cpg cou
          cpi:f64[400,4,3] = add cpc cph
          cpj:f64[400,4] = mul 2.0 cox
          cpk:f64[400,4,3] = pjit[name=cross jaxpr=cross2] coy cou
          cpl:f64[400,4,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(400, 4, 1)
          ] cpj
          cpm:f64[400,4,3] = mul cpl cpk
          cpn:f64[400,4,3] = add cpi cpm
          cpo:f64[400,4,3] = add cla cpn
          cpp:f64[400,4,1] = slice[
            limit_indices=(400, 4, 1)
            start_indices=(0, 0, 0)
            strides=None
          ] cot
          cpq:f64[400,4] = squeeze[dimensions=(2,)] cpp
          cpr:f64[400,4,1] = slice[
            limit_indices=(400, 4, 1)
            start_indices=(0, 0, 0)
            strides=None
          ] cov
          cps:f64[400,4] = squeeze[dimensions=(2,)] cpr
          cpt:f64[400,4] = mul cpq cps
          cpu:f64[400,4,1] = slice[
            limit_indices=(400, 4, 2)
            start_indices=(0, 0, 1)
            strides=None
          ] cot
          cpv:f64[400,4] = squeeze[dimensions=(2,)] cpu
          cpw:f64[400,4,1] = slice[
            limit_indices=(400, 4, 2)
            start_indices=(0, 0, 1)
            strides=None
          ] cov
          cpx:f64[400,4] = squeeze[dimensions=(2,)] cpw
          cpy:f64[400,4] = mul cpv cpx
          cpz:f64[400,4] = sub cpt cpy
          cqa:f64[400,4,1] = slice[
            limit_indices=(400, 4, 3)
            start_indices=(0, 0, 2)
            strides=None
          ] cot
          cqb:f64[400,4] = squeeze[dimensions=(2,)] cqa
          cqc:f64[400,4,1] = slice[
            limit_indices=(400, 4, 3)
            start_indices=(0, 0, 2)
            strides=None
          ] cov
          cqd:f64[400,4] = squeeze[dimensions=(2,)] cqc
          cqe:f64[400,4] = mul cqb cqd
          cqf:f64[400,4] = sub cpz cqe
          cqg:f64[400,4,1] = slice[
            limit_indices=(400, 4, 4)
            start_indices=(0, 0, 3)
            strides=None
          ] cot
          cqh:f64[400,4] = squeeze[dimensions=(2,)] cqg
          cqi:f64[400,4,1] = slice[
            limit_indices=(400, 4, 4)
            start_indices=(0, 0, 3)
            strides=None
          ] cov
          cqj:f64[400,4] = squeeze[dimensions=(2,)] cqi
          cqk:f64[400,4] = mul cqh cqj
          cql:f64[400,4] = sub cqf cqk
          cqm:f64[400,4,1] = slice[
            limit_indices=(400, 4, 1)
            start_indices=(0, 0, 0)
            strides=None
          ] cot
          cqn:f64[400,4] = squeeze[dimensions=(2,)] cqm
          cqo:f64[400,4,1] = slice[
            limit_indices=(400, 4, 2)
            start_indices=(0, 0, 1)
            strides=None
          ] cov
          cqp:f64[400,4] = squeeze[dimensions=(2,)] cqo
          cqq:f64[400,4] = mul cqn cqp
          cqr:f64[400,4,1] = slice[
            limit_indices=(400, 4, 2)
            start_indices=(0, 0, 1)
            strides=None
          ] cot
          cqs:f64[400,4] = squeeze[dimensions=(2,)] cqr
          cqt:f64[400,4,1] = slice[
            limit_indices=(400, 4, 1)
            start_indices=(0, 0, 0)
            strides=None
          ] cov
          cqu:f64[400,4] = squeeze[dimensions=(2,)] cqt
          cqv:f64[400,4] = mul cqs cqu
          cqw:f64[400,4] = add cqq cqv
          cqx:f64[400,4,1] = slice[
            limit_indices=(400, 4, 3)
            start_indices=(0, 0, 2)
            strides=None
          ] cot
          cqy:f64[400,4] = squeeze[dimensions=(2,)] cqx
          cqz:f64[400,4,1] = slice[
            limit_indices=(400, 4, 4)
            start_indices=(0, 0, 3)
            strides=None
          ] cov
          cra:f64[400,4] = squeeze[dimensions=(2,)] cqz
          crb:f64[400,4] = mul cqy cra
          crc:f64[400,4] = add cqw crb
          crd:f64[400,4,1] = slice[
            limit_indices=(400, 4, 4)
            start_indices=(0, 0, 3)
            strides=None
          ] cot
          cre:f64[400,4] = squeeze[dimensions=(2,)] crd
          crf:f64[400,4,1] = slice[
            limit_indices=(400, 4, 3)
            start_indices=(0, 0, 2)
            strides=None
          ] cov
          crg:f64[400,4] = squeeze[dimensions=(2,)] crf
          crh:f64[400,4] = mul cre crg
          cri:f64[400,4] = sub crc crh
          crj:f64[400,4,1] = slice[
            limit_indices=(400, 4, 1)
            start_indices=(0, 0, 0)
            strides=None
          ] cot
          crk:f64[400,4] = squeeze[dimensions=(2,)] crj
          crl:f64[400,4,1] = slice[
            limit_indices=(400, 4, 3)
            start_indices=(0, 0, 2)
            strides=None
          ] cov
          crm:f64[400,4] = squeeze[dimensions=(2,)] crl
          crn:f64[400,4] = mul crk crm
          cro:f64[400,4,1] = slice[
            limit_indices=(400, 4, 2)
            start_indices=(0, 0, 1)
            strides=None
          ] cot
          crp:f64[400,4] = squeeze[dimensions=(2,)] cro
          crq:f64[400,4,1] = slice[
            limit_indices=(400, 4, 4)
            start_indices=(0, 0, 3)
            strides=None
          ] cov
          crr:f64[400,4] = squeeze[dimensions=(2,)] crq
          crs:f64[400,4] = mul crp crr
          crt:f64[400,4] = sub crn crs
          cru:f64[400,4,1] = slice[
            limit_indices=(400, 4, 3)
            start_indices=(0, 0, 2)
            strides=None
          ] cot
          crv:f64[400,4] = squeeze[dimensions=(2,)] cru
          crw:f64[400,4,1] = slice[
            limit_indices=(400, 4, 1)
            start_indices=(0, 0, 0)
            strides=None
          ] cov
          crx:f64[400,4] = squeeze[dimensions=(2,)] crw
          cry:f64[400,4] = mul crv crx
          crz:f64[400,4] = add crt cry
          csa:f64[400,4,1] = slice[
            limit_indices=(400, 4, 4)
            start_indices=(0, 0, 3)
            strides=None
          ] cot
          csb:f64[400,4] = squeeze[dimensions=(2,)] csa
          csc:f64[400,4,1] = slice[
            limit_indices=(400, 4, 2)
            start_indices=(0, 0, 1)
            strides=None
          ] cov
          csd:f64[400,4] = squeeze[dimensions=(2,)] csc
          cse:f64[400,4] = mul csb csd
          csf:f64[400,4] = add crz cse
          csg:f64[400,4,1] = slice[
            limit_indices=(400, 4, 1)
            start_indices=(0, 0, 0)
            strides=None
          ] cot
          csh:f64[400,4] = squeeze[dimensions=(2,)] csg
          csi:f64[400,4,1] = slice[
            limit_indices=(400, 4, 4)
            start_indices=(0, 0, 3)
            strides=None
          ] cov
          csj:f64[400,4] = squeeze[dimensions=(2,)] csi
          csk:f64[400,4] = mul csh csj
          csl:f64[400,4,1] = slice[
            limit_indices=(400, 4, 2)
            start_indices=(0, 0, 1)
            strides=None
          ] cot
          csm:f64[400,4] = squeeze[dimensions=(2,)] csl
          csn:f64[400,4,1] = slice[
            limit_indices=(400, 4, 3)
            start_indices=(0, 0, 2)
            strides=None
          ] cov
          cso:f64[400,4] = squeeze[dimensions=(2,)] csn
          csp:f64[400,4] = mul csm cso
          csq:f64[400,4] = add csk csp
          csr:f64[400,4,1] = slice[
            limit_indices=(400, 4, 3)
            start_indices=(0, 0, 2)
            strides=None
          ] cot
          css:f64[400,4] = squeeze[dimensions=(2,)] csr
          cst:f64[400,4,1] = slice[
            limit_indices=(400, 4, 2)
            start_indices=(0, 0, 1)
            strides=None
          ] cov
          csu:f64[400,4] = squeeze[dimensions=(2,)] cst
          csv:f64[400,4] = mul css csu
          csw:f64[400,4] = sub csq csv
          csx:f64[400,4,1] = slice[
            limit_indices=(400, 4, 4)
            start_indices=(0, 0, 3)
            strides=None
          ] cot
          csy:f64[400,4] = squeeze[dimensions=(2,)] csx
          csz:f64[400,4,1] = slice[
            limit_indices=(400, 4, 1)
            start_indices=(0, 0, 0)
            strides=None
          ] cov
          cta:f64[400,4] = squeeze[dimensions=(2,)] csz
          ctb:f64[400,4] = mul csy cta
          ctc:f64[400,4] = add csw ctb
          ctd:f64[400,4,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(400, 4, 1)
          ] cql
          cte:f64[400,4,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(400, 4, 1)
          ] cri
          ctf:f64[400,4,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(400, 4, 1)
          ] csf
          ctg:f64[400,4,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(400, 4, 1)
          ] ctc
          cth:f64[400,4,4] = concatenate[dimension=2] ctd cte ctf ctg
          cti:f64[400,13,3] = concatenate[dimension=1] cfj cgm cla cpo
          ctj:f64[400,13,4] = concatenate[dimension=1] cfk ckf cot cth
          ctk:f64[400,13,3] = pjit[name=_take jaxpr=_take3] cti bkc
          ctl:f64[400,13,4] = pjit[
            name=_take
            jaxpr={ lambda ; ctm:f64[400,13,4] ctn:i64[13]. let
                cto:i64[13] = pjit[name=remainder jaxpr=remainder3] ctn 13
                ctp:i64[13,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(13, 1)
                ] cto
                ctq:f64[400,13,4] = gather[
                  dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 2), collapsed_slice_dims=(1,), start_index_map=(1,))
                  fill_value=None
                  indices_are_sorted=False
                  mode=GatherScatterMode.PROMISE_IN_BOUNDS
                  slice_sizes=(400, 1, 4)
                  unique_indices=False
                ] ctm ctp
              in (ctq,) }
          ] ctj bkd
          ctr:bool[400,13] = pjit[
            name=allclose
            jaxpr={ lambda ; cts:f64[400,13,4] ctt:f64[]. let
                ctu:bool[400,13,4] = pjit[
                  name=isclose
                  jaxpr={ lambda ; ctv:f64[400,13,4] ctw:f64[] ctx:f64[] cty:f64[]. let
                      ctz:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] ctw
                      cua:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] ctx
                      cub:f64[] = convert_element_type[
                        new_dtype=float64
                        weak_type=False
                      ] cty
                      cuc:f64[400,13,4] = sub ctv ctz
                      cud:f64[400,13,4] = abs cuc
                      cue:f64[] = abs ctz
                      cuf:f64[] = mul cua cue
                      cug:f64[] = add cub cuf
                      cuh:bool[400,13,4] = le cud cug
                      cui:bool[400,13,4] = pjit[
                        name=isinf
                        jaxpr={ lambda ; cuj:f64[400,13,4]. let
                            cuk:f64[400,13,4] = abs cuj
                            cul:bool[400,13,4] = eq cuk inf
                          in (cul,) }
                      ] ctv
                      cum:bool[] = pjit[name=isinf jaxpr=isinf] ctz
                      cun:bool[400,13,4] = or cui cum
                      cuo:bool[400,13,4] = and cui cum
                      cup:bool[400,13,4] = not cun
                      cuq:bool[400,13,4] = and cuh cup
                      cur:bool[400,13,4] = eq ctv ctz
                      cus:bool[400,13,4] = and cuo cur
                      cut:bool[400,13,4] = or cuq cus
                      cuu:bool[400,13,4] = ne ctv ctv
                      cuv:bool[] = ne ctz ctz
                      cuw:bool[400,13,4] = or cuu cuv
                      cux:bool[400,13,4] = not cuw
                      cuy:bool[400,13,4] = and cut cux
                    in (cuy,) }
                ] cts ctt 1e-05 1e-08
                cuz:bool[400,13] = reduce_and[axes=(2,)] ctu
              in (cuz,) }
          ] ctl 0.0
          cva:f64[4] = broadcast_in_dim[broadcast_dimensions=() shape=(4,)] 1.0
          cvb:f64[400,13,4] = pjit[
            name=_where
            jaxpr={ lambda ; cvc:bool[400,13] cvd:f64[4] cve:f64[400,13,4]. let
                cvf:bool[400,13,4] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 13, 4)
                ] cvc
                cvg:f64[13,4] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(13, 4)
                ] cvd
                cvh:f64[400,13,4] = broadcast_in_dim[
                  broadcast_dimensions=(1, 2)
                  shape=(400, 13, 4)
                ] cvg
                cvi:f64[400,13,4] = select_n cvf cve cvh
              in (cvi,) }
          ] ctr cva ctl
          cvj:f64[400,13] = pjit[
            name=norm
            jaxpr={ lambda ; cvk:f64[400,13,4]. let
                cvl:f64[400,13,4] = mul cvk cvk
                cvm:f64[400,13] = reduce_sum[axes=(2,)] cvl
                cvn:f64[400,13] = sqrt cvm
              in (cvn,) }
          ] cvb
          cvo:f64[400,13] = pjit[
            name=_where
            jaxpr={ lambda ; cvp:bool[400,13] cvq:f64[] cvr:f64[400,13]. let
                cvs:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] cvq
                cvt:f64[13] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(13,)
                ] cvs
                cvu:f64[400,13] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(400, 13)
                ] cvt
                cvv:f64[400,13] = select_n cvp cvr cvu
              in (cvv,) }
          ] ctr 0.0 cvj
          cvw:bool[400,13] = eq cvo 0.0
          cvx:f64[400,13] = convert_element_type[
            new_dtype=float64
            weak_type=True
          ] cvw
          cvy:f64[400,13] = mul 1e-06 cvx
          cvz:f64[400,13] = convert_element_type[
            new_dtype=float64
            weak_type=False
          ] cvy
          cwa:f64[400,13] = add cvo cvz
          cwb:f64[400,13,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(400, 13, 1)
          ] cwa
          cwc:f64[400,13,4] = div ctl cwb
          cwd:f64[400,13,1] = slice[
            limit_indices=(400, 13, 1)
            start_indices=(0, 0, 0)
            strides=None
          ] cwc
          cwe:f64[400,13] = squeeze[dimensions=(2,)] cwd
          cwf:f64[400,13,3] = slice[
            limit_indices=(400, 13, 4)
            start_indices=(0, 0, 1)
            strides=None
          ] cwc
          cwg:f64[13,400] = dot_general[
            dimension_numbers=(([2], [1]), ([1], [0]))
            preferred_element_type=float64
          ] cwf bke
          cwh:f64[400,13] = transpose[permutation=(1, 0)] cwg
          cwi:f64[400,13,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(400, 13, 1)
          ] cwh
          cwj:f64[400,13,3] = mul cwi cwf
          cwk:f64[400,13,3] = mul 2.0 cwj
          cwl:f64[400,13] = mul cwe cwe
          cwm:f64[400,13] = dot_general[
            dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
            preferred_element_type=float64
          ] cwf cwf
          cwn:f64[400,13] = sub cwl cwm
          cwo:f64[400,13,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(400, 13, 1)
          ] cwn
          cwp:f64[1,13,3] = broadcast_in_dim[
            broadcast_dimensions=(1, 2)
            shape=(1, 13, 3)
          ] bke
          cwq:f64[400,13,3] = mul cwo cwp
          cwr:f64[400,13,3] = add cwk cwq
          cws:f64[400,13] = mul 2.0 cwe
          cwt:f64[400,13,3] = pjit[name=cross jaxpr=cross1] cwf bke
          cwu:f64[400,13,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(400, 13, 1)
          ] cws
          cwv:f64[400,13,3] = mul cwu cwt
          cww:f64[400,13,3] = add cwr cwv
          cwx:f64[400,13,3] = add ctk cww
          cwy:f64[400,13,1] = slice[
            limit_indices=(400, 13, 1)
            start_indices=(0, 0, 0)
            strides=None
          ] cwc
          cwz:f64[400,13] = squeeze[dimensions=(2,)] cwy
          cxa:f64[13,1] = slice[
            limit_indices=(13, 1)
            start_indices=(0, 0)
            strides=None
          ] bkf
          cxb:f64[13] = squeeze[dimensions=(1,)] cxa
          cxc:f64[1,13] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 13)
          ] cxb
          cxd:f64[400,13] = mul cwz cxc
          cxe:f64[400,13,1] = slice[
            limit_indices=(400, 13, 2)
            start_indices=(0, 0, 1)
            strides=None
          ] cwc
          cxf:f64[400,13] = squeeze[dimensions=(2,)] cxe
          cxg:f64[13,1] = slice[
            limit_indices=(13, 2)
            start_indices=(0, 1)
            strides=None
          ] bkf
          cxh:f64[13] = squeeze[dimensions=(1,)] cxg
          cxi:f64[1,13] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 13)
          ] cxh
          cxj:f64[400,13] = mul cxf cxi
          cxk:f64[400,13] = sub cxd cxj
          cxl:f64[400,13,1] = slice[
            limit_indices=(400, 13, 3)
            start_indices=(0, 0, 2)
            strides=None
          ] cwc
          cxm:f64[400,13] = squeeze[dimensions=(2,)] cxl
          cxn:f64[13,1] = slice[
            limit_indices=(13, 3)
            start_indices=(0, 2)
            strides=None
          ] bkf
          cxo:f64[13] = squeeze[dimensions=(1,)] cxn
          cxp:f64[1,13] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 13)
          ] cxo
          cxq:f64[400,13] = mul cxm cxp
          cxr:f64[400,13] = sub cxk cxq
          cxs:f64[400,13,1] = slice[
            limit_indices=(400, 13, 4)
            start_indices=(0, 0, 3)
            strides=None
          ] cwc
          cxt:f64[400,13] = squeeze[dimensions=(2,)] cxs
          cxu:f64[13,1] = slice[
            limit_indices=(13, 4)
            start_indices=(0, 3)
            strides=None
          ] bkf
          cxv:f64[13] = squeeze[dimensions=(1,)] cxu
          cxw:f64[1,13] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 13)
          ] cxv
          cxx:f64[400,13] = mul cxt cxw
          cxy:f64[400,13] = sub cxr cxx
          cxz:f64[400,13,1] = slice[
            limit_indices=(400, 13, 1)
            start_indices=(0, 0, 0)
            strides=None
          ] cwc
          cya:f64[400,13] = squeeze[dimensions=(2,)] cxz
          cyb:f64[13,1] = slice[
            limit_indices=(13, 2)
            start_indices=(0, 1)
            strides=None
          ] bkf
          cyc:f64[13] = squeeze[dimensions=(1,)] cyb
          cyd:f64[1,13] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 13)
          ] cyc
          cye:f64[400,13] = mul cya cyd
          cyf:f64[400,13,1] = slice[
            limit_indices=(400, 13, 2)
            start_indices=(0, 0, 1)
            strides=None
          ] cwc
          cyg:f64[400,13] = squeeze[dimensions=(2,)] cyf
          cyh:f64[13,1] = slice[
            limit_indices=(13, 1)
            start_indices=(0, 0)
            strides=None
          ] bkf
          cyi:f64[13] = squeeze[dimensions=(1,)] cyh
          cyj:f64[1,13] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 13)
          ] cyi
          cyk:f64[400,13] = mul cyg cyj
          cyl:f64[400,13] = add cye cyk
          cym:f64[400,13,1] = slice[
            limit_indices=(400, 13, 3)
            start_indices=(0, 0, 2)
            strides=None
          ] cwc
          cyn:f64[400,13] = squeeze[dimensions=(2,)] cym
          cyo:f64[13,1] = slice[
            limit_indices=(13, 4)
            start_indices=(0, 3)
            strides=None
          ] bkf
          cyp:f64[13] = squeeze[dimensions=(1,)] cyo
          cyq:f64[1,13] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 13)
          ] cyp
          cyr:f64[400,13] = mul cyn cyq
          cys:f64[400,13] = add cyl cyr
          cyt:f64[400,13,1] = slice[
            limit_indices=(400, 13, 4)
            start_indices=(0, 0, 3)
            strides=None
          ] cwc
          cyu:f64[400,13] = squeeze[dimensions=(2,)] cyt
          cyv:f64[13,1] = slice[
            limit_indices=(13, 3)
            start_indices=(0, 2)
            strides=None
          ] bkf
          cyw:f64[13] = squeeze[dimensions=(1,)] cyv
          cyx:f64[1,13] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 13)
          ] cyw
          cyy:f64[400,13] = mul cyu cyx
          cyz:f64[400,13] = sub cys cyy
          cza:f64[400,13,1] = slice[
            limit_indices=(400, 13, 1)
            start_indices=(0, 0, 0)
            strides=None
          ] cwc
          czb:f64[400,13] = squeeze[dimensions=(2,)] cza
          czc:f64[13,1] = slice[
            limit_indices=(13, 3)
            start_indices=(0, 2)
            strides=None
          ] bkf
          czd:f64[13] = squeeze[dimensions=(1,)] czc
          cze:f64[1,13] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 13)
          ] czd
          czf:f64[400,13] = mul czb cze
          czg:f64[400,13,1] = slice[
            limit_indices=(400, 13, 2)
            start_indices=(0, 0, 1)
            strides=None
          ] cwc
          czh:f64[400,13] = squeeze[dimensions=(2,)] czg
          czi:f64[13,1] = slice[
            limit_indices=(13, 4)
            start_indices=(0, 3)
            strides=None
          ] bkf
          czj:f64[13] = squeeze[dimensions=(1,)] czi
          czk:f64[1,13] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 13)
          ] czj
          czl:f64[400,13] = mul czh czk
          czm:f64[400,13] = sub czf czl
          czn:f64[400,13,1] = slice[
            limit_indices=(400, 13, 3)
            start_indices=(0, 0, 2)
            strides=None
          ] cwc
          czo:f64[400,13] = squeeze[dimensions=(2,)] czn
          czp:f64[13,1] = slice[
            limit_indices=(13, 1)
            start_indices=(0, 0)
            strides=None
          ] bkf
          czq:f64[13] = squeeze[dimensions=(1,)] czp
          czr:f64[1,13] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 13)
          ] czq
          czs:f64[400,13] = mul czo czr
          czt:f64[400,13] = add czm czs
          czu:f64[400,13,1] = slice[
            limit_indices=(400, 13, 4)
            start_indices=(0, 0, 3)
            strides=None
          ] cwc
          czv:f64[400,13] = squeeze[dimensions=(2,)] czu
          czw:f64[13,1] = slice[
            limit_indices=(13, 2)
            start_indices=(0, 1)
            strides=None
          ] bkf
          czx:f64[13] = squeeze[dimensions=(1,)] czw
          czy:f64[1,13] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 13)
          ] czx
          czz:f64[400,13] = mul czv czy
          daa:f64[400,13] = add czt czz
          dab:f64[400,13,1] = slice[
            limit_indices=(400, 13, 1)
            start_indices=(0, 0, 0)
            strides=None
          ] cwc
          dac:f64[400,13] = squeeze[dimensions=(2,)] dab
          dad:f64[13,1] = slice[
            limit_indices=(13, 4)
            start_indices=(0, 3)
            strides=None
          ] bkf
          dae:f64[13] = squeeze[dimensions=(1,)] dad
          daf:f64[1,13] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 13)
          ] dae
          dag:f64[400,13] = mul dac daf
          dah:f64[400,13,1] = slice[
            limit_indices=(400, 13, 2)
            start_indices=(0, 0, 1)
            strides=None
          ] cwc
          dai:f64[400,13] = squeeze[dimensions=(2,)] dah
          daj:f64[13,1] = slice[
            limit_indices=(13, 3)
            start_indices=(0, 2)
            strides=None
          ] bkf
          dak:f64[13] = squeeze[dimensions=(1,)] daj
          dal:f64[1,13] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 13)
          ] dak
          dam:f64[400,13] = mul dai dal
          dan:f64[400,13] = add dag dam
          dao:f64[400,13,1] = slice[
            limit_indices=(400, 13, 3)
            start_indices=(0, 0, 2)
            strides=None
          ] cwc
          dap:f64[400,13] = squeeze[dimensions=(2,)] dao
          daq:f64[13,1] = slice[
            limit_indices=(13, 2)
            start_indices=(0, 1)
            strides=None
          ] bkf
          dar:f64[13] = squeeze[dimensions=(1,)] daq
          das:f64[1,13] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 13)
          ] dar
          dat:f64[400,13] = mul dap das
          dau:f64[400,13] = sub dan dat
          dav:f64[400,13,1] = slice[
            limit_indices=(400, 13, 4)
            start_indices=(0, 0, 3)
            strides=None
          ] cwc
          daw:f64[400,13] = squeeze[dimensions=(2,)] dav
          dax:f64[13,1] = slice[
            limit_indices=(13, 1)
            start_indices=(0, 0)
            strides=None
          ] bkf
          day:f64[13] = squeeze[dimensions=(1,)] dax
          daz:f64[1,13] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 13)
          ] day
          dba:f64[400,13] = mul daw daz
          dbb:f64[400,13] = add dau dba
          dbc:f64[400,13,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(400, 13, 1)
          ] cxy
          dbd:f64[400,13,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(400, 13, 1)
          ] cyz
          dbe:f64[400,13,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(400, 13, 1)
          ] daa
          dbf:f64[400,13,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(400, 13, 1)
          ] dbb
          dbg:f64[400,13,4] = concatenate[dimension=2] dbc dbd dbe dbf
          dbh:f64[13,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(13, 1)
          ] bkh
          dbi:f64[1,13,1] = broadcast_in_dim[
            broadcast_dimensions=(1, 2)
            shape=(1, 13, 1)
          ] dbh
          dbj:f64[400,13,3] = mul dbi cwx
          dbk:f64[13,3] = broadcast_in_dim[
            broadcast_dimensions=()
            shape=(13, 3)
          ] 0.0
          dbl:i32[13,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(13, 1)
          ] bkg
          dbm:f64[400,13,3] = broadcast_in_dim[
            broadcast_dimensions=(1, 2)
            shape=(400, 13, 3)
          ] dbk
          dbn:f64[400,13,3] = scatter-add[
            dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
            indices_are_sorted=False
            mode=GatherScatterMode.FILL_OR_DROP
            unique_indices=False
            update_consts=()
            update_jaxpr=jaxpr1
          ] dbm dbl dbj
          dbo:f64[13] = broadcast_in_dim[broadcast_dimensions=() shape=(13,)] 0.0
          dbp:i32[13,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(13, 1)
          ] bkg
          dbq:f64[13] = scatter-add[
            dimension_numbers=ScatterDimensionNumbers(update_window_dims=(), inserted_window_dims=(0,), scatter_dims_to_operand_dims=(0,))
            indices_are_sorted=False
            mode=GatherScatterMode.FILL_OR_DROP
            unique_indices=False
            update_consts=()
            update_jaxpr=jaxpr1
          ] dbo dbp bkh
          dbr:bool[13] = lt bkg 0
          dbs:i32[13] = add bkg 13
          dbt:i32[13] = select_n dbr bkg dbs
          dbu:i32[13,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(13, 1)
          ] dbt
          dbv:f64[400,13,3] = gather[
            dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 2), collapsed_slice_dims=(1,), start_index_map=(1,))
            fill_value=None
            indices_are_sorted=False
            mode=GatherScatterMode.PROMISE_IN_BOUNDS
            slice_sizes=(400, 1, 3)
            unique_indices=False
          ] dbn dbu
          dbw:bool[13] = lt bkg 0
          dbx:i32[13] = add bkg 13
          dby:i32[13] = select_n dbw bkg dbx
          dbz:i32[13,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(13, 1)
          ] dby
          dca:f64[13] = gather[
            dimension_numbers=GatherDimensionNumbers(offset_dims=(), collapsed_slice_dims=(0,), start_index_map=(0,))
            fill_value=None
            indices_are_sorted=False
            mode=GatherScatterMode.PROMISE_IN_BOUNDS
            slice_sizes=(1,)
            unique_indices=False
          ] dbq dbz
          dcb:f64[13,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(13, 1)
          ] dca
          dcc:f64[1,13,1] = broadcast_in_dim[
            broadcast_dimensions=(1, 2)
            shape=(1, 13, 1)
          ] dcb
          dcd:f64[400,13,3] = div dbv dcc
          dce:f64[400,13,3] = sub cwx dcd
          dcf:i64[3,3] = iota[dimension=0 dtype=int64 shape=(3, 3)] 
          dcg:i64[3,3] = iota[dimension=1 dtype=int64 shape=(3, 3)] 
          dch:i64[3,3] = add dcf 0
          dci:bool[3,3] = eq dch dcg
          dcj:f64[3,3] = convert_element_type[new_dtype=float64 weak_type=False] dci
          dck:f64[3,3] = neg dcj
          dcl:f64[400,13,3,3] = pjit[
            name=cross
            jaxpr={ lambda ; dcm:f64[400,13,3] dcn:f64[3,3]. let
                dco:i32[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] 0
                dcp:f64[400,13] = gather[
                  dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
                  fill_value=None
                  indices_are_sorted=True
                  mode=GatherScatterMode.PROMISE_IN_BOUNDS
                  slice_sizes=(400, 13, 1)
                  unique_indices=True
                ] dcm dco
                dcq:i32[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] 1
                dcr:f64[400,13] = gather[
                  dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
                  fill_value=None
                  indices_are_sorted=True
                  mode=GatherScatterMode.PROMISE_IN_BOUNDS
                  slice_sizes=(400, 13, 1)
                  unique_indices=True
                ] dcm dcq
                dcs:i32[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] 2
                dct:f64[400,13] = gather[
                  dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
                  fill_value=None
                  indices_are_sorted=True
                  mode=GatherScatterMode.PROMISE_IN_BOUNDS
                  slice_sizes=(400, 13, 1)
                  unique_indices=True
                ] dcm dcs
                dcu:f64[3,1] = slice[
                  limit_indices=(3, 1)
                  start_indices=(0, 0)
                  strides=None
                ] dcn
                dcv:f64[3] = squeeze[dimensions=(1,)] dcu
                dcw:f64[3,1] = slice[
                  limit_indices=(3, 2)
                  start_indices=(0, 1)
                  strides=None
                ] dcn
                dcx:f64[3] = squeeze[dimensions=(1,)] dcw
                dcy:f64[3,1] = slice[
                  limit_indices=(3, 3)
                  start_indices=(0, 2)
                  strides=None
                ] dcn
                dcz:f64[3] = squeeze[dimensions=(1,)] dcy
                dda:f64[1,3] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 3)
                ] dcz
                ddb:f64[400,13,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 13, 1)
                ] dcr
                ddc:f64[1,1,3] = broadcast_in_dim[
                  broadcast_dimensions=(1, 2)
                  shape=(1, 1, 3)
                ] dda
                ddd:f64[400,13,3] = mul ddb ddc
                dde:f64[1,3] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 3)
                ] dcx
                ddf:f64[400,13,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 13, 1)
                ] dct
                ddg:f64[1,1,3] = broadcast_in_dim[
                  broadcast_dimensions=(1, 2)
                  shape=(1, 1, 3)
                ] dde
                ddh:f64[400,13,3] = mul ddf ddg
                ddi:f64[400,13,3] = sub ddd ddh
                ddj:f64[1,3] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 3)
                ] dcv
                ddk:f64[400,13,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 13, 1)
                ] dct
                ddl:f64[1,1,3] = broadcast_in_dim[
                  broadcast_dimensions=(1, 2)
                  shape=(1, 1, 3)
                ] ddj
                ddm:f64[400,13,3] = mul ddk ddl
                ddn:f64[1,3] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 3)
                ] dcz
                ddo:f64[400,13,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 13, 1)
                ] dcp
                ddp:f64[1,1,3] = broadcast_in_dim[
                  broadcast_dimensions=(1, 2)
                  shape=(1, 1, 3)
                ] ddn
                ddq:f64[400,13,3] = mul ddo ddp
                ddr:f64[400,13,3] = sub ddm ddq
                dds:f64[1,3] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 3)
                ] dcx
                ddt:f64[400,13,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 13, 1)
                ] dcp
                ddu:f64[1,1,3] = broadcast_in_dim[
                  broadcast_dimensions=(1, 2)
                  shape=(1, 1, 3)
                ] dds
                ddv:f64[400,13,3] = mul ddt ddu
                ddw:f64[1,3] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 3)
                ] dcv
                ddx:f64[400,13,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 13, 1)
                ] dcr
                ddy:f64[1,1,3] = broadcast_in_dim[
                  broadcast_dimensions=(1, 2)
                  shape=(1, 1, 3)
                ] ddw
                ddz:f64[400,13,3] = mul ddx ddy
                dea:f64[400,13,3] = sub ddv ddz
                deb:f64[400,13,1,3] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1, 3)
                  shape=(400, 13, 1, 3)
                ] ddi
                dec:f64[400,13,1,3] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1, 3)
                  shape=(400, 13, 1, 3)
                ] ddr
                ded:f64[400,13,1,3] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1, 3)
                  shape=(400, 13, 1, 3)
                ] dea
                dee:f64[400,13,3,3] = concatenate[dimension=2] deb dec ded
                def:f64[400,13,3,3] = transpose[permutation=(0, 1, 3, 2)] dee
              in (def,) }
          ] dce dck
          deg:f64[400,13] = dot_general[
            dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
            preferred_element_type=float64
          ] dbg dbg
          deh:f64[400,13,1] = slice[
            limit_indices=(400, 13, 1)
            start_indices=(0, 0, 0)
            strides=(1, 1, 1)
          ] dbg
          dei:f64[400,13] = squeeze[dimensions=(2,)] deh
          dej:f64[400,13,1] = slice[
            limit_indices=(400, 13, 2)
            start_indices=(0, 0, 1)
            strides=(1, 1, 1)
          ] dbg
          dek:f64[400,13] = squeeze[dimensions=(2,)] dej
          del:f64[400,13,1] = slice[
            limit_indices=(400, 13, 3)
            start_indices=(0, 0, 2)
            strides=(1, 1, 1)
          ] dbg
          dem:f64[400,13] = squeeze[dimensions=(2,)] del
          den:f64[400,13,1] = slice[
            limit_indices=(400, 13, 4)
            start_indices=(0, 0, 3)
            strides=(1, 1, 1)
          ] dbg
          deo:f64[400,13] = squeeze[dimensions=(2,)] den
          dep:f64[400,13] = div 2.0 deg
          deq:f64[400,13] = mul dek dep
          der:f64[400,13] = mul dem dep
          des:f64[400,13] = mul deo dep
          det:f64[400,13] = mul dei deq
          deu:f64[400,13] = mul dei der
          dev:f64[400,13] = mul dei des
          dew:f64[400,13] = mul dek deq
          dex:f64[400,13] = mul dek der
          dey:f64[400,13] = mul dek des
          dez:f64[400,13] = mul dem der
          dfa:f64[400,13] = mul dem des
          dfb:f64[400,13] = mul deo des
          dfc:f64[400,13] = add dez dfb
          dfd:f64[400,13] = sub 1.0 dfc
          dfe:f64[400,13] = sub dex dev
          dff:f64[400,13] = add dey deu
          dfg:f64[400,13,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(400, 13, 1)
          ] dfd
          dfh:f64[400,13,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(400, 13, 1)
          ] dfe
          dfi:f64[400,13,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(400, 13, 1)
          ] dff
          dfj:f64[400,13,3] = concatenate[dimension=2] dfg dfh dfi
          dfk:f64[400,13] = add dex dev
          dfl:f64[400,13] = add dew dfb
          dfm:f64[400,13] = sub 1.0 dfl
          dfn:f64[400,13] = sub dfa det
          dfo:f64[400,13,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(400, 13, 1)
          ] dfk
          dfp:f64[400,13,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(400, 13, 1)
          ] dfm
          dfq:f64[400,13,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(400, 13, 1)
          ] dfn
          dfr:f64[400,13,3] = concatenate[dimension=2] dfo dfp dfq
          dfs:f64[400,13] = sub dey deu
          dft:f64[400,13] = add dfa det
          dfu:f64[400,13] = add dew dez
          dfv:f64[400,13] = sub 1.0 dfu
          dfw:f64[400,13,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(400, 13, 1)
          ] dfs
          dfx:f64[400,13,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(400, 13, 1)
          ] dft
          dfy:f64[400,13,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(400, 13, 1)
          ] dfv
          dfz:f64[400,13,3] = concatenate[dimension=2] dfw dfx dfy
          dga:f64[400,13,1,3] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 3)
            shape=(400, 13, 1, 3)
          ] dfj
          dgb:f64[400,13,1,3] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 3)
            shape=(400, 13, 1, 3)
          ] dfr
          dgc:f64[400,13,1,3] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 3)
            shape=(400, 13, 1, 3)
          ] dfz
          dgd:f64[400,13,3,3] = concatenate[dimension=2] dga dgb dgc
          dge:f64[13,400,3,3] = dot_general[
            dimension_numbers=(([3], [1]), ([1], [0]))
            preferred_element_type=float64
          ] dgd bki
          dgf:f64[400,13,3,3] = transpose[permutation=(0, 1, 3, 2)] dgd
          dgg:f64[400,13,3,3] = dot_general[
            dimension_numbers=(([3], [2]), ([1, 0], [0, 1]))
            preferred_element_type=float64
          ] dge dgf
          dgh:f64[400,13,3,3] = transpose[permutation=(0, 1, 3, 2)] dcl
          dgi:f64[400,13,3,3] = dot_general[
            dimension_numbers=(([3], [2]), ([0, 1], [0, 1]))
            preferred_element_type=float64
          ] dcl dgh
          dgj:f64[13,1,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(13, 1, 1)
          ] bkh
          dgk:f64[1,13,1,1] = broadcast_in_dim[
            broadcast_dimensions=(1, 2, 3)
            shape=(1, 13, 1, 1)
          ] dgj
          dgl:f64[400,13,3,3] = mul dgi dgk
          dgm:f64[400,13,3,3] = add dgg dgl
          dgn:f64[13,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(13, 1)
          ] bkh
          dgo:f64[1,13,1] = broadcast_in_dim[
            broadcast_dimensions=(1, 2)
            shape=(1, 13, 1)
          ] dgn
          dgp:f64[400,13,3] = mul dce dgo
          dgq:f64[1,3] = broadcast_in_dim[broadcast_dimensions=() shape=(1, 3)] 0.0
          dgr:f64[1,1,1,4] = reshape[dimensions=None new_sizes=(1, 1, 1, 4)] bkk
          dgs:f64[1,4] = reshape[dimensions=None new_sizes=(1, 4)] dgr
          dgt:f64[400,1,3] = broadcast_in_dim[
            broadcast_dimensions=(1, 2)
            shape=(400, 1, 3)
          ] dgq
          dgu:f64[400,14,3] = concatenate[dimension=1] ctk dgt
          dgv:f64[400,1,4] = broadcast_in_dim[
            broadcast_dimensions=(1, 2)
            shape=(400, 1, 4)
          ] dgs
          dgw:f64[400,14,4] = concatenate[dimension=1] cwc dgv
          dgx:f64[400,13,3] = pjit[name=_take jaxpr=_take4] dgu bkj
          dgy:f64[400,13,4] = pjit[
            name=_take
            jaxpr={ lambda ; dgz:f64[400,14,4] dha:i32[13]. let
                dhb:i32[13] = pjit[name=remainder jaxpr=remainder4] dha 14
                dhc:i32[13,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(13, 1)
                ] dhb
                dhd:f64[400,13,4] = gather[
                  dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 2), collapsed_slice_dims=(1,), start_index_map=(1,))
                  fill_value=None
                  indices_are_sorted=False
                  mode=GatherScatterMode.PROMISE_IN_BOUNDS
                  slice_sizes=(400, 1, 4)
                  unique_indices=False
                ] dgz dhc
              in (dhd,) }
          ] dgw bkj
          dhe:f64[400,13,1] = slice[
            limit_indices=(400, 13, 1)
            start_indices=(0, 0, 0)
            strides=None
          ] dgy
          dhf:f64[400,13] = squeeze[dimensions=(2,)] dhe
          dhg:f64[400,13,3] = slice[
            limit_indices=(400, 13, 4)
            start_indices=(0, 0, 1)
            strides=None
          ] dgy
          dhh:f64[13,400] = dot_general[
            dimension_numbers=(([2], [1]), ([1], [0]))
            preferred_element_type=float64
          ] dhg bjt
          dhi:f64[400,13] = transpose[permutation=(1, 0)] dhh
          dhj:f64[400,13,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(400, 13, 1)
          ] dhi
          dhk:f64[400,13,3] = mul dhj dhg
          dhl:f64[400,13,3] = mul 2.0 dhk
          dhm:f64[400,13] = mul dhf dhf
          dhn:f64[400,13] = dot_general[
            dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
            preferred_element_type=float64
          ] dhg dhg
          dho:f64[400,13] = sub dhm dhn
          dhp:f64[400,13,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(400, 13, 1)
          ] dho
          dhq:f64[1,13,3] = broadcast_in_dim[
            broadcast_dimensions=(1, 2)
            shape=(1, 13, 3)
          ] bjt
          dhr:f64[400,13,3] = mul dhp dhq
          dhs:f64[400,13,3] = add dhl dhr
          dht:f64[400,13] = mul 2.0 dhf
          dhu:f64[400,13,3] = pjit[name=cross jaxpr=cross1] dhg bjt
          dhv:f64[400,13,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(400, 13, 1)
          ] dht
          dhw:f64[400,13,3] = mul dhv dhu
          dhx:f64[400,13,3] = add dhs dhw
          dhy:f64[400,13,3] = add dgx dhx
          dhz:f64[400,13,1] = slice[
            limit_indices=(400, 13, 1)
            start_indices=(0, 0, 0)
            strides=None
          ] dgy
          dia:f64[400,13] = squeeze[dimensions=(2,)] dhz
          dib:f64[13,1] = slice[
            limit_indices=(13, 1)
            start_indices=(0, 0)
            strides=None
          ] bjs
          dic:f64[13] = squeeze[dimensions=(1,)] dib
          did:f64[1,13] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 13)
          ] dic
          die:f64[400,13] = mul dia did
          dif:f64[400,13,1] = slice[
            limit_indices=(400, 13, 2)
            start_indices=(0, 0, 1)
            strides=None
          ] dgy
          dig:f64[400,13] = squeeze[dimensions=(2,)] dif
          dih:f64[13,1] = slice[
            limit_indices=(13, 2)
            start_indices=(0, 1)
            strides=None
          ] bjs
          dii:f64[13] = squeeze[dimensions=(1,)] dih
          dij:f64[1,13] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 13)
          ] dii
          dik:f64[400,13] = mul dig dij
          dil:f64[400,13] = sub die dik
          dim:f64[400,13,1] = slice[
            limit_indices=(400, 13, 3)
            start_indices=(0, 0, 2)
            strides=None
          ] dgy
          din:f64[400,13] = squeeze[dimensions=(2,)] dim
          dio:f64[13,1] = slice[
            limit_indices=(13, 3)
            start_indices=(0, 2)
            strides=None
          ] bjs
          dip:f64[13] = squeeze[dimensions=(1,)] dio
          diq:f64[1,13] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 13)
          ] dip
          dir:f64[400,13] = mul din diq
          dis:f64[400,13] = sub dil dir
          dit:f64[400,13,1] = slice[
            limit_indices=(400, 13, 4)
            start_indices=(0, 0, 3)
            strides=None
          ] dgy
          diu:f64[400,13] = squeeze[dimensions=(2,)] dit
          div:f64[13,1] = slice[
            limit_indices=(13, 4)
            start_indices=(0, 3)
            strides=None
          ] bjs
          diw:f64[13] = squeeze[dimensions=(1,)] div
          dix:f64[1,13] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 13)
          ] diw
          diy:f64[400,13] = mul diu dix
          diz:f64[400,13] = sub dis diy
          dja:f64[400,13,1] = slice[
            limit_indices=(400, 13, 1)
            start_indices=(0, 0, 0)
            strides=None
          ] dgy
          djb:f64[400,13] = squeeze[dimensions=(2,)] dja
          djc:f64[13,1] = slice[
            limit_indices=(13, 2)
            start_indices=(0, 1)
            strides=None
          ] bjs
          djd:f64[13] = squeeze[dimensions=(1,)] djc
          dje:f64[1,13] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 13)
          ] djd
          djf:f64[400,13] = mul djb dje
          djg:f64[400,13,1] = slice[
            limit_indices=(400, 13, 2)
            start_indices=(0, 0, 1)
            strides=None
          ] dgy
          djh:f64[400,13] = squeeze[dimensions=(2,)] djg
          dji:f64[13,1] = slice[
            limit_indices=(13, 1)
            start_indices=(0, 0)
            strides=None
          ] bjs
          djj:f64[13] = squeeze[dimensions=(1,)] dji
          djk:f64[1,13] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 13)
          ] djj
          djl:f64[400,13] = mul djh djk
          djm:f64[400,13] = add djf djl
          djn:f64[400,13,1] = slice[
            limit_indices=(400, 13, 3)
            start_indices=(0, 0, 2)
            strides=None
          ] dgy
          djo:f64[400,13] = squeeze[dimensions=(2,)] djn
          djp:f64[13,1] = slice[
            limit_indices=(13, 4)
            start_indices=(0, 3)
            strides=None
          ] bjs
          djq:f64[13] = squeeze[dimensions=(1,)] djp
          djr:f64[1,13] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 13)
          ] djq
          djs:f64[400,13] = mul djo djr
          djt:f64[400,13] = add djm djs
          dju:f64[400,13,1] = slice[
            limit_indices=(400, 13, 4)
            start_indices=(0, 0, 3)
            strides=None
          ] dgy
          djv:f64[400,13] = squeeze[dimensions=(2,)] dju
          djw:f64[13,1] = slice[
            limit_indices=(13, 3)
            start_indices=(0, 2)
            strides=None
          ] bjs
          djx:f64[13] = squeeze[dimensions=(1,)] djw
          djy:f64[1,13] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 13)
          ] djx
          djz:f64[400,13] = mul djv djy
          dka:f64[400,13] = sub djt djz
          dkb:f64[400,13,1] = slice[
            limit_indices=(400, 13, 1)
            start_indices=(0, 0, 0)
            strides=None
          ] dgy
          dkc:f64[400,13] = squeeze[dimensions=(2,)] dkb
          dkd:f64[13,1] = slice[
            limit_indices=(13, 3)
            start_indices=(0, 2)
            strides=None
          ] bjs
          dke:f64[13] = squeeze[dimensions=(1,)] dkd
          dkf:f64[1,13] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 13)
          ] dke
          dkg:f64[400,13] = mul dkc dkf
          dkh:f64[400,13,1] = slice[
            limit_indices=(400, 13, 2)
            start_indices=(0, 0, 1)
            strides=None
          ] dgy
          dki:f64[400,13] = squeeze[dimensions=(2,)] dkh
          dkj:f64[13,1] = slice[
            limit_indices=(13, 4)
            start_indices=(0, 3)
            strides=None
          ] bjs
          dkk:f64[13] = squeeze[dimensions=(1,)] dkj
          dkl:f64[1,13] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 13)
          ] dkk
          dkm:f64[400,13] = mul dki dkl
          dkn:f64[400,13] = sub dkg dkm
          dko:f64[400,13,1] = slice[
            limit_indices=(400, 13, 3)
            start_indices=(0, 0, 2)
            strides=None
          ] dgy
          dkp:f64[400,13] = squeeze[dimensions=(2,)] dko
          dkq:f64[13,1] = slice[
            limit_indices=(13, 1)
            start_indices=(0, 0)
            strides=None
          ] bjs
          dkr:f64[13] = squeeze[dimensions=(1,)] dkq
          dks:f64[1,13] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 13)
          ] dkr
          dkt:f64[400,13] = mul dkp dks
          dku:f64[400,13] = add dkn dkt
          dkv:f64[400,13,1] = slice[
            limit_indices=(400, 13, 4)
            start_indices=(0, 0, 3)
            strides=None
          ] dgy
          dkw:f64[400,13] = squeeze[dimensions=(2,)] dkv
          dkx:f64[13,1] = slice[
            limit_indices=(13, 2)
            start_indices=(0, 1)
            strides=None
          ] bjs
          dky:f64[13] = squeeze[dimensions=(1,)] dkx
          dkz:f64[1,13] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 13)
          ] dky
          dla:f64[400,13] = mul dkw dkz
          dlb:f64[400,13] = add dku dla
          dlc:f64[400,13,1] = slice[
            limit_indices=(400, 13, 1)
            start_indices=(0, 0, 0)
            strides=None
          ] dgy
          dld:f64[400,13] = squeeze[dimensions=(2,)] dlc
          dle:f64[13,1] = slice[
            limit_indices=(13, 4)
            start_indices=(0, 3)
            strides=None
          ] bjs
          dlf:f64[13] = squeeze[dimensions=(1,)] dle
          dlg:f64[1,13] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 13)
          ] dlf
          dlh:f64[400,13] = mul dld dlg
          dli:f64[400,13,1] = slice[
            limit_indices=(400, 13, 2)
            start_indices=(0, 0, 1)
            strides=None
          ] dgy
          dlj:f64[400,13] = squeeze[dimensions=(2,)] dli
          dlk:f64[13,1] = slice[
            limit_indices=(13, 3)
            start_indices=(0, 2)
            strides=None
          ] bjs
          dll:f64[13] = squeeze[dimensions=(1,)] dlk
          dlm:f64[1,13] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 13)
          ] dll
          dln:f64[400,13] = mul dlj dlm
          dlo:f64[400,13] = add dlh dln
          dlp:f64[400,13,1] = slice[
            limit_indices=(400, 13, 3)
            start_indices=(0, 0, 2)
            strides=None
          ] dgy
          dlq:f64[400,13] = squeeze[dimensions=(2,)] dlp
          dlr:f64[13,1] = slice[
            limit_indices=(13, 2)
            start_indices=(0, 1)
            strides=None
          ] bjs
          dls:f64[13] = squeeze[dimensions=(1,)] dlr
          dlt:f64[1,13] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 13)
          ] dls
          dlu:f64[400,13] = mul dlq dlt
          dlv:f64[400,13] = sub dlo dlu
          dlw:f64[400,13,1] = slice[
            limit_indices=(400, 13, 4)
            start_indices=(0, 0, 3)
            strides=None
          ] dgy
          dlx:f64[400,13] = squeeze[dimensions=(2,)] dlw
          dly:f64[13,1] = slice[
            limit_indices=(13, 1)
            start_indices=(0, 0)
            strides=None
          ] bjs
          dlz:f64[13] = squeeze[dimensions=(1,)] dly
          dma:f64[1,13] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 13)
          ] dlz
          dmb:f64[400,13] = mul dlx dma
          dmc:f64[400,13] = add dlv dmb
          dmd:f64[400,13,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(400, 13, 1)
          ] diz
          dme:f64[400,13,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(400, 13, 1)
          ] dka
          dmf:f64[400,13,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(400, 13, 1)
          ] dlb
          dmg:f64[400,13,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(400, 13, 1)
          ] dmc
          dmh:f64[400,13,4] = concatenate[dimension=2] dmd dme dmf dmg
          dmi:f64[400,13,1] = slice[
            limit_indices=(400, 13, 1)
            start_indices=(0, 0, 0)
            strides=None
          ] dmh
          dmj:f64[400,13] = squeeze[dimensions=(2,)] dmi
          dmk:f64[400,13,3] = slice[
            limit_indices=(400, 13, 4)
            start_indices=(0, 0, 1)
            strides=None
          ] dmh
          dml:f64[13,400] = dot_general[
            dimension_numbers=(([2], [1]), ([1], [0]))
            preferred_element_type=float64
          ] dmk bjq
          dmm:f64[400,13] = transpose[permutation=(1, 0)] dml
          dmn:f64[400,13,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(400, 13, 1)
          ] dmm
          dmo:f64[400,13,3] = mul dmn dmk
          dmp:f64[400,13,3] = mul 2.0 dmo
          dmq:f64[400,13] = mul dmj dmj
          dmr:f64[400,13] = dot_general[
            dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
            preferred_element_type=float64
          ] dmk dmk
          dms:f64[400,13] = sub dmq dmr
          dmt:f64[400,13,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(400, 13, 1)
          ] dms
          dmu:f64[1,13,3] = broadcast_in_dim[
            broadcast_dimensions=(1, 2)
            shape=(1, 13, 3)
          ] bjq
          dmv:f64[400,13,3] = mul dmt dmu
          dmw:f64[400,13,3] = add dmp dmv
          dmx:f64[400,13] = mul 2.0 dmj
          dmy:f64[400,13,3] = pjit[name=cross jaxpr=cross1] dmk bjq
          dmz:f64[400,13,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(400, 13, 1)
          ] dmx
          dna:f64[400,13,3] = mul dmz dmy
          dnb:f64[400,13,3] = add dmw dna
          dnc:f64[400,13,3] = add dhy dnb
          dnd:f64[400,13,1] = slice[
            limit_indices=(400, 13, 1)
            start_indices=(0, 0, 0)
            strides=None
          ] dmh
          dne:f64[400,13] = squeeze[dimensions=(2,)] dnd
          dnf:f64[13,1] = slice[
            limit_indices=(13, 1)
            start_indices=(0, 0)
            strides=None
          ] bjr
          dng:f64[13] = squeeze[dimensions=(1,)] dnf
          dnh:f64[1,13] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 13)
          ] dng
          dni:f64[400,13] = mul dne dnh
          dnj:f64[400,13,1] = slice[
            limit_indices=(400, 13, 2)
            start_indices=(0, 0, 1)
            strides=None
          ] dmh
          dnk:f64[400,13] = squeeze[dimensions=(2,)] dnj
          dnl:f64[13,1] = slice[
            limit_indices=(13, 2)
            start_indices=(0, 1)
            strides=None
          ] bjr
          dnm:f64[13] = squeeze[dimensions=(1,)] dnl
          dnn:f64[1,13] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 13)
          ] dnm
          dno:f64[400,13] = mul dnk dnn
          dnp:f64[400,13] = sub dni dno
          dnq:f64[400,13,1] = slice[
            limit_indices=(400, 13, 3)
            start_indices=(0, 0, 2)
            strides=None
          ] dmh
          dnr:f64[400,13] = squeeze[dimensions=(2,)] dnq
          dns:f64[13,1] = slice[
            limit_indices=(13, 3)
            start_indices=(0, 2)
            strides=None
          ] bjr
          dnt:f64[13] = squeeze[dimensions=(1,)] dns
          dnu:f64[1,13] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 13)
          ] dnt
          dnv:f64[400,13] = mul dnr dnu
          dnw:f64[400,13] = sub dnp dnv
          dnx:f64[400,13,1] = slice[
            limit_indices=(400, 13, 4)
            start_indices=(0, 0, 3)
            strides=None
          ] dmh
          dny:f64[400,13] = squeeze[dimensions=(2,)] dnx
          dnz:f64[13,1] = slice[
            limit_indices=(13, 4)
            start_indices=(0, 3)
            strides=None
          ] bjr
          doa:f64[13] = squeeze[dimensions=(1,)] dnz
          dob:f64[1,13] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 13)
          ] doa
          doc:f64[400,13] = mul dny dob
          dod:f64[400,13] = sub dnw doc
          doe:f64[400,13,1] = slice[
            limit_indices=(400, 13, 1)
            start_indices=(0, 0, 0)
            strides=None
          ] dmh
          dof:f64[400,13] = squeeze[dimensions=(2,)] doe
          dog:f64[13,1] = slice[
            limit_indices=(13, 2)
            start_indices=(0, 1)
            strides=None
          ] bjr
          doh:f64[13] = squeeze[dimensions=(1,)] dog
          doi:f64[1,13] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 13)
          ] doh
          doj:f64[400,13] = mul dof doi
          dok:f64[400,13,1] = slice[
            limit_indices=(400, 13, 2)
            start_indices=(0, 0, 1)
            strides=None
          ] dmh
          dol:f64[400,13] = squeeze[dimensions=(2,)] dok
          dom:f64[13,1] = slice[
            limit_indices=(13, 1)
            start_indices=(0, 0)
            strides=None
          ] bjr
          don:f64[13] = squeeze[dimensions=(1,)] dom
          doo:f64[1,13] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 13)
          ] don
          dop:f64[400,13] = mul dol doo
          doq:f64[400,13] = add doj dop
          dor:f64[400,13,1] = slice[
            limit_indices=(400, 13, 3)
            start_indices=(0, 0, 2)
            strides=None
          ] dmh
          dos:f64[400,13] = squeeze[dimensions=(2,)] dor
          dot:f64[13,1] = slice[
            limit_indices=(13, 4)
            start_indices=(0, 3)
            strides=None
          ] bjr
          dou:f64[13] = squeeze[dimensions=(1,)] dot
          dov:f64[1,13] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 13)
          ] dou
          dow:f64[400,13] = mul dos dov
          dox:f64[400,13] = add doq dow
          doy:f64[400,13,1] = slice[
            limit_indices=(400, 13, 4)
            start_indices=(0, 0, 3)
            strides=None
          ] dmh
          doz:f64[400,13] = squeeze[dimensions=(2,)] doy
          dpa:f64[13,1] = slice[
            limit_indices=(13, 3)
            start_indices=(0, 2)
            strides=None
          ] bjr
          dpb:f64[13] = squeeze[dimensions=(1,)] dpa
          dpc:f64[1,13] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 13)
          ] dpb
          dpd:f64[400,13] = mul doz dpc
          dpe:f64[400,13] = sub dox dpd
          dpf:f64[400,13,1] = slice[
            limit_indices=(400, 13, 1)
            start_indices=(0, 0, 0)
            strides=None
          ] dmh
          dpg:f64[400,13] = squeeze[dimensions=(2,)] dpf
          dph:f64[13,1] = slice[
            limit_indices=(13, 3)
            start_indices=(0, 2)
            strides=None
          ] bjr
          dpi:f64[13] = squeeze[dimensions=(1,)] dph
          dpj:f64[1,13] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 13)
          ] dpi
          dpk:f64[400,13] = mul dpg dpj
          dpl:f64[400,13,1] = slice[
            limit_indices=(400, 13, 2)
            start_indices=(0, 0, 1)
            strides=None
          ] dmh
          dpm:f64[400,13] = squeeze[dimensions=(2,)] dpl
          dpn:f64[13,1] = slice[
            limit_indices=(13, 4)
            start_indices=(0, 3)
            strides=None
          ] bjr
          dpo:f64[13] = squeeze[dimensions=(1,)] dpn
          dpp:f64[1,13] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 13)
          ] dpo
          dpq:f64[400,13] = mul dpm dpp
          dpr:f64[400,13] = sub dpk dpq
          dps:f64[400,13,1] = slice[
            limit_indices=(400, 13, 3)
            start_indices=(0, 0, 2)
            strides=None
          ] dmh
          dpt:f64[400,13] = squeeze[dimensions=(2,)] dps
          dpu:f64[13,1] = slice[
            limit_indices=(13, 1)
            start_indices=(0, 0)
            strides=None
          ] bjr
          dpv:f64[13] = squeeze[dimensions=(1,)] dpu
          dpw:f64[1,13] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 13)
          ] dpv
          dpx:f64[400,13] = mul dpt dpw
          dpy:f64[400,13] = add dpr dpx
          dpz:f64[400,13,1] = slice[
            limit_indices=(400, 13, 4)
            start_indices=(0, 0, 3)
            strides=None
          ] dmh
          dqa:f64[400,13] = squeeze[dimensions=(2,)] dpz
          dqb:f64[13,1] = slice[
            limit_indices=(13, 2)
            start_indices=(0, 1)
            strides=None
          ] bjr
          dqc:f64[13] = squeeze[dimensions=(1,)] dqb
          dqd:f64[1,13] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 13)
          ] dqc
          dqe:f64[400,13] = mul dqa dqd
          dqf:f64[400,13] = add dpy dqe
          dqg:f64[400,13,1] = slice[
            limit_indices=(400, 13, 1)
            start_indices=(0, 0, 0)
            strides=None
          ] dmh
          dqh:f64[400,13] = squeeze[dimensions=(2,)] dqg
          dqi:f64[13,1] = slice[
            limit_indices=(13, 4)
            start_indices=(0, 3)
            strides=None
          ] bjr
          dqj:f64[13] = squeeze[dimensions=(1,)] dqi
          dqk:f64[1,13] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 13)
          ] dqj
          dql:f64[400,13] = mul dqh dqk
          dqm:f64[400,13,1] = slice[
            limit_indices=(400, 13, 2)
            start_indices=(0, 0, 1)
            strides=None
          ] dmh
          dqn:f64[400,13] = squeeze[dimensions=(2,)] dqm
          dqo:f64[13,1] = slice[
            limit_indices=(13, 3)
            start_indices=(0, 2)
            strides=None
          ] bjr
          dqp:f64[13] = squeeze[dimensions=(1,)] dqo
          dqq:f64[1,13] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 13)
          ] dqp
          dqr:f64[400,13] = mul dqn dqq
          dqs:f64[400,13] = add dql dqr
          dqt:f64[400,13,1] = slice[
            limit_indices=(400, 13, 3)
            start_indices=(0, 0, 2)
            strides=None
          ] dmh
          dqu:f64[400,13] = squeeze[dimensions=(2,)] dqt
          dqv:f64[13,1] = slice[
            limit_indices=(13, 2)
            start_indices=(0, 1)
            strides=None
          ] bjr
          dqw:f64[13] = squeeze[dimensions=(1,)] dqv
          dqx:f64[1,13] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 13)
          ] dqw
          dqy:f64[400,13] = mul dqu dqx
          dqz:f64[400,13] = sub dqs dqy
          dra:f64[400,13,1] = slice[
            limit_indices=(400, 13, 4)
            start_indices=(0, 0, 3)
            strides=None
          ] dmh
          drb:f64[400,13] = squeeze[dimensions=(2,)] dra
          drc:f64[13,1] = slice[
            limit_indices=(13, 1)
            start_indices=(0, 0)
            strides=None
          ] bjr
          drd:f64[13] = squeeze[dimensions=(1,)] drc
          dre:f64[1,13] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 13)
          ] drd
          drf:f64[400,13] = mul drb dre
          drg:f64[400,13] = add dqz drf
          drh:f64[400,13,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(400, 13, 1)
          ] dod
          dri:f64[400,13,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(400, 13, 1)
          ] dpe
          drj:f64[400,13,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(400, 13, 1)
          ] dqf
          drk:f64[400,13,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(400, 13, 1)
          ] drg
          drl:f64[400,13,4] = concatenate[dimension=2] drh dri drj drk
          drm:f64[6,3] = slice[
            limit_indices=(6, 3)
            start_indices=(0, 0)
            strides=None
          ] bjo
          drn:f64[6,3] = slice[
            limit_indices=(6, 3)
            start_indices=(0, 0)
            strides=None
          ] bjp
          dro:f64[12,3] = slice[
            limit_indices=(18, 3)
            start_indices=(6, 0)
            strides=None
          ] bjo
          drp:f64[12,3] = slice[
            limit_indices=(18, 3)
            start_indices=(6, 0)
            strides=None
          ] bjp
          drq:f64[12,1,3] = reshape[dimensions=None new_sizes=(12, 1, 3)] dro
          drr:f64[12,1,3] = reshape[dimensions=None new_sizes=(12, 1, 3)] drp
          drs:f64[12,3] = broadcast_in_dim[
            broadcast_dimensions=()
            shape=(12, 3)
          ] 0.0
          drt:f64[1,1,1,4] = reshape[dimensions=None new_sizes=(1, 1, 1, 4)] bkl
          dru:f64[1,1,4] = squeeze[dimensions=(0,)] drt
          drv:f64[12,1,1,4] = broadcast_in_dim[
            broadcast_dimensions=(1, 2, 3)
            shape=(12, 1, 1, 4)
          ] dru
          drw:f64[12,4] = reshape[dimensions=None new_sizes=(12, 4)] drv
          drx:f64[12,3] = pjit[name=_take jaxpr=_take5] drq 0
          dry:f64[12,3] = pjit[name=_take jaxpr=_take5] drr 0
          drz:f64[12,1] = slice[
            limit_indices=(12, 1)
            start_indices=(0, 0)
            strides=None
          ] drw
          dsa:f64[12] = squeeze[dimensions=(1,)] drz
          dsb:f64[12,3] = slice[
            limit_indices=(12, 4)
            start_indices=(0, 1)
            strides=None
          ] drw
          dsc:f64[12] = dot_general[
            dimension_numbers=(([1], [1]), ([0], [0]))
            preferred_element_type=float64
          ] dsb drx
          dsd:f64[12,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(12, 1)
          ] dsc
          dse:f64[12,3] = mul dsd dsb
          dsf:f64[12,3] = mul 2.0 dse
          dsg:f64[12] = mul dsa dsa
          dsh:f64[12] = dot_general[
            dimension_numbers=(([1], [1]), ([0], [0]))
            preferred_element_type=float64
          ] dsb dsb
          dsi:f64[12] = sub dsg dsh
          dsj:f64[12,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(12, 1)
          ] dsi
          dsk:f64[12,3] = mul dsj drx
          dsl:f64[12,3] = add dsf dsk
          dsm:f64[12] = mul 2.0 dsa
          dsn:f64[12,3] = pjit[name=cross jaxpr=cross3] dsb drx
          dso:f64[12,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(12, 1)
          ] dsm
          dsp:f64[12,3] = mul dso dsn
          dsq:f64[12,3] = add dsl dsp
          dsr:f64[12,1] = slice[
            limit_indices=(12, 1)
            start_indices=(0, 0)
            strides=None
          ] drw
          dss:f64[12] = squeeze[dimensions=(1,)] dsr
          dst:f64[12,3] = slice[
            limit_indices=(12, 4)
            start_indices=(0, 1)
            strides=None
          ] drw
          dsu:f64[12] = dot_general[
            dimension_numbers=(([1], [1]), ([0], [0]))
            preferred_element_type=float64
          ] dst dry
          dsv:f64[12,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(12, 1)
          ] dsu
          dsw:f64[12,3] = mul dsv dst
          dsx:f64[12,3] = mul 2.0 dsw
          dsy:f64[12] = mul dss dss
          dsz:f64[12] = dot_general[
            dimension_numbers=(([1], [1]), ([0], [0]))
            preferred_element_type=float64
          ] dst dst
          dta:f64[12] = sub dsy dsz
          dtb:f64[12,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(12, 1)
          ] dta
          dtc:f64[12,3] = mul dtb dry
          dtd:f64[12,3] = add dsx dtc
          dte:f64[12] = mul 2.0 dss
          dtf:f64[12,3] = pjit[name=cross jaxpr=cross3] dst dry
          dtg:f64[12,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(12, 1)
          ] dte
          dth:f64[12,3] = mul dtg dtf
          dti:f64[12,3] = add dtd dth
          dtj:f64[12,3] = pjit[name=cross jaxpr=cross3] drs dsq
          dtk:f64[12,3] = add dti dtj
          dtl:f64[18,3] = concatenate[dimension=0] drm dsq
          dtm:f64[18,3] = concatenate[dimension=0] drn dtk
          dtn:f64[400,18,4] = pjit[
            name=_take
            jaxpr={ lambda ; dto:f64[400,13,4] dtp:i64[18]. let
                dtq:i64[18] = pjit[name=remainder jaxpr=remainder6] dtp 13
                dtr:i64[18,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(18, 1)
                ] dtq
                dts:f64[400,18,4] = gather[
                  dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 2), collapsed_slice_dims=(1,), start_index_map=(1,))
                  fill_value=None
                  indices_are_sorted=False
                  mode=GatherScatterMode.PROMISE_IN_BOUNDS
                  slice_sizes=(400, 1, 4)
                  unique_indices=False
                ] dto dtr
              in (dts,) }
          ] drl bkm
          dtt:f64[400,18,1] = slice[
            limit_indices=(400, 18, 1)
            start_indices=(0, 0, 0)
            strides=None
          ] dtn
          dtu:f64[400,18] = squeeze[dimensions=(2,)] dtt
          dtv:f64[400,18,3] = slice[
            limit_indices=(400, 18, 4)
            start_indices=(0, 0, 1)
            strides=None
          ] dtn
          dtw:f64[18,400] = dot_general[
            dimension_numbers=(([2], [1]), ([1], [0]))
            preferred_element_type=float64
          ] dtv dtl
          dtx:f64[400,18] = transpose[permutation=(1, 0)] dtw
          dty:f64[400,18,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(400, 18, 1)
          ] dtx
          dtz:f64[400,18,3] = mul dty dtv
          dua:f64[400,18,3] = mul 2.0 dtz
          dub:f64[400,18] = mul dtu dtu
          duc:f64[400,18] = dot_general[
            dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
            preferred_element_type=float64
          ] dtv dtv
          dud:f64[400,18] = sub dub duc
          due:f64[400,18,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(400, 18, 1)
          ] dud
          duf:f64[1,18,3] = broadcast_in_dim[
            broadcast_dimensions=(1, 2)
            shape=(1, 18, 3)
          ] dtl
          dug:f64[400,18,3] = mul due duf
          duh:f64[400,18,3] = add dua dug
          dui:f64[400,18] = mul 2.0 dtu
          duj:f64[400,18,3] = pjit[
            name=cross
            jaxpr={ lambda ; duk:f64[400,18,3] dul:f64[18,3]. let
                dum:i32[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] 0
                dun:f64[400,18] = gather[
                  dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
                  fill_value=None
                  indices_are_sorted=True
                  mode=GatherScatterMode.PROMISE_IN_BOUNDS
                  slice_sizes=(400, 18, 1)
                  unique_indices=True
                ] duk dum
                duo:i32[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] 1
                dup:f64[400,18] = gather[
                  dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
                  fill_value=None
                  indices_are_sorted=True
                  mode=GatherScatterMode.PROMISE_IN_BOUNDS
                  slice_sizes=(400, 18, 1)
                  unique_indices=True
                ] duk duo
                duq:i32[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] 2
                dur:f64[400,18] = gather[
                  dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(2,), start_index_map=(2,))
                  fill_value=None
                  indices_are_sorted=True
                  mode=GatherScatterMode.PROMISE_IN_BOUNDS
                  slice_sizes=(400, 18, 1)
                  unique_indices=True
                ] duk duq
                dus:i32[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] 0
                dut:f64[18] = gather[
                  dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
                  fill_value=None
                  indices_are_sorted=True
                  mode=GatherScatterMode.PROMISE_IN_BOUNDS
                  slice_sizes=(18, 1)
                  unique_indices=True
                ] dul dus
                duu:i32[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] 1
                duv:f64[18] = gather[
                  dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
                  fill_value=None
                  indices_are_sorted=True
                  mode=GatherScatterMode.PROMISE_IN_BOUNDS
                  slice_sizes=(18, 1)
                  unique_indices=True
                ] dul duu
                duw:i32[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] 2
                dux:f64[18] = gather[
                  dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
                  fill_value=None
                  indices_are_sorted=True
                  mode=GatherScatterMode.PROMISE_IN_BOUNDS
                  slice_sizes=(18, 1)
                  unique_indices=True
                ] dul duw
                duy:f64[1,18] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 18)
                ] dux
                duz:f64[400,18] = mul dup duy
                dva:f64[1,18] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 18)
                ] duv
                dvb:f64[400,18] = mul dur dva
                dvc:f64[400,18] = sub duz dvb
                dvd:f64[1,18] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 18)
                ] dut
                dve:f64[400,18] = mul dur dvd
                dvf:f64[1,18] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 18)
                ] dux
                dvg:f64[400,18] = mul dun dvf
                dvh:f64[400,18] = sub dve dvg
                dvi:f64[1,18] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 18)
                ] duv
                dvj:f64[400,18] = mul dun dvi
                dvk:f64[1,18] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 18)
                ] dut
                dvl:f64[400,18] = mul dup dvk
                dvm:f64[400,18] = sub dvj dvl
                dvn:f64[400,18,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 18, 1)
                ] dvc
                dvo:f64[400,18,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 18, 1)
                ] dvh
                dvp:f64[400,18,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 18, 1)
                ] dvm
                dvq:f64[400,18,3] = concatenate[dimension=2] dvn dvo dvp
              in (dvq,) }
          ] dtv dtl
          dvr:f64[400,18,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(400, 18, 1)
          ] dui
          dvs:f64[400,18,3] = mul dvr duj
          dvt:f64[400,18,3] = add duh dvs
          dvu:f64[400,13,3] = sub dcd dnc
          dvv:f64[1,1,1,4] = reshape[dimensions=None new_sizes=(1, 1, 1, 4)] bkn
          dvw:f64[1,1,4] = squeeze[dimensions=(0,)] dvv
          dvx:f64[13,1,1,4] = broadcast_in_dim[
            broadcast_dimensions=(1, 2, 3)
            shape=(13, 1, 1, 4)
          ] dvw
          dvy:f64[13,4] = reshape[dimensions=None new_sizes=(13, 4)] dvx
          dvz:f64[400,18,3] = pjit[name=_take jaxpr=_take6] dvu bko
          dwa:f64[18,4] = pjit[
            name=_take
            jaxpr={ lambda ; dwb:f64[13,4] dwc:i64[18]. let
                dwd:i64[18] = pjit[
                  name=remainder
                  jaxpr={ lambda ; kc:i64[18] kd:i64[]. let
                      ke:bool[] = eq kd 0
                      kf:i64[] = pjit[name=_where jaxpr=_where6] ke 1 kd
                      kg:i64[18] = rem kc kf
                      kh:bool[18] = ne kg 0
                      ki:bool[18] = lt kg 0
                      kj:bool[] = lt kf 0
                      kk:bool[18] = ne ki kj
                      kl:bool[18] = and kk kh
                      km:i64[18] = add kg kf
                      kn:i64[18] = select_n kl kg km
                    in (kn,) }
                ] dwc 13
                dwe:i64[18,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(18, 1)
                ] dwd
                dwf:f64[18,4] = gather[
                  dimension_numbers=GatherDimensionNumbers(offset_dims=(1,), collapsed_slice_dims=(0,), start_index_map=(0,))
                  fill_value=None
                  indices_are_sorted=False
                  mode=GatherScatterMode.PROMISE_IN_BOUNDS
                  slice_sizes=(1, 4)
                  unique_indices=False
                ] dwb dwe
              in (dwf,) }
          ] dvy bko
          dwg:f64[4] = convert_element_type[new_dtype=float64 weak_type=False] bkp
          dwh:f64[1,4] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 4)
          ] dwg
          dwi:f64[18,4] = mul dwa dwh
          dwj:f64[18,1] = slice[
            limit_indices=(18, 1)
            start_indices=(0, 0)
            strides=None
          ] dwi
          dwk:f64[18] = squeeze[dimensions=(1,)] dwj
          dwl:f64[18,3] = slice[
            limit_indices=(18, 4)
            start_indices=(0, 1)
            strides=None
          ] dwi
          dwm:f64[18,400] = dot_general[
            dimension_numbers=(([1], [2]), ([0], [1]))
            preferred_element_type=float64
          ] dwl dvt
          dwn:f64[400,18] = transpose[permutation=(1, 0)] dwm
          dwo:f64[400,18,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(400, 18, 1)
          ] dwn
          dwp:f64[1,18,3] = broadcast_in_dim[
            broadcast_dimensions=(1, 2)
            shape=(1, 18, 3)
          ] dwl
          dwq:f64[400,18,3] = mul dwo dwp
          dwr:f64[400,18,3] = mul 2.0 dwq
          dws:f64[18] = mul dwk dwk
          dwt:f64[18] = dot_general[
            dimension_numbers=(([1], [1]), ([0], [0]))
            preferred_element_type=float64
          ] dwl dwl
          dwu:f64[18] = sub dws dwt
          dwv:f64[18,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(18, 1)
          ] dwu
          dww:f64[1,18,1] = broadcast_in_dim[
            broadcast_dimensions=(1, 2)
            shape=(1, 18, 1)
          ] dwv
          dwx:f64[400,18,3] = mul dww dvt
          dwy:f64[400,18,3] = add dwr dwx
          dwz:f64[18] = mul 2.0 dwk
          dxa:f64[400,18,3] = pjit[name=cross jaxpr=cross4] dwl dvt
          dxb:f64[18,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(18, 1)
          ] dwz
          dxc:f64[1,18,1] = broadcast_in_dim[
            broadcast_dimensions=(1, 2)
            shape=(1, 18, 1)
          ] dxb
          dxd:f64[400,18,3] = mul dxc dxa
          dxe:f64[400,18,3] = add dwy dxd
          dxf:f64[400,18,3] = pjit[name=cross jaxpr=cross5] dvz dvt
          dxg:f64[1,18,3] = broadcast_in_dim[
            broadcast_dimensions=(1, 2)
            shape=(1, 18, 3)
          ] dtm
          dxh:f64[400,18,3] = sub dxg dxf
          dxi:f64[18,1] = slice[
            limit_indices=(18, 1)
            start_indices=(0, 0)
            strides=None
          ] dwi
          dxj:f64[18] = squeeze[dimensions=(1,)] dxi
          dxk:f64[18,3] = slice[
            limit_indices=(18, 4)
            start_indices=(0, 1)
            strides=None
          ] dwi
          dxl:f64[18,400] = dot_general[
            dimension_numbers=(([1], [2]), ([0], [1]))
            preferred_element_type=float64
          ] dxk dxh
          dxm:f64[400,18] = transpose[permutation=(1, 0)] dxl
          dxn:f64[400,18,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(400, 18, 1)
          ] dxm
          dxo:f64[1,18,3] = broadcast_in_dim[
            broadcast_dimensions=(1, 2)
            shape=(1, 18, 3)
          ] dxk
          dxp:f64[400,18,3] = mul dxn dxo
          dxq:f64[400,18,3] = mul 2.0 dxp
          dxr:f64[18] = mul dxj dxj
          dxs:f64[18] = dot_general[
            dimension_numbers=(([1], [1]), ([0], [0]))
            preferred_element_type=float64
          ] dxk dxk
          dxt:f64[18] = sub dxr dxs
          dxu:f64[18,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(18, 1)
          ] dxt
          dxv:f64[1,18,1] = broadcast_in_dim[
            broadcast_dimensions=(1, 2)
            shape=(1, 18, 1)
          ] dxu
          dxw:f64[400,18,3] = mul dxv dxh
          dxx:f64[400,18,3] = add dxq dxw
          dxy:f64[18] = mul 2.0 dxj
          dxz:f64[400,18,3] = pjit[name=cross jaxpr=cross4] dxk dxh
          dya:f64[18,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(18, 1)
          ] dxy
          dyb:f64[1,18,1] = broadcast_in_dim[
            broadcast_dimensions=(1, 2)
            shape=(1, 18, 1)
          ] dya
          dyc:f64[400,18,3] = mul dyb dxz
          dyd:f64[400,18,3] = add dxx dyc
          dye:f64[400,18,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(400, 18, 1)
          ] btj
          dyf:f64[400,18,3] = mul dxe dye
          dyg:f64[400,18,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(400, 18, 1)
          ] btj
          dyh:f64[400,18,3] = mul dyd dyg
          dyi:f64[400,6,3] = slice[
            limit_indices=(400, 6, 3)
            start_indices=(0, 0, 0)
            strides=None
          ] dyf
          dyj:f64[400,6,3] = slice[
            limit_indices=(400, 6, 3)
            start_indices=(0, 0, 0)
            strides=None
          ] dyh
          dyk:i64[6] = slice[limit_indices=(6,) start_indices=(0,) strides=None] bkq
          dyl:f64[1,3] = broadcast_in_dim[broadcast_dimensions=() shape=(1, 3)] 0.0
          dym:f64[1,3] = broadcast_in_dim[broadcast_dimensions=() shape=(1, 3)] 0.0
          dyn:bool[6] = lt dyk 0
          dyo:i64[6] = add dyk 1
          dyp:i64[6] = select_n dyn dyk dyo
          dyq:i32[6] = convert_element_type[new_dtype=int32 weak_type=False] dyp
          dyr:i32[6,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(6, 1)
          ] dyq
          dys:f64[400,1,3] = broadcast_in_dim[
            broadcast_dimensions=(1, 2)
            shape=(400, 1, 3)
          ] dyl
          dyt:f64[400,1,3] = scatter-add[
            dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
            indices_are_sorted=False
            mode=GatherScatterMode.FILL_OR_DROP
            unique_indices=False
            update_consts=()
            update_jaxpr=jaxpr1
          ] dys dyr dyi
          dyu:bool[6] = lt dyk 0
          dyv:i64[6] = add dyk 1
          dyw:i64[6] = select_n dyu dyk dyv
          dyx:i32[6] = convert_element_type[new_dtype=int32 weak_type=False] dyw
          dyy:i32[6,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(6, 1)
          ] dyx
          dyz:f64[400,1,3] = broadcast_in_dim[
            broadcast_dimensions=(1, 2)
            shape=(400, 1, 3)
          ] dym
          dza:f64[400,1,3] = scatter-add[
            dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
            indices_are_sorted=False
            mode=GatherScatterMode.FILL_OR_DROP
            unique_indices=False
            update_consts=()
            update_jaxpr=jaxpr1
          ] dyz dyy dyj
          dzb:f64[400,4,3] = pjit[name=_take jaxpr=_take7] dyf bkr
          dzc:f64[400,4,3] = pjit[name=_take jaxpr=_take7] dyh bks
          dzd:i64[4] = pjit[name=_take jaxpr=_take8] bkq bkt
          dze:f64[400,4,3] = pjit[name=_take jaxpr=_take2] dyt bku
          dzf:f64[400,4,3] = pjit[name=_take jaxpr=_take2] dza bkv
          dzg:bool[4] = lt dzd 0
          dzh:i64[4] = add dzd 4
          dzi:i64[4] = select_n dzg dzd dzh
          dzj:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] dzi
          dzk:i32[4,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(4, 1)
          ] dzj
          dzl:f64[400,4,3] = scatter-add[
            dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
            indices_are_sorted=False
            mode=GatherScatterMode.FILL_OR_DROP
            unique_indices=False
            update_consts=()
            update_jaxpr=jaxpr1
          ] dze dzk dzb
          dzm:bool[4] = lt dzd 0
          dzn:i64[4] = add dzd 4
          dzo:i64[4] = select_n dzm dzd dzn
          dzp:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] dzo
          dzq:i32[4,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(4, 1)
          ] dzp
          dzr:f64[400,4,3] = scatter-add[
            dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
            indices_are_sorted=False
            mode=GatherScatterMode.FILL_OR_DROP
            unique_indices=False
            update_consts=()
            update_jaxpr=jaxpr1
          ] dzf dzq dzc
          dzs:f64[400,4,3] = pjit[name=_take jaxpr=_take7] dyf bkw
          dzt:f64[400,4,3] = pjit[name=_take jaxpr=_take7] dyh bkx
          dzu:i64[4] = pjit[name=_take jaxpr=_take8] bkq bky
          dzv:bool[4] = lt dzu 0
          dzw:i64[4] = add dzu 4
          dzx:i64[4] = select_n dzv dzu dzw
          dzy:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] dzx
          dzz:i32[4,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(4, 1)
          ] dzy
          eaa:f64[400,4,3] = scatter-add[
            dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
            indices_are_sorted=False
            mode=GatherScatterMode.FILL_OR_DROP
            unique_indices=False
            update_consts=()
            update_jaxpr=jaxpr1
          ] dzl dzz dzs
          eab:bool[4] = lt dzu 0
          eac:i64[4] = add dzu 4
          ead:i64[4] = select_n eab dzu eac
          eae:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] ead
          eaf:i32[4,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(4, 1)
          ] eae
          eag:f64[400,4,3] = scatter-add[
            dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
            indices_are_sorted=False
            mode=GatherScatterMode.FILL_OR_DROP
            unique_indices=False
            update_consts=()
            update_jaxpr=jaxpr1
          ] dzr eaf dzt
          eah:f64[400,4,3] = pjit[name=_take jaxpr=_take7] dyf bkz
          eai:f64[400,4,3] = pjit[name=_take jaxpr=_take7] dyh bla
          eaj:i64[4] = pjit[name=_take jaxpr=_take8] bkq blb
          eak:bool[4] = lt eaj 0
          eal:i64[4] = add eaj 4
          eam:i64[4] = select_n eak eaj eal
          ean:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] eam
          eao:i32[4,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(4, 1)
          ] ean
          eap:f64[400,4,3] = scatter-add[
            dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
            indices_are_sorted=False
            mode=GatherScatterMode.FILL_OR_DROP
            unique_indices=False
            update_consts=()
            update_jaxpr=jaxpr1
          ] eaa eao eah
          eaq:bool[4] = lt eaj 0
          ear:i64[4] = add eaj 4
          eas:i64[4] = select_n eaq eaj ear
          eat:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] eas
          eau:i32[4,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(4, 1)
          ] eat
          eav:f64[400,4,3] = scatter-add[
            dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
            indices_are_sorted=False
            mode=GatherScatterMode.FILL_OR_DROP
            unique_indices=False
            update_consts=()
            update_jaxpr=jaxpr1
          ] eag eau eai
          eaw:f64[400,13,3] = concatenate[dimension=1] dyt dzl eaa eap
          eax:f64[400,13,3] = concatenate[dimension=1] dza dzr eag eav
          eay:f64[400,13,3] = pjit[name=_take jaxpr=_take3] eaw blc
          eaz:f64[400,13,3] = pjit[name=_take jaxpr=_take3] eax bld
          eba:f64[1,3] = broadcast_in_dim[broadcast_dimensions=() shape=(1, 3)] 0.0
          ebb:f64[1,3] = broadcast_in_dim[broadcast_dimensions=() shape=(1, 3)] 0.0
          ebc:f64[400,1,3] = broadcast_in_dim[
            broadcast_dimensions=(1, 2)
            shape=(400, 1, 3)
          ] eba
          ebd:f64[400,14,3] = concatenate[dimension=1] eay ebc
          ebe:f64[400,1,3] = broadcast_in_dim[
            broadcast_dimensions=(1, 2)
            shape=(400, 1, 3)
          ] ebb
          ebf:f64[400,14,3] = concatenate[dimension=1] eaz ebe
          ebg:f64[400,13,3] = pjit[name=_take jaxpr=_take4] ebd bkj
          ebh:f64[400,13,3] = pjit[name=_take jaxpr=_take4] ebf bkj
          ebi:f64[400,6,3] = slice[
            limit_indices=(400, 6, 3)
            start_indices=(0, 0, 0)
            strides=None
          ] dxe
          ebj:f64[400,6,3] = slice[
            limit_indices=(400, 6, 3)
            start_indices=(0, 0, 0)
            strides=None
          ] dyd
          ebk:f64[400,6,3] = slice[
            limit_indices=(400, 6, 3)
            start_indices=(0, 0, 0)
            strides=None
          ] dyf
          ebl:f64[400,6,3] = slice[
            limit_indices=(400, 6, 3)
            start_indices=(0, 0, 0)
            strides=None
          ] dyh
          ebm:f64[400,1,6,3] = reshape[dimensions=None new_sizes=(400, 1, 6, 3)] ebk
          ebn:f64[400,1,6,3] = reshape[dimensions=None new_sizes=(400, 1, 6, 3)] ebl
          ebo:f64[400,1,3,3] = slice[
            limit_indices=(400, 1, 3, 3)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] ebm
          ebp:f64[400,1,3] = reduce_sum[axes=(2,)] ebo
          ebq:f64[400,1,3,3] = slice[
            limit_indices=(400, 1, 3, 3)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] ebn
          ebr:f64[400,1,3] = reduce_sum[axes=(2,)] ebq
          ebs:f64[400,1,6,3] = reshape[dimensions=None new_sizes=(400, 1, 6, 3)] ebi
          ebt:f64[400,1,6,3] = reshape[dimensions=None new_sizes=(400, 1, 6, 3)] ebj
          ebu:f64[400,1,6,3] = pjit[name=cross jaxpr=cross6] ebp ebt
          ebv:f64[400,1,6,3] = pjit[name=cross jaxpr=cross6] ebr ebs
          ebw:f64[400,1,6,3] = add ebu ebv
          ebx:f64[400,1,6,3] = pjit[name=cross jaxpr=cross6] ebp ebs
          eby:f64[3] = broadcast_in_dim[broadcast_dimensions=() shape=(3,)] 0.0
          ebz:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
          eca:f64[1,3,3] = broadcast_in_dim[
            broadcast_dimensions=(2,)
            shape=(1, 3, 3)
          ] eby
          ecb:f64[400,1,3,3] = broadcast_in_dim[
            broadcast_dimensions=(1, 2, 3)
            shape=(400, 1, 3, 3)
          ] eca
          ecc:f64[400,1,6,3] = scatter[
            dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2, 3), inserted_window_dims=(), scatter_dims_to_operand_dims=(2,))
            indices_are_sorted=True
            mode=GatherScatterMode.FILL_OR_DROP
            unique_indices=True
            update_consts=()
            update_jaxpr=None
          ] ebx ebz ecb
          ecd:f64[3] = broadcast_in_dim[broadcast_dimensions=() shape=(3,)] 0.0
          ece:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
          ecf:f64[1,3,3] = broadcast_in_dim[
            broadcast_dimensions=(2,)
            shape=(1, 3, 3)
          ] ecd
          ecg:f64[400,1,3,3] = broadcast_in_dim[
            broadcast_dimensions=(1, 2, 3)
            shape=(400, 1, 3, 3)
          ] ecf
          ech:f64[400,1,6,3] = scatter[
            dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2, 3), inserted_window_dims=(), scatter_dims_to_operand_dims=(2,))
            indices_are_sorted=True
            mode=GatherScatterMode.FILL_OR_DROP
            unique_indices=True
            update_consts=()
            update_jaxpr=None
          ] ebw ece ecg
          eci:f64[400,6,3] = reshape[dimensions=None new_sizes=(400, 6, 3)] ecc
          ecj:f64[400,6,3] = reshape[dimensions=None new_sizes=(400, 6, 3)] ech
          eck:f64[400,12,3] = slice[
            limit_indices=(400, 13, 3)
            start_indices=(0, 1, 0)
            strides=None
          ] ebg
          ecl:f64[400,12,3] = slice[
            limit_indices=(400, 13, 3)
            start_indices=(0, 1, 0)
            strides=None
          ] ebh
          ecm:f64[400,12,3] = slice[
            limit_indices=(400, 18, 3)
            start_indices=(0, 6, 0)
            strides=None
          ] dxe
          ecn:f64[400,12,3] = slice[
            limit_indices=(400, 18, 3)
            start_indices=(0, 6, 0)
            strides=None
          ] dyd
          eco:f64[400,12,3] = pjit[name=cross jaxpr=cross7] eck ecn
          ecp:f64[400,12,3] = pjit[name=cross jaxpr=cross7] ecl ecm
          ecq:f64[400,12,3] = add eco ecp
          ecr:f64[400,12,3] = pjit[name=cross jaxpr=cross7] eck ecm
          ecs:f64[400,18,3] = concatenate[dimension=1] eci ecr
          ect:f64[400,18,3] = concatenate[dimension=1] ecj ecq
          ecu:f64[400,4,3] = pjit[name=_take jaxpr=_take] dgp ble
          ecv:f64[400,4,3,3] = pjit[name=_take jaxpr=_take9] dgm blf
          ecw:f64[4] = pjit[name=_take jaxpr=_take10] bkh blg
          ecx:f64[400,4,3] = pjit[name=_take jaxpr=_take] dgp blh
          ecy:f64[400,4,3,3] = pjit[name=_take jaxpr=_take9] dgm bli
          ecz:f64[4] = pjit[name=_take jaxpr=_take10] bkh blj
          eda:f64[4,3] = broadcast_in_dim[broadcast_dimensions=() shape=(4, 3)] 0.0
          edb:bool[4] = lt blk 0
          edc:i64[4] = add blk 4
          edd:i64[4] = select_n edb blk edc
          ede:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] edd
          edf:i32[4,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(4, 1)
          ] ede
          edg:f64[400,4,3] = broadcast_in_dim[
            broadcast_dimensions=(1, 2)
            shape=(400, 4, 3)
          ] eda
          edh:f64[400,4,3] = scatter-add[
            dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
            indices_are_sorted=False
            mode=GatherScatterMode.FILL_OR_DROP
            unique_indices=False
            update_consts=()
            update_jaxpr=jaxpr1
          ] edg edf ecu
          edi:f64[4,3,3] = broadcast_in_dim[
            broadcast_dimensions=()
            shape=(4, 3, 3)
          ] 0.0
          edj:bool[4] = lt blk 0
          edk:i64[4] = add blk 4
          edl:i64[4] = select_n edj blk edk
          edm:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] edl
          edn:i32[4,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(4, 1)
          ] edm
          edo:f64[400,4,3,3] = broadcast_in_dim[
            broadcast_dimensions=(1, 2, 3)
            shape=(400, 4, 3, 3)
          ] edi
          edp:f64[400,4,3,3] = scatter-add[
            dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2, 3), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
            indices_are_sorted=False
            mode=GatherScatterMode.FILL_OR_DROP
            unique_indices=False
            update_consts=()
            update_jaxpr=jaxpr1
          ] edo edn ecv
          edq:f64[4] = broadcast_in_dim[broadcast_dimensions=() shape=(4,)] 0.0
          edr:bool[4] = lt blk 0
          eds:i64[4] = add blk 4
          edt:i64[4] = select_n edr blk eds
          edu:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] edt
          edv:i32[4,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(4, 1)
          ] edu
          edw:f64[4] = scatter-add[
            dimension_numbers=ScatterDimensionNumbers(update_window_dims=(), inserted_window_dims=(0,), scatter_dims_to_operand_dims=(0,))
            indices_are_sorted=False
            mode=GatherScatterMode.FILL_OR_DROP
            unique_indices=False
            update_consts=()
            update_jaxpr=jaxpr1
          ] edq edv ecw
          edx:f64[400,4,3] = add ecx edh
          edy:f64[400,4,3,3] = add ecy edp
          edz:f64[4] = add ecz edw
          eea:f64[400,4,3] = pjit[name=_take jaxpr=_take] dgp bll
          eeb:f64[400,4,3,3] = pjit[name=_take jaxpr=_take9] dgm blm
          eec:f64[4] = pjit[name=_take jaxpr=_take10] bkh bln
          eed:f64[4,3] = broadcast_in_dim[broadcast_dimensions=() shape=(4, 3)] 0.0
          eee:bool[4] = lt blo 0
          eef:i64[4] = add blo 4
          eeg:i64[4] = select_n eee blo eef
          eeh:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] eeg
          eei:i32[4,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(4, 1)
          ] eeh
          eej:f64[400,4,3] = broadcast_in_dim[
            broadcast_dimensions=(1, 2)
            shape=(400, 4, 3)
          ] eed
          eek:f64[400,4,3] = scatter-add[
            dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
            indices_are_sorted=False
            mode=GatherScatterMode.FILL_OR_DROP
            unique_indices=False
            update_consts=()
            update_jaxpr=jaxpr1
          ] eej eei edx
          eel:f64[4,3,3] = broadcast_in_dim[
            broadcast_dimensions=()
            shape=(4, 3, 3)
          ] 0.0
          eem:bool[4] = lt blo 0
          een:i64[4] = add blo 4
          eeo:i64[4] = select_n eem blo een
          eep:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] eeo
          eeq:i32[4,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(4, 1)
          ] eep
          eer:f64[400,4,3,3] = broadcast_in_dim[
            broadcast_dimensions=(1, 2, 3)
            shape=(400, 4, 3, 3)
          ] eel
          ees:f64[400,4,3,3] = scatter-add[
            dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2, 3), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
            indices_are_sorted=False
            mode=GatherScatterMode.FILL_OR_DROP
            unique_indices=False
            update_consts=()
            update_jaxpr=jaxpr1
          ] eer eeq edy
          eet:f64[4] = broadcast_in_dim[broadcast_dimensions=() shape=(4,)] 0.0
          eeu:bool[4] = lt blo 0
          eev:i64[4] = add blo 4
          eew:i64[4] = select_n eeu blo eev
          eex:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] eew
          eey:i32[4,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(4, 1)
          ] eex
          eez:f64[4] = scatter-add[
            dimension_numbers=ScatterDimensionNumbers(update_window_dims=(), inserted_window_dims=(0,), scatter_dims_to_operand_dims=(0,))
            indices_are_sorted=False
            mode=GatherScatterMode.FILL_OR_DROP
            unique_indices=False
            update_consts=()
            update_jaxpr=jaxpr1
          ] eet eey edz
          efa:f64[400,4,3] = add eea eek
          efb:f64[400,4,3,3] = add eeb ees
          efc:f64[4] = add eec eez
          efd:f64[400,1,3] = slice[
            limit_indices=(400, 1, 3)
            start_indices=(0, 0, 0)
            strides=None
          ] dgp
          efe:f64[400,1,3,3] = slice[
            limit_indices=(400, 1, 3, 3)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] dgm
          eff:f64[1] = slice[limit_indices=(1,) start_indices=(0,) strides=None] bkh
          efg:f64[1,3] = broadcast_in_dim[broadcast_dimensions=() shape=(1, 3)] 0.0
          efh:bool[4] = lt blp 0
          efi:i64[4] = add blp 1
          efj:i64[4] = select_n efh blp efi
          efk:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] efj
          efl:i32[4,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(4, 1)
          ] efk
          efm:f64[400,1,3] = broadcast_in_dim[
            broadcast_dimensions=(1, 2)
            shape=(400, 1, 3)
          ] efg
          efn:f64[400,1,3] = scatter-add[
            dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
            indices_are_sorted=False
            mode=GatherScatterMode.FILL_OR_DROP
            unique_indices=False
            update_consts=()
            update_jaxpr=jaxpr1
          ] efm efl efa
          efo:f64[1,3,3] = broadcast_in_dim[
            broadcast_dimensions=()
            shape=(1, 3, 3)
          ] 0.0
          efp:bool[4] = lt blp 0
          efq:i64[4] = add blp 1
          efr:i64[4] = select_n efp blp efq
          efs:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] efr
          eft:i32[4,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(4, 1)
          ] efs
          efu:f64[400,1,3,3] = broadcast_in_dim[
            broadcast_dimensions=(1, 2, 3)
            shape=(400, 1, 3, 3)
          ] efo
          efv:f64[400,1,3,3] = scatter-add[
            dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2, 3), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
            indices_are_sorted=False
            mode=GatherScatterMode.FILL_OR_DROP
            unique_indices=False
            update_consts=()
            update_jaxpr=jaxpr1
          ] efu eft efb
          efw:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0.0
          efx:bool[4] = lt blp 0
          efy:i64[4] = add blp 1
          efz:i64[4] = select_n efx blp efy
          ega:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] efz
          egb:i32[4,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(4, 1)
          ] ega
          egc:f64[1] = scatter-add[
            dimension_numbers=ScatterDimensionNumbers(update_window_dims=(), inserted_window_dims=(0,), scatter_dims_to_operand_dims=(0,))
            indices_are_sorted=False
            mode=GatherScatterMode.FILL_OR_DROP
            unique_indices=False
            update_consts=()
            update_jaxpr=jaxpr1
          ] efw egb efc
          egd:f64[400,1,3] = add efd efn
          ege:f64[400,1,3,3] = add efe efv
          egf:f64[1] = add eff egc
          egg:f64[400,13,3] = concatenate[dimension=1] egd efa edx ecu
          egh:f64[400,13,3,3] = concatenate[dimension=1] ege efb edy ecv
          egi:f64[13] = concatenate[dimension=0] egf efc edz ecw
          egj:f64[400,13,3] = pjit[name=_take jaxpr=_take3] egg blq
          egk:f64[400,13,3,3] = pjit[
            name=_take
            jaxpr={ lambda ; egl:f64[400,13,3,3] egm:i64[13]. let
                egn:i64[13] = pjit[name=remainder jaxpr=remainder3] egm 13
                ego:i64[13,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(13, 1)
                ] egn
                egp:f64[400,13,3,3] = gather[
                  dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 2, 3), collapsed_slice_dims=(1,), start_index_map=(1,))
                  fill_value=None
                  indices_are_sorted=False
                  mode=GatherScatterMode.PROMISE_IN_BOUNDS
                  slice_sizes=(400, 1, 3, 3)
                  unique_indices=False
                ] egl ego
              in (egp,) }
          ] egh blr
          egq:f64[13] = pjit[
            name=_take
            jaxpr={ lambda ; egr:f64[13] egs:i64[13]. let
                egt:i64[13] = pjit[
                  name=remainder
                  jaxpr={ lambda ; gr:i64[13] gs:i64[]. let
                      gt:bool[] = eq gs 0
                      gu:i64[] = pjit[name=_where jaxpr=_where6] gt 1 gs
                      gv:i64[13] = rem gr gu
                      gw:bool[13] = ne gv 0
                      gx:bool[13] = lt gv 0
                      gy:bool[] = lt gu 0
                      gz:bool[13] = ne gx gy
                      ha:bool[13] = and gz gw
                      hb:i64[13] = add gv gu
                      hc:i64[13] = select_n ha gv hb
                    in (hc,) }
                ] egs 13
                egu:i64[13,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(13, 1)
                ] egt
                egv:f64[13] = gather[
                  dimension_numbers=GatherDimensionNumbers(offset_dims=(), collapsed_slice_dims=(0,), start_index_map=(0,))
                  fill_value=None
                  indices_are_sorted=False
                  mode=GatherScatterMode.PROMISE_IN_BOUNDS
                  slice_sizes=(1,)
                  unique_indices=False
                ] egr egu
              in (egv,) }
          ] egi bls
          egw:f64[400,18,3] = pjit[
            name=_take
            jaxpr={ lambda ; egx:f64[400,13,3] egy:i64[18]. let
                egz:i64[18] = pjit[name=remainder jaxpr=remainder8] egy 13
                eha:i64[18,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(18, 1)
                ] egz
                ehb:f64[400,18,3] = gather[
                  dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 2), collapsed_slice_dims=(1,), start_index_map=(1,))
                  fill_value=None
                  indices_are_sorted=False
                  mode=GatherScatterMode.PROMISE_IN_BOUNDS
                  slice_sizes=(400, 1, 3)
                  unique_indices=False
                ] egx eha
              in (ehb,) }
          ] egj blt
          ehc:f64[400,18,3,3] = pjit[
            name=_take
            jaxpr={ lambda ; ehd:f64[400,13,3,3] ehe:i64[18]. let
                ehf:i64[18] = pjit[name=remainder jaxpr=remainder8] ehe 13
                ehg:i64[18,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(18, 1)
                ] ehf
                ehh:f64[400,18,3,3] = gather[
                  dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 2, 3), collapsed_slice_dims=(1,), start_index_map=(1,))
                  fill_value=None
                  indices_are_sorted=False
                  mode=GatherScatterMode.PROMISE_IN_BOUNDS
                  slice_sizes=(400, 1, 3, 3)
                  unique_indices=False
                ] ehd ehg
              in (ehh,) }
          ] egk blt
          ehi:f64[18] = pjit[
            name=_take
            jaxpr={ lambda ; ehj:f64[13] ehk:i64[18]. let
                ehl:i64[18] = pjit[
                  name=remainder
                  jaxpr={ lambda ; sl:i64[18] sm:i64[]. let
                      sn:bool[] = eq sm 0
                      so:i64[] = pjit[name=_where jaxpr=_where7] sn 1 sm
                      sp:i64[18] = rem sl so
                      sq:bool[18] = ne sp 0
                      sr:bool[18] = lt sp 0
                      ss:bool[] = lt so 0
                      st:bool[18] = ne sr ss
                      su:bool[18] = and st sq
                      sv:i64[18] = add sp so
                      sw:i64[18] = select_n su sp sv
                    in (sw,) }
                ] ehk 13
                ehm:i64[18,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(18, 1)
                ] ehl
                ehn:f64[18] = gather[
                  dimension_numbers=GatherDimensionNumbers(offset_dims=(), collapsed_slice_dims=(0,), start_index_map=(0,))
                  fill_value=None
                  indices_are_sorted=False
                  mode=GatherScatterMode.PROMISE_IN_BOUNDS
                  slice_sizes=(1,)
                  unique_indices=False
                ] ehj ehm
              in (ehn,) }
          ] egq blt
          eho:f64[400,18,3] = dot_general[
            dimension_numbers=(([3], [2]), ([0, 1], [0, 1]))
            preferred_element_type=float64
          ] ehc dxe
          ehp:f64[400,18,3] = pjit[name=cross jaxpr=cross5] egw dyd
          ehq:f64[400,18,3] = add eho ehp
          ehr:f64[18,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(18, 1)
          ] ehi
          ehs:f64[1,18,1] = broadcast_in_dim[
            broadcast_dimensions=(1, 2)
            shape=(1, 18, 1)
          ] ehr
          eht:f64[400,18,3] = mul ehs dyd
          ehu:f64[400,18,3] = pjit[name=cross jaxpr=cross5] egw dxe
          ehv:f64[400,18,3] = sub eht ehu
          ehw:f64[400,18,18] = dot_general[
            dimension_numbers=(([2], [2]), ([0], [0]))
            preferred_element_type=float64
          ] dyd ehv
          ehx:f64[400,18,18] = dot_general[
            dimension_numbers=(([2], [2]), ([0], [0]))
            preferred_element_type=float64
          ] dxe ehq
          ehy:f64[400,18,18] = add ehw ehx
          ehz:f64[400,18,18] = transpose[permutation=(0, 2, 1)] ehy
          eia:f64[18,18] = broadcast_in_dim[
            broadcast_dimensions=()
            shape=(18, 18)
          ] 0.0
          eib:bool[132] = lt blu 0
          eic:i64[132] = add blu 18
          eid:i64[132] = select_n eib blu eic
          eie:bool[132] = lt blv 0
          eif:i64[132] = add blv 18
          eig:i64[132] = select_n eie blv eif
          eih:i32[132] = convert_element_type[new_dtype=int32 weak_type=False] eid
          eii:i32[132] = convert_element_type[new_dtype=int32 weak_type=False] eig
          eij:i32[132,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(132, 1)
          ] eih
          eik:i32[132,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(132, 1)
          ] eii
          eil:i32[132,2] = concatenate[dimension=1] eij eik
          eim:f64[132] = broadcast_in_dim[broadcast_dimensions=() shape=(132,)] 1.0
          ein:f64[18,18] = scatter[
            dimension_numbers=ScatterDimensionNumbers(update_window_dims=(), inserted_window_dims=(0, 1), scatter_dims_to_operand_dims=(0, 1))
            indices_are_sorted=False
            mode=GatherScatterMode.FILL_OR_DROP
            unique_indices=False
            update_consts=()
            update_jaxpr=None
          ] eia eil eim
          eio:f64[1,18,18] = broadcast_in_dim[
            broadcast_dimensions=(1, 2)
            shape=(1, 18, 18)
          ] ein
          eip:f64[400,18,18] = mul ehz eio
          eiq:f64[400,18,18] = pjit[
            name=tril
            jaxpr={ lambda ; eir:f64[400,18,18]. let
                eis:i32[18,18] = iota[dimension=0 dtype=int32 shape=(18, 18)] 
                eit:i32[18,18] = add eis 0
                eiu:i32[18,18] = iota[dimension=1 dtype=int32 shape=(18, 18)] 
                eiv:bool[18,18] = ge eit eiu
                eiw:f64[18,18] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(18, 18)
                ] 0.0
                eix:bool[400,18,18] = broadcast_in_dim[
                  broadcast_dimensions=(1, 2)
                  shape=(400, 18, 18)
                ] eiv
                eiy:f64[400,18,18] = broadcast_in_dim[
                  broadcast_dimensions=(1, 2)
                  shape=(400, 18, 18)
                ] eiw
                eiz:f64[400,18,18] = select_n eix eiy eir
              in (eiz,) }
          ] eip
          eja:f64[400,18,18] = pjit[
            name=tril
            jaxpr={ lambda ; ejb:f64[400,18,18]. let
                ejc:i32[18,18] = iota[dimension=0 dtype=int32 shape=(18, 18)] 
                ejd:i32[18,18] = add ejc -1
                eje:i32[18,18] = iota[dimension=1 dtype=int32 shape=(18, 18)] 
                ejf:bool[18,18] = ge ejd eje
                ejg:f64[18,18] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(18, 18)
                ] 0.0
                ejh:bool[400,18,18] = broadcast_in_dim[
                  broadcast_dimensions=(1, 2)
                  shape=(400, 18, 18)
                ] ejf
                eji:f64[400,18,18] = broadcast_in_dim[
                  broadcast_dimensions=(1, 2)
                  shape=(400, 18, 18)
                ] ejg
                ejj:f64[400,18,18] = select_n ejh eji ejb
              in (ejj,) }
          ] eip
          ejk:f64[400,18,18] = transpose[permutation=(0, 2, 1)] eja
          ejl:f64[400,18,18] = add eiq ejk
          ejm:f64[18,18] = pjit[name=_diag jaxpr=_diag] blw
          ejn:f64[1,18,18] = broadcast_in_dim[
            broadcast_dimensions=(1, 2)
            shape=(1, 18, 18)
          ] ejm
          ejo:f64[400,18,18] = add ejl ejn
          ejp:f64[18] = broadcast_in_dim[broadcast_dimensions=() shape=(18,)] 0.0
          ejq:f64[6] = broadcast_in_dim[broadcast_dimensions=() shape=(6,)] 0.0
          ejr:f64[400,12] = slice[
            limit_indices=(400, 19)
            start_indices=(0, 7)
            strides=None
          ] brk
          ejs:f64[12] = slice[
            limit_indices=(18,)
            start_indices=(6,)
            strides=None
          ] blx
          ejt:f64[400,12] = neg ejr
          eju:f64[1,12] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 12)
          ] ejs
          ejv:f64[400,12] = mul ejt eju
          ejw:f64[400,6] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(400, 6)
          ] ejq
          ejx:f64[400,18] = concatenate[dimension=1] ejw ejv
          ejy:f64[1,18] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 18)
          ] bly
          ejz:f64[400,18] = mul ejy btj
          eka:f64[400,18] = sub ejx ejz
          ekb:f64[400,6,3] = slice[
            limit_indices=(400, 6, 3)
            start_indices=(0, 0, 0)
            strides=None
          ] ecs
          ekc:f64[400,6,3] = slice[
            limit_indices=(400, 6, 3)
            start_indices=(0, 0, 0)
            strides=None
          ] ect
          ekd:f64[400,6] = slice[
            limit_indices=(400, 6)
            start_indices=(0, 0)
            strides=None
          ] btj
          eke:i64[6] = slice[limit_indices=(6,) start_indices=(0,) strides=None] blz
          ekf:f64[1,1,1,3] = reshape[dimensions=None new_sizes=(1, 1, 1, 3)] bma
          ekg:f64[1,3] = reshape[dimensions=None new_sizes=(1, 3)] ekf
          ekh:f64[1,3] = neg ekg
          eki:f64[1,3] = broadcast_in_dim[broadcast_dimensions=() shape=(1, 3)] 0.0
          ekj:f64[400,6,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(400, 6, 1)
          ] ekd
          ekk:f64[400,6,3] = mul ekb ekj
          ekl:f64[400,6,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(400, 6, 1)
          ] ekd
          ekm:f64[400,6,3] = mul ekc ekl
          ekn:bool[6] = lt eke 0
          eko:i64[6] = add eke 1
          ekp:i64[6] = select_n ekn eke eko
          ekq:i32[6] = convert_element_type[new_dtype=int32 weak_type=False] ekp
          ekr:i32[6,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(6, 1)
          ] ekq
          eks:f64[400,1,3] = broadcast_in_dim[
            broadcast_dimensions=(1, 2)
            shape=(400, 1, 3)
          ] eki
          ekt:f64[400,1,3] = scatter-add[
            dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
            indices_are_sorted=False
            mode=GatherScatterMode.FILL_OR_DROP
            unique_indices=False
            update_consts=()
            update_jaxpr=jaxpr1
          ] eks ekr ekk
          eku:bool[6] = lt eke 0
          ekv:i64[6] = add eke 1
          ekw:i64[6] = select_n eku eke ekv
          ekx:i32[6] = convert_element_type[new_dtype=int32 weak_type=False] ekw
          eky:i32[6,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(6, 1)
          ] ekx
          ekz:f64[400,1,3] = broadcast_in_dim[
            broadcast_dimensions=(1, 2)
            shape=(400, 1, 3)
          ] ekh
          ela:f64[400,1,3] = scatter-add[
            dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
            indices_are_sorted=False
            mode=GatherScatterMode.FILL_OR_DROP
            unique_indices=False
            update_consts=()
            update_jaxpr=jaxpr1
          ] ekz eky ekm
          elb:f64[400,4,3] = pjit[name=_take jaxpr=_take7] ecs bmb
          elc:f64[400,4,3] = pjit[name=_take jaxpr=_take7] ect bmc
          eld:f64[400,4] = pjit[name=_take jaxpr=_take11] btj bmd
          ele:i64[4] = pjit[name=_take jaxpr=_take8] blz bme
          elf:f64[400,4,3] = pjit[name=_take jaxpr=_take2] ekt bmf
          elg:f64[400,4,3] = pjit[name=_take jaxpr=_take2] ela bmg
          elh:f64[400,4,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(400, 4, 1)
          ] eld
          eli:f64[400,4,3] = mul elb elh
          elj:f64[400,4,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(400, 4, 1)
          ] eld
          elk:f64[400,4,3] = mul elc elj
          ell:bool[4] = lt ele 0
          elm:i64[4] = add ele 4
          eln:i64[4] = select_n ell ele elm
          elo:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] eln
          elp:i32[4,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(4, 1)
          ] elo
          elq:f64[400,4,3] = scatter-add[
            dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
            indices_are_sorted=False
            mode=GatherScatterMode.FILL_OR_DROP
            unique_indices=False
            update_consts=()
            update_jaxpr=jaxpr1
          ] elf elp eli
          elr:bool[4] = lt ele 0
          els:i64[4] = add ele 4
          elt:i64[4] = select_n elr ele els
          elu:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] elt
          elv:i32[4,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(4, 1)
          ] elu
          elw:f64[400,4,3] = scatter-add[
            dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
            indices_are_sorted=False
            mode=GatherScatterMode.FILL_OR_DROP
            unique_indices=False
            update_consts=()
            update_jaxpr=jaxpr1
          ] elg elv elk
          elx:f64[400,4,3] = pjit[name=_take jaxpr=_take7] ecs bmh
          ely:f64[400,4,3] = pjit[name=_take jaxpr=_take7] ect bmi
          elz:f64[400,4] = pjit[name=_take jaxpr=_take11] btj bmj
          ema:i64[4] = pjit[name=_take jaxpr=_take8] blz bmk
          emb:f64[400,4,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(400, 4, 1)
          ] elz
          emc:f64[400,4,3] = mul elx emb
          emd:f64[400,4,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(400, 4, 1)
          ] elz
          eme:f64[400,4,3] = mul ely emd
          emf:bool[4] = lt ema 0
          emg:i64[4] = add ema 4
          emh:i64[4] = select_n emf ema emg
          emi:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] emh
          emj:i32[4,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(4, 1)
          ] emi
          emk:f64[400,4,3] = scatter-add[
            dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
            indices_are_sorted=False
            mode=GatherScatterMode.FILL_OR_DROP
            unique_indices=False
            update_consts=()
            update_jaxpr=jaxpr1
          ] elq emj emc
          eml:bool[4] = lt ema 0
          emm:i64[4] = add ema 4
          emn:i64[4] = select_n eml ema emm
          emo:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] emn
          emp:i32[4,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(4, 1)
          ] emo
          emq:f64[400,4,3] = scatter-add[
            dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
            indices_are_sorted=False
            mode=GatherScatterMode.FILL_OR_DROP
            unique_indices=False
            update_consts=()
            update_jaxpr=jaxpr1
          ] elw emp eme
          emr:f64[400,4,3] = pjit[name=_take jaxpr=_take7] ecs bml
          ems:f64[400,4,3] = pjit[name=_take jaxpr=_take7] ect bmm
          emt:f64[400,4] = pjit[name=_take jaxpr=_take11] btj bmn
          emu:i64[4] = pjit[name=_take jaxpr=_take8] blz bmo
          emv:f64[400,4,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(400, 4, 1)
          ] emt
          emw:f64[400,4,3] = mul emr emv
          emx:f64[400,4,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1)
            shape=(400, 4, 1)
          ] emt
          emy:f64[400,4,3] = mul ems emx
          emz:bool[4] = lt emu 0
          ena:i64[4] = add emu 4
          enb:i64[4] = select_n emz emu ena
          enc:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] enb
          end:i32[4,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(4, 1)
          ] enc
          ene:f64[400,4,3] = scatter-add[
            dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
            indices_are_sorted=False
            mode=GatherScatterMode.FILL_OR_DROP
            unique_indices=False
            update_consts=()
            update_jaxpr=jaxpr1
          ] emk end emw
          enf:bool[4] = lt emu 0
          eng:i64[4] = add emu 4
          enh:i64[4] = select_n enf emu eng
          eni:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] enh
          enj:i32[4,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(4, 1)
          ] eni
          enk:f64[400,4,3] = scatter-add[
            dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
            indices_are_sorted=False
            mode=GatherScatterMode.FILL_OR_DROP
            unique_indices=False
            update_consts=()
            update_jaxpr=jaxpr1
          ] emq enj emy
          enl:f64[400,13,3] = concatenate[dimension=1] ekt elq emk ene
          enm:f64[400,13,3] = concatenate[dimension=1] ela elw emq enk
          enn:f64[400,13,3] = pjit[name=_take jaxpr=_take3] enl bmp
          eno:f64[400,13,3] = pjit[name=_take jaxpr=_take3] enm bmq
          enp:f64[400,13,3] = dot_general[
            dimension_numbers=(([3], [2]), ([0, 1], [0, 1]))
            preferred_element_type=float64
          ] dgm enn
          enq:f64[400,13,3] = pjit[name=cross jaxpr=cross8] dgp eno
          enr:f64[400,13,3] = add enp enq
          ens:f64[13,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(13, 1)
          ] bkh
          ent:f64[1,13,1] = broadcast_in_dim[
            broadcast_dimensions=(1, 2)
            shape=(1, 13, 1)
          ] ens
          enu:f64[400,13,3] = mul ent eno
          env:f64[400,13,3] = pjit[name=cross jaxpr=cross8] dgp enn
          enw:f64[400,13,3] = sub enu env
          enx:f64[400,13,3] = dot_general[
            dimension_numbers=(([3], [2]), ([0, 1], [0, 1]))
            preferred_element_type=float64
          ] dgm eay
          eny:f64[400,13,3] = pjit[name=cross jaxpr=cross8] dgp eaz
          enz:f64[400,13,3] = add enx eny
          eoa:f64[13,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(13, 1)
          ] bkh
          eob:f64[1,13,1] = broadcast_in_dim[
            broadcast_dimensions=(1, 2)
            shape=(1, 13, 1)
          ] eoa
          eoc:f64[400,13,3] = mul eob eaz
          eod:f64[400,13,3] = pjit[name=cross jaxpr=cross8] dgp eay
          eoe:f64[400,13,3] = sub eoc eod
          eof:f64[400,13,3] = pjit[name=cross jaxpr=cross8] eay eoe
          eog:f64[400,13,3] = pjit[name=cross jaxpr=cross8] eay enz
          eoh:f64[400,13,3] = pjit[name=cross jaxpr=cross8] eaz eoe
          eoi:f64[400,13,3] = add eog eoh
          eoj:f64[400,13,3] = add enr eoi
          eok:f64[400,13,3] = add enw eof
          eol:f64[400,4,3] = pjit[name=_take jaxpr=_take] eoj bmr
          eom:f64[400,4,3] = pjit[name=_take jaxpr=_take] eok bms
          eon:f64[400,4,3] = pjit[name=_take jaxpr=_take] eoj bmt
          eoo:f64[400,4,3] = pjit[name=_take jaxpr=_take] eok bmu
          eop:f64[4,3] = broadcast_in_dim[broadcast_dimensions=() shape=(4, 3)] 0.0
          eoq:bool[4] = lt bmv 0
          eor:i64[4] = add bmv 4
          eos:i64[4] = select_n eoq bmv eor
          eot:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] eos
          eou:i32[4,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(4, 1)
          ] eot
          eov:f64[400,4,3] = broadcast_in_dim[
            broadcast_dimensions=(1, 2)
            shape=(400, 4, 3)
          ] eop
          eow:f64[400,4,3] = scatter-add[
            dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
            indices_are_sorted=False
            mode=GatherScatterMode.FILL_OR_DROP
            unique_indices=False
            update_consts=()
            update_jaxpr=jaxpr1
          ] eov eou eol
          eox:f64[4,3] = broadcast_in_dim[broadcast_dimensions=() shape=(4, 3)] 0.0
          eoy:bool[4] = lt bmv 0
          eoz:i64[4] = add bmv 4
          epa:i64[4] = select_n eoy bmv eoz
          epb:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] epa
          epc:i32[4,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(4, 1)
          ] epb
          epd:f64[400,4,3] = broadcast_in_dim[
            broadcast_dimensions=(1, 2)
            shape=(400, 4, 3)
          ] eox
          epe:f64[400,4,3] = scatter-add[
            dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
            indices_are_sorted=False
            mode=GatherScatterMode.FILL_OR_DROP
            unique_indices=False
            update_consts=()
            update_jaxpr=jaxpr1
          ] epd epc eom
          epf:f64[400,4,3] = add eon eow
          epg:f64[400,4,3] = add eoo epe
          eph:f64[400,4,3] = pjit[name=_take jaxpr=_take] eoj bmw
          epi:f64[400,4,3] = pjit[name=_take jaxpr=_take] eok bmx
          epj:f64[4,3] = broadcast_in_dim[broadcast_dimensions=() shape=(4, 3)] 0.0
          epk:bool[4] = lt bmy 0
          epl:i64[4] = add bmy 4
          epm:i64[4] = select_n epk bmy epl
          epn:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] epm
          epo:i32[4,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(4, 1)
          ] epn
          epp:f64[400,4,3] = broadcast_in_dim[
            broadcast_dimensions=(1, 2)
            shape=(400, 4, 3)
          ] epj
          epq:f64[400,4,3] = scatter-add[
            dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
            indices_are_sorted=False
            mode=GatherScatterMode.FILL_OR_DROP
            unique_indices=False
            update_consts=()
            update_jaxpr=jaxpr1
          ] epp epo epf
          epr:f64[4,3] = broadcast_in_dim[broadcast_dimensions=() shape=(4, 3)] 0.0
          eps:bool[4] = lt bmy 0
          ept:i64[4] = add bmy 4
          epu:i64[4] = select_n eps bmy ept
          epv:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] epu
          epw:i32[4,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(4, 1)
          ] epv
          epx:f64[400,4,3] = broadcast_in_dim[
            broadcast_dimensions=(1, 2)
            shape=(400, 4, 3)
          ] epr
          epy:f64[400,4,3] = scatter-add[
            dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
            indices_are_sorted=False
            mode=GatherScatterMode.FILL_OR_DROP
            unique_indices=False
            update_consts=()
            update_jaxpr=jaxpr1
          ] epx epw epg
          epz:f64[400,4,3] = add eph epq
          eqa:f64[400,4,3] = add epi epy
          eqb:f64[400,1,3] = slice[
            limit_indices=(400, 1, 3)
            start_indices=(0, 0, 0)
            strides=None
          ] eoj
          eqc:f64[400,1,3] = slice[
            limit_indices=(400, 1, 3)
            start_indices=(0, 0, 0)
            strides=None
          ] eok
          eqd:f64[1,3] = broadcast_in_dim[broadcast_dimensions=() shape=(1, 3)] 0.0
          eqe:bool[4] = lt bmz 0
          eqf:i64[4] = add bmz 1
          eqg:i64[4] = select_n eqe bmz eqf
          eqh:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] eqg
          eqi:i32[4,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(4, 1)
          ] eqh
          eqj:f64[400,1,3] = broadcast_in_dim[
            broadcast_dimensions=(1, 2)
            shape=(400, 1, 3)
          ] eqd
          eqk:f64[400,1,3] = scatter-add[
            dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
            indices_are_sorted=False
            mode=GatherScatterMode.FILL_OR_DROP
            unique_indices=False
            update_consts=()
            update_jaxpr=jaxpr1
          ] eqj eqi epz
          eql:f64[1,3] = broadcast_in_dim[broadcast_dimensions=() shape=(1, 3)] 0.0
          eqm:bool[4] = lt bmz 0
          eqn:i64[4] = add bmz 1
          eqo:i64[4] = select_n eqm bmz eqn
          eqp:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] eqo
          eqq:i32[4,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(4, 1)
          ] eqp
          eqr:f64[400,1,3] = broadcast_in_dim[
            broadcast_dimensions=(1, 2)
            shape=(400, 1, 3)
          ] eql
          eqs:f64[400,1,3] = scatter-add[
            dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 2), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
            indices_are_sorted=False
            mode=GatherScatterMode.FILL_OR_DROP
            unique_indices=False
            update_consts=()
            update_jaxpr=jaxpr1
          ] eqr eqq eqa
          eqt:f64[400,1,3] = add eqb eqk
          equ:f64[400,1,3] = add eqc eqs
          eqv:f64[400,13,3] = concatenate[dimension=1] eqt epz epf eol
          eqw:f64[400,13,3] = concatenate[dimension=1] equ eqa epg eom
          eqx:f64[400,13,3] = pjit[name=_take jaxpr=_take3] eqv bna
          eqy:f64[400,13,3] = pjit[name=_take jaxpr=_take3] eqw bnb
          eqz:f64[400,18,3] = pjit[name=_take jaxpr=_take6] eqx bnc
          era:f64[400,18,3] = pjit[name=_take jaxpr=_take6] eqy bnc
          erb:f64[400,18] = dot_general[
            dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
            preferred_element_type=float64
          ] dyd era
          erc:f64[400,18] = dot_general[
            dimension_numbers=(([2], [2]), ([0, 1], [0, 1]))
            preferred_element_type=float64
          ] dxe eqz
          erd:f64[400,18] = add erb erc
          ere:f64[400,18] = sub eka erd
          erf:f64[1,18] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 18)
          ] ejp
          erg:f64[400,18] = add ere erf
          erh:f64[400,19] eri:f64[400,18] _:f64[400,18,18] _:f64[400,18] = scan[
            _split_transpose=False
            jaxpr={ lambda ; erj:i64[4] erk:f64[400,36] erl:f64[36,2] erm:f64[400,9]
                ern:f64[4] ero:f64[] erp:f64[3] erq:f64[3] err:f64[3] ers:f64[] ert:f64[8]
                eru:f64[3] erv:f64[3] erw:f64[3] erx:i64[3] ery:f64[3] erz:f64[12]
                esa:i32[12] esb:i32[12] esc:f64[12,2] esd:f64[12] ese:f64[12] esf:f64[12]
                esg:f64[12] esh:f64[12,2] esi:f64[400,18] esj:f64[18] esk:f64[400,19]
                esl:f64[400,18] esm:f64[400,18,18] esn:f64[400,18]. let
                eso:f64[400,4] = slice[
                  limit_indices=(400, 7)
                  start_indices=(0, 3)
                  strides=None
                ] esk
                esp:f64[400,12] = slice[
                  limit_indices=(400, 19)
                  start_indices=(0, 7)
                  strides=None
                ] esk
                esq:f64[400,3] = slice[
                  limit_indices=(400, 3)
                  start_indices=(0, 0)
                  strides=None
                ] esl
                esr:f64[4] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] erj
                ess:f64[1,4] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 4)
                ] esr
                est:f64[400,4] = mul eso ess
                esu:f64[400,1] = slice[
                  limit_indices=(400, 1)
                  start_indices=(0, 0)
                  strides=None
                ] est
                esv:f64[400] = squeeze[dimensions=(1,)] esu
                esw:f64[400,3] = slice[
                  limit_indices=(400, 4)
                  start_indices=(0, 1)
                  strides=None
                ] est
                esx:f64[400] = dot_general[
                  dimension_numbers=(([1], [1]), ([0], [0]))
                  preferred_element_type=float64
                ] esw esq
                esy:f64[400,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(400, 1)
                ] esx
                esz:f64[400,3] = mul esy esw
                eta:f64[400,3] = mul 2.0 esz
                etb:f64[400] = mul esv esv
                etc:f64[400] = dot_general[
                  dimension_numbers=(([1], [1]), ([0], [0]))
                  preferred_element_type=float64
                ] esw esw
                etd:f64[400] = sub etb etc
                ete:f64[400,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(400, 1)
                ] etd
                etf:f64[400,3] = mul ete esq
                etg:f64[400,3] = add eta etf
                eth:f64[400] = mul 2.0 esv
                eti:f64[400,3] = pjit[name=cross jaxpr=cross] esw esq
                etj:f64[400,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(400, 1)
                ] eth
                etk:f64[400,3] = mul etj eti
                etl:f64[400,3] = add etg etk
                etm:f64[400,3] = slice[
                  limit_indices=(400, 6)
                  start_indices=(0, 3)
                  strides=None
                ] esl
                etn:f64[400,1] = slice[
                  limit_indices=(400, 1)
                  start_indices=(0, 0)
                  strides=None
                ] eso
                eto:f64[400] = squeeze[dimensions=(1,)] etn
                etp:f64[400,3] = slice[
                  limit_indices=(400, 4)
                  start_indices=(0, 1)
                  strides=None
                ] eso
                etq:f64[400] = dot_general[
                  dimension_numbers=(([1], [1]), ([0], [0]))
                  preferred_element_type=float64
                ] etp etm
                etr:f64[400,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(400, 1)
                ] etq
                ets:f64[400,3] = mul etr etp
                ett:f64[400,3] = mul 2.0 ets
                etu:f64[400] = mul eto eto
                etv:f64[400] = dot_general[
                  dimension_numbers=(([1], [1]), ([0], [0]))
                  preferred_element_type=float64
                ] etp etp
                etw:f64[400] = sub etu etv
                etx:f64[400,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(400, 1)
                ] etw
                ety:f64[400,3] = mul etx etm
                etz:f64[400,3] = add ett ety
                eua:f64[400] = mul 2.0 eto
                eub:f64[400,3] = pjit[name=cross jaxpr=cross] etp etm
                euc:f64[400,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(400, 1)
                ] eua
                eud:f64[400,3] = mul euc eub
                eue:f64[400,3] = add etz eud
                euf:f64[400,12] = slice[
                  limit_indices=(400, 18)
                  start_indices=(0, 6)
                  strides=None
                ] esl
                eug:f64[400,34] = concatenate[dimension=1] eso esp etl eue euf
                euh:f64[400,1] = slice[
                  limit_indices=(400, 35)
                  start_indices=(0, 34)
                  strides=None
                ] erk
                eui:f64[400] = squeeze[dimensions=(1,)] euh
                euj:f64[400,1] = slice[
                  limit_indices=(400, 36)
                  start_indices=(0, 35)
                  strides=None
                ] erk
                euk:f64[400] = squeeze[dimensions=(1,)] euj
                eul:f64[400,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(400, 1)
                ] eui
                eum:f64[400,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(400, 1)
                ] euk
                eun:f64[400,2] = concatenate[dimension=1] eul eum
                euo:f64[400,36] = concatenate[dimension=1] eug eun
                eup:f64[36,1] = slice[
                  limit_indices=(36, 1)
                  start_indices=(0, 0)
                  strides=None
                ] erl
                euq:f64[36] = squeeze[dimensions=(1,)] eup
                eur:f64[1,36] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 36)
                ] euq
                eus:f64[400,36] = sub euo eur
                eut:f64[400,36] = mul 2.0 eus
                euu:f64[36,1] = slice[
                  limit_indices=(36, 2)
                  start_indices=(0, 1)
                  strides=None
                ] erl
                euv:f64[36] = squeeze[dimensions=(1,)] euu
                euw:f64[36,1] = slice[
                  limit_indices=(36, 1)
                  start_indices=(0, 0)
                  strides=None
                ] erl
                eux:f64[36] = squeeze[dimensions=(1,)] euw
                euy:f64[36] = sub euv eux
                euz:f64[1,36] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 36)
                ] euy
                eva:f64[400,36] = div eut euz
                evb:f64[400,36] = sub eva 1.0
                evc:f64[400,36] = add evb 1.0
                evd:f64[36,1] = slice[
                  limit_indices=(36, 2)
                  start_indices=(0, 1)
                  strides=None
                ] erl
                eve:f64[36] = squeeze[dimensions=(1,)] evd
                evf:f64[36,1] = slice[
                  limit_indices=(36, 1)
                  start_indices=(0, 0)
                  strides=None
                ] erl
                evg:f64[36] = squeeze[dimensions=(1,)] evf
                evh:f64[36] = sub eve evg
                evi:f64[1,36] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 36)
                ] evh
                evj:f64[400,36] = mul evc evi
                evk:f64[400,36] = div evj 2.0
                evl:f64[36,1] = slice[
                  limit_indices=(36, 1)
                  start_indices=(0, 0)
                  strides=None
                ] erl
                evm:f64[36] = squeeze[dimensions=(1,)] evl
                evn:f64[1,36] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 36)
                ] evm
                evo:f64[400,36] = add evk evn
                evp:f64[400,1] = slice[
                  limit_indices=(400, 9)
                  start_indices=(0, 8)
                  strides=None
                ] erm
                evq:f64[400] = squeeze[dimensions=(1,)] evp
                evr:f64[] = mul ero 1.0
                evs:f64[400,1] = slice[
                  limit_indices=(400, 35)
                  start_indices=(0, 34)
                  strides=None
                ] evo
                evt:f64[400] = squeeze[dimensions=(1,)] evs
                evu:f64[400,1] = slice[
                  limit_indices=(400, 36)
                  start_indices=(0, 35)
                  strides=None
                ] evo
                evv:f64[400] = squeeze[dimensions=(1,)] evu
                evw:f64[400] = atan2 evv evt
                evx:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] ern
                evy:f64[] = squeeze[dimensions=(0,)] evx
                evz:f64[400] = div evw 6.283185307179586
                ewa:f64[400] = add evz 0.5
                ewb:f64[400] = add ewa evy
                ewc:f64[400] = pjit[name=remainder jaxpr=remainder9] ewb 1
                ewd:bool[400] = lt ewc 0.5
                ewe:bool[400] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(400,)
                ] False
                ewf:bool[400] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(400,)
                ] True
                ewg:bool[400] = select_n ewd ewe ewf
                ewh:f64[400] = div ewc 0.5
                ewi:f64[400] = sub ewc 0.5
                ewj:f64[400] = div ewi 0.5
                ewk:f64[400] = select_n ewg ewj ewh
                ewl:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] ern
                ewm:f64[] = squeeze[dimensions=(0,)] ewl
                ewn:f64[400] = div evw 6.283185307179586
                ewo:f64[400] = add ewn 0.5
                ewp:f64[400] = add ewo ewm
                ewq:f64[400] = pjit[name=remainder jaxpr=remainder9] ewp 1
                ewr:bool[400] = lt ewq 0.5
                ews:bool[400] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(400,)
                ] False
                ewt:bool[400] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(400,)
                ] True
                ewu:bool[400] = select_n ewr ews ewt
                ewv:f64[400] = div ewq 0.5
                eww:f64[400] = sub ewq 0.5
                ewx:f64[400] = div eww 0.5
                ewy:f64[400] = select_n ewu ewx ewv
                ewz:f64[1] = slice[
                  limit_indices=(3,)
                  start_indices=(2,)
                  strides=None
                ] ern
                exa:f64[] = squeeze[dimensions=(0,)] ewz
                exb:f64[400] = div evw 6.283185307179586
                exc:f64[400] = add exb 0.5
                exd:f64[400] = add exc exa
                exe:f64[400] = pjit[name=remainder jaxpr=remainder9] exd 1
                exf:bool[400] = lt exe 0.5
                exg:bool[400] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(400,)
                ] False
                exh:bool[400] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(400,)
                ] True
                exi:bool[400] = select_n exf exg exh
                exj:f64[400] = div exe 0.5
                exk:f64[400] = sub exe 0.5
                exl:f64[400] = div exk 0.5
                exm:f64[400] = select_n exi exl exj
                exn:f64[1] = slice[
                  limit_indices=(4,)
                  start_indices=(3,)
                  strides=None
                ] ern
                exo:f64[] = squeeze[dimensions=(0,)] exn
                exp:f64[400] = div evw 6.283185307179586
                exq:f64[400] = add exp 0.5
                exr:f64[400] = add exq exo
                exs:f64[400] = pjit[name=remainder jaxpr=remainder9] exr 1
                ext:bool[400] = lt exs 0.5
                exu:bool[400] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(400,)
                ] False
                exv:bool[400] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(400,)
                ] True
                exw:bool[400] = select_n ext exu exv
                exx:f64[400] = div exs 0.5
                exy:f64[400] = sub exs 0.5
                exz:f64[400] = div exy 0.5
                eya:f64[400] = select_n exw exz exx
                eyb:f64[8] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(8,)
                ] 0.0
                eyc:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] erp
                eyd:f64[] = squeeze[dimensions=(0,)] eyc
                eye:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] erq
                eyf:f64[] = squeeze[dimensions=(0,)] eye
                eyg:f64[] = select_n True eyf eyd
                eyh:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] erp
                eyi:f64[] = squeeze[dimensions=(0,)] eyh
                eyj:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] err
                eyk:f64[] = squeeze[dimensions=(0,)] eyj
                eyl:f64[] = select_n True eyk eyi
                eym:f64[] = mul 0.0 0.25
                eyn:f64[] = atan2 eyl eyg
                eyo:f64[] = add eyn eym
                eyp:f64[] = cos eyo
                eyq:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] ers
                eyr:f64[] = mul eyq eyp
                eys:f64[] = sub eyr eyg
                eyt:f64[] = atan2 eyl eyg
                eyu:f64[] = add eyt eym
                eyv:f64[] = sin eyu
                eyw:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] ers
                eyx:f64[] = mul eyw eyv
                eyy:f64[] = sub eyx eyl
                eyz:f64[2] = slice[
                  limit_indices=(2,)
                  start_indices=(0,)
                  strides=None
                ] eyb
                eza:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] eyz
                ezb:f64[] = squeeze[dimensions=(0,)] eza
                ezc:f64[2] = slice[
                  limit_indices=(2,)
                  start_indices=(0,)
                  strides=None
                ] eyb
                ezd:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] ezc
                eze:f64[] = squeeze[dimensions=(0,)] ezd
                ezf:f64[] = mul evr 0.25
                ezg:f64[] = add ezf eys
                ezh:f64[] = add ezg ezb
                ezi:f64[] = add eyy eze
                ezj:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] ezh
                ezk:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] ezi
                ezl:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] 0.0
                ezm:f64[3] = concatenate[dimension=0] ezj ezk ezl
                ezn:f64[3] = neg ezm
                ezo:f64[8] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(8,)
                ] 0.0
                ezp:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] erp
                ezq:f64[] = squeeze[dimensions=(0,)] ezp
                ezr:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] erq
                ezs:f64[] = squeeze[dimensions=(0,)] ezr
                ezt:f64[] = select_n True ezs ezq
                ezu:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] erp
                ezv:f64[] = squeeze[dimensions=(0,)] ezu
                ezw:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] err
                ezx:f64[] = squeeze[dimensions=(0,)] ezw
                ezy:f64[] = select_n False ezx ezv
                ezz:f64[] = mul 0.0 0.25
                faa:f64[] = atan2 ezy ezt
                fab:f64[] = add faa ezz
                fac:f64[] = cos fab
                fad:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] ers
                fae:f64[] = mul fad fac
                faf:f64[] = sub fae ezt
                fag:f64[] = atan2 ezy ezt
                fah:f64[] = add fag ezz
                fai:f64[] = sin fah
                faj:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] ers
                fak:f64[] = mul faj fai
                fal:f64[] = sub fak ezy
                fam:f64[2] = slice[
                  limit_indices=(4,)
                  start_indices=(2,)
                  strides=None
                ] ezo
                fan:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] fam
                fao:f64[] = squeeze[dimensions=(0,)] fan
                fap:f64[2] = slice[
                  limit_indices=(4,)
                  start_indices=(2,)
                  strides=None
                ] ezo
                faq:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] fap
                far:f64[] = squeeze[dimensions=(0,)] faq
                fas:f64[] = mul evr 0.25
                fat:f64[] = add fas faf
                fau:f64[] = add fat fao
                fav:f64[] = add fal far
                faw:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] fau
                fax:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] fav
                fay:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] 0.0
                faz:f64[3] = concatenate[dimension=0] faw fax fay
                fba:f64[3] = neg faz
                fbb:f64[8] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(8,)
                ] 0.0
                fbc:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] erp
                fbd:f64[] = squeeze[dimensions=(0,)] fbc
                fbe:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] erq
                fbf:f64[] = squeeze[dimensions=(0,)] fbe
                fbg:f64[] = select_n False fbf fbd
                fbh:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] erp
                fbi:f64[] = squeeze[dimensions=(0,)] fbh
                fbj:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] err
                fbk:f64[] = squeeze[dimensions=(0,)] fbj
                fbl:f64[] = select_n True fbk fbi
                fbm:f64[] = mul 0.0 0.25
                fbn:f64[] = atan2 fbl fbg
                fbo:f64[] = add fbn fbm
                fbp:f64[] = cos fbo
                fbq:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] ers
                fbr:f64[] = mul fbq fbp
                fbs:f64[] = sub fbr fbg
                fbt:f64[] = atan2 fbl fbg
                fbu:f64[] = add fbt fbm
                fbv:f64[] = sin fbu
                fbw:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] ers
                fbx:f64[] = mul fbw fbv
                fby:f64[] = sub fbx fbl
                fbz:f64[2] = slice[
                  limit_indices=(6,)
                  start_indices=(4,)
                  strides=None
                ] fbb
                fca:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] fbz
                fcb:f64[] = squeeze[dimensions=(0,)] fca
                fcc:f64[2] = slice[
                  limit_indices=(6,)
                  start_indices=(4,)
                  strides=None
                ] fbb
                fcd:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] fcc
                fce:f64[] = squeeze[dimensions=(0,)] fcd
                fcf:f64[] = mul evr 0.25
                fcg:f64[] = add fcf fbs
                fch:f64[] = add fcg fcb
                fci:f64[] = add fby fce
                fcj:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] fch
                fck:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] fci
                fcl:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] 0.0
                fcm:f64[3] = concatenate[dimension=0] fcj fck fcl
                fcn:f64[3] = neg fcm
                fco:f64[8] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(8,)
                ] 0.0
                fcp:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] erp
                fcq:f64[] = squeeze[dimensions=(0,)] fcp
                fcr:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] erq
                fcs:f64[] = squeeze[dimensions=(0,)] fcr
                fct:f64[] = select_n False fcs fcq
                fcu:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] erp
                fcv:f64[] = squeeze[dimensions=(0,)] fcu
                fcw:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] err
                fcx:f64[] = squeeze[dimensions=(0,)] fcw
                fcy:f64[] = select_n False fcx fcv
                fcz:f64[] = mul 0.0 0.25
                fda:f64[] = atan2 fcy fct
                fdb:f64[] = add fda fcz
                fdc:f64[] = cos fdb
                fdd:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] ers
                fde:f64[] = mul fdd fdc
                fdf:f64[] = sub fde fct
                fdg:f64[] = atan2 fcy fct
                fdh:f64[] = add fdg fcz
                fdi:f64[] = sin fdh
                fdj:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] ers
                fdk:f64[] = mul fdj fdi
                fdl:f64[] = sub fdk fcy
                fdm:f64[2] = slice[
                  limit_indices=(8,)
                  start_indices=(6,)
                  strides=None
                ] fco
                fdn:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] fdm
                fdo:f64[] = squeeze[dimensions=(0,)] fdn
                fdp:f64[2] = slice[
                  limit_indices=(8,)
                  start_indices=(6,)
                  strides=None
                ] fco
                fdq:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] fdp
                fdr:f64[] = squeeze[dimensions=(0,)] fdq
                fds:f64[] = mul evr 0.25
                fdt:f64[] = add fds fdf
                fdu:f64[] = add fdt fdo
                fdv:f64[] = add fdl fdr
                fdw:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] fdu
                fdx:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] fdv
                fdy:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] 0.0
                fdz:f64[3] = concatenate[dimension=0] fdw fdx fdy
                fea:f64[3] = neg fdz
                feb:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] erp
                fec:f64[] = squeeze[dimensions=(0,)] feb
                fed:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] erq
                fee:f64[] = squeeze[dimensions=(0,)] fed
                fef:f64[] = select_n True fee fec
                feg:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] erp
                feh:f64[] = squeeze[dimensions=(0,)] feg
                fei:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] err
                fej:f64[] = squeeze[dimensions=(0,)] fei
                fek:f64[] = select_n True fej feh
                fel:f64[] = mul 0.0 0.25
                fem:f64[] = atan2 fek fef
                fen:f64[] = add fem fel
                feo:f64[] = cos fen
                fep:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] ers
                feq:f64[] = mul fep feo
                fer:f64[] = sub feq fef
                fes:f64[] = atan2 fek fef
                fet:f64[] = add fes fel
                feu:f64[] = sin fet
                fev:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] ers
                few:f64[] = mul fev feu
                fex:f64[] = sub few fek
                fey:f64[2] = slice[
                  limit_indices=(2,)
                  start_indices=(0,)
                  strides=None
                ] ert
                fez:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] fey
                ffa:f64[] = squeeze[dimensions=(0,)] fez
                ffb:f64[2] = slice[
                  limit_indices=(2,)
                  start_indices=(0,)
                  strides=None
                ] ert
                ffc:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] ffb
                ffd:f64[] = squeeze[dimensions=(0,)] ffc
                ffe:f64[] = mul evr 0.25
                fff:f64[] = add ffe fer
                ffg:f64[] = add fff ffa
                ffh:f64[] = add fex ffd
                ffi:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] ffg
                ffj:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] ffh
                ffk:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] 0.0
                ffl:f64[3] = concatenate[dimension=0] ffi ffj ffk
                ffm:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] erp
                ffn:f64[] = squeeze[dimensions=(0,)] ffm
                ffo:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] erq
                ffp:f64[] = squeeze[dimensions=(0,)] ffo
                ffq:f64[] = select_n True ffp ffn
                ffr:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] erp
                ffs:f64[] = squeeze[dimensions=(0,)] ffr
                fft:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] err
                ffu:f64[] = squeeze[dimensions=(0,)] fft
                ffv:f64[] = select_n False ffu ffs
                ffw:f64[] = mul 0.0 0.25
                ffx:f64[] = atan2 ffv ffq
                ffy:f64[] = add ffx ffw
                ffz:f64[] = cos ffy
                fga:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] ers
                fgb:f64[] = mul fga ffz
                fgc:f64[] = sub fgb ffq
                fgd:f64[] = atan2 ffv ffq
                fge:f64[] = add fgd ffw
                fgf:f64[] = sin fge
                fgg:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] ers
                fgh:f64[] = mul fgg fgf
                fgi:f64[] = sub fgh ffv
                fgj:f64[2] = slice[
                  limit_indices=(4,)
                  start_indices=(2,)
                  strides=None
                ] ert
                fgk:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] fgj
                fgl:f64[] = squeeze[dimensions=(0,)] fgk
                fgm:f64[2] = slice[
                  limit_indices=(4,)
                  start_indices=(2,)
                  strides=None
                ] ert
                fgn:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] fgm
                fgo:f64[] = squeeze[dimensions=(0,)] fgn
                fgp:f64[] = mul evr 0.25
                fgq:f64[] = add fgp fgc
                fgr:f64[] = add fgq fgl
                fgs:f64[] = add fgi fgo
                fgt:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] fgr
                fgu:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] fgs
                fgv:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] 0.0
                fgw:f64[3] = concatenate[dimension=0] fgt fgu fgv
                fgx:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] erp
                fgy:f64[] = squeeze[dimensions=(0,)] fgx
                fgz:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] erq
                fha:f64[] = squeeze[dimensions=(0,)] fgz
                fhb:f64[] = select_n False fha fgy
                fhc:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] erp
                fhd:f64[] = squeeze[dimensions=(0,)] fhc
                fhe:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] err
                fhf:f64[] = squeeze[dimensions=(0,)] fhe
                fhg:f64[] = select_n True fhf fhd
                fhh:f64[] = mul 0.0 0.25
                fhi:f64[] = atan2 fhg fhb
                fhj:f64[] = add fhi fhh
                fhk:f64[] = cos fhj
                fhl:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] ers
                fhm:f64[] = mul fhl fhk
                fhn:f64[] = sub fhm fhb
                fho:f64[] = atan2 fhg fhb
                fhp:f64[] = add fho fhh
                fhq:f64[] = sin fhp
                fhr:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] ers
                fhs:f64[] = mul fhr fhq
                fht:f64[] = sub fhs fhg
                fhu:f64[2] = slice[
                  limit_indices=(6,)
                  start_indices=(4,)
                  strides=None
                ] ert
                fhv:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] fhu
                fhw:f64[] = squeeze[dimensions=(0,)] fhv
                fhx:f64[2] = slice[
                  limit_indices=(6,)
                  start_indices=(4,)
                  strides=None
                ] ert
                fhy:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] fhx
                fhz:f64[] = squeeze[dimensions=(0,)] fhy
                fia:f64[] = mul evr 0.25
                fib:f64[] = add fia fhn
                fic:f64[] = add fib fhw
                fid:f64[] = add fht fhz
                fie:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] fic
                fif:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] fid
                fig:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] 0.0
                fih:f64[3] = concatenate[dimension=0] fie fif fig
                fii:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] erp
                fij:f64[] = squeeze[dimensions=(0,)] fii
                fik:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] erq
                fil:f64[] = squeeze[dimensions=(0,)] fik
                fim:f64[] = select_n False fil fij
                fin:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] erp
                fio:f64[] = squeeze[dimensions=(0,)] fin
                fip:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] err
                fiq:f64[] = squeeze[dimensions=(0,)] fip
                fir:f64[] = select_n False fiq fio
                fis:f64[] = mul 0.0 0.25
                fit:f64[] = atan2 fir fim
                fiu:f64[] = add fit fis
                fiv:f64[] = cos fiu
                fiw:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] ers
                fix:f64[] = mul fiw fiv
                fiy:f64[] = sub fix fim
                fiz:f64[] = atan2 fir fim
                fja:f64[] = add fiz fis
                fjb:f64[] = sin fja
                fjc:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] ers
                fjd:f64[] = mul fjc fjb
                fje:f64[] = sub fjd fir
                fjf:f64[2] = slice[
                  limit_indices=(8,)
                  start_indices=(6,)
                  strides=None
                ] ert
                fjg:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] fjf
                fjh:f64[] = squeeze[dimensions=(0,)] fjg
                fji:f64[2] = slice[
                  limit_indices=(8,)
                  start_indices=(6,)
                  strides=None
                ] ert
                fjj:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] fji
                fjk:f64[] = squeeze[dimensions=(0,)] fjj
                fjl:f64[] = mul evr 0.25
                fjm:f64[] = add fjl fiy
                fjn:f64[] = add fjm fjh
                fjo:f64[] = add fje fjk
                fjp:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] fjn
                fjq:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] fjo
                fjr:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] 0.0
                fjs:f64[3] = concatenate[dimension=0] fjp fjq fjr
                fjt:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] ezn
                fju:f64[] = squeeze[dimensions=(0,)] fjt
                fjv:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] ffl
                fjw:f64[] = squeeze[dimensions=(0,)] fjv
                fjx:f64[] = sub fjw fju
                fjy:f64[] = div fjx 6.283185307179586
                fjz:f64[400] = mul 6.283185307179586 ewk
                fka:f64[400] = mul 6.283185307179586 ewk
                fkb:f64[400] = sin fka
                fkc:f64[400] = sub fjz fkb
                fkd:f64[400] = mul fjy fkc
                fke:f64[400] = add fkd fju
                fkf:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] ezn
                fkg:f64[] = squeeze[dimensions=(0,)] fkf
                fkh:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] ffl
                fki:f64[] = squeeze[dimensions=(0,)] fkh
                fkj:f64[] = sub fki fkg
                fkk:f64[] = div fkj 6.283185307179586
                fkl:f64[400] = mul 6.283185307179586 ewk
                fkm:f64[400] = mul 6.283185307179586 ewk
                fkn:f64[400] = sin fkm
                fko:f64[400] = sub fkl fkn
                fkp:f64[400] = mul fkk fko
                fkq:f64[400] = add fkp fkg
                fkr:f64[400] = mul 6.283185307179586 ewk
                fks:f64[400] = cos fkr
                fkt:f64[400] = sub 1.0 fks
                fku:f64[400] = mul 0.045 fkt
                fkv:f64[400,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(400, 1)
                ] fke
                fkw:f64[400,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(400, 1)
                ] fkq
                fkx:f64[400,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(400, 1)
                ] fku
                fky:f64[400,3] = concatenate[dimension=1] fkv fkw fkx
                fkz:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] fba
                fla:f64[] = squeeze[dimensions=(0,)] fkz
                flb:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] fgw
                flc:f64[] = squeeze[dimensions=(0,)] flb
                fld:f64[] = sub flc fla
                fle:f64[] = div fld 6.283185307179586
                flf:f64[400] = mul 6.283185307179586 ewy
                flg:f64[400] = mul 6.283185307179586 ewy
                flh:f64[400] = sin flg
                fli:f64[400] = sub flf flh
                flj:f64[400] = mul fle fli
                flk:f64[400] = add flj fla
                fll:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] fba
                flm:f64[] = squeeze[dimensions=(0,)] fll
                fln:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] fgw
                flo:f64[] = squeeze[dimensions=(0,)] fln
                flp:f64[] = sub flo flm
                flq:f64[] = div flp 6.283185307179586
                flr:f64[400] = mul 6.283185307179586 ewy
                fls:f64[400] = mul 6.283185307179586 ewy
                flt:f64[400] = sin fls
                flu:f64[400] = sub flr flt
                flv:f64[400] = mul flq flu
                flw:f64[400] = add flv flm
                flx:f64[400] = mul 6.283185307179586 ewy
                fly:f64[400] = cos flx
                flz:f64[400] = sub 1.0 fly
                fma:f64[400] = mul 0.045 flz
                fmb:f64[400,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(400, 1)
                ] flk
                fmc:f64[400,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(400, 1)
                ] flw
                fmd:f64[400,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(400, 1)
                ] fma
                fme:f64[400,3] = concatenate[dimension=1] fmb fmc fmd
                fmf:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] fcn
                fmg:f64[] = squeeze[dimensions=(0,)] fmf
                fmh:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] fih
                fmi:f64[] = squeeze[dimensions=(0,)] fmh
                fmj:f64[] = sub fmi fmg
                fmk:f64[] = div fmj 6.283185307179586
                fml:f64[400] = mul 6.283185307179586 exm
                fmm:f64[400] = mul 6.283185307179586 exm
                fmn:f64[400] = sin fmm
                fmo:f64[400] = sub fml fmn
                fmp:f64[400] = mul fmk fmo
                fmq:f64[400] = add fmp fmg
                fmr:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] fcn
                fms:f64[] = squeeze[dimensions=(0,)] fmr
                fmt:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] fih
                fmu:f64[] = squeeze[dimensions=(0,)] fmt
                fmv:f64[] = sub fmu fms
                fmw:f64[] = div fmv 6.283185307179586
                fmx:f64[400] = mul 6.283185307179586 exm
                fmy:f64[400] = mul 6.283185307179586 exm
                fmz:f64[400] = sin fmy
                fna:f64[400] = sub fmx fmz
                fnb:f64[400] = mul fmw fna
                fnc:f64[400] = add fnb fms
                fnd:f64[400] = mul 6.283185307179586 exm
                fne:f64[400] = cos fnd
                fnf:f64[400] = sub 1.0 fne
                fng:f64[400] = mul 0.045 fnf
                fnh:f64[400,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(400, 1)
                ] fmq
                fni:f64[400,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(400, 1)
                ] fnc
                fnj:f64[400,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(400, 1)
                ] fng
                fnk:f64[400,3] = concatenate[dimension=1] fnh fni fnj
                fnl:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] fea
                fnm:f64[] = squeeze[dimensions=(0,)] fnl
                fnn:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] fjs
                fno:f64[] = squeeze[dimensions=(0,)] fnn
                fnp:f64[] = sub fno fnm
                fnq:f64[] = div fnp 6.283185307179586
                fnr:f64[400] = mul 6.283185307179586 eya
                fns:f64[400] = mul 6.283185307179586 eya
                fnt:f64[400] = sin fns
                fnu:f64[400] = sub fnr fnt
                fnv:f64[400] = mul fnq fnu
                fnw:f64[400] = add fnv fnm
                fnx:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] fea
                fny:f64[] = squeeze[dimensions=(0,)] fnx
                fnz:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] fjs
                foa:f64[] = squeeze[dimensions=(0,)] fnz
                fob:f64[] = sub foa fny
                foc:f64[] = div fob 6.283185307179586
                fod:f64[400] = mul 6.283185307179586 eya
                foe:f64[400] = mul 6.283185307179586 eya
                fof:f64[400] = sin foe
                fog:f64[400] = sub fod fof
                foh:f64[400] = mul foc fog
                foi:f64[400] = add foh fny
                foj:f64[400] = mul 6.283185307179586 eya
                fok:f64[400] = cos foj
                fol:f64[400] = sub 1.0 fok
                fom:f64[400] = mul 0.045 fol
                fon:f64[400,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(400, 1)
                ] fnw
                foo:f64[400,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(400, 1)
                ] foi
                fop:f64[400,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(400, 1)
                ] fom
                foq:f64[400,3] = concatenate[dimension=1] fon foo fop
                for:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] ffl
                fos:f64[] = squeeze[dimensions=(0,)] for
                fot:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] ezn
                fou:f64[] = squeeze[dimensions=(0,)] fot
                fov:f64[] = sub fou fos
                fow:f64[] = div fov 6.283185307179586
                fox:f64[400] = mul 6.283185307179586 ewk
                foy:f64[400] = mul 6.283185307179586 ewk
                foz:f64[400] = sin foy
                fpa:f64[400] = sub fox foz
                fpb:f64[400] = mul fow fpa
                fpc:f64[400] = add fpb fos
                fpd:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] ffl
                fpe:f64[] = squeeze[dimensions=(0,)] fpd
                fpf:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] ezn
                fpg:f64[] = squeeze[dimensions=(0,)] fpf
                fph:f64[] = sub fpg fpe
                fpi:f64[] = div fph 6.283185307179586
                fpj:f64[400] = mul 6.283185307179586 ewk
                fpk:f64[400] = mul 6.283185307179586 ewk
                fpl:f64[400] = sin fpk
                fpm:f64[400] = sub fpj fpl
                fpn:f64[400] = mul fpi fpm
                fpo:f64[400] = add fpn fpe
                fpp:f64[400,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(400, 1)
                ] fpc
                fpq:f64[400,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(400, 1)
                ] fpo
                fpr:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] 0.0
                fps:f64[400,1] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(400, 1)
                ] fpr
                fpt:f64[400,3] = concatenate[dimension=1] fpp fpq fps
                fpu:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] fgw
                fpv:f64[] = squeeze[dimensions=(0,)] fpu
                fpw:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] fba
                fpx:f64[] = squeeze[dimensions=(0,)] fpw
                fpy:f64[] = sub fpx fpv
                fpz:f64[] = div fpy 6.283185307179586
                fqa:f64[400] = mul 6.283185307179586 ewy
                fqb:f64[400] = mul 6.283185307179586 ewy
                fqc:f64[400] = sin fqb
                fqd:f64[400] = sub fqa fqc
                fqe:f64[400] = mul fpz fqd
                fqf:f64[400] = add fqe fpv
                fqg:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] fgw
                fqh:f64[] = squeeze[dimensions=(0,)] fqg
                fqi:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] fba
                fqj:f64[] = squeeze[dimensions=(0,)] fqi
                fqk:f64[] = sub fqj fqh
                fql:f64[] = div fqk 6.283185307179586
                fqm:f64[400] = mul 6.283185307179586 ewy
                fqn:f64[400] = mul 6.283185307179586 ewy
                fqo:f64[400] = sin fqn
                fqp:f64[400] = sub fqm fqo
                fqq:f64[400] = mul fql fqp
                fqr:f64[400] = add fqq fqh
                fqs:f64[400,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(400, 1)
                ] fqf
                fqt:f64[400,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(400, 1)
                ] fqr
                fqu:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] 0.0
                fqv:f64[400,1] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(400, 1)
                ] fqu
                fqw:f64[400,3] = concatenate[dimension=1] fqs fqt fqv
                fqx:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] fih
                fqy:f64[] = squeeze[dimensions=(0,)] fqx
                fqz:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] fcn
                fra:f64[] = squeeze[dimensions=(0,)] fqz
                frb:f64[] = sub fra fqy
                frc:f64[] = div frb 6.283185307179586
                frd:f64[400] = mul 6.283185307179586 exm
                fre:f64[400] = mul 6.283185307179586 exm
                frf:f64[400] = sin fre
                frg:f64[400] = sub frd frf
                frh:f64[400] = mul frc frg
                fri:f64[400] = add frh fqy
                frj:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] fih
                frk:f64[] = squeeze[dimensions=(0,)] frj
                frl:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] fcn
                frm:f64[] = squeeze[dimensions=(0,)] frl
                frn:f64[] = sub frm frk
                fro:f64[] = div frn 6.283185307179586
                frp:f64[400] = mul 6.283185307179586 exm
                frq:f64[400] = mul 6.283185307179586 exm
                frr:f64[400] = sin frq
                frs:f64[400] = sub frp frr
                frt:f64[400] = mul fro frs
                fru:f64[400] = add frt frk
                frv:f64[400,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(400, 1)
                ] fri
                frw:f64[400,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(400, 1)
                ] fru
                frx:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] 0.0
                fry:f64[400,1] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(400, 1)
                ] frx
                frz:f64[400,3] = concatenate[dimension=1] frv frw fry
                fsa:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] fjs
                fsb:f64[] = squeeze[dimensions=(0,)] fsa
                fsc:f64[1] = slice[
                  limit_indices=(1,)
                  start_indices=(0,)
                  strides=None
                ] fea
                fsd:f64[] = squeeze[dimensions=(0,)] fsc
                fse:f64[] = sub fsd fsb
                fsf:f64[] = div fse 6.283185307179586
                fsg:f64[400] = mul 6.283185307179586 eya
                fsh:f64[400] = mul 6.283185307179586 eya
                fsi:f64[400] = sin fsh
                fsj:f64[400] = sub fsg fsi
                fsk:f64[400] = mul fsf fsj
                fsl:f64[400] = add fsk fsb
                fsm:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] fjs
                fsn:f64[] = squeeze[dimensions=(0,)] fsm
                fso:f64[1] = slice[
                  limit_indices=(2,)
                  start_indices=(1,)
                  strides=None
                ] fea
                fsp:f64[] = squeeze[dimensions=(0,)] fso
                fsq:f64[] = sub fsp fsn
                fsr:f64[] = div fsq 6.283185307179586
                fss:f64[400] = mul 6.283185307179586 eya
                fst:f64[400] = mul 6.283185307179586 eya
                fsu:f64[400] = sin fst
                fsv:f64[400] = sub fss fsu
                fsw:f64[400] = mul fsr fsv
                fsx:f64[400] = add fsw fsn
                fsy:f64[400,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(400, 1)
                ] fsl
                fsz:f64[400,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(400, 1)
                ] fsx
                fta:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] 0.0
                ftb:f64[400,1] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(400, 1)
                ] fta
                ftc:f64[400,3] = concatenate[dimension=1] fsy fsz ftb
                ftd:bool[400,3] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(400, 3)
                ] ewg
                fte:f64[400,3] = select_n ftd fky fpt
                ftf:f64[1,3] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 3)
                ] erp
                ftg:f64[400,3] = add ftf fte
                fth:bool[400,3] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(400, 3)
                ] ewu
                fti:f64[400,3] = select_n fth fme fqw
                ftj:f64[1,3] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 3)
                ] err
                ftk:f64[400,3] = add ftj fti
                ftl:bool[400,3] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(400, 3)
                ] exi
                ftm:f64[400,3] = select_n ftl fnk frz
                ftn:f64[1,3] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 3)
                ] erq
                fto:f64[400,3] = add ftn ftm
                ftp:bool[400,3] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(400, 3)
                ] exw
                ftq:f64[400,3] = select_n ftp foq ftc
                ftr:f64[1,3] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 3)
                ] eru
                fts:f64[400,3] = add ftr ftq
                ftt:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] 0.0
                ftu:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] 0.0
                ftv:f64[400,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(400, 1)
                ] evq
                ftw:f64[400,1] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(400, 1)
                ] ftt
                ftx:f64[400,1] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(400, 1)
                ] ftu
                fty:f64[400,3] = concatenate[dimension=1] ftw ftx ftv
                ftz:f64[400,1,3] = reshape[
                  dimensions=None
                  new_sizes=(400, 1, 3)
                ] fty
                fua:f64[400,3] = squeeze[dimensions=(1,)] ftz
                fub:f64[400,4,3] = broadcast_in_dim[
                  broadcast_dimensions=(0, 2)
                  shape=(400, 4, 3)
                ] fua
                fuc:f64[400,12] = reshape[dimensions=None new_sizes=(400, 12)] fub
                fud:f64[400,12] = concatenate[dimension=1] ftg ftk fto fts
                fue:f64[400,12] = sub fud fuc
                fuf:f64[400,8] = slice[
                  limit_indices=(400, 8)
                  start_indices=(0, 0)
                  strides=None
                ] erm
                fug:f64[400,1] = slice[
                  limit_indices=(400, 1)
                  start_indices=(0, 0)
                  strides=None
                ] fuf
                fuh:f64[400] = squeeze[dimensions=(1,)] fug
                fui:f64[400,1] = slice[
                  limit_indices=(400, 5)
                  start_indices=(0, 4)
                  strides=None
                ] fuf
                fuj:f64[400] = squeeze[dimensions=(1,)] fui
                fuk:f64[400,1] = slice[
                  limit_indices=(400, 2)
                  start_indices=(0, 1)
                  strides=None
                ] fuf
                ful:f64[400] = squeeze[dimensions=(1,)] fuk
                fum:f64[400,1] = slice[
                  limit_indices=(400, 6)
                  start_indices=(0, 5)
                  strides=None
                ] fuf
                fun:f64[400] = squeeze[dimensions=(1,)] fum
                fuo:f64[400,1] = slice[
                  limit_indices=(400, 3)
                  start_indices=(0, 2)
                  strides=None
                ] fuf
                fup:f64[400] = squeeze[dimensions=(1,)] fuo
                fuq:f64[400,1] = slice[
                  limit_indices=(400, 7)
                  start_indices=(0, 6)
                  strides=None
                ] fuf
                fur:f64[400] = squeeze[dimensions=(1,)] fuq
                fus:f64[400,1] = slice[
                  limit_indices=(400, 4)
                  start_indices=(0, 3)
                  strides=None
                ] fuf
                fut:f64[400] = squeeze[dimensions=(1,)] fus
                fuu:f64[400,1] = slice[
                  limit_indices=(400, 8)
                  start_indices=(0, 7)
                  strides=None
                ] fuf
                fuv:f64[400] = squeeze[dimensions=(1,)] fuu
                fuw:f64[400,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(400, 1)
                ] fuh
                fux:f64[400,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(400, 1)
                ] fuj
                fuy:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] 0.0
                fuz:f64[400,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(400, 1)
                ] ful
                fva:f64[400,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(400, 1)
                ] fun
                fvb:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] 0.0
                fvc:f64[400,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(400, 1)
                ] fup
                fvd:f64[400,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(400, 1)
                ] fur
                fve:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] 0.0
                fvf:f64[400,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(400, 1)
                ] fut
                fvg:f64[400,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(400, 1)
                ] fuv
                fvh:f64[1] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1,)
                ] 0.0
                fvi:f64[400,1] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(400, 1)
                ] fuy
                fvj:f64[400,1] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(400, 1)
                ] fvb
                fvk:f64[400,1] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(400, 1)
                ] fve
                fvl:f64[400,1] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(400, 1)
                ] fvh
                fvm:f64[400,12] = concatenate[dimension=1] fuw fux fvi fuz fva fvj
                  fvc fvd fvk fvf fvg fvl
                fvn:f64[400,12] = add fue fvm
                fvo:f64[400,3] = slice[
                  limit_indices=(400, 3)
                  start_indices=(0, 0)
                  strides=None
                ] fvn
                fvp:f64[] = select_n False 0.1881 -0.1881
                fvq:f64[] = select_n True 0.04675 -0.04675
                fvr:f64[400,1] = slice[
                  limit_indices=(400, 1)
                  start_indices=(0, 0)
                  strides=None
                ] fvo
                fvs:f64[400] = squeeze[dimensions=(1,)] fvr
                fvt:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] fvp
                fvu:f64[400] = sub fvs fvt
                fvv:f64[400,1] = slice[
                  limit_indices=(400, 2)
                  start_indices=(0, 1)
                  strides=None
                ] fvo
                fvw:f64[400] = squeeze[dimensions=(1,)] fvv
                fvx:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] fvq
                fvy:f64[400] = sub fvw fvx
                fvz:f64[400,1] = slice[
                  limit_indices=(400, 3)
                  start_indices=(0, 2)
                  strides=None
                ] fvo
                fwa:f64[400] = squeeze[dimensions=(1,)] fvz
                fwb:f64[] = select_n True 0.08 -0.08
                fwc:f64[400] = integer_pow[y=2] fvu
                fwd:f64[400] = integer_pow[y=2] fvy
                fwe:f64[400] = add fwc fwd
                fwf:f64[400] = integer_pow[y=2] fwa
                fwg:f64[400] = add fwe fwf
                fwh:f64[400] = sqrt fwg
                fwi:f64[400] = integer_pow[y=2] fwh
                fwj:f64[400] = sub fwi 0.0064
                fwk:f64[400] = sqrt fwj
                fwl:f64[400] = integer_pow[y=2] fvy
                fwm:f64[400] = integer_pow[y=2] fwa
                fwn:f64[400] = add fwl fwm
                fwo:f64[] = integer_pow[y=2] fwb
                fwp:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] fwo
                fwq:f64[400] = sub fwn fwp
                fwr:f64[400] = sqrt fwq
                fws:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] fwb
                fwt:f64[400] = mul fwa fws
                fwu:f64[400] = mul fvy fwr
                fwv:f64[400] = add fwt fwu
                fww:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] fwb
                fwx:f64[400] = mul fvy fww
                fwy:f64[400] = mul fwa fwr
                fwz:f64[400] = sub fwx fwy
                fxa:f64[400] = atan2 fwv fwz
                fxb:f64[400] = integer_pow[y=2] fwk
                fxc:f64[400] = sub 0.090738 fxb
                fxd:f64[] = abs 0.045369
                fxe:f64[] = mul 2.0 fxd
                fxf:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] fxe
                fxg:f64[400] = div fxc fxf
                fxh:f64[1] = slice[
                  limit_indices=(3,)
                  start_indices=(2,)
                  strides=None
                ] erv
                fxi:f64[] = squeeze[dimensions=(0,)] fxh
                fxj:f64[1] = slice[
                  limit_indices=(3,)
                  start_indices=(2,)
                  strides=None
                ] erw
                fxk:f64[] = squeeze[dimensions=(0,)] fxj
                fxl:f64[] = add 3.141592653589793 fxi
                fxm:f64[] = cos fxl
                fxn:f64[] = add 3.141592653589793 fxk
                fxo:f64[] = cos fxn
                fxp:f64[400] = pjit[name=clip jaxpr=clip3] fxg fxm fxo
                fxq:f64[400] = acos fxp
                fxr:f64[400] = sub 3.141592653589793 fxq
                fxs:f64[400] = neg fxr
                fxt:f64[400] = sin fxa
                fxu:f64[400] = mul fvy fxt
                fxv:f64[400] = cos fxa
                fxw:f64[400] = mul fwa fxv
                fxx:f64[400] = sub fxu fxw
                fxy:f64[400] = sin fxs
                fxz:f64[400] = mul -0.213 fxy
                fya:f64[400] = cos fxs
                fyb:f64[400] = mul -0.213 fya
                fyc:f64[400] = add -0.213 fyb
                fyd:f64[400] = mul fxz fxx
                fye:f64[400] = mul fyc fvu
                fyf:f64[400] = add fyd fye
                fyg:f64[400] = mul fxz fvu
                fyh:f64[400] = mul fyc fxx
                fyi:f64[400] = sub fyg fyh
                fyj:f64[400] = atan2 fyf fyi
                fyk:f64[400,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(400, 1)
                ] fxa
                fyl:f64[400,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(400, 1)
                ] fyj
                fym:f64[400,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(400, 1)
                ] fxs
                fyn:f64[400,3] = concatenate[dimension=1] fyk fyl fym
                fyo:f64[400,3] = slice[
                  limit_indices=(400, 6)
                  start_indices=(0, 3)
                  strides=None
                ] fvn
                fyp:f64[] = select_n False 0.1881 -0.1881
                fyq:f64[] = select_n False 0.04675 -0.04675
                fyr:f64[400,1] = slice[
                  limit_indices=(400, 1)
                  start_indices=(0, 0)
                  strides=None
                ] fyo
                fys:f64[400] = squeeze[dimensions=(1,)] fyr
                fyt:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] fyp
                fyu:f64[400] = sub fys fyt
                fyv:f64[400,1] = slice[
                  limit_indices=(400, 2)
                  start_indices=(0, 1)
                  strides=None
                ] fyo
                fyw:f64[400] = squeeze[dimensions=(1,)] fyv
                fyx:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] fyq
                fyy:f64[400] = sub fyw fyx
                fyz:f64[400,1] = slice[
                  limit_indices=(400, 3)
                  start_indices=(0, 2)
                  strides=None
                ] fyo
                fza:f64[400] = squeeze[dimensions=(1,)] fyz
                fzb:f64[] = select_n False 0.08 -0.08
                fzc:f64[400] = integer_pow[y=2] fyu
                fzd:f64[400] = integer_pow[y=2] fyy
                fze:f64[400] = add fzc fzd
                fzf:f64[400] = integer_pow[y=2] fza
                fzg:f64[400] = add fze fzf
                fzh:f64[400] = sqrt fzg
                fzi:f64[400] = integer_pow[y=2] fzh
                fzj:f64[400] = sub fzi 0.0064
                fzk:f64[400] = sqrt fzj
                fzl:f64[400] = integer_pow[y=2] fyy
                fzm:f64[400] = integer_pow[y=2] fza
                fzn:f64[400] = add fzl fzm
                fzo:f64[] = integer_pow[y=2] fzb
                fzp:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] fzo
                fzq:f64[400] = sub fzn fzp
                fzr:f64[400] = sqrt fzq
                fzs:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] fzb
                fzt:f64[400] = mul fza fzs
                fzu:f64[400] = mul fyy fzr
                fzv:f64[400] = add fzt fzu
                fzw:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] fzb
                fzx:f64[400] = mul fyy fzw
                fzy:f64[400] = mul fza fzr
                fzz:f64[400] = sub fzx fzy
                gaa:f64[400] = atan2 fzv fzz
                gab:f64[400] = integer_pow[y=2] fzk
                gac:f64[400] = sub 0.090738 gab
                gad:f64[] = abs 0.045369
                gae:f64[] = mul 2.0 gad
                gaf:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] gae
                gag:f64[400] = div gac gaf
                gah:f64[1] = slice[
                  limit_indices=(3,)
                  start_indices=(2,)
                  strides=None
                ] erv
                gai:f64[] = squeeze[dimensions=(0,)] gah
                gaj:f64[1] = slice[
                  limit_indices=(3,)
                  start_indices=(2,)
                  strides=None
                ] erw
                gak:f64[] = squeeze[dimensions=(0,)] gaj
                gal:f64[] = add 3.141592653589793 gai
                gam:f64[] = cos gal
                gan:f64[] = add 3.141592653589793 gak
                gao:f64[] = cos gan
                gap:f64[400] = pjit[name=clip jaxpr=clip3] gag gam gao
                gaq:f64[400] = acos gap
                gar:f64[400] = sub 3.141592653589793 gaq
                gas:f64[400] = neg gar
                gat:f64[400] = sin gaa
                gau:f64[400] = mul fyy gat
                gav:f64[400] = cos gaa
                gaw:f64[400] = mul fza gav
                gax:f64[400] = sub gau gaw
                gay:f64[400] = sin gas
                gaz:f64[400] = mul -0.213 gay
                gba:f64[400] = cos gas
                gbb:f64[400] = mul -0.213 gba
                gbc:f64[400] = add -0.213 gbb
                gbd:f64[400] = mul gaz gax
                gbe:f64[400] = mul gbc fyu
                gbf:f64[400] = add gbd gbe
                gbg:f64[400] = mul gaz fyu
                gbh:f64[400] = mul gbc gax
                gbi:f64[400] = sub gbg gbh
                gbj:f64[400] = atan2 gbf gbi
                gbk:f64[400,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(400, 1)
                ] gaa
                gbl:f64[400,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(400, 1)
                ] gbj
                gbm:f64[400,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(400, 1)
                ] gas
                gbn:f64[400,3] = concatenate[dimension=1] gbk gbl gbm
                gbo:f64[400,3] = slice[
                  limit_indices=(400, 9)
                  start_indices=(0, 6)
                  strides=None
                ] fvn
                gbp:f64[] = select_n True 0.1881 -0.1881
                gbq:f64[] = select_n True 0.04675 -0.04675
                gbr:f64[400,1] = slice[
                  limit_indices=(400, 1)
                  start_indices=(0, 0)
                  strides=None
                ] gbo
                gbs:f64[400] = squeeze[dimensions=(1,)] gbr
                gbt:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] gbp
                gbu:f64[400] = sub gbs gbt
                gbv:f64[400,1] = slice[
                  limit_indices=(400, 2)
                  start_indices=(0, 1)
                  strides=None
                ] gbo
                gbw:f64[400] = squeeze[dimensions=(1,)] gbv
                gbx:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] gbq
                gby:f64[400] = sub gbw gbx
                gbz:f64[400,1] = slice[
                  limit_indices=(400, 3)
                  start_indices=(0, 2)
                  strides=None
                ] gbo
                gca:f64[400] = squeeze[dimensions=(1,)] gbz
                gcb:f64[] = select_n True 0.08 -0.08
                gcc:f64[400] = integer_pow[y=2] gbu
                gcd:f64[400] = integer_pow[y=2] gby
                gce:f64[400] = add gcc gcd
                gcf:f64[400] = integer_pow[y=2] gca
                gcg:f64[400] = add gce gcf
                gch:f64[400] = sqrt gcg
                gci:f64[400] = integer_pow[y=2] gch
                gcj:f64[400] = sub gci 0.0064
                gck:f64[400] = sqrt gcj
                gcl:f64[400] = integer_pow[y=2] gby
                gcm:f64[400] = integer_pow[y=2] gca
                gcn:f64[400] = add gcl gcm
                gco:f64[] = integer_pow[y=2] gcb
                gcp:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] gco
                gcq:f64[400] = sub gcn gcp
                gcr:f64[400] = sqrt gcq
                gcs:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] gcb
                gct:f64[400] = mul gca gcs
                gcu:f64[400] = mul gby gcr
                gcv:f64[400] = add gct gcu
                gcw:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] gcb
                gcx:f64[400] = mul gby gcw
                gcy:f64[400] = mul gca gcr
                gcz:f64[400] = sub gcx gcy
                gda:f64[400] = atan2 gcv gcz
                gdb:f64[400] = integer_pow[y=2] gck
                gdc:f64[400] = sub 0.090738 gdb
                gdd:f64[] = abs 0.045369
                gde:f64[] = mul 2.0 gdd
                gdf:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] gde
                gdg:f64[400] = div gdc gdf
                gdh:f64[1] = slice[
                  limit_indices=(3,)
                  start_indices=(2,)
                  strides=None
                ] erv
                gdi:f64[] = squeeze[dimensions=(0,)] gdh
                gdj:f64[1] = slice[
                  limit_indices=(3,)
                  start_indices=(2,)
                  strides=None
                ] erw
                gdk:f64[] = squeeze[dimensions=(0,)] gdj
                gdl:f64[] = add 3.141592653589793 gdi
                gdm:f64[] = cos gdl
                gdn:f64[] = add 3.141592653589793 gdk
                gdo:f64[] = cos gdn
                gdp:f64[400] = pjit[name=clip jaxpr=clip3] gdg gdm gdo
                gdq:f64[400] = acos gdp
                gdr:f64[400] = sub 3.141592653589793 gdq
                gds:f64[400] = neg gdr
                gdt:f64[400] = sin gda
                gdu:f64[400] = mul gby gdt
                gdv:f64[400] = cos gda
                gdw:f64[400] = mul gca gdv
                gdx:f64[400] = sub gdu gdw
                gdy:f64[400] = sin gds
                gdz:f64[400] = mul -0.213 gdy
                gea:f64[400] = cos gds
                geb:f64[400] = mul -0.213 gea
                gec:f64[400] = add -0.213 geb
                ged:f64[400] = mul gdz gdx
                gee:f64[400] = mul gec gbu
                gef:f64[400] = add ged gee
                geg:f64[400] = mul gdz gbu
                geh:f64[400] = mul gec gdx
                gei:f64[400] = sub geg geh
                gej:f64[400] = atan2 gef gei
                gek:f64[400,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(400, 1)
                ] gda
                gel:f64[400,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(400, 1)
                ] gej
                gem:f64[400,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(400, 1)
                ] gds
                gen:f64[400,3] = concatenate[dimension=1] gek gel gem
                geo:f64[400,3] = slice[
                  limit_indices=(400, 12)
                  start_indices=(0, 9)
                  strides=None
                ] fvn
                gep:f64[] = select_n True 0.1881 -0.1881
                geq:f64[] = select_n False 0.04675 -0.04675
                ger:f64[400,1] = slice[
                  limit_indices=(400, 1)
                  start_indices=(0, 0)
                  strides=None
                ] geo
                ges:f64[400] = squeeze[dimensions=(1,)] ger
                get:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] gep
                geu:f64[400] = sub ges get
                gev:f64[400,1] = slice[
                  limit_indices=(400, 2)
                  start_indices=(0, 1)
                  strides=None
                ] geo
                gew:f64[400] = squeeze[dimensions=(1,)] gev
                gex:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] geq
                gey:f64[400] = sub gew gex
                gez:f64[400,1] = slice[
                  limit_indices=(400, 3)
                  start_indices=(0, 2)
                  strides=None
                ] geo
                gfa:f64[400] = squeeze[dimensions=(1,)] gez
                gfb:f64[] = select_n False 0.08 -0.08
                gfc:f64[400] = integer_pow[y=2] geu
                gfd:f64[400] = integer_pow[y=2] gey
                gfe:f64[400] = add gfc gfd
                gff:f64[400] = integer_pow[y=2] gfa
                gfg:f64[400] = add gfe gff
                gfh:f64[400] = sqrt gfg
                gfi:f64[400] = integer_pow[y=2] gfh
                gfj:f64[400] = sub gfi 0.0064
                gfk:f64[400] = sqrt gfj
                gfl:f64[400] = integer_pow[y=2] gey
                gfm:f64[400] = integer_pow[y=2] gfa
                gfn:f64[400] = add gfl gfm
                gfo:f64[] = integer_pow[y=2] gfb
                gfp:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] gfo
                gfq:f64[400] = sub gfn gfp
                gfr:f64[400] = sqrt gfq
                gfs:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] gfb
                gft:f64[400] = mul gfa gfs
                gfu:f64[400] = mul gey gfr
                gfv:f64[400] = add gft gfu
                gfw:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] gfb
                gfx:f64[400] = mul gey gfw
                gfy:f64[400] = mul gfa gfr
                gfz:f64[400] = sub gfx gfy
                gga:f64[400] = atan2 gfv gfz
                ggb:f64[400] = integer_pow[y=2] gfk
                ggc:f64[400] = sub 0.090738 ggb
                ggd:f64[] = abs 0.045369
                gge:f64[] = mul 2.0 ggd
                ggf:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] gge
                ggg:f64[400] = div ggc ggf
                ggh:f64[1] = slice[
                  limit_indices=(3,)
                  start_indices=(2,)
                  strides=None
                ] erv
                ggi:f64[] = squeeze[dimensions=(0,)] ggh
                ggj:f64[1] = slice[
                  limit_indices=(3,)
                  start_indices=(2,)
                  strides=None
                ] erw
                ggk:f64[] = squeeze[dimensions=(0,)] ggj
                ggl:f64[] = add 3.141592653589793 ggi
                ggm:f64[] = cos ggl
                ggn:f64[] = add 3.141592653589793 ggk
                ggo:f64[] = cos ggn
                ggp:f64[400] = pjit[name=clip jaxpr=clip3] ggg ggm ggo
                ggq:f64[400] = acos ggp
                ggr:f64[400] = sub 3.141592653589793 ggq
                ggs:f64[400] = neg ggr
                ggt:f64[400] = sin gga
                ggu:f64[400] = mul gey ggt
                ggv:f64[400] = cos gga
                ggw:f64[400] = mul gfa ggv
                ggx:f64[400] = sub ggu ggw
                ggy:f64[400] = sin ggs
                ggz:f64[400] = mul -0.213 ggy
                gha:f64[400] = cos ggs
                ghb:f64[400] = mul -0.213 gha
                ghc:f64[400] = add -0.213 ghb
                ghd:f64[400] = mul ggz ggx
                ghe:f64[400] = mul ghc geu
                ghf:f64[400] = add ghd ghe
                ghg:f64[400] = mul ggz geu
                ghh:f64[400] = mul ghc ggx
                ghi:f64[400] = sub ghg ghh
                ghj:f64[400] = atan2 ghf ghi
                ghk:f64[400,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(400, 1)
                ] gga
                ghl:f64[400,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(400, 1)
                ] ghj
                ghm:f64[400,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(400, 1)
                ] ggs
                ghn:f64[400,3] = concatenate[dimension=1] ghk ghl ghm
                gho:f64[400,12] = concatenate[dimension=1] fyn gbn gen ghn
                ghp:f64[1,3] = reshape[dimensions=None new_sizes=(1, 3)] erw
                ghq:f64[3] = squeeze[dimensions=(0,)] ghp
                ghr:f64[4,3] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(4, 3)
                ] ghq
                ghs:f64[12] = reshape[dimensions=None new_sizes=(12,)] ghr
                ght:f64[1,3] = reshape[dimensions=None new_sizes=(1, 3)] erv
                ghu:f64[3] = squeeze[dimensions=(0,)] ght
                ghv:f64[4,3] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(4, 3)
                ] ghu
                ghw:f64[12] = reshape[dimensions=None new_sizes=(12,)] ghv
                ghx:f64[400,12] = pjit[name=clip jaxpr=clip4] gho ghs ghw
                ghy:f64[12] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(12,)
                ] 0.0
                ghz:i64[1,3] = reshape[dimensions=None new_sizes=(1, 3)] erx
                gia:i64[3] = squeeze[dimensions=(0,)] ghz
                gib:i64[4,3] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(4, 3)
                ] gia
                gic:i64[12] = reshape[dimensions=None new_sizes=(12,)] gib
                gid:f64[12] = convert_element_type[
                  new_dtype=float64
                  weak_type=True
                ] gic
                gie:f64[12] = mul gid 1.4
                gif:f64[1,3] = reshape[dimensions=None new_sizes=(1, 3)] ery
                gig:f64[3] = squeeze[dimensions=(0,)] gif
                gih:f64[4,3] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(4, 3)
                ] gig
                gii:f64[12] = reshape[dimensions=None new_sizes=(12,)] gih
                gij:f64[400,12] = cond[
                  branches=(
                    { lambda ; gik:f64[12] gil:f64[12] gim:f64[400,36] gin:f64[400,12]
                        gio:f64[12] gip:f64[12] giq:f64[12]. let
                        gir:f64[400,12] = broadcast_in_dim[
                          broadcast_dimensions=(1,)
                          shape=(400, 12)
                        ] gil
                      in (gir,) }
                    { lambda ; gis:f64[12] git:f64[12] giu:f64[400,36] giv:f64[400,12]
                        giw:f64[12] gix:f64[12] giy:f64[12]. let
                        giz:f64[400,12] = slice[
                          limit_indices=(400, 16)
                          start_indices=(0, 4)
                          strides=None
                        ] giu
                        gja:f64[400,12] = slice[
                          limit_indices=(400, 34)
                          start_indices=(0, 22)
                          strides=None
                        ] giu
                        gjb:f64[400,12] = sub giv giz
                        gjc:f64[12] = convert_element_type[
                          new_dtype=float64
                          weak_type=False
                        ] gix
                        gjd:f64[1,12] = broadcast_in_dim[
                          broadcast_dimensions=(1,)
                          shape=(1, 12)
                        ] gjc
                        gje:f64[400,12] = mul gjd gjb
                        gjf:f64[1,12] = broadcast_in_dim[
                          broadcast_dimensions=(1,)
                          shape=(1, 12)
                        ] giw
                        gjg:f64[400,12] = sub gjf gja
                        gjh:f64[1,12] = broadcast_in_dim[
                          broadcast_dimensions=(1,)
                          shape=(1, 12)
                        ] giy
                        gji:f64[400,12] = mul gjh gjg
                        gjj:f64[400,12] = add gje gji
                        gjk:f64[400,12] = sub giv giz
                        gjl:bool[400,12] = ne gjk 0.0
                        gjm:f64[400,12] = sub giv giz
                        gjn:f64[400,12] = pjit[name=_where jaxpr=_where] gjl gjm
                          1
                        gjo:f64[1,12] = broadcast_in_dim[
                          broadcast_dimensions=(1,)
                          shape=(1, 12)
                        ] gis
                        gjp:bool[400,12] = gt gjj gjo
                        gjq:f64[1,12] = broadcast_in_dim[
                          broadcast_dimensions=(1,)
                          shape=(1, 12)
                        ] giw
                        gjr:f64[400,12] = sub gjq gja
                        gjs:f64[1,12] = broadcast_in_dim[
                          broadcast_dimensions=(1,)
                          shape=(1, 12)
                        ] giy
                        gjt:f64[400,12] = mul gjs gjr
                        gju:f64[1,12] = broadcast_in_dim[
                          broadcast_dimensions=(1,)
                          shape=(1, 12)
                        ] gis
                        gjv:f64[400,12] = sub gju gjt
                        gjw:f64[400,12] = div gjv gjn
                        gjx:f64[400,12] = pjit[name=_where jaxpr=_where1] gjp gjw
                          gix
                        gjy:f64[12] = neg gis
                        gjz:f64[1,12] = broadcast_in_dim[
                          broadcast_dimensions=(1,)
                          shape=(1, 12)
                        ] gjy
                        gka:bool[400,12] = lt gjj gjz
                        gkb:f64[12] = neg gis
                        gkc:f64[1,12] = broadcast_in_dim[
                          broadcast_dimensions=(1,)
                          shape=(1, 12)
                        ] giw
                        gkd:f64[400,12] = sub gkc gja
                        gke:f64[1,12] = broadcast_in_dim[
                          broadcast_dimensions=(1,)
                          shape=(1, 12)
                        ] giy
                        gkf:f64[400,12] = mul gke gkd
                        gkg:f64[1,12] = broadcast_in_dim[
                          broadcast_dimensions=(1,)
                          shape=(1, 12)
                        ] gkb
                        gkh:f64[400,12] = sub gkg gkf
                        gki:f64[400,12] = div gkh gjn
                        gkj:f64[400,12] = pjit[name=_where jaxpr=_where2] gka gki
                          gjx
                      in (gkj,) }
                  )
                  linear=(False, False, False, False, False, False, False)
                ] 1 erz gie evo ghx ghy gie gii
                gkk:f64[400,12] = slice[
                  limit_indices=(400, 16)
                  start_indices=(0, 4)
                  strides=None
                ] evo
                gkl:f64[400,12] = slice[
                  limit_indices=(400, 34)
                  start_indices=(0, 22)
                  strides=None
                ] evo
                gkm:f64[400,12] = sub ghx gkk
                gkn:f64[400,12] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] gij
                gko:f64[400,12] = mul gkn gkm
                gkp:f64[1,12] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 12)
                ] ghy
                gkq:f64[400,12] = sub gkp gkl
                gkr:f64[1,12] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 12)
                ] gii
                gks:f64[400,12] = mul gkr gkq
                gkt:f64[400,12] = add gko gks
                gku:bool[12] = lt esa 0
                gkv:i32[12] = add esa 19
                gkw:i32[12] = select_n gku esa gkv
                gkx:i32[12,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(12, 1)
                ] gkw
                gky:f64[400,12] = gather[
                  dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
                  fill_value=None
                  indices_are_sorted=False
                  mode=GatherScatterMode.PROMISE_IN_BOUNDS
                  slice_sizes=(400, 1)
                  unique_indices=False
                ] esk gkx
                gkz:bool[12] = lt esb 0
                gla:i32[12] = add esb 18
                glb:i32[12] = select_n gkz esb gla
                glc:i32[12,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(12, 1)
                ] glb
                gld:f64[400,12] = gather[
                  dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
                  fill_value=None
                  indices_are_sorted=False
                  mode=GatherScatterMode.PROMISE_IN_BOUNDS
                  slice_sizes=(400, 1)
                  unique_indices=False
                ] esl glc
                gle:f64[12,1] = slice[
                  limit_indices=(12, 1)
                  start_indices=(0, 0)
                  strides=None
                ] esc
                glf:f64[12] = squeeze[dimensions=(1,)] gle
                glg:f64[12,1] = slice[
                  limit_indices=(12, 2)
                  start_indices=(0, 1)
                  strides=None
                ] esc
                glh:f64[12] = squeeze[dimensions=(1,)] glg
                gli:f64[400,12] = pjit[name=clip jaxpr=clip4] gkt glf glh
                glj:f64[1,12] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 12)
                ] esd
                glk:f64[400,12] = mul gky glj
                gll:f64[1,12] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 12)
                ] ese
                glm:f64[400,12] = mul gld gll
                gln:f64[400,12] = add glk glm
                glo:f64[1,12] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 12)
                ] esf
                glp:f64[400,12] = mul glo gln
                glq:f64[1,12] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 12)
                ] esg
                glr:f64[400,12] = mul glq gli
                gls:f64[400,12] = add glr glp
                glt:f64[12,1] = slice[
                  limit_indices=(12, 1)
                  start_indices=(0, 0)
                  strides=None
                ] esh
                glu:f64[12] = squeeze[dimensions=(1,)] glt
                glv:f64[12,1] = slice[
                  limit_indices=(12, 2)
                  start_indices=(0, 1)
                  strides=None
                ] esh
                glw:f64[12] = squeeze[dimensions=(1,)] glv
                glx:f64[400,12] = pjit[name=clip jaxpr=clip4] gls glu glw
                gly:f64[1,12] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(1, 12)
                ] esf
                glz:f64[400,12] = mul glx gly
                gma:f64[18] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(18,)
                ] 0.0
                gmb:bool[12] = lt esb 0
                gmc:i32[12] = add esb 18
                gmd:i32[12] = select_n gmb esb gmc
                gme:i32[12,1] = broadcast_in_dim[
                  broadcast_dimensions=(0,)
                  shape=(12, 1)
                ] gmd
                gmf:f64[400,18] = broadcast_in_dim[
                  broadcast_dimensions=(1,)
                  shape=(400, 18)
                ] gma
                gmg:f64[400,18] = scatter-add[
                  dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0,), inserted_window_dims=(1,), scatter_dims_to_operand_dims=(1,))
                  indices_are_sorted=False
                  mode=GatherScatterMode.FILL_OR_DROP
                  unique_indices=False
                  update_consts=()
                  update_jaxpr=jaxpr1
                ] gmf gme glz
                gmh:f64[400,18] = add esi gmg
                gmi:f64[18,18] = pjit[name=_diag jaxpr=_diag] esj
                gmj:f64[18,18] = mul gmi 0.0025
                gmk:f64[1,18,18] = broadcast_in_dim[
                  broadcast_dimensions=(1, 2)
                  shape=(1, 18, 18)
                ] gmj
                gml:f64[400,18,18] = add esm gmk
                gmm:i64[18,18] = iota[dimension=0 dtype=int64 shape=(18, 18)] 
                gmn:i64[18,18] = iota[dimension=1 dtype=int64 shape=(18, 18)] 
                gmo:i64[18,18] = add gmm 0
                gmp:bool[18,18] = eq gmo gmn
                gmq:f64[18,18] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] gmp
                gmr:f64[400,18,18] = pjit[
                  name=_solve
                  jaxpr={ lambda ; gms:f64[400,18,18] gmt:f64[18,18]. let
                      gmu:f64[400,18,18] = stop_gradient gms
                      gmv:f64[400,18,18] = pjit[
                        name=_cholesky
                        jaxpr={ lambda ; gmw:f64[400,18,18]. let
                            gmx:f64[400,18,18] = transpose[
                              permutation=(0, 2, 1)
                            ] gmw
                            gmy:f64[400,18,18] = transpose[
                              permutation=(0, 2, 1)
                            ] gmx
                            gmz:f64[400,18,18] = add gmx gmy
                            gna:f64[400,18,18] = div gmz 2.0
                            gnb:f64[400,18,18] = cholesky gna
                            gnc:f64[400,18,18] = pjit[
                              name=tril
                              jaxpr={ lambda ; gnd:f64[400,18,18]. let
                                  gne:i32[18,18] = iota[
                                    dimension=0
                                    dtype=int32
                                    shape=(18, 18)
                                  ] 
                                  gnf:i32[18,18] = add gne 0
                                  gng:i32[18,18] = iota[
                                    dimension=1
                                    dtype=int32
                                    shape=(18, 18)
                                  ] 
                                  gnh:bool[18,18] = ge gnf gng
                                  gni:bool[400,18,18] = broadcast_in_dim[
                                    broadcast_dimensions=(1, 2)
                                    shape=(400, 18, 18)
                                  ] gnh
                                  gnj:f64[400,18,18] = broadcast_in_dim[
                                    broadcast_dimensions=()
                                    shape=(400, 18, 18)
                                  ] 0.0
                                  gnk:f64[400,18,18] = select_n gni gnj gnd
                                in (gnk,) }
                            ] gnb
                            gnl:f64[400,18,18] = pjit[
                              name=tril
                              jaxpr={ lambda ; gnm:f64[400,18,18]. let
                                  gnn:i32[18,18] = iota[
                                    dimension=0
                                    dtype=int32
                                    shape=(18, 18)
                                  ] 
                                  gno:i32[18,18] = add gnn 0
                                  gnp:i32[18,18] = iota[
                                    dimension=1
                                    dtype=int32
                                    shape=(18, 18)
                                  ] 
                                  gnq:bool[18,18] = ge gno gnp
                                  gnr:f64[18,18] = broadcast_in_dim[
                                    broadcast_dimensions=()
                                    shape=(18, 18)
                                  ] 0.0
                                  gns:bool[400,18,18] = broadcast_in_dim[
                                    broadcast_dimensions=(1, 2)
                                    shape=(400, 18, 18)
                                  ] gnq
                                  gnt:f64[400,18,18] = broadcast_in_dim[
                                    broadcast_dimensions=(1, 2)
                                    shape=(400, 18, 18)
                                  ] gnr
                                  gnu:f64[400,18,18] = select_n gns gnt gnm
                                in (gnu,) }
                            ] gnc
                            gnv:f64[400,18,18] = transpose[
                              permutation=(0, 2, 1)
                            ] gnl
                          in (gnv,) }
                      ] gmu
                      gnw:f64[18,18] = transpose[permutation=(1, 0)] gmt
                      gnx:f64[400,18,18] = broadcast_in_dim[
                        broadcast_dimensions=(1, 2)
                        shape=(400, 18, 18)
                      ] gnw
                      gny:f64[400,18,18] = custom_linear_solve[
                        const_lengths=_LinearSolveTuple(matvec=1, vecmat=1, solve=1, transpose_solve=1)
                        jaxprs=_LinearSolveTuple(matvec={ lambda ; a:f64[400,18,18] b:f64[400,18,18]. let
    c:f64[400,18,18] = dot_general[
      dimension_numbers=(([2], [2]), ([0], [0]))
      precision=(Precision.HIGHEST, Precision.HIGHEST)
    ] a b
    d:f64[400,18,18] = transpose[permutation=(0, 2, 1)] c
  in (d,) }, vecmat={ lambda ; a:f64[400,18,18] b:f64[400,18,18]. let
    c:f64[400,18,18] = dot_general[
      dimension_numbers=(([2], [2]), ([0], [0]))
      precision=(Precision.HIGHEST, Precision.HIGHEST)
    ] a b
    d:f64[400,18,18] = transpose[permutation=(0, 2, 1)] c
  in (d,) }, solve={ lambda ; a:f64[400,18,18] b:f64[400,18,18]. let
    c:f64[400,18,18] = pjit[
      name=_cho_solve
      jaxpr={ lambda ; d:f64[400,18,18] e:f64[400,18,18]. let
          f:f64[400,18,18,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(400, 18, 18, 1)
          ] e
          g:f64[400,18,1,18] = transpose[permutation=(0, 2, 3, 1)] f
          h:f64[400,18,18] = reshape[dimensions=None new_sizes=(400, 18, 18)] g
          i:f64[400,18,18] = triangular_solve[
            conjugate_a=False
            left_side=True
            lower=False
            transpose_a=True
            unit_diagonal=False
          ] d h
          j:f64[400,18,1,18] = reshape[
            dimensions=None
            new_sizes=(400, 18, 1, 18)
          ] i
          k:f64[400,18,1,18] = slice[
            limit_indices=(400, 18, 1, 18)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] j
          l:f64[400,18,18,1] = transpose[permutation=(0, 3, 1, 2)] k
          m:f64[400,18,18] = squeeze[dimensions=(3,)] l
          n:f64[400,18,18,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(400, 18, 18, 1)
          ] m
          o:f64[400,18,1,18] = transpose[permutation=(0, 2, 3, 1)] n
          p:f64[400,18,18] = reshape[dimensions=None new_sizes=(400, 18, 18)] o
          q:f64[400,18,18] = triangular_solve[
            conjugate_a=False
            left_side=True
            lower=False
            transpose_a=False
            unit_diagonal=False
          ] d p
          r:f64[400,18,1,18] = reshape[
            dimensions=None
            new_sizes=(400, 18, 1, 18)
          ] q
          s:f64[400,18,1,18] = slice[
            limit_indices=(400, 18, 1, 18)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] r
          t:f64[400,18,18,1] = transpose[permutation=(0, 3, 1, 2)] s
          u:f64[400,18,18] = squeeze[dimensions=(3,)] t
        in (u,) }
    ] a b
  in (c,) }, transpose_solve={ lambda ; a:f64[400,18,18] b:f64[400,18,18]. let
    c:f64[400,18,18] = pjit[
      name=_cho_solve
      jaxpr={ lambda ; d:f64[400,18,18] e:f64[400,18,18]. let
          f:f64[400,18,18,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(400, 18, 18, 1)
          ] e
          g:f64[400,18,1,18] = transpose[permutation=(0, 2, 3, 1)] f
          h:f64[400,18,18] = reshape[dimensions=None new_sizes=(400, 18, 18)] g
          i:f64[400,18,18] = triangular_solve[
            conjugate_a=False
            left_side=True
            lower=False
            transpose_a=True
            unit_diagonal=False
          ] d h
          j:f64[400,18,1,18] = reshape[
            dimensions=None
            new_sizes=(400, 18, 1, 18)
          ] i
          k:f64[400,18,1,18] = slice[
            limit_indices=(400, 18, 1, 18)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] j
          l:f64[400,18,18,1] = transpose[permutation=(0, 3, 1, 2)] k
          m:f64[400,18,18] = squeeze[dimensions=(3,)] l
          n:f64[400,18,18,1] = broadcast_in_dim[
            broadcast_dimensions=(0, 1, 2)
            shape=(400, 18, 18, 1)
          ] m
          o:f64[400,18,1,18] = transpose[permutation=(0, 2, 3, 1)] n
          p:f64[400,18,18] = reshape[dimensions=None new_sizes=(400, 18, 18)] o
          q:f64[400,18,18] = triangular_solve[
            conjugate_a=False
            left_side=True
            lower=False
            transpose_a=False
            unit_diagonal=False
          ] d p
          r:f64[400,18,1,18] = reshape[
            dimensions=None
            new_sizes=(400, 18, 1, 18)
          ] q
          s:f64[400,18,1,18] = slice[
            limit_indices=(400, 18, 1, 18)
            start_indices=(0, 0, 0, 0)
            strides=None
          ] r
          t:f64[400,18,18,1] = transpose[permutation=(0, 3, 1, 2)] s
          u:f64[400,18,18] = squeeze[dimensions=(3,)] t
        in (u,) }
    ] a b
  in (c,) })
                      ] gms gms gmv gmv gnx
                      gnz:f64[400,18,18] = transpose[permutation=(0, 2, 1)] gny
                    in (gnz,) }
                ] gml gmq
                goa:f64[400,18] = add gmh esn
                gob:f64[400,18] = dot_general[
                  dimension_numbers=(([2], [1]), ([0], [0]))
                  preferred_element_type=float64
                ] gmr goa
                goc:f64[400,18] = mul gob 0.0025
                god:f64[400,18] = add esl goc
                goe:f64[400,7] = slice[
                  limit_indices=(400, 7)
                  start_indices=(0, 0)
                  strides=None
                ] esk
                gof:f64[400,6] = slice[
                  limit_indices=(400, 6)
                  start_indices=(0, 0)
                  strides=None
                ] god
                gog:f64[400,1,7] = reshape[
                  dimensions=None
                  new_sizes=(400, 1, 7)
                ] goe
                goh:f64[400,1,6] = reshape[
                  dimensions=None
                  new_sizes=(400, 1, 6)
                ] gof
                goi:f64[400,1,4] = slice[
                  limit_indices=(400, 1, 7)
                  start_indices=(0, 0, 3)
                  strides=None
                ] gog
                goj:f64[400,1,3] = slice[
                  limit_indices=(400, 1, 6)
                  start_indices=(0, 0, 3)
                  strides=None
                ] goh
                gok:f64[400,1] = pjit[
                  name=norm
                  jaxpr={ lambda ; gol:f64[400,1,3]. let
                      gom:f64[400,1,3] = mul gol gol
                      gon:f64[400,1] = reduce_sum[axes=(2,)] gom
                      goo:f64[400,1] = sqrt gon
                    in (goo,) }
                ] goj
                gop:f64[400,1] = add gok 1e-08
                goq:f64[400,1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 1, 1)
                ] gop
                gor:f64[400,1,3] = div goj goq
                gos:f64[400,1] = mul 0.0025 gop
                got:f64[400,1,1] = slice[
                  limit_indices=(400, 1, 1)
                  start_indices=(0, 0, 0)
                  strides=None
                ] gor
                gou:f64[400,1] = squeeze[dimensions=(2,)] got
                gov:f64[400,1] = div gos 2.0
                gow:f64[400,1] = sin gov
                gox:f64[400,1] = mul gou gow
                goy:f64[400,1,1] = slice[
                  limit_indices=(400, 1, 2)
                  start_indices=(0, 0, 1)
                  strides=None
                ] gor
                goz:f64[400,1] = squeeze[dimensions=(2,)] goy
                gpa:f64[400,1] = div gos 2.0
                gpb:f64[400,1] = sin gpa
                gpc:f64[400,1] = mul goz gpb
                gpd:f64[400,1,1] = slice[
                  limit_indices=(400, 1, 3)
                  start_indices=(0, 0, 2)
                  strides=None
                ] gor
                gpe:f64[400,1] = squeeze[dimensions=(2,)] gpd
                gpf:f64[400,1] = div gos 2.0
                gpg:f64[400,1] = sin gpf
                gph:f64[400,1] = mul gpe gpg
                gpi:f64[400,1] = div gos 2.0
                gpj:f64[400,1] = cos gpi
                gpk:f64[400,1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 1, 1)
                ] gpj
                gpl:f64[400,1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 1, 1)
                ] gox
                gpm:f64[400,1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 1, 1)
                ] gpc
                gpn:f64[400,1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 1, 1)
                ] gph
                gpo:f64[400,1,4] = concatenate[dimension=2] gpk gpl gpm gpn
                gpp:f64[400,1,1] = slice[
                  limit_indices=(400, 1, 1)
                  start_indices=(0, 0, 0)
                  strides=None
                ] goi
                gpq:f64[400,1] = squeeze[dimensions=(2,)] gpp
                gpr:f64[400,1,1] = slice[
                  limit_indices=(400, 1, 1)
                  start_indices=(0, 0, 0)
                  strides=None
                ] gpo
                gps:f64[400,1] = squeeze[dimensions=(2,)] gpr
                gpt:f64[400,1] = mul gpq gps
                gpu:f64[400,1,1] = slice[
                  limit_indices=(400, 1, 2)
                  start_indices=(0, 0, 1)
                  strides=None
                ] goi
                gpv:f64[400,1] = squeeze[dimensions=(2,)] gpu
                gpw:f64[400,1,1] = slice[
                  limit_indices=(400, 1, 2)
                  start_indices=(0, 0, 1)
                  strides=None
                ] gpo
                gpx:f64[400,1] = squeeze[dimensions=(2,)] gpw
                gpy:f64[400,1] = mul gpv gpx
                gpz:f64[400,1] = sub gpt gpy
                gqa:f64[400,1,1] = slice[
                  limit_indices=(400, 1, 3)
                  start_indices=(0, 0, 2)
                  strides=None
                ] goi
                gqb:f64[400,1] = squeeze[dimensions=(2,)] gqa
                gqc:f64[400,1,1] = slice[
                  limit_indices=(400, 1, 3)
                  start_indices=(0, 0, 2)
                  strides=None
                ] gpo
                gqd:f64[400,1] = squeeze[dimensions=(2,)] gqc
                gqe:f64[400,1] = mul gqb gqd
                gqf:f64[400,1] = sub gpz gqe
                gqg:f64[400,1,1] = slice[
                  limit_indices=(400, 1, 4)
                  start_indices=(0, 0, 3)
                  strides=None
                ] goi
                gqh:f64[400,1] = squeeze[dimensions=(2,)] gqg
                gqi:f64[400,1,1] = slice[
                  limit_indices=(400, 1, 4)
                  start_indices=(0, 0, 3)
                  strides=None
                ] gpo
                gqj:f64[400,1] = squeeze[dimensions=(2,)] gqi
                gqk:f64[400,1] = mul gqh gqj
                gql:f64[400,1] = sub gqf gqk
                gqm:f64[400,1,1] = slice[
                  limit_indices=(400, 1, 1)
                  start_indices=(0, 0, 0)
                  strides=None
                ] goi
                gqn:f64[400,1] = squeeze[dimensions=(2,)] gqm
                gqo:f64[400,1,1] = slice[
                  limit_indices=(400, 1, 2)
                  start_indices=(0, 0, 1)
                  strides=None
                ] gpo
                gqp:f64[400,1] = squeeze[dimensions=(2,)] gqo
                gqq:f64[400,1] = mul gqn gqp
                gqr:f64[400,1,1] = slice[
                  limit_indices=(400, 1, 2)
                  start_indices=(0, 0, 1)
                  strides=None
                ] goi
                gqs:f64[400,1] = squeeze[dimensions=(2,)] gqr
                gqt:f64[400,1,1] = slice[
                  limit_indices=(400, 1, 1)
                  start_indices=(0, 0, 0)
                  strides=None
                ] gpo
                gqu:f64[400,1] = squeeze[dimensions=(2,)] gqt
                gqv:f64[400,1] = mul gqs gqu
                gqw:f64[400,1] = add gqq gqv
                gqx:f64[400,1,1] = slice[
                  limit_indices=(400, 1, 3)
                  start_indices=(0, 0, 2)
                  strides=None
                ] goi
                gqy:f64[400,1] = squeeze[dimensions=(2,)] gqx
                gqz:f64[400,1,1] = slice[
                  limit_indices=(400, 1, 4)
                  start_indices=(0, 0, 3)
                  strides=None
                ] gpo
                gra:f64[400,1] = squeeze[dimensions=(2,)] gqz
                grb:f64[400,1] = mul gqy gra
                grc:f64[400,1] = add gqw grb
                grd:f64[400,1,1] = slice[
                  limit_indices=(400, 1, 4)
                  start_indices=(0, 0, 3)
                  strides=None
                ] goi
                gre:f64[400,1] = squeeze[dimensions=(2,)] grd
                grf:f64[400,1,1] = slice[
                  limit_indices=(400, 1, 3)
                  start_indices=(0, 0, 2)
                  strides=None
                ] gpo
                grg:f64[400,1] = squeeze[dimensions=(2,)] grf
                grh:f64[400,1] = mul gre grg
                gri:f64[400,1] = sub grc grh
                grj:f64[400,1,1] = slice[
                  limit_indices=(400, 1, 1)
                  start_indices=(0, 0, 0)
                  strides=None
                ] goi
                grk:f64[400,1] = squeeze[dimensions=(2,)] grj
                grl:f64[400,1,1] = slice[
                  limit_indices=(400, 1, 3)
                  start_indices=(0, 0, 2)
                  strides=None
                ] gpo
                grm:f64[400,1] = squeeze[dimensions=(2,)] grl
                grn:f64[400,1] = mul grk grm
                gro:f64[400,1,1] = slice[
                  limit_indices=(400, 1, 2)
                  start_indices=(0, 0, 1)
                  strides=None
                ] goi
                grp:f64[400,1] = squeeze[dimensions=(2,)] gro
                grq:f64[400,1,1] = slice[
                  limit_indices=(400, 1, 4)
                  start_indices=(0, 0, 3)
                  strides=None
                ] gpo
                grr:f64[400,1] = squeeze[dimensions=(2,)] grq
                grs:f64[400,1] = mul grp grr
                grt:f64[400,1] = sub grn grs
                gru:f64[400,1,1] = slice[
                  limit_indices=(400, 1, 3)
                  start_indices=(0, 0, 2)
                  strides=None
                ] goi
                grv:f64[400,1] = squeeze[dimensions=(2,)] gru
                grw:f64[400,1,1] = slice[
                  limit_indices=(400, 1, 1)
                  start_indices=(0, 0, 0)
                  strides=None
                ] gpo
                grx:f64[400,1] = squeeze[dimensions=(2,)] grw
                gry:f64[400,1] = mul grv grx
                grz:f64[400,1] = add grt gry
                gsa:f64[400,1,1] = slice[
                  limit_indices=(400, 1, 4)
                  start_indices=(0, 0, 3)
                  strides=None
                ] goi
                gsb:f64[400,1] = squeeze[dimensions=(2,)] gsa
                gsc:f64[400,1,1] = slice[
                  limit_indices=(400, 1, 2)
                  start_indices=(0, 0, 1)
                  strides=None
                ] gpo
                gsd:f64[400,1] = squeeze[dimensions=(2,)] gsc
                gse:f64[400,1] = mul gsb gsd
                gsf:f64[400,1] = add grz gse
                gsg:f64[400,1,1] = slice[
                  limit_indices=(400, 1, 1)
                  start_indices=(0, 0, 0)
                  strides=None
                ] goi
                gsh:f64[400,1] = squeeze[dimensions=(2,)] gsg
                gsi:f64[400,1,1] = slice[
                  limit_indices=(400, 1, 4)
                  start_indices=(0, 0, 3)
                  strides=None
                ] gpo
                gsj:f64[400,1] = squeeze[dimensions=(2,)] gsi
                gsk:f64[400,1] = mul gsh gsj
                gsl:f64[400,1,1] = slice[
                  limit_indices=(400, 1, 2)
                  start_indices=(0, 0, 1)
                  strides=None
                ] goi
                gsm:f64[400,1] = squeeze[dimensions=(2,)] gsl
                gsn:f64[400,1,1] = slice[
                  limit_indices=(400, 1, 3)
                  start_indices=(0, 0, 2)
                  strides=None
                ] gpo
                gso:f64[400,1] = squeeze[dimensions=(2,)] gsn
                gsp:f64[400,1] = mul gsm gso
                gsq:f64[400,1] = add gsk gsp
                gsr:f64[400,1,1] = slice[
                  limit_indices=(400, 1, 3)
                  start_indices=(0, 0, 2)
                  strides=None
                ] goi
                gss:f64[400,1] = squeeze[dimensions=(2,)] gsr
                gst:f64[400,1,1] = slice[
                  limit_indices=(400, 1, 2)
                  start_indices=(0, 0, 1)
                  strides=None
                ] gpo
                gsu:f64[400,1] = squeeze[dimensions=(2,)] gst
                gsv:f64[400,1] = mul gss gsu
                gsw:f64[400,1] = sub gsq gsv
                gsx:f64[400,1,1] = slice[
                  limit_indices=(400, 1, 4)
                  start_indices=(0, 0, 3)
                  strides=None
                ] goi
                gsy:f64[400,1] = squeeze[dimensions=(2,)] gsx
                gsz:f64[400,1,1] = slice[
                  limit_indices=(400, 1, 1)
                  start_indices=(0, 0, 0)
                  strides=None
                ] gpo
                gta:f64[400,1] = squeeze[dimensions=(2,)] gsz
                gtb:f64[400,1] = mul gsy gta
                gtc:f64[400,1] = add gsw gtb
                gtd:f64[400,1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 1, 1)
                ] gql
                gte:f64[400,1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 1, 1)
                ] gri
                gtf:f64[400,1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 1, 1)
                ] gsf
                gtg:f64[400,1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 1, 1)
                ] gtc
                gth:f64[400,1,4] = concatenate[dimension=2] gtd gte gtf gtg
                gti:f64[400,1] = pjit[
                  name=norm
                  jaxpr={ lambda ; gtj:f64[400,1,4]. let
                      gtk:f64[400,1,4] = mul gtj gtj
                      gtl:f64[400,1] = reduce_sum[axes=(2,)] gtk
                      gtm:f64[400,1] = sqrt gtl
                    in (gtm,) }
                ] gth
                gtn:f64[400,1,1] = broadcast_in_dim[
                  broadcast_dimensions=(0, 1)
                  shape=(400, 1, 1)
                ] gti
                gto:f64[400,1,4] = div gth gtn
                gtp:f64[400,1,3] = slice[
                  limit_indices=(400, 1, 3)
                  start_indices=(0, 0, 0)
                  strides=None
                ] gog
                gtq:f64[400,1,3] = slice[
                  limit_indices=(400, 1, 3)
                  start_indices=(0, 0, 0)
                  strides=None
                ] goh
                gtr:f64[400,1,3] = mul gtq 0.0025
                gts:f64[400,1,3] = add gtp gtr
                gtt:f64[400,1,7] = concatenate[dimension=2] gts gto
                gtu:f64[400,7] = reshape[dimensions=None new_sizes=(400, 7)] gtt
                gtv:f64[400,12] = slice[
                  limit_indices=(400, 19)
                  start_indices=(0, 7)
                  strides=None
                ] esk
                gtw:f64[400,12] = slice[
                  limit_indices=(400, 18)
                  start_indices=(0, 6)
                  strides=None
                ] god
                gtx:f64[400,12,1] = reshape[
                  dimensions=None
                  new_sizes=(400, 12, 1)
                ] gtv
                gty:f64[400,12,1] = reshape[
                  dimensions=None
                  new_sizes=(400, 12, 1)
                ] gtw
                gtz:f64[400,12,1] = mul gty 0.0025
                gua:f64[400,12,1] = add gtx gtz
                gub:f64[400,12] = reshape[dimensions=None new_sizes=(400, 12)] gua
                guc:f64[400,19] = concatenate[dimension=1] gtu gub
              in (guc, god, esm, esn) }
            length=4
            linear=(False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False)
            num_carry=4
            num_consts=27
            reverse=False
            unroll=1
          ] bnd bqq bjj bqd bne bnf bng bnh bni bnj bnk bnl bnm bnn bno bnp bnq bnr
            bns bnt bnu bnv bnw bnx bny erg bly brk btj ejo bnz
          gud:f64[400,4] = slice[
            limit_indices=(400, 7)
            start_indices=(0, 3)
            strides=None
          ] erh
          gue:f64[400,12] = slice[
            limit_indices=(400, 19)
            start_indices=(0, 7)
            strides=None
          ] erh
          guf:f64[400,3] = slice[
            limit_indices=(400, 3)
            start_indices=(0, 0)
            strides=None
          ] eri
          gug:f64[4] = convert_element_type[new_dtype=float64 weak_type=False] boa
          guh:f64[1,4] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 4)
          ] gug
          gui:f64[400,4] = mul gud guh
          guj:f64[400,1] = slice[
            limit_indices=(400, 1)
            start_indices=(0, 0)
            strides=None
          ] gui
          guk:f64[400] = squeeze[dimensions=(1,)] guj
          gul:f64[400,3] = slice[
            limit_indices=(400, 4)
            start_indices=(0, 1)
            strides=None
          ] gui
          gum:f64[400] = dot_general[
            dimension_numbers=(([1], [1]), ([0], [0]))
            preferred_element_type=float64
          ] gul guf
          gun:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] gum
          guo:f64[400,3] = mul gun gul
          gup:f64[400,3] = mul 2.0 guo
          guq:f64[400] = mul guk guk
          gur:f64[400] = dot_general[
            dimension_numbers=(([1], [1]), ([0], [0]))
            preferred_element_type=float64
          ] gul gul
          gus:f64[400] = sub guq gur
          gut:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] gus
          guu:f64[400,3] = mul gut guf
          guv:f64[400,3] = add gup guu
          guw:f64[400] = mul 2.0 guk
          gux:f64[400,3] = pjit[name=cross jaxpr=cross] gul guf
          guy:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] guw
          guz:f64[400,3] = mul guy gux
          gva:f64[400,3] = add guv guz
          gvb:f64[400,3] = slice[
            limit_indices=(400, 6)
            start_indices=(0, 3)
            strides=None
          ] eri
          gvc:f64[400,1] = slice[
            limit_indices=(400, 1)
            start_indices=(0, 0)
            strides=None
          ] gud
          gvd:f64[400] = squeeze[dimensions=(1,)] gvc
          gve:f64[400,3] = slice[
            limit_indices=(400, 4)
            start_indices=(0, 1)
            strides=None
          ] gud
          gvf:f64[400] = dot_general[
            dimension_numbers=(([1], [1]), ([0], [0]))
            preferred_element_type=float64
          ] gve gvb
          gvg:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] gvf
          gvh:f64[400,3] = mul gvg gve
          gvi:f64[400,3] = mul 2.0 gvh
          gvj:f64[400] = mul gvd gvd
          gvk:f64[400] = dot_general[
            dimension_numbers=(([1], [1]), ([0], [0]))
            preferred_element_type=float64
          ] gve gve
          gvl:f64[400] = sub gvj gvk
          gvm:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] gvl
          gvn:f64[400,3] = mul gvm gvb
          gvo:f64[400,3] = add gvi gvn
          gvp:f64[400] = mul 2.0 gvd
          gvq:f64[400,3] = pjit[name=cross jaxpr=cross] gve gvb
          gvr:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] gvp
          gvs:f64[400,3] = mul gvr gvq
          gvt:f64[400,3] = add gvo gvs
          gvu:f64[400,12] = slice[
            limit_indices=(400, 18)
            start_indices=(0, 6)
            strides=None
          ] eri
          gvv:f64[400,34] = concatenate[dimension=1] gud gue gva gvt gvu
          gvw:f64[400,1] = slice[
            limit_indices=(400, 35)
            start_indices=(0, 34)
            strides=None
          ] brd
          gvx:f64[400] = squeeze[dimensions=(1,)] gvw
          gvy:f64[400,1] = slice[
            limit_indices=(400, 36)
            start_indices=(0, 35)
            strides=None
          ] brd
          gvz:f64[400] = squeeze[dimensions=(1,)] gvy
          gwa:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] gvx
          gwb:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] gvz
          gwc:f64[400,2] = concatenate[dimension=1] gwa gwb
          gwd:f64[400,36] = concatenate[dimension=1] gvv gwc
          gwe:f64[36,1] = slice[
            limit_indices=(36, 1)
            start_indices=(0, 0)
            strides=None
          ] bjj
          gwf:f64[36] = squeeze[dimensions=(1,)] gwe
          gwg:f64[1,36] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 36)
          ] gwf
          gwh:f64[400,36] = sub gwd gwg
          gwi:f64[400,36] = mul 2.0 gwh
          gwj:f64[36,1] = slice[
            limit_indices=(36, 2)
            start_indices=(0, 1)
            strides=None
          ] bjj
          gwk:f64[36] = squeeze[dimensions=(1,)] gwj
          gwl:f64[36,1] = slice[
            limit_indices=(36, 1)
            start_indices=(0, 0)
            strides=None
          ] bjj
          gwm:f64[36] = squeeze[dimensions=(1,)] gwl
          gwn:f64[36] = sub gwk gwm
          gwo:f64[1,36] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 36)
          ] gwn
          gwp:f64[400,36] = div gwi gwo
          gwq:f64[400,36] = sub gwp 1.0
        in (gwq,) }
      length=1
      linear=(False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False)
      num_carry=1
      num_consts=122
      reverse=False
      unroll=1
    ] vo vp bds vq vr vs vt vu vv vw vx vy vz wa wb wc wd we wf wg wh wi wj wk wl
      wm wn wo wp wq wr ws wt wu wv ww wx wy wz xa xb xc xd xe xf xg xh xi xj xk
      xl xm xn xo xp xq xr xs xt xu xv xw xx xy xz ya yb yc yd ye yf yg yh yi yj
      yk yl ym yn yo yp yq yr ys yt yu yv yw yx yy yz za zb zc zd ze zf zg zh zi
      zj zk zl zm zn zo zp zq zr zs zt zu zv zw zx zy zz baa bab bac bis bad bdw
    gwr:key<fry>[400] = random_wrap[impl=fry] bgc
    gws:f64[400,36] = pjit[
      name=_normal
      jaxpr={ lambda ; gwt:key<fry>[400]. let
          gwu:f64[400,36] = pjit[
            name=_normal_real
            jaxpr={ lambda ; gwv:key<fry>[400]. let
                gww:f64[400,36] = pjit[
                  name=_uniform
                  jaxpr={ lambda ; gwx:key<fry>[400] gwy:f64[] gwz:f64[]. let
                      gxa:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] gwy
                      gxb:f64[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] gwz
                      gxc:u64[400,36] = random_bits[bit_width=64 shape=(36,)] gwx
                      gxd:u64[400,36] = shift_right_logical gxc 12
                      gxe:u64[400,36] = or gxd 4607182418800017408
                      gxf:f64[400,36] = bitcast_convert_type[new_dtype=float64] gxe
                      gxg:f64[400,36] = sub gxf 1.0
                      gxh:f64[1] = sub gxb gxa
                      gxi:f64[1,1] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 1)
                      ] gxh
                      gxj:f64[400,36] = mul gxg gxi
                      gxk:f64[1,1] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 1)
                      ] gxa
                      gxl:f64[400,36] = add gxj gxk
                      gxm:f64[1,1] = broadcast_in_dim[
                        broadcast_dimensions=(1,)
                        shape=(1, 1)
                      ] gxa
                      gxn:f64[400,36] = max gxm gxl
                    in (gxn,) }
                ] gwv -0.9999999999999999 1.0
                gxo:f64[400,36] = erf_inv gww
                gxp:f64[400,36] = mul 1.4142135623730951 gxo
              in (gxp,) }
          ] gwt
        in (gwu,) }
    ] gwr
    gxq:f64[400,36] = mul bjh gws
    gxr:f64[400,36] = add bji gxq
    gxs:f64[400,36] = add gxr 1.0
    gxt:f64[36,1] = slice[
      limit_indices=(36, 2)
      start_indices=(0, 1)
      strides=None
    ] vo
    gxu:f64[36] = squeeze[dimensions=(1,)] gxt
    gxv:f64[36,1] = slice[
      limit_indices=(36, 1)
      start_indices=(0, 0)
      strides=None
    ] vo
    gxw:f64[36] = squeeze[dimensions=(1,)] gxv
    gxx:f64[36] = sub gxu gxw
    gxy:f64[1,36] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 36)] gxx
    gxz:f64[400,36] = mul gxs gxy
    gya:f64[400,36] = div gxz 2.0
    gyb:f64[36,1] = slice[
      limit_indices=(36, 1)
      start_indices=(0, 0)
      strides=None
    ] vo
    gyc:f64[36] = squeeze[dimensions=(1,)] gyb
    gyd:f64[1,36] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 36)] gyc
    gye:f64[400,36] = add gya gyd
    gyf:f64[400,36] = add bdw 1.0
    gyg:f64[36,1] = slice[
      limit_indices=(36, 2)
      start_indices=(0, 1)
      strides=None
    ] vo
    gyh:f64[36] = squeeze[dimensions=(1,)] gyg
    gyi:f64[36,1] = slice[
      limit_indices=(36, 1)
      start_indices=(0, 0)
      strides=None
    ] vo
    gyj:f64[36] = squeeze[dimensions=(1,)] gyi
    gyk:f64[36] = sub gyh gyj
    gyl:f64[1,36] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 36)] gyk
    gym:f64[400,36] = mul gyf gyl
    gyn:f64[400,36] = div gym 2.0
    gyo:f64[36,1] = slice[
      limit_indices=(36, 1)
      start_indices=(0, 0)
      strides=None
    ] vo
    gyp:f64[36] = squeeze[dimensions=(1,)] gyo
    gyq:f64[1,36] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 36)] gyp
    gyr:f64[400,36] = add gyn gyq
    gys:f64[9,1] = slice[limit_indices=(9, 2) start_indices=(0, 1) strides=None] vp
    gyt:f64[9] = squeeze[dimensions=(1,)] gys
    gyu:f64[9,1] = slice[limit_indices=(9, 1) start_indices=(0, 0) strides=None] vp
    gyv:f64[9] = squeeze[dimensions=(1,)] gyu
    gyw:f64[9] = sub gyt gyv
    gyx:f64[1,9] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 9)] gyw
    gyy:f64[400,9] = mul gyx bds
    gyz:f64[400,9] = div gyy 2.0
    gza:f64[9,1] = slice[limit_indices=(9, 2) start_indices=(0, 1) strides=None] vp
    gzb:f64[9] = squeeze[dimensions=(1,)] gza
    gzc:f64[9,1] = slice[limit_indices=(9, 1) start_indices=(0, 0) strides=None] vp
    gzd:f64[9] = squeeze[dimensions=(1,)] gzc
    gze:f64[9] = add gzb gzd
    gzf:f64[9] = div gze 2.0
    gzg:f64[1,9] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 9)] gzf
    gzh:f64[400,9] = add gyz gzg
    gzi:f64[400,36] = add bdw 1.0
    gzj:f64[36,1] = slice[
      limit_indices=(36, 2)
      start_indices=(0, 1)
      strides=None
    ] vo
    gzk:f64[36] = squeeze[dimensions=(1,)] gzj
    gzl:f64[36,1] = slice[
      limit_indices=(36, 1)
      start_indices=(0, 0)
      strides=None
    ] vo
    gzm:f64[36] = squeeze[dimensions=(1,)] gzl
    gzn:f64[36] = sub gzk gzm
    gzo:f64[1,36] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 36)] gzn
    gzp:f64[400,36] = mul gzi gzo
    gzq:f64[400,36] = div gzp 2.0
    gzr:f64[36,1] = slice[
      limit_indices=(36, 1)
      start_indices=(0, 0)
      strides=None
    ] vo
    gzs:f64[36] = squeeze[dimensions=(1,)] gzr
    gzt:f64[1,36] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 36)] gzs
    gzu:f64[400,36] = add gzq gzt
    gzv:f64[400,1] = slice[
      limit_indices=(400, 9)
      start_indices=(0, 8)
      strides=None
    ] gzh
    gzw:f64[400] = squeeze[dimensions=(1,)] gzv
    gzx:f64[] = mul zj 1.0
    gzy:f64[400,1] = slice[
      limit_indices=(400, 35)
      start_indices=(0, 34)
      strides=None
    ] gzu
    gzz:f64[400] = squeeze[dimensions=(1,)] gzy
    haa:f64[400,1] = slice[
      limit_indices=(400, 36)
      start_indices=(0, 35)
      strides=None
    ] gzu
    hab:f64[400] = squeeze[dimensions=(1,)] haa
    hac:f64[400] = atan2 hab gzz
    had:f64[1] = slice[limit_indices=(1,) start_indices=(0,) strides=None] bae
    hae:f64[] = squeeze[dimensions=(0,)] had
    haf:f64[400] = div hac 6.283185307179586
    hag:f64[400] = add haf 0.5
    hah:f64[400] = add hag hae
    hai:f64[400] = pjit[name=remainder jaxpr=remainder] hah 1
    haj:bool[400] = lt hai 0.5
    hak:bool[400] = broadcast_in_dim[broadcast_dimensions=() shape=(400,)] False
    hal:bool[400] = broadcast_in_dim[broadcast_dimensions=() shape=(400,)] True
    ham:bool[400] = select_n haj hak hal
    han:f64[400] = div hai 0.5
    hao:f64[400] = sub hai 0.5
    hap:f64[400] = div hao 0.5
    haq:f64[400] = select_n ham hap han
    har:f64[1] = slice[limit_indices=(2,) start_indices=(1,) strides=None] bae
    has:f64[] = squeeze[dimensions=(0,)] har
    hat:f64[400] = div hac 6.283185307179586
    hau:f64[400] = add hat 0.5
    hav:f64[400] = add hau has
    haw:f64[400] = pjit[name=remainder jaxpr=remainder] hav 1
    hax:bool[400] = lt haw 0.5
    hay:bool[400] = broadcast_in_dim[broadcast_dimensions=() shape=(400,)] False
    haz:bool[400] = broadcast_in_dim[broadcast_dimensions=() shape=(400,)] True
    hba:bool[400] = select_n hax hay haz
    hbb:f64[400] = div haw 0.5
    hbc:f64[400] = sub haw 0.5
    hbd:f64[400] = div hbc 0.5
    hbe:f64[400] = select_n hba hbd hbb
    hbf:f64[1] = slice[limit_indices=(3,) start_indices=(2,) strides=None] bae
    hbg:f64[] = squeeze[dimensions=(0,)] hbf
    hbh:f64[400] = div hac 6.283185307179586
    hbi:f64[400] = add hbh 0.5
    hbj:f64[400] = add hbi hbg
    hbk:f64[400] = pjit[name=remainder jaxpr=remainder] hbj 1
    hbl:bool[400] = lt hbk 0.5
    hbm:bool[400] = broadcast_in_dim[broadcast_dimensions=() shape=(400,)] False
    hbn:bool[400] = broadcast_in_dim[broadcast_dimensions=() shape=(400,)] True
    hbo:bool[400] = select_n hbl hbm hbn
    hbp:f64[400] = div hbk 0.5
    hbq:f64[400] = sub hbk 0.5
    hbr:f64[400] = div hbq 0.5
    hbs:f64[400] = select_n hbo hbr hbp
    hbt:f64[1] = slice[limit_indices=(4,) start_indices=(3,) strides=None] bae
    hbu:f64[] = squeeze[dimensions=(0,)] hbt
    hbv:f64[400] = div hac 6.283185307179586
    hbw:f64[400] = add hbv 0.5
    hbx:f64[400] = add hbw hbu
    hby:f64[400] = pjit[name=remainder jaxpr=remainder] hbx 1
    hbz:bool[400] = lt hby 0.5
    hca:bool[400] = broadcast_in_dim[broadcast_dimensions=() shape=(400,)] False
    hcb:bool[400] = broadcast_in_dim[broadcast_dimensions=() shape=(400,)] True
    hcc:bool[400] = select_n hbz hca hcb
    hcd:f64[400] = div hby 0.5
    hce:f64[400] = sub hby 0.5
    hcf:f64[400] = div hce 0.5
    hcg:f64[400] = select_n hcc hcf hcd
    hch:f64[8] = broadcast_in_dim[broadcast_dimensions=() shape=(8,)] 0.0
    hci:f64[1] = slice[limit_indices=(1,) start_indices=(0,) strides=None] zk
    hcj:f64[] = squeeze[dimensions=(0,)] hci
    hck:f64[1] = slice[limit_indices=(1,) start_indices=(0,) strides=None] zl
    hcl:f64[] = squeeze[dimensions=(0,)] hck
    hcm:f64[] = select_n True hcl hcj
    hcn:f64[1] = slice[limit_indices=(2,) start_indices=(1,) strides=None] zk
    hco:f64[] = squeeze[dimensions=(0,)] hcn
    hcp:f64[1] = slice[limit_indices=(2,) start_indices=(1,) strides=None] zm
    hcq:f64[] = squeeze[dimensions=(0,)] hcp
    hcr:f64[] = select_n True hcq hco
    hcs:f64[] = mul 0.0 0.25
    hct:f64[] = atan2 hcr hcm
    hcu:f64[] = add hct hcs
    hcv:f64[] = cos hcu
    hcw:f64[] = convert_element_type[new_dtype=float64 weak_type=False] zn
    hcx:f64[] = mul hcw hcv
    hcy:f64[] = sub hcx hcm
    hcz:f64[] = atan2 hcr hcm
    hda:f64[] = add hcz hcs
    hdb:f64[] = sin hda
    hdc:f64[] = convert_element_type[new_dtype=float64 weak_type=False] zn
    hdd:f64[] = mul hdc hdb
    hde:f64[] = sub hdd hcr
    hdf:f64[2] = slice[limit_indices=(2,) start_indices=(0,) strides=None] hch
    hdg:f64[1] = slice[limit_indices=(1,) start_indices=(0,) strides=None] hdf
    hdh:f64[] = squeeze[dimensions=(0,)] hdg
    hdi:f64[2] = slice[limit_indices=(2,) start_indices=(0,) strides=None] hch
    hdj:f64[1] = slice[limit_indices=(2,) start_indices=(1,) strides=None] hdi
    hdk:f64[] = squeeze[dimensions=(0,)] hdj
    hdl:f64[] = mul gzx 0.25
    hdm:f64[] = add hdl hcy
    hdn:f64[] = add hdm hdh
    hdo:f64[] = add hde hdk
    hdp:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] hdn
    hdq:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] hdo
    hdr:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0.0
    hds:f64[3] = concatenate[dimension=0] hdp hdq hdr
    hdt:f64[3] = neg hds
    hdu:f64[8] = broadcast_in_dim[broadcast_dimensions=() shape=(8,)] 0.0
    hdv:f64[1] = slice[limit_indices=(1,) start_indices=(0,) strides=None] zk
    hdw:f64[] = squeeze[dimensions=(0,)] hdv
    hdx:f64[1] = slice[limit_indices=(1,) start_indices=(0,) strides=None] zl
    hdy:f64[] = squeeze[dimensions=(0,)] hdx
    hdz:f64[] = select_n True hdy hdw
    hea:f64[1] = slice[limit_indices=(2,) start_indices=(1,) strides=None] zk
    heb:f64[] = squeeze[dimensions=(0,)] hea
    hec:f64[1] = slice[limit_indices=(2,) start_indices=(1,) strides=None] zm
    hed:f64[] = squeeze[dimensions=(0,)] hec
    hee:f64[] = select_n False hed heb
    hef:f64[] = mul 0.0 0.25
    heg:f64[] = atan2 hee hdz
    heh:f64[] = add heg hef
    hei:f64[] = cos heh
    hej:f64[] = convert_element_type[new_dtype=float64 weak_type=False] zn
    hek:f64[] = mul hej hei
    hel:f64[] = sub hek hdz
    hem:f64[] = atan2 hee hdz
    hen:f64[] = add hem hef
    heo:f64[] = sin hen
    hep:f64[] = convert_element_type[new_dtype=float64 weak_type=False] zn
    heq:f64[] = mul hep heo
    her:f64[] = sub heq hee
    hes:f64[2] = slice[limit_indices=(4,) start_indices=(2,) strides=None] hdu
    het:f64[1] = slice[limit_indices=(1,) start_indices=(0,) strides=None] hes
    heu:f64[] = squeeze[dimensions=(0,)] het
    hev:f64[2] = slice[limit_indices=(4,) start_indices=(2,) strides=None] hdu
    hew:f64[1] = slice[limit_indices=(2,) start_indices=(1,) strides=None] hev
    hex:f64[] = squeeze[dimensions=(0,)] hew
    hey:f64[] = mul gzx 0.25
    hez:f64[] = add hey hel
    hfa:f64[] = add hez heu
    hfb:f64[] = add her hex
    hfc:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] hfa
    hfd:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] hfb
    hfe:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0.0
    hff:f64[3] = concatenate[dimension=0] hfc hfd hfe
    hfg:f64[3] = neg hff
    hfh:f64[8] = broadcast_in_dim[broadcast_dimensions=() shape=(8,)] 0.0
    hfi:f64[1] = slice[limit_indices=(1,) start_indices=(0,) strides=None] zk
    hfj:f64[] = squeeze[dimensions=(0,)] hfi
    hfk:f64[1] = slice[limit_indices=(1,) start_indices=(0,) strides=None] zl
    hfl:f64[] = squeeze[dimensions=(0,)] hfk
    hfm:f64[] = select_n False hfl hfj
    hfn:f64[1] = slice[limit_indices=(2,) start_indices=(1,) strides=None] zk
    hfo:f64[] = squeeze[dimensions=(0,)] hfn
    hfp:f64[1] = slice[limit_indices=(2,) start_indices=(1,) strides=None] zm
    hfq:f64[] = squeeze[dimensions=(0,)] hfp
    hfr:f64[] = select_n True hfq hfo
    hfs:f64[] = mul 0.0 0.25
    hft:f64[] = atan2 hfr hfm
    hfu:f64[] = add hft hfs
    hfv:f64[] = cos hfu
    hfw:f64[] = convert_element_type[new_dtype=float64 weak_type=False] zn
    hfx:f64[] = mul hfw hfv
    hfy:f64[] = sub hfx hfm
    hfz:f64[] = atan2 hfr hfm
    hga:f64[] = add hfz hfs
    hgb:f64[] = sin hga
    hgc:f64[] = convert_element_type[new_dtype=float64 weak_type=False] zn
    hgd:f64[] = mul hgc hgb
    hge:f64[] = sub hgd hfr
    hgf:f64[2] = slice[limit_indices=(6,) start_indices=(4,) strides=None] hfh
    hgg:f64[1] = slice[limit_indices=(1,) start_indices=(0,) strides=None] hgf
    hgh:f64[] = squeeze[dimensions=(0,)] hgg
    hgi:f64[2] = slice[limit_indices=(6,) start_indices=(4,) strides=None] hfh
    hgj:f64[1] = slice[limit_indices=(2,) start_indices=(1,) strides=None] hgi
    hgk:f64[] = squeeze[dimensions=(0,)] hgj
    hgl:f64[] = mul gzx 0.25
    hgm:f64[] = add hgl hfy
    hgn:f64[] = add hgm hgh
    hgo:f64[] = add hge hgk
    hgp:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] hgn
    hgq:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] hgo
    hgr:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0.0
    hgs:f64[3] = concatenate[dimension=0] hgp hgq hgr
    hgt:f64[3] = neg hgs
    hgu:f64[8] = broadcast_in_dim[broadcast_dimensions=() shape=(8,)] 0.0
    hgv:f64[1] = slice[limit_indices=(1,) start_indices=(0,) strides=None] zk
    hgw:f64[] = squeeze[dimensions=(0,)] hgv
    hgx:f64[1] = slice[limit_indices=(1,) start_indices=(0,) strides=None] zl
    hgy:f64[] = squeeze[dimensions=(0,)] hgx
    hgz:f64[] = select_n False hgy hgw
    hha:f64[1] = slice[limit_indices=(2,) start_indices=(1,) strides=None] zk
    hhb:f64[] = squeeze[dimensions=(0,)] hha
    hhc:f64[1] = slice[limit_indices=(2,) start_indices=(1,) strides=None] zm
    hhd:f64[] = squeeze[dimensions=(0,)] hhc
    hhe:f64[] = select_n False hhd hhb
    hhf:f64[] = mul 0.0 0.25
    hhg:f64[] = atan2 hhe hgz
    hhh:f64[] = add hhg hhf
    hhi:f64[] = cos hhh
    hhj:f64[] = convert_element_type[new_dtype=float64 weak_type=False] zn
    hhk:f64[] = mul hhj hhi
    hhl:f64[] = sub hhk hgz
    hhm:f64[] = atan2 hhe hgz
    hhn:f64[] = add hhm hhf
    hho:f64[] = sin hhn
    hhp:f64[] = convert_element_type[new_dtype=float64 weak_type=False] zn
    hhq:f64[] = mul hhp hho
    hhr:f64[] = sub hhq hhe
    hhs:f64[2] = slice[limit_indices=(8,) start_indices=(6,) strides=None] hgu
    hht:f64[1] = slice[limit_indices=(1,) start_indices=(0,) strides=None] hhs
    hhu:f64[] = squeeze[dimensions=(0,)] hht
    hhv:f64[2] = slice[limit_indices=(8,) start_indices=(6,) strides=None] hgu
    hhw:f64[1] = slice[limit_indices=(2,) start_indices=(1,) strides=None] hhv
    hhx:f64[] = squeeze[dimensions=(0,)] hhw
    hhy:f64[] = mul gzx 0.25
    hhz:f64[] = add hhy hhl
    hia:f64[] = add hhz hhu
    hib:f64[] = add hhr hhx
    hic:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] hia
    hid:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] hib
    hie:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0.0
    hif:f64[3] = concatenate[dimension=0] hic hid hie
    hig:f64[3] = neg hif
    hih:f64[1] = slice[limit_indices=(1,) start_indices=(0,) strides=None] zk
    hii:f64[] = squeeze[dimensions=(0,)] hih
    hij:f64[1] = slice[limit_indices=(1,) start_indices=(0,) strides=None] zl
    hik:f64[] = squeeze[dimensions=(0,)] hij
    hil:f64[] = select_n True hik hii
    him:f64[1] = slice[limit_indices=(2,) start_indices=(1,) strides=None] zk
    hin:f64[] = squeeze[dimensions=(0,)] him
    hio:f64[1] = slice[limit_indices=(2,) start_indices=(1,) strides=None] zm
    hip:f64[] = squeeze[dimensions=(0,)] hio
    hiq:f64[] = select_n True hip hin
    hir:f64[] = mul 0.0 0.25
    his:f64[] = atan2 hiq hil
    hit:f64[] = add his hir
    hiu:f64[] = cos hit
    hiv:f64[] = convert_element_type[new_dtype=float64 weak_type=False] zn
    hiw:f64[] = mul hiv hiu
    hix:f64[] = sub hiw hil
    hiy:f64[] = atan2 hiq hil
    hiz:f64[] = add hiy hir
    hja:f64[] = sin hiz
    hjb:f64[] = convert_element_type[new_dtype=float64 weak_type=False] zn
    hjc:f64[] = mul hjb hja
    hjd:f64[] = sub hjc hiq
    hje:f64[2] = slice[limit_indices=(2,) start_indices=(0,) strides=None] zo
    hjf:f64[1] = slice[limit_indices=(1,) start_indices=(0,) strides=None] hje
    hjg:f64[] = squeeze[dimensions=(0,)] hjf
    hjh:f64[2] = slice[limit_indices=(2,) start_indices=(0,) strides=None] zo
    hji:f64[1] = slice[limit_indices=(2,) start_indices=(1,) strides=None] hjh
    hjj:f64[] = squeeze[dimensions=(0,)] hji
    hjk:f64[] = mul gzx 0.25
    hjl:f64[] = add hjk hix
    hjm:f64[] = add hjl hjg
    hjn:f64[] = add hjd hjj
    hjo:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] hjm
    hjp:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] hjn
    hjq:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0.0
    hjr:f64[3] = concatenate[dimension=0] hjo hjp hjq
    hjs:f64[1] = slice[limit_indices=(1,) start_indices=(0,) strides=None] zk
    hjt:f64[] = squeeze[dimensions=(0,)] hjs
    hju:f64[1] = slice[limit_indices=(1,) start_indices=(0,) strides=None] zl
    hjv:f64[] = squeeze[dimensions=(0,)] hju
    hjw:f64[] = select_n True hjv hjt
    hjx:f64[1] = slice[limit_indices=(2,) start_indices=(1,) strides=None] zk
    hjy:f64[] = squeeze[dimensions=(0,)] hjx
    hjz:f64[1] = slice[limit_indices=(2,) start_indices=(1,) strides=None] zm
    hka:f64[] = squeeze[dimensions=(0,)] hjz
    hkb:f64[] = select_n False hka hjy
    hkc:f64[] = mul 0.0 0.25
    hkd:f64[] = atan2 hkb hjw
    hke:f64[] = add hkd hkc
    hkf:f64[] = cos hke
    hkg:f64[] = convert_element_type[new_dtype=float64 weak_type=False] zn
    hkh:f64[] = mul hkg hkf
    hki:f64[] = sub hkh hjw
    hkj:f64[] = atan2 hkb hjw
    hkk:f64[] = add hkj hkc
    hkl:f64[] = sin hkk
    hkm:f64[] = convert_element_type[new_dtype=float64 weak_type=False] zn
    hkn:f64[] = mul hkm hkl
    hko:f64[] = sub hkn hkb
    hkp:f64[2] = slice[limit_indices=(4,) start_indices=(2,) strides=None] zo
    hkq:f64[1] = slice[limit_indices=(1,) start_indices=(0,) strides=None] hkp
    hkr:f64[] = squeeze[dimensions=(0,)] hkq
    hks:f64[2] = slice[limit_indices=(4,) start_indices=(2,) strides=None] zo
    hkt:f64[1] = slice[limit_indices=(2,) start_indices=(1,) strides=None] hks
    hku:f64[] = squeeze[dimensions=(0,)] hkt
    hkv:f64[] = mul gzx 0.25
    hkw:f64[] = add hkv hki
    hkx:f64[] = add hkw hkr
    hky:f64[] = add hko hku
    hkz:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] hkx
    hla:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] hky
    hlb:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0.0
    hlc:f64[3] = concatenate[dimension=0] hkz hla hlb
    hld:f64[1] = slice[limit_indices=(1,) start_indices=(0,) strides=None] zk
    hle:f64[] = squeeze[dimensions=(0,)] hld
    hlf:f64[1] = slice[limit_indices=(1,) start_indices=(0,) strides=None] zl
    hlg:f64[] = squeeze[dimensions=(0,)] hlf
    hlh:f64[] = select_n False hlg hle
    hli:f64[1] = slice[limit_indices=(2,) start_indices=(1,) strides=None] zk
    hlj:f64[] = squeeze[dimensions=(0,)] hli
    hlk:f64[1] = slice[limit_indices=(2,) start_indices=(1,) strides=None] zm
    hll:f64[] = squeeze[dimensions=(0,)] hlk
    hlm:f64[] = select_n True hll hlj
    hln:f64[] = mul 0.0 0.25
    hlo:f64[] = atan2 hlm hlh
    hlp:f64[] = add hlo hln
    hlq:f64[] = cos hlp
    hlr:f64[] = convert_element_type[new_dtype=float64 weak_type=False] zn
    hls:f64[] = mul hlr hlq
    hlt:f64[] = sub hls hlh
    hlu:f64[] = atan2 hlm hlh
    hlv:f64[] = add hlu hln
    hlw:f64[] = sin hlv
    hlx:f64[] = convert_element_type[new_dtype=float64 weak_type=False] zn
    hly:f64[] = mul hlx hlw
    hlz:f64[] = sub hly hlm
    hma:f64[2] = slice[limit_indices=(6,) start_indices=(4,) strides=None] zo
    hmb:f64[1] = slice[limit_indices=(1,) start_indices=(0,) strides=None] hma
    hmc:f64[] = squeeze[dimensions=(0,)] hmb
    hmd:f64[2] = slice[limit_indices=(6,) start_indices=(4,) strides=None] zo
    hme:f64[1] = slice[limit_indices=(2,) start_indices=(1,) strides=None] hmd
    hmf:f64[] = squeeze[dimensions=(0,)] hme
    hmg:f64[] = mul gzx 0.25
    hmh:f64[] = add hmg hlt
    hmi:f64[] = add hmh hmc
    hmj:f64[] = add hlz hmf
    hmk:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] hmi
    hml:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] hmj
    hmm:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0.0
    hmn:f64[3] = concatenate[dimension=0] hmk hml hmm
    hmo:f64[1] = slice[limit_indices=(1,) start_indices=(0,) strides=None] zk
    hmp:f64[] = squeeze[dimensions=(0,)] hmo
    hmq:f64[1] = slice[limit_indices=(1,) start_indices=(0,) strides=None] zl
    hmr:f64[] = squeeze[dimensions=(0,)] hmq
    hms:f64[] = select_n False hmr hmp
    hmt:f64[1] = slice[limit_indices=(2,) start_indices=(1,) strides=None] zk
    hmu:f64[] = squeeze[dimensions=(0,)] hmt
    hmv:f64[1] = slice[limit_indices=(2,) start_indices=(1,) strides=None] zm
    hmw:f64[] = squeeze[dimensions=(0,)] hmv
    hmx:f64[] = select_n False hmw hmu
    hmy:f64[] = mul 0.0 0.25
    hmz:f64[] = atan2 hmx hms
    hna:f64[] = add hmz hmy
    hnb:f64[] = cos hna
    hnc:f64[] = convert_element_type[new_dtype=float64 weak_type=False] zn
    hnd:f64[] = mul hnc hnb
    hne:f64[] = sub hnd hms
    hnf:f64[] = atan2 hmx hms
    hng:f64[] = add hnf hmy
    hnh:f64[] = sin hng
    hni:f64[] = convert_element_type[new_dtype=float64 weak_type=False] zn
    hnj:f64[] = mul hni hnh
    hnk:f64[] = sub hnj hmx
    hnl:f64[2] = slice[limit_indices=(8,) start_indices=(6,) strides=None] zo
    hnm:f64[1] = slice[limit_indices=(1,) start_indices=(0,) strides=None] hnl
    hnn:f64[] = squeeze[dimensions=(0,)] hnm
    hno:f64[2] = slice[limit_indices=(8,) start_indices=(6,) strides=None] zo
    hnp:f64[1] = slice[limit_indices=(2,) start_indices=(1,) strides=None] hno
    hnq:f64[] = squeeze[dimensions=(0,)] hnp
    hnr:f64[] = mul gzx 0.25
    hns:f64[] = add hnr hne
    hnt:f64[] = add hns hnn
    hnu:f64[] = add hnk hnq
    hnv:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] hnt
    hnw:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] hnu
    hnx:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0.0
    hny:f64[3] = concatenate[dimension=0] hnv hnw hnx
    hnz:f64[1] = slice[limit_indices=(1,) start_indices=(0,) strides=None] hdt
    hoa:f64[] = squeeze[dimensions=(0,)] hnz
    hob:f64[1] = slice[limit_indices=(1,) start_indices=(0,) strides=None] hjr
    hoc:f64[] = squeeze[dimensions=(0,)] hob
    hod:f64[] = sub hoc hoa
    hoe:f64[] = div hod 6.283185307179586
    hof:f64[400] = mul 6.283185307179586 haq
    hog:f64[400] = mul 6.283185307179586 haq
    hoh:f64[400] = sin hog
    hoi:f64[400] = sub hof hoh
    hoj:f64[400] = mul hoe hoi
    hok:f64[400] = add hoj hoa
    hol:f64[1] = slice[limit_indices=(2,) start_indices=(1,) strides=None] hdt
    hom:f64[] = squeeze[dimensions=(0,)] hol
    hon:f64[1] = slice[limit_indices=(2,) start_indices=(1,) strides=None] hjr
    hoo:f64[] = squeeze[dimensions=(0,)] hon
    hop:f64[] = sub hoo hom
    hoq:f64[] = div hop 6.283185307179586
    hor:f64[400] = mul 6.283185307179586 haq
    hos:f64[400] = mul 6.283185307179586 haq
    hot:f64[400] = sin hos
    hou:f64[400] = sub hor hot
    hov:f64[400] = mul hoq hou
    how:f64[400] = add hov hom
    hox:f64[400] = mul 6.283185307179586 haq
    hoy:f64[400] = cos hox
    hoz:f64[400] = sub 1.0 hoy
    hpa:f64[400] = mul 0.045 hoz
    hpb:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] hok
    hpc:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] how
    hpd:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] hpa
    hpe:f64[400,3] = concatenate[dimension=1] hpb hpc hpd
    hpf:f64[1] = slice[limit_indices=(1,) start_indices=(0,) strides=None] hfg
    hpg:f64[] = squeeze[dimensions=(0,)] hpf
    hph:f64[1] = slice[limit_indices=(1,) start_indices=(0,) strides=None] hlc
    hpi:f64[] = squeeze[dimensions=(0,)] hph
    hpj:f64[] = sub hpi hpg
    hpk:f64[] = div hpj 6.283185307179586
    hpl:f64[400] = mul 6.283185307179586 hbe
    hpm:f64[400] = mul 6.283185307179586 hbe
    hpn:f64[400] = sin hpm
    hpo:f64[400] = sub hpl hpn
    hpp:f64[400] = mul hpk hpo
    hpq:f64[400] = add hpp hpg
    hpr:f64[1] = slice[limit_indices=(2,) start_indices=(1,) strides=None] hfg
    hps:f64[] = squeeze[dimensions=(0,)] hpr
    hpt:f64[1] = slice[limit_indices=(2,) start_indices=(1,) strides=None] hlc
    hpu:f64[] = squeeze[dimensions=(0,)] hpt
    hpv:f64[] = sub hpu hps
    hpw:f64[] = div hpv 6.283185307179586
    hpx:f64[400] = mul 6.283185307179586 hbe
    hpy:f64[400] = mul 6.283185307179586 hbe
    hpz:f64[400] = sin hpy
    hqa:f64[400] = sub hpx hpz
    hqb:f64[400] = mul hpw hqa
    hqc:f64[400] = add hqb hps
    hqd:f64[400] = mul 6.283185307179586 hbe
    hqe:f64[400] = cos hqd
    hqf:f64[400] = sub 1.0 hqe
    hqg:f64[400] = mul 0.045 hqf
    hqh:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] hpq
    hqi:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] hqc
    hqj:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] hqg
    hqk:f64[400,3] = concatenate[dimension=1] hqh hqi hqj
    hql:f64[1] = slice[limit_indices=(1,) start_indices=(0,) strides=None] hgt
    hqm:f64[] = squeeze[dimensions=(0,)] hql
    hqn:f64[1] = slice[limit_indices=(1,) start_indices=(0,) strides=None] hmn
    hqo:f64[] = squeeze[dimensions=(0,)] hqn
    hqp:f64[] = sub hqo hqm
    hqq:f64[] = div hqp 6.283185307179586
    hqr:f64[400] = mul 6.283185307179586 hbs
    hqs:f64[400] = mul 6.283185307179586 hbs
    hqt:f64[400] = sin hqs
    hqu:f64[400] = sub hqr hqt
    hqv:f64[400] = mul hqq hqu
    hqw:f64[400] = add hqv hqm
    hqx:f64[1] = slice[limit_indices=(2,) start_indices=(1,) strides=None] hgt
    hqy:f64[] = squeeze[dimensions=(0,)] hqx
    hqz:f64[1] = slice[limit_indices=(2,) start_indices=(1,) strides=None] hmn
    hra:f64[] = squeeze[dimensions=(0,)] hqz
    hrb:f64[] = sub hra hqy
    hrc:f64[] = div hrb 6.283185307179586
    hrd:f64[400] = mul 6.283185307179586 hbs
    hre:f64[400] = mul 6.283185307179586 hbs
    hrf:f64[400] = sin hre
    hrg:f64[400] = sub hrd hrf
    hrh:f64[400] = mul hrc hrg
    hri:f64[400] = add hrh hqy
    hrj:f64[400] = mul 6.283185307179586 hbs
    hrk:f64[400] = cos hrj
    hrl:f64[400] = sub 1.0 hrk
    hrm:f64[400] = mul 0.045 hrl
    hrn:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] hqw
    hro:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] hri
    hrp:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] hrm
    hrq:f64[400,3] = concatenate[dimension=1] hrn hro hrp
    hrr:f64[1] = slice[limit_indices=(1,) start_indices=(0,) strides=None] hig
    hrs:f64[] = squeeze[dimensions=(0,)] hrr
    hrt:f64[1] = slice[limit_indices=(1,) start_indices=(0,) strides=None] hny
    hru:f64[] = squeeze[dimensions=(0,)] hrt
    hrv:f64[] = sub hru hrs
    hrw:f64[] = div hrv 6.283185307179586
    hrx:f64[400] = mul 6.283185307179586 hcg
    hry:f64[400] = mul 6.283185307179586 hcg
    hrz:f64[400] = sin hry
    hsa:f64[400] = sub hrx hrz
    hsb:f64[400] = mul hrw hsa
    hsc:f64[400] = add hsb hrs
    hsd:f64[1] = slice[limit_indices=(2,) start_indices=(1,) strides=None] hig
    hse:f64[] = squeeze[dimensions=(0,)] hsd
    hsf:f64[1] = slice[limit_indices=(2,) start_indices=(1,) strides=None] hny
    hsg:f64[] = squeeze[dimensions=(0,)] hsf
    hsh:f64[] = sub hsg hse
    hsi:f64[] = div hsh 6.283185307179586
    hsj:f64[400] = mul 6.283185307179586 hcg
    hsk:f64[400] = mul 6.283185307179586 hcg
    hsl:f64[400] = sin hsk
    hsm:f64[400] = sub hsj hsl
    hsn:f64[400] = mul hsi hsm
    hso:f64[400] = add hsn hse
    hsp:f64[400] = mul 6.283185307179586 hcg
    hsq:f64[400] = cos hsp
    hsr:f64[400] = sub 1.0 hsq
    hss:f64[400] = mul 0.045 hsr
    hst:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] hsc
    hsu:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] hso
    hsv:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] hss
    hsw:f64[400,3] = concatenate[dimension=1] hst hsu hsv
    hsx:f64[1] = slice[limit_indices=(1,) start_indices=(0,) strides=None] hjr
    hsy:f64[] = squeeze[dimensions=(0,)] hsx
    hsz:f64[1] = slice[limit_indices=(1,) start_indices=(0,) strides=None] hdt
    hta:f64[] = squeeze[dimensions=(0,)] hsz
    htb:f64[] = sub hta hsy
    htc:f64[] = div htb 6.283185307179586
    htd:f64[400] = mul 6.283185307179586 haq
    hte:f64[400] = mul 6.283185307179586 haq
    htf:f64[400] = sin hte
    htg:f64[400] = sub htd htf
    hth:f64[400] = mul htc htg
    hti:f64[400] = add hth hsy
    htj:f64[1] = slice[limit_indices=(2,) start_indices=(1,) strides=None] hjr
    htk:f64[] = squeeze[dimensions=(0,)] htj
    htl:f64[1] = slice[limit_indices=(2,) start_indices=(1,) strides=None] hdt
    htm:f64[] = squeeze[dimensions=(0,)] htl
    htn:f64[] = sub htm htk
    hto:f64[] = div htn 6.283185307179586
    htp:f64[400] = mul 6.283185307179586 haq
    htq:f64[400] = mul 6.283185307179586 haq
    htr:f64[400] = sin htq
    hts:f64[400] = sub htp htr
    htt:f64[400] = mul hto hts
    htu:f64[400] = add htt htk
    htv:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] hti
    htw:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] htu
    htx:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0.0
    hty:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(400, 1)] htx
    htz:f64[400,3] = concatenate[dimension=1] htv htw hty
    hua:f64[1] = slice[limit_indices=(1,) start_indices=(0,) strides=None] hlc
    hub:f64[] = squeeze[dimensions=(0,)] hua
    huc:f64[1] = slice[limit_indices=(1,) start_indices=(0,) strides=None] hfg
    hud:f64[] = squeeze[dimensions=(0,)] huc
    hue:f64[] = sub hud hub
    huf:f64[] = div hue 6.283185307179586
    hug:f64[400] = mul 6.283185307179586 hbe
    huh:f64[400] = mul 6.283185307179586 hbe
    hui:f64[400] = sin huh
    huj:f64[400] = sub hug hui
    huk:f64[400] = mul huf huj
    hul:f64[400] = add huk hub
    hum:f64[1] = slice[limit_indices=(2,) start_indices=(1,) strides=None] hlc
    hun:f64[] = squeeze[dimensions=(0,)] hum
    huo:f64[1] = slice[limit_indices=(2,) start_indices=(1,) strides=None] hfg
    hup:f64[] = squeeze[dimensions=(0,)] huo
    huq:f64[] = sub hup hun
    hur:f64[] = div huq 6.283185307179586
    hus:f64[400] = mul 6.283185307179586 hbe
    hut:f64[400] = mul 6.283185307179586 hbe
    huu:f64[400] = sin hut
    huv:f64[400] = sub hus huu
    huw:f64[400] = mul hur huv
    hux:f64[400] = add huw hun
    huy:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] hul
    huz:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] hux
    hva:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0.0
    hvb:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(400, 1)] hva
    hvc:f64[400,3] = concatenate[dimension=1] huy huz hvb
    hvd:f64[1] = slice[limit_indices=(1,) start_indices=(0,) strides=None] hmn
    hve:f64[] = squeeze[dimensions=(0,)] hvd
    hvf:f64[1] = slice[limit_indices=(1,) start_indices=(0,) strides=None] hgt
    hvg:f64[] = squeeze[dimensions=(0,)] hvf
    hvh:f64[] = sub hvg hve
    hvi:f64[] = div hvh 6.283185307179586
    hvj:f64[400] = mul 6.283185307179586 hbs
    hvk:f64[400] = mul 6.283185307179586 hbs
    hvl:f64[400] = sin hvk
    hvm:f64[400] = sub hvj hvl
    hvn:f64[400] = mul hvi hvm
    hvo:f64[400] = add hvn hve
    hvp:f64[1] = slice[limit_indices=(2,) start_indices=(1,) strides=None] hmn
    hvq:f64[] = squeeze[dimensions=(0,)] hvp
    hvr:f64[1] = slice[limit_indices=(2,) start_indices=(1,) strides=None] hgt
    hvs:f64[] = squeeze[dimensions=(0,)] hvr
    hvt:f64[] = sub hvs hvq
    hvu:f64[] = div hvt 6.283185307179586
    hvv:f64[400] = mul 6.283185307179586 hbs
    hvw:f64[400] = mul 6.283185307179586 hbs
    hvx:f64[400] = sin hvw
    hvy:f64[400] = sub hvv hvx
    hvz:f64[400] = mul hvu hvy
    hwa:f64[400] = add hvz hvq
    hwb:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] hvo
    hwc:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] hwa
    hwd:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0.0
    hwe:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(400, 1)] hwd
    hwf:f64[400,3] = concatenate[dimension=1] hwb hwc hwe
    hwg:f64[1] = slice[limit_indices=(1,) start_indices=(0,) strides=None] hny
    hwh:f64[] = squeeze[dimensions=(0,)] hwg
    hwi:f64[1] = slice[limit_indices=(1,) start_indices=(0,) strides=None] hig
    hwj:f64[] = squeeze[dimensions=(0,)] hwi
    hwk:f64[] = sub hwj hwh
    hwl:f64[] = div hwk 6.283185307179586
    hwm:f64[400] = mul 6.283185307179586 hcg
    hwn:f64[400] = mul 6.283185307179586 hcg
    hwo:f64[400] = sin hwn
    hwp:f64[400] = sub hwm hwo
    hwq:f64[400] = mul hwl hwp
    hwr:f64[400] = add hwq hwh
    hws:f64[1] = slice[limit_indices=(2,) start_indices=(1,) strides=None] hny
    hwt:f64[] = squeeze[dimensions=(0,)] hws
    hwu:f64[1] = slice[limit_indices=(2,) start_indices=(1,) strides=None] hig
    hwv:f64[] = squeeze[dimensions=(0,)] hwu
    hww:f64[] = sub hwv hwt
    hwx:f64[] = div hww 6.283185307179586
    hwy:f64[400] = mul 6.283185307179586 hcg
    hwz:f64[400] = mul 6.283185307179586 hcg
    hxa:f64[400] = sin hwz
    hxb:f64[400] = sub hwy hxa
    hxc:f64[400] = mul hwx hxb
    hxd:f64[400] = add hxc hwt
    hxe:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] hwr
    hxf:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] hxd
    hxg:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0.0
    hxh:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(400, 1)] hxg
    hxi:f64[400,3] = concatenate[dimension=1] hxe hxf hxh
    hxj:bool[400,3] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 3)] ham
    hxk:f64[400,3] = select_n hxj hpe htz
    hxl:f64[1,3] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 3)] zk
    hxm:f64[400,3] = add hxl hxk
    hxn:bool[400,3] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 3)] hba
    hxo:f64[400,3] = select_n hxn hqk hvc
    hxp:f64[1,3] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 3)] zm
    hxq:f64[400,3] = add hxp hxo
    hxr:bool[400,3] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 3)] hbo
    hxs:f64[400,3] = select_n hxr hrq hwf
    hxt:f64[1,3] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 3)] zl
    hxu:f64[400,3] = add hxt hxs
    hxv:bool[400,3] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 3)] hcc
    hxw:f64[400,3] = select_n hxv hsw hxi
    hxx:f64[1,3] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 3)] zp
    hxy:f64[400,3] = add hxx hxw
    hxz:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0.0
    hya:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0.0
    hyb:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] gzw
    hyc:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(400, 1)] hxz
    hyd:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(400, 1)] hya
    hye:f64[400,3] = concatenate[dimension=1] hyc hyd hyb
    hyf:f64[400,1,3] = reshape[dimensions=None new_sizes=(400, 1, 3)] hye
    hyg:f64[400,3] = squeeze[dimensions=(1,)] hyf
    hyh:f64[400,4,3] = broadcast_in_dim[
      broadcast_dimensions=(0, 2)
      shape=(400, 4, 3)
    ] hyg
    hyi:f64[400,12] = reshape[dimensions=None new_sizes=(400, 12)] hyh
    hyj:f64[400,12] = concatenate[dimension=1] hxm hxq hxu hxy
    hyk:f64[400,12] = sub hyj hyi
    hyl:f64[400,8] = slice[
      limit_indices=(400, 8)
      start_indices=(0, 0)
      strides=None
    ] gzh
    hym:f64[400,1] = slice[
      limit_indices=(400, 1)
      start_indices=(0, 0)
      strides=None
    ] hyl
    hyn:f64[400] = squeeze[dimensions=(1,)] hym
    hyo:f64[400,1] = slice[
      limit_indices=(400, 5)
      start_indices=(0, 4)
      strides=None
    ] hyl
    hyp:f64[400] = squeeze[dimensions=(1,)] hyo
    hyq:f64[400,1] = slice[
      limit_indices=(400, 2)
      start_indices=(0, 1)
      strides=None
    ] hyl
    hyr:f64[400] = squeeze[dimensions=(1,)] hyq
    hys:f64[400,1] = slice[
      limit_indices=(400, 6)
      start_indices=(0, 5)
      strides=None
    ] hyl
    hyt:f64[400] = squeeze[dimensions=(1,)] hys
    hyu:f64[400,1] = slice[
      limit_indices=(400, 3)
      start_indices=(0, 2)
      strides=None
    ] hyl
    hyv:f64[400] = squeeze[dimensions=(1,)] hyu
    hyw:f64[400,1] = slice[
      limit_indices=(400, 7)
      start_indices=(0, 6)
      strides=None
    ] hyl
    hyx:f64[400] = squeeze[dimensions=(1,)] hyw
    hyy:f64[400,1] = slice[
      limit_indices=(400, 4)
      start_indices=(0, 3)
      strides=None
    ] hyl
    hyz:f64[400] = squeeze[dimensions=(1,)] hyy
    hza:f64[400,1] = slice[
      limit_indices=(400, 8)
      start_indices=(0, 7)
      strides=None
    ] hyl
    hzb:f64[400] = squeeze[dimensions=(1,)] hza
    hzc:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] hyn
    hzd:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] hyp
    hze:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0.0
    hzf:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] hyr
    hzg:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] hyt
    hzh:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0.0
    hzi:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] hyv
    hzj:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] hyx
    hzk:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0.0
    hzl:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] hyz
    hzm:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] hzb
    hzn:f64[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0.0
    hzo:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(400, 1)] hze
    hzp:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(400, 1)] hzh
    hzq:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(400, 1)] hzk
    hzr:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(400, 1)] hzn
    hzs:f64[400,12] = concatenate[dimension=1] hzc hzd hzo hzf hzg hzp hzi hzj hzq
      hzl hzm hzr
    hzt:f64[400,12] = add hyk hzs
    hzu:f64[400,3] = slice[
      limit_indices=(400, 3)
      start_indices=(0, 0)
      strides=None
    ] hzt
    hzv:f64[] = select_n False 0.1881 -0.1881
    hzw:f64[] = select_n True 0.04675 -0.04675
    hzx:f64[400,1] = slice[
      limit_indices=(400, 1)
      start_indices=(0, 0)
      strides=None
    ] hzu
    hzy:f64[400] = squeeze[dimensions=(1,)] hzx
    hzz:f64[] = convert_element_type[new_dtype=float64 weak_type=False] hzv
    iaa:f64[400] = sub hzy hzz
    iab:f64[400,1] = slice[
      limit_indices=(400, 2)
      start_indices=(0, 1)
      strides=None
    ] hzu
    iac:f64[400] = squeeze[dimensions=(1,)] iab
    iad:f64[] = convert_element_type[new_dtype=float64 weak_type=False] hzw
    iae:f64[400] = sub iac iad
    iaf:f64[400,1] = slice[
      limit_indices=(400, 3)
      start_indices=(0, 2)
      strides=None
    ] hzu
    iag:f64[400] = squeeze[dimensions=(1,)] iaf
    iah:f64[] = select_n True 0.08 -0.08
    iai:f64[400] = integer_pow[y=2] iaa
    iaj:f64[400] = integer_pow[y=2] iae
    iak:f64[400] = add iai iaj
    ial:f64[400] = integer_pow[y=2] iag
    iam:f64[400] = add iak ial
    ian:f64[400] = sqrt iam
    iao:f64[400] = integer_pow[y=2] ian
    iap:f64[400] = sub iao 0.0064
    iaq:f64[400] = sqrt iap
    iar:f64[400] = integer_pow[y=2] iae
    ias:f64[400] = integer_pow[y=2] iag
    iat:f64[400] = add iar ias
    iau:f64[] = integer_pow[y=2] iah
    iav:f64[] = convert_element_type[new_dtype=float64 weak_type=False] iau
    iaw:f64[400] = sub iat iav
    iax:f64[400] = sqrt iaw
    iay:f64[] = convert_element_type[new_dtype=float64 weak_type=False] iah
    iaz:f64[400] = mul iag iay
    iba:f64[400] = mul iae iax
    ibb:f64[400] = add iaz iba
    ibc:f64[] = convert_element_type[new_dtype=float64 weak_type=False] iah
    ibd:f64[400] = mul iae ibc
    ibe:f64[400] = mul iag iax
    ibf:f64[400] = sub ibd ibe
    ibg:f64[400] = atan2 ibb ibf
    ibh:f64[400] = integer_pow[y=2] iaq
    ibi:f64[400] = sub 0.090738 ibh
    ibj:f64[] = abs 0.045369
    ibk:f64[] = mul 2.0 ibj
    ibl:f64[] = convert_element_type[new_dtype=float64 weak_type=False] ibk
    ibm:f64[400] = div ibi ibl
    ibn:f64[1] = slice[limit_indices=(3,) start_indices=(2,) strides=None] zq
    ibo:f64[] = squeeze[dimensions=(0,)] ibn
    ibp:f64[1] = slice[limit_indices=(3,) start_indices=(2,) strides=None] zr
    ibq:f64[] = squeeze[dimensions=(0,)] ibp
    ibr:f64[] = add 3.141592653589793 ibo
    ibs:f64[] = cos ibr
    ibt:f64[] = add 3.141592653589793 ibq
    ibu:f64[] = cos ibt
    ibv:f64[400] = pjit[name=clip jaxpr=clip] ibm ibs ibu
    ibw:f64[400] = acos ibv
    ibx:f64[400] = sub 3.141592653589793 ibw
    iby:f64[400] = neg ibx
    ibz:f64[400] = sin ibg
    ica:f64[400] = mul iae ibz
    icb:f64[400] = cos ibg
    icc:f64[400] = mul iag icb
    icd:f64[400] = sub ica icc
    ice:f64[400] = sin iby
    icf:f64[400] = mul -0.213 ice
    icg:f64[400] = cos iby
    ich:f64[400] = mul -0.213 icg
    ici:f64[400] = add -0.213 ich
    icj:f64[400] = mul icf icd
    ick:f64[400] = mul ici iaa
    icl:f64[400] = add icj ick
    icm:f64[400] = mul icf iaa
    icn:f64[400] = mul ici icd
    ico:f64[400] = sub icm icn
    icp:f64[400] = atan2 icl ico
    icq:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] ibg
    icr:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] icp
    ics:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] iby
    ict:f64[400,3] = concatenate[dimension=1] icq icr ics
    icu:f64[400,3] = slice[
      limit_indices=(400, 6)
      start_indices=(0, 3)
      strides=None
    ] hzt
    icv:f64[] = select_n False 0.1881 -0.1881
    icw:f64[] = select_n False 0.04675 -0.04675
    icx:f64[400,1] = slice[
      limit_indices=(400, 1)
      start_indices=(0, 0)
      strides=None
    ] icu
    icy:f64[400] = squeeze[dimensions=(1,)] icx
    icz:f64[] = convert_element_type[new_dtype=float64 weak_type=False] icv
    ida:f64[400] = sub icy icz
    idb:f64[400,1] = slice[
      limit_indices=(400, 2)
      start_indices=(0, 1)
      strides=None
    ] icu
    idc:f64[400] = squeeze[dimensions=(1,)] idb
    idd:f64[] = convert_element_type[new_dtype=float64 weak_type=False] icw
    ide:f64[400] = sub idc idd
    idf:f64[400,1] = slice[
      limit_indices=(400, 3)
      start_indices=(0, 2)
      strides=None
    ] icu
    idg:f64[400] = squeeze[dimensions=(1,)] idf
    idh:f64[] = select_n False 0.08 -0.08
    idi:f64[400] = integer_pow[y=2] ida
    idj:f64[400] = integer_pow[y=2] ide
    idk:f64[400] = add idi idj
    idl:f64[400] = integer_pow[y=2] idg
    idm:f64[400] = add idk idl
    idn:f64[400] = sqrt idm
    ido:f64[400] = integer_pow[y=2] idn
    idp:f64[400] = sub ido 0.0064
    idq:f64[400] = sqrt idp
    idr:f64[400] = integer_pow[y=2] ide
    ids:f64[400] = integer_pow[y=2] idg
    idt:f64[400] = add idr ids
    idu:f64[] = integer_pow[y=2] idh
    idv:f64[] = convert_element_type[new_dtype=float64 weak_type=False] idu
    idw:f64[400] = sub idt idv
    idx:f64[400] = sqrt idw
    idy:f64[] = convert_element_type[new_dtype=float64 weak_type=False] idh
    idz:f64[400] = mul idg idy
    iea:f64[400] = mul ide idx
    ieb:f64[400] = add idz iea
    iec:f64[] = convert_element_type[new_dtype=float64 weak_type=False] idh
    ied:f64[400] = mul ide iec
    iee:f64[400] = mul idg idx
    ief:f64[400] = sub ied iee
    ieg:f64[400] = atan2 ieb ief
    ieh:f64[400] = integer_pow[y=2] idq
    iei:f64[400] = sub 0.090738 ieh
    iej:f64[] = abs 0.045369
    iek:f64[] = mul 2.0 iej
    iel:f64[] = convert_element_type[new_dtype=float64 weak_type=False] iek
    iem:f64[400] = div iei iel
    ien:f64[1] = slice[limit_indices=(3,) start_indices=(2,) strides=None] zq
    ieo:f64[] = squeeze[dimensions=(0,)] ien
    iep:f64[1] = slice[limit_indices=(3,) start_indices=(2,) strides=None] zr
    ieq:f64[] = squeeze[dimensions=(0,)] iep
    ier:f64[] = add 3.141592653589793 ieo
    ies:f64[] = cos ier
    iet:f64[] = add 3.141592653589793 ieq
    ieu:f64[] = cos iet
    iev:f64[400] = pjit[name=clip jaxpr=clip] iem ies ieu
    iew:f64[400] = acos iev
    iex:f64[400] = sub 3.141592653589793 iew
    iey:f64[400] = neg iex
    iez:f64[400] = sin ieg
    ifa:f64[400] = mul ide iez
    ifb:f64[400] = cos ieg
    ifc:f64[400] = mul idg ifb
    ifd:f64[400] = sub ifa ifc
    ife:f64[400] = sin iey
    iff:f64[400] = mul -0.213 ife
    ifg:f64[400] = cos iey
    ifh:f64[400] = mul -0.213 ifg
    ifi:f64[400] = add -0.213 ifh
    ifj:f64[400] = mul iff ifd
    ifk:f64[400] = mul ifi ida
    ifl:f64[400] = add ifj ifk
    ifm:f64[400] = mul iff ida
    ifn:f64[400] = mul ifi ifd
    ifo:f64[400] = sub ifm ifn
    ifp:f64[400] = atan2 ifl ifo
    ifq:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] ieg
    ifr:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] ifp
    ifs:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] iey
    ift:f64[400,3] = concatenate[dimension=1] ifq ifr ifs
    ifu:f64[400,3] = slice[
      limit_indices=(400, 9)
      start_indices=(0, 6)
      strides=None
    ] hzt
    ifv:f64[] = select_n True 0.1881 -0.1881
    ifw:f64[] = select_n True 0.04675 -0.04675
    ifx:f64[400,1] = slice[
      limit_indices=(400, 1)
      start_indices=(0, 0)
      strides=None
    ] ifu
    ify:f64[400] = squeeze[dimensions=(1,)] ifx
    ifz:f64[] = convert_element_type[new_dtype=float64 weak_type=False] ifv
    iga:f64[400] = sub ify ifz
    igb:f64[400,1] = slice[
      limit_indices=(400, 2)
      start_indices=(0, 1)
      strides=None
    ] ifu
    igc:f64[400] = squeeze[dimensions=(1,)] igb
    igd:f64[] = convert_element_type[new_dtype=float64 weak_type=False] ifw
    ige:f64[400] = sub igc igd
    igf:f64[400,1] = slice[
      limit_indices=(400, 3)
      start_indices=(0, 2)
      strides=None
    ] ifu
    igg:f64[400] = squeeze[dimensions=(1,)] igf
    igh:f64[] = select_n True 0.08 -0.08
    igi:f64[400] = integer_pow[y=2] iga
    igj:f64[400] = integer_pow[y=2] ige
    igk:f64[400] = add igi igj
    igl:f64[400] = integer_pow[y=2] igg
    igm:f64[400] = add igk igl
    ign:f64[400] = sqrt igm
    igo:f64[400] = integer_pow[y=2] ign
    igp:f64[400] = sub igo 0.0064
    igq:f64[400] = sqrt igp
    igr:f64[400] = integer_pow[y=2] ige
    igs:f64[400] = integer_pow[y=2] igg
    igt:f64[400] = add igr igs
    igu:f64[] = integer_pow[y=2] igh
    igv:f64[] = convert_element_type[new_dtype=float64 weak_type=False] igu
    igw:f64[400] = sub igt igv
    igx:f64[400] = sqrt igw
    igy:f64[] = convert_element_type[new_dtype=float64 weak_type=False] igh
    igz:f64[400] = mul igg igy
    iha:f64[400] = mul ige igx
    ihb:f64[400] = add igz iha
    ihc:f64[] = convert_element_type[new_dtype=float64 weak_type=False] igh
    ihd:f64[400] = mul ige ihc
    ihe:f64[400] = mul igg igx
    ihf:f64[400] = sub ihd ihe
    ihg:f64[400] = atan2 ihb ihf
    ihh:f64[400] = integer_pow[y=2] igq
    ihi:f64[400] = sub 0.090738 ihh
    ihj:f64[] = abs 0.045369
    ihk:f64[] = mul 2.0 ihj
    ihl:f64[] = convert_element_type[new_dtype=float64 weak_type=False] ihk
    ihm:f64[400] = div ihi ihl
    ihn:f64[1] = slice[limit_indices=(3,) start_indices=(2,) strides=None] zq
    iho:f64[] = squeeze[dimensions=(0,)] ihn
    ihp:f64[1] = slice[limit_indices=(3,) start_indices=(2,) strides=None] zr
    ihq:f64[] = squeeze[dimensions=(0,)] ihp
    ihr:f64[] = add 3.141592653589793 iho
    ihs:f64[] = cos ihr
    iht:f64[] = add 3.141592653589793 ihq
    ihu:f64[] = cos iht
    ihv:f64[400] = pjit[name=clip jaxpr=clip] ihm ihs ihu
    ihw:f64[400] = acos ihv
    ihx:f64[400] = sub 3.141592653589793 ihw
    ihy:f64[400] = neg ihx
    ihz:f64[400] = sin ihg
    iia:f64[400] = mul ige ihz
    iib:f64[400] = cos ihg
    iic:f64[400] = mul igg iib
    iid:f64[400] = sub iia iic
    iie:f64[400] = sin ihy
    iif:f64[400] = mul -0.213 iie
    iig:f64[400] = cos ihy
    iih:f64[400] = mul -0.213 iig
    iii:f64[400] = add -0.213 iih
    iij:f64[400] = mul iif iid
    iik:f64[400] = mul iii iga
    iil:f64[400] = add iij iik
    iim:f64[400] = mul iif iga
    iin:f64[400] = mul iii iid
    iio:f64[400] = sub iim iin
    iip:f64[400] = atan2 iil iio
    iiq:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] ihg
    iir:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] iip
    iis:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] ihy
    iit:f64[400,3] = concatenate[dimension=1] iiq iir iis
    iiu:f64[400,3] = slice[
      limit_indices=(400, 12)
      start_indices=(0, 9)
      strides=None
    ] hzt
    iiv:f64[] = select_n True 0.1881 -0.1881
    iiw:f64[] = select_n False 0.04675 -0.04675
    iix:f64[400,1] = slice[
      limit_indices=(400, 1)
      start_indices=(0, 0)
      strides=None
    ] iiu
    iiy:f64[400] = squeeze[dimensions=(1,)] iix
    iiz:f64[] = convert_element_type[new_dtype=float64 weak_type=False] iiv
    ija:f64[400] = sub iiy iiz
    ijb:f64[400,1] = slice[
      limit_indices=(400, 2)
      start_indices=(0, 1)
      strides=None
    ] iiu
    ijc:f64[400] = squeeze[dimensions=(1,)] ijb
    ijd:f64[] = convert_element_type[new_dtype=float64 weak_type=False] iiw
    ije:f64[400] = sub ijc ijd
    ijf:f64[400,1] = slice[
      limit_indices=(400, 3)
      start_indices=(0, 2)
      strides=None
    ] iiu
    ijg:f64[400] = squeeze[dimensions=(1,)] ijf
    ijh:f64[] = select_n False 0.08 -0.08
    iji:f64[400] = integer_pow[y=2] ija
    ijj:f64[400] = integer_pow[y=2] ije
    ijk:f64[400] = add iji ijj
    ijl:f64[400] = integer_pow[y=2] ijg
    ijm:f64[400] = add ijk ijl
    ijn:f64[400] = sqrt ijm
    ijo:f64[400] = integer_pow[y=2] ijn
    ijp:f64[400] = sub ijo 0.0064
    ijq:f64[400] = sqrt ijp
    ijr:f64[400] = integer_pow[y=2] ije
    ijs:f64[400] = integer_pow[y=2] ijg
    ijt:f64[400] = add ijr ijs
    iju:f64[] = integer_pow[y=2] ijh
    ijv:f64[] = convert_element_type[new_dtype=float64 weak_type=False] iju
    ijw:f64[400] = sub ijt ijv
    ijx:f64[400] = sqrt ijw
    ijy:f64[] = convert_element_type[new_dtype=float64 weak_type=False] ijh
    ijz:f64[400] = mul ijg ijy
    ika:f64[400] = mul ije ijx
    ikb:f64[400] = add ijz ika
    ikc:f64[] = convert_element_type[new_dtype=float64 weak_type=False] ijh
    ikd:f64[400] = mul ije ikc
    ike:f64[400] = mul ijg ijx
    ikf:f64[400] = sub ikd ike
    ikg:f64[400] = atan2 ikb ikf
    ikh:f64[400] = integer_pow[y=2] ijq
    iki:f64[400] = sub 0.090738 ikh
    ikj:f64[] = abs 0.045369
    ikk:f64[] = mul 2.0 ikj
    ikl:f64[] = convert_element_type[new_dtype=float64 weak_type=False] ikk
    ikm:f64[400] = div iki ikl
    ikn:f64[1] = slice[limit_indices=(3,) start_indices=(2,) strides=None] zq
    iko:f64[] = squeeze[dimensions=(0,)] ikn
    ikp:f64[1] = slice[limit_indices=(3,) start_indices=(2,) strides=None] zr
    ikq:f64[] = squeeze[dimensions=(0,)] ikp
    ikr:f64[] = add 3.141592653589793 iko
    iks:f64[] = cos ikr
    ikt:f64[] = add 3.141592653589793 ikq
    iku:f64[] = cos ikt
    ikv:f64[400] = pjit[name=clip jaxpr=clip] ikm iks iku
    ikw:f64[400] = acos ikv
    ikx:f64[400] = sub 3.141592653589793 ikw
    iky:f64[400] = neg ikx
    ikz:f64[400] = sin ikg
    ila:f64[400] = mul ije ikz
    ilb:f64[400] = cos ikg
    ilc:f64[400] = mul ijg ilb
    ild:f64[400] = sub ila ilc
    ile:f64[400] = sin iky
    ilf:f64[400] = mul -0.213 ile
    ilg:f64[400] = cos iky
    ilh:f64[400] = mul -0.213 ilg
    ili:f64[400] = add -0.213 ilh
    ilj:f64[400] = mul ilf ild
    ilk:f64[400] = mul ili ija
    ill:f64[400] = add ilj ilk
    ilm:f64[400] = mul ilf ija
    iln:f64[400] = mul ili ild
    ilo:f64[400] = sub ilm iln
    ilp:f64[400] = atan2 ill ilo
    ilq:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] ikg
    ilr:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] ilp
    ils:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] iky
    ilt:f64[400,3] = concatenate[dimension=1] ilq ilr ils
    ilu:f64[400,12] = concatenate[dimension=1] ict ift iit ilt
    ilv:f64[1,3] = reshape[dimensions=None new_sizes=(1, 3)] zr
    ilw:f64[3] = squeeze[dimensions=(0,)] ilv
    ilx:f64[4,3] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(4, 3)] ilw
    ily:f64[12] = reshape[dimensions=None new_sizes=(12,)] ilx
    ilz:f64[1,3] = reshape[dimensions=None new_sizes=(1, 3)] zq
    ima:f64[3] = squeeze[dimensions=(0,)] ilz
    imb:f64[4,3] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(4, 3)] ima
    imc:f64[12] = reshape[dimensions=None new_sizes=(12,)] imb
    imd:f64[400,12] = pjit[
      name=clip
      jaxpr={ lambda ; ime:f64[400,12] imf:f64[12] img:f64[12]. let
          imh:f64[1,12] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 12)
          ] imf
          imi:f64[400,12] = max imh ime
          imj:f64[1,12] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 12)
          ] img
          imk:f64[400,12] = min imj imi
        in (imk,) }
    ] ilu ily imc
    iml:f64[12] = broadcast_in_dim[broadcast_dimensions=() shape=(12,)] 0.0
    imm:i64[1,3] = reshape[dimensions=None new_sizes=(1, 3)] baf
    imn:i64[3] = squeeze[dimensions=(0,)] imm
    imo:i64[4,3] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(4, 3)] imn
    imp:i64[12] = reshape[dimensions=None new_sizes=(12,)] imo
    imq:f64[12] = convert_element_type[new_dtype=float64 weak_type=True] imp
    imr:f64[12] = mul imq 1.4
    ims:f64[1,3] = reshape[dimensions=None new_sizes=(1, 3)] bag
    imt:f64[3] = squeeze[dimensions=(0,)] ims
    imu:f64[4,3] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(4, 3)] imt
    imv:f64[12] = reshape[dimensions=None new_sizes=(12,)] imu
    imw:f64[400,12] = cond[
      branches=(
        { lambda ; imx:f64[12] imy:f64[12] imz:f64[400,36] ina:f64[400,12] inb:f64[12]
            inc:f64[12] ind:f64[12]. let
            ine:f64[400,12] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(400, 12)
            ] imy
          in (ine,) }
        { lambda ; inf:f64[12] ing:f64[12] inh:f64[400,36] ini:f64[400,12] inj:f64[12]
            ink:f64[12] inl:f64[12]. let
            inm:f64[400,12] = slice[
              limit_indices=(400, 16)
              start_indices=(0, 4)
              strides=None
            ] inh
            inn:f64[400,12] = slice[
              limit_indices=(400, 34)
              start_indices=(0, 22)
              strides=None
            ] inh
            ino:f64[400,12] = sub ini inm
            inp:f64[12] = convert_element_type[
              new_dtype=float64
              weak_type=False
            ] ink
            inq:f64[1,12] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 12)
            ] inp
            inr:f64[400,12] = mul inq ino
            ins:f64[1,12] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 12)
            ] inj
            int:f64[400,12] = sub ins inn
            inu:f64[1,12] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 12)
            ] inl
            inv:f64[400,12] = mul inu int
            inw:f64[400,12] = add inr inv
            inx:f64[400,12] = sub ini inm
            iny:bool[400,12] = ne inx 0.0
            inz:f64[400,12] = sub ini inm
            ioa:f64[400,12] = pjit[name=_where jaxpr=_where] iny inz 1
            iob:f64[1,12] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 12)
            ] inf
            ioc:bool[400,12] = gt inw iob
            iod:f64[1,12] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 12)
            ] inj
            ioe:f64[400,12] = sub iod inn
            iof:f64[1,12] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 12)
            ] inl
            iog:f64[400,12] = mul iof ioe
            ioh:f64[1,12] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 12)
            ] inf
            ioi:f64[400,12] = sub ioh iog
            ioj:f64[400,12] = div ioi ioa
            iok:f64[400,12] = pjit[name=_where jaxpr=_where1] ioc ioj ink
            iol:f64[12] = neg inf
            iom:f64[1,12] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 12)
            ] iol
            ion:bool[400,12] = lt inw iom
            ioo:f64[12] = neg inf
            iop:f64[1,12] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 12)
            ] inj
            ioq:f64[400,12] = sub iop inn
            ior:f64[1,12] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 12)
            ] inl
            ios:f64[400,12] = mul ior ioq
            iot:f64[1,12] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 12)
            ] ioo
            iou:f64[400,12] = sub iot ios
            iov:f64[400,12] = div iou ioa
            iow:f64[400,12] = pjit[name=_where jaxpr=_where2] ion iov iok
          in (iow,) }
      )
      linear=(False, False, False, False, False, False, False)
    ] 0 zu imr gzu imd iml imr imv
    iox:f64[400,12] = slice[
      limit_indices=(400, 16)
      start_indices=(0, 4)
      strides=None
    ] gzu
    ioy:f64[400,12] = slice[
      limit_indices=(400, 34)
      start_indices=(0, 22)
      strides=None
    ] gzu
    ioz:f64[400,12] = sub imd iox
    ipa:f64[400,12] = convert_element_type[new_dtype=float64 weak_type=False] imw
    ipb:f64[400,12] = mul ipa ioz
    ipc:f64[1,12] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 12)] iml
    ipd:f64[400,12] = sub ipc ioy
    ipe:f64[1,12] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 12)] imv
    ipf:f64[400,12] = mul ipe ipd
    ipg:f64[400,12] = add ipb ipf
    iph:f64[400,1] = slice[
      limit_indices=(400, 17)
      start_indices=(0, 16)
      strides=None
    ] gye
    ipi:f64[400] = squeeze[dimensions=(1,)] iph
    ipj:f64[400,1] = slice[
      limit_indices=(400, 22)
      start_indices=(0, 21)
      strides=None
    ] gye
    ipk:f64[400] = squeeze[dimensions=(1,)] ipj
    ipl:f64[400] = integer_pow[y=2] ipk
    ipm:f64[400] = neg ipl
    ipn:f64[400] = div ipm 0.2
    ipo:f64[400] = exp ipn
    ipp:f64[400,4] = slice[
      limit_indices=(400, 4)
      start_indices=(0, 0)
      strides=None
    ] gye
    ipq:f64[400,1] = slice[
      limit_indices=(400, 3)
      start_indices=(0, 2)
      strides=None
    ] ipp
    ipr:f64[400] = squeeze[dimensions=(1,)] ipq
    ips:f64[400,1] = slice[
      limit_indices=(400, 4)
      start_indices=(0, 3)
      strides=None
    ] ipp
    ipt:f64[400] = squeeze[dimensions=(1,)] ips
    ipu:f64[400] = mul ipr ipt
    ipv:f64[400,1] = slice[
      limit_indices=(400, 1)
      start_indices=(0, 0)
      strides=None
    ] ipp
    ipw:f64[400] = squeeze[dimensions=(1,)] ipv
    ipx:f64[400,1] = slice[
      limit_indices=(400, 2)
      start_indices=(0, 1)
      strides=None
    ] ipp
    ipy:f64[400] = squeeze[dimensions=(1,)] ipx
    ipz:f64[400] = mul ipw ipy
    iqa:f64[400] = add ipu ipz
    iqb:f64[400,1] = slice[
      limit_indices=(400, 2)
      start_indices=(0, 1)
      strides=None
    ] ipp
    iqc:f64[400] = squeeze[dimensions=(1,)] iqb
    iqd:f64[400,1] = slice[
      limit_indices=(400, 2)
      start_indices=(0, 1)
      strides=None
    ] ipp
    iqe:f64[400] = squeeze[dimensions=(1,)] iqd
    iqf:f64[400] = mul iqc iqe
    iqg:f64[400,1] = slice[
      limit_indices=(400, 3)
      start_indices=(0, 2)
      strides=None
    ] ipp
    iqh:f64[400] = squeeze[dimensions=(1,)] iqg
    iqi:f64[400,1] = slice[
      limit_indices=(400, 3)
      start_indices=(0, 2)
      strides=None
    ] ipp
    iqj:f64[400] = squeeze[dimensions=(1,)] iqi
    iqk:f64[400] = mul iqh iqj
    iql:f64[400] = add iqf iqk
    iqm:f64[400] = sub 0.5 iql
    iqn:f64[400] = atan2 iqa iqm
    iqo:f64[400,1] = slice[
      limit_indices=(400, 2)
      start_indices=(0, 1)
      strides=None
    ] ipp
    iqp:f64[400] = squeeze[dimensions=(1,)] iqo
    iqq:f64[400,1] = slice[
      limit_indices=(400, 4)
      start_indices=(0, 3)
      strides=None
    ] ipp
    iqr:f64[400] = squeeze[dimensions=(1,)] iqq
    iqs:f64[400] = mul iqp iqr
    iqt:f64[400,1] = slice[
      limit_indices=(400, 1)
      start_indices=(0, 0)
      strides=None
    ] ipp
    iqu:f64[400] = squeeze[dimensions=(1,)] iqt
    iqv:f64[400,1] = slice[
      limit_indices=(400, 3)
      start_indices=(0, 2)
      strides=None
    ] ipp
    iqw:f64[400] = squeeze[dimensions=(1,)] iqv
    iqx:f64[400] = mul iqu iqw
    iqy:f64[400] = sub iqs iqx
    iqz:f64[400] = mul -2.0 iqy
    ira:f64[400] = pjit[name=clip jaxpr=clip1] iqz -1.0 1.0
    irb:f64[400] = custom_jvp_call[
      call_jaxpr={ lambda ; irc:f64[400]. let
          ird:f64[400] = asin irc
        in (ird,) }
      jvp_jaxpr_thunk=<function _memoize.<locals>.memoized at 0x7d83782973a0>
      num_consts=0
      symbolic_zeros=False
    ] ira
    ire:f64[400,1] = slice[
      limit_indices=(400, 2)
      start_indices=(0, 1)
      strides=None
    ] ipp
    irf:f64[400] = squeeze[dimensions=(1,)] ire
    irg:f64[400,1] = slice[
      limit_indices=(400, 3)
      start_indices=(0, 2)
      strides=None
    ] ipp
    irh:f64[400] = squeeze[dimensions=(1,)] irg
    iri:f64[400] = mul irf irh
    irj:f64[400,1] = slice[
      limit_indices=(400, 1)
      start_indices=(0, 0)
      strides=None
    ] ipp
    irk:f64[400] = squeeze[dimensions=(1,)] irj
    irl:f64[400,1] = slice[
      limit_indices=(400, 4)
      start_indices=(0, 3)
      strides=None
    ] ipp
    irm:f64[400] = squeeze[dimensions=(1,)] irl
    irn:f64[400] = mul irk irm
    iro:f64[400] = add iri irn
    irp:f64[400,1] = slice[
      limit_indices=(400, 3)
      start_indices=(0, 2)
      strides=None
    ] ipp
    irq:f64[400] = squeeze[dimensions=(1,)] irp
    irr:f64[400,1] = slice[
      limit_indices=(400, 3)
      start_indices=(0, 2)
      strides=None
    ] ipp
    irs:f64[400] = squeeze[dimensions=(1,)] irr
    irt:f64[400] = mul irq irs
    iru:f64[400,1] = slice[
      limit_indices=(400, 4)
      start_indices=(0, 3)
      strides=None
    ] ipp
    irv:f64[400] = squeeze[dimensions=(1,)] iru
    irw:f64[400,1] = slice[
      limit_indices=(400, 4)
      start_indices=(0, 3)
      strides=None
    ] ipp
    irx:f64[400] = squeeze[dimensions=(1,)] irw
    iry:f64[400] = mul irv irx
    irz:f64[400] = add irt iry
    isa:f64[400] = sub 0.5 irz
    isb:f64[400] = atan2 iro isa
    isc:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] iqn
    isd:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] irb
    ise:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] isb
    isf:f64[400,3] = concatenate[dimension=1] isc isd ise
    isg:f64[400,1] = slice[
      limit_indices=(400, 1)
      start_indices=(0, 0)
      strides=(1, 1)
    ] isf
    ish:f64[400] = squeeze[dimensions=(1,)] isg
    isi:f64[400,1] = slice[
      limit_indices=(400, 2)
      start_indices=(0, 1)
      strides=(1, 1)
    ] isf
    isj:f64[400] = squeeze[dimensions=(1,)] isi
    isk:f64[400,1] = slice[
      limit_indices=(400, 3)
      start_indices=(0, 2)
      strides=(1, 1)
    ] isf
    isl:f64[400] = squeeze[dimensions=(1,)] isk
    ism:f64[400,4] = slice[
      limit_indices=(400, 4)
      start_indices=(0, 0)
      strides=None
    ] gyr
    isn:f64[400,1] = slice[
      limit_indices=(400, 3)
      start_indices=(0, 2)
      strides=None
    ] ism
    iso:f64[400] = squeeze[dimensions=(1,)] isn
    isp:f64[400,1] = slice[
      limit_indices=(400, 4)
      start_indices=(0, 3)
      strides=None
    ] ism
    isq:f64[400] = squeeze[dimensions=(1,)] isp
    isr:f64[400] = mul iso isq
    iss:f64[400,1] = slice[
      limit_indices=(400, 1)
      start_indices=(0, 0)
      strides=None
    ] ism
    ist:f64[400] = squeeze[dimensions=(1,)] iss
    isu:f64[400,1] = slice[
      limit_indices=(400, 2)
      start_indices=(0, 1)
      strides=None
    ] ism
    isv:f64[400] = squeeze[dimensions=(1,)] isu
    isw:f64[400] = mul ist isv
    isx:f64[400] = add isr isw
    isy:f64[400,1] = slice[
      limit_indices=(400, 2)
      start_indices=(0, 1)
      strides=None
    ] ism
    isz:f64[400] = squeeze[dimensions=(1,)] isy
    ita:f64[400,1] = slice[
      limit_indices=(400, 2)
      start_indices=(0, 1)
      strides=None
    ] ism
    itb:f64[400] = squeeze[dimensions=(1,)] ita
    itc:f64[400] = mul isz itb
    itd:f64[400,1] = slice[
      limit_indices=(400, 3)
      start_indices=(0, 2)
      strides=None
    ] ism
    ite:f64[400] = squeeze[dimensions=(1,)] itd
    itf:f64[400,1] = slice[
      limit_indices=(400, 3)
      start_indices=(0, 2)
      strides=None
    ] ism
    itg:f64[400] = squeeze[dimensions=(1,)] itf
    ith:f64[400] = mul ite itg
    iti:f64[400] = add itc ith
    itj:f64[400] = sub 0.5 iti
    itk:f64[400] = atan2 isx itj
    itl:f64[400,1] = slice[
      limit_indices=(400, 2)
      start_indices=(0, 1)
      strides=None
    ] ism
    itm:f64[400] = squeeze[dimensions=(1,)] itl
    itn:f64[400,1] = slice[
      limit_indices=(400, 4)
      start_indices=(0, 3)
      strides=None
    ] ism
    ito:f64[400] = squeeze[dimensions=(1,)] itn
    itp:f64[400] = mul itm ito
    itq:f64[400,1] = slice[
      limit_indices=(400, 1)
      start_indices=(0, 0)
      strides=None
    ] ism
    itr:f64[400] = squeeze[dimensions=(1,)] itq
    its:f64[400,1] = slice[
      limit_indices=(400, 3)
      start_indices=(0, 2)
      strides=None
    ] ism
    itt:f64[400] = squeeze[dimensions=(1,)] its
    itu:f64[400] = mul itr itt
    itv:f64[400] = sub itp itu
    itw:f64[400] = mul -2.0 itv
    itx:f64[400] = pjit[name=clip jaxpr=clip1] itw -1.0 1.0
    ity:f64[400] = custom_jvp_call[
      call_jaxpr={ lambda ; itz:f64[400]. let
          iua:f64[400] = asin itz
        in (iua,) }
      jvp_jaxpr_thunk=<function _memoize.<locals>.memoized at 0x7d839a29c9d0>
      num_consts=0
      symbolic_zeros=False
    ] itx
    iub:f64[400,1] = slice[
      limit_indices=(400, 2)
      start_indices=(0, 1)
      strides=None
    ] ism
    iuc:f64[400] = squeeze[dimensions=(1,)] iub
    iud:f64[400,1] = slice[
      limit_indices=(400, 3)
      start_indices=(0, 2)
      strides=None
    ] ism
    iue:f64[400] = squeeze[dimensions=(1,)] iud
    iuf:f64[400] = mul iuc iue
    iug:f64[400,1] = slice[
      limit_indices=(400, 1)
      start_indices=(0, 0)
      strides=None
    ] ism
    iuh:f64[400] = squeeze[dimensions=(1,)] iug
    iui:f64[400,1] = slice[
      limit_indices=(400, 4)
      start_indices=(0, 3)
      strides=None
    ] ism
    iuj:f64[400] = squeeze[dimensions=(1,)] iui
    iuk:f64[400] = mul iuh iuj
    iul:f64[400] = add iuf iuk
    ium:f64[400,1] = slice[
      limit_indices=(400, 3)
      start_indices=(0, 2)
      strides=None
    ] ism
    iun:f64[400] = squeeze[dimensions=(1,)] ium
    iuo:f64[400,1] = slice[
      limit_indices=(400, 3)
      start_indices=(0, 2)
      strides=None
    ] ism
    iup:f64[400] = squeeze[dimensions=(1,)] iuo
    iuq:f64[400] = mul iun iup
    iur:f64[400,1] = slice[
      limit_indices=(400, 4)
      start_indices=(0, 3)
      strides=None
    ] ism
    ius:f64[400] = squeeze[dimensions=(1,)] iur
    iut:f64[400,1] = slice[
      limit_indices=(400, 4)
      start_indices=(0, 3)
      strides=None
    ] ism
    iuu:f64[400] = squeeze[dimensions=(1,)] iut
    iuv:f64[400] = mul ius iuu
    iuw:f64[400] = add iuq iuv
    iux:f64[400] = sub 0.5 iuw
    iuy:f64[400] = atan2 iul iux
    iuz:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] itk
    iva:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] ity
    ivb:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] iuy
    ivc:f64[400,3] = concatenate[dimension=1] iuz iva ivb
    ivd:f64[400,1] = slice[
      limit_indices=(400, 1)
      start_indices=(0, 0)
      strides=(1, 1)
    ] ivc
    ive:f64[400] = squeeze[dimensions=(1,)] ivd
    ivf:f64[400,1] = slice[
      limit_indices=(400, 2)
      start_indices=(0, 1)
      strides=(1, 1)
    ] ivc
    ivg:f64[400] = squeeze[dimensions=(1,)] ivf
    ivh:f64[400] = integer_pow[y=2] isj
    ivi:f64[400] = neg ivh
    ivj:f64[400] = div ivi 0.25
    ivk:f64[400] = exp ivj
    ivl:f64[400] = integer_pow[y=2] ish
    ivm:f64[400] = neg ivl
    ivn:f64[400] = div ivm 0.25
    ivo:f64[400] = exp ivn
    ivp:f64[400] = integer_pow[y=2] isl
    ivq:f64[400] = neg ivp
    ivr:f64[400] = div ivq 0.07
    ivs:f64[400] = exp ivr
    ivt:f64[400,1] = slice[
      limit_indices=(400, 18)
      start_indices=(0, 17)
      strides=None
    ] gye
    ivu:f64[400] = squeeze[dimensions=(1,)] ivt
    ivv:f64[400] = integer_pow[y=2] ivu
    ivw:f64[400] = neg ivv
    ivx:f64[400] = div ivw 0.01
    ivy:f64[400] = exp ivx
    ivz:f64[400,1] = slice[
      limit_indices=(400, 19)
      start_indices=(0, 18)
      strides=None
    ] gye
    iwa:f64[400] = squeeze[dimensions=(1,)] ivz
    iwb:f64[400,1] = slice[
      limit_indices=(400, 19)
      start_indices=(0, 18)
      strides=None
    ] gyr
    iwc:f64[400] = squeeze[dimensions=(1,)] iwb
    iwd:f64[400] = sub iwa iwc
    iwe:f64[400] = integer_pow[y=2] iwd
    iwf:f64[400] = neg iwe
    iwg:f64[400] = div iwf 0.02
    iwh:f64[400] = exp iwg
    iwi:f64[400,1] = slice[
      limit_indices=(400, 20)
      start_indices=(0, 19)
      strides=None
    ] gye
    iwj:f64[400] = squeeze[dimensions=(1,)] iwi
    iwk:f64[400] = integer_pow[y=2] iwj
    iwl:f64[400] = neg iwk
    iwm:f64[400] = div iwl 0.2
    iwn:f64[400,1] = slice[
      limit_indices=(400, 21)
      start_indices=(0, 20)
      strides=None
    ] gye
    iwo:f64[400] = squeeze[dimensions=(1,)] iwn
    iwp:f64[400] = integer_pow[y=2] iwo
    iwq:f64[400] = div iwp 0.2
    iwr:f64[400] = sub iwm iwq
    iws:f64[400] = exp iwr
    iwt:f64[400] = sub ish ive
    iwu:f64[400] = integer_pow[y=2] iwt
    iwv:f64[400] = neg iwu
    iww:f64[400] = div iwv 0.001
    iwx:f64[400] = exp iww
    iwy:f64[400] = sub isj ivg
    iwz:f64[400] = integer_pow[y=2] iwy
    ixa:f64[400] = neg iwz
    ixb:f64[400] = div ixa 0.005
    ixc:f64[400] = exp ixb
    ixd:f64[400] = add iwx ixc
    ixe:f64[400] = div ixd 2.0
    ixf:f64[400,12] = slice[
      limit_indices=(400, 16)
      start_indices=(0, 4)
      strides=None
    ] gye
    ixg:f64[1,3] = reshape[dimensions=None new_sizes=(1, 3)] zr
    ixh:f64[3] = squeeze[dimensions=(0,)] ixg
    ixi:f64[4,3] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(4, 3)] ixh
    ixj:f64[12] = reshape[dimensions=None new_sizes=(12,)] ixi
    ixk:f64[1,3] = reshape[dimensions=None new_sizes=(1, 3)] zq
    ixl:f64[3] = squeeze[dimensions=(0,)] ixk
    ixm:f64[4,3] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(4, 3)] ixl
    ixn:f64[12] = reshape[dimensions=None new_sizes=(12,)] ixm
    ixo:f64[1,12] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 12)] ixj
    ixp:f64[400,12] = sub ixf ixo
    ixq:f64[400,12] = mul -10.0 ixp
    ixr:f64[400,12] = exp ixq
    ixs:f64[400,12] = add 1.0 ixr
    ixt:f64[400,12] = div 1.0 ixs
    ixu:f64[1,12] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 12)] ixn
    ixv:f64[400,12] = sub ixf ixu
    ixw:f64[400,12] = mul 10.0 ixv
    ixx:f64[400,12] = exp ixw
    ixy:f64[400,12] = add 1.0 ixx
    ixz:f64[400,12] = div 1.0 ixy
    iya:f64[400,12] = add ixt ixz
    iyb:f64[400,12] = sub iya 1.0
    iyc:f64[400] = reduce_sum[axes=(1,)] iyb
    iyd:f64[400] = div iyc 12.0
    iye:f64[12] = mul -0.9 zu
    iyf:f64[12] = mul 0.9 zu
    iyg:f64[1,12] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 12)] iye
    iyh:f64[400,12] = sub ipg iyg
    iyi:f64[400,12] = mul -0.2 iyh
    iyj:f64[400,12] = exp iyi
    iyk:f64[400,12] = add 1.0 iyj
    iyl:f64[400,12] = div 1.0 iyk
    iym:f64[1,12] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 12)] iyf
    iyn:f64[400,12] = sub ipg iym
    iyo:f64[400,12] = mul 0.2 iyn
    iyp:f64[400,12] = exp iyo
    iyq:f64[400,12] = add 1.0 iyp
    iyr:f64[400,12] = div 1.0 iyq
    iys:f64[400,12] = add iyl iyr
    iyt:f64[400,12] = sub iys 1.0
    iyu:f64[400] = reduce_sum[axes=(1,)] iyt
    iyv:f64[400] = div iyu 12.0
    iyw:f64[400,12] = slice[
      limit_indices=(400, 34)
      start_indices=(0, 22)
      strides=None
    ] gye
    iyx:f64[400,12] = slice[
      limit_indices=(400, 34)
      start_indices=(0, 22)
      strides=None
    ] gyr
    iyy:f64[400,12] = sub iyw iyx
    iyz:f64[400,12] = integer_pow[y=2] iyy
    iza:f64[400] = reduce_sum[axes=(1,)] iyz
    izb:f64[400] = neg iza
    izc:f64[400] = div izb 4.0
    izd:f64[400] = exp izc
    ize:f64[400,9] = integer_pow[y=2] bds
    izf:f64[400,9] = neg ize
    izg:f64[400,9] = div izf 0.25
    izh:f64[400,9] = exp izg
    izi:f64[400] = reduce_sum[axes=(1,)] izh
    izj:f64[400] = div izi 9.0
    izk:f64[400,12] = slice[
      limit_indices=(400, 16)
      start_indices=(0, 4)
      strides=None
    ] gye
    izl:f64[1,12] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 12)] bah
    izm:f64[400,12] = sub izk izl
    izn:f64[400,12] = integer_pow[y=2] izm
    izo:f64[400,12] = neg izn
    izp:f64[400,12] = div izo 0.05
    izq:f64[400,12] = exp izp
    izr:f64[400] = reduce_sum[axes=(1,)] izq
    izs:f64[400] = div izr 12.0
    izt:f64[400,12] = slice[
      limit_indices=(400, 34)
      start_indices=(0, 22)
      strides=None
    ] gye
    izu:f64[400,12] = mul ipg izt
    izv:f64[400,12] = abs izu
    izw:f64[400] = reduce_sum[axes=(1,)] izv
    izx:f64[400] = integer_pow[y=2] izw
    izy:f64[400] = neg izx
    izz:f64[400] = div izy 450.0
    jaa:f64[400] = exp izz
    jab:f64[400,12] = slice[
      limit_indices=(400, 16)
      start_indices=(0, 4)
      strides=None
    ] gye
    jac:f64[400,3] = slice[
      limit_indices=(400, 3)
      start_indices=(0, 0)
      strides=None
    ] jab
    jad:i64[] = select_n True 1 -1
    jae:f64[] = convert_element_type[new_dtype=float64 weak_type=True] jad
    jaf:f64[] = mul jae 0.08
    jag:f64[400,1] = slice[
      limit_indices=(400, 1)
      start_indices=(0, 0)
      strides=None
    ] jac
    jah:f64[400] = squeeze[dimensions=(1,)] jag
    jai:f64[400] = sin jah
    jaj:f64[400,1] = slice[
      limit_indices=(400, 2)
      start_indices=(0, 1)
      strides=None
    ] jac
    jak:f64[400] = squeeze[dimensions=(1,)] jaj
    jal:f64[400] = sin jak
    jam:f64[400,1] = slice[
      limit_indices=(400, 3)
      start_indices=(0, 2)
      strides=None
    ] jac
    jan:f64[400] = squeeze[dimensions=(1,)] jam
    jao:f64[400] = sin jan
    jap:f64[400,1] = slice[
      limit_indices=(400, 1)
      start_indices=(0, 0)
      strides=None
    ] jac
    jaq:f64[400] = squeeze[dimensions=(1,)] jap
    jar:f64[400] = cos jaq
    jas:f64[400,1] = slice[
      limit_indices=(400, 2)
      start_indices=(0, 1)
      strides=None
    ] jac
    jat:f64[400] = squeeze[dimensions=(1,)] jas
    jau:f64[400] = cos jat
    jav:f64[400,1] = slice[
      limit_indices=(400, 3)
      start_indices=(0, 2)
      strides=None
    ] jac
    jaw:f64[400] = squeeze[dimensions=(1,)] jav
    jax:f64[400] = cos jaw
    jay:f64[400] = mul jau jax
    jaz:f64[400] = mul jal jao
    jba:f64[400] = sub jay jaz
    jbb:f64[400] = mul jal jax
    jbc:f64[400] = mul jau jao
    jbd:f64[400] = add jbb jbc
    jbe:f64[400] = mul -0.213 jbd
    jbf:f64[400] = mul -0.213 jal
    jbg:f64[400] = add jbe jbf
    jbh:f64[400] = mul 0.213 jai
    jbi:f64[400] = mul jbh jba
    jbj:f64[] = convert_element_type[new_dtype=float64 weak_type=False] jaf
    jbk:f64[400] = mul jbj jar
    jbl:f64[400] = add jbi jbk
    jbm:f64[400] = mul -0.213 jau
    jbn:f64[400] = mul jbm jai
    jbo:f64[400] = sub jbl jbn
    jbp:f64[400] = mul -0.213 jar
    jbq:f64[400] = mul jbp jba
    jbr:f64[] = convert_element_type[new_dtype=float64 weak_type=False] jaf
    jbs:f64[400] = mul jbr jai
    jbt:f64[400] = add jbq jbs
    jbu:f64[400] = mul -0.213 jar
    jbv:f64[400] = mul jbu jau
    jbw:f64[400] = add jbt jbv
    jbx:f64[] = select_n True -0.1881 0.1881
    jby:f64[] = convert_element_type[new_dtype=float64 weak_type=False] jbx
    jbz:f64[400] = add jbg jby
    jca:f64[] = select_n True 0.04675 -0.04675
    jcb:f64[] = convert_element_type[new_dtype=float64 weak_type=False] jca
    jcc:f64[400] = add jbo jcb
    jcd:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] jbz
    jce:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] jcc
    jcf:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] jbw
    jcg:f64[400,3] = concatenate[dimension=1] jcd jce jcf
    jch:f64[400,3] = slice[
      limit_indices=(400, 6)
      start_indices=(0, 3)
      strides=None
    ] jab
    jci:i64[] = select_n False 1 -1
    jcj:f64[] = convert_element_type[new_dtype=float64 weak_type=True] jci
    jck:f64[] = mul jcj 0.08
    jcl:f64[400,1] = slice[
      limit_indices=(400, 1)
      start_indices=(0, 0)
      strides=None
    ] jch
    jcm:f64[400] = squeeze[dimensions=(1,)] jcl
    jcn:f64[400] = sin jcm
    jco:f64[400,1] = slice[
      limit_indices=(400, 2)
      start_indices=(0, 1)
      strides=None
    ] jch
    jcp:f64[400] = squeeze[dimensions=(1,)] jco
    jcq:f64[400] = sin jcp
    jcr:f64[400,1] = slice[
      limit_indices=(400, 3)
      start_indices=(0, 2)
      strides=None
    ] jch
    jcs:f64[400] = squeeze[dimensions=(1,)] jcr
    jct:f64[400] = sin jcs
    jcu:f64[400,1] = slice[
      limit_indices=(400, 1)
      start_indices=(0, 0)
      strides=None
    ] jch
    jcv:f64[400] = squeeze[dimensions=(1,)] jcu
    jcw:f64[400] = cos jcv
    jcx:f64[400,1] = slice[
      limit_indices=(400, 2)
      start_indices=(0, 1)
      strides=None
    ] jch
    jcy:f64[400] = squeeze[dimensions=(1,)] jcx
    jcz:f64[400] = cos jcy
    jda:f64[400,1] = slice[
      limit_indices=(400, 3)
      start_indices=(0, 2)
      strides=None
    ] jch
    jdb:f64[400] = squeeze[dimensions=(1,)] jda
    jdc:f64[400] = cos jdb
    jdd:f64[400] = mul jcz jdc
    jde:f64[400] = mul jcq jct
    jdf:f64[400] = sub jdd jde
    jdg:f64[400] = mul jcq jdc
    jdh:f64[400] = mul jcz jct
    jdi:f64[400] = add jdg jdh
    jdj:f64[400] = mul -0.213 jdi
    jdk:f64[400] = mul -0.213 jcq
    jdl:f64[400] = add jdj jdk
    jdm:f64[400] = mul 0.213 jcn
    jdn:f64[400] = mul jdm jdf
    jdo:f64[] = convert_element_type[new_dtype=float64 weak_type=False] jck
    jdp:f64[400] = mul jdo jcw
    jdq:f64[400] = add jdn jdp
    jdr:f64[400] = mul -0.213 jcz
    jds:f64[400] = mul jdr jcn
    jdt:f64[400] = sub jdq jds
    jdu:f64[400] = mul -0.213 jcw
    jdv:f64[400] = mul jdu jdf
    jdw:f64[] = convert_element_type[new_dtype=float64 weak_type=False] jck
    jdx:f64[400] = mul jdw jcn
    jdy:f64[400] = add jdv jdx
    jdz:f64[400] = mul -0.213 jcw
    jea:f64[400] = mul jdz jcz
    jeb:f64[400] = add jdy jea
    jec:f64[] = select_n True -0.1881 0.1881
    jed:f64[] = convert_element_type[new_dtype=float64 weak_type=False] jec
    jee:f64[400] = add jdl jed
    jef:f64[] = select_n False 0.04675 -0.04675
    jeg:f64[] = convert_element_type[new_dtype=float64 weak_type=False] jef
    jeh:f64[400] = add jdt jeg
    jei:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] jee
    jej:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] jeh
    jek:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] jeb
    jel:f64[400,3] = concatenate[dimension=1] jei jej jek
    jem:f64[400,3] = slice[
      limit_indices=(400, 9)
      start_indices=(0, 6)
      strides=None
    ] jab
    jen:i64[] = select_n True 1 -1
    jeo:f64[] = convert_element_type[new_dtype=float64 weak_type=True] jen
    jep:f64[] = mul jeo 0.08
    jeq:f64[400,1] = slice[
      limit_indices=(400, 1)
      start_indices=(0, 0)
      strides=None
    ] jem
    jer:f64[400] = squeeze[dimensions=(1,)] jeq
    jes:f64[400] = sin jer
    jet:f64[400,1] = slice[
      limit_indices=(400, 2)
      start_indices=(0, 1)
      strides=None
    ] jem
    jeu:f64[400] = squeeze[dimensions=(1,)] jet
    jev:f64[400] = sin jeu
    jew:f64[400,1] = slice[
      limit_indices=(400, 3)
      start_indices=(0, 2)
      strides=None
    ] jem
    jex:f64[400] = squeeze[dimensions=(1,)] jew
    jey:f64[400] = sin jex
    jez:f64[400,1] = slice[
      limit_indices=(400, 1)
      start_indices=(0, 0)
      strides=None
    ] jem
    jfa:f64[400] = squeeze[dimensions=(1,)] jez
    jfb:f64[400] = cos jfa
    jfc:f64[400,1] = slice[
      limit_indices=(400, 2)
      start_indices=(0, 1)
      strides=None
    ] jem
    jfd:f64[400] = squeeze[dimensions=(1,)] jfc
    jfe:f64[400] = cos jfd
    jff:f64[400,1] = slice[
      limit_indices=(400, 3)
      start_indices=(0, 2)
      strides=None
    ] jem
    jfg:f64[400] = squeeze[dimensions=(1,)] jff
    jfh:f64[400] = cos jfg
    jfi:f64[400] = mul jfe jfh
    jfj:f64[400] = mul jev jey
    jfk:f64[400] = sub jfi jfj
    jfl:f64[400] = mul jev jfh
    jfm:f64[400] = mul jfe jey
    jfn:f64[400] = add jfl jfm
    jfo:f64[400] = mul -0.213 jfn
    jfp:f64[400] = mul -0.213 jev
    jfq:f64[400] = add jfo jfp
    jfr:f64[400] = mul 0.213 jes
    jfs:f64[400] = mul jfr jfk
    jft:f64[] = convert_element_type[new_dtype=float64 weak_type=False] jep
    jfu:f64[400] = mul jft jfb
    jfv:f64[400] = add jfs jfu
    jfw:f64[400] = mul -0.213 jfe
    jfx:f64[400] = mul jfw jes
    jfy:f64[400] = sub jfv jfx
    jfz:f64[400] = mul -0.213 jfb
    jga:f64[400] = mul jfz jfk
    jgb:f64[] = convert_element_type[new_dtype=float64 weak_type=False] jep
    jgc:f64[400] = mul jgb jes
    jgd:f64[400] = add jga jgc
    jge:f64[400] = mul -0.213 jfb
    jgf:f64[400] = mul jge jfe
    jgg:f64[400] = add jgd jgf
    jgh:f64[] = select_n False -0.1881 0.1881
    jgi:f64[] = convert_element_type[new_dtype=float64 weak_type=False] jgh
    jgj:f64[400] = add jfq jgi
    jgk:f64[] = select_n True 0.04675 -0.04675
    jgl:f64[] = convert_element_type[new_dtype=float64 weak_type=False] jgk
    jgm:f64[400] = add jfy jgl
    jgn:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] jgj
    jgo:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] jgm
    jgp:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] jgg
    jgq:f64[400,3] = concatenate[dimension=1] jgn jgo jgp
    jgr:f64[400,3] = slice[
      limit_indices=(400, 12)
      start_indices=(0, 9)
      strides=None
    ] jab
    jgs:i64[] = select_n False 1 -1
    jgt:f64[] = convert_element_type[new_dtype=float64 weak_type=True] jgs
    jgu:f64[] = mul jgt 0.08
    jgv:f64[400,1] = slice[
      limit_indices=(400, 1)
      start_indices=(0, 0)
      strides=None
    ] jgr
    jgw:f64[400] = squeeze[dimensions=(1,)] jgv
    jgx:f64[400] = sin jgw
    jgy:f64[400,1] = slice[
      limit_indices=(400, 2)
      start_indices=(0, 1)
      strides=None
    ] jgr
    jgz:f64[400] = squeeze[dimensions=(1,)] jgy
    jha:f64[400] = sin jgz
    jhb:f64[400,1] = slice[
      limit_indices=(400, 3)
      start_indices=(0, 2)
      strides=None
    ] jgr
    jhc:f64[400] = squeeze[dimensions=(1,)] jhb
    jhd:f64[400] = sin jhc
    jhe:f64[400,1] = slice[
      limit_indices=(400, 1)
      start_indices=(0, 0)
      strides=None
    ] jgr
    jhf:f64[400] = squeeze[dimensions=(1,)] jhe
    jhg:f64[400] = cos jhf
    jhh:f64[400,1] = slice[
      limit_indices=(400, 2)
      start_indices=(0, 1)
      strides=None
    ] jgr
    jhi:f64[400] = squeeze[dimensions=(1,)] jhh
    jhj:f64[400] = cos jhi
    jhk:f64[400,1] = slice[
      limit_indices=(400, 3)
      start_indices=(0, 2)
      strides=None
    ] jgr
    jhl:f64[400] = squeeze[dimensions=(1,)] jhk
    jhm:f64[400] = cos jhl
    jhn:f64[400] = mul jhj jhm
    jho:f64[400] = mul jha jhd
    jhp:f64[400] = sub jhn jho
    jhq:f64[400] = mul jha jhm
    jhr:f64[400] = mul jhj jhd
    jhs:f64[400] = add jhq jhr
    jht:f64[400] = mul -0.213 jhs
    jhu:f64[400] = mul -0.213 jha
    jhv:f64[400] = add jht jhu
    jhw:f64[400] = mul 0.213 jgx
    jhx:f64[400] = mul jhw jhp
    jhy:f64[] = convert_element_type[new_dtype=float64 weak_type=False] jgu
    jhz:f64[400] = mul jhy jhg
    jia:f64[400] = add jhx jhz
    jib:f64[400] = mul -0.213 jhj
    jic:f64[400] = mul jib jgx
    jid:f64[400] = sub jia jic
    jie:f64[400] = mul -0.213 jhg
    jif:f64[400] = mul jie jhp
    jig:f64[] = convert_element_type[new_dtype=float64 weak_type=False] jgu
    jih:f64[400] = mul jig jgx
    jii:f64[400] = add jif jih
    jij:f64[400] = mul -0.213 jhg
    jik:f64[400] = mul jij jhj
    jil:f64[400] = add jii jik
    jim:f64[] = select_n False -0.1881 0.1881
    jin:f64[] = convert_element_type[new_dtype=float64 weak_type=False] jim
    jio:f64[400] = add jhv jin
    jip:f64[] = select_n False 0.04675 -0.04675
    jiq:f64[] = convert_element_type[new_dtype=float64 weak_type=False] jip
    jir:f64[400] = add jid jiq
    jis:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] jio
    jit:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] jir
    jiu:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] jil
    jiv:f64[400,3] = concatenate[dimension=1] jis jit jiu
    jiw:f64[400,12] = concatenate[dimension=1] jcg jel jgq jiv
    jix:bool[4] = lt bai 0
    jiy:i64[4] = add bai 12
    jiz:i64[4] = select_n jix bai jiy
    jja:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] jiz
    jjb:i32[4,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(4, 1)] jja
    jjc:f64[400,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 1)
      unique_indices=False
    ] jiw jjb
    jjd:bool[4] = lt bai 0
    jje:i64[4] = add bai 12
    jjf:i64[4] = select_n jjd bai jje
    jjg:i32[4] = convert_element_type[new_dtype=int32 weak_type=False] jjf
    jjh:i32[4,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(4, 1)] jjg
    jji:f64[400,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(1,), start_index_map=(1,))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(400, 1)
      unique_indices=False
    ] hzt jjh
    jjj:f64[400,4] = sub jjc jji
    jjk:f64[400,4] = integer_pow[y=2] jjj
    jjl:f64[400,4] = neg jjk
    jjm:f64[400,4] = div jjl 0.002
    jjn:f64[400,4] = exp jjm
    jjo:f64[400] = reduce_sum[axes=(1,)] jjn
    jjp:f64[400] = div jjo 4.0
    jjq:f64[1,12] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 12)] zu
    jjr:bool[400,12] = gt ipg jjq
    jjs:f64[1,12] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 12)] zu
    jjt:f64[400,12] = sub ipg jjs
    jju:f64[400,12] = add jjt 1.0
    jjv:f64[400,12] = neg jju
    jjw:f64[1,12] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 12)] zu
    jjx:f64[400,12] = sub ipg jjw
    jjy:f64[400,12] = exp jjx
    jjz:f64[400,12] = neg jjy
    jka:f64[400,12] = select_n jjr jjz jjv
    jkb:f64[12] = neg zu
    jkc:f64[1,12] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 12)] jkb
    jkd:bool[400,12] = lt ipg jkc
    jke:f64[1,12] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 12)] zu
    jkf:f64[400,12] = add ipg jke
    jkg:f64[400,12] = sub jkf 1.0
    jkh:f64[400,12] = neg ipg
    jki:f64[1,12] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 12)] zu
    jkj:f64[400,12] = sub jkh jki
    jkk:f64[400,12] = exp jkj
    jkl:f64[400,12] = neg jkk
    jkm:f64[400,12] = select_n jkd jkl jkg
    jkn:f64[400,12] = add jka jkm
    jko:f64[400] = reduce_sum[axes=(1,)] jkn
    jkp:f64[400] = div jko 12.0
    jkq:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] ipi
    jkr:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] ipo
    jks:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] ivk
    jkt:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] ivo
    jku:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] ivs
    jkv:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] ivy
    jkw:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] iwh
    jkx:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] iws
    jky:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] ixe
    jkz:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] iyd
    jla:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] iyv
    jlb:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] izd
    jlc:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] izj
    jld:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] izs
    jle:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] jaa
    jlf:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] jjp
    jlg:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] jkp
    jlh:f64[400,16] = concatenate[dimension=1] jkq jkr jks jkt jku jkv jkw jkx jky
      jkz jla jlb jlc jld jle jlf
    jli:f64[400,17] = concatenate[dimension=1] jlh jlg
    jlj:f64[1,17] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 17)] baj
    jlk:f64[400,17] = mul jlj jli
    jll:f64[400] = reduce_sum[axes=(1,)] jlk
    jlm:f64[400,36] = add gxr 1.0
    jln:f64[36,1] = slice[
      limit_indices=(36, 2)
      start_indices=(0, 1)
      strides=None
    ] vo
    jlo:f64[36] = squeeze[dimensions=(1,)] jln
    jlp:f64[36,1] = slice[
      limit_indices=(36, 1)
      start_indices=(0, 0)
      strides=None
    ] vo
    jlq:f64[36] = squeeze[dimensions=(1,)] jlp
    jlr:f64[36] = sub jlo jlq
    jls:f64[1,36] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 36)] jlr
    jlt:f64[400,36] = mul jlm jls
    jlu:f64[400,36] = div jlt 2.0
    jlv:f64[36,1] = slice[
      limit_indices=(36, 1)
      start_indices=(0, 0)
      strides=None
    ] vo
    jlw:f64[36] = squeeze[dimensions=(1,)] jlv
    jlx:f64[1,36] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 36)] jlw
    jly:f64[400,36] = add jlu jlx
    jlz:f64[400,4] = slice[
      limit_indices=(400, 4)
      start_indices=(0, 0)
      strides=None
    ] jly
    jma:f64[400,1] = slice[
      limit_indices=(400, 3)
      start_indices=(0, 2)
      strides=None
    ] jlz
    jmb:f64[400] = squeeze[dimensions=(1,)] jma
    jmc:f64[400,1] = slice[
      limit_indices=(400, 4)
      start_indices=(0, 3)
      strides=None
    ] jlz
    jmd:f64[400] = squeeze[dimensions=(1,)] jmc
    jme:f64[400] = mul jmb jmd
    jmf:f64[400,1] = slice[
      limit_indices=(400, 1)
      start_indices=(0, 0)
      strides=None
    ] jlz
    jmg:f64[400] = squeeze[dimensions=(1,)] jmf
    jmh:f64[400,1] = slice[
      limit_indices=(400, 2)
      start_indices=(0, 1)
      strides=None
    ] jlz
    jmi:f64[400] = squeeze[dimensions=(1,)] jmh
    jmj:f64[400] = mul jmg jmi
    jmk:f64[400] = add jme jmj
    jml:f64[400,1] = slice[
      limit_indices=(400, 2)
      start_indices=(0, 1)
      strides=None
    ] jlz
    jmm:f64[400] = squeeze[dimensions=(1,)] jml
    jmn:f64[400,1] = slice[
      limit_indices=(400, 2)
      start_indices=(0, 1)
      strides=None
    ] jlz
    jmo:f64[400] = squeeze[dimensions=(1,)] jmn
    jmp:f64[400] = mul jmm jmo
    jmq:f64[400,1] = slice[
      limit_indices=(400, 3)
      start_indices=(0, 2)
      strides=None
    ] jlz
    jmr:f64[400] = squeeze[dimensions=(1,)] jmq
    jms:f64[400,1] = slice[
      limit_indices=(400, 3)
      start_indices=(0, 2)
      strides=None
    ] jlz
    jmt:f64[400] = squeeze[dimensions=(1,)] jms
    jmu:f64[400] = mul jmr jmt
    jmv:f64[400] = add jmp jmu
    jmw:f64[400] = sub 0.5 jmv
    jmx:f64[400] = atan2 jmk jmw
    jmy:f64[400,1] = slice[
      limit_indices=(400, 2)
      start_indices=(0, 1)
      strides=None
    ] jlz
    jmz:f64[400] = squeeze[dimensions=(1,)] jmy
    jna:f64[400,1] = slice[
      limit_indices=(400, 4)
      start_indices=(0, 3)
      strides=None
    ] jlz
    jnb:f64[400] = squeeze[dimensions=(1,)] jna
    jnc:f64[400] = mul jmz jnb
    jnd:f64[400,1] = slice[
      limit_indices=(400, 1)
      start_indices=(0, 0)
      strides=None
    ] jlz
    jne:f64[400] = squeeze[dimensions=(1,)] jnd
    jnf:f64[400,1] = slice[
      limit_indices=(400, 3)
      start_indices=(0, 2)
      strides=None
    ] jlz
    jng:f64[400] = squeeze[dimensions=(1,)] jnf
    jnh:f64[400] = mul jne jng
    jni:f64[400] = sub jnc jnh
    jnj:f64[400] = mul -2.0 jni
    jnk:f64[400] = pjit[name=clip jaxpr=clip1] jnj -1.0 1.0
    jnl:f64[400] = custom_jvp_call[
      call_jaxpr={ lambda ; jnm:f64[400]. let
          jnn:f64[400] = asin jnm
        in (jnn,) }
      jvp_jaxpr_thunk=<function _memoize.<locals>.memoized at 0x7d8349bd3310>
      num_consts=0
      symbolic_zeros=False
    ] jnk
    jno:f64[400,1] = slice[
      limit_indices=(400, 2)
      start_indices=(0, 1)
      strides=None
    ] jlz
    jnp:f64[400] = squeeze[dimensions=(1,)] jno
    jnq:f64[400,1] = slice[
      limit_indices=(400, 3)
      start_indices=(0, 2)
      strides=None
    ] jlz
    jnr:f64[400] = squeeze[dimensions=(1,)] jnq
    jns:f64[400] = mul jnp jnr
    jnt:f64[400,1] = slice[
      limit_indices=(400, 1)
      start_indices=(0, 0)
      strides=None
    ] jlz
    jnu:f64[400] = squeeze[dimensions=(1,)] jnt
    jnv:f64[400,1] = slice[
      limit_indices=(400, 4)
      start_indices=(0, 3)
      strides=None
    ] jlz
    jnw:f64[400] = squeeze[dimensions=(1,)] jnv
    jnx:f64[400] = mul jnu jnw
    jny:f64[400] = add jns jnx
    jnz:f64[400,1] = slice[
      limit_indices=(400, 3)
      start_indices=(0, 2)
      strides=None
    ] jlz
    joa:f64[400] = squeeze[dimensions=(1,)] jnz
    job:f64[400,1] = slice[
      limit_indices=(400, 3)
      start_indices=(0, 2)
      strides=None
    ] jlz
    joc:f64[400] = squeeze[dimensions=(1,)] job
    jod:f64[400] = mul joa joc
    joe:f64[400,1] = slice[
      limit_indices=(400, 4)
      start_indices=(0, 3)
      strides=None
    ] jlz
    jof:f64[400] = squeeze[dimensions=(1,)] joe
    jog:f64[400,1] = slice[
      limit_indices=(400, 4)
      start_indices=(0, 3)
      strides=None
    ] jlz
    joh:f64[400] = squeeze[dimensions=(1,)] jog
    joi:f64[400] = mul jof joh
    joj:f64[400] = add jod joi
    jok:f64[400] = sub 0.5 joj
    jol:f64[400] = atan2 jny jok
    jom:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] jmx
    jon:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] jnl
    joo:f64[400,1] = broadcast_in_dim[broadcast_dimensions=(0,) shape=(400, 1)] jol
    jop:f64[400,3] = concatenate[dimension=1] jom jon joo
    joq:f64[400,1] = slice[
      limit_indices=(400, 1)
      start_indices=(0, 0)
      strides=(1, 1)
    ] jop
    jor:f64[400] = squeeze[dimensions=(1,)] joq
    jos:f64[400,1] = slice[
      limit_indices=(400, 2)
      start_indices=(0, 1)
      strides=(1, 1)
    ] jop
    jot:f64[400] = squeeze[dimensions=(1,)] jos
    jou:f64[400] = abs jor
    jov:bool[400] = lt jou 0.785
    jow:f64[400] = abs jot
    jox:bool[400] = lt jow 0.785
    joy:bool[400] = and jov jox
    joz:f64[400] = pjit[
      name=_where
      jaxpr={ lambda ; jpa:bool[400] jpb:f64[] jpc:f64[]. let
          jpd:f64[400] = broadcast_in_dim[broadcast_dimensions=() shape=(400,)] jpc
          jpe:f64[400] = broadcast_in_dim[broadcast_dimensions=() shape=(400,)] jpb
          jpf:f64[400] = select_n jpa jpd jpe
        in (jpf,) }
    ] joy 1.0 0.0
    jpg:f64[400] = convert_element_type[new_dtype=float64 weak_type=False] joz
    jph:f64[400] = add jll jpg
    jpi:f64[400] = sub jph 1.0
    jpj:f64[400] = broadcast_in_dim[broadcast_dimensions=() shape=(400,)] 0.0
    jpk:f64[400] = pjit[
      name=_where
      jaxpr={ lambda ; jpl:f64[400] jpm:f64[400] jpn:f64[400]. let
          jpo:bool[400] = ne jpl 0.0
          jpp:f64[400] = select_n jpo jpn jpm
        in (jpp,) }
    ] bal jpj ban
    jpq:f64[400] = broadcast_in_dim[broadcast_dimensions=() shape=(400,)] 0.0
    jpr:f64[400,180] jps:f64[400] jpt:f64[400,180] jpu:f64[400,36] jpv:f64[400] jpw:f64[400]
      jpx:f64[1,400] = scan[
      _split_transpose=False
      jaxpr={ lambda ; jpy:f64[36,2] jpz:f64[400,180] jqa:f64[400] jqb:f64[400,180]
          jqc:f64[400,36] jqd:f64[400] jqe:f64[400]. let
          jqf:f64[400,36] = add jqc 1.0
          jqg:f64[36,1] = slice[
            limit_indices=(36, 2)
            start_indices=(0, 1)
            strides=None
          ] jpy
          jqh:f64[36] = squeeze[dimensions=(1,)] jqg
          jqi:f64[36,1] = slice[
            limit_indices=(36, 1)
            start_indices=(0, 0)
            strides=None
          ] jpy
          jqj:f64[36] = squeeze[dimensions=(1,)] jqi
          jqk:f64[36] = sub jqh jqj
          jql:f64[1,36] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 36)
          ] jqk
          jqm:f64[400,36] = mul jqf jql
          jqn:f64[400,36] = div jqm 2.0
          jqo:f64[36,1] = slice[
            limit_indices=(36, 1)
            start_indices=(0, 0)
            strides=None
          ] jpy
          jqp:f64[36] = squeeze[dimensions=(1,)] jqo
          jqq:f64[1,36] = broadcast_in_dim[
            broadcast_dimensions=(1,)
            shape=(1, 36)
          ] jqp
          jqr:f64[400,36] = add jqn jqq
          jqs:f64[400,4] = slice[
            limit_indices=(400, 4)
            start_indices=(0, 0)
            strides=None
          ] jqr
          jqt:f64[400,1] = slice[
            limit_indices=(400, 3)
            start_indices=(0, 2)
            strides=None
          ] jqs
          jqu:f64[400] = squeeze[dimensions=(1,)] jqt
          jqv:f64[400,1] = slice[
            limit_indices=(400, 4)
            start_indices=(0, 3)
            strides=None
          ] jqs
          jqw:f64[400] = squeeze[dimensions=(1,)] jqv
          jqx:f64[400] = mul jqu jqw
          jqy:f64[400,1] = slice[
            limit_indices=(400, 1)
            start_indices=(0, 0)
            strides=None
          ] jqs
          jqz:f64[400] = squeeze[dimensions=(1,)] jqy
          jra:f64[400,1] = slice[
            limit_indices=(400, 2)
            start_indices=(0, 1)
            strides=None
          ] jqs
          jrb:f64[400] = squeeze[dimensions=(1,)] jra
          jrc:f64[400] = mul jqz jrb
          jrd:f64[400] = add jqx jrc
          jre:f64[400,1] = slice[
            limit_indices=(400, 2)
            start_indices=(0, 1)
            strides=None
          ] jqs
          jrf:f64[400] = squeeze[dimensions=(1,)] jre
          jrg:f64[400,1] = slice[
            limit_indices=(400, 2)
            start_indices=(0, 1)
            strides=None
          ] jqs
          jrh:f64[400] = squeeze[dimensions=(1,)] jrg
          jri:f64[400] = mul jrf jrh
          jrj:f64[400,1] = slice[
            limit_indices=(400, 3)
            start_indices=(0, 2)
            strides=None
          ] jqs
          jrk:f64[400] = squeeze[dimensions=(1,)] jrj
          jrl:f64[400,1] = slice[
            limit_indices=(400, 3)
            start_indices=(0, 2)
            strides=None
          ] jqs
          jrm:f64[400] = squeeze[dimensions=(1,)] jrl
          jrn:f64[400] = mul jrk jrm
          jro:f64[400] = add jri jrn
          jrp:f64[400] = sub 0.5 jro
          jrq:f64[400] = atan2 jrd jrp
          jrr:f64[400,1] = slice[
            limit_indices=(400, 2)
            start_indices=(0, 1)
            strides=None
          ] jqs
          jrs:f64[400] = squeeze[dimensions=(1,)] jrr
          jrt:f64[400,1] = slice[
            limit_indices=(400, 4)
            start_indices=(0, 3)
            strides=None
          ] jqs
          jru:f64[400] = squeeze[dimensions=(1,)] jrt
          jrv:f64[400] = mul jrs jru
          jrw:f64[400,1] = slice[
            limit_indices=(400, 1)
            start_indices=(0, 0)
            strides=None
          ] jqs
          jrx:f64[400] = squeeze[dimensions=(1,)] jrw
          jry:f64[400,1] = slice[
            limit_indices=(400, 3)
            start_indices=(0, 2)
            strides=None
          ] jqs
          jrz:f64[400] = squeeze[dimensions=(1,)] jry
          jsa:f64[400] = mul jrx jrz
          jsb:f64[400] = sub jrv jsa
          jsc:f64[400] = mul -2.0 jsb
          jsd:f64[400] = pjit[
            name=clip
            jaxpr={ lambda ; jse:f64[400] jsf:f64[] jsg:f64[]. let
                jsh:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] jsf
                jsi:f64[400] = max jsh jse
                jsj:f64[] = convert_element_type[
                  new_dtype=float64
                  weak_type=False
                ] jsg
                jsk:f64[400] = min jsj jsi
              in (jsk,) }
          ] jsc -1.0 1.0
          jsl:f64[400] = custom_jvp_call[
            call_jaxpr={ lambda ; jsm:f64[400]. let
                jsn:f64[400] = asin jsm
              in (jsn,) }
            jvp_jaxpr_thunk=<function _memoize.<locals>.memoized at 0x7d832d544f70>
            num_consts=0
            symbolic_zeros=False
          ] jsd
          jso:f64[400,1] = slice[
            limit_indices=(400, 2)
            start_indices=(0, 1)
            strides=None
          ] jqs
          jsp:f64[400] = squeeze[dimensions=(1,)] jso
          jsq:f64[400,1] = slice[
            limit_indices=(400, 3)
            start_indices=(0, 2)
            strides=None
          ] jqs
          jsr:f64[400] = squeeze[dimensions=(1,)] jsq
          jss:f64[400] = mul jsp jsr
          jst:f64[400,1] = slice[
            limit_indices=(400, 1)
            start_indices=(0, 0)
            strides=None
          ] jqs
          jsu:f64[400] = squeeze[dimensions=(1,)] jst
          jsv:f64[400,1] = slice[
            limit_indices=(400, 4)
            start_indices=(0, 3)
            strides=None
          ] jqs
          jsw:f64[400] = squeeze[dimensions=(1,)] jsv
          jsx:f64[400] = mul jsu jsw
          jsy:f64[400] = add jss jsx
          jsz:f64[400,1] = slice[
            limit_indices=(400, 3)
            start_indices=(0, 2)
            strides=None
          ] jqs
          jta:f64[400] = squeeze[dimensions=(1,)] jsz
          jtb:f64[400,1] = slice[
            limit_indices=(400, 3)
            start_indices=(0, 2)
            strides=None
          ] jqs
          jtc:f64[400] = squeeze[dimensions=(1,)] jtb
          jtd:f64[400] = mul jta jtc
          jte:f64[400,1] = slice[
            limit_indices=(400, 4)
            start_indices=(0, 3)
            strides=None
          ] jqs
          jtf:f64[400] = squeeze[dimensions=(1,)] jte
          jtg:f64[400,1] = slice[
            limit_indices=(400, 4)
            start_indices=(0, 3)
            strides=None
          ] jqs
          jth:f64[400] = squeeze[dimensions=(1,)] jtg
          jti:f64[400] = mul jtf jth
          jtj:f64[400] = add jtd jti
          jtk:f64[400] = sub 0.5 jtj
          jtl:f64[400] = atan2 jsy jtk
          jtm:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] jrq
          jtn:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] jsl
          jto:f64[400,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 1)
          ] jtl
          jtp:f64[400,3] = concatenate[dimension=1] jtm jtn jto
          jtq:f64[400,1] = slice[
            limit_indices=(400, 1)
            start_indices=(0, 0)
            strides=(1, 1)
          ] jtp
          jtr:f64[400] = squeeze[dimensions=(1,)] jtq
          jts:f64[400,1] = slice[
            limit_indices=(400, 2)
            start_indices=(0, 1)
            strides=(1, 1)
          ] jtp
          jtt:f64[400] = squeeze[dimensions=(1,)] jts
          jtu:f64[400] = abs jtr
          jtv:bool[400] = lt jtu 0.785
          jtw:f64[400] = abs jtt
          jtx:bool[400] = lt jtw 0.785
          jty:bool[400] = and jtv jtx
          jtz:f64[400] = pjit[
            name=_where
            jaxpr={ lambda ; jua:bool[400] jub:f64[] juc:f64[]. let
                jud:f64[400] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(400,)
                ] juc
                jue:f64[400] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(400,)
                ] jub
                juf:f64[400] = select_n jua jud jue
              in (juf,) }
          ] jty 1.0 0.0
          jug:f64[400] = sub 1.0 jtz
          juh:f64[400,144] = slice[
            limit_indices=(400, 144)
            start_indices=(0, 0)
            strides=None
          ] jpz
          jui:f64[400,180] = concatenate[dimension=1] jqc juh
        in (jui, jug, jqb, jqc, jqd, jqe, jqd) }
      length=1
      linear=(False, False, False, False, False, False, False)
      num_carry=6
      num_consts=1
      reverse=False
      unroll=1
    ] vo bak jpq bam gxr jpi jpk
    juj:f64[400] = reduce_sum[axes=(0,)] jpx
    juk:f64[400] = add jpw 1.0
    jul:bool[400] = ge juk 1000.0
    jum:bool[400] = and jul False
    jun:f64[400] = pjit[
      name=_where
      jaxpr={ lambda ; juo:bool[400] jup:f64[] juq:f64[400]. let
          jur:f64[400] = broadcast_in_dim[broadcast_dimensions=() shape=(400,)] jup
          jus:f64[400] = select_n juo juq jur
        in (jus,) }
    ] jum 1.0 jps
    jut:bool[400] = ge juk 1000.0
    juu:f64[400] = sub 1.0 jps
    juv:f64[400] = pjit[
      name=_where
      jaxpr={ lambda ; juw:bool[400] jux:f64[400] juy:f64[]. let
          juz:f64[400] = broadcast_in_dim[broadcast_dimensions=() shape=(400,)] juy
          jva:f64[400] = select_n juw juz jux
        in (jva,) }
    ] jut juu 0.0
    jvb:f64[400,1] = reshape[dimensions=None new_sizes=(400, 1)] jun
    jvc:f64[400,180] = pjit[
      name=_where
      jaxpr={ lambda ; jvd:f64[400,1] jve:f64[400,180] jvf:f64[400,180]. let
          jvg:bool[400,1] = ne jvd 0.0
          jvh:bool[400] = squeeze[dimensions=(1,)] jvg
          jvi:bool[400,180] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(400, 180)
          ] jvh
          jvj:f64[400,180] = select_n jvi jvf jve
        in (jvj,) }
    ] jvb jpt jpr
    jvk:f64[400] = sub 1.0 jun
    jvl:f64[400,1] = reshape[dimensions=None new_sizes=(400, 1)] juj
    jvm:f64[400,1] = reshape[dimensions=None new_sizes=(400, 1)] jvk
    jvn:f64[400,1] = reshape[dimensions=None new_sizes=(400, 1)] juv
    jvo:f64[400,1] = convert_element_type[new_dtype=float64 weak_type=False] jvm
    jvp:f64[400,1] = convert_element_type[new_dtype=float64 weak_type=False] jvn
    jvq:f64[400,372] = concatenate[dimension=1] bak bds jvl jvo jvc jvp
    jvr:i32[] = sub 4000 bap
    jvs:i32[] = sub jvr 400
    jvt:i32[] = min 0 jvs
    jvu:bool[] = ne jvt 0
    jvv:i32[] = convert_element_type[new_dtype=int32 weak_type=False] jvu
    jvw:f64[4000,372] = cond[
      branches=(
        { lambda ; jvx_:f64[4000,372] jvy_:i32[] jvz:f64[4000,372]. let
            
          in (jvz,) }
        { lambda ; jwa:f64[4000,372] jwb:i32[] jwc_:f64[4000,372]. let
            jwd:f64[4000,372] = pjit[
              name=_roll_dynamic
              jaxpr={ lambda ; jwe:f64[4000,372] jwf:i32[]. let
                  jwg:i32[1] = broadcast_in_dim[
                    broadcast_dimensions=()
                    shape=(1,)
                  ] jwf
                  jwh:i32[1] = slice[
                    limit_indices=(1,)
                    start_indices=(0,)
                    strides=(1,)
                  ] jwg
                  jwi:i32[] = squeeze[dimensions=(0,)] jwh
                  jwj:i32[] = max 4000 1
                  jwk:i32[] = pjit[
                    name=remainder
                    jaxpr={ lambda ; jwl:i32[] jwm:i32[]. let
                        jwn:bool[] = eq jwm 0
                        jwo:i32[] = pjit[name=_where jaxpr=_where3] jwn 1 jwm
                        jwp:i32[] = rem jwl jwo
                        jwq:bool[] = ne jwp 0
                        jwr:bool[] = lt jwp 0
                        jws:bool[] = lt jwo 0
                        jwt:bool[] = ne jwr jws
                        jwu:bool[] = and jwt jwq
                        jwv:i32[] = add jwp jwo
                        jww:i32[] = select_n jwu jwp jwv
                      in (jww,) }
                  ] jwi jwj
                  jwx:f64[8000,372] = concatenate[dimension=0] jwe jwe
                  jwy:i32[] = sub 4000 jwk
                  jwz:bool[] = lt jwy 0
                  jxa:i32[] = add jwy 8000
                  jxb:i32[] = select_n jwz jwy jxa
                  jxc:i32[] = add 0 372
                  jxd:i32[] = select_n False 0 jxc
                  jxe:f64[4000,372] = dynamic_slice[slice_sizes=(4000, 372)] jwx
                    jxb jxd
                in (jxe,) }
            ] jwa jwb
          in (jwd,) }
      )
      linear=(False, False, False)
    ] jvv bao jvt bao
    jxf:i32[] = add bap jvt
    jxg:bool[] = lt jxf 0
    jxh:i32[] = add jxf 4000
    jxi:i32[] = select_n jxg jxf jxh
    jxj:i32[] = add 0 372
    jxk:i32[] = select_n False 0 jxj
    jxl:f64[4000,372] = dynamic_update_slice jvw jvq jxi jxk
    jxm:i32[] = add jxf 400
    jxn:i32[] = pjit[
      name=remainder
      jaxpr={ lambda ; jxo:i32[] jxp:i64[]. let
          jxq:i32[] = convert_element_type[new_dtype=int32 weak_type=False] jxp
          jxr:bool[] = eq jxq 0
          jxs:i32[] = pjit[name=_where jaxpr=_where3] jxr 1 jxq
          jxt:i32[] = rem jxo jxs
          jxu:bool[] = ne jxt 0
          jxv:bool[] = lt jxt 0
          jxw:bool[] = lt jxs 0
          jxx:bool[] = ne jxv jxw
          jxy:bool[] = and jxx jxu
          jxz:i32[] = add jxt jxs
          jya:i32[] = select_n jxy jxt jxz
        in (jya,) }
    ] jxm 4001
    jyb:i32[] = add baq jvt
    jyc:i32[] = max 0 jyb
  in (jvc, jun, jpt, juk, jxl, jxn, jyc, bar, baz) }, ())
During handling of the above exception, another exception occurred:
Traceback (most recent call last):
  File "/home/ant/ssrl/ssrl/scripts/aliengo_train.py", line 248, in <module>
    train_go1()
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
  File "/home/ant/ssrl/ssrl/scripts/aliengo_train.py", line 199, in train_go1
    state = train_fn(
  File "/home/ant/ssrl/ssrl/brax/training/agents/ssrl/train.py", line 263, in train
    env_state) = sim_training_epoch_with_timing(
  File "/home/ant/ssrl/ssrl/brax/training/agents/ssrl/train.py", line 963, in sim_training_epoch_with_timing
    sac_buffer_state, sac_metrics) = sim_training_epoch(
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/traceback_util.py", line 179, in reraise_with_filtered_traceback
    return fun(*args, **kwargs)
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/pjit.py", line 327, in cache_miss
    outs, out_flat, out_tree, args_flat, jaxpr, attrs_tracked = _python_pjit_helper(
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/pjit.py", line 185, in _python_pjit_helper
    out_flat = pjit_p.bind(*args_flat, **params)
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/core.py", line 2834, in bind
    return self.bind_with_trace(top_trace, args, params)
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/core.py", line 420, in bind_with_trace
    out = trace.process_primitive(self, map(trace.full_raise, args), params)
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/core.py", line 921, in process_primitive
    return primitive.impl(*tracers, **params)
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/pjit.py", line 1635, in _pjit_call_impl
    return xc._xla.pjit(
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/pjit.py", line 1614, in call_impl_cache_miss
    out_flat, compiled = _pjit_call_impl_python(
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/pjit.py", line 1536, in _pjit_call_impl_python
    compiled = _resolve_and_lower(
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/pjit.py", line 1503, in _resolve_and_lower
    lowered = _pjit_lower(
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/pjit.py", line 1645, in _pjit_lower
    return _pjit_lower_cached(*args, **kwargs)
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/pjit.py", line 1685, in _pjit_lower_cached
    return pxla.lower_sharding_computation(
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/profiler.py", line 335, in wrapper
    return func(*args, **kwargs)
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/pxla.py", line 2253, in lower_sharding_computation
    nreps, tuple_args, shape_poly_state) = _cached_lowering_to_hlo(
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/pxla.py", line 2017, in _cached_lowering_to_hlo
    lowering_result = mlir.lower_jaxpr_to_module(
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/mlir.py", line 952, in lower_jaxpr_to_module
    lower_jaxpr_to_fun(
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/mlir.py", line 1394, in lower_jaxpr_to_fun
    out_vals, tokens_out = jaxpr_subcomp(
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/mlir.py", line 1585, in jaxpr_subcomp
    ans = lower_per_platform(rule_ctx, str(eqn.primitive),
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/mlir.py", line 1693, in lower_per_platform
    output = kept_rules[0](ctx, *rule_args, **rule_kwargs)
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/mlir.py", line 1794, in f_lowered
    out, tokens = jaxpr_subcomp(
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/mlir.py", line 1585, in jaxpr_subcomp
    ans = lower_per_platform(rule_ctx, str(eqn.primitive),
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/mlir.py", line 1693, in lower_per_platform
    output = kept_rules[0](ctx, *rule_args, **rule_kwargs)
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/lax/control_flow/loops.py", line 1784, in _while_lowering
    new_z, tokens_out = mlir.jaxpr_subcomp(
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/mlir.py", line 1585, in jaxpr_subcomp
    ans = lower_per_platform(rule_ctx, str(eqn.primitive),
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/mlir.py", line 1693, in lower_per_platform
    output = kept_rules[0](ctx, *rule_args, **rule_kwargs)
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/mlir.py", line 1868, in core_call_lowering
    out_nodes, tokens = call_lowering(
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/mlir.py", line 1853, in call_lowering
    symbol_name = _lower_jaxpr_to_fun_cached(
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/mlir.py", line 1812, in _lower_jaxpr_to_fun_cached
    func_op = lower_jaxpr_to_fun(
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/mlir.py", line 1394, in lower_jaxpr_to_fun
    out_vals, tokens_out = jaxpr_subcomp(
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/mlir.py", line 1585, in jaxpr_subcomp
    ans = lower_per_platform(rule_ctx, str(eqn.primitive),
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/mlir.py", line 1693, in lower_per_platform
    output = kept_rules[0](ctx, *rule_args, **rule_kwargs)
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/pjit.py", line 1842, in _pjit_lowering
    func = _pjit_cached_lower_jaxpr_to_fun(
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/pjit.py", line 1825, in _pjit_cached_lower_jaxpr_to_fun
    func = mlir.lower_jaxpr_to_fun(
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/mlir.py", line 1394, in lower_jaxpr_to_fun
    out_vals, tokens_out = jaxpr_subcomp(
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/mlir.py", line 1585, in jaxpr_subcomp
    ans = lower_per_platform(rule_ctx, str(eqn.primitive),
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/mlir.py", line 1693, in lower_per_platform
    output = kept_rules[0](ctx, *rule_args, **rule_kwargs)
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/mlir.py", line 1794, in f_lowered
    out, tokens = jaxpr_subcomp(
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/mlir.py", line 1585, in jaxpr_subcomp
    ans = lower_per_platform(rule_ctx, str(eqn.primitive),
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/mlir.py", line 1693, in lower_per_platform
    output = kept_rules[0](ctx, *rule_args, **rule_kwargs)
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/lax/control_flow/loops.py", line 1784, in _while_lowering
    new_z, tokens_out = mlir.jaxpr_subcomp(
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/mlir.py", line 1585, in jaxpr_subcomp
    ans = lower_per_platform(rule_ctx, str(eqn.primitive),
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/mlir.py", line 1693, in lower_per_platform
    output = kept_rules[0](ctx, *rule_args, **rule_kwargs)
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/mlir.py", line 1868, in core_call_lowering
    out_nodes, tokens = call_lowering(
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/mlir.py", line 1853, in call_lowering
    symbol_name = _lower_jaxpr_to_fun_cached(
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/mlir.py", line 1812, in _lower_jaxpr_to_fun_cached
    func_op = lower_jaxpr_to_fun(
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/mlir.py", line 1394, in lower_jaxpr_to_fun
    out_vals, tokens_out = jaxpr_subcomp(
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/mlir.py", line 1585, in jaxpr_subcomp
    ans = lower_per_platform(rule_ctx, str(eqn.primitive),
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/mlir.py", line 1693, in lower_per_platform
    output = kept_rules[0](ctx, *rule_args, **rule_kwargs)
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/mlir.py", line 1794, in f_lowered
    out, tokens = jaxpr_subcomp(
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/mlir.py", line 1585, in jaxpr_subcomp
    ans = lower_per_platform(rule_ctx, str(eqn.primitive),
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/mlir.py", line 1693, in lower_per_platform
    output = kept_rules[0](ctx, *rule_args, **rule_kwargs)
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/lax/control_flow/loops.py", line 1784, in _while_lowering
    new_z, tokens_out = mlir.jaxpr_subcomp(
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/mlir.py", line 1585, in jaxpr_subcomp
    ans = lower_per_platform(rule_ctx, str(eqn.primitive),
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/mlir.py", line 1693, in lower_per_platform
    output = kept_rules[0](ctx, *rule_args, **rule_kwargs)
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/mlir.py", line 1868, in core_call_lowering
    out_nodes, tokens = call_lowering(
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/mlir.py", line 1853, in call_lowering
    symbol_name = _lower_jaxpr_to_fun_cached(
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/mlir.py", line 1812, in _lower_jaxpr_to_fun_cached
    func_op = lower_jaxpr_to_fun(
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/mlir.py", line 1394, in lower_jaxpr_to_fun
    out_vals, tokens_out = jaxpr_subcomp(
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/mlir.py", line 1585, in jaxpr_subcomp
    ans = lower_per_platform(rule_ctx, str(eqn.primitive),
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/mlir.py", line 1693, in lower_per_platform
    output = kept_rules[0](ctx, *rule_args, **rule_kwargs)
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/pjit.py", line 1842, in _pjit_lowering
    func = _pjit_cached_lower_jaxpr_to_fun(
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/pjit.py", line 1825, in _pjit_cached_lower_jaxpr_to_fun
    func = mlir.lower_jaxpr_to_fun(
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/mlir.py", line 1394, in lower_jaxpr_to_fun
    out_vals, tokens_out = jaxpr_subcomp(
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/interpreters/mlir.py", line 1546, in jaxpr_subcomp
    with (source_info_util.user_context(eqn.source_info.traceback), loc,
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/contextlib.py", line 119, in __enter__
    return next(self.gen)
  File "/home/ant/miniforge3/envs/ssrl/lib/python3.9/site-packages/jax/_src/source_info_util.py", line 242, in user_context
    _source_info_context.context = _source_info_context.context.replace(
KeyboardInterrupt