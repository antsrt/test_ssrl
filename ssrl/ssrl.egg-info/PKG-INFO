Metadata-Version: 2.1
Name: ssrl
Version: 0.1.0
Summary: Learning to Walk from Three Minutes of Real-World Data with Semi-structured Dynamics Models
Home-page: https://github.com/CLeARoboticsLab/ssrl
Author: Jacob Levy
Author-email: jake.levy@utexas.edu
License: Apache 2.0
Description-Content-Type: text/markdown
Requires-Dist: absl-py
Requires-Dist: dataclasses; python_version < "3.7"
Requires-Dist: dm_env
Requires-Dist: etils
Requires-Dist: flask
Requires-Dist: flask_cors
Requires-Dist: flax
Requires-Dist: grpcio
Requires-Dist: gym
Requires-Dist: jax>=0.4.6
Requires-Dist: jaxlib>=0.4.6
Requires-Dist: jaxopt
Requires-Dist: jinja2
Requires-Dist: mujoco
Requires-Dist: numpy
Requires-Dist: optax
Requires-Dist: Pillow
Requires-Dist: pytinyrenderer
Requires-Dist: scipy
Requires-Dist: tensorboardX
Requires-Dist: trimesh==3.9.35
Requires-Dist: typing-extensions
Provides-Extra: develop
Requires-Dist: pytest; extra == "develop"
Requires-Dist: transforms3d; extra == "develop"

# SSRL

Contains our implementation for Semi-structured Reinforcement Learning (SSRL). Physics simulation and computation of the Lagrangian dynamics are performed using Brax; the code here was forked from the [Brax repository](https://github.com/google/brax).

## Installation

First, if [conda](https://docs.anaconda.com/miniconda/miniconda-install/) / [mamba](https://mamba.readthedocs.io/en/latest/installation/mamba-installation.html) is not already installed, install one of them. mamba is recommended and can be installed with the following:

```sh
curl -L -O "https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-$(uname)-$(uname -m).sh"
bash Miniforge3-$(uname)-$(uname -m).sh
```

Here we create a conda environment, install JAX for CUDA, and then install the package. If CUDA is not available, follow the CPU installation instructions [here](https://github.com/jax-ml/jax). Starting in the `ssrl/ssrl` directory:

```sh
conda env create -n ssrl --file environment.yml
conda activate ssrl
pip install -U "jax[cuda12_pip]" -f https://storage.googleapis.com/jax-releases/jax_cuda_releases.html
pip install -e .
```

## Go1 Simulated Training

Note: configuration is found in `scripts/configs/go1.yaml`.
Note: Wandb logging can be turned on/off in the `wandb` section of `scripts/configs/go1.yaml`.

Train using SSRL with default settings:

```sh
python scripts/go1_train.py
```

Train using black-box models:

```sh
python scripts/go1_train.py ssrl_dynamics_fn=mbpo
```

Training with a single-step loss:

```sh
python scripts/go1_train.py ssrl.model_loss_horizon=1
```

Training can be rendered to [wandb](https://wandb.ai/) by setting `wandb.entity` to your organization, `wandb.log_ssrl` to `true` and `render_epoch_interval` to the number of epochs between renders:

```sh
python scripts/go1_train.py wandb.entity=<YOUR_ORG_HERE> wandb.log_ssrl=true render_epoch_interval=10
```

![SSRL Simulation](../media/sim.gif)

## Simulated RL Benchmarks

Run SSRL on a standard RL benchmark with the following command, replacing `<env_name_here>` with `ant2`, `hopper2`, or `walker2d2`:

```sh
python scripts/rl_benchmarks.py env=<env_name_here>
```
